{"java-gitlab-api-4.0.0.jar": [["org.gitlab.api.GitlabAPIException", "org.gitlab.api.GitlabAPIException(java.lang.String, java.lang.Integer, java.lang.Throwable)", "public org.gitlab.api.GitlabAPIException(java.lang.String, java.lang.Integer, java.lang.Throwable)"], ["int", "org.gitlab.api.GitlabAPIException.getResponseCode()", "public int getResponseCode()"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.models.GitlabProjectHook()", "public org.gitlab.api.models.GitlabProjectHook()"], ["java.lang.String", "org.gitlab.api.models.GitlabProjectHook.getId()", "public java.lang.String getId()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setId(java.lang.String)", "public void setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProjectHook.getUrl()", "public java.lang.String getUrl()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setUrl(java.lang.String)", "public void setUrl(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProjectHook.getProjectId()", "public java.lang.Integer getProjectId()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setProjectId(java.lang.Integer)", "public void setProjectId(java.lang.Integer)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.getPushEvents()", "public boolean getPushEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setPushEvents(boolean)", "public void setPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.getIssueEvents()", "public boolean getIssueEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setIssueEvents(boolean)", "public void setIssueEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.isMergeRequestsEvents()", "public boolean isMergeRequestsEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setMergeRequestsEvents(boolean)", "public void setMergeRequestsEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.isTagPushEvents()", "public boolean isTagPushEvents()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setTagPushEvents(boolean)", "public void setTagPushEvents(boolean)"], ["java.util.Date", "org.gitlab.api.models.GitlabProjectHook.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabProjectHook.isSslVerificationEnabled()", "public boolean isSslVerificationEnabled()"], ["void", "org.gitlab.api.models.GitlabProjectHook.setSslVerificationEnabled(boolean)", "public void setSslVerificationEnabled(boolean)"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.models.GitlabMergeRequest()", "public org.gitlab.api.models.GitlabMergeRequest()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getMilestoneId()", "public java.lang.Integer getMilestoneId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMilestoneId(java.lang.Integer)", "public void setMilestoneId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getIid()", "public java.lang.Integer getIid()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setIid(java.lang.Integer)", "public void setIid(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getTargetBranch()", "public java.lang.String getTargetBranch()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setTargetBranch(java.lang.String)", "public void setTargetBranch(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getSourceBranch()", "public java.lang.String getSourceBranch()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setSourceBranch(java.lang.String)", "public void setSourceBranch(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getProjectId()", "public java.lang.Integer getProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setProjectId(java.lang.Integer)", "public void setProjectId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getSourceProjectId()", "public java.lang.Integer getSourceProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setSourceProjectId(java.lang.Integer)", "public void setSourceProjectId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabMergeRequest.isClosed()", "public boolean isClosed()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setClosed(boolean)", "public void setClosed(boolean)"], ["boolean", "org.gitlab.api.models.GitlabMergeRequest.isMerged()", "public boolean isMerged()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMerged(boolean)", "public void setMerged(boolean)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabMergeRequest.getAuthor()", "public org.gitlab.api.models.GitlabUser getAuthor()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setAuthor(org.gitlab.api.models.GitlabUser)", "public void setAuthor(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabMergeRequest.getAssignee()", "public org.gitlab.api.models.GitlabUser getAssignee()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setAssignee(org.gitlab.api.models.GitlabUser)", "public void setAssignee(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getState()", "public java.lang.String getState()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setState(java.lang.String)", "public void setState(java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.models.GitlabMergeRequest.getMilestone()", "public org.gitlab.api.models.GitlabMilestone getMilestone()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMilestone(org.gitlab.api.models.GitlabMilestone)", "public void setMilestone(org.gitlab.api.models.GitlabMilestone)"], ["java.lang.String[]", "org.gitlab.api.models.GitlabMergeRequest.getLabels()", "public java.lang.String[] getLabels()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setLabels(java.lang.String[])", "public void setLabels(java.lang.String[])"], ["int", "org.gitlab.api.models.GitlabMergeRequest.getUpvotes()", "public int getUpvotes()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setUpvotes(int)", "public void setUpvotes(int)"], ["int", "org.gitlab.api.models.GitlabMergeRequest.getDownvotes()", "public int getDownvotes()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setDownvotes(int)", "public void setDownvotes(int)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequest.getTargetProjectId()", "public java.lang.Integer getTargetProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setTargetProjectId(java.lang.Integer)", "public void setTargetProjectId(java.lang.Integer)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequest.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequest.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.List<org.gitlab.api.models.GitlabCommitDiff>", "org.gitlab.api.models.GitlabMergeRequest.getChanges()", "public java.util.List<org.gitlab.api.models.GitlabCommitDiff> getChanges()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setChanges(java.util.List<org.gitlab.api.models.GitlabCommitDiff>)", "public void setChanges(java.util.List<org.gitlab.api.models.GitlabCommitDiff>)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getMergeCommitSHA()", "public java.lang.String getMergeCommitSHA()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMergeCommitSHA(java.lang.String)", "public void setMergeCommitSHA(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getMergeStatus()", "public java.lang.String getMergeStatus()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setMergeStatus(java.lang.String)", "public void setMergeStatus(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getWebUrl()", "public java.lang.String getWebUrl()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setWebUrl(java.lang.String)", "public void setWebUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequest.getSha()", "public java.lang.String getSha()"], ["void", "org.gitlab.api.models.GitlabMergeRequest.setSha(java.lang.String)", "public void setSha(java.lang.String)"], ["org.gitlab.api.models.GitlabRelease", "org.gitlab.api.models.GitlabRelease()", "public org.gitlab.api.models.GitlabRelease()"], ["java.lang.String", "org.gitlab.api.models.GitlabRelease.getTagName()", "public java.lang.String getTagName()"], ["void", "org.gitlab.api.models.GitlabRelease.setTagName(java.lang.String)", "public void setTagName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRelease.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabRelease.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.models.GitlabLabel()", "public org.gitlab.api.models.GitlabLabel()"], ["java.lang.String", "org.gitlab.api.models.GitlabLabel.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabLabel.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabLabel.getColor()", "public java.lang.String getColor()"], ["void", "org.gitlab.api.models.GitlabLabel.setColor(java.lang.String)", "public void setColor(java.lang.String)"], ["org.gitlab.api.models.GitlabNamespace", "org.gitlab.api.models.GitlabNamespace()", "public org.gitlab.api.models.GitlabNamespace()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabNamespace.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabNamespace.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabNamespace.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getPath()", "public java.lang.String getPath()"], ["void", "org.gitlab.api.models.GitlabNamespace.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getKind()", "public java.lang.String getKind()"], ["void", "org.gitlab.api.models.GitlabNamespace.setKind(java.lang.String)", "public void setKind(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getPlan()", "public java.lang.String getPlan()"], ["void", "org.gitlab.api.models.GitlabNamespace.setPlan(java.lang.String)", "public void setPlan(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getFullPath()", "public java.lang.String getFullPath()"], ["void", "org.gitlab.api.models.GitlabNamespace.setFullPath(java.lang.String)", "public void setFullPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabNamespace.getParentId()", "public java.lang.String getParentId()"], ["void", "org.gitlab.api.models.GitlabNamespace.setParentId(java.lang.String)", "public void setParentId(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabNamespace.getMembersCountWithDescendants()", "public java.lang.Integer getMembersCountWithDescendants()"], ["void", "org.gitlab.api.models.GitlabNamespace.setMembersCountWithDescendants(java.lang.Integer)", "public void setMembersCountWithDescendants(java.lang.Integer)"], ["boolean", "org.gitlab.api.models.GitlabNamespace.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabNamespace.hashCode()", "public int hashCode()"], ["org.gitlab.api.models.GitlabRunner", "org.gitlab.api.models.GitlabRunner()", "public org.gitlab.api.models.GitlabRunner()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabRunner.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabRunner.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabRunner.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.getActive()", "public java.lang.Boolean getActive()"], ["void", "org.gitlab.api.models.GitlabRunner.setActive(java.lang.Boolean)", "public void setActive(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.getShared()", "public java.lang.Boolean getShared()"], ["void", "org.gitlab.api.models.GitlabRunner.setShared(java.lang.Boolean)", "public void setShared(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabRunner.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getVersion()", "public java.lang.String getVersion()"], ["void", "org.gitlab.api.models.GitlabRunner.setVersion(java.lang.String)", "public void setVersion(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getRevision()", "public java.lang.String getRevision()"], ["void", "org.gitlab.api.models.GitlabRunner.setRevision(java.lang.String)", "public void setRevision(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabRunner.getContactedAt()", "public java.util.Date getContactedAt()"], ["void", "org.gitlab.api.models.GitlabRunner.setContactedAt(java.util.Date)", "public void setContactedAt(java.util.Date)"], ["java.util.List<java.lang.String>", "org.gitlab.api.models.GitlabRunner.getTagList()", "public java.util.List<java.lang.String> getTagList()"], ["void", "org.gitlab.api.models.GitlabRunner.setTagList(java.util.List<java.lang.String>)", "public void setTagList(java.util.List<java.lang.String>)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.isRunUntagged()", "public java.lang.Boolean isRunUntagged()"], ["void", "org.gitlab.api.models.GitlabRunner.setRunUntagged(boolean)", "public void setRunUntagged(boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabRunner.isLocked()", "public java.lang.Boolean isLocked()"], ["void", "org.gitlab.api.models.GitlabRunner.setLocked(boolean)", "public void setLocked(boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getPlatform()", "public java.lang.String getPlatform()"], ["void", "org.gitlab.api.models.GitlabRunner.setPlatform(java.lang.String)", "public void setPlatform(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRunner.getArchitecture()", "public java.lang.String getArchitecture()"], ["void", "org.gitlab.api.models.GitlabRunner.setArchitecture(java.lang.String)", "public void setArchitecture(java.lang.String)"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.models.GitlabNote()", "public org.gitlab.api.models.GitlabNote()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabNote.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabNote.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabNote.getBody()", "public java.lang.String getBody()"], ["void", "org.gitlab.api.models.GitlabNote.setBody(java.lang.String)", "public void setBody(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabNote.getAuthor()", "public org.gitlab.api.models.GitlabUser getAuthor()"], ["void", "org.gitlab.api.models.GitlabNote.setAuthor(org.gitlab.api.models.GitlabUser)", "public void setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.util.Date", "org.gitlab.api.models.GitlabNote.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabNote.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabNote.getAttachment()", "public java.lang.String getAttachment()"], ["void", "org.gitlab.api.models.GitlabNote.setAttachment(java.lang.String)", "public void setAttachment(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabNote.isSystem()", "public boolean isSystem()"], ["void", "org.gitlab.api.models.GitlabNote.setSystem(boolean)", "public void setSystem(boolean)"], ["boolean", "org.gitlab.api.models.GitlabNote.isUpvote()", "public boolean isUpvote()"], ["void", "org.gitlab.api.models.GitlabNote.setUpvote(boolean)", "public void setUpvote(boolean)"], ["boolean", "org.gitlab.api.models.GitlabNote.isDownvote()", "public boolean isDownvote()"], ["void", "org.gitlab.api.models.GitlabNote.setDownvote(boolean)", "public void setDownvote(boolean)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.models.GitlabCommit()", "public org.gitlab.api.models.GitlabCommit()"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getId()", "public java.lang.String getId()"], ["void", "org.gitlab.api.models.GitlabCommit.setId(java.lang.String)", "public void setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getShortId()", "public java.lang.String getShortId()"], ["void", "org.gitlab.api.models.GitlabCommit.setShortId(java.lang.String)", "public void setShortId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabCommit.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getMessage()", "public java.lang.String getMessage()"], ["void", "org.gitlab.api.models.GitlabCommit.setMessage(java.lang.String)", "public void setMessage(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getAuthorName()", "public java.lang.String getAuthorName()"], ["void", "org.gitlab.api.models.GitlabCommit.setAuthorName(java.lang.String)", "public void setAuthorName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommit.getAuthorEmail()", "public java.lang.String getAuthorEmail()"], ["void", "org.gitlab.api.models.GitlabCommit.setAuthorEmail(java.lang.String)", "public void setAuthorEmail(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommit.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabCommit.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.List<java.lang.String>", "org.gitlab.api.models.GitlabCommit.getParentIds()", "public java.util.List<java.lang.String> getParentIds()"], ["void", "org.gitlab.api.models.GitlabCommit.setParentIds(java.util.List<java.lang.String>)", "public void setParentIds(java.util.List<java.lang.String>)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommit.getCommittedDate()", "public java.util.Date getCommittedDate()"], ["void", "org.gitlab.api.models.GitlabCommit.setCommittedDate(java.util.Date)", "public void setCommittedDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommit.getAuthoredDate()", "public java.util.Date getAuthoredDate()"], ["void", "org.gitlab.api.models.GitlabCommit.setAuthoredDate(java.util.Date)", "public void setAuthoredDate(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabCommit.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabCommit.hashCode()", "public int hashCode()"], ["org.gitlab.api.models.GitlabSystemHook", "org.gitlab.api.models.GitlabSystemHook()", "public org.gitlab.api.models.GitlabSystemHook()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabSystemHook.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabSystemHook.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabSystemHook.getUrl()", "public java.lang.String getUrl()"], ["void", "org.gitlab.api.models.GitlabSystemHook.setUrl(java.lang.String)", "public void setUrl(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabSystemHook.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabSystemHook.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.models.GitlabProject()", "public org.gitlab.api.models.GitlabProject()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabProject.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabProject.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getNameWithNamespace()", "public java.lang.String getNameWithNamespace()"], ["void", "org.gitlab.api.models.GitlabProject.setNameWithNamespace(java.lang.String)", "public void setNameWithNamespace(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabProject.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getDefaultBranch()", "public java.lang.String getDefaultBranch()"], ["void", "org.gitlab.api.models.GitlabProject.setDefaultBranch(java.lang.String)", "public void setDefaultBranch(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getVisibility()", "public java.lang.String getVisibility()"], ["void", "org.gitlab.api.models.GitlabProject.setVisibility(java.lang.String)", "public void setVisibility(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabProject.getOwner()", "public org.gitlab.api.models.GitlabUser getOwner()"], ["void", "org.gitlab.api.models.GitlabProject.setOwner(org.gitlab.api.models.GitlabUser)", "public void setOwner(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getPath()", "public java.lang.String getPath()"], ["void", "org.gitlab.api.models.GitlabProject.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getPathWithNamespace()", "public java.lang.String getPathWithNamespace()"], ["void", "org.gitlab.api.models.GitlabProject.setPathWithNamespace(java.lang.String)", "public void setPathWithNamespace(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isIssuesEnabled()", "public java.lang.Boolean isIssuesEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setIssuesEnabled(java.lang.Boolean)", "public void setIssuesEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isMergeRequestsEnabled()", "public java.lang.Boolean isMergeRequestsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setMergeRequestsEnabled(java.lang.Boolean)", "public void setMergeRequestsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isSnippetsEnabled()", "public java.lang.Boolean isSnippetsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setSnippetsEnabled(java.lang.Boolean)", "public void setSnippetsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isWallEnabled()", "public java.lang.Boolean isWallEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setWallEnabled(java.lang.Boolean)", "public void setWallEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isWikiEnabled()", "public java.lang.Boolean isWikiEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setWikiEnabled(java.lang.Boolean)", "public void setWikiEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isJobsEnabled()", "public java.lang.Boolean isJobsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setJobsEnabled(java.lang.Boolean)", "public void setJobsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isRequestAccessEnabled()", "public java.lang.Boolean isRequestAccessEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setRequestAccessEnabled(java.lang.Boolean)", "public void setRequestAccessEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isLfsEnabled()", "public java.lang.Boolean isLfsEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setLfsEnabled(java.lang.Boolean)", "public void setLfsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isSharedRunnersEnabled()", "public java.lang.Boolean isSharedRunnersEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setSharedRunnersEnabled(java.lang.Boolean)", "public void setSharedRunnersEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.getOnlyAllowMergeIfPipelineSucceeds()", "public java.lang.Boolean getOnlyAllowMergeIfPipelineSucceeds()"], ["void", "org.gitlab.api.models.GitlabProject.setOnlyAllowMergeIfPipelineSucceeds(java.lang.Boolean)", "public void setOnlyAllowMergeIfPipelineSucceeds(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.getOnlyAllowMergeIfAllDiscussionsAreResolved()", "public java.lang.Boolean getOnlyAllowMergeIfAllDiscussionsAreResolved()"], ["void", "org.gitlab.api.models.GitlabProject.setOnlyAllowMergeIfAllDiscussionsAreResolved(java.lang.Boolean)", "public void setOnlyAllowMergeIfAllDiscussionsAreResolved(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isContainerRegistryEnabled()", "public java.lang.Boolean isContainerRegistryEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setContainerRegistryEnabled(java.lang.Boolean)", "public void setContainerRegistryEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.hasPublicJobs()", "public java.lang.Boolean hasPublicJobs()"], ["void", "org.gitlab.api.models.GitlabProject.setPublicJobs(java.lang.Boolean)", "public void setPublicJobs(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getRunnersToken()", "public java.lang.String getRunnersToken()"], ["void", "org.gitlab.api.models.GitlabProject.setRunnersToken(java.lang.String)", "public void setRunnersToken(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabProject.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabProject.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getSshUrl()", "public java.lang.String getSshUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setSshUrl(java.lang.String)", "public void setSshUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getWebUrl()", "public java.lang.String getWebUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setWebUrl(java.lang.String)", "public void setWebUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getHttpUrl()", "public java.lang.String getHttpUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setHttpUrl(java.lang.String)", "public void setHttpUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabNamespace", "org.gitlab.api.models.GitlabProject.getNamespace()", "public org.gitlab.api.models.GitlabNamespace getNamespace()"], ["void", "org.gitlab.api.models.GitlabProject.setNamespace(org.gitlab.api.models.GitlabNamespace)", "public void setNamespace(org.gitlab.api.models.GitlabNamespace)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isPublic()", "public java.lang.Boolean isPublic()"], ["void", "org.gitlab.api.models.GitlabProject.setPublic(java.lang.Boolean)", "public void setPublic(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isArchived()", "public java.lang.Boolean isArchived()"], ["void", "org.gitlab.api.models.GitlabProject.setArchived(java.lang.Boolean)", "public void setArchived(java.lang.Boolean)"], ["java.util.Date", "org.gitlab.api.models.GitlabProject.getLastActivityAt()", "public java.util.Date getLastActivityAt()"], ["void", "org.gitlab.api.models.GitlabProject.setLastActivityAt(java.util.Date)", "public void setLastActivityAt(java.util.Date)"], ["org.gitlab.api.models.GitlabPermission", "org.gitlab.api.models.GitlabProject.getPermissions()", "public org.gitlab.api.models.GitlabPermission getPermissions()"], ["void", "org.gitlab.api.models.GitlabProject.setPermissions(org.gitlab.api.models.GitlabPermission)", "public void setPermissions(org.gitlab.api.models.GitlabPermission)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getAvatarUrl()", "public java.lang.String getAvatarUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setAvatarUrl(java.lang.String)", "public void setAvatarUrl(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getCreatorId()", "public java.lang.Integer getCreatorId()"], ["void", "org.gitlab.api.models.GitlabProject.setCreatorId(java.lang.Integer)", "public void setCreatorId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getStarCount()", "public java.lang.Integer getStarCount()"], ["void", "org.gitlab.api.models.GitlabProject.setStarCount(java.lang.Integer)", "public void setStarCount(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getForksCount()", "public java.lang.Integer getForksCount()"], ["void", "org.gitlab.api.models.GitlabProject.setForksCount(java.lang.Integer)", "public void setForksCount(java.lang.Integer)"], ["java.util.List<java.lang.String>", "org.gitlab.api.models.GitlabProject.getTagList()", "public java.util.List<java.lang.String> getTagList()"], ["void", "org.gitlab.api.models.GitlabProject.setTagList(java.util.List<java.lang.String>)", "public void setTagList(java.util.List<java.lang.String>)"], ["java.util.List<org.gitlab.api.models.GitlabProjectSharedGroup>", "org.gitlab.api.models.GitlabProject.getSharedWithGroups()", "public java.util.List<org.gitlab.api.models.GitlabProjectSharedGroup> getSharedWithGroups()"], ["void", "org.gitlab.api.models.GitlabProject.setSharedWithGroups(java.util.List<org.gitlab.api.models.GitlabProjectSharedGroup>)", "public void setSharedWithGroups(java.util.List<org.gitlab.api.models.GitlabProjectSharedGroup>)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getRepositoryStorage()", "public java.lang.String getRepositoryStorage()"], ["void", "org.gitlab.api.models.GitlabProject.setRepositoryStorage(java.lang.String)", "public void setRepositoryStorage(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabProject.getApprovalsBeforeMerge()", "public java.lang.Integer getApprovalsBeforeMerge()"], ["void", "org.gitlab.api.models.GitlabProject.setApprovalsBeforeMerge(java.lang.Integer)", "public void setApprovalsBeforeMerge(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabProject.getImportUrl()", "public java.lang.String getImportUrl()"], ["void", "org.gitlab.api.models.GitlabProject.setImportUrl(java.lang.String)", "public void setImportUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.models.GitlabProject.getForkedFrom()", "public org.gitlab.api.models.GitlabProject getForkedFrom()"], ["void", "org.gitlab.api.models.GitlabProject.setForkedFrom(org.gitlab.api.models.GitlabProject)", "public void setForkedFrom(org.gitlab.api.models.GitlabProject)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabProject.isPrintingMergeRequestLinkEnabled()", "public java.lang.Boolean isPrintingMergeRequestLinkEnabled()"], ["void", "org.gitlab.api.models.GitlabProject.setPrintingMergeRequestLinkEnabled(java.lang.Boolean)", "public void setPrintingMergeRequestLinkEnabled(java.lang.Boolean)"], ["boolean", "org.gitlab.api.models.GitlabProject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabProject.hashCode()", "public int hashCode()"], ["org.gitlab.api.models.GitlabBranch", "org.gitlab.api.models.GitlabBranch()", "public org.gitlab.api.models.GitlabBranch()"], ["java.lang.String", "org.gitlab.api.models.GitlabBranch.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabBranch.setName(java.lang.String)", "public void setName(java.lang.String)"], ["org.gitlab.api.models.GitlabBranchCommit", "org.gitlab.api.models.GitlabBranch.getCommit()", "public org.gitlab.api.models.GitlabBranchCommit getCommit()"], ["void", "org.gitlab.api.models.GitlabBranch.setCommit(org.gitlab.api.models.GitlabBranchCommit)", "public void setCommit(org.gitlab.api.models.GitlabBranchCommit)"], ["boolean", "org.gitlab.api.models.GitlabBranch.isProtected()", "public boolean isProtected()"], ["void", "org.gitlab.api.models.GitlabBranch.setProtected(boolean)", "public void setProtected(boolean)"], ["org.gitlab.api.models.GitlabUserIdentity", "org.gitlab.api.models.GitlabUserIdentity()", "public org.gitlab.api.models.GitlabUserIdentity()"], ["java.lang.String", "org.gitlab.api.models.GitlabUserIdentity.getProvider()", "public java.lang.String getProvider()"], ["void", "org.gitlab.api.models.GitlabUserIdentity.setProvider(java.lang.String)", "public void setProvider(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUserIdentity.getExternUid()", "public java.lang.String getExternUid()"], ["void", "org.gitlab.api.models.GitlabUserIdentity.setExternUuid(java.lang.String)", "public void setExternUuid(java.lang.String)"], ["org.gitlab.api.models.GitlabIssue$Action[]", "org.gitlab.api.models.GitlabIssue$Action.values()", "public static org.gitlab.api.models.GitlabIssue$Action[] values()"], ["org.gitlab.api.models.GitlabIssue$Action", "org.gitlab.api.models.GitlabIssue$Action.valueOf(java.lang.String)", "public static org.gitlab.api.models.GitlabIssue$Action valueOf(java.lang.String)"], ["org.gitlab.api.models.GitlabRepositoryTree", "org.gitlab.api.models.GitlabRepositoryTree()", "public org.gitlab.api.models.GitlabRepositoryTree()"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getType()", "public java.lang.String getType()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setType(java.lang.String)", "public void setType(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getMode()", "public java.lang.String getMode()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setMode(java.lang.String)", "public void setMode(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getId()", "public java.lang.String getId()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setId(java.lang.String)", "public void setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryTree.getPath()", "public java.lang.String getPath()"], ["void", "org.gitlab.api.models.GitlabRepositoryTree.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["org.gitlab.api.models.GitlabSimpleRepositoryFile", "org.gitlab.api.models.GitlabSimpleRepositoryFile()", "public org.gitlab.api.models.GitlabSimpleRepositoryFile()"], ["java.lang.String", "org.gitlab.api.models.GitlabSimpleRepositoryFile.getFileName()", "public java.lang.String getFileName()"], ["void", "org.gitlab.api.models.GitlabSimpleRepositoryFile.setFileName(java.lang.String)", "public void setFileName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabSimpleRepositoryFile.getBranchName()", "public java.lang.String getBranchName()"], ["void", "org.gitlab.api.models.GitlabSimpleRepositoryFile.setBranchName(java.lang.String)", "public void setBranchName(java.lang.String)"], ["org.gitlab.api.models.GitlabCommitStatus", "org.gitlab.api.models.GitlabCommitStatus()", "public org.gitlab.api.models.GitlabCommitStatus()"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getId()", "public java.lang.String getId()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setId(java.lang.String)", "public void setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getSha()", "public java.lang.String getSha()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setSha(java.lang.String)", "public void setSha(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getRef()", "public java.lang.String getRef()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setRef(java.lang.String)", "public void setRef(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getStatus()", "public java.lang.String getStatus()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setStatus(java.lang.String)", "public void setStatus(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabCommitStatus.getAuthor()", "public org.gitlab.api.models.GitlabUser getAuthor()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setAuthor(org.gitlab.api.models.GitlabUser)", "public void setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitStatus.getTargetUrl()", "public java.lang.String getTargetUrl()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setTargetUrl(java.lang.String)", "public void setTargetUrl(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommitStatus.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommitStatus.getStartedAt()", "public java.util.Date getStartedAt()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setStartedAt(java.util.Date)", "public void setStartedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabCommitStatus.getFinishedAt()", "public java.util.Date getFinishedAt()"], ["void", "org.gitlab.api.models.GitlabCommitStatus.setFinishedAt(java.util.Date)", "public void setFinishedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabCommitStatus.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.gitlab.api.models.GitlabCommitStatus.hashCode()", "public int hashCode()"], ["org.gitlab.api.models.GitlabAccessLevel[]", "org.gitlab.api.models.GitlabAccessLevel.values()", "public static org.gitlab.api.models.GitlabAccessLevel[] values()"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabAccessLevel.valueOf(java.lang.String)", "public static org.gitlab.api.models.GitlabAccessLevel valueOf(java.lang.String)"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabAccessLevel.fromAccessValue(int)", "public static org.gitlab.api.models.GitlabAccessLevel fromAccessValue(int) throws java.lang.IllegalArgumentException"], ["org.gitlab.api.models.GitlabProjectAccessLevel", "org.gitlab.api.models.GitlabProjectAccessLevel()", "public org.gitlab.api.models.GitlabProjectAccessLevel()"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabProjectAccessLevel.getAccessLevel()", "public org.gitlab.api.models.GitlabAccessLevel getAccessLevel()"], ["void", "org.gitlab.api.models.GitlabProjectAccessLevel.setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)", "public void setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)"], ["int", "org.gitlab.api.models.GitlabProjectAccessLevel.getNoficationLevel()", "public int getNoficationLevel()"], ["void", "org.gitlab.api.models.GitlabProjectAccessLevel.setNotificationLevel(int)", "public void setNotificationLevel(int)"], ["org.gitlab.api.models.GitlabRepositoryFile", "org.gitlab.api.models.GitlabRepositoryFile()", "public org.gitlab.api.models.GitlabRepositoryFile()"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getRef()", "public java.lang.String getRef()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setRef(java.lang.String)", "public void setRef(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getBlobId()", "public java.lang.String getBlobId()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setBlobId(java.lang.String)", "public void setBlobId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getCommitId()", "public java.lang.String getCommitId()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setCommitId(java.lang.String)", "public void setCommitId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getLastCommitId()", "public java.lang.String getLastCommitId()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setLastCommitId(java.lang.String)", "public void setLastCommitId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getFilePath()", "public java.lang.String getFilePath()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setFilePath(java.lang.String)", "public void setFilePath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getFileName()", "public java.lang.String getFileName()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setFileName(java.lang.String)", "public void setFileName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getEncoding()", "public java.lang.String getEncoding()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setEncoding(java.lang.String)", "public void setEncoding(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabRepositoryFile.getContent()", "public java.lang.String getContent()"], ["void", "org.gitlab.api.models.GitlabRepositoryFile.setContent(java.lang.String)", "public void setContent(java.lang.String)"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.models.GitlabIssue()", "public org.gitlab.api.models.GitlabIssue()"], ["int", "org.gitlab.api.models.GitlabIssue.getId()", "public int getId()"], ["void", "org.gitlab.api.models.GitlabIssue.setId(int)", "public void setId(int)"], ["int", "org.gitlab.api.models.GitlabIssue.getIid()", "public int getIid()"], ["void", "org.gitlab.api.models.GitlabIssue.setIid(int)", "public void setIid(int)"], ["int", "org.gitlab.api.models.GitlabIssue.getProjectId()", "public int getProjectId()"], ["void", "org.gitlab.api.models.GitlabIssue.setProjectId(int)", "public void setProjectId(int)"], ["java.lang.String", "org.gitlab.api.models.GitlabIssue.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabIssue.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabIssue.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabIssue.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String[]", "org.gitlab.api.models.GitlabIssue.getLabels()", "public java.lang.String[] getLabels()"], ["void", "org.gitlab.api.models.GitlabIssue.setLabels(java.lang.String[])", "public void setLabels(java.lang.String[])"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.models.GitlabIssue.getMilestone()", "public org.gitlab.api.models.GitlabMilestone getMilestone()"], ["void", "org.gitlab.api.models.GitlabIssue.setMilestone(org.gitlab.api.models.GitlabMilestone)", "public void setMilestone(org.gitlab.api.models.GitlabMilestone)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabIssue.getAssignee()", "public org.gitlab.api.models.GitlabUser getAssignee()"], ["void", "org.gitlab.api.models.GitlabIssue.setAssignee(org.gitlab.api.models.GitlabUser)", "public void setAssignee(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabIssue.getAuthor()", "public org.gitlab.api.models.GitlabUser getAuthor()"], ["void", "org.gitlab.api.models.GitlabIssue.setAuthor(org.gitlab.api.models.GitlabUser)", "public void setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.GitlabIssue.getState()", "public java.lang.String getState()"], ["void", "org.gitlab.api.models.GitlabIssue.setState(java.lang.String)", "public void setState(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabIssue.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabIssue.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabIssue.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabIssue.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.models.GitlabSSHKey()", "public org.gitlab.api.models.GitlabSSHKey()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabSSHKey.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabSSHKey.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabSSHKey.getKey()", "public java.lang.String getKey()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setKey(java.lang.String)", "public void setKey(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabSSHKey.getUser()", "public org.gitlab.api.models.GitlabUser getUser()"], ["void", "org.gitlab.api.models.GitlabSSHKey.setUser(org.gitlab.api.models.GitlabUser)", "public void setUser(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabTag", "org.gitlab.api.models.GitlabTag()", "public org.gitlab.api.models.GitlabTag()"], ["org.gitlab.api.models.GitlabBranchCommit", "org.gitlab.api.models.GitlabTag.getCommit()", "public org.gitlab.api.models.GitlabBranchCommit getCommit()"], ["void", "org.gitlab.api.models.GitlabTag.setCommit(org.gitlab.api.models.GitlabBranchCommit)", "public void setCommit(org.gitlab.api.models.GitlabBranchCommit)"], ["org.gitlab.api.models.GitlabRelease", "org.gitlab.api.models.GitlabTag.getRelease()", "public org.gitlab.api.models.GitlabRelease getRelease()"], ["void", "org.gitlab.api.models.GitlabTag.setRelease(org.gitlab.api.models.GitlabRelease)", "public void setRelease(org.gitlab.api.models.GitlabRelease)"], ["java.lang.String", "org.gitlab.api.models.GitlabTag.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabTag.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabTag.getMessage()", "public java.lang.String getMessage()"], ["void", "org.gitlab.api.models.GitlabTag.setMessage(java.lang.String)", "public void setMessage(java.lang.String)"], ["org.gitlab.api.models.GitlabApprovedBy", "org.gitlab.api.models.GitlabApprovedBy()", "public org.gitlab.api.models.GitlabApprovedBy()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabApprovedBy.getUser()", "public org.gitlab.api.models.GitlabUser getUser()"], ["void", "org.gitlab.api.models.GitlabApprovedBy.setUser(org.gitlab.api.models.GitlabUser)", "public void setUser(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabServiceEmailOnPush", "org.gitlab.api.models.GitlabServiceEmailOnPush()", "public org.gitlab.api.models.GitlabServiceEmailOnPush()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabServiceEmailOnPush.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabServiceEmailOnPush.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceEmailOnPush.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceEmailOnPush.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isActive()", "public boolean isActive()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setActive(boolean)", "public void setActive(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isPushEvents()", "public boolean isPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setPushEvents(boolean)", "public void setPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isIssuesEvents()", "public boolean isIssuesEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setIssuesEvents(boolean)", "public void setIssuesEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isMergeRequestsEvents()", "public boolean isMergeRequestsEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setMergeRequestsEvents(boolean)", "public void setMergeRequestsEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isTagPushEvents()", "public boolean isTagPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setTagPushEvents(boolean)", "public void setTagPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isNoteEvents()", "public boolean isNoteEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setNoteEvents(boolean)", "public void setNoteEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceEmailOnPush.isBuildEvents()", "public boolean isBuildEvents()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setBuildEvents(boolean)", "public void setBuildEvents(boolean)"], ["org.gitlab.api.models.GitlabEmailonPushProperties", "org.gitlab.api.models.GitlabServiceEmailOnPush.getProperties()", "public org.gitlab.api.models.GitlabEmailonPushProperties getProperties()"], ["void", "org.gitlab.api.models.GitlabServiceEmailOnPush.setProperties(org.gitlab.api.models.GitlabEmailonPushProperties)", "public void setProperties(org.gitlab.api.models.GitlabEmailonPushProperties)"], ["org.gitlab.api.models.GitlabProjectSharedGroup", "org.gitlab.api.models.GitlabProjectSharedGroup()", "public org.gitlab.api.models.GitlabProjectSharedGroup()"], ["int", "org.gitlab.api.models.GitlabProjectSharedGroup.getGroupId()", "public int getGroupId()"], ["void", "org.gitlab.api.models.GitlabProjectSharedGroup.setGroupId(int)", "public void setGroupId(int)"], ["java.lang.String", "org.gitlab.api.models.GitlabProjectSharedGroup.getGroupName()", "public java.lang.String getGroupName()"], ["void", "org.gitlab.api.models.GitlabProjectSharedGroup.setGroupName(java.lang.String)", "public void setGroupName(java.lang.String)"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabProjectSharedGroup.getAccessLevel()", "public org.gitlab.api.models.GitlabAccessLevel getAccessLevel()"], ["void", "org.gitlab.api.models.GitlabProjectSharedGroup.setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)", "public void setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabSession", "org.gitlab.api.models.GitlabSession()", "public org.gitlab.api.models.GitlabSession()"], ["java.lang.String", "org.gitlab.api.models.GitlabSession.getPrivateToken()", "public java.lang.String getPrivateToken()"], ["void", "org.gitlab.api.models.GitlabSession.setPrivateToken(java.lang.String)", "public void setPrivateToken(java.lang.String)"], ["org.gitlab.api.models.CommitComment", "org.gitlab.api.models.CommitComment()", "public org.gitlab.api.models.CommitComment()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.CommitComment.getAuthor()", "public org.gitlab.api.models.GitlabUser getAuthor()"], ["void", "org.gitlab.api.models.CommitComment.setAuthor(org.gitlab.api.models.GitlabUser)", "public void setAuthor(org.gitlab.api.models.GitlabUser)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getNote()", "public java.lang.String getNote()"], ["void", "org.gitlab.api.models.CommitComment.setNote(java.lang.String)", "public void setNote(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getPath()", "public java.lang.String getPath()"], ["void", "org.gitlab.api.models.CommitComment.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getLine()", "public java.lang.String getLine()"], ["void", "org.gitlab.api.models.CommitComment.setLine(java.lang.String)", "public void setLine(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CommitComment.getLineType()", "public java.lang.String getLineType()"], ["void", "org.gitlab.api.models.CommitComment.setLineType(java.lang.String)", "public void setLineType(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.CommitComment.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.CommitComment.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest(java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.CreateUserRequest(java.lang.String, java.lang.String, java.lang.String)"], ["org.gitlab.api.http.Query", "org.gitlab.api.models.CreateUserRequest.toQuery()", "public org.gitlab.api.http.Query toQuery() throws java.io.UnsupportedEncodingException"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getEmail()", "public java.lang.String getEmail()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setEmail(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setEmail(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getPassword()", "public java.lang.String getPassword()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setPassword(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setPassword(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getResetPassword()", "public java.lang.Boolean getResetPassword()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setResetPassword(java.lang.Boolean)", "public org.gitlab.api.models.CreateUserRequest setResetPassword(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getUsername()", "public java.lang.String getUsername()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setUsername(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setUsername(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getName()", "public java.lang.String getName()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setName(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getSkype()", "public java.lang.String getSkype()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setSkype(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setSkype(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getLinkedin()", "public java.lang.String getLinkedin()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setLinkedin(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setLinkedin(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getTwitter()", "public java.lang.String getTwitter()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setTwitter(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setTwitter(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getWebsiteUrl()", "public java.lang.String getWebsiteUrl()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setWebsiteUrl(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setWebsiteUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getOrganization()", "public java.lang.String getOrganization()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setOrganization(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setOrganization(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.CreateUserRequest.getProjectsLimit()", "public java.lang.Integer getProjectsLimit()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setProjectsLimit(java.lang.Integer)", "public org.gitlab.api.models.CreateUserRequest setProjectsLimit(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getExternUid()", "public java.lang.String getExternUid()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setExternUid(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setExternUid(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getProvider()", "public java.lang.String getProvider()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setProvider(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setProvider(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getBio()", "public java.lang.String getBio()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setBio(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setBio(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getLocation()", "public java.lang.String getLocation()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setLocation(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setLocation(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getAdmin()", "public java.lang.Boolean getAdmin()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setAdmin(java.lang.Boolean)", "public org.gitlab.api.models.CreateUserRequest setAdmin(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getCanCreateGroup()", "public java.lang.Boolean getCanCreateGroup()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setCanCreateGroup(java.lang.Boolean)", "public org.gitlab.api.models.CreateUserRequest setCanCreateGroup(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getSkipConfirmation()", "public java.lang.Boolean getSkipConfirmation()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setSkipConfirmation(java.lang.Boolean)", "public org.gitlab.api.models.CreateUserRequest setSkipConfirmation(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateUserRequest.getExternal()", "public java.lang.Boolean getExternal()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setExternal(java.lang.Boolean)", "public org.gitlab.api.models.CreateUserRequest setExternal(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.CreateUserRequest.getAvatar()", "public java.lang.String getAvatar()"], ["org.gitlab.api.models.CreateUserRequest", "org.gitlab.api.models.CreateUserRequest.setAvatar(java.lang.String)", "public org.gitlab.api.models.CreateUserRequest setAvatar(java.lang.String)"], ["org.gitlab.api.models.GitlabCommitComparison", "org.gitlab.api.models.GitlabCommitComparison()", "public org.gitlab.api.models.GitlabCommitComparison()"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.models.GitlabCommitComparison.getCommit()", "public org.gitlab.api.models.GitlabCommit getCommit()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCommit(org.gitlab.api.models.GitlabCommit)", "public void setCommit(org.gitlab.api.models.GitlabCommit)"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.models.GitlabCommitComparison.getCommits()", "public java.util.List<org.gitlab.api.models.GitlabCommit> getCommits()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCommits(java.util.List<org.gitlab.api.models.GitlabCommit>)", "public void setCommits(java.util.List<org.gitlab.api.models.GitlabCommit>)"], ["java.util.List<org.gitlab.api.models.GitlabCommitDiff>", "org.gitlab.api.models.GitlabCommitComparison.getDiffs()", "public java.util.List<org.gitlab.api.models.GitlabCommitDiff> getDiffs()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setDiffs(java.util.List<org.gitlab.api.models.GitlabCommitDiff>)", "public void setDiffs(java.util.List<org.gitlab.api.models.GitlabCommitDiff>)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabCommitComparison.getCompareSameRef()", "public java.lang.Boolean getCompareSameRef()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCompareSameRef(java.lang.Boolean)", "public void setCompareSameRef(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabCommitComparison.getCompareTimeout()", "public java.lang.Boolean getCompareTimeout()"], ["void", "org.gitlab.api.models.GitlabCommitComparison.setCompareTimeout(java.lang.Boolean)", "public void setCompareTimeout(java.lang.Boolean)"], ["org.gitlab.api.models.GitlabEmailonPushProperties", "org.gitlab.api.models.GitlabEmailonPushProperties()", "public org.gitlab.api.models.GitlabEmailonPushProperties()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabEmailonPushProperties.getDisableDiffs()", "public java.lang.Integer getDisableDiffs()"], ["void", "org.gitlab.api.models.GitlabEmailonPushProperties.setDisableDiffs(java.lang.Integer)", "public void setDisableDiffs(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabEmailonPushProperties.getRecipients()", "public java.lang.String getRecipients()"], ["void", "org.gitlab.api.models.GitlabEmailonPushProperties.setRecipients(java.lang.String)", "public void setRecipients(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabEmailonPushProperties.getSendFromCommitterEmail()", "public java.lang.Integer getSendFromCommitterEmail()"], ["void", "org.gitlab.api.models.GitlabEmailonPushProperties.setSendFromCommitterEmail(java.lang.Integer)", "public void setSendFromCommitterEmail(java.lang.Integer)"], ["org.gitlab.api.models.GitlabCommitDiff", "org.gitlab.api.models.GitlabCommitDiff()", "public org.gitlab.api.models.GitlabCommitDiff()"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getDiff()", "public java.lang.String getDiff()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setDiff(java.lang.String)", "public void setDiff(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getNewPath()", "public java.lang.String getNewPath()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setNewPath(java.lang.String)", "public void setNewPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getOldPath()", "public java.lang.String getOldPath()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setOldPath(java.lang.String)", "public void setOldPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getAMode()", "public java.lang.String getAMode()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setAMode(java.lang.String)", "public void setAMode(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabCommitDiff.getBMode()", "public java.lang.String getBMode()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setBMode(java.lang.String)", "public void setBMode(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabCommitDiff.getNewFile()", "public boolean getNewFile()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setNewFile(boolean)", "public void setNewFile(boolean)"], ["boolean", "org.gitlab.api.models.GitlabCommitDiff.getRenamedFile()", "public boolean getRenamedFile()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setRenamedFile(boolean)", "public void setRenamedFile(boolean)"], ["boolean", "org.gitlab.api.models.GitlabCommitDiff.getDeletedFile()", "public boolean getDeletedFile()"], ["void", "org.gitlab.api.models.GitlabCommitDiff.setDeletedFile(boolean)", "public void setDeletedFile(boolean)"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.models.GitlabAward()", "public org.gitlab.api.models.GitlabAward()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabAward.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabAward.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabAward.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabAward.setBody(java.lang.String)", "public void setBody(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabAward.getUser()", "public org.gitlab.api.models.GitlabUser getUser()"], ["void", "org.gitlab.api.models.GitlabAward.setUser(org.gitlab.api.models.GitlabUser)", "public void setUser(org.gitlab.api.models.GitlabUser)"], ["java.util.Date", "org.gitlab.api.models.GitlabAward.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabAward.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabAward.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabAward.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabAward.getAwardableId()", "public java.lang.Integer getAwardableId()"], ["void", "org.gitlab.api.models.GitlabAward.setAwardableId(java.lang.Integer)", "public void setAwardableId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabAward.getAwardableType()", "public java.lang.String getAwardableType()"], ["void", "org.gitlab.api.models.GitlabAward.setAwardableType(java.lang.String)", "public void setAwardableType(java.lang.String)"], ["org.gitlab.api.models.GitlabJob", "org.gitlab.api.models.GitlabJob()", "public org.gitlab.api.models.GitlabJob()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabJob.getUser()", "public org.gitlab.api.models.GitlabUser getUser()"], ["void", "org.gitlab.api.models.GitlabJob.setUser(org.gitlab.api.models.GitlabUser)", "public void setUser(org.gitlab.api.models.GitlabUser)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabJob.getTag()", "public java.lang.Boolean getTag()"], ["void", "org.gitlab.api.models.GitlabJob.setTag(java.lang.Boolean)", "public void setTag(java.lang.Boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getStatus()", "public java.lang.String getStatus()"], ["void", "org.gitlab.api.models.GitlabJob.setStatus(java.lang.String)", "public void setStatus(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getStartedAt()", "public java.lang.String getStartedAt()"], ["void", "org.gitlab.api.models.GitlabJob.setStartedAt(java.lang.String)", "public void setStartedAt(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getStage()", "public java.lang.String getStage()"], ["void", "org.gitlab.api.models.GitlabJob.setStage(java.lang.String)", "public void setStage(java.lang.String)"], ["org.gitlab.api.models.GitlabRunner", "org.gitlab.api.models.GitlabJob.getRunner()", "public org.gitlab.api.models.GitlabRunner getRunner()"], ["void", "org.gitlab.api.models.GitlabJob.setRunner(org.gitlab.api.models.GitlabRunner)", "public void setRunner(org.gitlab.api.models.GitlabRunner)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getRef()", "public java.lang.String getRef()"], ["void", "org.gitlab.api.models.GitlabJob.setRef(java.lang.String)", "public void setRef(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabJob.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabJob.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabJob.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getFinishedAt()", "public java.lang.String getFinishedAt()"], ["void", "org.gitlab.api.models.GitlabJob.setFinishedAt(java.lang.String)", "public void setFinishedAt(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getDownloadUrl()", "public java.lang.String getDownloadUrl()"], ["void", "org.gitlab.api.models.GitlabJob.setDownloadUrl(java.lang.String)", "public void setDownloadUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJob.getCreatedAt()", "public java.lang.String getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabJob.setCreatedAt(java.lang.String)", "public void setCreatedAt(java.lang.String)"], ["java.lang.Float", "org.gitlab.api.models.GitlabJob.getCoverage()", "public java.lang.Float getCoverage()"], ["void", "org.gitlab.api.models.GitlabJob.setCoverage(java.lang.Float)", "public void setCoverage(java.lang.Float)"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.models.GitlabJob.getCommit()", "public org.gitlab.api.models.GitlabCommit getCommit()"], ["void", "org.gitlab.api.models.GitlabJob.setCommit(org.gitlab.api.models.GitlabCommit)", "public void setCommit(org.gitlab.api.models.GitlabCommit)"], ["org.gitlab.api.models.GitlabGroupMember", "org.gitlab.api.models.GitlabGroupMember()", "public org.gitlab.api.models.GitlabGroupMember()"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.models.GitlabGroup()", "public org.gitlab.api.models.GitlabGroup()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabGroup.getId()", "public java.lang.Integer getId()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabGroup.getParentId()", "public java.lang.Integer getParentId()"], ["void", "org.gitlab.api.models.GitlabGroup.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["void", "org.gitlab.api.models.GitlabGroup.setParentId(java.lang.Integer)", "public void setParentId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabGroup.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getPath()", "public java.lang.String getPath()"], ["void", "org.gitlab.api.models.GitlabGroup.setPath(java.lang.String)", "public void setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getLdapCn()", "public java.lang.String getLdapCn()"], ["void", "org.gitlab.api.models.GitlabGroup.setLdapCn(java.lang.String)", "public void setLdapCn(java.lang.String)"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabGroup.getLdapAccess()", "public org.gitlab.api.models.GitlabAccessLevel getLdapAccess()"], ["void", "org.gitlab.api.models.GitlabGroup.setLdapAccess(org.gitlab.api.models.GitlabAccessLevel)", "public void setLdapAccess(org.gitlab.api.models.GitlabAccessLevel)"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.models.GitlabGroup.getSharedProjects()", "public java.util.List<org.gitlab.api.models.GitlabProject> getSharedProjects()"], ["void", "org.gitlab.api.models.GitlabGroup.setSharedProjects(java.util.List<org.gitlab.api.models.GitlabProject>)", "public void setSharedProjects(java.util.List<org.gitlab.api.models.GitlabProject>)"], ["java.lang.String", "org.gitlab.api.models.GitlabGroup.getWebUrl()", "public java.lang.String getWebUrl()"], ["void", "org.gitlab.api.models.GitlabGroup.setWebUrl(java.lang.String)", "public void setWebUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabIssueTimeStats", "org.gitlab.api.models.GitlabIssueTimeStats()", "public org.gitlab.api.models.GitlabIssueTimeStats()"], ["java.lang.String", "org.gitlab.api.models.GitlabIssueTimeStats.getURL()", "public static java.lang.String getURL()"], ["long", "org.gitlab.api.models.GitlabIssueTimeStats.getTimeEstimate()", "public long getTimeEstimate()"], ["long", "org.gitlab.api.models.GitlabIssueTimeStats.getTotalTimeSpent()", "public long getTotalTimeSpent()"], ["java.lang.String", "org.gitlab.api.models.GitlabIssueTimeStats.getHumanTimeEstimate()", "public java.lang.String getHumanTimeEstimate()"], ["java.lang.String", "org.gitlab.api.models.GitlabIssueTimeStats.getHumanTotalTimeSpent()", "public java.lang.String getHumanTotalTimeSpent()"], ["org.gitlab.api.models.GitlabServiceJira", "org.gitlab.api.models.GitlabServiceJira()", "public org.gitlab.api.models.GitlabServiceJira()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabServiceJira.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabServiceJira.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceJira.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabServiceJira.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isActive()", "public boolean isActive()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setActive(boolean)", "public void setActive(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isPushEvents()", "public boolean isPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setPushEvents(boolean)", "public void setPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isIssuesEvents()", "public boolean isIssuesEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setIssuesEvents(boolean)", "public void setIssuesEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isMergeRequestsEvents()", "public boolean isMergeRequestsEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setMergeRequestsEvents(boolean)", "public void setMergeRequestsEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isTagPushEvents()", "public boolean isTagPushEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setTagPushEvents(boolean)", "public void setTagPushEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isNoteEvents()", "public boolean isNoteEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setNoteEvents(boolean)", "public void setNoteEvents(boolean)"], ["boolean", "org.gitlab.api.models.GitlabServiceJira.isBuildEvents()", "public boolean isBuildEvents()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setBuildEvents(boolean)", "public void setBuildEvents(boolean)"], ["org.gitlab.api.models.GitlabJiraProperties", "org.gitlab.api.models.GitlabServiceJira.getProperties()", "public org.gitlab.api.models.GitlabJiraProperties getProperties()"], ["void", "org.gitlab.api.models.GitlabServiceJira.setProperties(org.gitlab.api.models.GitlabJiraProperties)", "public void setProperties(org.gitlab.api.models.GitlabJiraProperties)"], ["org.gitlab.api.models.GitlabAbstractMember", "org.gitlab.api.models.GitlabAbstractMember()", "public org.gitlab.api.models.GitlabAbstractMember()"], ["org.gitlab.api.models.GitlabAccessLevel", "org.gitlab.api.models.GitlabAbstractMember.getAccessLevel()", "public org.gitlab.api.models.GitlabAccessLevel getAccessLevel()"], ["void", "org.gitlab.api.models.GitlabAbstractMember.setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)", "public void setAccessLevel(org.gitlab.api.models.GitlabAccessLevel)"], ["org.gitlab.api.models.GitlabUpload", "org.gitlab.api.models.GitlabUpload()", "public org.gitlab.api.models.GitlabUpload()"], ["java.lang.String", "org.gitlab.api.models.GitlabUpload.getAlt()", "public java.lang.String getAlt()"], ["void", "org.gitlab.api.models.GitlabUpload.setAlt(java.lang.String)", "public void setAlt(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUpload.getMarkdown()", "public java.lang.String getMarkdown()"], ["void", "org.gitlab.api.models.GitlabUpload.setMarkdown(java.lang.String)", "public void setMarkdown(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUpload.getUrl()", "public java.lang.String getUrl()"], ["void", "org.gitlab.api.models.GitlabUpload.setUrl(java.lang.String)", "public void setUrl(java.lang.String)"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.models.GitlabMilestone()", "public org.gitlab.api.models.GitlabMilestone()"], ["int", "org.gitlab.api.models.GitlabMilestone.getId()", "public int getId()"], ["void", "org.gitlab.api.models.GitlabMilestone.setId(int)", "public void setId(int)"], ["int", "org.gitlab.api.models.GitlabMilestone.getIid()", "public int getIid()"], ["void", "org.gitlab.api.models.GitlabMilestone.setIid(int)", "public void setIid(int)"], ["int", "org.gitlab.api.models.GitlabMilestone.getProjectId()", "public int getProjectId()"], ["void", "org.gitlab.api.models.GitlabMilestone.setProjectId(int)", "public void setProjectId(int)"], ["int", "org.gitlab.api.models.GitlabMilestone.getGroupId()", "public int getGroupId()"], ["void", "org.gitlab.api.models.GitlabMilestone.setGroupId(int)", "public void setGroupId(int)"], ["java.lang.String", "org.gitlab.api.models.GitlabMilestone.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabMilestone.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMilestone.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabMilestone.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getDueDate()", "public java.util.Date getDueDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setDueDate(java.util.Date)", "public void setDueDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getStartDate()", "public java.util.Date getStartDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setStartDate(java.util.Date)", "public void setStartDate(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabMilestone.getState()", "public java.lang.String getState()"], ["void", "org.gitlab.api.models.GitlabMilestone.setState(java.lang.String)", "public void setState(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getUpdatedDate()", "public java.util.Date getUpdatedDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setUpdatedDate(java.util.Date)", "public void setUpdatedDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMilestone.getCreatedDate()", "public java.util.Date getCreatedDate()"], ["void", "org.gitlab.api.models.GitlabMilestone.setCreatedDate(java.util.Date)", "public void setCreatedDate(java.util.Date)"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.models.GitlabBuildVariable()", "public org.gitlab.api.models.GitlabBuildVariable()"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.models.GitlabBuildVariable(java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabBuildVariable(java.lang.String, java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBuildVariable.getKey()", "public java.lang.String getKey()"], ["void", "org.gitlab.api.models.GitlabBuildVariable.setKey(java.lang.String)", "public void setKey(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBuildVariable.getValue()", "public java.lang.String getValue()"], ["void", "org.gitlab.api.models.GitlabBuildVariable.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest(java.lang.String)", "public org.gitlab.api.models.CreateGroupRequest(java.lang.String)"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest(java.lang.String, java.lang.String)", "public org.gitlab.api.models.CreateGroupRequest(java.lang.String, java.lang.String)"], ["org.gitlab.api.http.Query", "org.gitlab.api.models.CreateGroupRequest.toQuery()", "public org.gitlab.api.http.Query toQuery() throws java.io.UnsupportedEncodingException"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getName()", "public java.lang.String getName()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setName(java.lang.String)", "public org.gitlab.api.models.CreateGroupRequest setName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getPath()", "public java.lang.String getPath()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setPath(java.lang.String)", "public org.gitlab.api.models.CreateGroupRequest setPath(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getLdapCn()", "public java.lang.String getLdapCn()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setLdapCn(java.lang.String)", "public org.gitlab.api.models.CreateGroupRequest setLdapCn(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.CreateGroupRequest.getDescription()", "public java.lang.String getDescription()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setDescription(java.lang.String)", "public org.gitlab.api.models.CreateGroupRequest setDescription(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getMembershipLock()", "public java.lang.Boolean getMembershipLock()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setMembershipLock(java.lang.Boolean)", "public org.gitlab.api.models.CreateGroupRequest setMembershipLock(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getShareWithGroupLock()", "public java.lang.Boolean getShareWithGroupLock()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setShareWithGroupLock(java.lang.Boolean)", "public org.gitlab.api.models.CreateGroupRequest setShareWithGroupLock(java.lang.Boolean)"], ["org.gitlab.api.models.GitlabVisibility", "org.gitlab.api.models.CreateGroupRequest.getVisibility()", "public org.gitlab.api.models.GitlabVisibility getVisibility()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setVisibility(org.gitlab.api.models.GitlabVisibility)", "public org.gitlab.api.models.CreateGroupRequest setVisibility(org.gitlab.api.models.GitlabVisibility)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getLfsEnabled()", "public java.lang.Boolean getLfsEnabled()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setLfsEnabled(java.lang.Boolean)", "public org.gitlab.api.models.CreateGroupRequest setLfsEnabled(java.lang.Boolean)"], ["java.lang.Boolean", "org.gitlab.api.models.CreateGroupRequest.getRequestAccessEnabled()", "public java.lang.Boolean getRequestAccessEnabled()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setRequestAccessEnabled(java.lang.Boolean)", "public org.gitlab.api.models.CreateGroupRequest setRequestAccessEnabled(java.lang.Boolean)"], ["java.lang.Integer", "org.gitlab.api.models.CreateGroupRequest.getParentId()", "public java.lang.Integer getParentId()"], ["org.gitlab.api.models.CreateGroupRequest", "org.gitlab.api.models.CreateGroupRequest.setParentId(java.lang.Integer)", "public org.gitlab.api.models.CreateGroupRequest setParentId(java.lang.Integer)"], ["org.gitlab.api.models.GitlabProjectMember", "org.gitlab.api.models.GitlabProjectMember()", "public org.gitlab.api.models.GitlabProjectMember()"], ["org.gitlab.api.models.GitlabVersion", "org.gitlab.api.models.GitlabVersion()", "public org.gitlab.api.models.GitlabVersion()"], ["java.lang.String", "org.gitlab.api.models.GitlabVersion.getVersion()", "public java.lang.String getVersion()"], ["java.lang.String", "org.gitlab.api.models.GitlabVersion.getRevision()", "public java.lang.String getRevision()"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabUser()", "public org.gitlab.api.models.GitlabUser()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabUser.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getUsername()", "public java.lang.String getUsername()"], ["void", "org.gitlab.api.models.GitlabUser.setUsername(java.lang.String)", "public void setUsername(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getEmail()", "public java.lang.String getEmail()"], ["void", "org.gitlab.api.models.GitlabUser.setEmail(java.lang.String)", "public void setEmail(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getName()", "public java.lang.String getName()"], ["void", "org.gitlab.api.models.GitlabUser.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.Boolean", "org.gitlab.api.models.GitlabUser.isBlocked()", "public java.lang.Boolean isBlocked()"], ["void", "org.gitlab.api.models.GitlabUser.setBlocked(java.lang.Boolean)", "public void setBlocked(java.lang.Boolean)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabUser.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getBio()", "public java.lang.String getBio()"], ["void", "org.gitlab.api.models.GitlabUser.setBio(java.lang.String)", "public void setBio(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getSkype()", "public java.lang.String getSkype()"], ["void", "org.gitlab.api.models.GitlabUser.setSkype(java.lang.String)", "public void setSkype(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getLinkedin()", "public java.lang.String getLinkedin()"], ["void", "org.gitlab.api.models.GitlabUser.setLinkedin(java.lang.String)", "public void setLinkedin(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getTwitter()", "public java.lang.String getTwitter()"], ["void", "org.gitlab.api.models.GitlabUser.setTwitter(java.lang.String)", "public void setTwitter(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabUser.isDarkScheme()", "public boolean isDarkScheme()"], ["void", "org.gitlab.api.models.GitlabUser.setDarkScheme(boolean)", "public void setDarkScheme(boolean)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getThemeId()", "public java.lang.Integer getThemeId()"], ["void", "org.gitlab.api.models.GitlabUser.setThemeId(java.lang.Integer)", "public void setThemeId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getExternUid()", "public java.lang.String getExternUid()"], ["void", "org.gitlab.api.models.GitlabUser.setExternUid(java.lang.String)", "public void setExternUid(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getProvider()", "public java.lang.String getProvider()"], ["void", "org.gitlab.api.models.GitlabUser.setProvider(java.lang.String)", "public void setProvider(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getState()", "public java.lang.String getState()"], ["void", "org.gitlab.api.models.GitlabUser.setState(java.lang.String)", "public void setState(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getExternProviderName()", "public java.lang.String getExternProviderName()"], ["void", "org.gitlab.api.models.GitlabUser.setExternProviderName(java.lang.String)", "public void setExternProviderName(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getWebsiteUrl()", "public java.lang.String getWebsiteUrl()"], ["void", "org.gitlab.api.models.GitlabUser.setWebsiteUrl(java.lang.String)", "public void setWebsiteUrl(java.lang.String)"], ["boolean", "org.gitlab.api.models.GitlabUser.isAdmin()", "public boolean isAdmin()"], ["void", "org.gitlab.api.models.GitlabUser.setAdmin(boolean)", "public void setAdmin(boolean)"], ["boolean", "org.gitlab.api.models.GitlabUser.isCanCreateGroup()", "public boolean isCanCreateGroup()"], ["void", "org.gitlab.api.models.GitlabUser.setCanCreateGroup(boolean)", "public void setCanCreateGroup(boolean)"], ["boolean", "org.gitlab.api.models.GitlabUser.isCanCreateProject()", "public boolean isCanCreateProject()"], ["void", "org.gitlab.api.models.GitlabUser.setCanCreateProject(boolean)", "public void setCanCreateProject(boolean)"], ["boolean", "org.gitlab.api.models.GitlabUser.isCanCreateTeam()", "public boolean isCanCreateTeam()"], ["void", "org.gitlab.api.models.GitlabUser.setCanCreateTeam(boolean)", "public void setCanCreateTeam(boolean)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getAvatarUrl()", "public java.lang.String getAvatarUrl()"], ["void", "org.gitlab.api.models.GitlabUser.setAvatarUrl(java.lang.String)", "public void setAvatarUrl(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getColorSchemeId()", "public java.lang.Integer getColorSchemeId()"], ["void", "org.gitlab.api.models.GitlabUser.setColorSchemeId(java.lang.Integer)", "public void setColorSchemeId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabUser.getPrivateToken()", "public java.lang.String getPrivateToken()"], ["void", "org.gitlab.api.models.GitlabUser.setPrivateToken(java.lang.String)", "public void setPrivateToken(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getLastSignInAt()", "public java.util.Date getLastSignInAt()"], ["void", "org.gitlab.api.models.GitlabUser.setLastSignInAt(java.util.Date)", "public void setLastSignInAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getCurrentSignInAt()", "public java.util.Date getCurrentSignInAt()"], ["void", "org.gitlab.api.models.GitlabUser.setCurrentSignInAt(java.util.Date)", "public void setCurrentSignInAt(java.util.Date)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabUser.getProjectsLimit()", "public java.lang.Integer getProjectsLimit()"], ["void", "org.gitlab.api.models.GitlabUser.setProjectsLimit(java.lang.Integer)", "public void setProjectsLimit(java.lang.Integer)"], ["java.util.List<org.gitlab.api.models.GitlabUserIdentity>", "org.gitlab.api.models.GitlabUser.getIdentities()", "public java.util.List<org.gitlab.api.models.GitlabUserIdentity> getIdentities()"], ["void", "org.gitlab.api.models.GitlabUser.setIdentities(java.util.List<org.gitlab.api.models.GitlabUserIdentity>)", "public void setIdentities(java.util.List<org.gitlab.api.models.GitlabUserIdentity>)"], ["java.util.Date", "org.gitlab.api.models.GitlabUser.getLastActivityOn()", "public java.util.Date getLastActivityOn()"], ["void", "org.gitlab.api.models.GitlabUser.setLastActivityOn(java.util.Date)", "public void setLastActivityOn(java.util.Date)"], ["org.gitlab.api.models.GitlabMergeRequestApprovals", "org.gitlab.api.models.GitlabMergeRequestApprovals()", "public org.gitlab.api.models.GitlabMergeRequestApprovals()"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getId()", "public java.lang.Integer getId()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setId(java.lang.Integer)", "public void setId(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getIid()", "public java.lang.Integer getIid()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setIid(java.lang.Integer)", "public void setIid(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getProjectId()", "public java.lang.Integer getProjectId()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setProjectId(java.lang.Integer)", "public void setProjectId(java.lang.Integer)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getTitle()", "public java.lang.String getTitle()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setTitle(java.lang.String)", "public void setTitle(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getDescription()", "public java.lang.String getDescription()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getState()", "public java.lang.String getState()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setState(java.lang.String)", "public void setState(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequestApprovals.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabMergeRequestApprovals.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.lang.String", "org.gitlab.api.models.GitlabMergeRequestApprovals.getMergeStatus()", "public java.lang.String getMergeStatus()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setMergeStatus(java.lang.String)", "public void setMergeStatus(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getApprovalsRequired()", "public java.lang.Integer getApprovalsRequired()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setApprovalsRequired(java.lang.Integer)", "public void setApprovalsRequired(java.lang.Integer)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabMergeRequestApprovals.getApprovalsLeft()", "public java.lang.Integer getApprovalsLeft()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setApprovalsLeft(java.lang.Integer)", "public void setApprovalsLeft(java.lang.Integer)"], ["java.util.List<org.gitlab.api.models.GitlabApprovedBy>", "org.gitlab.api.models.GitlabMergeRequestApprovals.getApprovedBy()", "public java.util.List<org.gitlab.api.models.GitlabApprovedBy> getApprovedBy()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setApprovedBy(java.util.List<org.gitlab.api.models.GitlabApprovedBy>)", "public void setApprovedBy(java.util.List<org.gitlab.api.models.GitlabApprovedBy>)"], ["java.util.List<org.gitlab.api.models.GitlabUser>", "org.gitlab.api.models.GitlabMergeRequestApprovals.getSuggestedApprovers()", "public java.util.List<org.gitlab.api.models.GitlabUser> getSuggestedApprovers()"], ["void", "org.gitlab.api.models.GitlabMergeRequestApprovals.setSuggestedApprovers(java.util.List<org.gitlab.api.models.GitlabUser>)", "public void setSuggestedApprovers(java.util.List<org.gitlab.api.models.GitlabUser>)"], ["org.gitlab.api.models.GitlabPermission", "org.gitlab.api.models.GitlabPermission()", "public org.gitlab.api.models.GitlabPermission()"], ["org.gitlab.api.models.GitlabProjectAccessLevel", "org.gitlab.api.models.GitlabPermission.getProjectAccess()", "public org.gitlab.api.models.GitlabProjectAccessLevel getProjectAccess()"], ["org.gitlab.api.models.GitlabProjectAccessLevel", "org.gitlab.api.models.GitlabPermission.getProjectGroupAccess()", "public org.gitlab.api.models.GitlabProjectAccessLevel getProjectGroupAccess()"], ["org.gitlab.api.models.GitlabBranchCommit", "org.gitlab.api.models.GitlabBranchCommit()", "public org.gitlab.api.models.GitlabBranchCommit()"], ["java.lang.String", "org.gitlab.api.models.GitlabBranchCommit.getId()", "public java.lang.String getId()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setId(java.lang.String)", "public void setId(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBranchCommit.getTree()", "public java.lang.String getTree()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setTree(java.lang.String)", "public void setTree(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabBranchCommit.getMessage()", "public java.lang.String getMessage()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setMessage(java.lang.String)", "public void setMessage(java.lang.String)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabBranchCommit.getAuthor()", "public org.gitlab.api.models.GitlabUser getAuthor()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setAuthor(org.gitlab.api.models.GitlabUser)", "public void setAuthor(org.gitlab.api.models.GitlabUser)"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.models.GitlabBranchCommit.getCommitter()", "public org.gitlab.api.models.GitlabUser getCommitter()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setCommitter(org.gitlab.api.models.GitlabUser)", "public void setCommitter(org.gitlab.api.models.GitlabUser)"], ["java.util.Date", "org.gitlab.api.models.GitlabBranchCommit.getAuthoredDate()", "public java.util.Date getAuthoredDate()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setAuthoredDate(java.util.Date)", "public void setAuthoredDate(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabBranchCommit.getCommittedDate()", "public java.util.Date getCommittedDate()"], ["void", "org.gitlab.api.models.GitlabBranchCommit.setCommittedDate(java.util.Date)", "public void setCommittedDate(java.util.Date)"], ["org.gitlab.api.models.GitlabVisibility[]", "org.gitlab.api.models.GitlabVisibility.values()", "public static org.gitlab.api.models.GitlabVisibility[] values()"], ["org.gitlab.api.models.GitlabVisibility", "org.gitlab.api.models.GitlabVisibility.valueOf(java.lang.String)", "public static org.gitlab.api.models.GitlabVisibility valueOf(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabVisibility.toString()", "public java.lang.String toString()"], ["org.gitlab.api.models.GitlabTrigger", "org.gitlab.api.models.GitlabTrigger()", "public org.gitlab.api.models.GitlabTrigger()"], ["java.lang.String", "org.gitlab.api.models.GitlabTrigger.getToken()", "public java.lang.String getToken()"], ["void", "org.gitlab.api.models.GitlabTrigger.setToken(java.lang.String)", "public void setToken(java.lang.String)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getCreatedAt()", "public java.util.Date getCreatedAt()"], ["void", "org.gitlab.api.models.GitlabTrigger.setCreatedAt(java.util.Date)", "public void setCreatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getUpdatedAt()", "public java.util.Date getUpdatedAt()"], ["void", "org.gitlab.api.models.GitlabTrigger.setUpdatedAt(java.util.Date)", "public void setUpdatedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getDeletedAt()", "public java.util.Date getDeletedAt()"], ["void", "org.gitlab.api.models.GitlabTrigger.setDeletedAt(java.util.Date)", "public void setDeletedAt(java.util.Date)"], ["java.util.Date", "org.gitlab.api.models.GitlabTrigger.getLastUsed()", "public java.util.Date getLastUsed()"], ["void", "org.gitlab.api.models.GitlabTrigger.setLastUsed(java.util.Date)", "public void setLastUsed(java.util.Date)"], ["org.gitlab.api.models.GitlabJiraProperties", "org.gitlab.api.models.GitlabJiraProperties()", "public org.gitlab.api.models.GitlabJiraProperties()"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getUrl()", "public java.lang.String getUrl()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setUrl(java.lang.String)", "public void setUrl(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getProjectKey()", "public java.lang.String getProjectKey()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setProjectKey(java.lang.String)", "public void setProjectKey(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getUsername()", "public java.lang.String getUsername()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setUsername(java.lang.String)", "public void setUsername(java.lang.String)"], ["java.lang.String", "org.gitlab.api.models.GitlabJiraProperties.getPassword()", "public java.lang.String getPassword()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setPassword(java.lang.String)", "public void setPassword(java.lang.String)"], ["java.lang.Integer", "org.gitlab.api.models.GitlabJiraProperties.getIssueTransitionId()", "public java.lang.Integer getIssueTransitionId()"], ["void", "org.gitlab.api.models.GitlabJiraProperties.setIssueTransitionId(java.lang.Integer)", "public void setIssueTransitionId(java.lang.Integer)"], ["org.gitlab.api.Pagination", "org.gitlab.api.Pagination()", "public org.gitlab.api.Pagination()"], ["void", "org.gitlab.api.Pagination.setPage(int)", "public void setPage(int)"], ["void", "org.gitlab.api.Pagination.setPerPage(int)", "public void setPerPage(int)"], ["org.gitlab.api.Pagination", "org.gitlab.api.Pagination.withPage(int)", "public org.gitlab.api.Pagination withPage(int)"], ["org.gitlab.api.Pagination", "org.gitlab.api.Pagination.withPerPage(int)", "public org.gitlab.api.Pagination withPerPage(int)"], ["org.gitlab.api.http.Query", "org.gitlab.api.Pagination.asQuery()", "public org.gitlab.api.http.Query asQuery()"], ["java.lang.String", "org.gitlab.api.Pagination.toString()", "public java.lang.String toString()"], ["org.gitlab.api.models.GitlabSession", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String, java.lang.String)", "public static org.gitlab.api.models.GitlabSession connect(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String)", "public static org.gitlab.api.GitlabAPI connect(java.lang.String, java.lang.String)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String, org.gitlab.api.TokenType)", "public static org.gitlab.api.GitlabAPI connect(java.lang.String, java.lang.String, org.gitlab.api.TokenType)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.connect(java.lang.String, java.lang.String, org.gitlab.api.TokenType, org.gitlab.api.AuthMethod)", "public static org.gitlab.api.GitlabAPI connect(java.lang.String, java.lang.String, org.gitlab.api.TokenType, org.gitlab.api.AuthMethod)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.ignoreCertificateErrors(boolean)", "public org.gitlab.api.GitlabAPI ignoreCertificateErrors(boolean)"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.proxy(java.net.Proxy)", "public org.gitlab.api.GitlabAPI proxy(java.net.Proxy)"], ["int", "org.gitlab.api.GitlabAPI.getRequestTimeout()", "public int getRequestTimeout()"], ["org.gitlab.api.GitlabAPI", "org.gitlab.api.GitlabAPI.setRequestTimeout(int)", "public org.gitlab.api.GitlabAPI setRequestTimeout(int)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.GitlabAPI.retrieve()", "public org.gitlab.api.http.GitlabHTTPRequestor retrieve()"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.GitlabAPI.dispatch()", "public org.gitlab.api.http.GitlabHTTPRequestor dispatch()"], ["boolean", "org.gitlab.api.GitlabAPI.isIgnoreCertificateErrors()", "public boolean isIgnoreCertificateErrors()"], ["java.net.Proxy", "org.gitlab.api.GitlabAPI.getProxy()", "public java.net.Proxy getProxy()"], ["java.net.URL", "org.gitlab.api.GitlabAPI.getAPIUrl(java.lang.String)", "public java.net.URL getAPIUrl(java.lang.String) throws java.io.IOException"], ["java.net.URL", "org.gitlab.api.GitlabAPI.getUrl(java.lang.String)", "public java.net.URL getUrl(java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabUser>", "org.gitlab.api.GitlabAPI.getUsers()", "public java.util.List<org.gitlab.api.models.GitlabUser> getUsers() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabUser>", "org.gitlab.api.GitlabAPI.findUsers(java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabUser> findUsers(java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.getUser()", "public org.gitlab.api.models.GitlabUser getUser() throws java.io.IOException"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.getUser(java.lang.Integer)", "public org.gitlab.api.models.GitlabUser getUser(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.getUserViaSudo(java.lang.String)", "public org.gitlab.api.models.GitlabUser getUserViaSudo(java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.createUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean)", "public org.gitlab.api.models.GitlabUser createUser(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean) throws java.io.IOException"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.createUser(org.gitlab.api.models.CreateUserRequest)", "public org.gitlab.api.models.GitlabUser createUser(org.gitlab.api.models.CreateUserRequest) throws java.io.IOException"], ["org.gitlab.api.models.GitlabUser", "org.gitlab.api.GitlabAPI.updateUser(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean)", "public org.gitlab.api.models.GitlabUser updateUser(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.blockUser(java.lang.Integer)", "public void blockUser(java.lang.Integer) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.unblockUser(java.lang.Integer)", "public void unblockUser(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.createSSHKey(java.lang.Integer, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabSSHKey createSSHKey(java.lang.Integer, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteSSHKey(java.lang.Integer, java.lang.Integer)", "public void deleteSSHKey(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabSSHKey>", "org.gitlab.api.GitlabAPI.getSSHKeys(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabSSHKey> getSSHKeys(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.getSSHKey(java.lang.Integer)", "public org.gitlab.api.models.GitlabSSHKey getSSHKey(java.lang.Integer) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteUser(java.lang.Integer)", "public void deleteUser(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.getGroup(java.lang.Integer)", "public org.gitlab.api.models.GitlabGroup getGroup(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.getGroup(java.lang.String)", "public org.gitlab.api.models.GitlabGroup getGroup(java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabGroup>", "org.gitlab.api.GitlabAPI.getGroups()", "public java.util.List<org.gitlab.api.models.GitlabGroup> getGroups() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabGroup>", "org.gitlab.api.GitlabAPI.getGroupsViaSudo(java.lang.String, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabGroup> getGroupsViaSudo(java.lang.String, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getGroupProjects(org.gitlab.api.models.GitlabGroup)", "public java.util.List<org.gitlab.api.models.GitlabProject> getGroupProjects(org.gitlab.api.models.GitlabGroup) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getGroupProjects(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabProject> getGroupProjects(java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabGroupMember>", "org.gitlab.api.GitlabAPI.getGroupMembers(org.gitlab.api.models.GitlabGroup)", "public java.util.List<org.gitlab.api.models.GitlabGroupMember> getGroupMembers(org.gitlab.api.models.GitlabGroup) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabGroupMember>", "org.gitlab.api.GitlabAPI.getGroupMembers(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabGroupMember> getGroupMembers(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String)", "public org.gitlab.api.models.GitlabGroup createGroup(java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabGroup createGroup(java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroupViaSudo(java.lang.String, java.lang.String, org.gitlab.api.models.GitlabUser)", "public org.gitlab.api.models.GitlabGroup createGroupViaSudo(java.lang.String, java.lang.String, org.gitlab.api.models.GitlabUser) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel)", "public org.gitlab.api.models.GitlabGroup createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(org.gitlab.api.models.CreateGroupRequest, org.gitlab.api.models.GitlabUser)", "public org.gitlab.api.models.GitlabGroup createGroup(org.gitlab.api.models.CreateGroupRequest, org.gitlab.api.models.GitlabUser) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel, org.gitlab.api.models.GitlabUser)", "public org.gitlab.api.models.GitlabGroup createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel, org.gitlab.api.models.GitlabUser) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroup", "org.gitlab.api.GitlabAPI.createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel, org.gitlab.api.models.GitlabUser, java.lang.Integer)", "public org.gitlab.api.models.GitlabGroup createGroup(java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabAccessLevel, org.gitlab.api.models.GitlabUser, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroupMember", "org.gitlab.api.GitlabAPI.addGroupMember(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabUser, org.gitlab.api.models.GitlabAccessLevel)", "public org.gitlab.api.models.GitlabGroupMember addGroupMember(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabUser, org.gitlab.api.models.GitlabAccessLevel) throws java.io.IOException"], ["org.gitlab.api.models.GitlabGroupMember", "org.gitlab.api.GitlabAPI.addGroupMember(java.lang.Integer, java.lang.Integer, org.gitlab.api.models.GitlabAccessLevel)", "public org.gitlab.api.models.GitlabGroupMember addGroupMember(java.lang.Integer, java.lang.Integer, org.gitlab.api.models.GitlabAccessLevel) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteGroupMember(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabUser)", "public void deleteGroupMember(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabUser) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteGroupMember(java.lang.Integer, java.lang.Integer)", "public void deleteGroupMember(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteGroup(java.lang.Integer)", "public void deleteGroup(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.getProject(java.io.Serializable)", "public org.gitlab.api.models.GitlabProject getProject(java.io.Serializable) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.getProject(java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabProject getProject(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.gitlab.api.GitlabAPI.getProjectJson(java.io.Serializable)", "public java.lang.String getProjectJson(java.io.Serializable) throws java.io.IOException"], ["java.lang.String", "org.gitlab.api.GitlabAPI.getProjectJson(java.lang.String, java.lang.String)", "public java.lang.String getProjectJson(java.lang.String, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getProjects()", "public java.util.List<org.gitlab.api.models.GitlabProject> getProjects() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getOwnedProjects()", "public java.util.List<org.gitlab.api.models.GitlabProject> getOwnedProjects() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getMembershipProjects()", "public java.util.List<org.gitlab.api.models.GitlabProject> getMembershipProjects() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getStarredProjects()", "public java.util.List<org.gitlab.api.models.GitlabProject> getStarredProjects() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.getProjectsViaSudo(org.gitlab.api.models.GitlabUser)", "public java.util.List<org.gitlab.api.models.GitlabProject> getProjectsViaSudo(org.gitlab.api.models.GitlabUser) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabNamespace>", "org.gitlab.api.GitlabAPI.getNamespaces()", "public java.util.List<org.gitlab.api.models.GitlabNamespace> getNamespaces() throws java.io.IOException"], ["org.gitlab.api.models.GitlabUpload", "org.gitlab.api.GitlabAPI.uploadFile(org.gitlab.api.models.GitlabProject, java.io.File)", "public org.gitlab.api.models.GitlabUpload uploadFile(org.gitlab.api.models.GitlabProject, java.io.File) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabJob>", "org.gitlab.api.GitlabAPI.getProjectJobs(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabJob> getProjectJobs(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabJob>", "org.gitlab.api.GitlabAPI.getProjectJobs(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabJob> getProjectJobs(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabJob", "org.gitlab.api.GitlabAPI.getProjectJob(java.lang.Integer, java.lang.Integer)", "public org.gitlab.api.models.GitlabJob getProjectJob(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobArtifact(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabJob)", "public byte[] getJobArtifact(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabJob) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobArtifact(java.lang.Integer, java.lang.Integer)", "public byte[] getJobArtifact(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobTrace(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabJob)", "public byte[] getJobTrace(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabJob) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getJobTrace(java.lang.Integer, java.lang.Integer)", "public byte[] getJobTrace(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProject(org.gitlab.api.models.GitlabProject)", "public org.gitlab.api.models.GitlabProject createProject(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProject(java.lang.String)", "public org.gitlab.api.models.GitlabProject createProject(java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup)", "public org.gitlab.api.models.GitlabProject createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup, java.lang.String)", "public org.gitlab.api.models.GitlabProject createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabProject createProjectForGroup(java.lang.String, org.gitlab.api.models.GitlabGroup, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createProject(java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabProject createProject(java.lang.String, java.lang.Integer, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createUserProject(java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabProject createUserProject(java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createUserProject(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabProject createUserProject(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createFork(java.lang.String, java.lang.Integer)", "public org.gitlab.api.models.GitlabProject createFork(java.lang.String, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.createFork(java.lang.String, org.gitlab.api.models.GitlabProject)", "public org.gitlab.api.models.GitlabProject createFork(java.lang.String, org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProject", "org.gitlab.api.GitlabAPI.updateProject(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String)", "public org.gitlab.api.models.GitlabProject updateProject(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.Boolean, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteProject(java.io.Serializable)", "public void deleteProject(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getOpenMergeRequests(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getOpenMergeRequests(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getOpenMergeRequests(java.io.Serializable, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getOpenMergeRequests(java.io.Serializable, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getOpenMergeRequests(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getOpenMergeRequests(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getOpenMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getOpenMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergedMergeRequests(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergedMergeRequests(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergedMergeRequests(java.io.Serializable, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergedMergeRequests(java.io.Serializable, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergedMergeRequests(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergedMergeRequests(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergedMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergedMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getClosedMergeRequests(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getClosedMergeRequests(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getClosedMergeRequests(java.io.Serializable, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getClosedMergeRequests(java.io.Serializable, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getClosedMergeRequests(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getClosedMergeRequests(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getClosedMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getClosedMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequestsWithStatus(java.io.Serializable, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequestsWithStatus(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequestsWithStatus(java.io.Serializable, java.lang.String, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequestsWithStatus(java.io.Serializable, java.lang.String, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequestsWithStatus(org.gitlab.api.models.GitlabProject, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequestsWithStatus(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequestsWithStatus(org.gitlab.api.models.GitlabProject, java.lang.String, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequestsWithStatus(org.gitlab.api.models.GitlabProject, java.lang.String, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequests(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequests(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequests(java.io.Serializable, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequests(java.io.Serializable, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequests(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequests(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getMergeRequests(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMergeRequest>", "org.gitlab.api.GitlabAPI.getAllMergeRequests(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabMergeRequest> getAllMergeRequests(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequestApprovals", "org.gitlab.api.GitlabAPI.getMergeRequestApprovals(org.gitlab.api.models.GitlabMergeRequest)", "public org.gitlab.api.models.GitlabMergeRequestApprovals getMergeRequestApprovals(org.gitlab.api.models.GitlabMergeRequest) throws java.io.IOException"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.GitlabAPI.cherryPick(java.io.Serializable, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabCommit cherryPick(java.io.Serializable, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.GitlabAPI.cherryPick(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabCommit cherryPick(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.getMergeRequestByIid(java.io.Serializable, java.lang.Integer)", "public org.gitlab.api.models.GitlabMergeRequest getMergeRequestByIid(java.io.Serializable, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.getMergeRequestChanges(java.io.Serializable, java.lang.Integer)", "public org.gitlab.api.models.GitlabMergeRequest getMergeRequestChanges(java.io.Serializable, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.getMergeRequest(org.gitlab.api.models.GitlabProject, java.lang.Integer)", "public org.gitlab.api.models.GitlabMergeRequest getMergeRequest(org.gitlab.api.models.GitlabProject, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.createMergeRequest(java.io.Serializable, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabMergeRequest createMergeRequest(java.io.Serializable, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.updateMergeRequest(java.io.Serializable, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabMergeRequest updateMergeRequest(java.io.Serializable, java.lang.Integer, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMergeRequest", "org.gitlab.api.GitlabAPI.acceptMergeRequest(org.gitlab.api.models.GitlabProject, java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabMergeRequest acceptMergeRequest(org.gitlab.api.models.GitlabProject, java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.getNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer)", "public org.gitlab.api.models.GitlabNote getNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabNote>", "org.gitlab.api.GitlabAPI.getNotes(org.gitlab.api.models.GitlabMergeRequest)", "public java.util.List<org.gitlab.api.models.GitlabNote> getNotes(org.gitlab.api.models.GitlabMergeRequest) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabNote>", "org.gitlab.api.GitlabAPI.getAllNotes(org.gitlab.api.models.GitlabMergeRequest)", "public java.util.List<org.gitlab.api.models.GitlabNote> getAllNotes(org.gitlab.api.models.GitlabMergeRequest) throws java.io.IOException"], ["org.gitlab.api.models.GitlabCommit", "org.gitlab.api.GitlabAPI.getCommit(java.io.Serializable, java.lang.String)", "public org.gitlab.api.models.GitlabCommit getCommit(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getCommits(org.gitlab.api.models.GitlabMergeRequest)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getCommits(org.gitlab.api.models.GitlabMergeRequest) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getCommits(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getCommits(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getLastCommits(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getLastCommits(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getLastCommits(java.io.Serializable, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getLastCommits(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getCommits(java.io.Serializable, org.gitlab.api.Pagination, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getCommits(java.io.Serializable, org.gitlab.api.Pagination, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getAllCommits(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getAllCommits(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getAllCommits(java.io.Serializable, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getAllCommits(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommit>", "org.gitlab.api.GitlabAPI.getAllCommits(java.io.Serializable, org.gitlab.api.Pagination, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabCommit> getAllCommits(java.io.Serializable, org.gitlab.api.Pagination, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommitDiff>", "org.gitlab.api.GitlabAPI.getCommitDiffs(java.io.Serializable, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabCommitDiff> getCommitDiffs(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommitDiff>", "org.gitlab.api.GitlabAPI.getCommitDiffs(java.io.Serializable, java.lang.String, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabCommitDiff> getCommitDiffs(java.io.Serializable, java.lang.String, org.gitlab.api.Pagination) throws java.io.IOException"], ["org.gitlab.api.models.GitlabCommitComparison", "org.gitlab.api.GitlabAPI.compareCommits(java.io.Serializable, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabCommitComparison compareCommits(java.io.Serializable, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabCommitComparison", "org.gitlab.api.GitlabAPI.compareCommits(java.io.Serializable, java.lang.String, java.lang.String, org.gitlab.api.Pagination)", "public org.gitlab.api.models.GitlabCommitComparison compareCommits(java.io.Serializable, java.lang.String, java.lang.String, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommitStatus>", "org.gitlab.api.GitlabAPI.getCommitStatuses(org.gitlab.api.models.GitlabProject, java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabCommitStatus> getCommitStatuses(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabCommitStatus>", "org.gitlab.api.GitlabAPI.getCommitStatuses(org.gitlab.api.models.GitlabProject, java.lang.String, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabCommitStatus> getCommitStatuses(org.gitlab.api.models.GitlabProject, java.lang.String, org.gitlab.api.Pagination) throws java.io.IOException"], ["org.gitlab.api.models.GitlabCommitStatus", "org.gitlab.api.GitlabAPI.createCommitStatus(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabCommitStatus createCommitStatus(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getRawFileContent(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)", "public byte[] getRawFileContent(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getRawFileContent(java.lang.Integer, java.lang.String, java.lang.String)", "public byte[] getRawFileContent(java.lang.Integer, java.lang.String, java.lang.String) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getRawBlobContent(org.gitlab.api.models.GitlabProject, java.lang.String)", "public byte[] getRawBlobContent(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["byte[]", "org.gitlab.api.GitlabAPI.getFileArchive(org.gitlab.api.models.GitlabProject)", "public byte[] getFileArchive(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabRepositoryTree>", "org.gitlab.api.GitlabAPI.getRepositoryTree(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, boolean)", "public java.util.List<org.gitlab.api.models.GitlabRepositoryTree> getRepositoryTree(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, boolean) throws java.io.IOException"], ["org.gitlab.api.models.GitlabRepositoryFile", "org.gitlab.api.GitlabAPI.getRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabRepositoryFile getRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSimpleRepositoryFile", "org.gitlab.api.GitlabAPI.createRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabSimpleRepositoryFile createRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSimpleRepositoryFile", "org.gitlab.api.GitlabAPI.updateRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabSimpleRepositoryFile updateRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String)", "public void deleteRepositoryFile(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.updateNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabNote updateNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.createNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.String)", "public org.gitlab.api.models.GitlabNote createNote(org.gitlab.api.models.GitlabMergeRequest, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteNote(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.models.GitlabNote)", "public void deleteNote(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.models.GitlabNote) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabBranch>", "org.gitlab.api.GitlabAPI.getBranches(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabBranch> getBranches(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabBranch>", "org.gitlab.api.GitlabAPI.getBranches(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabBranch> getBranches(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.createBranch(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)", "public void createBranch(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.createBranch(java.io.Serializable, java.lang.String, java.lang.String)", "public void createBranch(java.io.Serializable, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteBranch(java.io.Serializable, java.lang.String)", "public void deleteBranch(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBranch", "org.gitlab.api.GitlabAPI.getBranch(java.io.Serializable, java.lang.String)", "public org.gitlab.api.models.GitlabBranch getBranch(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBranch", "org.gitlab.api.GitlabAPI.getBranch(org.gitlab.api.models.GitlabProject, java.lang.String)", "public org.gitlab.api.models.GitlabBranch getBranch(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.protectBranch(org.gitlab.api.models.GitlabProject, java.lang.String)", "public void protectBranch(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.protectBranchWithDeveloperOptions(org.gitlab.api.models.GitlabProject, java.lang.String, boolean, boolean)", "public void protectBranchWithDeveloperOptions(org.gitlab.api.models.GitlabProject, java.lang.String, boolean, boolean) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.unprotectBranch(org.gitlab.api.models.GitlabProject, java.lang.String)", "public void unprotectBranch(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectHook>", "org.gitlab.api.GitlabAPI.getProjectHooks(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabProjectHook> getProjectHooks(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectHook>", "org.gitlab.api.GitlabAPI.getProjectHooks(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabProjectHook> getProjectHooks(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.getProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String)", "public org.gitlab.api.models.GitlabProjectHook getProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.addProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String)", "public org.gitlab.api.models.GitlabProjectHook addProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.addProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabProjectHook addProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.addProjectHook(java.io.Serializable, java.lang.String, boolean, boolean, boolean, boolean, boolean)", "public org.gitlab.api.models.GitlabProjectHook addProjectHook(java.io.Serializable, java.lang.String, boolean, boolean, boolean, boolean, boolean) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectHook", "org.gitlab.api.GitlabAPI.editProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabProjectHook editProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectHook(org.gitlab.api.models.GitlabProjectHook)", "public void deleteProjectHook(org.gitlab.api.models.GitlabProjectHook) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String)", "public void deleteProjectHook(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabIssue>", "org.gitlab.api.GitlabAPI.getIssues(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabIssue> getIssues(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabIssue>", "org.gitlab.api.GitlabAPI.getIssues(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabIssue> getIssues(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabIssue>", "org.gitlab.api.GitlabAPI.getIssues(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabMilestone)", "public java.util.List<org.gitlab.api.models.GitlabIssue> getIssues(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabMilestone) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabIssue>", "org.gitlab.api.GitlabAPI.getIssues(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabMilestone)", "public java.util.List<org.gitlab.api.models.GitlabIssue> getIssues(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabMilestone) throws java.io.IOException"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.getIssue(java.io.Serializable, java.lang.Integer)", "public org.gitlab.api.models.GitlabIssue getIssue(java.io.Serializable, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabIssueTimeStats", "org.gitlab.api.GitlabAPI.getIssueTimeStats(java.io.Serializable, java.lang.Integer)", "public org.gitlab.api.models.GitlabIssueTimeStats getIssueTimeStats(java.io.Serializable, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.createIssue(int, int, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabIssue createIssue(int, int, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.moveIssue(java.lang.Integer, java.lang.Integer, java.lang.Integer)", "public org.gitlab.api.models.GitlabIssue moveIssue(java.lang.Integer, java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabIssue", "org.gitlab.api.GitlabAPI.editIssue(int, int, int, int, java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabIssue$Action)", "public org.gitlab.api.models.GitlabIssue editIssue(int, int, int, int, java.lang.String, java.lang.String, java.lang.String, org.gitlab.api.models.GitlabIssue$Action) throws java.io.IOException"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.getNote(org.gitlab.api.models.GitlabIssue, java.lang.Integer)", "public org.gitlab.api.models.GitlabNote getNote(org.gitlab.api.models.GitlabIssue, java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabNote>", "org.gitlab.api.GitlabAPI.getNotes(org.gitlab.api.models.GitlabIssue)", "public java.util.List<org.gitlab.api.models.GitlabNote> getNotes(org.gitlab.api.models.GitlabIssue) throws java.io.IOException"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.createNote(java.io.Serializable, java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabNote createNote(java.io.Serializable, java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabNote", "org.gitlab.api.GitlabAPI.createNote(org.gitlab.api.models.GitlabIssue, java.lang.String)", "public org.gitlab.api.models.GitlabNote createNote(org.gitlab.api.models.GitlabIssue, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteNote(java.io.Serializable, java.lang.Integer, org.gitlab.api.models.GitlabNote)", "public void deleteNote(java.io.Serializable, java.lang.Integer, org.gitlab.api.models.GitlabNote) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteNote(org.gitlab.api.models.GitlabIssue, org.gitlab.api.models.GitlabNote)", "public void deleteNote(org.gitlab.api.models.GitlabIssue, org.gitlab.api.models.GitlabNote) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabLabel>", "org.gitlab.api.GitlabAPI.getLabels(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabLabel> getLabels(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabLabel>", "org.gitlab.api.GitlabAPI.getLabels(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabLabel> getLabels(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.GitlabAPI.createLabel(java.io.Serializable, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabLabel createLabel(java.io.Serializable, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.GitlabAPI.createLabel(java.io.Serializable, org.gitlab.api.models.GitlabLabel)", "public org.gitlab.api.models.GitlabLabel createLabel(java.io.Serializable, org.gitlab.api.models.GitlabLabel) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteLabel(java.io.Serializable, java.lang.String)", "public void deleteLabel(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteLabel(java.io.Serializable, org.gitlab.api.models.GitlabLabel)", "public void deleteLabel(java.io.Serializable, org.gitlab.api.models.GitlabLabel) throws java.io.IOException"], ["org.gitlab.api.models.GitlabLabel", "org.gitlab.api.GitlabAPI.updateLabel(java.io.Serializable, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabLabel updateLabel(java.io.Serializable, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMilestone>", "org.gitlab.api.GitlabAPI.getMilestones(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabMilestone> getMilestones(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMilestone>", "org.gitlab.api.GitlabAPI.getMilestones(org.gitlab.api.models.GitlabGroup)", "public java.util.List<org.gitlab.api.models.GitlabMilestone> getMilestones(org.gitlab.api.models.GitlabGroup) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMilestone>", "org.gitlab.api.GitlabAPI.getProjectMilestones(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabMilestone> getProjectMilestones(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabMilestone>", "org.gitlab.api.GitlabAPI.getGroupMilestones(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabMilestone> getGroupMilestones(java.io.Serializable) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.createMilestone(java.io.Serializable, java.lang.String, java.lang.String, java.util.Date, java.util.Date)", "public org.gitlab.api.models.GitlabMilestone createMilestone(java.io.Serializable, java.lang.String, java.lang.String, java.util.Date, java.util.Date) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.createMilestone(java.io.Serializable, org.gitlab.api.models.GitlabMilestone)", "public org.gitlab.api.models.GitlabMilestone createMilestone(java.io.Serializable, org.gitlab.api.models.GitlabMilestone) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.updateMilestone(java.io.Serializable, int, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String)", "public org.gitlab.api.models.GitlabMilestone updateMilestone(java.io.Serializable, int, java.lang.String, java.lang.String, java.util.Date, java.util.Date, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.updateMilestone(java.io.Serializable, org.gitlab.api.models.GitlabMilestone, java.lang.String)", "public org.gitlab.api.models.GitlabMilestone updateMilestone(java.io.Serializable, org.gitlab.api.models.GitlabMilestone, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabMilestone", "org.gitlab.api.GitlabAPI.updateMilestone(org.gitlab.api.models.GitlabMilestone, java.lang.String)", "public org.gitlab.api.models.GitlabMilestone updateMilestone(org.gitlab.api.models.GitlabMilestone, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectMember", "org.gitlab.api.GitlabAPI.addProjectMember(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabUser, org.gitlab.api.models.GitlabAccessLevel)", "public org.gitlab.api.models.GitlabProjectMember addProjectMember(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabUser, org.gitlab.api.models.GitlabAccessLevel) throws java.io.IOException"], ["org.gitlab.api.models.GitlabProjectMember", "org.gitlab.api.GitlabAPI.addProjectMember(java.lang.Integer, java.lang.Integer, org.gitlab.api.models.GitlabAccessLevel)", "public org.gitlab.api.models.GitlabProjectMember addProjectMember(java.lang.Integer, java.lang.Integer, org.gitlab.api.models.GitlabAccessLevel) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectMember(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabUser)", "public void deleteProjectMember(org.gitlab.api.models.GitlabProject, org.gitlab.api.models.GitlabUser) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteProjectMember(java.lang.Integer, java.lang.Integer)", "public void deleteProjectMember(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectMember>", "org.gitlab.api.GitlabAPI.getProjectMembers(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabProjectMember> getProjectMembers(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectMember>", "org.gitlab.api.GitlabAPI.getProjectMembers(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabProjectMember> getProjectMembers(org.gitlab.api.models.GitlabProject, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectMember>", "org.gitlab.api.GitlabAPI.getProjectMembers(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabProjectMember> getProjectMembers(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectMember>", "org.gitlab.api.GitlabAPI.getProjectMembers(java.io.Serializable, org.gitlab.api.Pagination)", "public java.util.List<org.gitlab.api.models.GitlabProjectMember> getProjectMembers(java.io.Serializable, org.gitlab.api.Pagination) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectMember>", "org.gitlab.api.GitlabAPI.getNamespaceMembers(org.gitlab.api.models.GitlabNamespace)", "public java.util.List<org.gitlab.api.models.GitlabProjectMember> getNamespaceMembers(org.gitlab.api.models.GitlabNamespace) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProjectMember>", "org.gitlab.api.GitlabAPI.getNamespaceMembers(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabProjectMember> getNamespaceMembers(java.lang.Integer) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.transfer(java.lang.Integer, java.lang.Integer)", "public void transfer(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.createDeployKey(java.lang.Integer, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabSSHKey createDeployKey(java.lang.Integer, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSSHKey", "org.gitlab.api.GitlabAPI.createPushDeployKey(java.lang.Integer, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabSSHKey createPushDeployKey(java.lang.Integer, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteDeployKey(java.lang.Integer, java.lang.Integer)", "public void deleteDeployKey(java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabSSHKey>", "org.gitlab.api.GitlabAPI.getDeployKeys(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabSSHKey> getDeployKeys(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSession", "org.gitlab.api.GitlabAPI.getCurrentSession()", "public org.gitlab.api.models.GitlabSession getCurrentSession() throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabSystemHook>", "org.gitlab.api.GitlabAPI.getSystemHooks()", "public java.util.List<org.gitlab.api.models.GitlabSystemHook> getSystemHooks() throws java.io.IOException"], ["org.gitlab.api.models.GitlabSystemHook", "org.gitlab.api.GitlabAPI.addSystemHook(java.lang.String)", "public org.gitlab.api.models.GitlabSystemHook addSystemHook(java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.testSystemHook(java.lang.Integer)", "public void testSystemHook(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabSystemHook", "org.gitlab.api.GitlabAPI.deleteSystemHook(java.lang.Integer)", "public org.gitlab.api.models.GitlabSystemHook deleteSystemHook(java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.CommitComment", "org.gitlab.api.GitlabAPI.createCommitComment(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.CommitComment createCommitComment(java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.CommitComment>", "org.gitlab.api.GitlabAPI.getCommitComments(java.lang.Integer, java.lang.String)", "public java.util.List<org.gitlab.api.models.CommitComment> getCommitComments(java.lang.Integer, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabTag>", "org.gitlab.api.GitlabAPI.getTags(java.io.Serializable)", "public java.util.List<org.gitlab.api.models.GitlabTag> getTags(java.io.Serializable) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabTag>", "org.gitlab.api.GitlabAPI.getTags(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabTag> getTags(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabTag", "org.gitlab.api.GitlabAPI.addTag(java.io.Serializable, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabTag addTag(java.io.Serializable, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabTag", "org.gitlab.api.GitlabAPI.addTag(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabTag addTag(org.gitlab.api.models.GitlabProject, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteTag(java.io.Serializable, java.lang.String)", "public void deleteTag(java.io.Serializable, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteTag(org.gitlab.api.models.GitlabProject, java.lang.String)", "public void deleteTag(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabAward>", "org.gitlab.api.GitlabAPI.getAllAwards(org.gitlab.api.models.GitlabMergeRequest)", "public java.util.List<org.gitlab.api.models.GitlabAward> getAllAwards(org.gitlab.api.models.GitlabMergeRequest) throws java.io.IOException"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.getAward(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer)", "public org.gitlab.api.models.GitlabAward getAward(org.gitlab.api.models.GitlabMergeRequest, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.createAward(org.gitlab.api.models.GitlabMergeRequest, java.lang.String)", "public org.gitlab.api.models.GitlabAward createAward(org.gitlab.api.models.GitlabMergeRequest, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteAward(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.models.GitlabAward)", "public void deleteAward(org.gitlab.api.models.GitlabMergeRequest, org.gitlab.api.models.GitlabAward) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabAward>", "org.gitlab.api.GitlabAPI.getAllAwards(org.gitlab.api.models.GitlabIssue)", "public java.util.List<org.gitlab.api.models.GitlabAward> getAllAwards(org.gitlab.api.models.GitlabIssue) throws java.io.IOException"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.getAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer)", "public org.gitlab.api.models.GitlabAward getAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.createAward(org.gitlab.api.models.GitlabIssue, java.lang.String)", "public org.gitlab.api.models.GitlabAward createAward(org.gitlab.api.models.GitlabIssue, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteAward(org.gitlab.api.models.GitlabIssue, org.gitlab.api.models.GitlabAward)", "public void deleteAward(org.gitlab.api.models.GitlabIssue, org.gitlab.api.models.GitlabAward) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabAward>", "org.gitlab.api.GitlabAPI.getAllAwards(org.gitlab.api.models.GitlabIssue, java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabAward> getAllAwards(org.gitlab.api.models.GitlabIssue, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.getAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, java.lang.Integer)", "public org.gitlab.api.models.GitlabAward getAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, java.lang.Integer) throws java.io.IOException"], ["org.gitlab.api.models.GitlabAward", "org.gitlab.api.GitlabAPI.createAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabAward createAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, org.gitlab.api.models.GitlabAward)", "public void deleteAward(org.gitlab.api.models.GitlabIssue, java.lang.Integer, org.gitlab.api.models.GitlabAward) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabBuildVariable>", "org.gitlab.api.GitlabAPI.getBuildVariables(java.lang.Integer)", "public java.util.List<org.gitlab.api.models.GitlabBuildVariable> getBuildVariables(java.lang.Integer) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabBuildVariable>", "org.gitlab.api.GitlabAPI.getBuildVariables(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabBuildVariable> getBuildVariables(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.getBuildVariable(java.lang.Integer, java.lang.String)", "public org.gitlab.api.models.GitlabBuildVariable getBuildVariable(java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.getBuildVariable(org.gitlab.api.models.GitlabProject, java.lang.String)", "public org.gitlab.api.models.GitlabBuildVariable getBuildVariable(org.gitlab.api.models.GitlabProject, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.createBuildVariable(java.lang.Integer, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabBuildVariable createBuildVariable(java.lang.Integer, java.lang.String, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.createBuildVariable(java.lang.Integer, org.gitlab.api.models.GitlabBuildVariable)", "public org.gitlab.api.models.GitlabBuildVariable createBuildVariable(java.lang.Integer, org.gitlab.api.models.GitlabBuildVariable) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteBuildVariable(java.lang.Integer, java.lang.String)", "public void deleteBuildVariable(java.lang.Integer, java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteBuildVariable(java.lang.Integer, org.gitlab.api.models.GitlabBuildVariable)", "public void deleteBuildVariable(java.lang.Integer, org.gitlab.api.models.GitlabBuildVariable) throws java.io.IOException"], ["org.gitlab.api.models.GitlabBuildVariable", "org.gitlab.api.GitlabAPI.updateBuildVariable(java.lang.Integer, java.lang.String, java.lang.String)", "public org.gitlab.api.models.GitlabBuildVariable updateBuildVariable(java.lang.Integer, java.lang.String, java.lang.String) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabTrigger>", "org.gitlab.api.GitlabAPI.getPipelineTriggers(org.gitlab.api.models.GitlabProject)", "public java.util.List<org.gitlab.api.models.GitlabTrigger> getPipelineTriggers(org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["org.gitlab.api.models.GitlabServiceEmailOnPush", "org.gitlab.api.GitlabAPI.getEmailsOnPush(java.lang.Integer)", "public org.gitlab.api.models.GitlabServiceEmailOnPush getEmailsOnPush(java.lang.Integer) throws java.io.IOException"], ["boolean", "org.gitlab.api.GitlabAPI.updateEmailsOnPush(java.lang.Integer, java.lang.String)", "public boolean updateEmailsOnPush(java.lang.Integer, java.lang.String) throws java.io.IOException"], ["org.gitlab.api.models.GitlabServiceJira", "org.gitlab.api.GitlabAPI.getJiraService(java.lang.Integer)", "public org.gitlab.api.models.GitlabServiceJira getJiraService(java.lang.Integer) throws java.io.IOException"], ["boolean", "org.gitlab.api.GitlabAPI.deleteJiraService(java.lang.Integer)", "public boolean deleteJiraService(java.lang.Integer) throws java.io.IOException"], ["boolean", "org.gitlab.api.GitlabAPI.createOrEditJiraService(java.lang.Integer, org.gitlab.api.models.GitlabJiraProperties)", "public boolean createOrEditJiraService(java.lang.Integer, org.gitlab.api.models.GitlabJiraProperties) throws java.io.IOException"], ["java.util.List<org.gitlab.api.models.GitlabProject>", "org.gitlab.api.GitlabAPI.searchProjects(java.lang.String)", "public java.util.List<org.gitlab.api.models.GitlabProject> searchProjects(java.lang.String) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.shareProjectWithGroup(org.gitlab.api.models.GitlabAccessLevel, java.lang.String, org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabProject)", "public void shareProjectWithGroup(org.gitlab.api.models.GitlabAccessLevel, java.lang.String, org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteSharedProjectGroupLink(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabProject)", "public void deleteSharedProjectGroupLink(org.gitlab.api.models.GitlabGroup, org.gitlab.api.models.GitlabProject) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.deleteSharedProjectGroupLink(int, int)", "public void deleteSharedProjectGroupLink(int, int) throws java.io.IOException"], ["void", "org.gitlab.api.GitlabAPI.setUserAgent(java.lang.String)", "public void setUserAgent(java.lang.String)"], ["java.lang.String", "org.gitlab.api.GitlabAPI.getUserAgent()", "public java.lang.String getUserAgent()"], ["org.gitlab.api.models.GitlabVersion", "org.gitlab.api.GitlabAPI.getVersion()", "public org.gitlab.api.models.GitlabVersion getVersion() throws java.io.IOException"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query()", "public org.gitlab.api.http.Query()"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.append(java.lang.String, java.lang.String)", "public org.gitlab.api.http.Query append(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, java.lang.String)", "public org.gitlab.api.http.Query appendIf(java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, java.lang.Integer)", "public org.gitlab.api.http.Query appendIf(java.lang.String, java.lang.Integer) throws java.io.UnsupportedEncodingException"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, java.lang.Boolean)", "public org.gitlab.api.http.Query appendIf(java.lang.String, java.lang.Boolean) throws java.io.UnsupportedEncodingException"], ["org.gitlab.api.http.Query", "org.gitlab.api.http.Query.appendIf(java.lang.String, org.gitlab.api.models.GitlabAccessLevel)", "public org.gitlab.api.http.Query appendIf(java.lang.String, org.gitlab.api.models.GitlabAccessLevel) throws java.io.UnsupportedEncodingException"], ["boolean", "org.gitlab.api.http.Query.mergeWith(org.gitlab.api.http.Query)", "public boolean mergeWith(org.gitlab.api.http.Query)"], ["java.lang.String", "org.gitlab.api.http.Query.toString()", "public java.lang.String toString()"], ["org.gitlab.api.http.Query$Tuple", "org.gitlab.api.http.Query$Tuple(T1, T2)", "public org.gitlab.api.http.Query$Tuple(T1, T2)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor(org.gitlab.api.GitlabAPI)", "public org.gitlab.api.http.GitlabHTTPRequestor(org.gitlab.api.GitlabAPI)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.authenticate(java.lang.String, org.gitlab.api.TokenType, org.gitlab.api.AuthMethod)", "public org.gitlab.api.http.GitlabHTTPRequestor authenticate(java.lang.String, org.gitlab.api.TokenType, org.gitlab.api.AuthMethod)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.method(java.lang.String)", "public org.gitlab.api.http.GitlabHTTPRequestor method(java.lang.String)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.with(java.lang.String, java.lang.Object)", "public org.gitlab.api.http.GitlabHTTPRequestor with(java.lang.String, java.lang.Object)"], ["org.gitlab.api.http.GitlabHTTPRequestor", "org.gitlab.api.http.GitlabHTTPRequestor.withAttachment(java.lang.String, java.io.File)", "public org.gitlab.api.http.GitlabHTTPRequestor withAttachment(java.lang.String, java.io.File)"], ["<T> T", "org.gitlab.api.http.GitlabHTTPRequestor.to(java.lang.String, T)", "public <T> T to(java.lang.String, T) throws java.io.IOException"], ["<T> T", "org.gitlab.api.http.GitlabHTTPRequestor.to(java.lang.String, java.lang.Class<T>)", "public <T> T to(java.lang.String, java.lang.Class<T>) throws java.io.IOException"], ["<T> T", "org.gitlab.api.http.GitlabHTTPRequestor.to(java.lang.String, java.lang.Class<T>, T)", "public <T> T to(java.lang.String, java.lang.Class<T>, T) throws java.io.IOException"], ["<T> java.util.List<T>", "org.gitlab.api.http.GitlabHTTPRequestor.getAll(java.lang.String, java.lang.Class<T[]>)", "public <T> java.util.List<T> getAll(java.lang.String, java.lang.Class<T[]>)"], ["<T> java.util.Iterator<T>", "org.gitlab.api.http.GitlabHTTPRequestor.asIterator(java.lang.String, java.lang.Class<T>)", "public <T> java.util.Iterator<T> asIterator(java.lang.String, java.lang.Class<T>)"], ["java.security.cert.X509Certificate[]", "org.gitlab.api.http.GitlabHTTPRequestor$2.getAcceptedIssuers()", "public java.security.cert.X509Certificate[] getAcceptedIssuers()"], ["void", "org.gitlab.api.http.GitlabHTTPRequestor$2.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)", "public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)"], ["void", "org.gitlab.api.http.GitlabHTTPRequestor$2.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)", "public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)"], ["org.gitlab.api.http.GitlabHTTPRequestor$METHOD[]", "org.gitlab.api.http.GitlabHTTPRequestor$METHOD.values()", "public static org.gitlab.api.http.GitlabHTTPRequestor$METHOD[] values()"], ["org.gitlab.api.http.GitlabHTTPRequestor$METHOD", "org.gitlab.api.http.GitlabHTTPRequestor$METHOD.valueOf(java.lang.String)", "public static org.gitlab.api.http.GitlabHTTPRequestor$METHOD valueOf(java.lang.String)"], ["java.lang.String", "org.gitlab.api.http.GitlabHTTPRequestor$METHOD.prettyValues()", "public static java.lang.String prettyValues()"], ["boolean", "org.gitlab.api.http.GitlabHTTPRequestor$1.hasNext()", "public boolean hasNext()"], ["T", "org.gitlab.api.http.GitlabHTTPRequestor$1.next()", "public T next()"], ["void", "org.gitlab.api.http.GitlabHTTPRequestor$1.remove()", "public void remove()"], ["boolean", "org.gitlab.api.http.GitlabHTTPRequestor$3.verify(java.lang.String, javax.net.ssl.SSLSession)", "public boolean verify(java.lang.String, javax.net.ssl.SSLSession)"], ["org.gitlab.api.AuthMethod[]", "org.gitlab.api.AuthMethod.values()", "public static org.gitlab.api.AuthMethod[] values()"], ["org.gitlab.api.AuthMethod", "org.gitlab.api.AuthMethod.valueOf(java.lang.String)", "public static org.gitlab.api.AuthMethod valueOf(java.lang.String)"], ["org.gitlab.api.TokenType[]", "org.gitlab.api.TokenType.values()", "public static org.gitlab.api.TokenType[] values()"], ["org.gitlab.api.TokenType", "org.gitlab.api.TokenType.valueOf(java.lang.String)", "public static org.gitlab.api.TokenType valueOf(java.lang.String)"], ["java.lang.String", "org.gitlab.api.TokenType.getTokenParamName()", "public java.lang.String getTokenParamName()"], ["java.lang.String", "org.gitlab.api.TokenType.getTokenHeaderName()", "public java.lang.String getTokenHeaderName()"], ["java.lang.String", "org.gitlab.api.TokenType.getTokenHeaderFormat()", "public java.lang.String getTokenHeaderFormat()"]]}