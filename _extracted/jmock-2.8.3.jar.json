{"jmock-2.8.3.jar": [["boolean", "org.jmock.AbstractExpectations$1.booleanIs(org.hamcrest.Matcher<?>)", "public boolean booleanIs(org.hamcrest.Matcher<?>)"], ["byte", "org.jmock.AbstractExpectations$1.byteIs(org.hamcrest.Matcher<?>)", "public byte byteIs(org.hamcrest.Matcher<?>)"], ["char", "org.jmock.AbstractExpectations$1.charIs(org.hamcrest.Matcher<?>)", "public char charIs(org.hamcrest.Matcher<?>)"], ["double", "org.jmock.AbstractExpectations$1.doubleIs(org.hamcrest.Matcher<?>)", "public double doubleIs(org.hamcrest.Matcher<?>)"], ["float", "org.jmock.AbstractExpectations$1.floatIs(org.hamcrest.Matcher<?>)", "public float floatIs(org.hamcrest.Matcher<?>)"], ["int", "org.jmock.AbstractExpectations$1.intIs(org.hamcrest.Matcher<?>)", "public int intIs(org.hamcrest.Matcher<?>)"], ["long", "org.jmock.AbstractExpectations$1.longIs(org.hamcrest.Matcher<?>)", "public long longIs(org.hamcrest.Matcher<?>)"], ["short", "org.jmock.AbstractExpectations$1.shortIs(org.hamcrest.Matcher<?>)", "public short shortIs(org.hamcrest.Matcher<?>)"], ["<T> T", "org.jmock.AbstractExpectations$1.is(org.hamcrest.Matcher<?>)", "public <T> T is(org.hamcrest.Matcher<?>)"], ["org.jmock.AbstractExpectations", "org.jmock.AbstractExpectations()", "public org.jmock.AbstractExpectations()"], ["void", "org.jmock.AbstractExpectations.buildExpectations(org.jmock.api.Action, org.jmock.internal.ExpectationCollector)", "public void buildExpectations(org.jmock.api.Action, org.jmock.internal.ExpectationCollector)"], ["org.jmock.syntax.ReceiverClause", "org.jmock.AbstractExpectations.exactly(int)", "public org.jmock.syntax.ReceiverClause exactly(int)"], ["<T> T", "org.jmock.AbstractExpectations.oneOf(T)", "public <T> T oneOf(T)"], ["<T> T", "org.jmock.AbstractExpectations.one(T)", "public <T> T one(T)"], ["org.jmock.syntax.ReceiverClause", "org.jmock.AbstractExpectations.atLeast(int)", "public org.jmock.syntax.ReceiverClause atLeast(int)"], ["org.jmock.syntax.ReceiverClause", "org.jmock.AbstractExpectations.between(int, int)", "public org.jmock.syntax.ReceiverClause between(int, int)"], ["org.jmock.syntax.ReceiverClause", "org.jmock.AbstractExpectations.atMost(int)", "public org.jmock.syntax.ReceiverClause atMost(int)"], ["org.jmock.syntax.MethodClause", "org.jmock.AbstractExpectations.allowing(org.hamcrest.Matcher<?>)", "public org.jmock.syntax.MethodClause allowing(org.hamcrest.Matcher<?>)"], ["<T> T", "org.jmock.AbstractExpectations.allowing(T)", "public <T> T allowing(T)"], ["<T> T", "org.jmock.AbstractExpectations.ignoring(T)", "public <T> T ignoring(T)"], ["org.jmock.syntax.MethodClause", "org.jmock.AbstractExpectations.ignoring(org.hamcrest.Matcher<?>)", "public org.jmock.syntax.MethodClause ignoring(org.hamcrest.Matcher<?>)"], ["<T> T", "org.jmock.AbstractExpectations.never(T)", "public <T> T never(T)"], ["<T> T", "org.jmock.AbstractExpectations.with(org.hamcrest.Matcher<T>)", "public <T> T with(org.hamcrest.Matcher<T>)"], ["boolean", "org.jmock.AbstractExpectations.with(boolean)", "public boolean with(boolean)"], ["byte", "org.jmock.AbstractExpectations.with(byte)", "public byte with(byte)"], ["short", "org.jmock.AbstractExpectations.with(short)", "public short with(short)"], ["char", "org.jmock.AbstractExpectations.with(char)", "public char with(char)"], ["int", "org.jmock.AbstractExpectations.with(int)", "public int with(int)"], ["long", "org.jmock.AbstractExpectations.with(long)", "public long with(long)"], ["float", "org.jmock.AbstractExpectations.with(float)", "public float with(float)"], ["double", "org.jmock.AbstractExpectations.with(double)", "public double with(double)"], ["<T> T", "org.jmock.AbstractExpectations.with(T)", "public <T> T with(T)"], ["void", "org.jmock.AbstractExpectations.will(org.jmock.api.Action)", "public void will(org.jmock.api.Action)"], ["<T> org.hamcrest.Matcher<T>", "org.jmock.AbstractExpectations.equal(T)", "public static <T> org.hamcrest.Matcher<T> equal(T)"], ["<T> org.hamcrest.Matcher<T>", "org.jmock.AbstractExpectations.same(T)", "public static <T> org.hamcrest.Matcher<T> same(T)"], ["<T> org.hamcrest.Matcher<T>", "org.jmock.AbstractExpectations.any(java.lang.Class<T>)", "public static <T> org.hamcrest.Matcher<T> any(java.lang.Class<T>)"], ["<T> org.hamcrest.Matcher<T>", "org.jmock.AbstractExpectations.anything()", "public static <T> org.hamcrest.Matcher<T> anything()"], ["org.hamcrest.Matcher<java.lang.Object>", "org.jmock.AbstractExpectations.a(java.lang.Class<?>)", "public static org.hamcrest.Matcher<java.lang.Object> a(java.lang.Class<?>)"], ["org.hamcrest.Matcher<java.lang.Object>", "org.jmock.AbstractExpectations.an(java.lang.Class<?>)", "public static org.hamcrest.Matcher<java.lang.Object> an(java.lang.Class<?>)"], ["<T> org.hamcrest.Matcher<T>", "org.jmock.AbstractExpectations.aNull(java.lang.Class<T>)", "public static <T> org.hamcrest.Matcher<T> aNull(java.lang.Class<T>)"], ["<T> org.hamcrest.Matcher<T>", "org.jmock.AbstractExpectations.aNonNull(java.lang.Class<T>)", "public static <T> org.hamcrest.Matcher<T> aNonNull(java.lang.Class<T>)"], ["org.jmock.api.Action", "org.jmock.AbstractExpectations.returnValue(java.lang.Object)", "public static org.jmock.api.Action returnValue(java.lang.Object)"], ["org.jmock.api.Action", "org.jmock.AbstractExpectations.throwException(java.lang.Throwable)", "public static org.jmock.api.Action throwException(java.lang.Throwable)"], ["org.jmock.api.Action", "org.jmock.AbstractExpectations.returnIterator(java.util.Collection<?>)", "public static org.jmock.api.Action returnIterator(java.util.Collection<?>)"], ["<T> org.jmock.api.Action", "org.jmock.AbstractExpectations.returnIterator(T...)", "public static <T> org.jmock.api.Action returnIterator(T...)"], ["org.jmock.api.Action", "org.jmock.AbstractExpectations.returnEnumeration(java.util.Collection<?>)", "public static org.jmock.api.Action returnEnumeration(java.util.Collection<?>)"], ["<T> org.jmock.api.Action", "org.jmock.AbstractExpectations.returnEnumeration(T...)", "public static <T> org.jmock.api.Action returnEnumeration(T...)"], ["org.jmock.api.Action", "org.jmock.AbstractExpectations.doAll(org.jmock.api.Action...)", "public static org.jmock.api.Action doAll(org.jmock.api.Action...)"], ["org.jmock.api.Action", "org.jmock.AbstractExpectations.onConsecutiveCalls(org.jmock.api.Action...)", "public static org.jmock.api.Action onConsecutiveCalls(org.jmock.api.Action...)"], ["void", "org.jmock.AbstractExpectations.when(org.jmock.internal.StatePredicate)", "public void when(org.jmock.internal.StatePredicate)"], ["void", "org.jmock.AbstractExpectations.then(org.jmock.internal.State)", "public void then(org.jmock.internal.State)"], ["void", "org.jmock.AbstractExpectations.inSequence(org.jmock.Sequence)", "public void inSequence(org.jmock.Sequence)"], ["void", "org.jmock.AbstractExpectations.inSequences(org.jmock.Sequence...)", "public void inSequences(org.jmock.Sequence...)"], ["org.jmock.api.ExpectationError", "org.jmock.api.ExpectationError(java.lang.String, org.hamcrest.SelfDescribing, org.jmock.api.Invocation)", "public org.jmock.api.ExpectationError(java.lang.String, org.hamcrest.SelfDescribing, org.jmock.api.Invocation)"], ["org.jmock.api.ExpectationError", "org.jmock.api.ExpectationError.unexpected(java.lang.String, org.jmock.api.Invocation)", "public static org.jmock.api.ExpectationError unexpected(java.lang.String, org.jmock.api.Invocation)"], ["org.jmock.api.ExpectationError", "org.jmock.api.ExpectationError.notAllSatisfied(org.hamcrest.SelfDescribing)", "public static org.jmock.api.ExpectationError notAllSatisfied(org.hamcrest.SelfDescribing)"], ["java.lang.String", "org.jmock.api.ExpectationError.toString()", "public java.lang.String toString()"], ["void", "org.jmock.api.ExpectationError.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.api.Invocation", "org.jmock.api.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object...)", "public org.jmock.api.Invocation(java.lang.Object, java.lang.reflect.Method, java.lang.Object...)"], ["java.lang.String", "org.jmock.api.Invocation.toString()", "public java.lang.String toString()"], ["boolean", "org.jmock.api.Invocation.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.jmock.api.Invocation.equals(org.jmock.api.Invocation)", "public boolean equals(org.jmock.api.Invocation)"], ["int", "org.jmock.api.Invocation.hashCode()", "public int hashCode()"], ["void", "org.jmock.api.Invocation.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["java.lang.Object", "org.jmock.api.Invocation.getInvokedObject()", "public java.lang.Object getInvokedObject()"], ["java.lang.reflect.Method", "org.jmock.api.Invocation.getInvokedMethod()", "public java.lang.reflect.Method getInvokedMethod()"], ["int", "org.jmock.api.Invocation.getParameterCount()", "public int getParameterCount()"], ["java.lang.Object", "org.jmock.api.Invocation.getParameter(int)", "public java.lang.Object getParameter(int)"], ["java.lang.Object[]", "org.jmock.api.Invocation.getParametersAsArray()", "public java.lang.Object[] getParametersAsArray()"], ["java.lang.Object", "org.jmock.api.Invocation.applyTo(java.lang.Object)", "public java.lang.Object applyTo(java.lang.Object) throws java.lang.Throwable"], ["void", "org.jmock.api.Invocation.checkReturnTypeCompatibility(java.lang.Object)", "public void checkReturnTypeCompatibility(java.lang.Object)"], ["org.jmock.auto.internal.Mockomatic", "org.jmock.auto.internal.Mockomatic(org.jmock.Mockery)", "public org.jmock.auto.internal.Mockomatic(org.jmock.Mockery)"], ["void", "org.jmock.auto.internal.Mockomatic.fillIn(java.lang.Object)", "public void fillIn(java.lang.Object)"], ["void", "org.jmock.auto.internal.Mockomatic.fillIn(java.lang.Object, java.util.List<java.lang.reflect.Field>)", "public void fillIn(java.lang.Object, java.util.List<java.lang.reflect.Field>)"], ["org.jmock.Expectations", "org.jmock.Expectations()", "public org.jmock.Expectations()"], ["boolean", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Boolean>)", "public boolean with(org.hamcrest.Matcher<java.lang.Boolean>)"], ["byte", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Byte>)", "public byte with(org.hamcrest.Matcher<java.lang.Byte>)"], ["short", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Short>)", "public short with(org.hamcrest.Matcher<java.lang.Short>)"], ["char", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Character>)", "public char with(org.hamcrest.Matcher<java.lang.Character>)"], ["int", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Integer>)", "public int with(org.hamcrest.Matcher<java.lang.Integer>)"], ["long", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Long>)", "public long with(org.hamcrest.Matcher<java.lang.Long>)"], ["float", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Float>)", "public float with(org.hamcrest.Matcher<java.lang.Float>)"], ["double", "org.jmock.Expectations.with(org.hamcrest.Matcher<java.lang.Double>)", "public double with(org.hamcrest.Matcher<java.lang.Double>)"], ["org.jmock.ExpectationsCreator", "org.jmock.ExpectationsCreator()", "public org.jmock.ExpectationsCreator()"], ["void", "org.jmock.ExpectationsCreator.main(java.lang.String...)", "public static void main(java.lang.String...) throws java.io.IOException, java.lang.Exception"], ["byte[]", "org.jmock.ExpectationsCreator.dump(java.io.InputStream)", "public static byte[] dump(java.io.InputStream) throws java.lang.Exception"], ["org.jmock.internal.AllDeclaredFields", "org.jmock.internal.AllDeclaredFields()", "public org.jmock.internal.AllDeclaredFields()"], ["java.util.List<java.lang.reflect.Field>", "org.jmock.internal.AllDeclaredFields.in(java.lang.Class<?>)", "public static java.util.List<java.lang.reflect.Field> in(java.lang.Class<?>)"], ["org.jmock.internal.Cardinality", "org.jmock.internal.Cardinality(int, int)", "public org.jmock.internal.Cardinality(int, int)"], ["org.jmock.internal.Cardinality", "org.jmock.internal.Cardinality.exactly(int)", "public static org.jmock.internal.Cardinality exactly(int)"], ["org.jmock.internal.Cardinality", "org.jmock.internal.Cardinality.atLeast(int)", "public static org.jmock.internal.Cardinality atLeast(int)"], ["org.jmock.internal.Cardinality", "org.jmock.internal.Cardinality.between(int, int)", "public static org.jmock.internal.Cardinality between(int, int)"], ["org.jmock.internal.Cardinality", "org.jmock.internal.Cardinality.atMost(int)", "public static org.jmock.internal.Cardinality atMost(int)"], ["boolean", "org.jmock.internal.Cardinality.isSatisfied(int)", "public boolean isSatisfied(int)"], ["boolean", "org.jmock.internal.Cardinality.allowsMoreInvocations(int)", "public boolean allowsMoreInvocations(int)"], ["void", "org.jmock.internal.Cardinality.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.internal.ChangeStateSideEffect", "org.jmock.internal.ChangeStateSideEffect(org.jmock.internal.State)", "public org.jmock.internal.ChangeStateSideEffect(org.jmock.internal.State)"], ["void", "org.jmock.internal.ChangeStateSideEffect.perform()", "public void perform()"], ["void", "org.jmock.internal.ChangeStateSideEffect.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.internal.FakeObjectMethods", "org.jmock.internal.FakeObjectMethods(org.jmock.api.Invokable)", "public org.jmock.internal.FakeObjectMethods(org.jmock.api.Invokable)"], ["java.lang.String", "org.jmock.internal.FakeObjectMethods.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.jmock.internal.FakeObjectMethods.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.Formatting", "org.jmock.internal.Formatting()", "public org.jmock.internal.Formatting()"], ["java.lang.String", "org.jmock.internal.Formatting.times(int)", "public static java.lang.String times(int)"], ["org.jmock.internal.InStateOrderingConstraint", "org.jmock.internal.InStateOrderingConstraint(org.jmock.internal.StatePredicate)", "public org.jmock.internal.InStateOrderingConstraint(org.jmock.internal.StatePredicate)"], ["boolean", "org.jmock.internal.InStateOrderingConstraint.allowsInvocationNow()", "public boolean allowsInvocationNow()"], ["void", "org.jmock.internal.InStateOrderingConstraint.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["void", "org.jmock.internal.InvocationDispatcher$1$1$1.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["boolean", "org.jmock.internal.InvocationDispatcher$1$1.hasNext()", "public boolean hasNext()"], ["org.hamcrest.SelfDescribing", "org.jmock.internal.InvocationDispatcher$1$1.next()", "public org.hamcrest.SelfDescribing next()"], ["void", "org.jmock.internal.InvocationDispatcher$1$1.remove()", "public void remove()"], ["java.lang.Object", "org.jmock.internal.InvocationDispatcher$1$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.hamcrest.SelfDescribing>", "org.jmock.internal.InvocationDispatcher$1.iterator()", "public java.util.Iterator<org.hamcrest.SelfDescribing> iterator()"], ["org.jmock.internal.InvocationDispatcher", "org.jmock.internal.InvocationDispatcher()", "public org.jmock.internal.InvocationDispatcher()"], ["org.jmock.internal.StateMachine", "org.jmock.internal.InvocationDispatcher.newStateMachine(java.lang.String)", "public org.jmock.internal.StateMachine newStateMachine(java.lang.String)"], ["void", "org.jmock.internal.InvocationDispatcher.add(org.jmock.api.Expectation)", "public void add(org.jmock.api.Expectation)"], ["void", "org.jmock.internal.InvocationDispatcher.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["void", "org.jmock.internal.InvocationDispatcher.describeMismatch(org.jmock.api.Invocation, org.hamcrest.Description)", "public void describeMismatch(org.jmock.api.Invocation, org.hamcrest.Description)"], ["boolean", "org.jmock.internal.InvocationDispatcher.isSatisfied()", "public boolean isSatisfied()"], ["java.lang.Object", "org.jmock.internal.InvocationDispatcher.dispatch(org.jmock.api.Invocation)", "public java.lang.Object dispatch(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.InvocationDiverter", "org.jmock.internal.InvocationDiverter(java.lang.Class<T>, T, org.jmock.api.Invokable)", "public org.jmock.internal.InvocationDiverter(java.lang.Class<T>, T, org.jmock.api.Invokable)"], ["java.lang.String", "org.jmock.internal.InvocationDiverter.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.jmock.internal.InvocationDiverter.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.InvocationExpectation$AnyParametersMatcher", "org.jmock.internal.InvocationExpectation$AnyParametersMatcher()", "public org.jmock.internal.InvocationExpectation$AnyParametersMatcher()"], ["boolean", "org.jmock.internal.InvocationExpectation$AnyParametersMatcher.isCompatibleWith(java.lang.Object[])", "public boolean isCompatibleWith(java.lang.Object[])"], ["org.jmock.internal.InvocationExpectation", "org.jmock.internal.InvocationExpectation()", "public org.jmock.internal.InvocationExpectation()"], ["void", "org.jmock.internal.InvocationExpectation.setCardinality(org.jmock.internal.Cardinality)", "public void setCardinality(org.jmock.internal.Cardinality)"], ["void", "org.jmock.internal.InvocationExpectation.setObjectMatcher(org.hamcrest.Matcher<?>)", "public void setObjectMatcher(org.hamcrest.Matcher<?>)"], ["void", "org.jmock.internal.InvocationExpectation.setMethod(java.lang.reflect.Method)", "public void setMethod(java.lang.reflect.Method)"], ["void", "org.jmock.internal.InvocationExpectation.setMethodMatcher(org.hamcrest.Matcher<? super java.lang.reflect.Method>)", "public void setMethodMatcher(org.hamcrest.Matcher<? super java.lang.reflect.Method>)"], ["void", "org.jmock.internal.InvocationExpectation.setParametersMatcher(org.jmock.internal.ParametersMatcher)", "public void setParametersMatcher(org.jmock.internal.ParametersMatcher)"], ["void", "org.jmock.internal.InvocationExpectation.addOrderingConstraint(org.jmock.internal.OrderingConstraint)", "public void addOrderingConstraint(org.jmock.internal.OrderingConstraint)"], ["void", "org.jmock.internal.InvocationExpectation.addSideEffect(org.jmock.internal.SideEffect)", "public void addSideEffect(org.jmock.internal.SideEffect)"], ["void", "org.jmock.internal.InvocationExpectation.setAction(org.jmock.api.Action)", "public void setAction(org.jmock.api.Action)"], ["void", "org.jmock.internal.InvocationExpectation.setDefaultAction(org.jmock.api.Action)", "public void setDefaultAction(org.jmock.api.Action)"], ["void", "org.jmock.internal.InvocationExpectation.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["void", "org.jmock.internal.InvocationExpectation.describeMismatch(org.jmock.api.Invocation, org.hamcrest.Description)", "public void describeMismatch(org.jmock.api.Invocation, org.hamcrest.Description)"], ["boolean", "org.jmock.internal.InvocationExpectation.isSatisfied()", "public boolean isSatisfied()"], ["boolean", "org.jmock.internal.InvocationExpectation.allowsMoreInvocations()", "public boolean allowsMoreInvocations()"], ["boolean", "org.jmock.internal.InvocationExpectation.matches(org.jmock.api.Invocation)", "public boolean matches(org.jmock.api.Invocation)"], ["java.lang.Object", "org.jmock.internal.InvocationExpectation.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.InvocationExpectationBuilder", "org.jmock.internal.InvocationExpectationBuilder()", "public org.jmock.internal.InvocationExpectationBuilder()"], ["org.jmock.api.Expectation", "org.jmock.internal.InvocationExpectationBuilder.toExpectation(org.jmock.api.Action)", "public org.jmock.api.Expectation toExpectation(org.jmock.api.Action)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.setCardinality(org.jmock.internal.Cardinality)", "public void setCardinality(org.jmock.internal.Cardinality)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.addParameterMatcher(org.hamcrest.Matcher<?>)", "public void addParameterMatcher(org.hamcrest.Matcher<?>)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.addOrderingConstraint(org.jmock.internal.OrderingConstraint)", "public void addOrderingConstraint(org.jmock.internal.OrderingConstraint)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.addInSequenceOrderingConstraint(org.jmock.Sequence)", "public void addInSequenceOrderingConstraint(org.jmock.Sequence)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.setAction(org.jmock.api.Action)", "public void setAction(org.jmock.api.Action)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.addSideEffect(org.jmock.internal.SideEffect)", "public void addSideEffect(org.jmock.internal.SideEffect)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.createExpectationFrom(org.jmock.api.Invocation)", "public void createExpectationFrom(org.jmock.api.Invocation)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.checkWasFullySpecified()", "public void checkWasFullySpecified()"], ["<T> T", "org.jmock.internal.InvocationExpectationBuilder.of(T)", "public <T> T of(T)"], ["org.jmock.syntax.MethodClause", "org.jmock.internal.InvocationExpectationBuilder.of(org.hamcrest.Matcher<?>)", "public org.jmock.syntax.MethodClause of(org.hamcrest.Matcher<?>)"], ["org.jmock.syntax.ParametersClause", "org.jmock.internal.InvocationExpectationBuilder.method(org.hamcrest.Matcher<java.lang.reflect.Method>)", "public org.jmock.syntax.ParametersClause method(org.hamcrest.Matcher<java.lang.reflect.Method>)"], ["org.jmock.syntax.ParametersClause", "org.jmock.internal.InvocationExpectationBuilder.method(java.lang.String)", "public org.jmock.syntax.ParametersClause method(java.lang.String)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.with(org.hamcrest.Matcher<?>...)", "public void with(org.hamcrest.Matcher<?>...)"], ["void", "org.jmock.internal.InvocationExpectationBuilder.withNoArguments()", "public void withNoArguments()"], ["org.jmock.internal.InvocationToExpectationTranslator", "org.jmock.internal.InvocationToExpectationTranslator(org.jmock.internal.ExpectationCapture, org.jmock.api.Action)", "public org.jmock.internal.InvocationToExpectationTranslator(org.jmock.internal.ExpectationCapture, org.jmock.api.Action)"], ["java.lang.Object", "org.jmock.internal.InvocationToExpectationTranslator.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.matcher.AllParametersMatcher", "org.jmock.internal.matcher.AllParametersMatcher(java.lang.Object[])", "public org.jmock.internal.matcher.AllParametersMatcher(java.lang.Object[])"], ["org.jmock.internal.matcher.AllParametersMatcher", "org.jmock.internal.matcher.AllParametersMatcher(java.util.List<org.hamcrest.Matcher<?>>)", "public org.jmock.internal.matcher.AllParametersMatcher(java.util.List<org.hamcrest.Matcher<?>>)"], ["boolean", "org.jmock.internal.matcher.AllParametersMatcher.isCompatibleWith(java.lang.Object[])", "public boolean isCompatibleWith(java.lang.Object[])"], ["boolean", "org.jmock.internal.matcher.AllParametersMatcher.matchesSafely(java.lang.Object[], org.hamcrest.Description)", "public boolean matchesSafely(java.lang.Object[], org.hamcrest.Description)"], ["void", "org.jmock.internal.matcher.AllParametersMatcher.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["boolean", "org.jmock.internal.matcher.AllParametersMatcher.matchesSafely(java.lang.Object, org.hamcrest.Description)", "public boolean matchesSafely(java.lang.Object, org.hamcrest.Description)"], ["org.jmock.internal.matcher.MethodMatcher", "org.jmock.internal.matcher.MethodMatcher(java.lang.reflect.Method)", "public org.jmock.internal.matcher.MethodMatcher(java.lang.reflect.Method)"], ["boolean", "org.jmock.internal.matcher.MethodMatcher.matchesSafely(java.lang.reflect.Method)", "public boolean matchesSafely(java.lang.reflect.Method)"], ["void", "org.jmock.internal.matcher.MethodMatcher.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["boolean", "org.jmock.internal.matcher.MethodMatcher.matchesSafely(java.lang.Object)", "public boolean matchesSafely(java.lang.Object)"], ["org.jmock.internal.matcher.MethodNameMatcher", "org.jmock.internal.matcher.MethodNameMatcher(java.lang.String)", "public org.jmock.internal.matcher.MethodNameMatcher(java.lang.String)"], ["boolean", "org.jmock.internal.matcher.MethodNameMatcher.matchesSafely(java.lang.reflect.Method)", "public boolean matchesSafely(java.lang.reflect.Method)"], ["void", "org.jmock.internal.matcher.MethodNameMatcher.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["boolean", "org.jmock.internal.matcher.MethodNameMatcher.matchesSafely(java.lang.Object)", "public boolean matchesSafely(java.lang.Object)"], ["org.jmock.internal.matcher.MockObjectMatcher", "org.jmock.internal.matcher.MockObjectMatcher(java.lang.Object)", "public org.jmock.internal.matcher.MockObjectMatcher(java.lang.Object)"], ["boolean", "org.jmock.internal.matcher.MockObjectMatcher.matches(java.lang.Object)", "public boolean matches(java.lang.Object)"], ["void", "org.jmock.internal.matcher.MockObjectMatcher.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.internal.matcher.ParametersMatcher", "org.jmock.internal.matcher.ParametersMatcher(java.lang.Object[])", "public org.jmock.internal.matcher.ParametersMatcher(java.lang.Object[])"], ["org.jmock.internal.matcher.ParametersMatcher", "org.jmock.internal.matcher.ParametersMatcher(java.util.List<org.hamcrest.Matcher<?>>)", "public org.jmock.internal.matcher.ParametersMatcher(java.util.List<org.hamcrest.Matcher<?>>)"], ["org.jmock.internal.NamedSequence$InSequenceOrderingConstraint", "org.jmock.internal.NamedSequence$InSequenceOrderingConstraint(org.jmock.internal.NamedSequence, int)", "public org.jmock.internal.NamedSequence$InSequenceOrderingConstraint(org.jmock.internal.NamedSequence, int)"], ["boolean", "org.jmock.internal.NamedSequence$InSequenceOrderingConstraint.allowsInvocationNow()", "public boolean allowsInvocationNow()"], ["void", "org.jmock.internal.NamedSequence$InSequenceOrderingConstraint.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.internal.NamedSequence", "org.jmock.internal.NamedSequence(java.lang.String)", "public org.jmock.internal.NamedSequence(java.lang.String)"], ["java.lang.String", "org.jmock.internal.NamedSequence.toString()", "public java.lang.String toString()"], ["void", "org.jmock.internal.NamedSequence.constrainAsNextInSequence(org.jmock.internal.InvocationExpectation)", "public void constrainAsNextInSequence(org.jmock.internal.InvocationExpectation)"], ["org.jmock.internal.ObjectMethodExpectationBouncer", "org.jmock.internal.ObjectMethodExpectationBouncer(org.jmock.api.Invokable)", "public org.jmock.internal.ObjectMethodExpectationBouncer(org.jmock.api.Invokable)"], ["org.jmock.internal.ProxiedObjectIdentity", "org.jmock.internal.ProxiedObjectIdentity(org.jmock.api.Invokable)", "public org.jmock.internal.ProxiedObjectIdentity(org.jmock.api.Invokable)"], ["org.jmock.internal.ReturnDefaultValueAction", "org.jmock.internal.ReturnDefaultValueAction(org.jmock.api.Imposteriser, java.util.Map<java.lang.Class<?>, java.lang.Object>)", "public org.jmock.internal.ReturnDefaultValueAction(org.jmock.api.Imposteriser, java.util.Map<java.lang.Class<?>, java.lang.Object>)"], ["org.jmock.internal.ReturnDefaultValueAction", "org.jmock.internal.ReturnDefaultValueAction(org.jmock.api.Imposteriser)", "public org.jmock.internal.ReturnDefaultValueAction(org.jmock.api.Imposteriser)"], ["org.jmock.internal.ReturnDefaultValueAction", "org.jmock.internal.ReturnDefaultValueAction()", "public org.jmock.internal.ReturnDefaultValueAction()"], ["void", "org.jmock.internal.ReturnDefaultValueAction.setImposteriser(org.jmock.api.Imposteriser)", "public void setImposteriser(org.jmock.api.Imposteriser)"], ["void", "org.jmock.internal.ReturnDefaultValueAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["void", "org.jmock.internal.ReturnDefaultValueAction.addResult(java.lang.Class<?>, java.lang.Object)", "public void addResult(java.lang.Class<?>, java.lang.Object)"], ["java.lang.Object", "org.jmock.internal.ReturnDefaultValueAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.SearchingClassLoader", "org.jmock.internal.SearchingClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)", "public org.jmock.internal.SearchingClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)"], ["java.lang.ClassLoader", "org.jmock.internal.SearchingClassLoader.combine(java.lang.ClassLoader...)", "public static java.lang.ClassLoader combine(java.lang.ClassLoader...)"], ["java.lang.ClassLoader", "org.jmock.internal.SearchingClassLoader.combine(java.util.List<java.lang.ClassLoader>)", "public static java.lang.ClassLoader combine(java.util.List<java.lang.ClassLoader>)"], ["java.lang.ClassLoader", "org.jmock.internal.SearchingClassLoader.combineLoadersOf(java.lang.Class<?>...)", "public static java.lang.ClassLoader combineLoadersOf(java.lang.Class<?>...)"], ["java.lang.ClassLoader", "org.jmock.internal.SearchingClassLoader.combineLoadersOf(java.lang.Class<?>, java.lang.Class<?>...)", "public static java.lang.ClassLoader combineLoadersOf(java.lang.Class<?>, java.lang.Class<?>...)"], ["java.lang.Object", "org.jmock.internal.SingleThreadedPolicy$1.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.internal.SingleThreadedPolicy", "org.jmock.internal.SingleThreadedPolicy()", "public org.jmock.internal.SingleThreadedPolicy()"], ["org.jmock.api.Invokable", "org.jmock.internal.SingleThreadedPolicy.synchroniseAccessTo(org.jmock.api.Invokable)", "public org.jmock.api.Invokable synchroniseAccessTo(org.jmock.api.Invokable)"], ["void", "org.jmock.internal.StateMachine$1.activate()", "public void activate()"], ["boolean", "org.jmock.internal.StateMachine$1.isActive()", "public boolean isActive()"], ["void", "org.jmock.internal.StateMachine$1.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["boolean", "org.jmock.internal.StateMachine$2.isActive()", "public boolean isActive()"], ["void", "org.jmock.internal.StateMachine$2.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.internal.StateMachine", "org.jmock.internal.StateMachine(java.lang.String)", "public org.jmock.internal.StateMachine(java.lang.String)"], ["java.lang.String", "org.jmock.internal.StateMachine.toString()", "public java.lang.String toString()"], ["org.jmock.States", "org.jmock.internal.StateMachine.startsAs(java.lang.String)", "public org.jmock.States startsAs(java.lang.String)"], ["void", "org.jmock.internal.StateMachine.become(java.lang.String)", "public void become(java.lang.String)"], ["org.jmock.internal.State", "org.jmock.internal.StateMachine.is(java.lang.String)", "public org.jmock.internal.State is(java.lang.String)"], ["org.jmock.internal.StatePredicate", "org.jmock.internal.StateMachine.isNot(java.lang.String)", "public org.jmock.internal.StatePredicate isNot(java.lang.String)"], ["void", "org.jmock.internal.StateMachine.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.action.ActionSequence", "org.jmock.lib.action.ActionSequence(org.jmock.api.Action...)", "public org.jmock.lib.action.ActionSequence(org.jmock.api.Action...)"], ["java.lang.Object", "org.jmock.lib.action.ActionSequence.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.ActionSequence.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.action.CustomAction", "org.jmock.lib.action.CustomAction(java.lang.String)", "public org.jmock.lib.action.CustomAction(java.lang.String)"], ["void", "org.jmock.lib.action.CustomAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.action.DoAllAction", "org.jmock.lib.action.DoAllAction(org.jmock.api.Action...)", "public org.jmock.lib.action.DoAllAction(org.jmock.api.Action...)"], ["java.lang.Object", "org.jmock.lib.action.DoAllAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.DoAllAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.action.ReturnEnumerationAction", "org.jmock.lib.action.ReturnEnumerationAction(java.util.Collection<?>)", "public org.jmock.lib.action.ReturnEnumerationAction(java.util.Collection<?>)"], ["org.jmock.lib.action.ReturnEnumerationAction", "org.jmock.lib.action.ReturnEnumerationAction(java.lang.Object...)", "public org.jmock.lib.action.ReturnEnumerationAction(java.lang.Object...)"], ["java.util.Enumeration<?>", "org.jmock.lib.action.ReturnEnumerationAction.invoke(org.jmock.api.Invocation)", "public java.util.Enumeration<?> invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.ReturnEnumerationAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["java.lang.Object", "org.jmock.lib.action.ReturnEnumerationAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.lib.action.ReturnIteratorAction", "org.jmock.lib.action.ReturnIteratorAction(java.util.Collection<?>)", "public org.jmock.lib.action.ReturnIteratorAction(java.util.Collection<?>)"], ["org.jmock.lib.action.ReturnIteratorAction", "org.jmock.lib.action.ReturnIteratorAction(java.lang.Object...)", "public org.jmock.lib.action.ReturnIteratorAction(java.lang.Object...)"], ["java.util.Iterator<?>", "org.jmock.lib.action.ReturnIteratorAction.invoke(org.jmock.api.Invocation)", "public java.util.Iterator<?> invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.ReturnIteratorAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["java.lang.Object", "org.jmock.lib.action.ReturnIteratorAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.lib.action.ReturnValueAction", "org.jmock.lib.action.ReturnValueAction(java.lang.Object)", "public org.jmock.lib.action.ReturnValueAction(java.lang.Object)"], ["java.lang.Object", "org.jmock.lib.action.ReturnValueAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.ReturnValueAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.action.ThrowAction", "org.jmock.lib.action.ThrowAction(java.lang.Throwable)", "public org.jmock.lib.action.ThrowAction(java.lang.Throwable)"], ["java.lang.Object", "org.jmock.lib.action.ThrowAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.ThrowAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.action.VoidAction", "org.jmock.lib.action.VoidAction()", "public org.jmock.lib.action.VoidAction()"], ["java.lang.Object", "org.jmock.lib.action.VoidAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.action.VoidAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["java.lang.Error", "org.jmock.lib.AssertionErrorTranslator.translate(org.jmock.api.ExpectationError)", "public java.lang.Error translate(org.jmock.api.ExpectationError)"], ["org.jmock.lib.CamelCaseNamingScheme", "org.jmock.lib.CamelCaseNamingScheme()", "public org.jmock.lib.CamelCaseNamingScheme()"], ["java.lang.String", "org.jmock.lib.CamelCaseNamingScheme.defaultNameFor(java.lang.Class<?>)", "public java.lang.String defaultNameFor(java.lang.Class<?>)"], ["void", "org.jmock.lib.concurrent.Blitzer$1.run()", "public void run()"], ["org.jmock.lib.concurrent.Blitzer", "org.jmock.lib.concurrent.Blitzer(int)", "public org.jmock.lib.concurrent.Blitzer(int)"], ["org.jmock.lib.concurrent.Blitzer", "org.jmock.lib.concurrent.Blitzer(int, int)", "public org.jmock.lib.concurrent.Blitzer(int, int)"], ["org.jmock.lib.concurrent.Blitzer", "org.jmock.lib.concurrent.Blitzer(int, int, java.util.concurrent.ThreadFactory)", "public org.jmock.lib.concurrent.Blitzer(int, int, java.util.concurrent.ThreadFactory)"], ["org.jmock.lib.concurrent.Blitzer", "org.jmock.lib.concurrent.Blitzer(int, java.util.concurrent.ExecutorService)", "public org.jmock.lib.concurrent.Blitzer(int, java.util.concurrent.ExecutorService)"], ["int", "org.jmock.lib.concurrent.Blitzer.totalActionCount()", "public int totalActionCount()"], ["void", "org.jmock.lib.concurrent.Blitzer.blitz(java.lang.Runnable)", "public void blitz(java.lang.Runnable) throws java.lang.InterruptedException"], ["void", "org.jmock.lib.concurrent.Blitzer.blitz(long, java.lang.Runnable)", "public void blitz(long, java.lang.Runnable) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException"], ["void", "org.jmock.lib.concurrent.Blitzer.shutdown()", "public void shutdown()"], ["org.jmock.lib.concurrent.DeterministicExecutor", "org.jmock.lib.concurrent.DeterministicExecutor()", "public org.jmock.lib.concurrent.DeterministicExecutor()"], ["boolean", "org.jmock.lib.concurrent.DeterministicExecutor.isIdle()", "public boolean isIdle()"], ["void", "org.jmock.lib.concurrent.DeterministicExecutor.runPendingCommands()", "public void runPendingCommands()"], ["void", "org.jmock.lib.concurrent.DeterministicExecutor.runUntilIdle()", "public void runUntilIdle()"], ["void", "org.jmock.lib.concurrent.DeterministicExecutor.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["org.jmock.lib.concurrent.DeterministicScheduler$CallableRunnableAdapter", "org.jmock.lib.concurrent.DeterministicScheduler$CallableRunnableAdapter(java.lang.Runnable, T)", "public org.jmock.lib.concurrent.DeterministicScheduler$CallableRunnableAdapter(java.lang.Runnable, T)"], ["java.lang.String", "org.jmock.lib.concurrent.DeterministicScheduler$CallableRunnableAdapter.toString()", "public java.lang.String toString()"], ["T", "org.jmock.lib.concurrent.DeterministicScheduler$CallableRunnableAdapter.call()", "public T call() throws java.lang.Exception"], ["org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask(java.util.concurrent.Callable<T>)", "public org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask(java.util.concurrent.Callable<T>)"], ["org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask(org.jmock.lib.concurrent.DeterministicScheduler, java.lang.Runnable)", "public org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask(org.jmock.lib.concurrent.DeterministicScheduler, java.lang.Runnable)"], ["org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask(org.jmock.lib.concurrent.DeterministicScheduler, long, java.lang.Runnable)", "public org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask(org.jmock.lib.concurrent.DeterministicScheduler, long, java.lang.Runnable)"], ["java.lang.String", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.toString()", "public java.lang.String toString()"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.repeats()", "public boolean repeats()"], ["long", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.getDelay(java.util.concurrent.TimeUnit)", "public long getDelay(java.util.concurrent.TimeUnit)"], ["int", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.compareTo(java.util.concurrent.Delayed)", "public int compareTo(java.util.concurrent.Delayed)"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.cancel(boolean)", "public boolean cancel(boolean)"], ["T", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.get()", "public T get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["T", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.get(long, java.util.concurrent.TimeUnit)", "public T get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.isDone()", "public boolean isDone()"], ["void", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.run()", "public void run()"], ["int", "org.jmock.lib.concurrent.DeterministicScheduler$ScheduledTask.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.jmock.lib.concurrent.DeterministicScheduler", "org.jmock.lib.concurrent.DeterministicScheduler()", "public org.jmock.lib.concurrent.DeterministicScheduler()"], ["void", "org.jmock.lib.concurrent.DeterministicScheduler.tick(long, java.util.concurrent.TimeUnit)", "public void tick(long, java.util.concurrent.TimeUnit)"], ["void", "org.jmock.lib.concurrent.DeterministicScheduler.runUntilIdle()", "public void runUntilIdle()"], ["void", "org.jmock.lib.concurrent.DeterministicScheduler.runNextPendingCommand()", "public void runNextPendingCommand()"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler.isIdle()", "public boolean isIdle()"], ["void", "org.jmock.lib.concurrent.DeterministicScheduler.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["java.util.concurrent.ScheduledFuture<?>", "org.jmock.lib.concurrent.DeterministicScheduler.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture<?> schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> java.util.concurrent.ScheduledFuture<V>", "org.jmock.lib.concurrent.DeterministicScheduler.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)", "public <V> java.util.concurrent.ScheduledFuture<V> schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture<?>", "org.jmock.lib.concurrent.DeterministicScheduler.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture<?> scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture<?>", "org.jmock.lib.concurrent.DeterministicScheduler.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)", "public java.util.concurrent.ScheduledFuture<?> scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.jmock.lib.concurrent.DeterministicScheduler.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.jmock.lib.concurrent.DeterministicScheduler.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public <T> java.util.List<java.util.concurrent.Future<T>> invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["<T> T", "org.jmock.lib.concurrent.DeterministicScheduler.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)", "public <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["<T> T", "org.jmock.lib.concurrent.DeterministicScheduler.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)", "public <T> T invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler.isShutdown()", "public boolean isShutdown()"], ["boolean", "org.jmock.lib.concurrent.DeterministicScheduler.isTerminated()", "public boolean isTerminated()"], ["void", "org.jmock.lib.concurrent.DeterministicScheduler.shutdown()", "public void shutdown()"], ["java.util.List<java.lang.Runnable>", "org.jmock.lib.concurrent.DeterministicScheduler.shutdownNow()", "public java.util.List<java.lang.Runnable> shutdownNow()"], ["<T> java.util.concurrent.Future<T>", "org.jmock.lib.concurrent.DeterministicScheduler.submit(java.util.concurrent.Callable<T>)", "public <T> java.util.concurrent.Future<T> submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future<?>", "org.jmock.lib.concurrent.DeterministicScheduler.submit(java.lang.Runnable)", "public java.util.concurrent.Future<?> submit(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.jmock.lib.concurrent.DeterministicScheduler.submit(java.lang.Runnable, T)", "public <T> java.util.concurrent.Future<T> submit(java.lang.Runnable, T)"], ["org.jmock.lib.concurrent.internal.DeltaQueue$Node", "org.jmock.lib.concurrent.internal.DeltaQueue$Node(T, long)", "public org.jmock.lib.concurrent.internal.DeltaQueue$Node(T, long)"], ["org.jmock.lib.concurrent.internal.DeltaQueue", "org.jmock.lib.concurrent.internal.DeltaQueue()", "public org.jmock.lib.concurrent.internal.DeltaQueue()"], ["boolean", "org.jmock.lib.concurrent.internal.DeltaQueue.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.jmock.lib.concurrent.internal.DeltaQueue.isNotEmpty()", "public boolean isNotEmpty()"], ["T", "org.jmock.lib.concurrent.internal.DeltaQueue.next()", "public T next()"], ["long", "org.jmock.lib.concurrent.internal.DeltaQueue.delay()", "public long delay()"], ["long", "org.jmock.lib.concurrent.internal.DeltaQueue.delay(T)", "public long delay(T)"], ["void", "org.jmock.lib.concurrent.internal.DeltaQueue.add(long, T)", "public void add(long, T)"], ["long", "org.jmock.lib.concurrent.internal.DeltaQueue.tick(long)", "public long tick(long)"], ["T", "org.jmock.lib.concurrent.internal.DeltaQueue.pop()", "public T pop()"], ["boolean", "org.jmock.lib.concurrent.internal.DeltaQueue.remove(T)", "public boolean remove(T)"], ["java.lang.String", "org.jmock.lib.concurrent.internal.DeltaQueue.toString()", "public java.lang.String toString()"], ["org.jmock.lib.concurrent.internal.FixedTimeout", "org.jmock.lib.concurrent.internal.FixedTimeout(long)", "public org.jmock.lib.concurrent.internal.FixedTimeout(long)"], ["long", "org.jmock.lib.concurrent.internal.FixedTimeout.timeRemaining()", "public long timeRemaining() throws java.util.concurrent.TimeoutException"], ["org.jmock.lib.concurrent.internal.InfiniteTimeout", "org.jmock.lib.concurrent.internal.InfiniteTimeout()", "public org.jmock.lib.concurrent.internal.InfiniteTimeout()"], ["long", "org.jmock.lib.concurrent.internal.InfiniteTimeout.timeRemaining()", "public long timeRemaining() throws java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.jmock.lib.concurrent.Synchroniser$1.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["org.jmock.lib.concurrent.Synchroniser", "org.jmock.lib.concurrent.Synchroniser()", "public org.jmock.lib.concurrent.Synchroniser()"], ["void", "org.jmock.lib.concurrent.Synchroniser.waitUntil(org.jmock.internal.StatePredicate)", "public void waitUntil(org.jmock.internal.StatePredicate) throws java.lang.InterruptedException"], ["void", "org.jmock.lib.concurrent.Synchroniser.waitUntil(org.jmock.internal.StatePredicate, long)", "public void waitUntil(org.jmock.internal.StatePredicate, long) throws java.lang.InterruptedException"], ["org.jmock.api.Invokable", "org.jmock.lib.concurrent.Synchroniser.synchroniseAccessTo(org.jmock.api.Invokable)", "public org.jmock.api.Invokable synchroniseAccessTo(org.jmock.api.Invokable)"], ["org.jmock.lib.concurrent.UnsupportedSynchronousOperationException", "org.jmock.lib.concurrent.UnsupportedSynchronousOperationException(java.lang.String)", "public org.jmock.lib.concurrent.UnsupportedSynchronousOperationException(java.lang.String)"], ["org.jmock.lib.CurrentStateMatcher", "org.jmock.lib.CurrentStateMatcher(java.lang.String, boolean)", "public org.jmock.lib.CurrentStateMatcher(java.lang.String, boolean)"], ["boolean", "org.jmock.lib.CurrentStateMatcher.matchesSafely(org.jmock.States)", "public boolean matchesSafely(org.jmock.States)"], ["void", "org.jmock.lib.CurrentStateMatcher.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.hamcrest.Matcher<org.jmock.States>", "org.jmock.lib.CurrentStateMatcher.isCurrently(java.lang.String)", "public static org.hamcrest.Matcher<org.jmock.States> isCurrently(java.lang.String)"], ["org.hamcrest.Matcher<org.jmock.States>", "org.jmock.lib.CurrentStateMatcher.isNotCurrently(java.lang.String)", "public static org.hamcrest.Matcher<org.jmock.States> isNotCurrently(java.lang.String)"], ["boolean", "org.jmock.lib.CurrentStateMatcher.matchesSafely(java.lang.Object)", "public boolean matchesSafely(java.lang.Object)"], ["java.lang.Error", "org.jmock.lib.IdentityExpectationErrorTranslator.translate(org.jmock.api.ExpectationError)", "public java.lang.Error translate(org.jmock.api.ExpectationError)"], ["java.lang.Object", "org.jmock.lib.JavaReflectionImposteriser$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])", "public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable"], ["org.jmock.lib.JavaReflectionImposteriser", "org.jmock.lib.JavaReflectionImposteriser()", "public org.jmock.lib.JavaReflectionImposteriser()"], ["boolean", "org.jmock.lib.JavaReflectionImposteriser.canImposterise(java.lang.Class<?>)", "public boolean canImposterise(java.lang.Class<?>)"], ["<T> T", "org.jmock.lib.JavaReflectionImposteriser.imposterise(org.jmock.api.Invokable, java.lang.Class<T>, java.lang.Class<?>...)", "public <T> T imposterise(org.jmock.api.Invokable, java.lang.Class<T>, java.lang.Class<?>...)"], ["java.lang.String", "org.jmock.lib.LastWordNamingScheme.defaultNameFor(java.lang.Class<?>)", "public java.lang.String defaultNameFor(java.lang.Class<?>)"], ["org.jmock.lib.RetroNamingScheme", "org.jmock.lib.RetroNamingScheme()", "public org.jmock.lib.RetroNamingScheme()"], ["java.lang.String", "org.jmock.lib.RetroNamingScheme.defaultNameFor(java.lang.Class<?>)", "public java.lang.String defaultNameFor(java.lang.Class<?>)"], ["org.jmock.lib.script.ScriptedAction", "org.jmock.lib.script.ScriptedAction(java.lang.String)", "public org.jmock.lib.script.ScriptedAction(java.lang.String)"], ["java.lang.Object", "org.jmock.lib.script.ScriptedAction.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["void", "org.jmock.lib.script.ScriptedAction.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.lib.script.ScriptedAction", "org.jmock.lib.script.ScriptedAction.perform(java.lang.String)", "public static org.jmock.lib.script.ScriptedAction perform(java.lang.String)"], ["org.jmock.lib.script.ScriptedAction", "org.jmock.lib.script.ScriptedAction.where(java.lang.String, java.lang.Object)", "public org.jmock.lib.script.ScriptedAction where(java.lang.String, java.lang.Object)"], ["void", "org.jmock.Mockery$1.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"], ["org.jmock.Mockery$MockObject", "org.jmock.Mockery$MockObject(java.lang.Class<?>, java.lang.String)", "public org.jmock.Mockery$MockObject(java.lang.Class<?>, java.lang.String)"], ["java.lang.String", "org.jmock.Mockery$MockObject.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.jmock.Mockery$MockObject.invoke(org.jmock.api.Invocation)", "public java.lang.Object invoke(org.jmock.api.Invocation) throws java.lang.Throwable"], ["java.lang.Object", "org.jmock.Mockery$MockObject.captureExpectationTo(org.jmock.internal.ExpectationCapture)", "public java.lang.Object captureExpectationTo(org.jmock.internal.ExpectationCapture)"], ["org.jmock.Mockery", "org.jmock.Mockery()", "public org.jmock.Mockery()"], ["void", "org.jmock.Mockery.setDefaultResultForType(java.lang.Class<?>, java.lang.Object)", "public void setDefaultResultForType(java.lang.Class<?>, java.lang.Object)"], ["void", "org.jmock.Mockery.setImposteriser(org.jmock.api.Imposteriser)", "public void setImposteriser(org.jmock.api.Imposteriser)"], ["void", "org.jmock.Mockery.setNamingScheme(org.jmock.api.MockObjectNamingScheme)", "public void setNamingScheme(org.jmock.api.MockObjectNamingScheme)"], ["void", "org.jmock.Mockery.setExpectationErrorTranslator(org.jmock.api.ExpectationErrorTranslator)", "public void setExpectationErrorTranslator(org.jmock.api.ExpectationErrorTranslator)"], ["void", "org.jmock.Mockery.setThreadingPolicy(org.jmock.api.ThreadingPolicy)", "public void setThreadingPolicy(org.jmock.api.ThreadingPolicy)"], ["<T> T", "org.jmock.Mockery.mock(java.lang.Class<T>)", "public <T> T mock(java.lang.Class<T>)"], ["<T> T", "org.jmock.Mockery.mock(java.lang.Class<T>, java.lang.String)", "public <T> T mock(java.lang.Class<T>, java.lang.String)"], ["org.jmock.Sequence", "org.jmock.Mockery.sequence(java.lang.String)", "public org.jmock.Sequence sequence(java.lang.String)"], ["org.jmock.States", "org.jmock.Mockery.states(java.lang.String)", "public org.jmock.States states(java.lang.String)"], ["void", "org.jmock.Mockery.checking(org.jmock.internal.ExpectationBuilder)", "public void checking(org.jmock.internal.ExpectationBuilder)"], ["void", "org.jmock.Mockery.addExpectation(org.jmock.api.Expectation)", "public void addExpectation(org.jmock.api.Expectation)"], ["void", "org.jmock.Mockery.assertIsSatisfied()", "public void assertIsSatisfied()"], ["void", "org.jmock.Mockery.describeTo(org.hamcrest.Description)", "public void describeTo(org.hamcrest.Description)"]]}