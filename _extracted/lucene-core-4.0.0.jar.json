{"lucene-core-4.0.0.jar": [["java.lang.Package", "org.apache.lucene.LucenePackage.get()", "public static java.lang.Package get()"], ["org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy", "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy()", "public org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy()"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy.getReusableComponents(java.lang.String)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents getReusableComponents(java.lang.String)"], ["void", "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy.setReusableComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)", "public void setReusableComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"], ["org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy", "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy()", "public org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy()"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy.getReusableComponents(java.lang.String)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents getReusableComponents(java.lang.String)"], ["void", "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy.setReusableComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)", "public void setReusableComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"], ["org.apache.lucene.analysis.Analyzer$ReuseStrategy", "org.apache.lucene.analysis.Analyzer$ReuseStrategy()", "public org.apache.lucene.analysis.Analyzer$ReuseStrategy()"], ["void", "org.apache.lucene.analysis.Analyzer$ReuseStrategy.close()", "public void close()"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.analysis.Analyzer$TokenStreamComponents", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer)", "public org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenStream()", "public org.apache.lucene.analysis.TokenStream getTokenStream()"], ["org.apache.lucene.analysis.Tokenizer", "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenizer()", "public org.apache.lucene.analysis.Tokenizer getTokenizer()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.analysis.Analyzer()", "public org.apache.lucene.analysis.Analyzer()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.analysis.Analyzer(org.apache.lucene.analysis.Analyzer$ReuseStrategy)", "public org.apache.lucene.analysis.Analyzer(org.apache.lucene.analysis.Analyzer$ReuseStrategy)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.Analyzer.tokenStream(java.lang.String, java.io.Reader)", "public final org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["int", "org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(java.lang.String)", "public int getPositionIncrementGap(java.lang.String)"], ["int", "org.apache.lucene.analysis.Analyzer.getOffsetGap(java.lang.String)", "public int getOffsetGap(java.lang.String)"], ["void", "org.apache.lucene.analysis.Analyzer.close()", "public void close()"], ["int", "org.apache.lucene.analysis.AnalyzerWrapper.getPositionIncrementGap(java.lang.String)", "public final int getPositionIncrementGap(java.lang.String)"], ["int", "org.apache.lucene.analysis.AnalyzerWrapper.getOffsetGap(java.lang.String)", "public final int getOffsetGap(java.lang.String)"], ["java.io.Reader", "org.apache.lucene.analysis.AnalyzerWrapper.initReader(java.lang.String, java.io.Reader)", "public final java.io.Reader initReader(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.CachingTokenFilter", "org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.CachingTokenFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CachingTokenFilter.end()", "public final void end()"], ["void", "org.apache.lucene.analysis.CachingTokenFilter.reset()", "public void reset()"], ["org.apache.lucene.analysis.CharFilter", "org.apache.lucene.analysis.CharFilter(java.io.Reader)", "public org.apache.lucene.analysis.CharFilter(java.io.Reader)"], ["void", "org.apache.lucene.analysis.CharFilter.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.CharFilter.correctOffset(int)", "public final int correctOffset(int)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.NumericTokenStream$NumericAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl()", "public org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getBytesRef()", "public org.apache.lucene.util.BytesRef getBytesRef()"], ["int", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.fillBytesRef()", "public int fillBytesRef()"], ["int", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getShift()", "public int getShift()"], ["void", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.setShift(int)", "public void setShift(int)"], ["int", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.incShift()", "public int incShift()"], ["long", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getRawValue()", "public long getRawValue()"], ["int", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getValueSize()", "public int getValueSize()"], ["void", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.init(long, int, int, int)", "public void init(long, int, int, int)"], ["void", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["void", "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream()", "public org.apache.lucene.analysis.NumericTokenStream()"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream(int)", "public org.apache.lucene.analysis.NumericTokenStream(int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource$AttributeFactory, int)", "public org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource$AttributeFactory, int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setLongValue(long)", "public org.apache.lucene.analysis.NumericTokenStream setLongValue(long)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setIntValue(int)", "public org.apache.lucene.analysis.NumericTokenStream setIntValue(int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setDoubleValue(double)", "public org.apache.lucene.analysis.NumericTokenStream setDoubleValue(double)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setFloatValue(float)", "public org.apache.lucene.analysis.NumericTokenStream setFloatValue(float)"], ["void", "org.apache.lucene.analysis.NumericTokenStream.reset()", "public void reset()"], ["boolean", "org.apache.lucene.analysis.NumericTokenStream.incrementToken()", "public boolean incrementToken()"], ["int", "org.apache.lucene.analysis.NumericTokenStream.getPrecisionStep()", "public int getPrecisionStep()"], ["org.apache.lucene.analysis.Token$TokenAttributeFactory", "org.apache.lucene.analysis.Token$TokenAttributeFactory(org.apache.lucene.util.AttributeSource$AttributeFactory)", "public org.apache.lucene.analysis.Token$TokenAttributeFactory(org.apache.lucene.util.AttributeSource$AttributeFactory)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.Token$TokenAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["boolean", "org.apache.lucene.analysis.Token$TokenAttributeFactory.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.Token$TokenAttributeFactory.hashCode()", "public int hashCode()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token()", "public org.apache.lucene.analysis.Token()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(int, int)", "public org.apache.lucene.analysis.Token(int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(int, int, java.lang.String)", "public org.apache.lucene.analysis.Token(int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(int, int, int)", "public org.apache.lucene.analysis.Token(int, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(java.lang.String, int, int)", "public org.apache.lucene.analysis.Token(java.lang.String, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(java.lang.String, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token(java.lang.String, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(java.lang.String, int, int, int)", "public org.apache.lucene.analysis.Token(java.lang.String, int, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(char[], int, int, int, int)", "public org.apache.lucene.analysis.Token(char[], int, int, int, int)"], ["void", "org.apache.lucene.analysis.Token.setPositionIncrement(int)", "public void setPositionIncrement(int)"], ["int", "org.apache.lucene.analysis.Token.getPositionIncrement()", "public int getPositionIncrement()"], ["void", "org.apache.lucene.analysis.Token.setPositionLength(int)", "public void setPositionLength(int)"], ["int", "org.apache.lucene.analysis.Token.getPositionLength()", "public int getPositionLength()"], ["int", "org.apache.lucene.analysis.Token.startOffset()", "public final int startOffset()"], ["int", "org.apache.lucene.analysis.Token.endOffset()", "public final int endOffset()"], ["void", "org.apache.lucene.analysis.Token.setOffset(int, int)", "public void setOffset(int, int)"], ["java.lang.String", "org.apache.lucene.analysis.Token.type()", "public final java.lang.String type()"], ["void", "org.apache.lucene.analysis.Token.setType(java.lang.String)", "public final void setType(java.lang.String)"], ["int", "org.apache.lucene.analysis.Token.getFlags()", "public int getFlags()"], ["void", "org.apache.lucene.analysis.Token.setFlags(int)", "public void setFlags(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.Token.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["void", "org.apache.lucene.analysis.Token.setPayload(org.apache.lucene.util.BytesRef)", "public void setPayload(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.analysis.Token.clear()", "public void clear()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.clone()", "public org.apache.lucene.analysis.Token clone()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.clone(char[], int, int, int, int)", "public org.apache.lucene.analysis.Token clone(char[], int, int, int, int)"], ["boolean", "org.apache.lucene.analysis.Token.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.Token.hashCode()", "public int hashCode()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(char[], int, int, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token reinit(char[], int, int, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(char[], int, int, int, int)", "public org.apache.lucene.analysis.Token reinit(char[], int, int, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, int, int)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, int, int)"], ["void", "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token)", "public void reinit(org.apache.lucene.analysis.Token)"], ["void", "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token, java.lang.String)", "public void reinit(org.apache.lucene.analysis.Token, java.lang.String)"], ["void", "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token, char[], int, int)", "public void reinit(org.apache.lucene.analysis.Token, char[], int, int)"], ["void", "org.apache.lucene.analysis.Token.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.Token.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl", "org.apache.lucene.analysis.Token.clone()", "public org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl clone()"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.Token.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.analysis.Token.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.analysis.TokenFilter.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenFilter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenFilter.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.Tokenizer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.Tokenizer.setReader(java.io.Reader)", "public final void setReader(java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyBuffer(char[], int, int)", "public final void copyBuffer(char[], int, int)"], ["char[]", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.buffer()", "public final char[] buffer()"], ["char[]", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeBuffer(int)", "public final char[] resizeBuffer(int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setLength(int)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute setLength(int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setEmpty()", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute setEmpty()"], ["int", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.fillBytesRef()", "public int fillBytesRef()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.getBytesRef()", "public org.apache.lucene.util.BytesRef getBytesRef()"], ["int", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.length()", "public final int length()"], ["char", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.charAt(int)", "public final char charAt(int)"], ["java.lang.CharSequence", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.subSequence(int, int)", "public final java.lang.CharSequence subSequence(int, int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.CharSequence, int, int)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(char)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.String)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.String)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.StringBuilder)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(java.lang.StringBuilder)"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttribute", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)", "public final org.apache.lucene.analysis.tokenattributes.CharTermAttribute append(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)"], ["int", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clear()", "public void clear()"], ["org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()", "public org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["void", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.Appendable", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)", "public java.lang.Appendable append(char) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)", "public java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException"], ["java.lang.Appendable", "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)", "public java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException"], ["org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()"], ["int", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()", "public int getFlags()"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)", "public void setFlags(int)"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["int", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.isKeyword()", "public boolean isKeyword()"], ["void", "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.setKeyword(boolean)", "public void setKeyword(boolean)"], ["org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()", "public int startOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int, int)", "public void setOffset(int, int)"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()", "public int endOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(org.apache.lucene.util.BytesRef)", "public void setPayload(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()", "public void clear()"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)", "public void setPositionIncrement(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()", "public int getPositionIncrement()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.setPositionLength(int)", "public void setPositionLength(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.getPositionLength()", "public int getPositionLength()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()"], ["org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)", "public org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()", "public java.lang.String type()"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(java.lang.String)", "public void setType(java.lang.String)"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.codecs.BlockTermState.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["java.lang.String", "org.apache.lucene.codecs.BlockTermState.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum, int)", "public org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.setState(int)", "public void setState(int)"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.next()", "public boolean next()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.nextLeaf()", "public boolean nextLeaf()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.nextNonLeaf()", "public boolean nextNonLeaf()"], ["int", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.getTermBlockOrd()", "public int getTermBlockOrd()"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.decodeMetaData()", "public void decodeMetaData() throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader, org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader, org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["int", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean)"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.seekExact(long)", "public void seekExact(long)"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.ord()", "public long ord()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean)"], ["org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum, int)", "public org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.setFloorData(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.util.BytesRef)", "public void setFloorData(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.getTermBlockOrd()", "public int getTermBlockOrd()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.next()", "public boolean next()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.nextLeaf()", "public boolean nextLeaf()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.nextNonLeaf()", "public boolean nextNonLeaf()"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToFloorFrame(org.apache.lucene.util.BytesRef)", "public void scanToFloorFrame(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.decodeMetaData()", "public void decodeMetaData() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToSubBlock(long)", "public void scanToSubBlock(long)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToTerm(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus scanToTerm(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToTermLeaf(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus scanToTermLeaf(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToTermNonLeaf(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus scanToTermNonLeaf(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader)", "public org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader) throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTreeTermsReader$Stats", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.computeBlockStats()", "public org.apache.lucene.codecs.BlockTreeTermsReader$Stats computeBlockStats() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["int", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.TermState", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekExact(long)", "public void seekExact(long)"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.ord()", "public long ord()"], ["org.apache.lucene.codecs.BlockTreeTermsReader$Stats", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.computeStats()", "public org.apache.lucene.codecs.BlockTreeTermsReader$Stats computeStats() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.hasPayloads()", "public boolean hasPayloads()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.iterator(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.size()", "public long size()"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getSumDocFreq()", "public long getSumDocFreq()"], ["int", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getDocCount()", "public int getDocCount()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.BlockTreeTermsReader$Stats.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.BlockTreeTermsReader", "org.apache.lucene.codecs.BlockTreeTermsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.codecs.PostingsReaderBase, org.apache.lucene.store.IOContext, java.lang.String, int)", "public org.apache.lucene.codecs.BlockTreeTermsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.codecs.PostingsReaderBase, org.apache.lucene.store.IOContext, java.lang.String, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsReader.close()", "public void close() throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.BlockTreeTermsReader.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.BlockTreeTermsReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.BlockTreeTermsReader.size()", "public int size()"], ["org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock", "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List<org.apache.lucene.util.fst.FST<org.apache.lucene.util.BytesRef>>)", "public org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List<org.apache.lucene.util.fst.FST<org.apache.lucene.util.BytesRef>>)"], ["java.lang.String", "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock.compileIndex(java.util.List<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock>, org.apache.lucene.store.RAMOutputStream)", "public void compileIndex(java.util.List<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock>, org.apache.lucene.store.RAMOutputStream) throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm", "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats)", "public org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats)"], ["java.lang.String", "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks.freeze(org.apache.lucene.util.fst.Builder$UnCompiledNode<java.lang.Object>[], int, org.apache.lucene.util.IntsRef)", "public void freeze(org.apache.lucene.util.fst.Builder$UnCompiledNode<java.lang.Object>[], int, org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["org.apache.lucene.codecs.PostingsConsumer", "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.startTerm(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.codecs.PostingsConsumer startTerm(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.finishTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats)", "public void finishTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.finish(long, long, int)", "public void finish(long, long, int) throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTreeTermsWriter", "org.apache.lucene.codecs.BlockTreeTermsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int)", "public org.apache.lucene.codecs.BlockTreeTermsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int) throws java.io.IOException"], ["org.apache.lucene.codecs.TermsConsumer", "org.apache.lucene.codecs.BlockTreeTermsWriter.addField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.codecs.TermsConsumer addField(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.BlockTreeTermsWriter.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.Codec.getName()", "public final java.lang.String getName()"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.codecs.Codec.forName(java.lang.String)", "public static org.apache.lucene.codecs.Codec forName(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.codecs.Codec.availableCodecs()", "public static java.util.Set<java.lang.String> availableCodecs()"], ["void", "org.apache.lucene.codecs.Codec.reloadCodecs(java.lang.ClassLoader)", "public static void reloadCodecs(java.lang.ClassLoader)"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.codecs.Codec.getDefault()", "public static org.apache.lucene.codecs.Codec getDefault()"], ["void", "org.apache.lucene.codecs.Codec.setDefault(org.apache.lucene.codecs.Codec)", "public static void setDefault(org.apache.lucene.codecs.Codec)"], ["java.lang.String", "org.apache.lucene.codecs.Codec.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.codecs.CodecUtil.writeHeader(org.apache.lucene.store.DataOutput, java.lang.String, int)", "public static void writeHeader(org.apache.lucene.store.DataOutput, java.lang.String, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.CodecUtil.headerLength(java.lang.String)", "public static int headerLength(java.lang.String)"], ["int", "org.apache.lucene.codecs.CodecUtil.checkHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int)", "public static int checkHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.CodecUtil.checkHeaderNoMagic(org.apache.lucene.store.DataInput, java.lang.String, int, int)", "public static int checkHeaderNoMagic(org.apache.lucene.store.DataInput, java.lang.String, int, int) throws java.io.IOException"], ["byte[]", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getArray()", "public byte[] getArray()"], ["double", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.newFromInput(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.DocValuesArraySource newFromInput(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.newFromArray(java.lang.Object)", "public org.apache.lucene.codecs.DocValuesArraySource newFromArray(java.lang.Object)"], ["void", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.toBytes(long, org.apache.lucene.util.BytesRef)", "public void toBytes(long, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getArray()", "public java.lang.Object getArray()"], ["double[]", "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getArray()", "public double[] getArray()"], ["double", "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getFloat(int)", "public double getFloat(int)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.newFromInput(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.DocValuesArraySource newFromInput(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.newFromArray(java.lang.Object)", "public org.apache.lucene.codecs.DocValuesArraySource newFromArray(java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getArray()", "public java.lang.Object getArray()"], ["float[]", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getArray()", "public float[] getArray()"], ["double", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getFloat(int)", "public double getFloat(int)"], ["void", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.toBytes(double, org.apache.lucene.util.BytesRef)", "public void toBytes(double, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.newFromInput(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.DocValuesArraySource newFromInput(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.newFromArray(java.lang.Object)", "public org.apache.lucene.codecs.DocValuesArraySource newFromArray(java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getArray()", "public java.lang.Object getArray()"], ["int[]", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getArray()", "public int[] getArray()"], ["double", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.newFromInput(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.DocValuesArraySource newFromInput(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.toBytes(long, org.apache.lucene.util.BytesRef)", "public void toBytes(long, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.newFromArray(java.lang.Object)", "public org.apache.lucene.codecs.DocValuesArraySource newFromArray(java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getArray()", "public java.lang.Object getArray()"], ["long[]", "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getArray()", "public long[] getArray()"], ["long", "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$LongValues.newFromInput(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.DocValuesArraySource newFromInput(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$LongValues.newFromArray(java.lang.Object)", "public org.apache.lucene.codecs.DocValuesArraySource newFromArray(java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getArray()", "public java.lang.Object getArray()"], ["short[]", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getArray()", "public short[] getArray()"], ["double", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.newFromInput(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.DocValuesArraySource newFromInput(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.toBytes(long, org.apache.lucene.util.BytesRef)", "public void toBytes(long, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.newFromArray(java.lang.Object)", "public org.apache.lucene.codecs.DocValuesArraySource newFromArray(java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getArray()", "public java.lang.Object getArray()"], ["org.apache.lucene.codecs.DocValuesArraySource", "org.apache.lucene.codecs.DocValuesArraySource.forType(org.apache.lucene.index.DocValues$Type)", "public static org.apache.lucene.codecs.DocValuesArraySource forType(org.apache.lucene.index.DocValues$Type)"], ["boolean", "org.apache.lucene.codecs.DocValuesArraySource.hasArray()", "public final boolean hasArray()"], ["void", "org.apache.lucene.codecs.DocValuesArraySource.toBytes(long, org.apache.lucene.util.BytesRef)", "public void toBytes(long, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.DocValuesArraySource.toBytes(double, org.apache.lucene.util.BytesRef)", "public void toBytes(double, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.DocValuesArraySource.copyLong(org.apache.lucene.util.BytesRef, long)", "public static void copyLong(org.apache.lucene.util.BytesRef, long)"], ["void", "org.apache.lucene.codecs.DocValuesArraySource.copyInt(org.apache.lucene.util.BytesRef, int)", "public static void copyInt(org.apache.lucene.util.BytesRef, int)"], ["void", "org.apache.lucene.codecs.DocValuesArraySource.copyShort(org.apache.lucene.util.BytesRef, short)", "public static void copyShort(org.apache.lucene.util.BytesRef, short)"], ["short", "org.apache.lucene.codecs.DocValuesArraySource.asShort(org.apache.lucene.util.BytesRef)", "public static short asShort(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.codecs.DocValuesArraySource.asInt(org.apache.lucene.util.BytesRef)", "public static int asInt(org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.codecs.DocValuesArraySource.asLong(org.apache.lucene.util.BytesRef)", "public static long asLong(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.DocValuesConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[])", "public void merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[]) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.FieldsConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.Fields)", "public void merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.Fields) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.FilterCodec.docValuesFormat()", "public org.apache.lucene.codecs.DocValuesFormat docValuesFormat()"], ["org.apache.lucene.codecs.FieldInfosFormat", "org.apache.lucene.codecs.FilterCodec.fieldInfosFormat()", "public org.apache.lucene.codecs.FieldInfosFormat fieldInfosFormat()"], ["org.apache.lucene.codecs.LiveDocsFormat", "org.apache.lucene.codecs.FilterCodec.liveDocsFormat()", "public org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()"], ["org.apache.lucene.codecs.NormsFormat", "org.apache.lucene.codecs.FilterCodec.normsFormat()", "public org.apache.lucene.codecs.NormsFormat normsFormat()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.FilterCodec.postingsFormat()", "public org.apache.lucene.codecs.PostingsFormat postingsFormat()"], ["org.apache.lucene.codecs.SegmentInfoFormat", "org.apache.lucene.codecs.FilterCodec.segmentInfoFormat()", "public org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()"], ["org.apache.lucene.codecs.StoredFieldsFormat", "org.apache.lucene.codecs.FilterCodec.storedFieldsFormat()", "public org.apache.lucene.codecs.StoredFieldsFormat storedFieldsFormat()"], ["org.apache.lucene.codecs.TermVectorsFormat", "org.apache.lucene.codecs.FilterCodec.termVectorsFormat()", "public org.apache.lucene.codecs.TermVectorsFormat termVectorsFormat()"], ["org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum()", "public org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum()"], ["void", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.setMergeState(org.apache.lucene.index.MergeState)", "public void setMergeState(org.apache.lucene.index.MergeState)"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.getNumSubs()", "public int getNumSubs()"], ["org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[]", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.getSubs()", "public org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] getSubs()"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["org.apache.lucene.codecs.MappingMultiDocsEnum", "org.apache.lucene.codecs.MappingMultiDocsEnum()", "public org.apache.lucene.codecs.MappingMultiDocsEnum()"], ["void", "org.apache.lucene.codecs.MappingMultiDocsEnum.setMergeState(org.apache.lucene.index.MergeState)", "public void setMergeState(org.apache.lucene.index.MergeState)"], ["int", "org.apache.lucene.codecs.MappingMultiDocsEnum.getNumSubs()", "public int getNumSubs()"], ["org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[]", "org.apache.lucene.codecs.MappingMultiDocsEnum.getSubs()", "public org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] getSubs()"], ["int", "org.apache.lucene.codecs.MappingMultiDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.MappingMultiDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.MappingMultiDocsEnum.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.codecs.MappingMultiDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.close()", "public void close()"], ["long", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.length()", "public long length()"], ["byte", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.seek(long)", "public void seek(long)"], ["int", "org.apache.lucene.codecs.MultiLevelSkipListReader.getDoc()", "public int getDoc()"], ["int", "org.apache.lucene.codecs.MultiLevelSkipListReader.skipTo(int)", "public int skipTo(int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListReader.init(long, int)", "public void init(long, int)"], ["void", "org.apache.lucene.codecs.MultiLevelSkipListWriter.bufferSkip(int)", "public void bufferSkip(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.MultiLevelSkipListWriter.writeSkip(org.apache.lucene.store.IndexOutput)", "public long writeSkip(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.PerDocConsumer.merge(org.apache.lucene.index.MergeState)", "public void merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.PerDocProducerBase.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.codecs.PerDocProducerBase.docValues(java.lang.String)", "public org.apache.lucene.index.DocValues docValues(java.lang.String) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.PerDocProducerBase.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.PerDocProducerBase.docValuesId(java.lang.String, int)", "public static java.lang.String docValuesId(java.lang.String, int)"], ["org.apache.lucene.codecs.TermStats", "org.apache.lucene.codecs.PostingsConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocsEnum, org.apache.lucene.util.FixedBitSet)", "public org.apache.lucene.codecs.TermStats merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocsEnum, org.apache.lucene.util.FixedBitSet) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.PostingsFormat.getName()", "public final java.lang.String getName()"], ["java.lang.String", "org.apache.lucene.codecs.PostingsFormat.toString()", "public java.lang.String toString()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.PostingsFormat.forName(java.lang.String)", "public static org.apache.lucene.codecs.PostingsFormat forName(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.codecs.PostingsFormat.availablePostingsFormats()", "public static java.util.Set<java.lang.String> availablePostingsFormats()"], ["void", "org.apache.lucene.codecs.PostingsFormat.reloadPostingsFormats(java.lang.ClassLoader)", "public static void reloadPostingsFormats(java.lang.ClassLoader)"], ["java.lang.Object", "org.apache.lucene.codecs.StoredFieldsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.codecs.StoredFieldsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.TermStats", "org.apache.lucene.codecs.TermStats(int, long)", "public org.apache.lucene.codecs.TermStats(int, long)"], ["java.lang.Object", "org.apache.lucene.codecs.TermVectorsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.codecs.TermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)", "public void addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.TermVectorsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.TermsConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.TermsEnum)", "public void merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["org.apache.lucene.codecs.PerDocConsumer", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec$1.docsConsumer(org.apache.lucene.index.PerDocWriteState)", "public org.apache.lucene.codecs.PerDocConsumer docsConsumer(org.apache.lucene.index.PerDocWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.PerDocProducer", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec$1.docsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PerDocProducer docsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xCodec", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec()", "public org.apache.lucene.codecs.lucene3x.Lucene3xCodec()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.postingsFormat()", "public org.apache.lucene.codecs.PostingsFormat postingsFormat()"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.docValuesFormat()", "public org.apache.lucene.codecs.DocValuesFormat docValuesFormat()"], ["org.apache.lucene.codecs.StoredFieldsFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.storedFieldsFormat()", "public org.apache.lucene.codecs.StoredFieldsFormat storedFieldsFormat()"], ["org.apache.lucene.codecs.TermVectorsFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.termVectorsFormat()", "public org.apache.lucene.codecs.TermVectorsFormat termVectorsFormat()"], ["org.apache.lucene.codecs.FieldInfosFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.fieldInfosFormat()", "public org.apache.lucene.codecs.FieldInfosFormat fieldInfosFormat()"], ["org.apache.lucene.codecs.SegmentInfoFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.segmentInfoFormat()", "public org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()"], ["org.apache.lucene.codecs.NormsFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.normsFormat()", "public org.apache.lucene.codecs.NormsFormat normsFormat()"], ["org.apache.lucene.codecs.LiveDocsFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.liveDocsFormat()", "public org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.getDocStoreFiles(org.apache.lucene.index.SegmentInfo)", "public static java.util.Set<java.lang.String> getDocStoreFiles(org.apache.lucene.index.SegmentInfo)"], ["org.apache.lucene.codecs.FieldInfosReader", "org.apache.lucene.codecs.lucene3x.Lucene3xFieldInfosFormat.getFieldInfosReader()", "public org.apache.lucene.codecs.FieldInfosReader getFieldInfosReader() throws java.io.IOException"], ["org.apache.lucene.codecs.FieldInfosWriter", "org.apache.lucene.codecs.lucene3x.Lucene3xFieldInfosFormat.getFieldInfosWriter()", "public org.apache.lucene.codecs.FieldInfosWriter getFieldInfosWriter() throws java.io.IOException"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.codecs.lucene3x.Lucene3xFieldInfosReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.FieldInfos read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.reset(org.apache.lucene.codecs.lucene3x.SegmentTermEnum, org.apache.lucene.util.Bits)", "public org.apache.lucene.index.DocsAndPositionsEnum reset(org.apache.lucene.codecs.lucene3x.SegmentTermEnum, org.apache.lucene.util.Bits) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.reset(org.apache.lucene.codecs.lucene3x.SegmentTermEnum, org.apache.lucene.util.Bits)", "public org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum reset(org.apache.lucene.codecs.lucene3x.SegmentTermEnum, org.apache.lucene.util.Bits) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.docID()", "public int docID()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.iterator(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.size()", "public long size() throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.hasPayloads()", "public boolean hasPayloads()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xFields", "org.apache.lucene.codecs.lucene3x.Lucene3xFields(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext, int)", "public org.apache.lucene.codecs.lucene3x.Lucene3xFields(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext, int) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.lucene3x.Lucene3xFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.lucene3x.Lucene3xFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String)"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xFields.size()", "public int size()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xFields.getUniqueTermCount()", "public long getUniqueTermCount() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xFields.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.PerDocConsumer", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsFormat.docsConsumer(org.apache.lucene.index.PerDocWriteState)", "public org.apache.lucene.codecs.PerDocConsumer docsConsumer(org.apache.lucene.index.PerDocWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.PerDocProducer", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsFormat.docsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PerDocProducer docsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.getInt(int)", "public long getInt(int)"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.hasArray()", "public boolean hasArray()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.getArray()", "public java.lang.Object getArray()"], ["org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues(org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer, org.apache.lucene.store.IndexInput, long)", "public org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues(org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer, org.apache.lucene.store.IndexInput, long)"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer.docValues(java.lang.String)", "public org.apache.lucene.index.DocValues docValues(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat()", "public org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat()"], ["org.apache.lucene.codecs.FieldsConsumer", "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.FieldsConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.FieldsProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat()", "public org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat()"], ["org.apache.lucene.codecs.SegmentInfoReader", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getSegmentInfoReader()", "public org.apache.lucene.codecs.SegmentInfoReader getSegmentInfoReader()"], ["org.apache.lucene.codecs.SegmentInfoWriter", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getSegmentInfoWriter()", "public org.apache.lucene.codecs.SegmentInfoWriter getSegmentInfoWriter()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getDocStoreOffset(org.apache.lucene.index.SegmentInfo)", "public static int getDocStoreOffset(org.apache.lucene.index.SegmentInfo)"], ["java.lang.String", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getDocStoreSegment(org.apache.lucene.index.SegmentInfo)", "public static java.lang.String getDocStoreSegment(org.apache.lucene.index.SegmentInfo)"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getDocStoreIsCompoundFile(org.apache.lucene.index.SegmentInfo)", "public static boolean getDocStoreIsCompoundFile(org.apache.lucene.index.SegmentInfo)"], ["org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader()", "public org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader()"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader.readLegacyInfos(org.apache.lucene.index.SegmentInfos, org.apache.lucene.store.Directory, org.apache.lucene.store.IndexInput, int)", "public static void readLegacyInfos(org.apache.lucene.index.SegmentInfos, org.apache.lucene.store.Directory, org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentInfo read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader", "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader(org.apache.lucene.store.IndexInput, int, int)", "public org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader(org.apache.lucene.store.IndexInput, int, int)"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.init(long, long, long, int, boolean)", "public void init(long, long, long, int, boolean)"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.getFreqPointer()", "public long getFreqPointer()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.getProxPointer()", "public long getProxPointer()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.getPayloadLength()", "public int getPayloadLength()"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsReader fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsWriter", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsWriter fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.clone()", "public org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader clone()"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.checkCodeVersion(org.apache.lucene.store.Directory, java.lang.String)", "public static void checkCodeVersion(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.close()", "public final void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)", "public final void visitDocument(int, org.apache.lucene.index.StoredFieldVisitor) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.clone()", "public org.apache.lucene.codecs.StoredFieldsReader clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat.vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.TermVectorsReader vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsWriter", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat.vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.TermVectorsWriter vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.advance(int)", "public int advance(int)"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)", "public void reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.nextPosition()", "public int nextPosition()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.endOffset()", "public int endOffset()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.advance(int)", "public int advance(int)"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)", "public void reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)"], ["java.lang.String", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.next()", "public java.lang.String next()"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.hasNext()", "public boolean hasNext()"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.next()", "public java.lang.Object next()"], ["org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader, int)", "public org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader, int) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields.size()", "public int size()"], ["org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader, long)", "public org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader, long) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.iterator(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.size()", "public long size()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getSumDocFreq()", "public long getSumDocFreq()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getDocCount()", "public int getDocCount()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.hasPayloads()", "public boolean hasPayloads()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum$1.compare(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)", "public int compare(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader)", "public org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.canReuse(org.apache.lucene.store.IndexInput)", "public boolean canReuse(org.apache.lucene.store.IndexInput)"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.reset(int, long, boolean, boolean, boolean)", "public void reset(int, long, boolean, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.seekExact(long)", "public void seekExact(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.ord()", "public long ord()"], ["int", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.get(int)", "public org.apache.lucene.index.Fields get(int) throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.clone()", "public org.apache.lucene.codecs.TermVectorsReader clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.lucene3x.SegmentTermDocs", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs(org.apache.lucene.store.IndexInput, org.apache.lucene.codecs.lucene3x.TermInfosReader, org.apache.lucene.index.FieldInfos)", "public org.apache.lucene.codecs.lucene3x.SegmentTermDocs(org.apache.lucene.store.IndexInput, org.apache.lucene.codecs.lucene3x.TermInfosReader, org.apache.lucene.index.FieldInfos)"], ["void", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.setLiveDocs(org.apache.lucene.util.Bits)", "public void setLiveDocs(org.apache.lucene.util.Bits)"], ["void", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.seek(org.apache.lucene.codecs.lucene3x.SegmentTermEnum)", "public void seek(org.apache.lucene.codecs.lucene3x.SegmentTermEnum) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.doc()", "public final int doc()"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.freq()", "public final int freq()"], ["boolean", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.next()", "public boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.next()", "public final boolean next() throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.term()", "public final org.apache.lucene.index.Term term()"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.docFreq()", "public final int docFreq()"], ["void", "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.close()", "public final void close() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene3x.SegmentTermPositions", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput, org.apache.lucene.codecs.lucene3x.TermInfosReader, org.apache.lucene.index.FieldInfos)", "public org.apache.lucene.codecs.lucene3x.SegmentTermPositions(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput, org.apache.lucene.codecs.lucene3x.TermInfosReader, org.apache.lucene.index.FieldInfos)"], ["void", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.close()", "public final void close() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.nextPosition()", "public final int nextPosition() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.next()", "public final boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.read(int[], int[])", "public final int read(int[], int[])"], ["int", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.getPayloadLength()", "public int getPayloadLength()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["int", "org.apache.lucene.codecs.lucene3x.TermBuffer.compareTo(org.apache.lucene.codecs.lucene3x.TermBuffer)", "public int compareTo(org.apache.lucene.codecs.lucene3x.TermBuffer)"], ["void", "org.apache.lucene.codecs.lucene3x.TermBuffer.read(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfos)", "public void read(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfos) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.TermBuffer.set(org.apache.lucene.index.Term)", "public void set(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.codecs.lucene3x.TermBuffer.set(org.apache.lucene.codecs.lucene3x.TermBuffer)", "public void set(org.apache.lucene.codecs.lucene3x.TermBuffer)"], ["void", "org.apache.lucene.codecs.lucene3x.TermBuffer.reset()", "public void reset()"], ["org.apache.lucene.index.Term", "org.apache.lucene.codecs.lucene3x.TermBuffer.toTerm()", "public org.apache.lucene.index.Term toTerm()"], ["org.apache.lucene.codecs.lucene3x.TermInfo", "org.apache.lucene.codecs.lucene3x.TermInfo()", "public org.apache.lucene.codecs.lucene3x.TermInfo()"], ["org.apache.lucene.codecs.lucene3x.TermInfo", "org.apache.lucene.codecs.lucene3x.TermInfo(int, long, long)", "public org.apache.lucene.codecs.lucene3x.TermInfo(int, long, long)"], ["org.apache.lucene.codecs.lucene3x.TermInfo", "org.apache.lucene.codecs.lucene3x.TermInfo(org.apache.lucene.codecs.lucene3x.TermInfo)", "public org.apache.lucene.codecs.lucene3x.TermInfo(org.apache.lucene.codecs.lucene3x.TermInfo)"], ["void", "org.apache.lucene.codecs.lucene3x.TermInfo.set(int, long, long, int)", "public final void set(int, long, long, int)"], ["void", "org.apache.lucene.codecs.lucene3x.TermInfo.set(org.apache.lucene.codecs.lucene3x.TermInfo)", "public final void set(org.apache.lucene.codecs.lucene3x.TermInfo)"], ["org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm", "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm(org.apache.lucene.index.Term)", "public org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm(org.apache.lucene.index.Term)"], ["boolean", "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.hashCode()", "public int hashCode()"], ["org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm", "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.clone()", "public org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm clone()"], ["org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey", "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.clone()", "public org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.lucene3x.TermInfosReader$TermInfoAndOrd", "org.apache.lucene.codecs.lucene3x.TermInfosReader$TermInfoAndOrd(org.apache.lucene.codecs.lucene3x.TermInfo, long)", "public org.apache.lucene.codecs.lucene3x.TermInfosReader$TermInfoAndOrd(org.apache.lucene.codecs.lucene3x.TermInfo, long)"], ["int", "org.apache.lucene.codecs.lucene3x.TermInfosReader.getSkipInterval()", "public int getSkipInterval()"], ["int", "org.apache.lucene.codecs.lucene3x.TermInfosReader.getMaxSkipLevels()", "public int getMaxSkipLevels()"], ["void", "org.apache.lucene.codecs.lucene3x.TermInfosReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene3x.TermInfosReader.cacheCurrentTerm(org.apache.lucene.codecs.lucene3x.SegmentTermEnum)", "public void cacheCurrentTerm(org.apache.lucene.codecs.lucene3x.SegmentTermEnum)"], ["org.apache.lucene.codecs.lucene3x.SegmentTermEnum", "org.apache.lucene.codecs.lucene3x.TermInfosReader.terms()", "public org.apache.lucene.codecs.lucene3x.SegmentTermEnum terms()"], ["org.apache.lucene.codecs.lucene3x.SegmentTermEnum", "org.apache.lucene.codecs.lucene3x.TermInfosReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.codecs.lucene3x.SegmentTermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.BitVector", "org.apache.lucene.codecs.lucene40.BitVector(int)", "public org.apache.lucene.codecs.lucene40.BitVector(int)"], ["org.apache.lucene.codecs.lucene40.BitVector", "org.apache.lucene.codecs.lucene40.BitVector.clone()", "public org.apache.lucene.codecs.lucene40.BitVector clone()"], ["void", "org.apache.lucene.codecs.lucene40.BitVector.set(int)", "public final void set(int)"], ["boolean", "org.apache.lucene.codecs.lucene40.BitVector.getAndSet(int)", "public final boolean getAndSet(int)"], ["void", "org.apache.lucene.codecs.lucene40.BitVector.clear(int)", "public final void clear(int)"], ["boolean", "org.apache.lucene.codecs.lucene40.BitVector.getAndClear(int)", "public final boolean getAndClear(int)"], ["boolean", "org.apache.lucene.codecs.lucene40.BitVector.get(int)", "public final boolean get(int)"], ["int", "org.apache.lucene.codecs.lucene40.BitVector.size()", "public final int size()"], ["int", "org.apache.lucene.codecs.lucene40.BitVector.length()", "public int length()"], ["int", "org.apache.lucene.codecs.lucene40.BitVector.count()", "public final int count()"], ["int", "org.apache.lucene.codecs.lucene40.BitVector.getRecomputedCount()", "public final int getRecomputedCount()"], ["int", "org.apache.lucene.codecs.lucene40.BitVector.getVersion()", "public int getVersion()"], ["void", "org.apache.lucene.codecs.lucene40.BitVector.write(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public final void write(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.BitVector.invertAll()", "public void invertAll()"], ["void", "org.apache.lucene.codecs.lucene40.BitVector.setAll()", "public void setAll()"], ["org.apache.lucene.codecs.lucene40.BitVector", "org.apache.lucene.codecs.lucene40.BitVector(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.BitVector(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.codecs.lucene40.BitVector.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec$1.getPostingsFormatForField(java.lang.String)", "public org.apache.lucene.codecs.PostingsFormat getPostingsFormatForField(java.lang.String)"], ["org.apache.lucene.codecs.lucene40.Lucene40Codec", "org.apache.lucene.codecs.lucene40.Lucene40Codec()", "public org.apache.lucene.codecs.lucene40.Lucene40Codec()"], ["org.apache.lucene.codecs.StoredFieldsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.storedFieldsFormat()", "public final org.apache.lucene.codecs.StoredFieldsFormat storedFieldsFormat()"], ["org.apache.lucene.codecs.TermVectorsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.termVectorsFormat()", "public final org.apache.lucene.codecs.TermVectorsFormat termVectorsFormat()"], ["org.apache.lucene.codecs.DocValuesFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.docValuesFormat()", "public final org.apache.lucene.codecs.DocValuesFormat docValuesFormat()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.postingsFormat()", "public final org.apache.lucene.codecs.PostingsFormat postingsFormat()"], ["org.apache.lucene.codecs.FieldInfosFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.fieldInfosFormat()", "public final org.apache.lucene.codecs.FieldInfosFormat fieldInfosFormat()"], ["org.apache.lucene.codecs.SegmentInfoFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.segmentInfoFormat()", "public final org.apache.lucene.codecs.SegmentInfoFormat segmentInfoFormat()"], ["org.apache.lucene.codecs.NormsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.normsFormat()", "public final org.apache.lucene.codecs.NormsFormat normsFormat()"], ["org.apache.lucene.codecs.LiveDocsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.liveDocsFormat()", "public final org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()"], ["org.apache.lucene.codecs.PostingsFormat", "org.apache.lucene.codecs.lucene40.Lucene40Codec.getPostingsFormatForField(java.lang.String)", "public org.apache.lucene.codecs.PostingsFormat getPostingsFormatForField(java.lang.String)"], ["org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer(org.apache.lucene.index.PerDocWriteState, java.lang.String)", "public org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer(org.apache.lucene.index.PerDocWriteState, java.lang.String)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer.abort()", "public void abort()"], ["org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat()"], ["org.apache.lucene.codecs.PerDocConsumer", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat.docsConsumer(org.apache.lucene.index.PerDocWriteState)", "public org.apache.lucene.codecs.PerDocConsumer docsConsumer(org.apache.lucene.index.PerDocWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.PerDocProducer", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat.docsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PerDocProducer docsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40DocValuesProducer", "org.apache.lucene.codecs.lucene40.Lucene40DocValuesProducer(org.apache.lucene.index.SegmentReadState, java.lang.String)", "public org.apache.lucene.codecs.lucene40.Lucene40DocValuesProducer(org.apache.lucene.index.SegmentReadState, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat()"], ["org.apache.lucene.codecs.FieldInfosReader", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat.getFieldInfosReader()", "public org.apache.lucene.codecs.FieldInfosReader getFieldInfosReader() throws java.io.IOException"], ["org.apache.lucene.codecs.FieldInfosWriter", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat.getFieldInfosWriter()", "public org.apache.lucene.codecs.FieldInfosWriter getFieldInfosWriter() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader()", "public org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.FieldInfos read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter()", "public org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter.write(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["byte", "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter.docValuesByte(org.apache.lucene.index.DocValues$Type)", "public byte docValuesByte(org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat", "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat()"], ["org.apache.lucene.util.MutableBits", "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.newLiveDocs(int)", "public org.apache.lucene.util.MutableBits newLiveDocs(int) throws java.io.IOException"], ["org.apache.lucene.util.MutableBits", "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.newLiveDocs(org.apache.lucene.util.Bits)", "public org.apache.lucene.util.MutableBits newLiveDocs(org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.readLiveDocs(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.store.IOContext)", "public org.apache.lucene.util.Bits readLiveDocs(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.writeLiveDocs(org.apache.lucene.util.MutableBits, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfoPerCommit, int, org.apache.lucene.store.IOContext)", "public void writeLiveDocs(org.apache.lucene.util.MutableBits, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfoPerCommit, int, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.files(org.apache.lucene.index.SegmentInfoPerCommit, java.util.Collection<java.lang.String>)", "public void files(org.apache.lucene.index.SegmentInfoPerCommit, java.util.Collection<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesConsumer", "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesConsumer(org.apache.lucene.index.PerDocWriteState, java.lang.String)", "public org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesConsumer(org.apache.lucene.index.PerDocWriteState, java.lang.String)"], ["org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesProducer", "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesProducer(org.apache.lucene.index.SegmentReadState, java.lang.String)", "public org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesProducer(org.apache.lucene.index.SegmentReadState, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40NormsFormat", "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40NormsFormat()"], ["org.apache.lucene.codecs.PerDocConsumer", "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat.docsConsumer(org.apache.lucene.index.PerDocWriteState)", "public org.apache.lucene.codecs.PerDocConsumer docsConsumer(org.apache.lucene.index.PerDocWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.PerDocProducer", "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat.docsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PerDocProducer docsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat", "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat()"], ["org.apache.lucene.codecs.PostingsReaderBase", "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat.postingsReaderBase(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.PostingsReaderBase postingsReaderBase(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.codecs.PostingsWriterBase", "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat.postingsWriterBase(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.PostingsWriterBase postingsWriterBase(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat", "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat()"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat", "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat(int, int)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat(int, int)"], ["org.apache.lucene.codecs.FieldsConsumer", "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.FieldsConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.FieldsProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$AllDocsSegmentDocsEnum.nextDoc()", "public final int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$LiveDocsSegmentDocsEnum.nextDoc()", "public final int nextDoc() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum(org.apache.lucene.codecs.lucene40.Lucene40PostingsReader, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum(org.apache.lucene.codecs.lucene40.Lucene40PostingsReader, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.reset(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState, org.apache.lucene.util.Bits)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum reset(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState, org.apache.lucene.util.Bits) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.freq()", "public int freq()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.endOffset()", "public int endOffset()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsEnumBase.freq()", "public final int freq()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsEnumBase.docID()", "public final int docID()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsEnumBase.advance(int)", "public final int advance(int) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum(org.apache.lucene.codecs.lucene40.Lucene40PostingsReader, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum(org.apache.lucene.codecs.lucene40.Lucene40PostingsReader, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.reset(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState, org.apache.lucene.util.Bits)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum reset(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState, org.apache.lucene.util.Bits) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.clone()", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState clone()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["java.lang.String", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.TermState", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.clone()", "public org.apache.lucene.index.TermState clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsReader", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext, java.lang.String)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.init(org.apache.lucene.store.IndexInput)", "public void init(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["org.apache.lucene.codecs.BlockTermState", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.newTermState()", "public org.apache.lucene.codecs.BlockTermState newTermState()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.readTermsBlock(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState)", "public void readTermsBlock(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.nextTerm(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState)", "public void nextTerm(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState) throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.docs(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.docsAndPositions(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter$PendingTerm", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter$PendingTerm(long, long, int)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter$PendingTerm(long, long, int)"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter(org.apache.lucene.index.SegmentWriteState, int)", "public org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter(org.apache.lucene.index.SegmentWriteState, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.start(org.apache.lucene.store.IndexOutput)", "public void start(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.startTerm()", "public void startTerm()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.setField(org.apache.lucene.index.FieldInfo)", "public void setField(org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.startDoc(int, int)", "public void startDoc(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.addPosition(int, org.apache.lucene.util.BytesRef, int, int)", "public void addPosition(int, org.apache.lucene.util.BytesRef, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.finishDoc()", "public void finishDoc()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.finishTerm(org.apache.lucene.codecs.TermStats)", "public void finishTerm(org.apache.lucene.codecs.TermStats) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.flushTermsBlock(int, int)", "public void flushTermsBlock(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat()"], ["org.apache.lucene.codecs.SegmentInfoReader", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat.getSegmentInfoReader()", "public org.apache.lucene.codecs.SegmentInfoReader getSegmentInfoReader()"], ["org.apache.lucene.codecs.SegmentInfoWriter", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat.getSegmentInfoWriter()", "public org.apache.lucene.codecs.SegmentInfoWriter getSegmentInfoWriter()"], ["org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader()", "public org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentInfo read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter()", "public org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public void write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40SkipListReader", "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader(org.apache.lucene.store.IndexInput, int, int)", "public org.apache.lucene.codecs.lucene40.Lucene40SkipListReader(org.apache.lucene.store.IndexInput, int, int)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.init(long, long, long, int, boolean, boolean)", "public void init(long, long, long, int, boolean, boolean)"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getFreqPointer()", "public long getFreqPointer()"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getProxPointer()", "public long getProxPointer()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getPayloadLength()", "public int getPayloadLength()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getOffsetLength()", "public int getOffsetLength()"], ["org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter", "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter(int, int, int, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter(int, int, int, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter.setSkipData(int, boolean, int, boolean, int)", "public void setSkipData(int, boolean, int, boolean, int)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter.resetSkip()", "public void resetSkip()"], ["org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat()"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsReader fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsWriter", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.StoredFieldsWriter fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.clone()", "public org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader clone()"], ["org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.close()", "public final void close() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.size()", "public final int size()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)", "public final void visitDocument(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.rawDocs(int[], int, int)", "public final org.apache.lucene.store.IndexInput rawDocs(int[], int, int) throws java.io.IOException"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.clone()", "public org.apache.lucene.codecs.StoredFieldsReader clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.startDocument(int)", "public void startDocument(int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.abort()", "public void abort()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.IndexableField)", "public void writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.addRawDocuments(org.apache.lucene.store.IndexInput, int[], int)", "public void addRawDocuments(org.apache.lucene.store.IndexInput, int[], int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.finish(org.apache.lucene.index.FieldInfos, int)", "public void finish(org.apache.lucene.index.FieldInfos, int)"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.merge(org.apache.lucene.index.MergeState)", "public int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat()", "public org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat()"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat.vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.TermVectorsReader vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsWriter", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat.vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.TermVectorsWriter vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.advance(int)", "public int advance(int)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.reset(org.apache.lucene.util.Bits, int[], int[], int[], int[], byte[])", "public void reset(org.apache.lucene.util.Bits, int[], int[], int[], int[], byte[])"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.nextPosition()", "public int nextPosition()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.endOffset()", "public int endOffset()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.advance(int)", "public int advance(int)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.reset(org.apache.lucene.util.Bits, int)", "public void reset(org.apache.lucene.util.Bits, int)"], ["java.lang.String", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.next()", "public java.lang.String next()"], ["boolean", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.hasNext()", "public boolean hasNext()"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.next()", "public java.lang.Object next()"], ["org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader, int)", "public org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader, int) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields.size()", "public int size()"], ["org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader, long)", "public org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader, long) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.iterator(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.size()", "public long size()"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq()"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getSumDocFreq()", "public long getSumDocFreq()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getDocCount()", "public int getDocCount()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["boolean", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.hasPayloads()", "public boolean hasPayloads()"], ["org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader)", "public org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader)"], ["boolean", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.canReuse(org.apache.lucene.store.IndexInput)", "public boolean canReuse(org.apache.lucene.store.IndexInput)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.reset(int, long, boolean, boolean, boolean)", "public void reset(int, long, boolean, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.seekExact(long)", "public void seekExact(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.ord()", "public long ord()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.get(int)", "public org.apache.lucene.index.Fields get(int) throws java.io.IOException"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.clone()", "public org.apache.lucene.codecs.TermVectorsReader clone()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.startDocument(int)", "public void startDocument(int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean)", "public void startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.startTerm(org.apache.lucene.util.BytesRef, int)", "public void startTerm(org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)", "public void addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.addPosition(int, int, int, org.apache.lucene.util.BytesRef)", "public void addPosition(int, int, int, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.abort()", "public void abort()"], ["int", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.merge(org.apache.lucene.index.MergeState)", "public final int merge(org.apache.lucene.index.MergeState) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.finish(org.apache.lucene.index.FieldInfos, int)", "public void finish(org.apache.lucene.index.FieldInfos, int)"], ["void", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.close()", "public void close() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["void", "org.apache.lucene.codecs.lucene40.values.Bytes$BytesReaderBase.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.Bytes$BytesReaderBase.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["boolean", "org.apache.lucene.codecs.lucene40.values.Bytes$BytesSortedSourceBase.hasPackedDocToOrd()", "public boolean hasPackedDocToOrd()"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.codecs.lucene40.values.Bytes$BytesSortedSourceBase.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["int", "org.apache.lucene.codecs.lucene40.values.Bytes$BytesSortedSourceBase.ord(int)", "public int ord(int)"], ["void", "org.apache.lucene.codecs.lucene40.values.Bytes$DerefBytesWriterBase.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.Bytes$DerefBytesWriterBase.getValueSize()", "public int getValueSize()"], ["void", "org.apache.lucene.codecs.lucene40.values.Bytes$DerefBytesWriterBase.finish(int)", "public void finish(int) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.Bytes$Mode[]", "org.apache.lucene.codecs.lucene40.values.Bytes$Mode.values()", "public static org.apache.lucene.codecs.lucene40.values.Bytes$Mode[] values()"], ["org.apache.lucene.codecs.lucene40.values.Bytes$Mode", "org.apache.lucene.codecs.lucene40.values.Bytes$Mode.valueOf(java.lang.String)", "public static org.apache.lucene.codecs.lucene40.values.Bytes$Mode valueOf(java.lang.String)"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.lucene40.values.Bytes.getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.codecs.lucene40.values.Bytes$Mode, boolean, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)", "public static org.apache.lucene.codecs.DocValuesConsumer getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.codecs.lucene40.values.Bytes$Mode, boolean, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.codecs.lucene40.values.Bytes.getValues(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.codecs.lucene40.values.Bytes$Mode, boolean, int, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.store.IOContext)", "public static org.apache.lucene.index.DocValues getValues(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.codecs.lucene40.values.Bytes$Mode, boolean, int, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.DirectSource", "org.apache.lucene.codecs.lucene40.values.DirectSource(org.apache.lucene.store.IndexInput, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.codecs.lucene40.values.DirectSource(org.apache.lucene.store.IndexInput, org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.DirectSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.codecs.lucene40.values.DirectSource.getInt(int)", "public long getInt(int)"], ["double", "org.apache.lucene.codecs.lucene40.values.DirectSource.getFloat(int)", "public double getFloat(int)"], ["void", "org.apache.lucene.codecs.lucene40.values.DocValuesWriterBase.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.lucene40.values.DocValuesWriterBase.addValuesField(org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.codecs.DocValuesConsumer addValuesField(org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.codecs.lucene40.values.DocValuesWriterBase.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer.finish(int)", "public void finish(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer.getValueSize()", "public int getValueSize()"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.ord(int)", "public int ord(int)"], ["boolean", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.hasPackedDocToOrd()", "public boolean hasPackedDocToOrd()"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.getValueCount()", "public int getValueCount()"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$FixedSortedSource.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$FixedSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type, java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type, java.util.Comparator<org.apache.lucene.util.BytesRef>) throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)", "public org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[])", "public void merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[]) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer.finishInternal(int)", "public void finishInternal(int) throws java.io.IOException"], ["double", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedBytesWriterBase.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedBytesWriterBase.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource(org.apache.lucene.store.IndexInput, int, int, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource(org.apache.lucene.store.IndexInput, int, int, org.apache.lucene.index.DocValues$Type) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource(org.apache.lucene.store.IndexInput, int)", "public org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource(org.apache.lucene.store.IndexInput, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource.hasArray()", "public boolean hasArray()"], ["java.lang.Object", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource.getArray()", "public java.lang.Object getArray()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"], ["void", "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer.finish(int)", "public void finish(int) throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.Floats$FloatsReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter", "org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"], ["void", "org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.lucene40.values.Floats.getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)", "public static org.apache.lucene.codecs.DocValuesConsumer getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.codecs.lucene40.values.Floats.getValues(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)", "public static org.apache.lucene.index.DocValues getValues(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type) throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.Ints$IntsReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter", "org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"], ["void", "org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.lucene40.values.Ints.getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.index.DocValues$Type, org.apache.lucene.store.IOContext)", "public static org.apache.lucene.codecs.DocValuesConsumer getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.index.DocValues$Type, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.codecs.lucene40.values.Ints.getValues(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.index.DocValues$Type, org.apache.lucene.store.IOContext)", "public static org.apache.lucene.index.DocValues getValues(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.index.DocValues$Type, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource(org.apache.lucene.store.IndexInput, boolean)", "public org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource(org.apache.lucene.store.IndexInput, boolean) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource.getInt(int)", "public long getInt(int)"], ["void", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsWriter.finish(int)", "public void finish(int) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsWriter.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["void", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput, long)", "public org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput, long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"], ["void", "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer.finishInternal(int)", "public void finishInternal(int) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.ord(int)", "public int ord(int)"], ["boolean", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.hasPackedDocToOrd()", "public boolean hasPackedDocToOrd()"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["void", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$VarSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$VarSortedSource.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)", "public org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"], ["void", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[])", "public void merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[]) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer.finishInternal(int)", "public void finishInternal(int) throws java.io.IOException"], ["double", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$DirectVarStraightSource.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$DirectVarStraightSource.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$DirectVarStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["void", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)", "public org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)", "public org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"], ["void", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.add(int, org.apache.lucene.index.IndexableField)", "public void add(int, org.apache.lucene.index.IndexableField) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.finish(int)", "public void finish(int) throws java.io.IOException"], ["long", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.ramBytesUsed()", "public long ramBytesUsed()"], ["int", "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.codecs.DocValuesConsumer", "org.apache.lucene.codecs.lucene40.values.Writer.create(org.apache.lucene.index.DocValues$Type, java.lang.String, org.apache.lucene.store.Directory, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)", "public static org.apache.lucene.codecs.DocValuesConsumer create(org.apache.lucene.index.DocValues$Type, java.lang.String, org.apache.lucene.store.Directory, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsConsumerAndSuffix.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentReadState)", "public org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.size()", "public int size()"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentWriteState)"], ["org.apache.lucene.codecs.TermsConsumer", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.addField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.codecs.TermsConsumer addField(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["void", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.codecs.perfield.PerFieldPostingsFormat", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat()", "public org.apache.lucene.codecs.perfield.PerFieldPostingsFormat()"], ["org.apache.lucene.codecs.FieldsConsumer", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)", "public final org.apache.lucene.codecs.FieldsConsumer fieldsConsumer(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.codecs.FieldsProducer", "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)", "public final org.apache.lucene.codecs.FieldsProducer fieldsProducer(org.apache.lucene.index.SegmentReadState) throws java.io.IOException"], ["org.apache.lucene.document.ByteDocValuesField", "org.apache.lucene.document.ByteDocValuesField(java.lang.String, byte)", "public org.apache.lucene.document.ByteDocValuesField(java.lang.String, byte)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compress(byte[], int, int, int)", "public static byte[] compress(byte[], int, int, int)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compress(byte[], int, int)", "public static byte[] compress(byte[], int, int)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compress(byte[])", "public static byte[] compress(byte[])"], ["byte[]", "org.apache.lucene.document.CompressionTools.compressString(java.lang.String)", "public static byte[] compressString(java.lang.String)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compressString(java.lang.String, int)", "public static byte[] compressString(java.lang.String, int)"], ["byte[]", "org.apache.lucene.document.CompressionTools.decompress(org.apache.lucene.util.BytesRef)", "public static byte[] decompress(org.apache.lucene.util.BytesRef) throws java.util.zip.DataFormatException"], ["byte[]", "org.apache.lucene.document.CompressionTools.decompress(byte[])", "public static byte[] decompress(byte[]) throws java.util.zip.DataFormatException"], ["byte[]", "org.apache.lucene.document.CompressionTools.decompress(byte[], int, int)", "public static byte[] decompress(byte[], int, int) throws java.util.zip.DataFormatException"], ["java.lang.String", "org.apache.lucene.document.CompressionTools.decompressString(byte[])", "public static java.lang.String decompressString(byte[]) throws java.util.zip.DataFormatException"], ["java.lang.String", "org.apache.lucene.document.CompressionTools.decompressString(byte[], int, int)", "public static java.lang.String decompressString(byte[], int, int) throws java.util.zip.DataFormatException"], ["java.lang.String", "org.apache.lucene.document.CompressionTools.decompressString(org.apache.lucene.util.BytesRef)", "public static java.lang.String decompressString(org.apache.lucene.util.BytesRef) throws java.util.zip.DataFormatException"], ["org.apache.lucene.document.DateTools$Resolution[]", "org.apache.lucene.document.DateTools$Resolution.values()", "public static org.apache.lucene.document.DateTools$Resolution[] values()"], ["org.apache.lucene.document.DateTools$Resolution", "org.apache.lucene.document.DateTools$Resolution.valueOf(java.lang.String)", "public static org.apache.lucene.document.DateTools$Resolution valueOf(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.DateTools$Resolution.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.document.DateTools.dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)", "public static java.lang.String dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"], ["java.lang.String", "org.apache.lucene.document.DateTools.timeToString(long, org.apache.lucene.document.DateTools$Resolution)", "public static java.lang.String timeToString(long, org.apache.lucene.document.DateTools$Resolution)"], ["long", "org.apache.lucene.document.DateTools.stringToTime(java.lang.String)", "public static long stringToTime(java.lang.String) throws java.text.ParseException"], ["java.util.Date", "org.apache.lucene.document.DateTools.stringToDate(java.lang.String)", "public static java.util.Date stringToDate(java.lang.String) throws java.text.ParseException"], ["java.util.Date", "org.apache.lucene.document.DateTools.round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)", "public static java.util.Date round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"], ["long", "org.apache.lucene.document.DateTools.round(long, org.apache.lucene.document.DateTools$Resolution)", "public static long round(long, org.apache.lucene.document.DateTools$Resolution)"], ["org.apache.lucene.document.DerefBytesDocValuesField", "org.apache.lucene.document.DerefBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.DerefBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.document.DerefBytesDocValuesField", "org.apache.lucene.document.DerefBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.document.DerefBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)"], ["org.apache.lucene.document.Document", "org.apache.lucene.document.Document()", "public org.apache.lucene.document.Document()"], ["java.util.Iterator<org.apache.lucene.index.IndexableField>", "org.apache.lucene.document.Document.iterator()", "public java.util.Iterator<org.apache.lucene.index.IndexableField> iterator()"], ["void", "org.apache.lucene.document.Document.add(org.apache.lucene.index.IndexableField)", "public final void add(org.apache.lucene.index.IndexableField)"], ["void", "org.apache.lucene.document.Document.removeField(java.lang.String)", "public final void removeField(java.lang.String)"], ["void", "org.apache.lucene.document.Document.removeFields(java.lang.String)", "public final void removeFields(java.lang.String)"], ["org.apache.lucene.util.BytesRef[]", "org.apache.lucene.document.Document.getBinaryValues(java.lang.String)", "public final org.apache.lucene.util.BytesRef[] getBinaryValues(java.lang.String)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.Document.getBinaryValue(java.lang.String)", "public final org.apache.lucene.util.BytesRef getBinaryValue(java.lang.String)"], ["org.apache.lucene.index.IndexableField", "org.apache.lucene.document.Document.getField(java.lang.String)", "public final org.apache.lucene.index.IndexableField getField(java.lang.String)"], ["org.apache.lucene.index.IndexableField[]", "org.apache.lucene.document.Document.getFields(java.lang.String)", "public org.apache.lucene.index.IndexableField[] getFields(java.lang.String)"], ["java.util.List<org.apache.lucene.index.IndexableField>", "org.apache.lucene.document.Document.getFields()", "public final java.util.List<org.apache.lucene.index.IndexableField> getFields()"], ["java.lang.String[]", "org.apache.lucene.document.Document.getValues(java.lang.String)", "public final java.lang.String[] getValues(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.Document.get(java.lang.String)", "public final java.lang.String get(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.Document.toString()", "public final java.lang.String toString()"], ["org.apache.lucene.document.DocumentStoredFieldVisitor", "org.apache.lucene.document.DocumentStoredFieldVisitor(java.util.Set<java.lang.String>)", "public org.apache.lucene.document.DocumentStoredFieldVisitor(java.util.Set<java.lang.String>)"], ["org.apache.lucene.document.DocumentStoredFieldVisitor", "org.apache.lucene.document.DocumentStoredFieldVisitor(java.lang.String...)", "public org.apache.lucene.document.DocumentStoredFieldVisitor(java.lang.String...)"], ["org.apache.lucene.document.DocumentStoredFieldVisitor", "org.apache.lucene.document.DocumentStoredFieldVisitor()", "public org.apache.lucene.document.DocumentStoredFieldVisitor()"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])", "public void binaryField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)", "public void stringField(org.apache.lucene.index.FieldInfo, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)", "public void intField(org.apache.lucene.index.FieldInfo, int)"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)", "public void longField(org.apache.lucene.index.FieldInfo, long)"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)", "public void floatField(org.apache.lucene.index.FieldInfo, float)"], ["void", "org.apache.lucene.document.DocumentStoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)", "public void doubleField(org.apache.lucene.index.FieldInfo, double)"], ["org.apache.lucene.index.StoredFieldVisitor$Status", "org.apache.lucene.document.DocumentStoredFieldVisitor.needsField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.StoredFieldVisitor$Status needsField(org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument()", "public org.apache.lucene.document.Document getDocument()"], ["org.apache.lucene.document.DoubleDocValuesField", "org.apache.lucene.document.DoubleDocValuesField(java.lang.String, double)", "public org.apache.lucene.document.DoubleDocValuesField(java.lang.String, double)"], ["org.apache.lucene.document.DoubleField", "org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.DoubleField", "org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.FieldType)"], ["boolean", "org.apache.lucene.document.Field$Index$1.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$1.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$1.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$2.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$2.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$2.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$3.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$3.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$3.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$4.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$4.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$4.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$5.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$5.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$5.omitNorms()", "public boolean omitNorms()"], ["org.apache.lucene.document.Field$Index[]", "org.apache.lucene.document.Field$Index.values()", "public static org.apache.lucene.document.Field$Index[] values()"], ["org.apache.lucene.document.Field$Index", "org.apache.lucene.document.Field$Index.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$Index valueOf(java.lang.String)"], ["org.apache.lucene.document.Field$Index", "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean)", "public static org.apache.lucene.document.Field$Index toIndex(boolean, boolean)"], ["org.apache.lucene.document.Field$Index", "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean, boolean)", "public static org.apache.lucene.document.Field$Index toIndex(boolean, boolean, boolean)"], ["int", "org.apache.lucene.document.Field$ReusableStringReader.read()", "public int read()"], ["int", "org.apache.lucene.document.Field$ReusableStringReader.read(char[], int, int)", "public int read(char[], int, int)"], ["void", "org.apache.lucene.document.Field$ReusableStringReader.close()", "public void close()"], ["org.apache.lucene.document.Field$Store[]", "org.apache.lucene.document.Field$Store.values()", "public static org.apache.lucene.document.Field$Store[] values()"], ["org.apache.lucene.document.Field$Store", "org.apache.lucene.document.Field$Store.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$Store valueOf(java.lang.String)"], ["boolean", "org.apache.lucene.document.Field$StringTokenStream.incrementToken()", "public boolean incrementToken()"], ["void", "org.apache.lucene.document.Field$StringTokenStream.end()", "public void end()"], ["void", "org.apache.lucene.document.Field$StringTokenStream.reset()", "public void reset()"], ["void", "org.apache.lucene.document.Field$StringTokenStream.close()", "public void close()"], ["boolean", "org.apache.lucene.document.Field$TermVector$1.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$1.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$1.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$2.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$2.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$2.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$3.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$3.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$3.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$4.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$4.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$4.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$5.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$5.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$5.withOffsets()", "public boolean withOffsets()"], ["org.apache.lucene.document.Field$TermVector[]", "org.apache.lucene.document.Field$TermVector.values()", "public static org.apache.lucene.document.Field$TermVector[] values()"], ["org.apache.lucene.document.Field$TermVector", "org.apache.lucene.document.Field$TermVector.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$TermVector valueOf(java.lang.String)"], ["org.apache.lucene.document.Field$TermVector", "org.apache.lucene.document.Field$TermVector.toTermVector(boolean, boolean, boolean)", "public static org.apache.lucene.document.Field$TermVector toTermVector(boolean, boolean, boolean)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)"], ["java.lang.String", "org.apache.lucene.document.Field.stringValue()", "public java.lang.String stringValue()"], ["java.io.Reader", "org.apache.lucene.document.Field.readerValue()", "public java.io.Reader readerValue()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.document.Field.tokenStreamValue()", "public org.apache.lucene.analysis.TokenStream tokenStreamValue()"], ["void", "org.apache.lucene.document.Field.setStringValue(java.lang.String)", "public void setStringValue(java.lang.String)"], ["void", "org.apache.lucene.document.Field.setReaderValue(java.io.Reader)", "public void setReaderValue(java.io.Reader)"], ["void", "org.apache.lucene.document.Field.setBytesValue(byte[])", "public void setBytesValue(byte[])"], ["void", "org.apache.lucene.document.Field.setBytesValue(org.apache.lucene.util.BytesRef)", "public void setBytesValue(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.document.Field.setByteValue(byte)", "public void setByteValue(byte)"], ["void", "org.apache.lucene.document.Field.setShortValue(short)", "public void setShortValue(short)"], ["void", "org.apache.lucene.document.Field.setIntValue(int)", "public void setIntValue(int)"], ["void", "org.apache.lucene.document.Field.setLongValue(long)", "public void setLongValue(long)"], ["void", "org.apache.lucene.document.Field.setFloatValue(float)", "public void setFloatValue(float)"], ["void", "org.apache.lucene.document.Field.setDoubleValue(double)", "public void setDoubleValue(double)"], ["void", "org.apache.lucene.document.Field.setTokenStream(org.apache.lucene.analysis.TokenStream)", "public void setTokenStream(org.apache.lucene.analysis.TokenStream)"], ["java.lang.String", "org.apache.lucene.document.Field.name()", "public java.lang.String name()"], ["float", "org.apache.lucene.document.Field.boost()", "public float boost()"], ["void", "org.apache.lucene.document.Field.setBoost(float)", "public void setBoost(float)"], ["java.lang.Number", "org.apache.lucene.document.Field.numericValue()", "public java.lang.Number numericValue()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.document.Field.binaryValue()", "public org.apache.lucene.util.BytesRef binaryValue()"], ["java.lang.String", "org.apache.lucene.document.Field.toString()", "public java.lang.String toString()"], ["org.apache.lucene.document.FieldType", "org.apache.lucene.document.Field.fieldType()", "public org.apache.lucene.document.FieldType fieldType()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.document.Field.tokenStream(org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.analysis.TokenStream tokenStream(org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["org.apache.lucene.document.FieldType", "org.apache.lucene.document.Field.translateFieldType(org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)", "public static final org.apache.lucene.document.FieldType translateFieldType(org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)", "public org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.io.Reader)", "public org.apache.lucene.document.Field(java.lang.String, java.io.Reader)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[])", "public org.apache.lucene.document.Field(java.lang.String, byte[])"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], int, int)", "public org.apache.lucene.document.Field(java.lang.String, byte[], int, int)"], ["org.apache.lucene.index.IndexableFieldType", "org.apache.lucene.document.Field.fieldType()", "public org.apache.lucene.index.IndexableFieldType fieldType()"], ["org.apache.lucene.document.FieldType$NumericType[]", "org.apache.lucene.document.FieldType$NumericType.values()", "public static org.apache.lucene.document.FieldType$NumericType[] values()"], ["org.apache.lucene.document.FieldType$NumericType", "org.apache.lucene.document.FieldType$NumericType.valueOf(java.lang.String)", "public static org.apache.lucene.document.FieldType$NumericType valueOf(java.lang.String)"], ["org.apache.lucene.document.FieldType", "org.apache.lucene.document.FieldType(org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.FieldType(org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.FieldType", "org.apache.lucene.document.FieldType()", "public org.apache.lucene.document.FieldType()"], ["void", "org.apache.lucene.document.FieldType.freeze()", "public void freeze()"], ["boolean", "org.apache.lucene.document.FieldType.indexed()", "public boolean indexed()"], ["void", "org.apache.lucene.document.FieldType.setIndexed(boolean)", "public void setIndexed(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.stored()", "public boolean stored()"], ["void", "org.apache.lucene.document.FieldType.setStored(boolean)", "public void setStored(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.tokenized()", "public boolean tokenized()"], ["void", "org.apache.lucene.document.FieldType.setTokenized(boolean)", "public void setTokenized(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectors()", "public boolean storeTermVectors()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectors(boolean)", "public void setStoreTermVectors(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectorOffsets()", "public boolean storeTermVectorOffsets()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectorOffsets(boolean)", "public void setStoreTermVectorOffsets(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectorPositions()", "public boolean storeTermVectorPositions()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectorPositions(boolean)", "public void setStoreTermVectorPositions(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.storeTermVectorPayloads()", "public boolean storeTermVectorPayloads()"], ["void", "org.apache.lucene.document.FieldType.setStoreTermVectorPayloads(boolean)", "public void setStoreTermVectorPayloads(boolean)"], ["boolean", "org.apache.lucene.document.FieldType.omitNorms()", "public boolean omitNorms()"], ["void", "org.apache.lucene.document.FieldType.setOmitNorms(boolean)", "public void setOmitNorms(boolean)"], ["org.apache.lucene.index.FieldInfo$IndexOptions", "org.apache.lucene.document.FieldType.indexOptions()", "public org.apache.lucene.index.FieldInfo$IndexOptions indexOptions()"], ["void", "org.apache.lucene.document.FieldType.setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)", "public void setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)"], ["void", "org.apache.lucene.document.FieldType.setDocValueType(org.apache.lucene.index.DocValues$Type)", "public void setDocValueType(org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.document.FieldType.docValueType()", "public org.apache.lucene.index.DocValues$Type docValueType()"], ["void", "org.apache.lucene.document.FieldType.setNumericType(org.apache.lucene.document.FieldType$NumericType)", "public void setNumericType(org.apache.lucene.document.FieldType$NumericType)"], ["org.apache.lucene.document.FieldType$NumericType", "org.apache.lucene.document.FieldType.numericType()", "public org.apache.lucene.document.FieldType$NumericType numericType()"], ["void", "org.apache.lucene.document.FieldType.setNumericPrecisionStep(int)", "public void setNumericPrecisionStep(int)"], ["int", "org.apache.lucene.document.FieldType.numericPrecisionStep()", "public int numericPrecisionStep()"], ["java.lang.String", "org.apache.lucene.document.FieldType.toString()", "public final java.lang.String toString()"], ["org.apache.lucene.document.FloatDocValuesField", "org.apache.lucene.document.FloatDocValuesField(java.lang.String, float)", "public org.apache.lucene.document.FloatDocValuesField(java.lang.String, float)"], ["org.apache.lucene.document.FloatField", "org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.FloatField", "org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.IntDocValuesField", "org.apache.lucene.document.IntDocValuesField(java.lang.String, int)", "public org.apache.lucene.document.IntDocValuesField(java.lang.String, int)"], ["org.apache.lucene.document.IntField", "org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.IntField", "org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.LongDocValuesField", "org.apache.lucene.document.LongDocValuesField(java.lang.String, long)", "public org.apache.lucene.document.LongDocValuesField(java.lang.String, long)"], ["org.apache.lucene.document.LongField", "org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.LongField", "org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.FieldType)", "public org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.FieldType)"], ["org.apache.lucene.document.PackedLongDocValuesField", "org.apache.lucene.document.PackedLongDocValuesField(java.lang.String, long)", "public org.apache.lucene.document.PackedLongDocValuesField(java.lang.String, long)"], ["org.apache.lucene.document.ShortDocValuesField", "org.apache.lucene.document.ShortDocValuesField(java.lang.String, short)", "public org.apache.lucene.document.ShortDocValuesField(java.lang.String, short)"], ["org.apache.lucene.document.SortedBytesDocValuesField", "org.apache.lucene.document.SortedBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.SortedBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.document.SortedBytesDocValuesField", "org.apache.lucene.document.SortedBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.document.SortedBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, byte[])", "public org.apache.lucene.document.StoredField(java.lang.String, byte[])"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, byte[], int, int)", "public org.apache.lucene.document.StoredField(java.lang.String, byte[], int, int)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, java.lang.String)", "public org.apache.lucene.document.StoredField(java.lang.String, java.lang.String)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, int)", "public org.apache.lucene.document.StoredField(java.lang.String, int)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, float)", "public org.apache.lucene.document.StoredField(java.lang.String, float)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, long)", "public org.apache.lucene.document.StoredField(java.lang.String, long)"], ["org.apache.lucene.document.StoredField", "org.apache.lucene.document.StoredField(java.lang.String, double)", "public org.apache.lucene.document.StoredField(java.lang.String, double)"], ["org.apache.lucene.document.StraightBytesDocValuesField", "org.apache.lucene.document.StraightBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.document.StraightBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.document.StraightBytesDocValuesField", "org.apache.lucene.document.StraightBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.document.StraightBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)"], ["org.apache.lucene.document.StringField", "org.apache.lucene.document.StringField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.StringField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.TextField", "org.apache.lucene.document.TextField(java.lang.String, java.io.Reader)", "public org.apache.lucene.document.TextField(java.lang.String, java.io.Reader)"], ["org.apache.lucene.document.TextField", "org.apache.lucene.document.TextField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.TextField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.TextField", "org.apache.lucene.document.TextField(java.lang.String, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.document.TextField(java.lang.String, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.index.AtomicReaderContext", "org.apache.lucene.index.AtomicReader.getContext()", "public final org.apache.lucene.index.AtomicReaderContext getContext()"], ["boolean", "org.apache.lucene.index.AtomicReader.hasNorms(java.lang.String)", "public final boolean hasNorms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.AtomicReader.docFreq(org.apache.lucene.index.Term)", "public final int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.index.AtomicReader.totalTermFreq(org.apache.lucene.index.Term)", "public final long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.AtomicReader.terms(java.lang.String)", "public final org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.AtomicReader.termDocsEnum(org.apache.lucene.index.Term)", "public final org.apache.lucene.index.DocsEnum termDocsEnum(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.AtomicReader.termPositionsEnum(org.apache.lucene.index.Term)", "public final org.apache.lucene.index.DocsAndPositionsEnum termPositionsEnum(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.index.AtomicReader.getContext()", "public org.apache.lucene.index.IndexReaderContext getContext()"], ["java.util.List<org.apache.lucene.index.AtomicReaderContext>", "org.apache.lucene.index.AtomicReaderContext.leaves()", "public java.util.List<org.apache.lucene.index.AtomicReaderContext> leaves()"], ["java.util.List<org.apache.lucene.index.IndexReaderContext>", "org.apache.lucene.index.AtomicReaderContext.children()", "public java.util.List<org.apache.lucene.index.IndexReaderContext> children()"], ["org.apache.lucene.index.AtomicReader", "org.apache.lucene.index.AtomicReaderContext.reader()", "public org.apache.lucene.index.AtomicReader reader()"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.AtomicReaderContext.reader()", "public org.apache.lucene.index.IndexReader reader()"], ["org.apache.lucene.index.AutomatonTermsEnum", "org.apache.lucene.index.AutomatonTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton)", "public org.apache.lucene.index.AutomatonTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton)"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.BaseCompositeReader.getTermVectors(int)", "public final org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.BaseCompositeReader.numDocs()", "public final int numDocs()"], ["int", "org.apache.lucene.index.BaseCompositeReader.maxDoc()", "public final int maxDoc()"], ["void", "org.apache.lucene.index.BaseCompositeReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public final void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.BaseCompositeReader.hasDeletions()", "public final boolean hasDeletions()"], ["int", "org.apache.lucene.index.BaseCompositeReader.docFreq(org.apache.lucene.index.Term)", "public final int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.index.BaseCompositeReader.totalTermFreq(org.apache.lucene.index.Term)", "public final long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.BitsSlice", "org.apache.lucene.index.BitsSlice(org.apache.lucene.util.Bits, org.apache.lucene.index.ReaderSlice)", "public org.apache.lucene.index.BitsSlice(org.apache.lucene.util.Bits, org.apache.lucene.index.ReaderSlice)"], ["boolean", "org.apache.lucene.index.BitsSlice.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.index.BitsSlice.length()", "public int length()"], ["org.apache.lucene.index.BufferedDeletes", "org.apache.lucene.index.BufferedDeletes()", "public org.apache.lucene.index.BufferedDeletes()"], ["java.lang.String", "org.apache.lucene.index.BufferedDeletes.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.BufferedDeletes.addQuery(org.apache.lucene.search.Query, int)", "public void addQuery(org.apache.lucene.search.Query, int)"], ["void", "org.apache.lucene.index.BufferedDeletes.addDocID(int)", "public void addDocID(int)"], ["void", "org.apache.lucene.index.BufferedDeletes.addTerm(org.apache.lucene.index.Term, int)", "public void addTerm(org.apache.lucene.index.Term, int)"], ["int", "org.apache.lucene.index.BufferedDeletesStream$1.compare(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.SegmentInfoPerCommit)", "public int compare(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.SegmentInfoPerCommit)"], ["int", "org.apache.lucene.index.BufferedDeletesStream$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit", "org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit(org.apache.lucene.search.Query, int)", "public org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit(org.apache.lucene.search.Query, int)"], ["org.apache.lucene.index.BufferedDeletesStream", "org.apache.lucene.index.BufferedDeletesStream(org.apache.lucene.util.InfoStream)", "public org.apache.lucene.index.BufferedDeletesStream(org.apache.lucene.util.InfoStream)"], ["synchronized", "org.apache.lucene.index.BufferedDeletesStream.long push(org.apache.lucene.index.FrozenBufferedDeletes)", "public synchronized long push(org.apache.lucene.index.FrozenBufferedDeletes)"], ["synchronized", "org.apache.lucene.index.BufferedDeletesStream.void clear()", "public synchronized void clear()"], ["boolean", "org.apache.lucene.index.BufferedDeletesStream.any()", "public boolean any()"], ["int", "org.apache.lucene.index.BufferedDeletesStream.numTerms()", "public int numTerms()"], ["long", "org.apache.lucene.index.BufferedDeletesStream.bytesUsed()", "public long bytesUsed()"], ["synchronized", "org.apache.lucene.index.BufferedDeletesStream.org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult applyDeletes(org.apache.lucene.index.IndexWriter$ReaderPool, java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>)", "public synchronized org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult applyDeletes(org.apache.lucene.index.IndexWriter$ReaderPool, java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.BufferedDeletesStream.void prune(org.apache.lucene.index.SegmentInfos)", "public synchronized void prune(org.apache.lucene.index.SegmentInfos)"], ["void", "org.apache.lucene.index.ByteSliceReader.init(org.apache.lucene.util.ByteBlockPool, int, int)", "public void init(org.apache.lucene.util.ByteBlockPool, int, int)"], ["boolean", "org.apache.lucene.index.ByteSliceReader.eof()", "public boolean eof()"], ["byte", "org.apache.lucene.index.ByteSliceReader.readByte()", "public byte readByte()"], ["long", "org.apache.lucene.index.ByteSliceReader.writeTo(org.apache.lucene.store.DataOutput)", "public long writeTo(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.index.ByteSliceReader.nextSlice()", "public void nextSlice()"], ["void", "org.apache.lucene.index.ByteSliceReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["org.apache.lucene.index.ByteSliceWriter", "org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.util.ByteBlockPool)", "public org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.util.ByteBlockPool)"], ["void", "org.apache.lucene.index.ByteSliceWriter.init(int)", "public void init(int)"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["int", "org.apache.lucene.index.ByteSliceWriter.getAddress()", "public int getAddress()"], ["org.apache.lucene.index.CheckIndex", "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.index.CheckIndex.setCrossCheckTermVectors(boolean)", "public void setCrossCheckTermVectors(boolean)"], ["boolean", "org.apache.lucene.index.CheckIndex.getCrossCheckTermVectors()", "public boolean getCrossCheckTermVectors()"], ["void", "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream, boolean)", "public void setInfoStream(java.io.PrintStream, boolean)"], ["void", "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream)", "public void setInfoStream(java.io.PrintStream)"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex.checkIndex()", "public org.apache.lucene.index.CheckIndex$Status checkIndex() throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex.checkIndex(java.util.List<java.lang.String>)", "public org.apache.lucene.index.CheckIndex$Status checkIndex(java.util.List<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.fixIndex(org.apache.lucene.index.CheckIndex$Status, org.apache.lucene.codecs.Codec)", "public void fixIndex(org.apache.lucene.index.CheckIndex$Status, org.apache.lucene.codecs.Codec) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException, java.lang.InterruptedException"], ["java.util.Iterator<org.apache.lucene.index.Term>", "org.apache.lucene.index.CoalescedDeletes$1.iterator()", "public java.util.Iterator<org.apache.lucene.index.Term> iterator()"], ["boolean", "org.apache.lucene.index.CoalescedDeletes$2$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit", "org.apache.lucene.index.CoalescedDeletes$2$1.next()", "public org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit next()"], ["void", "org.apache.lucene.index.CoalescedDeletes$2$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.index.CoalescedDeletes$2$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit>", "org.apache.lucene.index.CoalescedDeletes$2.iterator()", "public java.util.Iterator<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit> iterator()"], ["java.lang.String", "org.apache.lucene.index.CoalescedDeletes.toString()", "public java.lang.String toString()"], ["java.lang.Iterable<org.apache.lucene.index.Term>", "org.apache.lucene.index.CoalescedDeletes.termsIterable()", "public java.lang.Iterable<org.apache.lucene.index.Term> termsIterable()"], ["java.lang.Iterable<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit>", "org.apache.lucene.index.CoalescedDeletes.queriesIterable()", "public java.lang.Iterable<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit> queriesIterable()"], ["java.lang.String", "org.apache.lucene.index.CompositeReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.CompositeReaderContext", "org.apache.lucene.index.CompositeReader.getContext()", "public final org.apache.lucene.index.CompositeReaderContext getContext()"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.index.CompositeReader.getContext()", "public org.apache.lucene.index.IndexReaderContext getContext()"], ["org.apache.lucene.index.CompositeReaderContext$Builder", "org.apache.lucene.index.CompositeReaderContext$Builder(org.apache.lucene.index.CompositeReader)", "public org.apache.lucene.index.CompositeReaderContext$Builder(org.apache.lucene.index.CompositeReader)"], ["org.apache.lucene.index.CompositeReaderContext", "org.apache.lucene.index.CompositeReaderContext$Builder.build()", "public org.apache.lucene.index.CompositeReaderContext build()"], ["java.util.List<org.apache.lucene.index.AtomicReaderContext>", "org.apache.lucene.index.CompositeReaderContext.leaves()", "public java.util.List<org.apache.lucene.index.AtomicReaderContext> leaves() throws java.lang.UnsupportedOperationException"], ["java.util.List<org.apache.lucene.index.IndexReaderContext>", "org.apache.lucene.index.CompositeReaderContext.children()", "public java.util.List<org.apache.lucene.index.IndexReaderContext> children()"], ["org.apache.lucene.index.CompositeReader", "org.apache.lucene.index.CompositeReaderContext.reader()", "public org.apache.lucene.index.CompositeReader reader()"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.CompositeReaderContext.reader()", "public org.apache.lucene.index.IndexReader reader()"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler$1.compare(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread, org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread)", "public int compare(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread, org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread)"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)", "public org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge)", "public synchronized void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge)"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.org.apache.lucene.index.MergePolicy$OneMerge getRunningMerge()", "public synchronized org.apache.lucene.index.MergePolicy$OneMerge getRunningMerge()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge()", "public synchronized org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.setThreadPriority(int)", "public void setThreadPriority(int)"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run()", "public void run()"], ["org.apache.lucene.index.ConcurrentMergeScheduler", "org.apache.lucene.index.ConcurrentMergeScheduler()", "public org.apache.lucene.index.ConcurrentMergeScheduler()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.setMaxThreadCount(int)", "public void setMaxThreadCount(int)"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler.getMaxThreadCount()", "public int getMaxThreadCount()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergeCount(int)", "public void setMaxMergeCount(int)"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler.getMaxMergeCount()", "public int getMaxMergeCount()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.int getMergeThreadPriority()", "public synchronized int getMergeThreadPriority()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void setMergeThreadPriority(int)", "public synchronized void setMergeThreadPriority(int)"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.close()", "public void close()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.sync()", "public void sync()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.merge(org.apache.lucene.index.IndexWriter)", "public void merge(org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String)"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.store.Directory)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.store.Directory, int)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory, int) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexWriter, boolean)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexCommit)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexCommit, int)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit, int) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexCommit)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter, boolean)", "public static org.apache.lucene.index.DirectoryReader openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException"], ["java.util.List<org.apache.lucene.index.IndexCommit>", "org.apache.lucene.index.DirectoryReader.listCommits(org.apache.lucene.store.Directory)", "public static java.util.List<org.apache.lucene.index.IndexCommit> listCommits(org.apache.lucene.store.Directory) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader.indexExists(org.apache.lucene.store.Directory)", "public static boolean indexExists(org.apache.lucene.store.Directory)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.DirectoryReader.directory()", "public final org.apache.lucene.store.Directory directory()"], ["int", "org.apache.lucene.index.DocFieldProcessor$1.compare(org.apache.lucene.index.DocFieldProcessorPerField, org.apache.lucene.index.DocFieldProcessorPerField)", "public int compare(org.apache.lucene.index.DocFieldProcessorPerField, org.apache.lucene.index.DocFieldProcessorPerField)"], ["int", "org.apache.lucene.index.DocFieldProcessor$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.DocFieldProcessor$DocValuesConsumerHolder", "org.apache.lucene.index.DocFieldProcessor$DocValuesConsumerHolder(org.apache.lucene.codecs.DocValuesConsumer)", "public org.apache.lucene.index.DocFieldProcessor$DocValuesConsumerHolder(org.apache.lucene.codecs.DocValuesConsumer)"], ["org.apache.lucene.index.DocFieldProcessor", "org.apache.lucene.index.DocFieldProcessor(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.DocFieldConsumer)", "public org.apache.lucene.index.DocFieldProcessor(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.DocFieldConsumer)"], ["void", "org.apache.lucene.index.DocFieldProcessor.flush(org.apache.lucene.index.SegmentWriteState)", "public void flush(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldProcessor.abort()", "public void abort()"], ["boolean", "org.apache.lucene.index.DocFieldProcessor.freeRAM()", "public boolean freeRAM()"], ["java.util.Collection<org.apache.lucene.index.DocFieldConsumerPerField>", "org.apache.lucene.index.DocFieldProcessor.fields()", "public java.util.Collection<org.apache.lucene.index.DocFieldConsumerPerField> fields()"], ["void", "org.apache.lucene.index.DocFieldProcessor.processDocument(org.apache.lucene.index.FieldInfos$Builder)", "public void processDocument(org.apache.lucene.index.FieldInfos$Builder) throws java.io.IOException"], ["org.apache.lucene.index.DocFieldProcessorPerField", "org.apache.lucene.index.DocFieldProcessorPerField(org.apache.lucene.index.DocFieldProcessor, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocFieldProcessorPerField(org.apache.lucene.index.DocFieldProcessor, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.DocFieldProcessorPerField.addField(org.apache.lucene.index.IndexableField)", "public void addField(org.apache.lucene.index.IndexableField)"], ["void", "org.apache.lucene.index.DocFieldProcessorPerField.abort()", "public void abort()"], ["org.apache.lucene.index.DocInverter", "org.apache.lucene.index.DocInverter(org.apache.lucene.index.DocumentsWriterPerThread$DocState, org.apache.lucene.index.InvertedDocConsumer, org.apache.lucene.index.InvertedDocEndConsumer)", "public org.apache.lucene.index.DocInverter(org.apache.lucene.index.DocumentsWriterPerThread$DocState, org.apache.lucene.index.InvertedDocConsumer, org.apache.lucene.index.InvertedDocEndConsumer)"], ["void", "org.apache.lucene.index.DocInverter.startDocument()", "public void startDocument() throws java.io.IOException"], ["void", "org.apache.lucene.index.DocInverter.finishDocument()", "public void finishDocument() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DocInverter.freeRAM()", "public boolean freeRAM()"], ["org.apache.lucene.index.DocFieldConsumerPerField", "org.apache.lucene.index.DocInverter.addField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocFieldConsumerPerField addField(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.DocInverterPerField", "org.apache.lucene.index.DocInverterPerField(org.apache.lucene.index.DocInverter, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocInverterPerField(org.apache.lucene.index.DocInverter, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.DocInverterPerField.processFields(org.apache.lucene.index.IndexableField[], int)", "public void processFields(org.apache.lucene.index.IndexableField[], int) throws java.io.IOException"], ["org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum(org.apache.lucene.index.DocTermOrds, org.apache.lucene.index.AtomicReader)", "public org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum(org.apache.lucene.index.DocTermOrds, org.apache.lucene.index.AtomicReader) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["int", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.ord()", "public long ord()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocTermOrds$TermOrdsIterator.read(int[])", "public int read(int[])"], ["org.apache.lucene.index.DocTermOrds$TermOrdsIterator", "org.apache.lucene.index.DocTermOrds$TermOrdsIterator.reset(int)", "public org.apache.lucene.index.DocTermOrds$TermOrdsIterator reset(int)"], ["long", "org.apache.lucene.index.DocTermOrds.ramUsedInBytes()", "public long ramUsedInBytes()"], ["org.apache.lucene.index.DocTermOrds", "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocTermOrds", "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.DocTermOrds", "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef, int)", "public org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["org.apache.lucene.index.DocTermOrds", "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef, int, int)", "public org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef, int, int) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.DocTermOrds.getOrdTermsEnum(org.apache.lucene.index.AtomicReader)", "public org.apache.lucene.index.TermsEnum getOrdTermsEnum(org.apache.lucene.index.AtomicReader) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocTermOrds.numTerms()", "public int numTerms()"], ["boolean", "org.apache.lucene.index.DocTermOrds.isEmpty()", "public boolean isEmpty()"], ["org.apache.lucene.index.DocTermOrds$TermOrdsIterator", "org.apache.lucene.index.DocTermOrds.lookup(int, org.apache.lucene.index.DocTermOrds$TermOrdsIterator)", "public org.apache.lucene.index.DocTermOrds$TermOrdsIterator lookup(int, org.apache.lucene.index.DocTermOrds$TermOrdsIterator)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocTermOrds.lookupTerm(org.apache.lucene.index.TermsEnum, int)", "public org.apache.lucene.util.BytesRef lookupTerm(org.apache.lucene.index.TermsEnum, int) throws java.io.IOException"], ["long", "org.apache.lucene.index.DocValues$1.getInt(int)", "public long getInt(int)"], ["double", "org.apache.lucene.index.DocValues$1.getFloat(int)", "public double getFloat(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$1.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.index.DocValues$2.get(int)", "public long get(int)"], ["int", "org.apache.lucene.index.DocValues$2.getBitsPerValue()", "public int getBitsPerValue()"], ["int", "org.apache.lucene.index.DocValues$2.size()", "public int size()"], ["boolean", "org.apache.lucene.index.DocValues$2.hasArray()", "public boolean hasArray()"], ["java.lang.Object", "org.apache.lucene.index.DocValues$2.getArray()", "public java.lang.Object getArray()"], ["int", "org.apache.lucene.index.DocValues$2.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["long", "org.apache.lucene.index.DocValues$2.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$3.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.index.DocValues$3.ord(int)", "public int ord(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$3.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.index.DocValues$3.hasPackedDocToOrd()", "public boolean hasPackedDocToOrd()"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.index.DocValues$3.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["int", "org.apache.lucene.index.DocValues$3.getOrdByValue(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int getOrdByValue(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.index.DocValues$3.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$SortedSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.index.DocValues$SortedSource.hasPackedDocToOrd()", "public boolean hasPackedDocToOrd()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.DocValues$SortedSource.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["int", "org.apache.lucene.index.DocValues$SortedSource.getOrdByValue(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int getOrdByValue(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.DocValues$SortedSource", "org.apache.lucene.index.DocValues$SortedSource.asSortedSource()", "public org.apache.lucene.index.DocValues$SortedSource asSortedSource()"], ["long", "org.apache.lucene.index.DocValues$Source.getInt(int)", "public long getInt(int)"], ["double", "org.apache.lucene.index.DocValues$Source.getFloat(int)", "public double getFloat(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.DocValues$Source.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.DocValues$Source.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["boolean", "org.apache.lucene.index.DocValues$Source.hasArray()", "public boolean hasArray()"], ["java.lang.Object", "org.apache.lucene.index.DocValues$Source.getArray()", "public java.lang.Object getArray()"], ["org.apache.lucene.index.DocValues$SortedSource", "org.apache.lucene.index.DocValues$Source.asSortedSource()", "public org.apache.lucene.index.DocValues$SortedSource asSortedSource()"], ["org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache", "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache()", "public org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache()"], ["synchronized", "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache.org.apache.lucene.index.DocValues$Source load(org.apache.lucene.index.DocValues)", "public synchronized org.apache.lucene.index.DocValues$Source load(org.apache.lucene.index.DocValues) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache.void invalidate(org.apache.lucene.index.DocValues)", "public synchronized void invalidate(org.apache.lucene.index.DocValues)"], ["synchronized", "org.apache.lucene.index.DocValues$SourceCache.void close(org.apache.lucene.index.DocValues)", "public synchronized void close(org.apache.lucene.index.DocValues)"], ["org.apache.lucene.index.DocValues$Type[]", "org.apache.lucene.index.DocValues$Type.values()", "public static org.apache.lucene.index.DocValues$Type[] values()"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.DocValues$Type.valueOf(java.lang.String)", "public static org.apache.lucene.index.DocValues$Type valueOf(java.lang.String)"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.DocValues.getSource()", "public org.apache.lucene.index.DocValues$Source getSource() throws java.io.IOException"], ["void", "org.apache.lucene.index.DocValues.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.index.DocValues.getValueSize()", "public int getValueSize()"], ["void", "org.apache.lucene.index.DocValues.setCache(org.apache.lucene.index.DocValues$SourceCache)", "public void setCache(org.apache.lucene.index.DocValues$SourceCache)"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.DocValues.getDefaultSource(org.apache.lucene.index.DocValues$Type)", "public static org.apache.lucene.index.DocValues$Source getDefaultSource(org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.index.DocValues$SortedSource", "org.apache.lucene.index.DocValues.getDefaultSortedSource(org.apache.lucene.index.DocValues$Type, int)", "public static org.apache.lucene.index.DocValues$SortedSource getDefaultSortedSource(org.apache.lucene.index.DocValues$Type, int)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.DocsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["int", "org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize()", "public int getBufferedDeleteTermsSize()"], ["int", "org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms()", "public int getNumBufferedDeleteTerms()"], ["boolean", "org.apache.lucene.index.DocumentsWriter.anyDeletions()", "public boolean anyDeletions()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermArrayNode.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermNode.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.DocumentsWriterDeleteQueue.numGlobalTermDeletes()", "public int numGlobalTermDeletes()"], ["int", "org.apache.lucene.index.DocumentsWriterDeleteQueue.getBufferedDeleteTermsSize()", "public int getBufferedDeleteTermsSize()"], ["long", "org.apache.lucene.index.DocumentsWriterDeleteQueue.bytesUsed()", "public long bytesUsed()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterDeleteQueue.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.index.DocumentsWriterFlushControl$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState", "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()", "public org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState next()"], ["void", "org.apache.lucene.index.DocumentsWriterFlushControl$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()", "public java.lang.Object next()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.long activeBytes()", "public synchronized long activeBytes()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.long flushBytes()", "public synchronized long flushBytes()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.long netBytes()", "public synchronized long netBytes()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.void waitForFlush()", "public synchronized void waitForFlush()"], ["synchronized", "org.apache.lucene.index.DocumentsWriterFlushControl.void setFlushPending(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public synchronized void setFlushPending(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterFlushControl.toString()", "public java.lang.String toString()"], ["java.util.Iterator<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState>", "org.apache.lucene.index.DocumentsWriterFlushControl.allActiveThreadStates()", "public java.util.Iterator<org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState> allActiveThreadStates()"], ["int", "org.apache.lucene.index.DocumentsWriterFlushControl.getNumGlobalTermDeletes()", "public int getNumGlobalTermDeletes()"], ["long", "org.apache.lucene.index.DocumentsWriterFlushControl.getDeleteBytesUsed()", "public long getDeleteBytesUsed()"], ["boolean", "org.apache.lucene.index.DocumentsWriterFlushControl.doApplyAllDeletes()", "public boolean doApplyAllDeletes()"], ["void", "org.apache.lucene.index.DocumentsWriterFlushControl.setApplyAllDeletes()", "public void setApplyAllDeletes()"], ["int", "org.apache.lucene.index.DocumentsWriterFlushQueue.getTicketCount()", "public int getTicketCount()"], ["boolean", "org.apache.lucene.index.DocumentsWriterPerThread$DocState.testPoint(java.lang.String)", "public boolean testPoint(java.lang.String)"], ["void", "org.apache.lucene.index.DocumentsWriterPerThread$DocState.clear()", "public void clear()"], ["org.apache.lucene.index.DocumentsWriterPerThread", "org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.store.Directory, org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.FieldInfos$Builder, org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain)", "public org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.store.Directory, org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.FieldInfos$Builder, org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain)"], ["org.apache.lucene.index.DocumentsWriterPerThread", "org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.FieldInfos$Builder)", "public org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.FieldInfos$Builder)"], ["void", "org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)", "public void updateDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocumentsWriterPerThread.updateDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)", "public int updateDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.DocumentsWriterPerThread.numDeleteTerms()", "public int numDeleteTerms()"], ["int", "org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM()", "public int getNumDocsInRAM()"], ["java.lang.String", "org.apache.lucene.index.DocumentsWriterPerThread.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getBytesUsedPerThread()", "public long getBytesUsedPerThread()"], ["org.apache.lucene.index.DocumentsWriterPerThread", "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getDocumentsWriterPerThread()", "public org.apache.lucene.index.DocumentsWriterPerThread getDocumentsWriterPerThread()"], ["boolean", "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.isFlushPending()", "public boolean isFlushPending()"], ["org.apache.lucene.index.DocumentsWriterPerThreadPool", "org.apache.lucene.index.DocumentsWriterPerThreadPool.clone()", "public org.apache.lucene.index.DocumentsWriterPerThreadPool clone()"], ["java.lang.Object", "org.apache.lucene.index.DocumentsWriterPerThreadPool.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.FieldInfo$IndexOptions[]", "org.apache.lucene.index.FieldInfo$IndexOptions.values()", "public static org.apache.lucene.index.FieldInfo$IndexOptions[] values()"], ["org.apache.lucene.index.FieldInfo$IndexOptions", "org.apache.lucene.index.FieldInfo$IndexOptions.valueOf(java.lang.String)", "public static org.apache.lucene.index.FieldInfo$IndexOptions valueOf(java.lang.String)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfo(java.lang.String, boolean, int, boolean, boolean, boolean, org.apache.lucene.index.FieldInfo$IndexOptions, org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.DocValues$Type, java.util.Map<java.lang.String, java.lang.String>)", "public org.apache.lucene.index.FieldInfo(java.lang.String, boolean, int, boolean, boolean, boolean, org.apache.lucene.index.FieldInfo$IndexOptions, org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.DocValues$Type, java.util.Map<java.lang.String, java.lang.String>)"], ["org.apache.lucene.index.FieldInfo$IndexOptions", "org.apache.lucene.index.FieldInfo.getIndexOptions()", "public org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasDocValues()", "public boolean hasDocValues()"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.FieldInfo.getDocValuesType()", "public org.apache.lucene.index.DocValues$Type getDocValuesType()"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.FieldInfo.getNormType()", "public org.apache.lucene.index.DocValues$Type getNormType()"], ["boolean", "org.apache.lucene.index.FieldInfo.omitsNorms()", "public boolean omitsNorms()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasNorms()", "public boolean hasNorms()"], ["boolean", "org.apache.lucene.index.FieldInfo.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasPayloads()", "public boolean hasPayloads()"], ["boolean", "org.apache.lucene.index.FieldInfo.hasVectors()", "public boolean hasVectors()"], ["java.lang.String", "org.apache.lucene.index.FieldInfo.getAttribute(java.lang.String)", "public java.lang.String getAttribute(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.FieldInfo.putAttribute(java.lang.String, java.lang.String)", "public java.lang.String putAttribute(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.FieldInfo.attributes()", "public java.util.Map<java.lang.String, java.lang.String> attributes()"], ["void", "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfos)", "public void add(org.apache.lucene.index.FieldInfos)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos$Builder.addOrUpdate(java.lang.String, org.apache.lucene.index.IndexableFieldType)", "public org.apache.lucene.index.FieldInfo addOrUpdate(java.lang.String, org.apache.lucene.index.IndexableFieldType)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.FieldInfo add(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos$Builder.fieldInfo(java.lang.String)", "public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.FieldInfos(org.apache.lucene.index.FieldInfo[])", "public org.apache.lucene.index.FieldInfos(org.apache.lucene.index.FieldInfo[])"], ["boolean", "org.apache.lucene.index.FieldInfos.hasFreq()", "public boolean hasFreq()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasProx()", "public boolean hasProx()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasPayloads()", "public boolean hasPayloads()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasVectors()", "public boolean hasVectors()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasNorms()", "public boolean hasNorms()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasDocValues()", "public boolean hasDocValues()"], ["int", "org.apache.lucene.index.FieldInfos.size()", "public int size()"], ["java.util.Iterator<org.apache.lucene.index.FieldInfo>", "org.apache.lucene.index.FieldInfos.iterator()", "public java.util.Iterator<org.apache.lucene.index.FieldInfo> iterator()"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos.fieldInfo(java.lang.String)", "public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos.fieldInfo(int)", "public org.apache.lucene.index.FieldInfo fieldInfo(int)"], ["org.apache.lucene.index.FieldInvertState", "org.apache.lucene.index.FieldInvertState(java.lang.String)", "public org.apache.lucene.index.FieldInvertState(java.lang.String)"], ["org.apache.lucene.index.FieldInvertState", "org.apache.lucene.index.FieldInvertState(java.lang.String, int, int, int, int, float)", "public org.apache.lucene.index.FieldInvertState(java.lang.String, int, int, int, int, float)"], ["int", "org.apache.lucene.index.FieldInvertState.getPosition()", "public int getPosition()"], ["int", "org.apache.lucene.index.FieldInvertState.getLength()", "public int getLength()"], ["void", "org.apache.lucene.index.FieldInvertState.setLength(int)", "public void setLength(int)"], ["int", "org.apache.lucene.index.FieldInvertState.getNumOverlap()", "public int getNumOverlap()"], ["void", "org.apache.lucene.index.FieldInvertState.setNumOverlap(int)", "public void setNumOverlap(int)"], ["int", "org.apache.lucene.index.FieldInvertState.getOffset()", "public int getOffset()"], ["float", "org.apache.lucene.index.FieldInvertState.getBoost()", "public float getBoost()"], ["void", "org.apache.lucene.index.FieldInvertState.setBoost(float)", "public void setBoost(float)"], ["int", "org.apache.lucene.index.FieldInvertState.getMaxTermFrequency()", "public int getMaxTermFrequency()"], ["int", "org.apache.lucene.index.FieldInvertState.getUniqueTermCount()", "public int getUniqueTermCount()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FieldInvertState.getAttributeSource()", "public org.apache.lucene.util.AttributeSource getAttributeSource()"], ["java.lang.String", "org.apache.lucene.index.FieldInvertState.getName()", "public java.lang.String getName()"], ["long", "org.apache.lucene.index.Fields.getUniqueTermCount()", "public long getUniqueTermCount() throws java.io.IOException"], ["org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum(org.apache.lucene.index.DocsAndPositionsEnum)", "public org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum(org.apache.lucene.index.DocsAndPositionsEnum)"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum(org.apache.lucene.index.DocsEnum)", "public org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum(org.apache.lucene.index.DocsEnum)"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.FilterAtomicReader$FilterFields", "org.apache.lucene.index.FilterAtomicReader$FilterFields(org.apache.lucene.index.Fields)", "public org.apache.lucene.index.FilterAtomicReader$FilterFields(org.apache.lucene.index.Fields)"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.FilterAtomicReader$FilterFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.FilterAtomicReader$FilterFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterFields.size()", "public int size()"], ["long", "org.apache.lucene.index.FilterAtomicReader$FilterFields.getUniqueTermCount()", "public long getUniqueTermCount() throws java.io.IOException"], ["org.apache.lucene.index.FilterAtomicReader$FilterTerms", "org.apache.lucene.index.FilterAtomicReader$FilterTerms(org.apache.lucene.index.Terms)", "public org.apache.lucene.index.FilterAtomicReader$FilterTerms(org.apache.lucene.index.Terms)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.iterator(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.size()", "public long size() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.index.FilterAtomicReader$FilterTerms.hasPayloads()", "public boolean hasPayloads()"], ["org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum(org.apache.lucene.index.TermsEnum)"], ["boolean", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["void", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.FilterAtomicReader", "org.apache.lucene.index.FilterAtomicReader(org.apache.lucene.index.AtomicReader)", "public org.apache.lucene.index.FilterAtomicReader(org.apache.lucene.index.AtomicReader)"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.FilterAtomicReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.FilterAtomicReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.FilterAtomicReader.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterAtomicReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.FilterAtomicReader.maxDoc()", "public int maxDoc()"], ["void", "org.apache.lucene.index.FilterAtomicReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterAtomicReader.hasDeletions()", "public boolean hasDeletions()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.FilterAtomicReader.fields()", "public org.apache.lucene.index.Fields fields() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.FilterAtomicReader.getCoreCacheKey()", "public java.lang.Object getCoreCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.FilterAtomicReader.getCombinedCoreAndDeletesKey()", "public java.lang.Object getCombinedCoreAndDeletesKey()"], ["java.lang.String", "org.apache.lucene.index.FilterAtomicReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.FilterAtomicReader.docValues(java.lang.String)", "public org.apache.lucene.index.DocValues docValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.FilterAtomicReader.normValues(java.lang.String)", "public org.apache.lucene.index.DocValues normValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.FilteredTermsEnum$AcceptStatus[]", "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.values()", "public static org.apache.lucene.index.FilteredTermsEnum$AcceptStatus[] values()"], ["org.apache.lucene.index.FilteredTermsEnum$AcceptStatus", "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.valueOf(java.lang.String)", "public static org.apache.lucene.index.FilteredTermsEnum$AcceptStatus valueOf(java.lang.String)"], ["org.apache.lucene.index.FilteredTermsEnum", "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum)"], ["org.apache.lucene.index.FilteredTermsEnum", "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum, boolean)", "public org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum, boolean)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FilteredTermsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilteredTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.FilteredTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["int", "org.apache.lucene.index.FilteredTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.FilteredTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.FilteredTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilteredTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["long", "org.apache.lucene.index.FilteredTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.FilteredTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.FilteredTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.FilteredTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.FilteredTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["void", "org.apache.lucene.index.FlushByRamOrCountsPolicy.onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public void onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["void", "org.apache.lucene.index.FlushByRamOrCountsPolicy.onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public void onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["void", "org.apache.lucene.index.FlushPolicy.onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)", "public void onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"], ["org.apache.lucene.index.FlushPolicy", "org.apache.lucene.index.FlushPolicy.clone()", "public org.apache.lucene.index.FlushPolicy clone()"], ["java.lang.Object", "org.apache.lucene.index.FlushPolicy.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.index.FreqProxTermsWriter.flush(java.util.Map<java.lang.String, org.apache.lucene.index.TermsHashConsumerPerField>, org.apache.lucene.index.SegmentWriteState)", "public void flush(java.util.Map<java.lang.String, org.apache.lucene.index.TermsHashConsumerPerField>, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.index.TermsHashConsumerPerField", "org.apache.lucene.index.FreqProxTermsWriter.addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray", "org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray(int, boolean, boolean, boolean)", "public org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray(int, boolean, boolean, boolean)"], ["org.apache.lucene.index.FreqProxTermsWriterPerField", "org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FreqProxTermsWriter, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FreqProxTermsWriter, org.apache.lucene.index.FieldInfo)"], ["int", "org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(org.apache.lucene.index.FreqProxTermsWriterPerField)", "public int compareTo(org.apache.lucene.index.FreqProxTermsWriterPerField)"], ["void", "org.apache.lucene.index.FreqProxTermsWriterPerField.abort()", "public void abort()"], ["int", "org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["java.util.Iterator<org.apache.lucene.index.Term>", "org.apache.lucene.index.FrozenBufferedDeletes$1.iterator()", "public java.util.Iterator<org.apache.lucene.index.Term> iterator()"], ["boolean", "org.apache.lucene.index.FrozenBufferedDeletes$2$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit", "org.apache.lucene.index.FrozenBufferedDeletes$2$1.next()", "public org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit next()"], ["void", "org.apache.lucene.index.FrozenBufferedDeletes$2$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.index.FrozenBufferedDeletes$2$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit>", "org.apache.lucene.index.FrozenBufferedDeletes$2.iterator()", "public java.util.Iterator<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit> iterator()"], ["org.apache.lucene.index.FrozenBufferedDeletes", "org.apache.lucene.index.FrozenBufferedDeletes(org.apache.lucene.index.BufferedDeletes, boolean)", "public org.apache.lucene.index.FrozenBufferedDeletes(org.apache.lucene.index.BufferedDeletes, boolean)"], ["void", "org.apache.lucene.index.FrozenBufferedDeletes.setDelGen(long)", "public void setDelGen(long)"], ["long", "org.apache.lucene.index.FrozenBufferedDeletes.delGen()", "public long delGen()"], ["java.lang.Iterable<org.apache.lucene.index.Term>", "org.apache.lucene.index.FrozenBufferedDeletes.termsIterable()", "public java.lang.Iterable<org.apache.lucene.index.Term> termsIterable()"], ["java.lang.Iterable<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit>", "org.apache.lucene.index.FrozenBufferedDeletes.queriesIterable()", "public java.lang.Iterable<org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit> queriesIterable()"], ["java.lang.String", "org.apache.lucene.index.FrozenBufferedDeletes.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.index.IndexCommit.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.IndexCommit.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.index.IndexCommit.compareTo(org.apache.lucene.index.IndexCommit)", "public int compareTo(org.apache.lucene.index.IndexCommit)"], ["int", "org.apache.lucene.index.IndexCommit.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.IndexFileDeleter$CommitPoint", "org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentCount()", "public int getSegmentCount()"], ["java.lang.String", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["long", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getGeneration()", "public long getGeneration()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.delete()", "public void delete()"], ["boolean", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.isDeleted()", "public boolean isDeleted()"], ["int", "org.apache.lucene.index.IndexFileDeleter$RefCount.IncRef()", "public int IncRef()"], ["int", "org.apache.lucene.index.IndexFileDeleter$RefCount.DecRef()", "public int DecRef()"], ["org.apache.lucene.index.IndexFileDeleter", "org.apache.lucene.index.IndexFileDeleter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, org.apache.lucene.util.InfoStream, org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.IndexFileDeleter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, org.apache.lucene.util.InfoStream, org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()", "public org.apache.lucene.index.SegmentInfos getLastSegmentInfos()"], ["void", "org.apache.lucene.index.IndexFileDeleter.refresh(java.lang.String)", "public void refresh(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.refresh()", "public void refresh() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.deletePendingFiles()", "public void deletePendingFiles() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.checkpoint(org.apache.lucene.index.SegmentInfos, boolean)", "public void checkpoint(org.apache.lucene.index.SegmentInfos, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexFileDeleter.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.fileNameFromGeneration(java.lang.String, java.lang.String, long)", "public static java.lang.String fileNameFromGeneration(java.lang.String, java.lang.String, long)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.segmentFileName(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String segmentFileName(java.lang.String, java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.index.IndexFileNames.matchesExtension(java.lang.String, java.lang.String)", "public static boolean matchesExtension(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.stripSegmentName(java.lang.String)", "public static java.lang.String stripSegmentName(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.parseSegmentName(java.lang.String)", "public static java.lang.String parseSegmentName(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.IndexFileNames.stripExtension(java.lang.String)", "public static java.lang.String stripExtension(java.lang.String)"], ["org.apache.lucene.index.IndexFormatTooNewException", "org.apache.lucene.index.IndexFormatTooNewException(java.lang.String, int, int, int)", "public org.apache.lucene.index.IndexFormatTooNewException(java.lang.String, int, int, int)"], ["org.apache.lucene.index.IndexFormatTooNewException", "org.apache.lucene.index.IndexFormatTooNewException(org.apache.lucene.store.DataInput, int, int, int)", "public org.apache.lucene.index.IndexFormatTooNewException(org.apache.lucene.store.DataInput, int, int, int)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, java.lang.String)", "public org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, java.lang.String)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, java.lang.String)", "public org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, java.lang.String)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, int, int, int)", "public org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, int, int, int)"], ["org.apache.lucene.index.IndexFormatTooOldException", "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, int, int, int)", "public org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, int, int, int)"], ["org.apache.lucene.index.IndexNotFoundException", "org.apache.lucene.index.IndexNotFoundException(java.lang.String)", "public org.apache.lucene.index.IndexNotFoundException(java.lang.String)"], ["void", "org.apache.lucene.index.IndexReader.addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)", "public final void addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)"], ["void", "org.apache.lucene.index.IndexReader.removeReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)", "public final void removeReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)"], ["void", "org.apache.lucene.index.IndexReader.registerParentReader(org.apache.lucene.index.IndexReader)", "public final void registerParentReader(org.apache.lucene.index.IndexReader)"], ["int", "org.apache.lucene.index.IndexReader.getRefCount()", "public final int getRefCount()"], ["void", "org.apache.lucene.index.IndexReader.incRef()", "public final void incRef()"], ["boolean", "org.apache.lucene.index.IndexReader.tryIncRef()", "public final boolean tryIncRef()"], ["void", "org.apache.lucene.index.IndexReader.decRef()", "public final void decRef() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexReader.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.IndexReader.hashCode()", "public final int hashCode()"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory, int)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory, int) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexWriter, boolean)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit, int)", "public static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexCommit, int) throws java.io.IOException"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.IndexReader.getTermVector(int, java.lang.String)", "public final org.apache.lucene.index.Terms getTermVector(int, java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.IndexReader.numDeletedDocs()", "public final int numDeletedDocs()"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.IndexReader.document(int)", "public final org.apache.lucene.document.Document document(int) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.IndexReader.document(int, java.util.Set<java.lang.String>)", "public final org.apache.lucene.document.Document document(int, java.util.Set<java.lang.String>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void close()", "public final synchronized void close() throws java.io.IOException"], ["java.util.List<org.apache.lucene.index.AtomicReaderContext>", "org.apache.lucene.index.IndexReader.leaves()", "public final java.util.List<org.apache.lucene.index.AtomicReaderContext> leaves()"], ["java.lang.Object", "org.apache.lucene.index.IndexReader.getCoreCacheKey()", "public java.lang.Object getCoreCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.IndexReader.getCombinedCoreAndDeletesKey()", "public java.lang.Object getCombinedCoreAndDeletesKey()"], ["void", "org.apache.lucene.index.IndexUpgrader.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException"], ["org.apache.lucene.index.IndexUpgrader", "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.Version)", "public org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.Version)"], ["org.apache.lucene.index.IndexUpgrader", "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.Version, java.io.PrintStream, boolean)", "public org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.Version, java.io.PrintStream, boolean)"], ["org.apache.lucene.index.IndexUpgrader", "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig, boolean)", "public org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig, boolean)"], ["void", "org.apache.lucene.index.IndexUpgrader.upgrade()", "public void upgrade() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)", "public synchronized boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void drop(org.apache.lucene.index.SegmentInfoPerCommit)", "public synchronized void drop(org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.ReadersAndLiveDocs)", "public synchronized void release(org.apache.lucene.index.ReadersAndLiveDocs) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void commit(org.apache.lucene.index.SegmentInfos)", "public synchronized void commit(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit, boolean)", "public synchronized org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit, boolean)"], ["int", "org.apache.lucene.index.IndexWriter.numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)", "public int numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig) throws java.io.IOException"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriter.getConfig()", "public org.apache.lucene.index.LiveIndexWriterConfig getConfig()"], ["void", "org.apache.lucene.index.IndexWriter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.close(boolean)", "public void close(boolean) throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexWriter.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.IndexWriter.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int maxDoc()", "public synchronized int maxDoc()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int numDocs()", "public synchronized int numDocs()"], ["synchronized", "org.apache.lucene.index.IndexWriter.boolean hasDeletions()", "public synchronized boolean hasDeletions()"], ["void", "org.apache.lucene.index.IndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)", "public void addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)", "public void addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)", "public void addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)", "public void addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)", "public void updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)", "public void updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term)", "public void deleteDocuments(org.apache.lucene.index.Term) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.boolean tryDeleteDocument(org.apache.lucene.index.IndexReader, int)", "public synchronized boolean tryDeleteDocument(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term...)", "public void deleteDocuments(org.apache.lucene.index.Term...) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query)", "public void deleteDocuments(org.apache.lucene.search.Query) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query...)", "public void deleteDocuments(org.apache.lucene.search.Query...) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)", "public void updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)", "public void updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMerge(int)", "public void forceMerge(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMerge(int, boolean)", "public void forceMerge(int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean)", "public void forceMergeDeletes(boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.forceMergeDeletes()", "public void forceMergeDeletes() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.maybeMerge()", "public final void maybeMerge() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.index.SegmentInfoPerCommit>", "org.apache.lucene.index.IndexWriter.getMergingSegments()", "public synchronized java.util.Collection<org.apache.lucene.index.SegmentInfoPerCommit> getMergingSegments()"], ["synchronized", "org.apache.lucene.index.IndexWriter.org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()", "public synchronized org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()"], ["void", "org.apache.lucene.index.IndexWriter.rollback()", "public void rollback() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void deleteAll()", "public synchronized void deleteAll() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void waitForMerges()", "public synchronized void waitForMerges()"], ["void", "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.store.Directory...)", "public void addIndexes(org.apache.lucene.store.Directory...) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.index.IndexReader...)", "public void addIndexes(org.apache.lucene.index.IndexReader...) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.prepareCommit()", "public final void prepareCommit() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.prepareCommit(java.util.Map<java.lang.String, java.lang.String>)", "public final void prepareCommit(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.commit()", "public final void commit() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.commit(java.util.Map<java.lang.String, java.lang.String>)", "public final void commit(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.ramSizeInBytes()", "public final long ramSizeInBytes()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int numRamDocs()", "public final synchronized int numRamDocs()"], ["void", "org.apache.lucene.index.IndexWriter.merge(org.apache.lucene.index.MergePolicy$OneMerge)", "public void merge(org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.java.lang.String segString()", "public synchronized java.lang.String segString()"], ["synchronized", "org.apache.lucene.index.IndexWriter.java.lang.String segString(java.lang.Iterable<org.apache.lucene.index.SegmentInfoPerCommit>)", "public synchronized java.lang.String segString(java.lang.Iterable<org.apache.lucene.index.SegmentInfoPerCommit>)"], ["synchronized", "org.apache.lucene.index.IndexWriter.java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)", "public synchronized java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)"], ["boolean", "org.apache.lucene.index.IndexWriter.isLocked(org.apache.lucene.store.Directory)", "public static boolean isLocked(org.apache.lucene.store.Directory) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.unlock(org.apache.lucene.store.Directory)", "public static void unlock(org.apache.lucene.store.Directory) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void deleteUnusedFiles()", "public synchronized void deleteUnusedFiles() throws java.io.IOException"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode[]", "org.apache.lucene.index.IndexWriterConfig$OpenMode.values()", "public static org.apache.lucene.index.IndexWriterConfig$OpenMode[] values()"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode", "org.apache.lucene.index.IndexWriterConfig$OpenMode.valueOf(java.lang.String)", "public static org.apache.lucene.index.IndexWriterConfig$OpenMode valueOf(java.lang.String)"], ["void", "org.apache.lucene.index.IndexWriterConfig.setDefaultWriteLockTimeout(long)", "public static void setDefaultWriteLockTimeout(long)"], ["long", "org.apache.lucene.index.IndexWriterConfig.getDefaultWriteLockTimeout()", "public static long getDefaultWriteLockTimeout()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.index.IndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.clone()", "public org.apache.lucene.index.IndexWriterConfig clone()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)", "public org.apache.lucene.index.IndexWriterConfig setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode", "org.apache.lucene.index.IndexWriterConfig.getOpenMode()", "public org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)", "public org.apache.lucene.index.IndexWriterConfig setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"], ["org.apache.lucene.index.IndexDeletionPolicy", "org.apache.lucene.index.IndexWriterConfig.getIndexDeletionPolicy()", "public org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setIndexCommit(org.apache.lucene.index.IndexCommit)", "public org.apache.lucene.index.IndexWriterConfig setIndexCommit(org.apache.lucene.index.IndexCommit)"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.IndexWriterConfig.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setSimilarity(org.apache.lucene.search.similarities.Similarity)", "public org.apache.lucene.index.IndexWriterConfig setSimilarity(org.apache.lucene.search.similarities.Similarity)"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.index.IndexWriterConfig.getSimilarity()", "public org.apache.lucene.search.similarities.Similarity getSimilarity()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(org.apache.lucene.index.MergeScheduler)", "public org.apache.lucene.index.IndexWriterConfig setMergeScheduler(org.apache.lucene.index.MergeScheduler)"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.IndexWriterConfig.getMergeScheduler()", "public org.apache.lucene.index.MergeScheduler getMergeScheduler()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setWriteLockTimeout(long)", "public org.apache.lucene.index.IndexWriterConfig setWriteLockTimeout(long)"], ["long", "org.apache.lucene.index.IndexWriterConfig.getWriteLockTimeout()", "public long getWriteLockTimeout()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.IndexWriterConfig setMergePolicy(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setCodec(org.apache.lucene.codecs.Codec)", "public org.apache.lucene.index.IndexWriterConfig setCodec(org.apache.lucene.codecs.Codec)"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.index.IndexWriterConfig.getCodec()", "public org.apache.lucene.codecs.Codec getCodec()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.IndexWriterConfig.getMergePolicy()", "public org.apache.lucene.index.MergePolicy getMergePolicy()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxThreadStates(int)", "public org.apache.lucene.index.IndexWriterConfig setMaxThreadStates(int)"], ["int", "org.apache.lucene.index.IndexWriterConfig.getMaxThreadStates()", "public int getMaxThreadStates()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean)", "public org.apache.lucene.index.IndexWriterConfig setReaderPooling(boolean)"], ["boolean", "org.apache.lucene.index.IndexWriterConfig.getReaderPooling()", "public boolean getReaderPooling()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setRAMPerThreadHardLimitMB(int)", "public org.apache.lucene.index.IndexWriterConfig setRAMPerThreadHardLimitMB(int)"], ["int", "org.apache.lucene.index.IndexWriterConfig.getRAMPerThreadHardLimitMB()", "public int getRAMPerThreadHardLimitMB()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.index.IndexWriterConfig.getInfoStream()", "public org.apache.lucene.util.InfoStream getInfoStream()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.IndexWriterConfig.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["int", "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDeleteTerms()", "public int getMaxBufferedDeleteTerms()"], ["int", "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs()", "public int getMaxBufferedDocs()"], ["org.apache.lucene.index.IndexWriter$IndexReaderWarmer", "org.apache.lucene.index.IndexWriterConfig.getMergedSegmentWarmer()", "public org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()"], ["double", "org.apache.lucene.index.IndexWriterConfig.getRAMBufferSizeMB()", "public double getRAMBufferSizeMB()"], ["int", "org.apache.lucene.index.IndexWriterConfig.getReaderTermsIndexDivisor()", "public int getReaderTermsIndexDivisor()"], ["int", "org.apache.lucene.index.IndexWriterConfig.getTermIndexInterval()", "public int getTermIndexInterval()"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setInfoStream(org.apache.lucene.util.InfoStream)", "public org.apache.lucene.index.IndexWriterConfig setInfoStream(org.apache.lucene.util.InfoStream)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setInfoStream(java.io.PrintStream)", "public org.apache.lucene.index.IndexWriterConfig setInfoStream(java.io.PrintStream)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)", "public org.apache.lucene.index.IndexWriterConfig setMaxBufferedDeleteTerms(int)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)", "public org.apache.lucene.index.IndexWriterConfig setMaxBufferedDocs(int)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public org.apache.lucene.index.IndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)", "public org.apache.lucene.index.IndexWriterConfig setRAMBufferSizeMB(double)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setReaderTermsIndexDivisor(int)", "public org.apache.lucene.index.IndexWriterConfig setReaderTermsIndexDivisor(int)"], ["org.apache.lucene.index.IndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setTermIndexInterval(int)", "public org.apache.lucene.index.IndexWriterConfig setTermIndexInterval(int)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setReaderTermsIndexDivisor(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setReaderTermsIndexDivisor(int)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public org.apache.lucene.index.LiveIndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)", "public org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDeleteTerms(int)"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.IndexWriterConfig.setTermIndexInterval(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setTermIndexInterval(int)"], ["java.lang.Object", "org.apache.lucene.index.IndexWriterConfig.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.IntBlockPool", "org.apache.lucene.index.IntBlockPool(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.IntBlockPool(org.apache.lucene.index.DocumentsWriterPerThread)"], ["void", "org.apache.lucene.index.IntBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.index.IntBlockPool.nextBuffer()", "public void nextBuffer()"], ["org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()", "public org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()"], ["void", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["void", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.LiveIndexWriterConfig.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setTermIndexInterval(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setTermIndexInterval(int)"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getTermIndexInterval()", "public int getTermIndexInterval()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setMaxBufferedDeleteTerms(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDeleteTerms(int)"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDeleteTerms()", "public int getMaxBufferedDeleteTerms()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setRAMBufferSizeMB(double)", "public org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)"], ["double", "org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB()", "public double getRAMBufferSizeMB()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setMaxBufferedDocs(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDocs()", "public int getMaxBufferedDocs()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public org.apache.lucene.index.LiveIndexWriterConfig setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.IndexWriter$IndexReaderWarmer", "org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer()", "public org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()"], ["org.apache.lucene.index.LiveIndexWriterConfig", "org.apache.lucene.index.LiveIndexWriterConfig.setReaderTermsIndexDivisor(int)", "public org.apache.lucene.index.LiveIndexWriterConfig setReaderTermsIndexDivisor(int)"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getReaderTermsIndexDivisor()", "public int getReaderTermsIndexDivisor()"], ["org.apache.lucene.index.IndexWriterConfig$OpenMode", "org.apache.lucene.index.LiveIndexWriterConfig.getOpenMode()", "public org.apache.lucene.index.IndexWriterConfig$OpenMode getOpenMode()"], ["org.apache.lucene.index.IndexDeletionPolicy", "org.apache.lucene.index.LiveIndexWriterConfig.getIndexDeletionPolicy()", "public org.apache.lucene.index.IndexDeletionPolicy getIndexDeletionPolicy()"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.LiveIndexWriterConfig.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit()"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.index.LiveIndexWriterConfig.getSimilarity()", "public org.apache.lucene.search.similarities.Similarity getSimilarity()"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.LiveIndexWriterConfig.getMergeScheduler()", "public org.apache.lucene.index.MergeScheduler getMergeScheduler()"], ["long", "org.apache.lucene.index.LiveIndexWriterConfig.getWriteLockTimeout()", "public long getWriteLockTimeout()"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.index.LiveIndexWriterConfig.getCodec()", "public org.apache.lucene.codecs.Codec getCodec()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy()", "public org.apache.lucene.index.MergePolicy getMergePolicy()"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getMaxThreadStates()", "public int getMaxThreadStates()"], ["boolean", "org.apache.lucene.index.LiveIndexWriterConfig.getReaderPooling()", "public boolean getReaderPooling()"], ["int", "org.apache.lucene.index.LiveIndexWriterConfig.getRAMPerThreadHardLimitMB()", "public int getRAMPerThreadHardLimitMB()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.index.LiveIndexWriterConfig.getInfoStream()", "public org.apache.lucene.util.InfoStream getInfoStream()"], ["java.lang.String", "org.apache.lucene.index.LiveIndexWriterConfig.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.LogByteSizeMergePolicy", "org.apache.lucene.index.LogByteSizeMergePolicy()", "public org.apache.lucene.index.LogByteSizeMergePolicy()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)", "public void setMaxMergeMB(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()", "public double getMaxMergeMB()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(double)", "public void setMaxMergeMBForForcedMerge(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForForcedMerge()", "public double getMaxMergeMBForForcedMerge()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)", "public void setMinMergeMB(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()", "public double getMinMergeMB()"], ["org.apache.lucene.index.LogDocMergePolicy", "org.apache.lucene.index.LogDocMergePolicy()", "public org.apache.lucene.index.LogDocMergePolicy()"], ["void", "org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)", "public void setMinMergeDocs(int)"], ["int", "org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()", "public int getMinMergeDocs()"], ["org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel", "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel(org.apache.lucene.index.SegmentInfoPerCommit, float, int)", "public org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel(org.apache.lucene.index.SegmentInfoPerCommit, float, int)"], ["int", "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel)", "public int compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel)"], ["int", "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.LogMergePolicy", "org.apache.lucene.index.LogMergePolicy()", "public org.apache.lucene.index.LogMergePolicy()"], ["double", "org.apache.lucene.index.LogMergePolicy.getNoCFSRatio()", "public double getNoCFSRatio()"], ["void", "org.apache.lucene.index.LogMergePolicy.setNoCFSRatio(double)", "public void setNoCFSRatio(double)"], ["int", "org.apache.lucene.index.LogMergePolicy.getMergeFactor()", "public int getMergeFactor()"], ["void", "org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)", "public void setMergeFactor(int)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException"], ["void", "org.apache.lucene.index.LogMergePolicy.setUseCompoundFile(boolean)", "public void setUseCompoundFile(boolean)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["void", "org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)", "public void setCalibrateSizeByDeletes(boolean)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()", "public boolean getCalibrateSizeByDeletes()"], ["void", "org.apache.lucene.index.LogMergePolicy.close()", "public void close()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["void", "org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)", "public void setMaxMergeDocs(int)"], ["int", "org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()", "public int getMaxMergeDocs()"], ["java.lang.String", "org.apache.lucene.index.LogMergePolicy.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.index.LogMergePolicy.getMaxCFSSegmentSizeMB()", "public final double getMaxCFSSegmentSizeMB()"], ["void", "org.apache.lucene.index.LogMergePolicy.setMaxCFSSegmentSizeMB(double)", "public final void setMaxCFSSegmentSizeMB(double)"], ["org.apache.lucene.index.MergePolicy$MergeAbortedException", "org.apache.lucene.index.MergePolicy$MergeAbortedException()", "public org.apache.lucene.index.MergePolicy$MergeAbortedException()"], ["org.apache.lucene.index.MergePolicy$MergeAbortedException", "org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)", "public org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)"], ["org.apache.lucene.index.MergePolicy$MergeException", "org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergePolicy$MergeException", "org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.MergePolicy$MergeException.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.MergePolicy$MergeSpecification()", "public org.apache.lucene.index.MergePolicy$MergeSpecification()"], ["void", "org.apache.lucene.index.MergePolicy$MergeSpecification.add(org.apache.lucene.index.MergePolicy$OneMerge)", "public void add(org.apache.lucene.index.MergePolicy$OneMerge)"], ["java.lang.String", "org.apache.lucene.index.MergePolicy$MergeSpecification.segString(org.apache.lucene.store.Directory)", "public java.lang.String segString(org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergePolicy$OneMerge", "org.apache.lucene.index.MergePolicy$OneMerge(java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>)", "public org.apache.lucene.index.MergePolicy$OneMerge(java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>)"], ["synchronized", "org.apache.lucene.index.MergePolicy$OneMerge.void checkAborted(org.apache.lucene.store.Directory)", "public synchronized void checkAborted(org.apache.lucene.store.Directory) throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["synchronized", "org.apache.lucene.index.MergePolicy$OneMerge.void setPause(boolean)", "public synchronized void setPause(boolean)"], ["synchronized", "org.apache.lucene.index.MergePolicy$OneMerge.boolean getPause()", "public synchronized boolean getPause()"], ["java.lang.String", "org.apache.lucene.index.MergePolicy$OneMerge.segString(org.apache.lucene.store.Directory)", "public java.lang.String segString(org.apache.lucene.store.Directory)"], ["long", "org.apache.lucene.index.MergePolicy$OneMerge.totalBytesSize()", "public long totalBytesSize() throws java.io.IOException"], ["int", "org.apache.lucene.index.MergePolicy$OneMerge.totalNumDocs()", "public int totalNumDocs() throws java.io.IOException"], ["org.apache.lucene.store.MergeInfo", "org.apache.lucene.index.MergePolicy$OneMerge.getMergeInfo()", "public org.apache.lucene.store.MergeInfo getMergeInfo()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.MergePolicy.clone()", "public org.apache.lucene.index.MergePolicy clone()"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.MergePolicy()", "public org.apache.lucene.index.MergePolicy()"], ["void", "org.apache.lucene.index.MergePolicy.setIndexWriter(org.apache.lucene.index.IndexWriter)", "public void setIndexWriter(org.apache.lucene.index.IndexWriter)"], ["java.lang.Object", "org.apache.lucene.index.MergePolicy.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.index.MergeState$CheckAbort$1.work(double)", "public void work(double)"], ["org.apache.lucene.index.MergeState$CheckAbort", "org.apache.lucene.index.MergeState$CheckAbort(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergeState$CheckAbort(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.index.MergeState$CheckAbort.work(double)", "public void work(double) throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["int", "org.apache.lucene.index.MergeState$DelCountDocMap.remap(int)", "public int remap(int)"], ["int", "org.apache.lucene.index.MergeState$DelCountDocMap.maxDoc()", "public int maxDoc()"], ["int", "org.apache.lucene.index.MergeState$DelCountDocMap.numDeletedDocs()", "public int numDeletedDocs()"], ["int", "org.apache.lucene.index.MergeState$DirectDocMap.remap(int)", "public int remap(int)"], ["int", "org.apache.lucene.index.MergeState$DirectDocMap.maxDoc()", "public int maxDoc()"], ["int", "org.apache.lucene.index.MergeState$DirectDocMap.numDeletedDocs()", "public int numDeletedDocs()"], ["org.apache.lucene.index.MergeState$DocMap", "org.apache.lucene.index.MergeState$DocMap.build(org.apache.lucene.index.AtomicReader)", "public static org.apache.lucene.index.MergeState$DocMap build(org.apache.lucene.index.AtomicReader)"], ["int", "org.apache.lucene.index.MergeState$DocMap.get(int)", "public int get(int)"], ["int", "org.apache.lucene.index.MergeState$DocMap.numDocs()", "public final int numDocs()"], ["boolean", "org.apache.lucene.index.MergeState$DocMap.hasDeletions()", "public boolean hasDeletions()"], ["int", "org.apache.lucene.index.MergeState$NoDelDocMap.remap(int)", "public int remap(int)"], ["int", "org.apache.lucene.index.MergeState$NoDelDocMap.maxDoc()", "public int maxDoc()"], ["int", "org.apache.lucene.index.MergeState$NoDelDocMap.numDeletedDocs()", "public int numDeletedDocs()"], ["org.apache.lucene.index.MergedIterator", "org.apache.lucene.index.MergedIterator(java.util.Iterator<T>...)", "public org.apache.lucene.index.MergedIterator(java.util.Iterator<T>...)"], ["boolean", "org.apache.lucene.index.MergedIterator.hasNext()", "public boolean hasNext()"], ["T", "org.apache.lucene.index.MergedIterator.next()", "public T next()"], ["void", "org.apache.lucene.index.MergedIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.index.MergedIterator.next()", "public java.lang.Object next()"], ["org.apache.lucene.index.MultiBits$SubResult", "org.apache.lucene.index.MultiBits$SubResult()", "public org.apache.lucene.index.MultiBits$SubResult()"], ["org.apache.lucene.index.MultiBits", "org.apache.lucene.index.MultiBits(org.apache.lucene.util.Bits[], int[], boolean)", "public org.apache.lucene.index.MultiBits(org.apache.lucene.util.Bits[], int[], boolean)"], ["boolean", "org.apache.lucene.index.MultiBits.get(int)", "public boolean get(int)"], ["java.lang.String", "org.apache.lucene.index.MultiBits.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MultiBits$SubResult", "org.apache.lucene.index.MultiBits.getMatchingSub(org.apache.lucene.index.ReaderSlice)", "public org.apache.lucene.index.MultiBits$SubResult getMatchingSub(org.apache.lucene.index.ReaderSlice)"], ["int", "org.apache.lucene.index.MultiBits.length()", "public int length()"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.MultiDocValues$1.pull(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.index.DocValues pull(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$1.stopLoadingOnNull(org.apache.lucene.index.AtomicReader, java.lang.String)", "public boolean stopLoadingOnNull(org.apache.lucene.index.AtomicReader, java.lang.String)"], ["org.apache.lucene.index.MultiDocValues$DocValuesPuller", "org.apache.lucene.index.MultiDocValues$DocValuesPuller()", "public org.apache.lucene.index.MultiDocValues$DocValuesPuller()"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.MultiDocValues$DocValuesPuller.pull(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.index.DocValues pull(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiDocValues$DocValuesPuller.stopLoadingOnNull(org.apache.lucene.index.AtomicReader, java.lang.String)", "public boolean stopLoadingOnNull(org.apache.lucene.index.AtomicReader, java.lang.String)"], ["org.apache.lucene.index.MultiDocValues$DocValuesSlice", "org.apache.lucene.index.MultiDocValues$DocValuesSlice(org.apache.lucene.index.DocValues, int, int)", "public org.apache.lucene.index.MultiDocValues$DocValuesSlice(org.apache.lucene.index.DocValues, int, int)"], ["org.apache.lucene.index.MultiDocValues$EmptyDocValues", "org.apache.lucene.index.MultiDocValues$EmptyDocValues(int, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.index.MultiDocValues$EmptyDocValues(int, org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.MultiDocValues$EmptyDocValues.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.MultiDocValues$EmptyDocValues.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.MultiDocValues$EmptyDocValues.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues", "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues(int, org.apache.lucene.index.DocValues$Type, int)", "public org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues(int, org.apache.lucene.index.DocValues$Type, int)"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["int", "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["org.apache.lucene.index.MultiDocValues$EmptyFixedSource", "org.apache.lucene.index.MultiDocValues$EmptyFixedSource(org.apache.lucene.index.DocValues$Type, int)", "public org.apache.lucene.index.MultiDocValues$EmptyFixedSource(org.apache.lucene.index.DocValues$Type, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["double", "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.MultiDocValues$EmptySource", "org.apache.lucene.index.MultiDocValues$EmptySource(org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.index.MultiDocValues$EmptySource(org.apache.lucene.index.DocValues$Type)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$EmptySource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["double", "org.apache.lucene.index.MultiDocValues$EmptySource.getFloat(int)", "public double getFloat(int)"], ["long", "org.apache.lucene.index.MultiDocValues$EmptySource.getInt(int)", "public long getInt(int)"], ["org.apache.lucene.index.DocValues$SortedSource", "org.apache.lucene.index.MultiDocValues$EmptySource.asSortedSource()", "public org.apache.lucene.index.DocValues$SortedSource asSortedSource()"], ["int", "org.apache.lucene.index.MultiDocValues$EmptySource.ord(int)", "public int ord(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$EmptySource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.index.MultiDocValues$EmptySource.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["int", "org.apache.lucene.index.MultiDocValues$EmptySource.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.index.MultiDocValues$MultiSortedSource", "org.apache.lucene.index.MultiDocValues$MultiSortedSource(org.apache.lucene.index.DocValues$Type, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.PagedBytes, int, int, int[], long[])", "public org.apache.lucene.index.MultiDocValues$MultiSortedSource(org.apache.lucene.index.DocValues$Type, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.PagedBytes, int, int, int[], long[])"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedSource.ord(int)", "public int ord(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$MultiSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.index.MultiDocValues$MultiSortedSource.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["int", "org.apache.lucene.index.MultiDocValues$MultiSortedSource.getValueCount()", "public int getValueCount()"], ["org.apache.lucene.index.MultiDocValues$MultiSource", "org.apache.lucene.index.MultiDocValues$MultiSource(org.apache.lucene.index.MultiDocValues$DocValuesSlice[], int[], boolean, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.index.MultiDocValues$MultiSource(org.apache.lucene.index.MultiDocValues$DocValuesSlice[], int[], boolean, org.apache.lucene.index.DocValues$Type)"], ["long", "org.apache.lucene.index.MultiDocValues$MultiSource.getInt(int)", "public long getInt(int)"], ["double", "org.apache.lucene.index.MultiDocValues$MultiSource.getFloat(int)", "public double getFloat(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocValues$MultiSource.getBytes(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getBytes(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.DocValues$SortedSource", "org.apache.lucene.index.MultiDocValues$MultiSource.asSortedSource()", "public org.apache.lucene.index.DocValues$SortedSource asSortedSource()"], ["boolean", "org.apache.lucene.index.MultiDocValues$MultiSource.hasArray()", "public boolean hasArray()"], ["java.lang.Object", "org.apache.lucene.index.MultiDocValues$MultiSource.getArray()", "public java.lang.Object getArray()"], ["org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer", "org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer(org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer(org.apache.lucene.index.DocValues$Type)"], ["void", "org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer.consume(org.apache.lucene.util.BytesRef, int, long)", "public void consume(org.apache.lucene.util.BytesRef, int, long)"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.MultiDocValues.getDocValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.DocValues getDocValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.MultiDocValues.getNormDocValues(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.DocValues getNormDocValues(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.MultiDocValues.load()", "public org.apache.lucene.index.DocValues$Source load() throws java.io.IOException"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.MultiDocValues.getType()", "public org.apache.lucene.index.DocValues$Type getType()"], ["int", "org.apache.lucene.index.MultiDocValues.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.index.DocValues$Source", "org.apache.lucene.index.MultiDocValues.getDirectSource()", "public org.apache.lucene.index.DocValues$Source getDirectSource() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MultiDocsAndPositionsEnum", "org.apache.lucene.index.MultiDocsAndPositionsEnum(org.apache.lucene.index.MultiTermsEnum, int)", "public org.apache.lucene.index.MultiDocsAndPositionsEnum(org.apache.lucene.index.MultiTermsEnum, int)"], ["boolean", "org.apache.lucene.index.MultiDocsAndPositionsEnum.canReuse(org.apache.lucene.index.MultiTermsEnum)", "public boolean canReuse(org.apache.lucene.index.MultiTermsEnum)"], ["org.apache.lucene.index.MultiDocsAndPositionsEnum", "org.apache.lucene.index.MultiDocsAndPositionsEnum.reset(org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[], int)", "public org.apache.lucene.index.MultiDocsAndPositionsEnum reset(org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[], int)"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.getNumSubs()", "public int getNumSubs()"], ["org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[]", "org.apache.lucene.index.MultiDocsAndPositionsEnum.getSubs()", "public org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[] getSubs()"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.startOffset()", "public int startOffset() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsAndPositionsEnum.endOffset()", "public int endOffset() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.MultiDocsAndPositionsEnum.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.MultiDocsEnum$EnumWithSlice.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.MultiDocsEnum", "org.apache.lucene.index.MultiDocsEnum(org.apache.lucene.index.MultiTermsEnum, int)", "public org.apache.lucene.index.MultiDocsEnum(org.apache.lucene.index.MultiTermsEnum, int)"], ["boolean", "org.apache.lucene.index.MultiDocsEnum.canReuse(org.apache.lucene.index.MultiTermsEnum)", "public boolean canReuse(org.apache.lucene.index.MultiTermsEnum)"], ["int", "org.apache.lucene.index.MultiDocsEnum.getNumSubs()", "public int getNumSubs()"], ["org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[]", "org.apache.lucene.index.MultiDocsEnum.getSubs()", "public org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[] getSubs()"], ["int", "org.apache.lucene.index.MultiDocsEnum.freq()", "public int freq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsEnum.docID()", "public int docID()"], ["int", "org.apache.lucene.index.MultiDocsEnum.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiDocsEnum.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.MultiDocsEnum.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.MultiFields.getFields(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.index.Fields getFields(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.MultiFields.getLiveDocs(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.util.Bits getLiveDocs(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MultiFields.getTerms(org.apache.lucene.index.IndexReader, java.lang.String)", "public static org.apache.lucene.index.Terms getTerms(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.index.DocsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int)", "public static org.apache.lucene.index.DocsEnum getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.index.DocsAndPositionsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int)", "public static org.apache.lucene.index.DocsAndPositionsEnum getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int) throws java.io.IOException"], ["org.apache.lucene.index.MultiFields", "org.apache.lucene.index.MultiFields(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])", "public org.apache.lucene.index.MultiFields(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.MultiFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.MultiFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiFields.size()", "public int size()"], ["long", "org.apache.lucene.index.MultiFields.totalTermFreq(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef)", "public static long totalTermFreq(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.MultiFields.getMergedFieldInfos(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.index.FieldInfos getMergedFieldInfos(org.apache.lucene.index.IndexReader)"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.MultiFields.getIndexedFields(org.apache.lucene.index.IndexReader)", "public static java.util.Collection<java.lang.String> getIndexedFields(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.index.MultiReader", "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)", "public org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)"], ["org.apache.lucene.index.MultiReader", "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)", "public org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)"], ["org.apache.lucene.index.MultiTerms", "org.apache.lucene.index.MultiTerms(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[])", "public org.apache.lucene.index.MultiTerms(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[]) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MultiTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MultiTerms.iterator(org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiTerms.size()", "public long size()"], ["long", "org.apache.lucene.index.MultiTerms.getSumTotalTermFreq()", "public long getSumTotalTermFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiTerms.getSumDocFreq()", "public long getSumDocFreq() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiTerms.getDocCount()", "public int getDocCount() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.MultiTerms.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["boolean", "org.apache.lucene.index.MultiTerms.hasOffsets()", "public boolean hasOffsets()"], ["boolean", "org.apache.lucene.index.MultiTerms.hasPositions()", "public boolean hasPositions()"], ["boolean", "org.apache.lucene.index.MultiTerms.hasPayloads()", "public boolean hasPayloads()"], ["org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex", "org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex(org.apache.lucene.index.TermsEnum, int)", "public org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex(org.apache.lucene.index.TermsEnum, int)"], ["org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice", "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice(int, org.apache.lucene.index.ReaderSlice)", "public org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice(int, org.apache.lucene.index.ReaderSlice)"], ["void", "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.reset(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)", "public void reset(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.MultiTermsEnum.getMatchCount()", "public int getMatchCount()"], ["org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[]", "org.apache.lucene.index.MultiTermsEnum.getMatchArray()", "public org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[] getMatchArray()"], ["org.apache.lucene.index.MultiTermsEnum", "org.apache.lucene.index.MultiTermsEnum(org.apache.lucene.index.ReaderSlice[])", "public org.apache.lucene.index.MultiTermsEnum(org.apache.lucene.index.ReaderSlice[])"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiTermsEnum.term()", "public org.apache.lucene.util.BytesRef term()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.MultiTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.MultiTermsEnum.reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])", "public org.apache.lucene.index.TermsEnum reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.MultiTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.MultiTermsEnum.seekExact(long)", "public void seekExact(long)"], ["long", "org.apache.lucene.index.MultiTermsEnum.ord()", "public long ord()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.MultiTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.MultiTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.MultiTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.MultiTermsEnum.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.NoDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["void", "org.apache.lucene.index.NoDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["void", "org.apache.lucene.index.NoMergePolicy.close()", "public void close()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.NoMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.NoMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.NoMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)"], ["boolean", "org.apache.lucene.index.NoMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)"], ["void", "org.apache.lucene.index.NoMergePolicy.setIndexWriter(org.apache.lucene.index.IndexWriter)", "public void setIndexWriter(org.apache.lucene.index.IndexWriter)"], ["java.lang.String", "org.apache.lucene.index.NoMergePolicy.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.NoMergeScheduler.close()", "public void close()"], ["void", "org.apache.lucene.index.NoMergeScheduler.merge(org.apache.lucene.index.IndexWriter)", "public void merge(org.apache.lucene.index.IndexWriter)"], ["org.apache.lucene.index.Norm", "org.apache.lucene.index.Norm()", "public org.apache.lucene.index.Norm()"], ["org.apache.lucene.index.IndexableField", "org.apache.lucene.index.Norm.field()", "public org.apache.lucene.index.IndexableField field()"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.Norm.type()", "public org.apache.lucene.index.DocValues$Type type()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.Norm.getSpare()", "public org.apache.lucene.util.BytesRef getSpare()"], ["void", "org.apache.lucene.index.Norm.setFloat(float)", "public void setFloat(float)"], ["void", "org.apache.lucene.index.Norm.setDouble(double)", "public void setDouble(double)"], ["void", "org.apache.lucene.index.Norm.setShort(short)", "public void setShort(short)"], ["void", "org.apache.lucene.index.Norm.setInt(int)", "public void setInt(int)"], ["void", "org.apache.lucene.index.Norm.setLong(long)", "public void setLong(long)"], ["void", "org.apache.lucene.index.Norm.setByte(byte)", "public void setByte(byte)"], ["void", "org.apache.lucene.index.Norm.setBytes(org.apache.lucene.util.BytesRef)", "public void setBytes(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.NormsConsumer", "org.apache.lucene.index.NormsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.NormsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"], ["void", "org.apache.lucene.index.NormsConsumer.abort()", "public void abort()"], ["void", "org.apache.lucene.index.NormsConsumer.flush(java.util.Map<java.lang.String, org.apache.lucene.index.InvertedDocEndConsumerPerField>, org.apache.lucene.index.SegmentWriteState)", "public void flush(java.util.Map<java.lang.String, org.apache.lucene.index.InvertedDocEndConsumerPerField>, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.index.NormsConsumerPerField", "org.apache.lucene.index.NormsConsumerPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.FieldInfo, org.apache.lucene.index.NormsConsumer)", "public org.apache.lucene.index.NormsConsumerPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.FieldInfo, org.apache.lucene.index.NormsConsumer)"], ["int", "org.apache.lucene.index.NormsConsumerPerField.compareTo(org.apache.lucene.index.NormsConsumerPerField)", "public int compareTo(org.apache.lucene.index.NormsConsumerPerField)"], ["int", "org.apache.lucene.index.NormsConsumerPerField.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.OrdTermState", "org.apache.lucene.index.OrdTermState()", "public org.apache.lucene.index.OrdTermState()"], ["void", "org.apache.lucene.index.OrdTermState.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["java.lang.String", "org.apache.lucene.index.OrdTermState.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.index.ParallelAtomicReader$ParallelFields.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["org.apache.lucene.index.Terms", "org.apache.lucene.index.ParallelAtomicReader$ParallelFields.terms(java.lang.String)", "public org.apache.lucene.index.Terms terms(java.lang.String)"], ["int", "org.apache.lucene.index.ParallelAtomicReader$ParallelFields.size()", "public int size()"], ["org.apache.lucene.index.ParallelAtomicReader", "org.apache.lucene.index.ParallelAtomicReader(org.apache.lucene.index.AtomicReader...)", "public org.apache.lucene.index.ParallelAtomicReader(org.apache.lucene.index.AtomicReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelAtomicReader", "org.apache.lucene.index.ParallelAtomicReader(boolean, org.apache.lucene.index.AtomicReader...)", "public org.apache.lucene.index.ParallelAtomicReader(boolean, org.apache.lucene.index.AtomicReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelAtomicReader", "org.apache.lucene.index.ParallelAtomicReader(boolean, org.apache.lucene.index.AtomicReader[], org.apache.lucene.index.AtomicReader[])", "public org.apache.lucene.index.ParallelAtomicReader(boolean, org.apache.lucene.index.AtomicReader[], org.apache.lucene.index.AtomicReader[]) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.ParallelAtomicReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.ParallelAtomicReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.ParallelAtomicReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.ParallelAtomicReader.fields()", "public org.apache.lucene.index.Fields fields()"], ["int", "org.apache.lucene.index.ParallelAtomicReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.ParallelAtomicReader.maxDoc()", "public int maxDoc()"], ["boolean", "org.apache.lucene.index.ParallelAtomicReader.hasDeletions()", "public boolean hasDeletions()"], ["void", "org.apache.lucene.index.ParallelAtomicReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.ParallelAtomicReader.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.ParallelAtomicReader.docValues(java.lang.String)", "public org.apache.lucene.index.DocValues docValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.ParallelAtomicReader.normValues(java.lang.String)", "public org.apache.lucene.index.DocValues normValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.ParallelCompositeReader", "org.apache.lucene.index.ParallelCompositeReader(org.apache.lucene.index.CompositeReader...)", "public org.apache.lucene.index.ParallelCompositeReader(org.apache.lucene.index.CompositeReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelCompositeReader", "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader...)", "public org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader...) throws java.io.IOException"], ["org.apache.lucene.index.ParallelCompositeReader", "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[])", "public org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[]) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.ParallelCompositeReader.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.PerDocWriteState", "org.apache.lucene.index.PerDocWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.util.Counter, java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.PerDocWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.util.Counter, java.lang.String, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.index.PerDocWriteState", "org.apache.lucene.index.PerDocWriteState(org.apache.lucene.index.SegmentWriteState)", "public org.apache.lucene.index.PerDocWriteState(org.apache.lucene.index.SegmentWriteState)"], ["org.apache.lucene.index.PerDocWriteState", "org.apache.lucene.index.PerDocWriteState(org.apache.lucene.index.PerDocWriteState, java.lang.String)", "public org.apache.lucene.index.PerDocWriteState(org.apache.lucene.index.PerDocWriteState, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.readSnapshotsInfo(org.apache.lucene.store.Directory)", "public static java.util.Map<java.lang.String, java.lang.String> readSnapshotsInfo(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.PersistentSnapshotDeletionPolicy", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig$OpenMode, org.apache.lucene.util.Version)", "public org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig$OpenMode, org.apache.lucene.util.Version) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot(java.lang.String)", "public synchronized org.apache.lucene.index.IndexCommit snapshot(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void release(java.lang.String)", "public synchronized void release(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.PrefixCodedTerms$Builder", "org.apache.lucene.index.PrefixCodedTerms$Builder()", "public org.apache.lucene.index.PrefixCodedTerms$Builder()"], ["void", "org.apache.lucene.index.PrefixCodedTerms$Builder.add(org.apache.lucene.index.Term)", "public void add(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.PrefixCodedTerms", "org.apache.lucene.index.PrefixCodedTerms$Builder.finish()", "public org.apache.lucene.index.PrefixCodedTerms finish()"], ["boolean", "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.next()", "public org.apache.lucene.index.Term next()"], ["void", "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.next()", "public java.lang.Object next()"], ["long", "org.apache.lucene.index.PrefixCodedTerms.getSizeInBytes()", "public long getSizeInBytes()"], ["java.util.Iterator<org.apache.lucene.index.Term>", "org.apache.lucene.index.PrefixCodedTerms.iterator()", "public java.util.Iterator<org.apache.lucene.index.Term> iterator()"], ["org.apache.lucene.index.ReaderManager", "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter, boolean)", "public org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException"], ["org.apache.lucene.index.ReaderManager", "org.apache.lucene.index.ReaderManager(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.ReaderManager(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.ReaderSlice", "org.apache.lucene.index.ReaderSlice(int, int, int)", "public org.apache.lucene.index.ReaderSlice(int, int, int)"], ["java.lang.String", "org.apache.lucene.index.ReaderSlice.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.index.ReaderUtil.getTopLevelContext(org.apache.lucene.index.IndexReaderContext)", "public static org.apache.lucene.index.IndexReaderContext getTopLevelContext(org.apache.lucene.index.IndexReaderContext)"], ["int", "org.apache.lucene.index.ReaderUtil.subIndex(int, int[])", "public static int subIndex(int, int[])"], ["int", "org.apache.lucene.index.ReaderUtil.subIndex(int, java.util.List<org.apache.lucene.index.AtomicReaderContext>)", "public static int subIndex(int, java.util.List<org.apache.lucene.index.AtomicReaderContext>)"], ["org.apache.lucene.index.ReadersAndLiveDocs", "org.apache.lucene.index.ReadersAndLiveDocs(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentInfoPerCommit)", "public org.apache.lucene.index.ReadersAndLiveDocs(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentInfoPerCommit)"], ["void", "org.apache.lucene.index.ReadersAndLiveDocs.incRef()", "public void incRef()"], ["void", "org.apache.lucene.index.ReadersAndLiveDocs.decRef()", "public void decRef()"], ["int", "org.apache.lucene.index.ReadersAndLiveDocs.refCount()", "public int refCount()"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.int getPendingDeleteCount()", "public synchronized int getPendingDeleteCount()"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.boolean verifyDocCounts()", "public synchronized boolean verifyDocCounts()"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.index.SegmentReader getMergeReader(org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.index.SegmentReader getMergeReader(org.apache.lucene.store.IOContext) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.void release(org.apache.lucene.index.SegmentReader)", "public synchronized void release(org.apache.lucene.index.SegmentReader) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.boolean delete(int)", "public synchronized boolean delete(int)"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.void dropReaders()", "public synchronized void dropReaders() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.void initWritableLiveDocs()", "public synchronized void initWritableLiveDocs() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.util.Bits getLiveDocs()", "public synchronized org.apache.lucene.util.Bits getLiveDocs()"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.util.Bits getReadOnlyLiveDocs()", "public synchronized org.apache.lucene.util.Bits getReadOnlyLiveDocs()"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.void dropChanges()", "public synchronized void dropChanges()"], ["synchronized", "org.apache.lucene.index.ReadersAndLiveDocs.boolean writeLiveDocs(org.apache.lucene.store.Directory)", "public synchronized boolean writeLiveDocs(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.ReadersAndLiveDocs.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.SegmentCoreReaders.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfo.getDiagnostics()", "public java.util.Map<java.lang.String, java.lang.String> getDiagnostics()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.index.SegmentInfo(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, boolean, org.apache.lucene.codecs.Codec, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)", "public org.apache.lucene.index.SegmentInfo(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, boolean, org.apache.lucene.codecs.Codec, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)"], ["long", "org.apache.lucene.index.SegmentInfo.sizeInBytes()", "public long sizeInBytes() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentInfo.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["void", "org.apache.lucene.index.SegmentInfo.setCodec(org.apache.lucene.codecs.Codec)", "public void setCodec(org.apache.lucene.codecs.Codec)"], ["org.apache.lucene.codecs.Codec", "org.apache.lucene.index.SegmentInfo.getCodec()", "public org.apache.lucene.codecs.Codec getCodec()"], ["int", "org.apache.lucene.index.SegmentInfo.getDocCount()", "public int getDocCount()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.index.SegmentInfo.files()", "public java.util.Set<java.lang.String> files()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.toString(org.apache.lucene.store.Directory, int)", "public java.lang.String toString(org.apache.lucene.store.Directory, int)"], ["boolean", "org.apache.lucene.index.SegmentInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.SegmentInfo.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.index.SegmentInfo.setVersion(java.lang.String)", "public void setVersion(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.getVersion()", "public java.lang.String getVersion()"], ["void", "org.apache.lucene.index.SegmentInfo.setFiles(java.util.Set<java.lang.String>)", "public void setFiles(java.util.Set<java.lang.String>)"], ["void", "org.apache.lucene.index.SegmentInfo.addFiles(java.util.Collection<java.lang.String>)", "public void addFiles(java.util.Collection<java.lang.String>)"], ["void", "org.apache.lucene.index.SegmentInfo.addFile(java.lang.String)", "public void addFile(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.getAttribute(java.lang.String)", "public java.lang.String getAttribute(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.putAttribute(java.lang.String, java.lang.String)", "public java.lang.String putAttribute(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfo.attributes()", "public java.util.Map<java.lang.String, java.lang.String> attributes()"], ["org.apache.lucene.index.SegmentInfoPerCommit", "org.apache.lucene.index.SegmentInfoPerCommit(org.apache.lucene.index.SegmentInfo, int, long)", "public org.apache.lucene.index.SegmentInfoPerCommit(org.apache.lucene.index.SegmentInfo, int, long)"], ["long", "org.apache.lucene.index.SegmentInfoPerCommit.sizeInBytes()", "public long sizeInBytes() throws java.io.IOException"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SegmentInfoPerCommit.files()", "public java.util.Collection<java.lang.String> files() throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentInfoPerCommit.setDelGen(long)", "public void setDelGen(long)"], ["boolean", "org.apache.lucene.index.SegmentInfoPerCommit.hasDeletions()", "public boolean hasDeletions()"], ["long", "org.apache.lucene.index.SegmentInfoPerCommit.getNextDelGen()", "public long getNextDelGen()"], ["long", "org.apache.lucene.index.SegmentInfoPerCommit.getDelGen()", "public long getDelGen()"], ["int", "org.apache.lucene.index.SegmentInfoPerCommit.getDelCount()", "public int getDelCount()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfoPerCommit.toString(org.apache.lucene.store.Directory, int)", "public java.lang.String toString(org.apache.lucene.store.Directory, int)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfoPerCommit.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.SegmentInfoPerCommit", "org.apache.lucene.index.SegmentInfoPerCommit.clone()", "public org.apache.lucene.index.SegmentInfoPerCommit clone()"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfoPerCommit.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.SegmentInfos$FindSegmentsFile", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run()", "public java.lang.Object run() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(org.apache.lucene.index.IndexCommit)", "public java.lang.Object run(org.apache.lucene.index.IndexCommit) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos()", "public org.apache.lucene.index.SegmentInfos()"], ["org.apache.lucene.index.SegmentInfoPerCommit", "org.apache.lucene.index.SegmentInfos.info(int)", "public org.apache.lucene.index.SegmentInfoPerCommit info(int)"], ["long", "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(java.lang.String[])", "public static long getLastCommitGeneration(java.lang.String[])"], ["long", "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(org.apache.lucene.store.Directory)", "public static long getLastCommitGeneration(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(java.lang.String[])", "public static java.lang.String getLastCommitSegmentsFileName(java.lang.String[])"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(org.apache.lucene.store.Directory)", "public static java.lang.String getLastCommitSegmentsFileName(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["long", "org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(java.lang.String)", "public static long generationFromSegmentsFileName(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getNextSegmentFileName()", "public java.lang.String getNextSegmentFileName()"], ["void", "org.apache.lucene.index.SegmentInfos.read(org.apache.lucene.store.Directory, java.lang.String)", "public final void read(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentInfos.read(org.apache.lucene.store.Directory)", "public final void read(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.write3xInfo(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)", "public static java.lang.String write3xInfo(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos.clone()", "public org.apache.lucene.index.SegmentInfos clone()"], ["long", "org.apache.lucene.index.SegmentInfos.getVersion()", "public long getVersion()"], ["long", "org.apache.lucene.index.SegmentInfos.getGeneration()", "public long getGeneration()"], ["long", "org.apache.lucene.index.SegmentInfos.getLastGeneration()", "public long getLastGeneration()"], ["void", "org.apache.lucene.index.SegmentInfos.setInfoStream(java.io.PrintStream)", "public static void setInfoStream(java.io.PrintStream)"], ["void", "org.apache.lucene.index.SegmentInfos.setDefaultGenLookaheadCount(int)", "public static void setDefaultGenLookaheadCount(int)"], ["int", "org.apache.lucene.index.SegmentInfos.getDefaultGenLookahedCount()", "public static int getDefaultGenLookahedCount()"], ["java.io.PrintStream", "org.apache.lucene.index.SegmentInfos.getInfoStream()", "public static java.io.PrintStream getInfoStream()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SegmentInfos.files(org.apache.lucene.store.Directory, boolean)", "public java.util.Collection<java.lang.String> files(org.apache.lucene.store.Directory, boolean) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.toString(org.apache.lucene.store.Directory)", "public java.lang.String toString(org.apache.lucene.store.Directory)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfos.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["int", "org.apache.lucene.index.SegmentInfos.totalDocCount()", "public int totalDocCount()"], ["void", "org.apache.lucene.index.SegmentInfos.changed()", "public void changed()"], ["java.util.Iterator<org.apache.lucene.index.SegmentInfoPerCommit>", "org.apache.lucene.index.SegmentInfos.iterator()", "public java.util.Iterator<org.apache.lucene.index.SegmentInfoPerCommit> iterator()"], ["java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>", "org.apache.lucene.index.SegmentInfos.asList()", "public java.util.List<org.apache.lucene.index.SegmentInfoPerCommit> asList()"], ["int", "org.apache.lucene.index.SegmentInfos.size()", "public int size()"], ["void", "org.apache.lucene.index.SegmentInfos.add(org.apache.lucene.index.SegmentInfoPerCommit)", "public void add(org.apache.lucene.index.SegmentInfoPerCommit)"], ["void", "org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable<org.apache.lucene.index.SegmentInfoPerCommit>)", "public void addAll(java.lang.Iterable<org.apache.lucene.index.SegmentInfoPerCommit>)"], ["void", "org.apache.lucene.index.SegmentInfos.clear()", "public void clear()"], ["void", "org.apache.lucene.index.SegmentInfos.remove(org.apache.lucene.index.SegmentInfoPerCommit)", "public void remove(org.apache.lucene.index.SegmentInfoPerCommit)"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.index.SegmentMerger.mergeDocValuesAndNormsFieldInfos()", "public void mergeDocValuesAndNormsFieldInfos() throws java.io.IOException"], ["org.apache.lucene.index.SegmentReadState", "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, int)", "public org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, int)"], ["org.apache.lucene.index.SegmentReadState", "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, int, java.lang.String)", "public org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, int, java.lang.String)"], ["org.apache.lucene.index.SegmentReadState", "org.apache.lucene.index.SegmentReadState(org.apache.lucene.index.SegmentReadState, java.lang.String)", "public org.apache.lucene.index.SegmentReadState(org.apache.lucene.index.SegmentReadState, java.lang.String)"], ["org.apache.lucene.index.SegmentReader", "org.apache.lucene.index.SegmentReader(org.apache.lucene.index.SegmentInfoPerCommit, int, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentReader(org.apache.lucene.index.SegmentInfoPerCommit, int, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.SegmentReader.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["boolean", "org.apache.lucene.index.SegmentReader.hasDeletions()", "public boolean hasDeletions()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.SegmentReader.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["org.apache.lucene.codecs.StoredFieldsReader", "org.apache.lucene.index.SegmentReader.getFieldsReader()", "public org.apache.lucene.codecs.StoredFieldsReader getFieldsReader()"], ["void", "org.apache.lucene.index.SegmentReader.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.SegmentReader.fields()", "public org.apache.lucene.index.Fields fields()"], ["int", "org.apache.lucene.index.SegmentReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.SegmentReader.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.codecs.TermVectorsReader", "org.apache.lucene.index.SegmentReader.getTermVectorsReader()", "public org.apache.lucene.codecs.TermVectorsReader getTermVectorsReader()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.SegmentReader.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentReader.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.SegmentReader.getSegmentName()", "public java.lang.String getSegmentName()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.SegmentReader.directory()", "public org.apache.lucene.store.Directory directory()"], ["java.lang.Object", "org.apache.lucene.index.SegmentReader.getCoreCacheKey()", "public java.lang.Object getCoreCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.SegmentReader.getCombinedCoreAndDeletesKey()", "public java.lang.Object getCombinedCoreAndDeletesKey()"], ["int", "org.apache.lucene.index.SegmentReader.getTermInfosIndexDivisor()", "public int getTermInfosIndexDivisor()"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.SegmentReader.docValues(java.lang.String)", "public org.apache.lucene.index.DocValues docValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.SegmentReader.normValues(java.lang.String)", "public org.apache.lucene.index.DocValues normValues(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentReader.addCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)", "public void addCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)"], ["void", "org.apache.lucene.index.SegmentReader.removeCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)", "public void removeCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)"], ["org.apache.lucene.index.SegmentWriteState", "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, int, org.apache.lucene.index.BufferedDeletes, org.apache.lucene.store.IOContext)", "public org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, int, org.apache.lucene.index.BufferedDeletes, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.index.SegmentWriteState", "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.SegmentWriteState, java.lang.String)", "public org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.SegmentWriteState, java.lang.String)"], ["org.apache.lucene.index.SerialMergeScheduler", "org.apache.lucene.index.SerialMergeScheduler()", "public org.apache.lucene.index.SerialMergeScheduler()"], ["synchronized", "org.apache.lucene.index.SerialMergeScheduler.void merge(org.apache.lucene.index.IndexWriter)", "public synchronized void merge(org.apache.lucene.index.IndexWriter) throws java.io.IOException"], ["void", "org.apache.lucene.index.SerialMergeScheduler.close()", "public void close()"], ["org.apache.lucene.index.SingleTermsEnum", "org.apache.lucene.index.SingleTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.SingleTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.AtomicReader", "org.apache.lucene.index.SlowCompositeReaderWrapper.wrap(org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.index.AtomicReader wrap(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.index.SlowCompositeReaderWrapper", "org.apache.lucene.index.SlowCompositeReaderWrapper(org.apache.lucene.index.CompositeReader)", "public org.apache.lucene.index.SlowCompositeReaderWrapper(org.apache.lucene.index.CompositeReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SlowCompositeReaderWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.SlowCompositeReaderWrapper.fields()", "public org.apache.lucene.index.Fields fields()"], ["org.apache.lucene.index.DocValues", "org.apache.lucene.index.SlowCompositeReaderWrapper.docValues(java.lang.String)", "public org.apache.lucene.index.DocValues docValues(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SlowCompositeReaderWrapper.org.apache.lucene.index.DocValues normValues(java.lang.String)", "public synchronized org.apache.lucene.index.DocValues normValues(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.Fields", "org.apache.lucene.index.SlowCompositeReaderWrapper.getTermVectors(int)", "public org.apache.lucene.index.Fields getTermVectors(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.SlowCompositeReaderWrapper.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.SlowCompositeReaderWrapper.maxDoc()", "public int maxDoc()"], ["void", "org.apache.lucene.index.SlowCompositeReaderWrapper.document(int, org.apache.lucene.index.StoredFieldVisitor)", "public void document(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.index.SlowCompositeReaderWrapper.getLiveDocs()", "public org.apache.lucene.util.Bits getLiveDocs()"], ["org.apache.lucene.index.FieldInfos", "org.apache.lucene.index.SlowCompositeReaderWrapper.getFieldInfos()", "public org.apache.lucene.index.FieldInfos getFieldInfos()"], ["boolean", "org.apache.lucene.index.SlowCompositeReaderWrapper.hasDeletions()", "public boolean hasDeletions()"], ["java.lang.Object", "org.apache.lucene.index.SlowCompositeReaderWrapper.getCoreCacheKey()", "public java.lang.Object getCoreCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.SlowCompositeReaderWrapper.getCombinedCoreAndDeletesKey()", "public java.lang.Object getCombinedCoreAndDeletesKey()"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.delete()", "public void delete()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames() throws java.io.IOException"], ["long", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getGeneration()", "public long getGeneration()"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.isDeleted()", "public boolean isDeleted()"], ["int", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentCount()", "public int getSegmentCount()"], ["org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo(java.lang.String, java.lang.String, org.apache.lucene.index.IndexCommit)", "public org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo(java.lang.String, java.lang.String, org.apache.lucene.index.IndexCommit)"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.SnapshotDeletionPolicy", "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)", "public org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"], ["org.apache.lucene.index.SnapshotDeletionPolicy", "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, java.util.Map<java.lang.String, java.lang.String>)", "public org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, java.util.Map<java.lang.String, java.lang.String>)"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit getSnapshot(java.lang.String)", "public synchronized org.apache.lucene.index.IndexCommit getSnapshot(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshots()", "public synchronized java.util.Map<java.lang.String, java.lang.String> getSnapshots()"], ["boolean", "org.apache.lucene.index.SnapshotDeletionPolicy.isSnapshotted(java.lang.String)", "public boolean isSnapshotted(java.lang.String)"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void release(java.lang.String)", "public synchronized void release(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot(java.lang.String)", "public synchronized org.apache.lucene.index.IndexCommit snapshot(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer", "org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer(org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer(org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer.consume(org.apache.lucene.util.BytesRef, int, long)", "public void consume(org.apache.lucene.util.BytesRef, int, long) throws java.io.IOException"], ["org.apache.lucene.index.SortedBytesMergeUtils$MergeContext", "org.apache.lucene.index.SortedBytesMergeUtils$MergeContext(java.util.Comparator<org.apache.lucene.util.BytesRef>, int, int, org.apache.lucene.index.DocValues$Type)", "public org.apache.lucene.index.SortedBytesMergeUtils$MergeContext(java.util.Comparator<org.apache.lucene.util.BytesRef>, int, int, org.apache.lucene.index.DocValues$Type)"], ["int", "org.apache.lucene.index.SortedBytesMergeUtils$MergeContext.getMergeDocCount()", "public int getMergeDocCount()"], ["org.apache.lucene.index.SortedBytesMergeUtils$MergeQueue", "org.apache.lucene.index.SortedBytesMergeUtils$MergeQueue(int, java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public org.apache.lucene.index.SortedBytesMergeUtils$MergeQueue(int, java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource", "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource(org.apache.lucene.index.SortedBytesMergeUtils$MergeContext)", "public org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource(org.apache.lucene.index.SortedBytesMergeUtils$MergeContext)"], ["int", "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.ord(int)", "public int ord(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.getByOrd(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getByOrd(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["int", "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.getValueCount()", "public int getValueCount()"], ["int[]", "org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice.toAbsolutOrds(int[])", "public int[] toAbsolutOrds(int[])"], ["void", "org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice.writeOrds(org.apache.lucene.util.packed.PackedInts$Writer)", "public void writeOrds(org.apache.lucene.util.packed.PackedInts$Writer) throws java.io.IOException"], ["org.apache.lucene.index.SortedBytesMergeUtils$MergeContext", "org.apache.lucene.index.SortedBytesMergeUtils.init(org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.DocValues[], java.util.Comparator<org.apache.lucene.util.BytesRef>, int)", "public static org.apache.lucene.index.SortedBytesMergeUtils$MergeContext init(org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.DocValues[], java.util.Comparator<org.apache.lucene.util.BytesRef>, int)"], ["java.util.List<org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice>", "org.apache.lucene.index.SortedBytesMergeUtils.buildSlices(int[], org.apache.lucene.index.MergeState$DocMap[], org.apache.lucene.index.DocValues[], org.apache.lucene.index.SortedBytesMergeUtils$MergeContext)", "public static java.util.List<org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice> buildSlices(int[], org.apache.lucene.index.MergeState$DocMap[], org.apache.lucene.index.DocValues[], org.apache.lucene.index.SortedBytesMergeUtils$MergeContext) throws java.io.IOException"], ["int", "org.apache.lucene.index.SortedBytesMergeUtils.mergeRecords(org.apache.lucene.index.SortedBytesMergeUtils$MergeContext, org.apache.lucene.index.SortedBytesMergeUtils$BytesRefConsumer, java.util.List<org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice>)", "public static int mergeRecords(org.apache.lucene.index.SortedBytesMergeUtils$MergeContext, org.apache.lucene.index.SortedBytesMergeUtils$BytesRefConsumer, java.util.List<org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice>) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentCount()", "public int getSegmentCount()"], ["java.lang.String", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["long", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getGeneration()", "public long getGeneration()"], ["boolean", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.isDeleted()", "public boolean isDeleted()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.delete()", "public void delete()"], ["java.lang.String", "org.apache.lucene.index.StandardDirectoryReader.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.index.StandardDirectoryReader.getVersion()", "public long getVersion()"], ["boolean", "org.apache.lucene.index.StandardDirectoryReader.isCurrent()", "public boolean isCurrent() throws java.io.IOException"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.StandardDirectoryReader.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit() throws java.io.IOException"], ["org.apache.lucene.index.StoredFieldVisitor$Status[]", "org.apache.lucene.index.StoredFieldVisitor$Status.values()", "public static org.apache.lucene.index.StoredFieldVisitor$Status[] values()"], ["org.apache.lucene.index.StoredFieldVisitor$Status", "org.apache.lucene.index.StoredFieldVisitor$Status.valueOf(java.lang.String)", "public static org.apache.lucene.index.StoredFieldVisitor$Status valueOf(java.lang.String)"], ["void", "org.apache.lucene.index.StoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])", "public void binaryField(org.apache.lucene.index.FieldInfo, byte[]) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)", "public void stringField(org.apache.lucene.index.FieldInfo, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)", "public void intField(org.apache.lucene.index.FieldInfo, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)", "public void longField(org.apache.lucene.index.FieldInfo, long) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)", "public void floatField(org.apache.lucene.index.FieldInfo, float) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)", "public void doubleField(org.apache.lucene.index.FieldInfo, double) throws java.io.IOException"], ["org.apache.lucene.index.StoredFieldsConsumer", "org.apache.lucene.index.StoredFieldsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.StoredFieldsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"], ["void", "org.apache.lucene.index.StoredFieldsConsumer.reset()", "public void reset()"], ["void", "org.apache.lucene.index.StoredFieldsConsumer.startDocument()", "public void startDocument()"], ["void", "org.apache.lucene.index.StoredFieldsConsumer.flush(org.apache.lucene.index.SegmentWriteState)", "public void flush(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldsConsumer.addField(org.apache.lucene.index.IndexableField, org.apache.lucene.index.FieldInfo)", "public void addField(org.apache.lucene.index.IndexableField, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String, java.lang.String)", "public org.apache.lucene.index.Term(java.lang.String, java.lang.String)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String)", "public org.apache.lucene.index.Term(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.Term.field()", "public final java.lang.String field()"], ["java.lang.String", "org.apache.lucene.index.Term.text()", "public final java.lang.String text()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.Term.bytes()", "public final org.apache.lucene.util.BytesRef bytes()"], ["boolean", "org.apache.lucene.index.Term.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.Term.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.index.Term.compareTo(org.apache.lucene.index.Term)", "public final int compareTo(org.apache.lucene.index.Term)"], ["java.lang.String", "org.apache.lucene.index.Term.toString()", "public final java.lang.String toString()"], ["int", "org.apache.lucene.index.Term.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.TermContext", "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext)", "public org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext)"], ["org.apache.lucene.index.TermContext", "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)", "public org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)"], ["org.apache.lucene.index.TermContext", "org.apache.lucene.index.TermContext.build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term, boolean)", "public static org.apache.lucene.index.TermContext build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermContext.clear()", "public void clear()"], ["void", "org.apache.lucene.index.TermContext.register(org.apache.lucene.index.TermState, int, int, long)", "public void register(org.apache.lucene.index.TermState, int, int, long)"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermContext.get(int)", "public org.apache.lucene.index.TermState get(int)"], ["int", "org.apache.lucene.index.TermContext.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.TermContext.totalTermFreq()", "public long totalTermFreq()"], ["void", "org.apache.lucene.index.TermContext.setDocFreq(int)", "public void setDocFreq(int)"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermState.clone()", "public org.apache.lucene.index.TermState clone()"], ["java.lang.String", "org.apache.lucene.index.TermState.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.index.TermState.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.index.TermVectorsConsumer", "org.apache.lucene.index.TermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)", "public org.apache.lucene.index.TermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"], ["void", "org.apache.lucene.index.TermVectorsConsumer.abort()", "public void abort()"], ["org.apache.lucene.index.TermsHashConsumerPerField", "org.apache.lucene.index.TermVectorsConsumer.addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray", "org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray(int)", "public org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray(int)"], ["org.apache.lucene.index.TermVectorsConsumerPerField", "org.apache.lucene.index.TermVectorsConsumerPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermVectorsConsumerPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermVectorsConsumerPerField.abort()", "public void abort()"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.index.Terms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.index.TermsEnum intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsEnum$1.copyFrom(org.apache.lucene.index.TermState)", "public void copyFrom(org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.TermsEnum$2.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean)"], ["void", "org.apache.lucene.index.TermsEnum$2.seekExact(long)", "public void seekExact(long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.TermsEnum$2.term()", "public org.apache.lucene.util.BytesRef term()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.index.TermsEnum$2.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["int", "org.apache.lucene.index.TermsEnum$2.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.index.TermsEnum$2.totalTermFreq()", "public long totalTermFreq()"], ["long", "org.apache.lucene.index.TermsEnum$2.ord()", "public long ord()"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.TermsEnum$2.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.TermsEnum$2.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.index.TermsEnum$2.next()", "public org.apache.lucene.util.BytesRef next()"], ["synchronized", "org.apache.lucene.index.TermsEnum$2.org.apache.lucene.util.AttributeSource attributes()", "public synchronized org.apache.lucene.util.AttributeSource attributes()"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermsEnum$2.termState()", "public org.apache.lucene.index.TermState termState()"], ["void", "org.apache.lucene.index.TermsEnum$2.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"], ["org.apache.lucene.index.TermsEnum$SeekStatus[]", "org.apache.lucene.index.TermsEnum$SeekStatus.values()", "public static org.apache.lucene.index.TermsEnum$SeekStatus[] values()"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.TermsEnum$SeekStatus.valueOf(java.lang.String)", "public static org.apache.lucene.index.TermsEnum$SeekStatus valueOf(java.lang.String)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.TermsEnum.attributes()", "public org.apache.lucene.util.AttributeSource attributes()"], ["boolean", "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.index.TermsEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public final org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.index.TermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum)", "public final org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.index.TermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum)", "public final org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.index.TermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.index.TermsHash", "org.apache.lucene.index.TermsHash(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHashConsumer, boolean, org.apache.lucene.index.TermsHash)", "public org.apache.lucene.index.TermsHash(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHashConsumer, boolean, org.apache.lucene.index.TermsHash)"], ["void", "org.apache.lucene.index.TermsHash.abort()", "public void abort()"], ["boolean", "org.apache.lucene.index.TermsHash.freeRAM()", "public boolean freeRAM()"], ["int[]", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.init()", "public int[] init()"], ["int[]", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.clear()", "public int[] clear()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.bytesUsed()", "public org.apache.lucene.util.Counter bytesUsed()"], ["org.apache.lucene.index.TermsHashPerField", "org.apache.lucene.index.TermsHashPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHash, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHash, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermsHashPerField.reset()", "public void reset()"], ["void", "org.apache.lucene.index.TermsHashPerField.abort()", "public void abort()"], ["void", "org.apache.lucene.index.TermsHashPerField.initReader(org.apache.lucene.index.ByteSliceReader, int, int)", "public void initReader(org.apache.lucene.index.ByteSliceReader, int, int)"], ["int[]", "org.apache.lucene.index.TermsHashPerField.sortPostings(java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public int[] sortPostings(java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["void", "org.apache.lucene.index.TermsHashPerField.add(int)", "public void add(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsHashPerField.writeBytes(int, byte[], int, int)", "public void writeBytes(int, byte[], int, int)"], ["org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool", "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool(int)", "public org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool(int)"], ["org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState", "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.getAndLock(java.lang.Thread, org.apache.lucene.index.DocumentsWriter)", "public org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState getAndLock(java.lang.Thread, org.apache.lucene.index.DocumentsWriter)"], ["org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool", "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.clone()", "public org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool clone()"], ["org.apache.lucene.index.DocumentsWriterPerThreadPool", "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.clone()", "public org.apache.lucene.index.DocumentsWriterPerThreadPool clone()"], ["java.lang.Object", "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["double", "org.apache.lucene.index.TieredMergePolicy$1.getScore()", "public double getScore()"], ["java.lang.String", "org.apache.lucene.index.TieredMergePolicy$1.getExplanation()", "public java.lang.String getExplanation()"], ["int", "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.SegmentInfoPerCommit)", "public int compare(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.SegmentInfoPerCommit)"], ["int", "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy()", "public org.apache.lucene.index.TieredMergePolicy()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int)", "public org.apache.lucene.index.TieredMergePolicy setMaxMergeAtOnce(int)"], ["int", "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce()", "public int getMaxMergeAtOnce()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int)", "public org.apache.lucene.index.TieredMergePolicy setMaxMergeAtOnceExplicit(int)"], ["int", "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnceExplicit()", "public int getMaxMergeAtOnceExplicit()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double)", "public org.apache.lucene.index.TieredMergePolicy setMaxMergedSegmentMB(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB()", "public double getMaxMergedSegmentMB()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double)", "public org.apache.lucene.index.TieredMergePolicy setReclaimDeletesWeight(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getReclaimDeletesWeight()", "public double getReclaimDeletesWeight()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double)", "public org.apache.lucene.index.TieredMergePolicy setFloorSegmentMB(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB()", "public double getFloorSegmentMB()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double)", "public org.apache.lucene.index.TieredMergePolicy setForceMergeDeletesPctAllowed(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getForceMergeDeletesPctAllowed()", "public double getForceMergeDeletesPctAllowed()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double)", "public org.apache.lucene.index.TieredMergePolicy setSegmentsPerTier(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier()", "public double getSegmentsPerTier()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setUseCompoundFile(boolean)", "public org.apache.lucene.index.TieredMergePolicy setUseCompoundFile(boolean)"], ["boolean", "org.apache.lucene.index.TieredMergePolicy.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setNoCFSRatio(double)", "public org.apache.lucene.index.TieredMergePolicy setNoCFSRatio(double)"], ["double", "org.apache.lucene.index.TieredMergePolicy.getNoCFSRatio()", "public double getNoCFSRatio()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.TieredMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.TieredMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.TieredMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.TieredMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException"], ["void", "org.apache.lucene.index.TieredMergePolicy.close()", "public void close()"], ["java.lang.String", "org.apache.lucene.index.TieredMergePolicy.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.index.TieredMergePolicy.getMaxCFSSegmentSizeMB()", "public final double getMaxCFSSegmentSizeMB()"], ["org.apache.lucene.index.TieredMergePolicy", "org.apache.lucene.index.TieredMergePolicy.setMaxCFSSegmentSizeMB(double)", "public final org.apache.lucene.index.TieredMergePolicy setMaxCFSSegmentSizeMB(double)"], ["org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException", "org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)", "public org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"], ["org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException", "org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)", "public org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"], ["org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper", "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper(org.apache.lucene.index.TwoPhaseCommit, java.util.Map<java.lang.String, java.lang.String>)", "public org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper(org.apache.lucene.index.TwoPhaseCommit, java.util.Map<java.lang.String, java.lang.String>)"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.prepareCommit()", "public void prepareCommit() throws java.io.IOException"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.prepareCommit(java.util.Map<java.lang.String, java.lang.String>)", "public void prepareCommit(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.commit()", "public void commit() throws java.io.IOException"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.commit(java.util.Map<java.lang.String, java.lang.String>)", "public void commit(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.rollback()", "public void rollback() throws java.io.IOException"], ["void", "org.apache.lucene.index.TwoPhaseCommitTool.execute(org.apache.lucene.index.TwoPhaseCommit...)", "public static void execute(org.apache.lucene.index.TwoPhaseCommit...) throws org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException, org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException"], ["org.apache.lucene.index.TypePromoter$IdentityTypePromoter", "org.apache.lucene.index.TypePromoter$IdentityTypePromoter()", "public org.apache.lucene.index.TypePromoter$IdentityTypePromoter()"], ["org.apache.lucene.index.TypePromoter", "org.apache.lucene.index.TypePromoter$IdentityTypePromoter.promote(org.apache.lucene.index.TypePromoter)", "public org.apache.lucene.index.TypePromoter promote(org.apache.lucene.index.TypePromoter)"], ["int", "org.apache.lucene.index.TypePromoter.getValueSize()", "public int getValueSize()"], ["org.apache.lucene.index.TypePromoter", "org.apache.lucene.index.TypePromoter.promote(org.apache.lucene.index.TypePromoter)", "public org.apache.lucene.index.TypePromoter promote(org.apache.lucene.index.TypePromoter)"], ["org.apache.lucene.index.DocValues$Type", "org.apache.lucene.index.TypePromoter.type()", "public org.apache.lucene.index.DocValues$Type type()"], ["java.lang.String", "org.apache.lucene.index.TypePromoter.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.TypePromoter.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.index.TypePromoter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.index.TypePromoter", "org.apache.lucene.index.TypePromoter.create(org.apache.lucene.index.DocValues$Type, int)", "public static org.apache.lucene.index.TypePromoter create(org.apache.lucene.index.DocValues$Type, int)"], ["int", "org.apache.lucene.index.TypePromoter.getValueSize(org.apache.lucene.index.DocValues$Type, org.apache.lucene.util.BytesRef)", "public static int getValueSize(org.apache.lucene.index.DocValues$Type, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.TypePromoter", "org.apache.lucene.index.TypePromoter.getIdentityPromoter()", "public static org.apache.lucene.index.TypePromoter getIdentityPromoter()"], ["org.apache.lucene.index.UpgradeIndexMergePolicy", "org.apache.lucene.index.UpgradeIndexMergePolicy(org.apache.lucene.index.MergePolicy)", "public org.apache.lucene.index.UpgradeIndexMergePolicy(org.apache.lucene.index.MergePolicy)"], ["void", "org.apache.lucene.index.UpgradeIndexMergePolicy.setIndexWriter(org.apache.lucene.index.IndexWriter)", "public void setIndexWriter(org.apache.lucene.index.IndexWriter)"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.UpgradeIndexMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.UpgradeIndexMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException"], ["void", "org.apache.lucene.index.UpgradeIndexMergePolicy.close()", "public void close()"], ["java.lang.String", "org.apache.lucene.index.UpgradeIndexMergePolicy.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.AutomatonQuery", "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton)"], ["int", "org.apache.lucene.search.AutomatonQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.AutomatonQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.AutomatonQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.BitsFilteredDocIdSet.wrap(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)", "public static org.apache.lucene.search.DocIdSet wrap(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)"], ["org.apache.lucene.search.BitsFilteredDocIdSet", "org.apache.lucene.search.BitsFilteredDocIdSet(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.BitsFilteredDocIdSet(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$1.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$2.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$3.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.BooleanClause$Occur[]", "org.apache.lucene.search.BooleanClause$Occur.values()", "public static org.apache.lucene.search.BooleanClause$Occur[] values()"], ["org.apache.lucene.search.BooleanClause$Occur", "org.apache.lucene.search.BooleanClause$Occur.valueOf(java.lang.String)", "public static org.apache.lucene.search.BooleanClause$Occur valueOf(java.lang.String)"], ["org.apache.lucene.search.BooleanClause", "org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)", "public org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.BooleanClause$Occur", "org.apache.lucene.search.BooleanClause.getOccur()", "public org.apache.lucene.search.BooleanClause$Occur getOccur()"], ["void", "org.apache.lucene.search.BooleanClause.setOccur(org.apache.lucene.search.BooleanClause$Occur)", "public void setOccur(org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanClause.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["void", "org.apache.lucene.search.BooleanClause.setQuery(org.apache.lucene.search.Query)", "public void setQuery(org.apache.lucene.search.Query)"], ["boolean", "org.apache.lucene.search.BooleanClause.isProhibited()", "public boolean isProhibited()"], ["boolean", "org.apache.lucene.search.BooleanClause.isRequired()", "public boolean isRequired()"], ["boolean", "org.apache.lucene.search.BooleanClause.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BooleanClause.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.BooleanQuery$BooleanWeight", "org.apache.lucene.search.BooleanQuery$BooleanWeight(org.apache.lucene.search.BooleanQuery, org.apache.lucene.search.IndexSearcher, boolean)", "public org.apache.lucene.search.BooleanQuery$BooleanWeight(org.apache.lucene.search.BooleanQuery, org.apache.lucene.search.IndexSearcher, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanQuery$BooleanWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.BooleanQuery$BooleanWeight.getValueForNormalization()", "public float getValueForNormalization() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanQuery$BooleanWeight.coord(int, int)", "public float coord(int, int)"], ["void", "org.apache.lucene.search.BooleanQuery$BooleanWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.BooleanQuery$BooleanWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.BooleanQuery$BooleanWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.BooleanQuery$BooleanWeight.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["org.apache.lucene.search.BooleanQuery$TooManyClauses", "org.apache.lucene.search.BooleanQuery$TooManyClauses()", "public org.apache.lucene.search.BooleanQuery$TooManyClauses()"], ["int", "org.apache.lucene.search.BooleanQuery.getMaxClauseCount()", "public static int getMaxClauseCount()"], ["void", "org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)", "public static void setMaxClauseCount(int)"], ["org.apache.lucene.search.BooleanQuery", "org.apache.lucene.search.BooleanQuery()", "public org.apache.lucene.search.BooleanQuery()"], ["org.apache.lucene.search.BooleanQuery", "org.apache.lucene.search.BooleanQuery(boolean)", "public org.apache.lucene.search.BooleanQuery(boolean)"], ["boolean", "org.apache.lucene.search.BooleanQuery.isCoordDisabled()", "public boolean isCoordDisabled()"], ["void", "org.apache.lucene.search.BooleanQuery.setMinimumNumberShouldMatch(int)", "public void setMinimumNumberShouldMatch(int)"], ["int", "org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()", "public int getMinimumNumberShouldMatch()"], ["void", "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)", "public void add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"], ["void", "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.BooleanClause)", "public void add(org.apache.lucene.search.BooleanClause)"], ["org.apache.lucene.search.BooleanClause[]", "org.apache.lucene.search.BooleanQuery.getClauses()", "public org.apache.lucene.search.BooleanClause[] getClauses()"], ["java.util.List<org.apache.lucene.search.BooleanClause>", "org.apache.lucene.search.BooleanQuery.clauses()", "public java.util.List<org.apache.lucene.search.BooleanClause> clauses()"], ["java.util.Iterator<org.apache.lucene.search.BooleanClause>", "org.apache.lucene.search.BooleanQuery.iterator()", "public final java.util.Iterator<org.apache.lucene.search.BooleanClause> iterator()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.BooleanQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.BooleanQuery", "org.apache.lucene.search.BooleanQuery.clone()", "public org.apache.lucene.search.BooleanQuery clone()"], ["java.lang.String", "org.apache.lucene.search.BooleanQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.BooleanQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BooleanQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.BooleanQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.BooleanScorer$BooleanScorerCollector", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector(int, org.apache.lucene.search.BooleanScorer$BucketTable)", "public org.apache.lucene.search.BooleanScorer$BooleanScorerCollector(int, org.apache.lucene.search.BooleanScorer$BucketTable)"], ["void", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["void", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["boolean", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.BooleanScorer$BucketScorer", "org.apache.lucene.search.BooleanScorer$BucketScorer(org.apache.lucene.search.Weight)", "public org.apache.lucene.search.BooleanScorer$BucketScorer(org.apache.lucene.search.Weight)"], ["int", "org.apache.lucene.search.BooleanScorer$BucketScorer.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.search.BooleanScorer$BucketScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.BooleanScorer$BucketScorer.freq()", "public float freq()"], ["int", "org.apache.lucene.search.BooleanScorer$BucketScorer.nextDoc()", "public int nextDoc()"], ["float", "org.apache.lucene.search.BooleanScorer$BucketScorer.score()", "public float score()"], ["org.apache.lucene.search.BooleanScorer$BucketTable", "org.apache.lucene.search.BooleanScorer$BucketTable()", "public org.apache.lucene.search.BooleanScorer$BucketTable()"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.BooleanScorer$BucketTable.newCollector(int)", "public org.apache.lucene.search.Collector newCollector(int)"], ["int", "org.apache.lucene.search.BooleanScorer$BucketTable.size()", "public int size()"], ["org.apache.lucene.search.BooleanScorer$SubScorer", "org.apache.lucene.search.BooleanScorer$SubScorer(org.apache.lucene.search.Scorer, boolean, boolean, org.apache.lucene.search.Collector, org.apache.lucene.search.BooleanScorer$SubScorer)", "public org.apache.lucene.search.BooleanScorer$SubScorer(org.apache.lucene.search.Scorer, boolean, boolean, org.apache.lucene.search.Collector, org.apache.lucene.search.BooleanScorer$SubScorer)"], ["boolean", "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.Collector, int, int)", "public boolean score(org.apache.lucene.search.Collector, int, int) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.search.BooleanScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer.nextDoc()", "public int nextDoc()"], ["float", "org.apache.lucene.search.BooleanScorer.score()", "public float score()"], ["float", "org.apache.lucene.search.BooleanScorer.freq()", "public float freq() throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.BooleanScorer.toString()", "public java.lang.String toString()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.BooleanScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["float", "org.apache.lucene.search.BooleanScorer2$1.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2$2.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.BooleanScorer2", "org.apache.lucene.search.BooleanScorer2(org.apache.lucene.search.BooleanQuery$BooleanWeight, boolean, int, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, int)", "public org.apache.lucene.search.BooleanScorer2(org.apache.lucene.search.BooleanQuery$BooleanWeight, boolean, int, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanScorer2.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.BooleanScorer2.score(org.apache.lucene.search.Collector, int, int)", "public boolean score(org.apache.lucene.search.Collector, int, int) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2.advance(int)", "public int advance(int) throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.BooleanScorer2.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.BoostAttributeImpl", "org.apache.lucene.search.BoostAttributeImpl()", "public org.apache.lucene.search.BoostAttributeImpl()"], ["void", "org.apache.lucene.search.BoostAttributeImpl.setBoost(float)", "public void setBoost(float)"], ["float", "org.apache.lucene.search.BoostAttributeImpl.getBoost()", "public float getBoost()"], ["void", "org.apache.lucene.search.BoostAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.search.BoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["boolean", "org.apache.lucene.search.CachingCollector$1.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.CachingCollector$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["void", "org.apache.lucene.search.CachingCollector$1.collect(int)", "public void collect(int)"], ["void", "org.apache.lucene.search.CachingCollector$1.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["float", "org.apache.lucene.search.CachingCollector$CachedScorer.score()", "public final float score()"], ["int", "org.apache.lucene.search.CachingCollector$CachedScorer.advance(int)", "public final int advance(int)"], ["int", "org.apache.lucene.search.CachingCollector$CachedScorer.docID()", "public final int docID()"], ["float", "org.apache.lucene.search.CachingCollector$CachedScorer.freq()", "public final float freq()"], ["int", "org.apache.lucene.search.CachingCollector$CachedScorer.nextDoc()", "public final int nextDoc()"], ["void", "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.replay(org.apache.lucene.search.Collector)", "public void replay(org.apache.lucene.search.Collector) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.replay(org.apache.lucene.search.Collector)", "public void replay(org.apache.lucene.search.Collector) throws java.io.IOException"], ["void", "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.CachingCollector$SegStart", "org.apache.lucene.search.CachingCollector$SegStart(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.CachingCollector$SegStart(org.apache.lucene.index.AtomicReaderContext, int)"], ["org.apache.lucene.search.CachingCollector", "org.apache.lucene.search.CachingCollector.create(boolean, boolean, double)", "public static org.apache.lucene.search.CachingCollector create(boolean, boolean, double)"], ["org.apache.lucene.search.CachingCollector", "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, double)", "public static org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector, boolean, double)"], ["org.apache.lucene.search.CachingCollector", "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, int)", "public static org.apache.lucene.search.CachingCollector create(org.apache.lucene.search.Collector, boolean, int)"], ["boolean", "org.apache.lucene.search.CachingCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["boolean", "org.apache.lucene.search.CachingCollector.isCached()", "public boolean isCached()"], ["void", "org.apache.lucene.search.CachingCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.CachingWrapperFilter", "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter)", "public org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.CachingWrapperFilter", "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter, boolean)", "public org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter, boolean)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.CachingWrapperFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.CachingWrapperFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.CachingWrapperFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.CachingWrapperFilter.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.CollectionStatistics", "org.apache.lucene.search.CollectionStatistics(java.lang.String, long, long, long, long)", "public org.apache.lucene.search.CollectionStatistics(java.lang.String, long, long, long, long)"], ["java.lang.String", "org.apache.lucene.search.CollectionStatistics.field()", "public final java.lang.String field()"], ["long", "org.apache.lucene.search.CollectionStatistics.maxDoc()", "public final long maxDoc()"], ["long", "org.apache.lucene.search.CollectionStatistics.docCount()", "public final long docCount()"], ["long", "org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq()", "public final long sumTotalTermFreq()"], ["long", "org.apache.lucene.search.CollectionStatistics.sumDocFreq()", "public final long sumDocFreq()"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.Collector()", "public org.apache.lucene.search.Collector()"], ["org.apache.lucene.search.ComplexExplanation", "org.apache.lucene.search.ComplexExplanation()", "public org.apache.lucene.search.ComplexExplanation()"], ["org.apache.lucene.search.ComplexExplanation", "org.apache.lucene.search.ComplexExplanation(boolean, float, java.lang.String)", "public org.apache.lucene.search.ComplexExplanation(boolean, float, java.lang.String)"], ["java.lang.Boolean", "org.apache.lucene.search.ComplexExplanation.getMatch()", "public java.lang.Boolean getMatch()"], ["void", "org.apache.lucene.search.ComplexExplanation.setMatch(java.lang.Boolean)", "public void setMatch(java.lang.Boolean)"], ["boolean", "org.apache.lucene.search.ComplexExplanation.isMatch()", "public boolean isMatch()"], ["int", "org.apache.lucene.search.ConjunctionScorer$1.compare(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)", "public int compare(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.ConjunctionScorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.ConjunctionScorer", "org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Weight, java.util.Collection<org.apache.lucene.search.Scorer>)", "public org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Weight, java.util.Collection<org.apache.lucene.search.Scorer>) throws java.io.IOException"], ["org.apache.lucene.search.ConjunctionScorer", "org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Weight, org.apache.lucene.search.Scorer...)", "public org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Weight, org.apache.lucene.search.Scorer...) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ConjunctionScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConjunctionScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConjunctionScorer.freq()", "public float freq() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ConjunctionScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["int", "org.apache.lucene.search.ConjunctionTermScorer$1.compare(org.apache.lucene.search.ConjunctionTermScorer$DocsAndFreqs, org.apache.lucene.search.ConjunctionTermScorer$DocsAndFreqs)", "public int compare(org.apache.lucene.search.ConjunctionTermScorer$DocsAndFreqs, org.apache.lucene.search.ConjunctionTermScorer$DocsAndFreqs)"], ["int", "org.apache.lucene.search.ConjunctionTermScorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.search.ConjunctionTermScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionTermScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ConjunctionTermScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConjunctionTermScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConjunctionTermScorer.freq()", "public float freq()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ConjunctionTermScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["void", "org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector.setNextEnum(org.apache.lucene.index.TermsEnum)", "public void setNextEnum(org.apache.lucene.index.TermsEnum)"], ["boolean", "org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector.collect(org.apache.lucene.util.BytesRef)", "public boolean collect(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart", "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart(int)", "public org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart(int)"], ["int[]", "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart.init()", "public int[] init()"], ["int[]", "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart.clear()", "public int[] clear()"], ["void", "org.apache.lucene.search.ConstantScoreAutoRewrite.setTermCountCutoff(int)", "public void setTermCountCutoff(int)"], ["int", "org.apache.lucene.search.ConstantScoreAutoRewrite.getTermCountCutoff()", "public int getTermCountCutoff()"], ["void", "org.apache.lucene.search.ConstantScoreAutoRewrite.setDocCountPercent(double)", "public void setDocCountPercent(double)"], ["double", "org.apache.lucene.search.ConstantScoreAutoRewrite.getDocCountPercent()", "public double getDocCountPercent()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreAutoRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreAutoRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.ConstantScoreAutoRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.ConstantScoreQuery$ConstantScorer", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.Weight, float)", "public org.apache.lucene.search.ConstantScoreQuery$ConstantScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.Weight, float)"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score(org.apache.lucene.search.Collector, int, int)", "public boolean score(org.apache.lucene.search.Collector, int, int) throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreQuery$ConstantWeight", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.ConstantScoreQuery$ConstantWeight(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getValueForNormalization()", "public float getValueForNormalization() throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreQuery", "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Query)", "public org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Query)"], ["org.apache.lucene.search.ConstantScoreQuery", "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Filter)", "public org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.ConstantScoreQuery.getFilter()", "public org.apache.lucene.search.Filter getFilter()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.ConstantScoreQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.ConstantScoreQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.ConstantScoreQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.ConstantScoreQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getValueForNormalization()", "public float getValueForNormalization() throws java.io.IOException"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionMaxQuery", "org.apache.lucene.search.DisjunctionMaxQuery(float)", "public org.apache.lucene.search.DisjunctionMaxQuery(float)"], ["org.apache.lucene.search.DisjunctionMaxQuery", "org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)", "public org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery.add(org.apache.lucene.search.Query)", "public void add(org.apache.lucene.search.Query)"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery.add(java.util.Collection<org.apache.lucene.search.Query>)", "public void add(java.util.Collection<org.apache.lucene.search.Query>)"], ["java.util.Iterator<org.apache.lucene.search.Query>", "org.apache.lucene.search.DisjunctionMaxQuery.iterator()", "public java.util.Iterator<org.apache.lucene.search.Query> iterator()"], ["java.util.ArrayList<org.apache.lucene.search.Query>", "org.apache.lucene.search.DisjunctionMaxQuery.getDisjuncts()", "public java.util.ArrayList<org.apache.lucene.search.Query> getDisjuncts()"], ["float", "org.apache.lucene.search.DisjunctionMaxQuery.getTieBreakerMultiplier()", "public float getTieBreakerMultiplier()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.DisjunctionMaxQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DisjunctionMaxQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionMaxQuery", "org.apache.lucene.search.DisjunctionMaxQuery.clone()", "public org.apache.lucene.search.DisjunctionMaxQuery clone()"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.DisjunctionMaxQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.DisjunctionMaxQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DisjunctionMaxQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DisjunctionMaxQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.DisjunctionMaxQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.DisjunctionMaxScorer", "org.apache.lucene.search.DisjunctionMaxScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.Scorer[], int)", "public org.apache.lucene.search.DisjunctionMaxScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.Scorer[], int)"], ["int", "org.apache.lucene.search.DisjunctionMaxScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionMaxScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.DisjunctionMaxScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.DisjunctionMaxScorer.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionMaxScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.DisjunctionScorer.getChildren()", "public final java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.DisjunctionSumScorer", "org.apache.lucene.search.DisjunctionSumScorer(org.apache.lucene.search.Weight, java.util.List<org.apache.lucene.search.Scorer>, int)", "public org.apache.lucene.search.DisjunctionSumScorer(org.apache.lucene.search.Weight, java.util.List<org.apache.lucene.search.Scorer>, int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionSumScorer", "org.apache.lucene.search.DisjunctionSumScorer(org.apache.lucene.search.Weight, java.util.List<org.apache.lucene.search.Scorer>)", "public org.apache.lucene.search.DisjunctionSumScorer(org.apache.lucene.search.Weight, java.util.List<org.apache.lucene.search.Scorer>) throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.DisjunctionSumScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.DisjunctionSumScorer.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.DocIdSet$1$1.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.search.DocIdSet$1$1.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DocIdSet$1$1.nextDoc()", "public int nextDoc()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSet$1.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["boolean", "org.apache.lucene.search.DocIdSet$1.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.DocIdSet$1.bits()", "public org.apache.lucene.util.Bits bits()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.DocIdSet()", "public org.apache.lucene.search.DocIdSet()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.DocIdSet.bits()", "public org.apache.lucene.util.Bits bits() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.DocIdSet.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSetIterator()", "public org.apache.lucene.search.DocIdSetIterator()"], ["org.apache.lucene.search.ExactPhraseScorer$ChunkState", "org.apache.lucene.search.ExactPhraseScorer$ChunkState(org.apache.lucene.index.DocsAndPositionsEnum, int, boolean)", "public org.apache.lucene.search.ExactPhraseScorer$ChunkState(org.apache.lucene.index.DocsAndPositionsEnum, int, boolean)"], ["int", "org.apache.lucene.search.ExactPhraseScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ExactPhraseScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.ExactPhraseScorer.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.ExactPhraseScorer.freq()", "public float freq()"], ["int", "org.apache.lucene.search.ExactPhraseScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ExactPhraseScorer.score()", "public float score()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation()", "public org.apache.lucene.search.Explanation()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation(float, java.lang.String)", "public org.apache.lucene.search.Explanation(float, java.lang.String)"], ["boolean", "org.apache.lucene.search.Explanation.isMatch()", "public boolean isMatch()"], ["float", "org.apache.lucene.search.Explanation.getValue()", "public float getValue()"], ["void", "org.apache.lucene.search.Explanation.setValue(float)", "public void setValue(float)"], ["java.lang.String", "org.apache.lucene.search.Explanation.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.lucene.search.Explanation.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["org.apache.lucene.search.Explanation[]", "org.apache.lucene.search.Explanation.getDetails()", "public org.apache.lucene.search.Explanation[] getDetails()"], ["void", "org.apache.lucene.search.Explanation.addDetail(org.apache.lucene.search.Explanation)", "public void addDetail(org.apache.lucene.search.Explanation)"], ["java.lang.String", "org.apache.lucene.search.Explanation.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.Explanation.toHtml()", "public java.lang.String toHtml()"], ["byte", "org.apache.lucene.search.FieldCache$1.parseByte(org.apache.lucene.util.BytesRef)", "public byte parseByte(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$1.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.search.FieldCache$10.parseDouble(org.apache.lucene.util.BytesRef)", "public double parseDouble(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$10.toString()", "public java.lang.String toString()"], ["short", "org.apache.lucene.search.FieldCache$2.parseShort(org.apache.lucene.util.BytesRef)", "public short parseShort(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$2.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.FieldCache$3.parseInt(org.apache.lucene.util.BytesRef)", "public int parseInt(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$3.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.FieldCache$4.parseFloat(org.apache.lucene.util.BytesRef)", "public float parseFloat(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$4.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.search.FieldCache$5.parseLong(org.apache.lucene.util.BytesRef)", "public long parseLong(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$5.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.search.FieldCache$6.parseDouble(org.apache.lucene.util.BytesRef)", "public double parseDouble(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$6.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.FieldCache$7.parseInt(org.apache.lucene.util.BytesRef)", "public int parseInt(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$7.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.FieldCache$8.parseFloat(org.apache.lucene.util.BytesRef)", "public float parseFloat(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$8.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.search.FieldCache$9.parseLong(org.apache.lucene.util.BytesRef)", "public long parseLong(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$9.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldCache$CacheEntry", "org.apache.lucene.search.FieldCache$CacheEntry()", "public org.apache.lucene.search.FieldCache$CacheEntry()"], ["void", "org.apache.lucene.search.FieldCache$CacheEntry.estimateSize()", "public void estimateSize()"], ["java.lang.String", "org.apache.lucene.search.FieldCache$CacheEntry.getEstimatedSize()", "public final java.lang.String getEstimatedSize()"], ["java.lang.String", "org.apache.lucene.search.FieldCache$CacheEntry.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldCache$CreationPlaceholder", "org.apache.lucene.search.FieldCache$CreationPlaceholder()", "public org.apache.lucene.search.FieldCache$CreationPlaceholder()"], ["org.apache.lucene.search.FieldCache$DocTerms", "org.apache.lucene.search.FieldCache$DocTerms()", "public org.apache.lucene.search.FieldCache$DocTerms()"], ["org.apache.lucene.search.FieldCache$DocTermsIndex", "org.apache.lucene.search.FieldCache$DocTermsIndex()", "public org.apache.lucene.search.FieldCache$DocTermsIndex()"], ["int", "org.apache.lucene.search.FieldCache$DocTermsIndex.binarySearchLookup(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int binarySearchLookup(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldCache$DocTermsIndex.getTerm(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getTerm(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.FieldCache$StopFillCacheException", "org.apache.lucene.search.FieldCache$StopFillCacheException()", "public org.apache.lucene.search.FieldCache$StopFillCacheException()"], ["boolean", "org.apache.lucene.search.FieldCacheDocIdSet$1.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$1.length()", "public int length()"], ["boolean", "org.apache.lucene.search.FieldCacheDocIdSet$2.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$2.length()", "public int length()"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$3.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$3.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$3.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$5.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$5.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.search.FieldCacheDocIdSet$5.advance(int)", "public int advance(int)"], ["org.apache.lucene.search.FieldCacheDocIdSet", "org.apache.lucene.search.FieldCacheDocIdSet(int, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.FieldCacheDocIdSet(int, org.apache.lucene.util.Bits)"], ["boolean", "org.apache.lucene.search.FieldCacheDocIdSet.isCacheable()", "public final boolean isCacheable()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.FieldCacheDocIdSet.bits()", "public final org.apache.lucene.util.Bits bits()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FieldCacheDocIdSet.iterator()", "public final org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldCacheImpl$1.onClose(org.apache.lucene.index.SegmentReader)", "public void onClose(org.apache.lucene.index.SegmentReader)"], ["void", "org.apache.lucene.search.FieldCacheImpl$2.onClose(org.apache.lucene.index.IndexReader)", "public void onClose(org.apache.lucene.index.IndexReader)"], ["void", "org.apache.lucene.search.FieldCacheImpl$Cache.purge(org.apache.lucene.index.AtomicReader)", "public void purge(org.apache.lucene.index.AtomicReader)"], ["void", "org.apache.lucene.search.FieldCacheImpl$Cache.put(org.apache.lucene.index.AtomicReader, org.apache.lucene.search.FieldCacheImpl$Entry, java.lang.Object)", "public void put(org.apache.lucene.index.AtomicReader, org.apache.lucene.search.FieldCacheImpl$Entry, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$Cache.get(org.apache.lucene.index.AtomicReader, org.apache.lucene.search.FieldCacheImpl$Entry, boolean)", "public java.lang.Object get(org.apache.lucene.index.AtomicReader, org.apache.lucene.search.FieldCacheImpl$Entry, boolean) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getReaderKey()", "public java.lang.Object getReaderKey()"], ["java.lang.String", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getFieldName()", "public java.lang.String getFieldName()"], ["java.lang.Class<?>", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getCacheType()", "public java.lang.Class<?> getCacheType()"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getCustom()", "public java.lang.Object getCustom()"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getValue()", "public java.lang.Object getValue()"], ["org.apache.lucene.search.FieldCacheImpl$DocTermsImpl", "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl(org.apache.lucene.util.PagedBytes$Reader, org.apache.lucene.util.packed.PackedInts$Reader)", "public org.apache.lucene.search.FieldCacheImpl$DocTermsImpl(org.apache.lucene.util.PagedBytes$Reader, org.apache.lucene.util.packed.PackedInts$Reader)"], ["int", "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl.size()", "public int size()"], ["boolean", "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl.exists(int)", "public boolean exists(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl.getTerm(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef getTerm(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum(org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl)", "public org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum(org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl)"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["long", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.ord()", "public long ord() throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.docFreq()", "public int docFreq()"], ["long", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.totalTermFreq()", "public long totalTermFreq()"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["void", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl(org.apache.lucene.util.PagedBytes$Reader, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.util.packed.PackedInts$Reader, int)", "public org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl(org.apache.lucene.util.PagedBytes$Reader, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.util.packed.PackedInts$Reader, int)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.getDocToOrd()", "public org.apache.lucene.util.packed.PackedInts$Reader getDocToOrd()"], ["int", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.numOrd()", "public int numOrd()"], ["int", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.getOrd(int)", "public int getOrd(int)"], ["int", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.size()", "public int size()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.lookup(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef lookup(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.getTermsEnum()", "public org.apache.lucene.index.TermsEnum getTermsEnum()"], ["boolean", "org.apache.lucene.search.FieldCacheImpl$Entry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FieldCacheImpl$Entry.hashCode()", "public int hashCode()"], ["synchronized", "org.apache.lucene.search.FieldCacheImpl.void purgeAllCaches()", "public synchronized void purgeAllCaches()"], ["synchronized", "org.apache.lucene.search.FieldCacheImpl.void purge(org.apache.lucene.index.AtomicReader)", "public synchronized void purge(org.apache.lucene.index.AtomicReader)"], ["synchronized", "org.apache.lucene.search.FieldCacheImpl.org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()", "public synchronized org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()"], ["byte[]", "org.apache.lucene.search.FieldCacheImpl.getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)", "public byte[] getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException"], ["byte[]", "org.apache.lucene.search.FieldCacheImpl.getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, boolean)", "public byte[] getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, boolean) throws java.io.IOException"], ["short[]", "org.apache.lucene.search.FieldCacheImpl.getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)", "public short[] getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException"], ["short[]", "org.apache.lucene.search.FieldCacheImpl.getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, boolean)", "public short[] getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, boolean) throws java.io.IOException"], ["int[]", "org.apache.lucene.search.FieldCacheImpl.getInts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)", "public int[] getInts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException"], ["int[]", "org.apache.lucene.search.FieldCacheImpl.getInts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$IntParser, boolean)", "public int[] getInts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$IntParser, boolean) throws java.io.IOException"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.FieldCacheImpl.getDocsWithField(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.util.Bits getDocsWithField(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["float[]", "org.apache.lucene.search.FieldCacheImpl.getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)", "public float[] getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException"], ["float[]", "org.apache.lucene.search.FieldCacheImpl.getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, boolean)", "public float[] getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, boolean) throws java.io.IOException"], ["long[]", "org.apache.lucene.search.FieldCacheImpl.getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)", "public long[] getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException"], ["long[]", "org.apache.lucene.search.FieldCacheImpl.getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$LongParser, boolean)", "public long[] getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$LongParser, boolean) throws java.io.IOException"], ["double[]", "org.apache.lucene.search.FieldCacheImpl.getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)", "public double[] getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, boolean) throws java.io.IOException"], ["double[]", "org.apache.lucene.search.FieldCacheImpl.getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, boolean)", "public double[] getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, boolean) throws java.io.IOException"], ["org.apache.lucene.search.FieldCache$DocTermsIndex", "org.apache.lucene.search.FieldCacheImpl.getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.search.FieldCache$DocTermsIndex getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.search.FieldCache$DocTermsIndex", "org.apache.lucene.search.FieldCacheImpl.getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String, float)", "public org.apache.lucene.search.FieldCache$DocTermsIndex getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String, float) throws java.io.IOException"], ["org.apache.lucene.search.FieldCache$DocTerms", "org.apache.lucene.search.FieldCacheImpl.getTerms(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.search.FieldCache$DocTerms getTerms(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.search.FieldCache$DocTerms", "org.apache.lucene.search.FieldCacheImpl.getTerms(org.apache.lucene.index.AtomicReader, java.lang.String, float)", "public org.apache.lucene.search.FieldCache$DocTerms getTerms(org.apache.lucene.index.AtomicReader, java.lang.String, float) throws java.io.IOException"], ["org.apache.lucene.index.DocTermOrds", "org.apache.lucene.search.FieldCacheImpl.getDocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String)", "public org.apache.lucene.index.DocTermOrds getDocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldCacheImpl.setInfoStream(java.io.PrintStream)", "public void setInfoStream(java.io.PrintStream)"], ["java.io.PrintStream", "org.apache.lucene.search.FieldCacheImpl.getInfoStream()", "public java.io.PrintStream getInfoStream()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$1.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$2.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$3.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$4.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$5.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$6.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$7.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.String>", "org.apache.lucene.search.FieldCacheRangeFilter.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.String> newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte>", "org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(java.lang.String, java.lang.Byte, java.lang.Byte, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte> newByteRange(java.lang.String, java.lang.Byte, java.lang.Byte, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte>", "org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, java.lang.Byte, java.lang.Byte, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte> newByteRange(java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, java.lang.Byte, java.lang.Byte, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short>", "org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(java.lang.String, java.lang.Short, java.lang.Short, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short> newShortRange(java.lang.String, java.lang.Short, java.lang.Short, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short>", "org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, java.lang.Short, java.lang.Short, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short> newShortRange(java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, java.lang.Short, java.lang.Short, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer>", "org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer> newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer>", "org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(java.lang.String, org.apache.lucene.search.FieldCache$IntParser, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer> newIntRange(java.lang.String, org.apache.lucene.search.FieldCache$IntParser, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long>", "org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long> newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long>", "org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(java.lang.String, org.apache.lucene.search.FieldCache$LongParser, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long> newLongRange(java.lang.String, org.apache.lucene.search.FieldCache$LongParser, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float>", "org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float> newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float>", "org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float> newFloatRange(java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double>", "org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double>", "org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, java.lang.Double, java.lang.Double, boolean, boolean)"], ["java.lang.String", "org.apache.lucene.search.FieldCacheRangeFilter.toString()", "public final java.lang.String toString()"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.apache.lucene.search.FieldCacheRangeFilter.getField()", "public java.lang.String getField()"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter.includesUpper()", "public boolean includesUpper()"], ["T", "org.apache.lucene.search.FieldCacheRangeFilter.getLowerVal()", "public T getLowerVal()"], ["T", "org.apache.lucene.search.FieldCacheRangeFilter.getUpperVal()", "public T getUpperVal()"], ["org.apache.lucene.search.FieldCache$Parser", "org.apache.lucene.search.FieldCacheRangeFilter.getParser()", "public org.apache.lucene.search.FieldCache$Parser getParser()"], ["org.apache.lucene.search.FieldCacheTermsFilter", "org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, org.apache.lucene.util.BytesRef...)", "public org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, org.apache.lucene.util.BytesRef...)"], ["org.apache.lucene.search.FieldCacheTermsFilter", "org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, java.lang.String...)", "public org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, java.lang.String...)"], ["org.apache.lucene.search.FieldCache", "org.apache.lucene.search.FieldCacheTermsFilter.getFieldCache()", "public org.apache.lucene.search.FieldCache getFieldCache()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheTermsFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$ByteComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$ByteComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$ByteComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Byte>", "org.apache.lucene.search.FieldComparator$ByteComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Byte> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$ByteComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Byte", "org.apache.lucene.search.FieldComparator$ByteComparator.value(int)", "public java.lang.Byte value(int)"], ["int", "org.apache.lucene.search.FieldComparator$ByteComparator.compareDocToValue(int, java.lang.Byte)", "public int compareDocToValue(int, java.lang.Byte)"], ["int", "org.apache.lucene.search.FieldComparator$ByteComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$ByteComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Integer>", "org.apache.lucene.search.FieldComparator$DocComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Integer> setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Integer", "org.apache.lucene.search.FieldComparator$DocComparator.value(int)", "public java.lang.Integer value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compareDocToValue(int, java.lang.Integer)", "public int compareDocToValue(int, java.lang.Integer)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$DocComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Double>", "org.apache.lucene.search.FieldComparator$DoubleComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Double> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Double", "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)", "public java.lang.Double value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compareDocToValue(int, java.lang.Double)", "public int compareDocToValue(int, java.lang.Double)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Float>", "org.apache.lucene.search.FieldComparator$FloatComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Float> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Float", "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)", "public java.lang.Float value(int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compareDocToValue(int, java.lang.Float)", "public int compareDocToValue(int, java.lang.Float)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Double>", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Double> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Double", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.value(int)", "public java.lang.Double value(int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compareDocToValue(int, java.lang.Double)", "public int compareDocToValue(int, java.lang.Double)"], ["int", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Integer>", "org.apache.lucene.search.FieldComparator$IntComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Integer> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Integer", "org.apache.lucene.search.FieldComparator$IntComparator.value(int)", "public java.lang.Integer value(int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compareDocToValue(int, java.lang.Integer)", "public int compareDocToValue(int, java.lang.Integer)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$IntComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Long>", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Long> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Long", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.value(int)", "public java.lang.Long value(int)"], ["int", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compareDocToValue(int, java.lang.Long)", "public int compareDocToValue(int, java.lang.Long)"], ["int", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Long>", "org.apache.lucene.search.FieldComparator$LongComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Long> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Long", "org.apache.lucene.search.FieldComparator$LongComparator.value(int)", "public java.lang.Long value(int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compareDocToValue(int, java.lang.Long)", "public int compareDocToValue(int, java.lang.Long)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$LongComparator.value(int)", "public java.lang.Object value(int)"], ["org.apache.lucene.search.FieldComparator$NumericComparator", "org.apache.lucene.search.FieldComparator$NumericComparator(java.lang.String, T)", "public org.apache.lucene.search.FieldComparator$NumericComparator(java.lang.String, T)"], ["org.apache.lucene.search.FieldComparator<T>", "org.apache.lucene.search.FieldComparator$NumericComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<T> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["org.apache.lucene.search.FieldComparator<java.lang.Float>", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Float> setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["java.lang.Float", "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)", "public java.lang.Float value(int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Float, java.lang.Float)", "public int compareValues(java.lang.Float, java.lang.Float)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareDocToValue(int, java.lang.Float)", "public int compareDocToValue(int, java.lang.Float) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$ShortComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$ShortComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$ShortComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<java.lang.Short>", "org.apache.lucene.search.FieldComparator$ShortComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<java.lang.Short> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$ShortComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Short", "org.apache.lucene.search.FieldComparator$ShortComparator.value(int)", "public java.lang.Short value(int)"], ["int", "org.apache.lucene.search.FieldComparator$ShortComparator.compareDocToValue(int, java.lang.Short)", "public int compareDocToValue(int, java.lang.Short)"], ["int", "org.apache.lucene.search.FieldComparator$ShortComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$ShortComparator.value(int)", "public java.lang.Object value(int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.search.FieldCache$DocTermsIndex, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.search.FieldCache$DocTermsIndex, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, byte[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, byte[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, int[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, int[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compare(int, int)", "public int compare(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.setBottom(int)", "public void setBottom(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)", "public int compareDocToValue(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.value(int)", "public java.lang.Object value(int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, short[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, short[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValComparator", "org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String)", "public org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.copy(int, int)", "public void copy(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)", "public int compareDocToValue(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setBottom(int)", "public void setBottom(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)", "public java.lang.Object value(int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, org.apache.lucene.util.packed.PackedInts$Reader, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, org.apache.lucene.util.packed.PackedInts$Reader, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, byte[], org.apache.lucene.index.DocValues$SortedSource, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, byte[], org.apache.lucene.index.DocValues$SortedSource, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, int[], org.apache.lucene.index.DocValues$SortedSource, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, int[], org.apache.lucene.index.DocValues$SortedSource, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compare(int, int)", "public int compare(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.setBottom(int)", "public void setBottom(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)", "public int compareDocToValue(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.value(int)", "public java.lang.Object value(int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, short[], org.apache.lucene.index.DocValues$SortedSource, int)", "public org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, short[], org.apache.lucene.index.DocValues$SortedSource, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator(int, java.lang.String)", "public org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator(int, java.lang.String)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.copy(int, int)", "public void copy(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)", "public int compareDocToValue(int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.setBottom(int)", "public void setBottom(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldComparator$TermValComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermValComparator.setBottom(int)", "public void setBottom(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)", "public int compareDocToValue(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)", "public java.lang.Object value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.copy(int, int)", "public void copy(int, int)"], ["org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.FieldComparator<org.apache.lucene.util.BytesRef> setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.setBottom(int)", "public void setBottom(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.value(int)", "public org.apache.lucene.util.BytesRef value(int)"], ["int", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)", "public int compareDocToValue(int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareDocToValue(int, java.lang.Object)", "public int compareDocToValue(int, java.lang.Object) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareValues(java.lang.Object, java.lang.Object)", "public int compareValues(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.value(int)", "public java.lang.Object value(int)"], ["org.apache.lucene.search.FieldComparator", "org.apache.lucene.search.FieldComparator()", "public org.apache.lucene.search.FieldComparator()"], ["void", "org.apache.lucene.search.FieldComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.FieldComparator.compareValues(T, T)", "public int compareValues(T, T)"], ["org.apache.lucene.search.FieldComparatorSource", "org.apache.lucene.search.FieldComparatorSource()", "public org.apache.lucene.search.FieldComparatorSource()"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float)", "public org.apache.lucene.search.FieldDoc(int, float)"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[])", "public org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[])"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[], int)", "public org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[], int)"], ["java.lang.String", "org.apache.lucene.search.FieldDoc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldValueFilter", "org.apache.lucene.search.FieldValueFilter(java.lang.String)", "public org.apache.lucene.search.FieldValueFilter(java.lang.String)"], ["org.apache.lucene.search.FieldValueFilter", "org.apache.lucene.search.FieldValueFilter(java.lang.String, boolean)", "public org.apache.lucene.search.FieldValueFilter(java.lang.String, boolean)"], ["java.lang.String", "org.apache.lucene.search.FieldValueFilter.field()", "public java.lang.String field()"], ["boolean", "org.apache.lucene.search.FieldValueFilter.negate()", "public boolean negate()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldValueFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldValueFilter.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.FieldValueFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.FieldValueFilter.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldValueHitQueue$Entry", "org.apache.lucene.search.FieldValueHitQueue$Entry(int, int, float)", "public org.apache.lucene.search.FieldValueHitQueue$Entry(int, int, float)"], ["java.lang.String", "org.apache.lucene.search.FieldValueHitQueue$Entry.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int)", "public org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int) throws java.io.IOException"], ["org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int)", "public org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int) throws java.io.IOException"], ["<T extends org.apache.lucene.search.FieldValueHitQueue$Entry> org.apache.lucene.search.FieldValueHitQueue<T>", "org.apache.lucene.search.FieldValueHitQueue.create(org.apache.lucene.search.SortField[], int)", "public static <T extends org.apache.lucene.search.FieldValueHitQueue$Entry> org.apache.lucene.search.FieldValueHitQueue<T> create(org.apache.lucene.search.SortField[], int) throws java.io.IOException"], ["org.apache.lucene.search.FieldComparator<?>[]", "org.apache.lucene.search.FieldValueHitQueue.getComparators()", "public org.apache.lucene.search.FieldComparator<?>[] getComparators()"], ["int[]", "org.apache.lucene.search.FieldValueHitQueue.getReverseMul()", "public int[] getReverseMul()"], ["void", "org.apache.lucene.search.FieldValueHitQueue.setComparator(int, org.apache.lucene.search.FieldComparator<?>)", "public void setComparator(int, org.apache.lucene.search.FieldComparator<?>)"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.Filter()", "public org.apache.lucene.search.Filter()"], ["boolean", "org.apache.lucene.search.FilteredDocIdSet$1.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.search.FilteredDocIdSet$1.length()", "public int length()"], ["org.apache.lucene.search.FilteredDocIdSet", "org.apache.lucene.search.FilteredDocIdSet(org.apache.lucene.search.DocIdSet)", "public org.apache.lucene.search.FilteredDocIdSet(org.apache.lucene.search.DocIdSet)"], ["boolean", "org.apache.lucene.search.FilteredDocIdSet.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.search.FilteredDocIdSet.bits()", "public org.apache.lucene.util.Bits bits() throws java.io.IOException"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FilteredDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["org.apache.lucene.search.FilteredDocIdSetIterator", "org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FilteredQuery$1$1.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredQuery$1$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredQuery$1$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredQuery$1$1.docID()", "public int docID()"], ["float", "org.apache.lucene.search.FilteredQuery$1$1.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.FilteredQuery$1$1.freq()", "public float freq() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.FilteredQuery$1$1.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["boolean", "org.apache.lucene.search.FilteredQuery$1.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["float", "org.apache.lucene.search.FilteredQuery$1.getValueForNormalization()", "public float getValueForNormalization() throws java.io.IOException"], ["void", "org.apache.lucene.search.FilteredQuery$1.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.FilteredQuery$1.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FilteredQuery$1.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.FilteredQuery$1.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.FilteredQuery", "org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter)", "public org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.FilteredQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FilteredQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FilteredQuery.getQuery()", "public final org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.FilteredQuery.getFilter()", "public final org.apache.lucene.search.Filter getFilter()"], ["void", "org.apache.lucene.search.FilteredQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.FilteredQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.FilteredQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FilteredQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int, int, boolean)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int, int, boolean)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)"], ["int", "org.apache.lucene.search.FuzzyQuery.getMaxEdits()", "public int getMaxEdits()"], ["int", "org.apache.lucene.search.FuzzyQuery.getPrefixLength()", "public int getPrefixLength()"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.FuzzyQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.FuzzyQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.FuzzyQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.FuzzyQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FuzzyQuery.floatToEdits(float, int)", "public static int floatToEdits(float, int)"], ["org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum", "org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum(org.apache.lucene.search.FuzzyTermsEnum, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton[])", "public org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum(org.apache.lucene.search.FuzzyTermsEnum, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton[])"], ["org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl()", "public org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl()"], ["java.util.List<org.apache.lucene.util.automaton.CompiledAutomaton>", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.automata()", "public java.util.List<org.apache.lucene.util.automaton.CompiledAutomaton> automata()"], ["void", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.clear()", "public void clear()"], ["int", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.search.FuzzyTermsEnum", "org.apache.lucene.search.FuzzyTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource, org.apache.lucene.index.Term, float, int, boolean)", "public org.apache.lucene.search.FuzzyTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource, org.apache.lucene.index.Term, float, int, boolean) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FuzzyTermsEnum.next()", "public org.apache.lucene.util.BytesRef next() throws java.io.IOException"], ["int", "org.apache.lucene.search.FuzzyTermsEnum.docFreq()", "public int docFreq() throws java.io.IOException"], ["long", "org.apache.lucene.search.FuzzyTermsEnum.totalTermFreq()", "public long totalTermFreq() throws java.io.IOException"], ["org.apache.lucene.index.DocsEnum", "org.apache.lucene.search.FuzzyTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)", "public org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int) throws java.io.IOException"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.search.FuzzyTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)", "public org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)", "public void seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState) throws java.io.IOException"], ["org.apache.lucene.index.TermState", "org.apache.lucene.search.FuzzyTermsEnum.termState()", "public org.apache.lucene.index.TermState termState() throws java.io.IOException"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.FuzzyTermsEnum.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["long", "org.apache.lucene.search.FuzzyTermsEnum.ord()", "public long ord() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)", "public boolean seekExact(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["org.apache.lucene.index.TermsEnum$SeekStatus", "org.apache.lucene.search.FuzzyTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)", "public org.apache.lucene.index.TermsEnum$SeekStatus seekCeil(org.apache.lucene.util.BytesRef, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.FuzzyTermsEnum.seekExact(long)", "public void seekExact(long) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.FuzzyTermsEnum.term()", "public org.apache.lucene.util.BytesRef term() throws java.io.IOException"], ["float", "org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity()", "public float getMinSimilarity()"], ["float", "org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor()", "public float getScaleFactor()"], ["boolean", "org.apache.lucene.search.IndexSearcher$ExecutionHelper.hasNext()", "public boolean hasNext()"], ["void", "org.apache.lucene.search.IndexSearcher$ExecutionHelper.submit(java.util.concurrent.Callable<T>)", "public void submit(java.util.concurrent.Callable<T>)"], ["T", "org.apache.lucene.search.IndexSearcher$ExecutionHelper.next()", "public T next()"], ["void", "org.apache.lucene.search.IndexSearcher$ExecutionHelper.remove()", "public void remove()"], ["java.util.Iterator<T>", "org.apache.lucene.search.IndexSearcher$ExecutionHelper.iterator()", "public java.util.Iterator<T> iterator()"], ["org.apache.lucene.search.IndexSearcher$LeafSlice", "org.apache.lucene.search.IndexSearcher$LeafSlice(org.apache.lucene.index.AtomicReaderContext...)", "public org.apache.lucene.search.IndexSearcher$LeafSlice(org.apache.lucene.index.AtomicReaderContext...)"], ["org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort", "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.IndexSearcher$LeafSlice, org.apache.lucene.search.Weight, org.apache.lucene.search.ScoreDoc, int, org.apache.lucene.search.HitQueue)", "public org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.IndexSearcher$LeafSlice, org.apache.lucene.search.Weight, org.apache.lucene.search.ScoreDoc, int, org.apache.lucene.search.HitQueue)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort.call()", "public org.apache.lucene.search.TopDocs call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer(org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort)", "public org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer(org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort)"], ["int", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.freq()", "public float freq()"], ["int", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.nextDoc()", "public int nextDoc()"], ["float", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.score()", "public float score()"], ["org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.IndexSearcher$LeafSlice, org.apache.lucene.search.Weight, org.apache.lucene.search.FieldDoc, int, org.apache.lucene.search.TopFieldCollector, org.apache.lucene.search.Sort, boolean, boolean)", "public org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.IndexSearcher$LeafSlice, org.apache.lucene.search.Weight, org.apache.lucene.search.FieldDoc, int, org.apache.lucene.search.TopFieldCollector, org.apache.lucene.search.Sort, boolean, boolean)"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort.call()", "public org.apache.lucene.search.TopFieldDocs call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.search.IndexSearcher.getDefaultSimilarity()", "public static org.apache.lucene.search.similarities.Similarity getDefaultSimilarity()"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, java.util.concurrent.ExecutorService)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, java.util.concurrent.ExecutorService)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext, java.util.concurrent.ExecutorService)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext, java.util.concurrent.ExecutorService)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext)"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.search.IndexSearcher.getIndexReader()", "public org.apache.lucene.index.IndexReader getIndexReader()"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.IndexSearcher.doc(int)", "public org.apache.lucene.document.Document doc(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.doc(int, org.apache.lucene.index.StoredFieldVisitor)", "public void doc(int, org.apache.lucene.index.StoredFieldVisitor) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.IndexSearcher.document(int, java.util.Set<java.lang.String>)", "public final org.apache.lucene.document.Document document(int, java.util.Set<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.setSimilarity(org.apache.lucene.search.similarities.Similarity)", "public void setSimilarity(org.apache.lucene.search.similarities.Similarity)"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.search.IndexSearcher.getSimilarity()", "public org.apache.lucene.search.similarities.Similarity getSimilarity()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query, int) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean)", "public org.apache.lucene.search.TopDocs searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.IndexSearcher.rewrite(org.apache.lucene.search.Query)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.IndexSearcher.explain(org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.Query, int) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.IndexSearcher.createNormalizedWeight(org.apache.lucene.search.Query)", "public org.apache.lucene.search.Weight createNormalizedWeight(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.index.IndexReaderContext", "org.apache.lucene.search.IndexSearcher.getTopReaderContext()", "public org.apache.lucene.index.IndexReaderContext getTopReaderContext()"], ["java.lang.String", "org.apache.lucene.search.IndexSearcher.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.TermStatistics", "org.apache.lucene.search.IndexSearcher.termStatistics(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TermStatistics termStatistics(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext) throws java.io.IOException"], ["org.apache.lucene.search.CollectionStatistics", "org.apache.lucene.search.IndexSearcher.collectionStatistics(java.lang.String)", "public org.apache.lucene.search.CollectionStatistics collectionStatistics(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight(org.apache.lucene.search.MatchAllDocsQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight(org.apache.lucene.search.MatchAllDocsQuery, org.apache.lucene.search.IndexSearcher)"], ["java.lang.String", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int)"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.score()", "public float score()"], ["float", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.freq()", "public float freq()"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.MatchAllDocsQuery", "org.apache.lucene.search.MatchAllDocsQuery()", "public org.apache.lucene.search.MatchAllDocsQuery()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MatchAllDocsQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher)"], ["void", "org.apache.lucene.search.MatchAllDocsQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.MatchAllDocsQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MatchAllDocsQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MatchAllDocsQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl()", "public org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setMaxNonCompetitiveBoost(float)", "public void setMaxNonCompetitiveBoost(float)"], ["float", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getMaxNonCompetitiveBoost()", "public float getMaxNonCompetitiveBoost()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setCompetitiveTerm(org.apache.lucene.util.BytesRef)", "public void setCompetitiveTerm(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getCompetitiveTerm()", "public org.apache.lucene.util.BytesRef getCompetitiveTerm()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.clear()", "public void clear()"], ["void", "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.MultiCollector.wrap(org.apache.lucene.search.Collector...)", "public static org.apache.lucene.search.Collector wrap(org.apache.lucene.search.Collector...)"], ["boolean", "org.apache.lucene.search.MultiCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.MultiCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.MultiPhraseQuery", "org.apache.lucene.search.MultiPhraseQuery()", "public org.apache.lucene.search.MultiPhraseQuery()"], ["void", "org.apache.lucene.search.MultiPhraseQuery.setSlop(int)", "public void setSlop(int)"], ["int", "org.apache.lucene.search.MultiPhraseQuery.getSlop()", "public int getSlop()"], ["void", "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term)", "public void add(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[])", "public void add(org.apache.lucene.index.Term[])"], ["void", "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[], int)", "public void add(org.apache.lucene.index.Term[], int)"], ["java.util.List<org.apache.lucene.index.Term[]>", "org.apache.lucene.search.MultiPhraseQuery.getTermArrays()", "public java.util.List<org.apache.lucene.index.Term[]> getTermArrays()"], ["int[]", "org.apache.lucene.search.MultiPhraseQuery.getPositions()", "public int[] getPositions()"], ["void", "org.apache.lucene.search.MultiPhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MultiPhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.MultiPhraseQuery.toString(java.lang.String)", "public final java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MultiPhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiPhraseQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"], ["void", "org.apache.lucene.search.MultiTermQuery$2.setTermCountCutoff(int)", "public void setTermCountCutoff(int)"], ["void", "org.apache.lucene.search.MultiTermQuery$2.setDocCountPercent(double)", "public void setDocCountPercent(double)"], ["org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite()", "public org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite()"], ["boolean", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["double", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.getDocCountPercent()", "public double getDocCountPercent()"], ["void", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.setDocCountPercent(double)", "public void setDocCountPercent(double)"], ["int", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.getTermCountCutoff()", "public int getTermCountCutoff()"], ["void", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.setTermCountCutoff(int)", "public void setTermCountCutoff(int)"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.search.MultiTermQuery$RewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod()"], ["org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite", "org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(int)", "public org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(int)"], ["org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite", "org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite(int)", "public org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite(int)"], ["org.apache.lucene.search.MultiTermQuery", "org.apache.lucene.search.MultiTermQuery(java.lang.String)", "public org.apache.lucene.search.MultiTermQuery(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.MultiTermQuery.getField()", "public final java.lang.String getField()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery.rewrite(org.apache.lucene.index.IndexReader)", "public final org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.search.MultiTermQuery.getRewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod getRewriteMethod()"], ["void", "org.apache.lucene.search.MultiTermQuery.setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)", "public void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"], ["int", "org.apache.lucene.search.MultiTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.MultiTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.MultiTermQueryWrapperFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.MultiTermQueryWrapperFilter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiTermQueryWrapperFilter.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.apache.lucene.search.MultiTermQueryWrapperFilter.getField()", "public final java.lang.String getField()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.NGramPhraseQuery", "org.apache.lucene.search.NGramPhraseQuery(int)", "public org.apache.lucene.search.NGramPhraseQuery(int)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.NGramPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.NGramPhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.NGramPhraseQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.NRTManager$TrackingIndexWriter", "org.apache.lucene.search.NRTManager$TrackingIndexWriter(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.search.NRTManager$TrackingIndexWriter(org.apache.lucene.index.IndexWriter)"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)", "public long updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)", "public long updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)", "public long updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)", "public long updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.index.Term)", "public long deleteDocuments(org.apache.lucene.index.Term) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.index.Term...)", "public long deleteDocuments(org.apache.lucene.index.Term...) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.search.Query)", "public long deleteDocuments(org.apache.lucene.search.Query) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.search.Query...)", "public long deleteDocuments(org.apache.lucene.search.Query...) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteAll()", "public long deleteAll() throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)", "public long addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)", "public long addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)", "public long addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)", "public long addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addIndexes(org.apache.lucene.store.Directory...)", "public long addIndexes(org.apache.lucene.store.Directory...) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addIndexes(org.apache.lucene.index.IndexReader...)", "public long addIndexes(org.apache.lucene.index.IndexReader...) throws java.io.IOException"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.getGeneration()", "public long getGeneration()"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.getIndexWriter()", "public org.apache.lucene.index.IndexWriter getIndexWriter()"], ["long", "org.apache.lucene.search.NRTManager$TrackingIndexWriter.tryDeleteDocument(org.apache.lucene.index.IndexReader, int)", "public long tryDeleteDocument(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.NRTManager", "org.apache.lucene.search.NRTManager(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.NRTManager(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["org.apache.lucene.search.NRTManager", "org.apache.lucene.search.NRTManager(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory, boolean)", "public org.apache.lucene.search.NRTManager(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.NRTManager.addWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)", "public void addWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)"], ["void", "org.apache.lucene.search.NRTManager.removeWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)", "public void removeWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)"], ["void", "org.apache.lucene.search.NRTManager.waitForGeneration(long)", "public void waitForGeneration(long)"], ["void", "org.apache.lucene.search.NRTManager.waitForGeneration(long, long, java.util.concurrent.TimeUnit)", "public void waitForGeneration(long, long, java.util.concurrent.TimeUnit)"], ["long", "org.apache.lucene.search.NRTManager.getCurrentSearchingGen()", "public long getCurrentSearchingGen()"], ["boolean", "org.apache.lucene.search.NRTManager.isSearcherCurrent()", "public boolean isSearcherCurrent() throws java.io.IOException"], ["org.apache.lucene.search.NRTManagerReopenThread", "org.apache.lucene.search.NRTManagerReopenThread(org.apache.lucene.search.NRTManager, double, double)", "public org.apache.lucene.search.NRTManagerReopenThread(org.apache.lucene.search.NRTManager, double, double)"], ["synchronized", "org.apache.lucene.search.NRTManagerReopenThread.void close()", "public synchronized void close()"], ["synchronized", "org.apache.lucene.search.NRTManagerReopenThread.void waiting(long)", "public synchronized void waiting(long)"], ["void", "org.apache.lucene.search.NRTManagerReopenThread.run()", "public void run()"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Long>", "org.apache.lucene.search.NumericRangeFilter.newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Long> newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Long>", "org.apache.lucene.search.NumericRangeFilter.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Long> newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Integer>", "org.apache.lucene.search.NumericRangeFilter.newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Integer> newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Integer>", "org.apache.lucene.search.NumericRangeFilter.newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Integer> newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Double>", "org.apache.lucene.search.NumericRangeFilter.newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Double>", "org.apache.lucene.search.NumericRangeFilter.newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Float>", "org.apache.lucene.search.NumericRangeFilter.newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Float> newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Float>", "org.apache.lucene.search.NumericRangeFilter.newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Float> newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)"], ["boolean", "org.apache.lucene.search.NumericRangeFilter.includesMin()", "public boolean includesMin()"], ["boolean", "org.apache.lucene.search.NumericRangeFilter.includesMax()", "public boolean includesMax()"], ["T", "org.apache.lucene.search.NumericRangeFilter.getMin()", "public T getMin()"], ["T", "org.apache.lucene.search.NumericRangeFilter.getMax()", "public T getMax()"], ["int", "org.apache.lucene.search.NumericRangeFilter.getPrecisionStep()", "public int getPrecisionStep()"], ["void", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum$1.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public final void addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum$2.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public final void addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Long>", "org.apache.lucene.search.NumericRangeQuery.newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Long> newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Long>", "org.apache.lucene.search.NumericRangeQuery.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Long> newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Integer>", "org.apache.lucene.search.NumericRangeQuery.newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Integer> newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Integer>", "org.apache.lucene.search.NumericRangeQuery.newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Integer> newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Double>", "org.apache.lucene.search.NumericRangeQuery.newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Double> newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Double>", "org.apache.lucene.search.NumericRangeQuery.newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Double> newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Float>", "org.apache.lucene.search.NumericRangeQuery.newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Float> newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Float>", "org.apache.lucene.search.NumericRangeQuery.newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Float> newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)"], ["boolean", "org.apache.lucene.search.NumericRangeQuery.includesMin()", "public boolean includesMin()"], ["boolean", "org.apache.lucene.search.NumericRangeQuery.includesMax()", "public boolean includesMax()"], ["T", "org.apache.lucene.search.NumericRangeQuery.getMin()", "public T getMin()"], ["T", "org.apache.lucene.search.NumericRangeQuery.getMax()", "public T getMax()"], ["int", "org.apache.lucene.search.NumericRangeQuery.getPrecisionStep()", "public int getPrecisionStep()"], ["java.lang.String", "org.apache.lucene.search.NumericRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.NumericRangeQuery.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.NumericRangeQuery.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.apache.lucene.search.PhrasePositions.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.PhraseQuery$PhraseWeight", "org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.PhraseQuery$PhraseWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.PhraseQuery$PhraseWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.PhraseQuery$PhraseWeight.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.PhraseQuery$PhraseWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PhraseQuery$PhraseWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.PhraseQuery$PhraseWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.PhraseQuery$PostingsAndFreq", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq(org.apache.lucene.index.DocsAndPositionsEnum, int, int, org.apache.lucene.index.Term...)", "public org.apache.lucene.search.PhraseQuery$PostingsAndFreq(org.apache.lucene.index.DocsAndPositionsEnum, int, int, org.apache.lucene.index.Term...)"], ["int", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq)", "public int compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq)"], ["int", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery()", "public org.apache.lucene.search.PhraseQuery()"], ["void", "org.apache.lucene.search.PhraseQuery.setSlop(int)", "public void setSlop(int)"], ["int", "org.apache.lucene.search.PhraseQuery.getSlop()", "public int getSlop()"], ["void", "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term)", "public void add(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term, int)", "public void add(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.index.Term[]", "org.apache.lucene.search.PhraseQuery.getTerms()", "public org.apache.lucene.index.Term[] getTerms()"], ["int[]", "org.apache.lucene.search.PhraseQuery.getPositions()", "public int[] getPositions()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.PhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.PhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["void", "org.apache.lucene.search.PhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.PhraseQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.PhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.PhraseQuery.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.search.PhraseScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.PhraseScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.PhraseScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.PhraseScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["float", "org.apache.lucene.search.PhraseScorer.freq()", "public final float freq()"], ["java.lang.String", "org.apache.lucene.search.PhraseScorer.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.PositiveScoresOnlyCollector", "org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)", "public org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.PositiveScoresOnlyCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.PrefixFilter", "org.apache.lucene.search.PrefixFilter(org.apache.lucene.index.Term)", "public org.apache.lucene.search.PrefixFilter(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.PrefixFilter.getPrefix()", "public org.apache.lucene.index.Term getPrefix()"], ["java.lang.String", "org.apache.lucene.search.PrefixFilter.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.PrefixQuery", "org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.PrefixQuery.getPrefix()", "public org.apache.lucene.index.Term getPrefix()"], ["java.lang.String", "org.apache.lucene.search.PrefixQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.PrefixQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.PrefixQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.PrefixTermsEnum", "org.apache.lucene.search.PrefixTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.search.PrefixTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query()", "public org.apache.lucene.search.Query()"], ["void", "org.apache.lucene.search.Query.setBoost(float)", "public void setBoost(float)"], ["float", "org.apache.lucene.search.Query.getBoost()", "public float getBoost()"], ["java.lang.String", "org.apache.lucene.search.Query.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Query.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.Query.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query.clone()", "public org.apache.lucene.search.Query clone()"], ["int", "org.apache.lucene.search.Query.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.Query.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.search.Query.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.QueryWrapperFilter$1.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.QueryWrapperFilter$1.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.QueryWrapperFilter", "org.apache.lucene.search.QueryWrapperFilter(org.apache.lucene.search.Query)", "public org.apache.lucene.search.QueryWrapperFilter(org.apache.lucene.search.Query)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.QueryWrapperFilter.getQuery()", "public final org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.QueryWrapperFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.QueryWrapperFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.QueryWrapperFilter.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.ReferenceManager", "org.apache.lucene.search.ReferenceManager()", "public org.apache.lucene.search.ReferenceManager()"], ["G", "org.apache.lucene.search.ReferenceManager.acquire()", "public final G acquire()"], ["synchronized", "org.apache.lucene.search.ReferenceManager.void close()", "public final synchronized void close() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.ReferenceManager.maybeRefresh()", "public final boolean maybeRefresh() throws java.io.IOException"], ["void", "org.apache.lucene.search.ReferenceManager.maybeRefreshBlocking()", "public final void maybeRefreshBlocking() throws java.io.IOException"], ["void", "org.apache.lucene.search.ReferenceManager.release(G)", "public final void release(G) throws java.io.IOException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.RegexpQuery$1.getAutomaton(java.lang.String)", "public org.apache.lucene.util.automaton.Automaton getAutomaton(java.lang.String)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.search.RegexpQuery", "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, org.apache.lucene.util.automaton.AutomatonProvider)", "public org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, org.apache.lucene.util.automaton.AutomatonProvider)"], ["java.lang.String", "org.apache.lucene.search.RegexpQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.ReqExclScorer", "org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.search.ReqExclScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqExclScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ReqExclScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.ReqExclScorer.freq()", "public float freq() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ReqExclScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["int", "org.apache.lucene.search.ReqExclScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.ReqOptSumScorer", "org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.ReqOptSumScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqOptSumScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqOptSumScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ReqOptSumScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.ReqOptSumScorer.freq()", "public float freq() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ReqOptSumScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.ScoreCachingWrappingScorer", "org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)"], ["boolean", "org.apache.lucene.search.ScoreCachingWrappingScorer.score(org.apache.lucene.search.Collector, int, int)", "public boolean score(org.apache.lucene.search.Collector, int, int) throws java.io.IOException"], ["float", "org.apache.lucene.search.ScoreCachingWrappingScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.ScoreCachingWrappingScorer.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.ScoreCachingWrappingScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ScoreCachingWrappingScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["void", "org.apache.lucene.search.ScoreCachingWrappingScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["int", "org.apache.lucene.search.ScoreCachingWrappingScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.ScoreCachingWrappingScorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.ScoreDoc", "org.apache.lucene.search.ScoreDoc(int, float)", "public org.apache.lucene.search.ScoreDoc(int, float)"], ["org.apache.lucene.search.ScoreDoc", "org.apache.lucene.search.ScoreDoc(int, float, int)", "public org.apache.lucene.search.ScoreDoc(int, float, int)"], ["java.lang.String", "org.apache.lucene.search.ScoreDoc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Scorer$ChildScorer", "org.apache.lucene.search.Scorer$ChildScorer(org.apache.lucene.search.Scorer, java.lang.String)", "public org.apache.lucene.search.Scorer$ChildScorer(org.apache.lucene.search.Scorer, java.lang.String)"], ["void", "org.apache.lucene.search.Scorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.Scorer.score(org.apache.lucene.search.Collector, int, int)", "public boolean score(org.apache.lucene.search.Collector, int, int) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Scorer.getWeight()", "public org.apache.lucene.search.Weight getWeight()"], ["java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer>", "org.apache.lucene.search.Scorer.getChildren()", "public java.util.Collection<org.apache.lucene.search.Scorer$ChildScorer> getChildren()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ScoringRewrite$2.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["void", "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.setNextEnum(org.apache.lucene.index.TermsEnum)", "public void setNextEnum(org.apache.lucene.index.TermsEnum)"], ["boolean", "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.collect(org.apache.lucene.util.BytesRef)", "public boolean collect(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart(int)", "public org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart(int)"], ["int[]", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.init()", "public int[] init()"], ["int[]", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.clear()", "public int[] clear()"], ["org.apache.lucene.search.ScoringRewrite", "org.apache.lucene.search.ScoringRewrite()", "public org.apache.lucene.search.ScoringRewrite()"], ["Q", "org.apache.lucene.search.ScoringRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public final Q rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.SearcherFactory", "org.apache.lucene.search.SearcherFactory()", "public org.apache.lucene.search.SearcherFactory()"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.SearcherFactory.newSearcher(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.IndexSearcher newSearcher(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.SearcherLifetimeManager$PruneByAge", "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge(double)", "public org.apache.lucene.search.SearcherLifetimeManager$PruneByAge(double)"], ["boolean", "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge.doPrune(double, org.apache.lucene.search.IndexSearcher)", "public boolean doPrune(double, org.apache.lucene.search.IndexSearcher)"], ["org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker(org.apache.lucene.search.IndexSearcher)"], ["int", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker)", "public int compareTo(org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker)"], ["synchronized", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.void close()", "public synchronized void close() throws java.io.IOException"], ["int", "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.SearcherLifetimeManager", "org.apache.lucene.search.SearcherLifetimeManager()", "public org.apache.lucene.search.SearcherLifetimeManager()"], ["long", "org.apache.lucene.search.SearcherLifetimeManager.record(org.apache.lucene.search.IndexSearcher)", "public long record(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.SearcherLifetimeManager.acquire(long)", "public org.apache.lucene.search.IndexSearcher acquire(long)"], ["void", "org.apache.lucene.search.SearcherLifetimeManager.release(org.apache.lucene.search.IndexSearcher)", "public void release(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["synchronized", "org.apache.lucene.search.SearcherLifetimeManager.void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner)", "public synchronized void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner) throws java.io.IOException"], ["synchronized", "org.apache.lucene.search.SearcherLifetimeManager.void close()", "public synchronized void close() throws java.io.IOException"], ["org.apache.lucene.search.SearcherManager", "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, boolean, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, boolean, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["org.apache.lucene.search.SearcherManager", "org.apache.lucene.search.SearcherManager(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory)", "public org.apache.lucene.search.SearcherManager(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.SearcherManager.isSearcherCurrent()", "public boolean isSearcherCurrent() throws java.io.IOException"], ["int", "org.apache.lucene.search.SloppyPhraseScorer$1.compare(org.apache.lucene.search.PhrasePositions, org.apache.lucene.search.PhrasePositions)", "public int compare(org.apache.lucene.search.PhrasePositions, org.apache.lucene.search.PhrasePositions)"], ["int", "org.apache.lucene.search.SloppyPhraseScorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort()", "public org.apache.lucene.search.Sort()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)", "public org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)", "public org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)"], ["void", "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField)", "public void setSort(org.apache.lucene.search.SortField)"], ["void", "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField...)", "public void setSort(org.apache.lucene.search.SortField...)"], ["org.apache.lucene.search.SortField[]", "org.apache.lucene.search.Sort.getSort()", "public org.apache.lucene.search.SortField[] getSort()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort.rewrite(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Sort rewrite(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.Sort.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.Sort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.Sort.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.SortField$Type[]", "org.apache.lucene.search.SortField$Type.values()", "public static org.apache.lucene.search.SortField$Type[] values()"], ["org.apache.lucene.search.SortField$Type", "org.apache.lucene.search.SortField$Type.valueOf(java.lang.String)", "public static org.apache.lucene.search.SortField$Type valueOf(java.lang.String)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser, boolean)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField.setMissingValue(java.lang.Object)", "public org.apache.lucene.search.SortField setMissingValue(java.lang.Object)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)"], ["java.lang.String", "org.apache.lucene.search.SortField.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.SortField$Type", "org.apache.lucene.search.SortField.getType()", "public org.apache.lucene.search.SortField$Type getType()"], ["org.apache.lucene.search.FieldCache$Parser", "org.apache.lucene.search.SortField.getParser()", "public org.apache.lucene.search.FieldCache$Parser getParser()"], ["boolean", "org.apache.lucene.search.SortField.getReverse()", "public boolean getReverse()"], ["org.apache.lucene.search.FieldComparatorSource", "org.apache.lucene.search.SortField.getComparatorSource()", "public org.apache.lucene.search.FieldComparatorSource getComparatorSource()"], ["java.lang.String", "org.apache.lucene.search.SortField.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.SortField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.SortField.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.search.SortField.setUseIndexValues(boolean)", "public void setUseIndexValues(boolean)"], ["boolean", "org.apache.lucene.search.SortField.getUseIndexValues()", "public boolean getUseIndexValues()"], ["void", "org.apache.lucene.search.SortField.setBytesComparator(java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public void setBytesComparator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.search.SortField.getBytesComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getBytesComparator()"], ["org.apache.lucene.search.FieldComparator<?>", "org.apache.lucene.search.SortField.getComparator(int, int)", "public org.apache.lucene.search.FieldComparator<?> getComparator(int, int) throws java.io.IOException"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField.rewrite(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.SortField rewrite(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["void", "org.apache.lucene.search.TermCollectingRewrite$TermCollector.setReaderContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.AtomicReaderContext)", "public void setReaderContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.AtomicReaderContext)"], ["org.apache.lucene.search.TermQuery$TermWeight", "org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.IndexSearcher, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.IndexSearcher, org.apache.lucene.index.TermContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.TermQuery$TermWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.TermQuery$TermWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.TermQuery$TermWeight.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.TermQuery$TermWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.TermQuery$TermWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.TermQuery$TermWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.TermQuery", "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.search.TermQuery", "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, int)", "public org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.search.TermQuery", "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.TermQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.TermQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["void", "org.apache.lucene.search.TermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.TermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.TermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.TermQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public org.apache.lucene.search.TermRangeFilter(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public static org.apache.lucene.search.TermRangeFilter newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter.Less(java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.search.TermRangeFilter Less(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter.More(java.lang.String, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.search.TermRangeFilter More(java.lang.String, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermRangeFilter.getLowerTerm()", "public org.apache.lucene.util.BytesRef getLowerTerm()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermRangeFilter.getUpperTerm()", "public org.apache.lucene.util.BytesRef getUpperTerm()"], ["boolean", "org.apache.lucene.search.TermRangeFilter.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.TermRangeFilter.includesUpper()", "public boolean includesUpper()"], ["org.apache.lucene.search.TermRangeQuery", "org.apache.lucene.search.TermRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public org.apache.lucene.search.TermRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["org.apache.lucene.search.TermRangeQuery", "org.apache.lucene.search.TermRangeQuery.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public static org.apache.lucene.search.TermRangeQuery newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermRangeQuery.getLowerTerm()", "public org.apache.lucene.util.BytesRef getLowerTerm()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermRangeQuery.getUpperTerm()", "public org.apache.lucene.util.BytesRef getUpperTerm()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.includesUpper()", "public boolean includesUpper()"], ["java.lang.String", "org.apache.lucene.search.TermRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.TermRangeQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.TermRangeTermsEnum", "org.apache.lucene.search.TermRangeTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)", "public org.apache.lucene.search.TermRangeTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"], ["int", "org.apache.lucene.search.TermScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.TermScorer.freq()", "public float freq() throws java.io.IOException"], ["int", "org.apache.lucene.search.TermScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.TermScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.TermScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.TermScorer.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.TermStatistics", "org.apache.lucene.search.TermStatistics(org.apache.lucene.util.BytesRef, long, long)", "public org.apache.lucene.search.TermStatistics(org.apache.lucene.util.BytesRef, long, long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.TermStatistics.term()", "public final org.apache.lucene.util.BytesRef term()"], ["long", "org.apache.lucene.search.TermStatistics.docFreq()", "public final long docFreq()"], ["long", "org.apache.lucene.search.TermStatistics.totalTermFreq()", "public final long totalTermFreq()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeAllowed()", "public long getTimeAllowed()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeElapsed()", "public long getTimeElapsed()"], ["int", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getLastDocCollected()", "public int getLastDocCollected()"], ["org.apache.lucene.search.TimeLimitingCollector$TimerThread", "org.apache.lucene.search.TimeLimitingCollector$TimerThread(long, org.apache.lucene.util.Counter)", "public org.apache.lucene.search.TimeLimitingCollector$TimerThread(long, org.apache.lucene.util.Counter)"], ["org.apache.lucene.search.TimeLimitingCollector$TimerThread", "org.apache.lucene.search.TimeLimitingCollector$TimerThread(org.apache.lucene.util.Counter)", "public org.apache.lucene.search.TimeLimitingCollector$TimerThread(org.apache.lucene.util.Counter)"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.run()", "public void run()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getMilliseconds()", "public long getMilliseconds()"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.stopTimer()", "public void stopTimer()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getResolution()", "public long getResolution()"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.setResolution(long)", "public void setResolution(long)"], ["org.apache.lucene.search.TimeLimitingCollector", "org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, org.apache.lucene.util.Counter, long)", "public org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, org.apache.lucene.util.Counter, long)"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setBaseline(long)", "public void setBaseline(long)"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setBaseline()", "public void setBaseline()"], ["boolean", "org.apache.lucene.search.TimeLimitingCollector.isGreedy()", "public boolean isGreedy()"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)", "public void setGreedy(boolean)"], ["void", "org.apache.lucene.search.TimeLimitingCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TimeLimitingCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setCollector(org.apache.lucene.search.Collector)", "public void setCollector(org.apache.lucene.search.Collector)"], ["org.apache.lucene.util.Counter", "org.apache.lucene.search.TimeLimitingCollector.getGlobalCounter()", "public static org.apache.lucene.util.Counter getGlobalCounter()"], ["org.apache.lucene.search.TimeLimitingCollector$TimerThread", "org.apache.lucene.search.TimeLimitingCollector.getGlobalTimerThread()", "public static org.apache.lucene.search.TimeLimitingCollector$TimerThread getGlobalTimerThread()"], ["org.apache.lucene.search.TopDocs$MergeSortQueue", "org.apache.lucene.search.TopDocs$MergeSortQueue(org.apache.lucene.search.Sort, org.apache.lucene.search.TopDocs[])", "public org.apache.lucene.search.TopDocs$MergeSortQueue(org.apache.lucene.search.Sort, org.apache.lucene.search.TopDocs[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)", "public boolean lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"], ["boolean", "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.TopDocs$ScoreMergeSortQueue", "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue(org.apache.lucene.search.TopDocs[])", "public org.apache.lucene.search.TopDocs$ScoreMergeSortQueue(org.apache.lucene.search.TopDocs[])"], ["boolean", "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)", "public boolean lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"], ["boolean", "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.TopDocs$ShardRef", "org.apache.lucene.search.TopDocs$ShardRef(int)", "public org.apache.lucene.search.TopDocs$ShardRef(int)"], ["java.lang.String", "org.apache.lucene.search.TopDocs$ShardRef.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.TopDocs.getMaxScore()", "public float getMaxScore()"], ["void", "org.apache.lucene.search.TopDocs.setMaxScore(float)", "public void setMaxScore(float)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocs(int, org.apache.lucene.search.ScoreDoc[], float)", "public org.apache.lucene.search.TopDocs(int, org.apache.lucene.search.ScoreDoc[], float)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocs.merge(org.apache.lucene.search.Sort, int, org.apache.lucene.search.TopDocs[])", "public static org.apache.lucene.search.TopDocs merge(org.apache.lucene.search.Sort, int, org.apache.lucene.search.TopDocs[]) throws java.io.IOException"], ["int", "org.apache.lucene.search.TopDocsCollector.getTotalHits()", "public int getTotalHits()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs()", "public org.apache.lucene.search.TopDocs topDocs()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs(int)", "public org.apache.lucene.search.TopDocs topDocs(int)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs(int, int)", "public org.apache.lucene.search.TopDocs topDocs(int, int)"], ["org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$PagingFieldCollector", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, org.apache.lucene.search.FieldDoc, int, boolean, boolean, boolean)", "public org.apache.lucene.search.TopFieldCollector$PagingFieldCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, org.apache.lucene.search.FieldDoc, int, boolean, boolean, boolean)"], ["void", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["boolean", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector", "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean, boolean)", "public static org.apache.lucene.search.TopFieldCollector create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector", "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, org.apache.lucene.search.FieldDoc, boolean, boolean, boolean, boolean)", "public static org.apache.lucene.search.TopFieldCollector create(org.apache.lucene.search.Sort, int, org.apache.lucene.search.FieldDoc, boolean, boolean, boolean, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.TopFieldDocs(int, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)", "public org.apache.lucene.search.TopFieldDocs(int, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)"], ["void", "org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["void", "org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["void", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopScoreDocCollector", "org.apache.lucene.search.TopScoreDocCollector.create(int, boolean)", "public static org.apache.lucene.search.TopScoreDocCollector create(int, boolean)"], ["org.apache.lucene.search.TopScoreDocCollector", "org.apache.lucene.search.TopScoreDocCollector.create(int, org.apache.lucene.search.ScoreDoc, boolean)", "public static org.apache.lucene.search.TopScoreDocCollector create(int, org.apache.lucene.search.ScoreDoc, boolean)"], ["void", "org.apache.lucene.search.TopScoreDocCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["void", "org.apache.lucene.search.TopScoreDocCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopTermsRewrite$1.setNextEnum(org.apache.lucene.index.TermsEnum)", "public void setNextEnum(org.apache.lucene.index.TermsEnum)"], ["boolean", "org.apache.lucene.search.TopTermsRewrite$1.collect(org.apache.lucene.util.BytesRef)", "public boolean collect(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["int", "org.apache.lucene.search.TopTermsRewrite$2.compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)", "public int compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"], ["int", "org.apache.lucene.search.TopTermsRewrite$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.TopTermsRewrite$ScoreTerm", "org.apache.lucene.search.TopTermsRewrite$ScoreTerm(java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.index.TermContext)", "public org.apache.lucene.search.TopTermsRewrite$ScoreTerm(java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.index.TermContext)"], ["int", "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm)", "public int compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"], ["int", "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.TopTermsRewrite", "org.apache.lucene.search.TopTermsRewrite(int)", "public org.apache.lucene.search.TopTermsRewrite(int)"], ["int", "org.apache.lucene.search.TopTermsRewrite.getSize()", "public int getSize()"], ["Q", "org.apache.lucene.search.TopTermsRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public final Q rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["int", "org.apache.lucene.search.TopTermsRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.TopTermsRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.TotalHitCountCollector", "org.apache.lucene.search.TotalHitCountCollector()", "public org.apache.lucene.search.TotalHitCountCollector()"], ["int", "org.apache.lucene.search.TotalHitCountCollector.getTotalHits()", "public int getTotalHits()"], ["void", "org.apache.lucene.search.TotalHitCountCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["void", "org.apache.lucene.search.TotalHitCountCollector.collect(int)", "public void collect(int)"], ["void", "org.apache.lucene.search.TotalHitCountCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)", "public void setNextReader(org.apache.lucene.index.AtomicReaderContext)"], ["boolean", "org.apache.lucene.search.TotalHitCountCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["boolean", "org.apache.lucene.search.UnionDocsAndPositionsEnum$DocsQueue.lessThan(org.apache.lucene.index.DocsAndPositionsEnum, org.apache.lucene.index.DocsAndPositionsEnum)", "public final boolean lessThan(org.apache.lucene.index.DocsAndPositionsEnum, org.apache.lucene.index.DocsAndPositionsEnum)"], ["boolean", "org.apache.lucene.search.UnionDocsAndPositionsEnum$DocsQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.UnionDocsAndPositionsEnum", "org.apache.lucene.search.UnionDocsAndPositionsEnum(org.apache.lucene.util.Bits, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.index.Term[], java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.index.TermsEnum)", "public org.apache.lucene.search.UnionDocsAndPositionsEnum(org.apache.lucene.util.Bits, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.index.Term[], java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.index.TermsEnum) throws java.io.IOException"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.nextDoc()", "public final int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.nextPosition()", "public int nextPosition()"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.startOffset()", "public int startOffset()"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.endOffset()", "public int endOffset()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.search.UnionDocsAndPositionsEnum.getPayload()", "public org.apache.lucene.util.BytesRef getPayload()"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.advance(int)", "public final int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.freq()", "public final int freq()"], ["int", "org.apache.lucene.search.UnionDocsAndPositionsEnum.docID()", "public final int docID()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Weight()", "public org.apache.lucene.search.Weight()"], ["boolean", "org.apache.lucene.search.Weight.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["org.apache.lucene.search.WildcardQuery", "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.search.WildcardQuery.toAutomaton(org.apache.lucene.index.Term)", "public static org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.WildcardQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.WildcardQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.payloads.AveragePayloadFunction", "org.apache.lucene.search.payloads.AveragePayloadFunction()", "public org.apache.lucene.search.payloads.AveragePayloadFunction()"], ["float", "org.apache.lucene.search.payloads.AveragePayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)", "public float currentScore(int, java.lang.String, int, int, int, float, float)"], ["float", "org.apache.lucene.search.payloads.AveragePayloadFunction.docScore(int, java.lang.String, int, float)", "public float docScore(int, java.lang.String, int, float)"], ["int", "org.apache.lucene.search.payloads.AveragePayloadFunction.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.AveragePayloadFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.MaxPayloadFunction", "org.apache.lucene.search.payloads.MaxPayloadFunction()", "public org.apache.lucene.search.payloads.MaxPayloadFunction()"], ["float", "org.apache.lucene.search.payloads.MaxPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)", "public float currentScore(int, java.lang.String, int, int, int, float, float)"], ["float", "org.apache.lucene.search.payloads.MaxPayloadFunction.docScore(int, java.lang.String, int, float)", "public float docScore(int, java.lang.String, int, float)"], ["int", "org.apache.lucene.search.payloads.MaxPayloadFunction.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.MaxPayloadFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.MinPayloadFunction", "org.apache.lucene.search.payloads.MinPayloadFunction()", "public org.apache.lucene.search.payloads.MinPayloadFunction()"], ["float", "org.apache.lucene.search.payloads.MinPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)", "public float currentScore(int, java.lang.String, int, int, int, float, float)"], ["float", "org.apache.lucene.search.payloads.MinPayloadFunction.docScore(int, java.lang.String, int, float)", "public float docScore(int, java.lang.String, int, float)"], ["int", "org.apache.lucene.search.payloads.MinPayloadFunction.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.MinPayloadFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.PayloadFunction", "org.apache.lucene.search.payloads.PayloadFunction()", "public org.apache.lucene.search.payloads.PayloadFunction()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.payloads.PayloadFunction.explain(int, java.lang.String, int, float)", "public org.apache.lucene.search.Explanation explain(int, java.lang.String, int, float)"], ["void", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.getPayloads(org.apache.lucene.search.spans.Spans[])", "public void getPayloads(org.apache.lucene.search.spans.Spans[]) throws java.io.IOException"], ["float", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight(org.apache.lucene.search.payloads.PayloadNearQuery, org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight(org.apache.lucene.search.payloads.PayloadNearQuery, org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadNearQuery", "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)", "public org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"], ["org.apache.lucene.search.payloads.PayloadNearQuery", "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, org.apache.lucene.search.payloads.PayloadFunction)", "public org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, org.apache.lucene.search.payloads.PayloadFunction)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.payloads.PayloadNearQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadNearQuery", "org.apache.lucene.search.payloads.PayloadNearQuery.clone()", "public org.apache.lucene.search.payloads.PayloadNearQuery clone()"], ["java.lang.String", "org.apache.lucene.search.payloads.PayloadNearQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.payloads.PayloadNearQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.PayloadNearQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.payloads.PayloadNearQuery.clone()", "public org.apache.lucene.search.spans.SpanNearQuery clone()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.payloads.PayloadNearQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.payloads.PayloadNearQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.payloads.PayloadSpanUtil", "org.apache.lucene.search.payloads.PayloadSpanUtil(org.apache.lucene.index.IndexReaderContext)", "public org.apache.lucene.search.payloads.PayloadSpanUtil(org.apache.lucene.index.IndexReaderContext)"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.payloads.PayloadSpanUtil.getPayloadsForQuery(org.apache.lucene.search.Query)", "public java.util.Collection<byte[]> getPayloadsForQuery(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer(org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight, org.apache.lucene.search.spans.TermSpans, org.apache.lucene.search.Weight, org.apache.lucene.search.similarities.Similarity$SloppySimScorer)", "public org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer(org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight, org.apache.lucene.search.spans.TermSpans, org.apache.lucene.search.Weight, org.apache.lucene.search.similarities.Similarity$SloppySimScorer) throws java.io.IOException"], ["float", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight(org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight(org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadTermQuery", "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction)", "public org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction)"], ["org.apache.lucene.search.payloads.PayloadTermQuery", "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction, boolean)", "public org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction, boolean)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.payloads.PayloadTermQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["int", "org.apache.lucene.search.payloads.PayloadTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.PayloadTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect()", "public org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect()"], ["float", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AfterEffect", "org.apache.lucene.search.similarities.AfterEffect()", "public org.apache.lucene.search.similarities.AfterEffect()"], ["org.apache.lucene.search.similarities.AfterEffectB", "org.apache.lucene.search.similarities.AfterEffectB()", "public org.apache.lucene.search.similarities.AfterEffectB()"], ["float", "org.apache.lucene.search.similarities.AfterEffectB.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.AfterEffectB.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.AfterEffectB.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.AfterEffectL", "org.apache.lucene.search.similarities.AfterEffectL()", "public org.apache.lucene.search.similarities.AfterEffectL()"], ["float", "org.apache.lucene.search.similarities.AfterEffectL.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.AfterEffectL.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.AfterEffectL.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$BM25Stats.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.similarities.BM25Similarity$BM25Stats.normalize(float, float)", "public void normalize(float, float)"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorer.score(int, int)", "public float score(int, int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorerNoNorms.score(int, int)", "public float score(int, int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorerNoNorms.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.score(int, float)", "public float score(int, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.similarities.BM25Similarity", "org.apache.lucene.search.similarities.BM25Similarity(float, float)", "public org.apache.lucene.search.similarities.BM25Similarity(float, float)"], ["org.apache.lucene.search.similarities.BM25Similarity", "org.apache.lucene.search.similarities.BM25Similarity()", "public org.apache.lucene.search.similarities.BM25Similarity()"], ["void", "org.apache.lucene.search.similarities.BM25Similarity.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.similarities.BM25Similarity.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["void", "org.apache.lucene.search.similarities.BM25Similarity.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)", "public final void computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.BM25Similarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$ExactSimScorer", "org.apache.lucene.search.similarities.BM25Similarity.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$ExactSimScorer exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SloppySimScorer", "org.apache.lucene.search.similarities.BM25Similarity.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SloppySimScorer sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.similarities.BM25Similarity.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.BM25Similarity.getK1()", "public float getK1()"], ["float", "org.apache.lucene.search.similarities.BM25Similarity.getB()", "public float getB()"], ["org.apache.lucene.search.similarities.BasicModel", "org.apache.lucene.search.similarities.BasicModel()", "public org.apache.lucene.search.similarities.BasicModel()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BasicModel.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.similarities.BasicModelBE", "org.apache.lucene.search.similarities.BasicModelBE()", "public org.apache.lucene.search.similarities.BasicModelBE()"], ["float", "org.apache.lucene.search.similarities.BasicModelBE.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelBE.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelD", "org.apache.lucene.search.similarities.BasicModelD()", "public org.apache.lucene.search.similarities.BasicModelD()"], ["float", "org.apache.lucene.search.similarities.BasicModelD.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelD.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelG", "org.apache.lucene.search.similarities.BasicModelG()", "public org.apache.lucene.search.similarities.BasicModelG()"], ["float", "org.apache.lucene.search.similarities.BasicModelG.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelG.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelIF", "org.apache.lucene.search.similarities.BasicModelIF()", "public org.apache.lucene.search.similarities.BasicModelIF()"], ["float", "org.apache.lucene.search.similarities.BasicModelIF.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelIF.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelIn", "org.apache.lucene.search.similarities.BasicModelIn()", "public org.apache.lucene.search.similarities.BasicModelIn()"], ["float", "org.apache.lucene.search.similarities.BasicModelIn.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.BasicModelIn.explain(org.apache.lucene.search.similarities.BasicStats, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelIn.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelIne", "org.apache.lucene.search.similarities.BasicModelIne()", "public org.apache.lucene.search.similarities.BasicModelIne()"], ["float", "org.apache.lucene.search.similarities.BasicModelIne.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelIne.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModelP", "org.apache.lucene.search.similarities.BasicModelP()", "public org.apache.lucene.search.similarities.BasicModelP()"], ["float", "org.apache.lucene.search.similarities.BasicModelP.score(org.apache.lucene.search.similarities.BasicStats, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.BasicModelP.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicStats", "org.apache.lucene.search.similarities.BasicStats(java.lang.String, float)", "public org.apache.lucene.search.similarities.BasicStats(java.lang.String, float)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getNumberOfDocuments()", "public long getNumberOfDocuments()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setNumberOfDocuments(long)", "public void setNumberOfDocuments(long)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getNumberOfFieldTokens()", "public long getNumberOfFieldTokens()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setNumberOfFieldTokens(long)", "public void setNumberOfFieldTokens(long)"], ["float", "org.apache.lucene.search.similarities.BasicStats.getAvgFieldLength()", "public float getAvgFieldLength()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setAvgFieldLength(float)", "public void setAvgFieldLength(float)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getDocFreq()", "public long getDocFreq()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setDocFreq(long)", "public void setDocFreq(long)"], ["long", "org.apache.lucene.search.similarities.BasicStats.getTotalTermFreq()", "public long getTotalTermFreq()"], ["void", "org.apache.lucene.search.similarities.BasicStats.setTotalTermFreq(long)", "public void setTotalTermFreq(long)"], ["float", "org.apache.lucene.search.similarities.BasicStats.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.similarities.BasicStats.normalize(float, float)", "public void normalize(float, float)"], ["float", "org.apache.lucene.search.similarities.BasicStats.getTotalBoost()", "public float getTotalBoost()"], ["org.apache.lucene.search.similarities.DFRSimilarity", "org.apache.lucene.search.similarities.DFRSimilarity(org.apache.lucene.search.similarities.BasicModel, org.apache.lucene.search.similarities.AfterEffect, org.apache.lucene.search.similarities.Normalization)", "public org.apache.lucene.search.similarities.DFRSimilarity(org.apache.lucene.search.similarities.BasicModel, org.apache.lucene.search.similarities.AfterEffect, org.apache.lucene.search.similarities.Normalization)"], ["java.lang.String", "org.apache.lucene.search.similarities.DFRSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.BasicModel", "org.apache.lucene.search.similarities.DFRSimilarity.getBasicModel()", "public org.apache.lucene.search.similarities.BasicModel getBasicModel()"], ["org.apache.lucene.search.similarities.AfterEffect", "org.apache.lucene.search.similarities.DFRSimilarity.getAfterEffect()", "public org.apache.lucene.search.similarities.AfterEffect getAfterEffect()"], ["org.apache.lucene.search.similarities.Normalization", "org.apache.lucene.search.similarities.DFRSimilarity.getNormalization()", "public org.apache.lucene.search.similarities.Normalization getNormalization()"], ["org.apache.lucene.search.similarities.DefaultSimilarity", "org.apache.lucene.search.similarities.DefaultSimilarity()", "public org.apache.lucene.search.similarities.DefaultSimilarity()"], ["float", "org.apache.lucene.search.similarities.DefaultSimilarity.coord(int, int)", "public float coord(int, int)"], ["float", "org.apache.lucene.search.similarities.DefaultSimilarity.queryNorm(float)", "public float queryNorm(float)"], ["void", "org.apache.lucene.search.similarities.DefaultSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)", "public void computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"], ["float", "org.apache.lucene.search.similarities.DefaultSimilarity.tf(float)", "public float tf(float)"], ["float", "org.apache.lucene.search.similarities.DefaultSimilarity.sloppyFreq(int)", "public float sloppyFreq(int)"], ["float", "org.apache.lucene.search.similarities.DefaultSimilarity.scorePayload(int, int, int, org.apache.lucene.util.BytesRef)", "public float scorePayload(int, int, int, org.apache.lucene.util.BytesRef)"], ["float", "org.apache.lucene.search.similarities.DefaultSimilarity.idf(long, long)", "public float idf(long, long)"], ["void", "org.apache.lucene.search.similarities.DefaultSimilarity.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.similarities.DefaultSimilarity.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["java.lang.String", "org.apache.lucene.search.similarities.DefaultSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Distribution", "org.apache.lucene.search.similarities.Distribution()", "public org.apache.lucene.search.similarities.Distribution()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Distribution.explain(org.apache.lucene.search.similarities.BasicStats, float, float)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.similarities.DistributionLL", "org.apache.lucene.search.similarities.DistributionLL()", "public org.apache.lucene.search.similarities.DistributionLL()"], ["float", "org.apache.lucene.search.similarities.DistributionLL.score(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.DistributionLL.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.DistributionSPL", "org.apache.lucene.search.similarities.DistributionSPL()", "public org.apache.lucene.search.similarities.DistributionSPL()"], ["float", "org.apache.lucene.search.similarities.DistributionSPL.score(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float score(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.DistributionSPL.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.IBSimilarity", "org.apache.lucene.search.similarities.IBSimilarity(org.apache.lucene.search.similarities.Distribution, org.apache.lucene.search.similarities.Lambda, org.apache.lucene.search.similarities.Normalization)", "public org.apache.lucene.search.similarities.IBSimilarity(org.apache.lucene.search.similarities.Distribution, org.apache.lucene.search.similarities.Lambda, org.apache.lucene.search.similarities.Normalization)"], ["java.lang.String", "org.apache.lucene.search.similarities.IBSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Distribution", "org.apache.lucene.search.similarities.IBSimilarity.getDistribution()", "public org.apache.lucene.search.similarities.Distribution getDistribution()"], ["org.apache.lucene.search.similarities.Lambda", "org.apache.lucene.search.similarities.IBSimilarity.getLambda()", "public org.apache.lucene.search.similarities.Lambda getLambda()"], ["org.apache.lucene.search.similarities.Normalization", "org.apache.lucene.search.similarities.IBSimilarity.getNormalization()", "public org.apache.lucene.search.similarities.Normalization getNormalization()"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)", "public org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity(float)", "public org.apache.lucene.search.similarities.LMDirichletSimilarity(float)"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)", "public org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"], ["org.apache.lucene.search.similarities.LMDirichletSimilarity", "org.apache.lucene.search.similarities.LMDirichletSimilarity()", "public org.apache.lucene.search.similarities.LMDirichletSimilarity()"], ["float", "org.apache.lucene.search.similarities.LMDirichletSimilarity.getMu()", "public float getMu()"], ["java.lang.String", "org.apache.lucene.search.similarities.LMDirichletSimilarity.getName()", "public java.lang.String getName()"], ["org.apache.lucene.search.similarities.LMJelinekMercerSimilarity", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)", "public org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"], ["org.apache.lucene.search.similarities.LMJelinekMercerSimilarity", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(float)", "public org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(float)"], ["float", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getLambda()", "public float getLambda()"], ["java.lang.String", "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getName()", "public java.lang.String getName()"], ["org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel", "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel()", "public org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel()"], ["float", "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.computeProbability(org.apache.lucene.search.similarities.BasicStats)", "public float computeProbability(org.apache.lucene.search.similarities.BasicStats)"], ["java.lang.String", "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.getName()", "public java.lang.String getName()"], ["org.apache.lucene.search.similarities.LMSimilarity$LMStats", "org.apache.lucene.search.similarities.LMSimilarity$LMStats(java.lang.String, float)", "public org.apache.lucene.search.similarities.LMSimilarity$LMStats(java.lang.String, float)"], ["float", "org.apache.lucene.search.similarities.LMSimilarity$LMStats.getCollectionProbability()", "public final float getCollectionProbability()"], ["void", "org.apache.lucene.search.similarities.LMSimilarity$LMStats.setCollectionProbability(float)", "public final void setCollectionProbability(float)"], ["org.apache.lucene.search.similarities.LMSimilarity", "org.apache.lucene.search.similarities.LMSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)", "public org.apache.lucene.search.similarities.LMSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"], ["org.apache.lucene.search.similarities.LMSimilarity", "org.apache.lucene.search.similarities.LMSimilarity()", "public org.apache.lucene.search.similarities.LMSimilarity()"], ["java.lang.String", "org.apache.lucene.search.similarities.LMSimilarity.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Lambda", "org.apache.lucene.search.similarities.Lambda()", "public org.apache.lucene.search.similarities.Lambda()"], ["org.apache.lucene.search.similarities.LambdaDF", "org.apache.lucene.search.similarities.LambdaDF()", "public org.apache.lucene.search.similarities.LambdaDF()"], ["float", "org.apache.lucene.search.similarities.LambdaDF.lambda(org.apache.lucene.search.similarities.BasicStats)", "public final float lambda(org.apache.lucene.search.similarities.BasicStats)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.LambdaDF.explain(org.apache.lucene.search.similarities.BasicStats)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats)"], ["java.lang.String", "org.apache.lucene.search.similarities.LambdaDF.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.LambdaTTF", "org.apache.lucene.search.similarities.LambdaTTF()", "public org.apache.lucene.search.similarities.LambdaTTF()"], ["float", "org.apache.lucene.search.similarities.LambdaTTF.lambda(org.apache.lucene.search.similarities.BasicStats)", "public final float lambda(org.apache.lucene.search.similarities.BasicStats)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.LambdaTTF.explain(org.apache.lucene.search.similarities.BasicStats)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats)"], ["java.lang.String", "org.apache.lucene.search.similarities.LambdaTTF.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiExactDocScorer.score(int, int)", "public float score(int, int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.MultiSimilarity$MultiExactDocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.score(int, float)", "public float score(int, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["float", "org.apache.lucene.search.similarities.MultiSimilarity$MultiStats.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.similarities.MultiSimilarity$MultiStats.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.similarities.MultiSimilarity", "org.apache.lucene.search.similarities.MultiSimilarity(org.apache.lucene.search.similarities.Similarity[])", "public org.apache.lucene.search.similarities.MultiSimilarity(org.apache.lucene.search.similarities.Similarity[])"], ["void", "org.apache.lucene.search.similarities.MultiSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)", "public void computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.MultiSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$ExactSimScorer", "org.apache.lucene.search.similarities.MultiSimilarity.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.similarities.Similarity$ExactSimScorer exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SloppySimScorer", "org.apache.lucene.search.similarities.MultiSimilarity.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.similarities.Similarity$SloppySimScorer sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Normalization$NoNormalization", "org.apache.lucene.search.similarities.Normalization$NoNormalization()", "public org.apache.lucene.search.similarities.Normalization$NoNormalization()"], ["float", "org.apache.lucene.search.similarities.Normalization$NoNormalization.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Normalization$NoNormalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.Normalization$NoNormalization.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.similarities.Normalization", "org.apache.lucene.search.similarities.Normalization()", "public org.apache.lucene.search.similarities.Normalization()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Normalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["org.apache.lucene.search.similarities.NormalizationH1", "org.apache.lucene.search.similarities.NormalizationH1(float)", "public org.apache.lucene.search.similarities.NormalizationH1(float)"], ["org.apache.lucene.search.similarities.NormalizationH1", "org.apache.lucene.search.similarities.NormalizationH1()", "public org.apache.lucene.search.similarities.NormalizationH1()"], ["float", "org.apache.lucene.search.similarities.NormalizationH1.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationH1.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationH1.getC()", "public float getC()"], ["org.apache.lucene.search.similarities.NormalizationH2", "org.apache.lucene.search.similarities.NormalizationH2(float)", "public org.apache.lucene.search.similarities.NormalizationH2(float)"], ["org.apache.lucene.search.similarities.NormalizationH2", "org.apache.lucene.search.similarities.NormalizationH2()", "public org.apache.lucene.search.similarities.NormalizationH2()"], ["float", "org.apache.lucene.search.similarities.NormalizationH2.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public final float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationH2.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationH2.getC()", "public float getC()"], ["org.apache.lucene.search.similarities.NormalizationH3", "org.apache.lucene.search.similarities.NormalizationH3()", "public org.apache.lucene.search.similarities.NormalizationH3()"], ["org.apache.lucene.search.similarities.NormalizationH3", "org.apache.lucene.search.similarities.NormalizationH3(float)", "public org.apache.lucene.search.similarities.NormalizationH3(float)"], ["float", "org.apache.lucene.search.similarities.NormalizationH3.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationH3.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationH3.getMu()", "public float getMu()"], ["org.apache.lucene.search.similarities.NormalizationZ", "org.apache.lucene.search.similarities.NormalizationZ()", "public org.apache.lucene.search.similarities.NormalizationZ()"], ["org.apache.lucene.search.similarities.NormalizationZ", "org.apache.lucene.search.similarities.NormalizationZ(float)", "public org.apache.lucene.search.similarities.NormalizationZ(float)"], ["float", "org.apache.lucene.search.similarities.NormalizationZ.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)", "public float tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"], ["java.lang.String", "org.apache.lucene.search.similarities.NormalizationZ.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.similarities.NormalizationZ.getZ()", "public float getZ()"], ["float", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper$PerFieldSimWeight.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper$PerFieldSimWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.similarities.PerFieldSimilarityWrapper", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper()", "public org.apache.lucene.search.similarities.PerFieldSimilarityWrapper()"], ["void", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)", "public final void computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$ExactSimScorer", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$ExactSimScorer exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SloppySimScorer", "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SloppySimScorer sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$ExactSimScorer", "org.apache.lucene.search.similarities.Similarity$ExactSimScorer()", "public org.apache.lucene.search.similarities.Similarity$ExactSimScorer()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Similarity$ExactSimScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.Similarity$SimWeight()", "public org.apache.lucene.search.similarities.Similarity$SimWeight()"], ["org.apache.lucene.search.similarities.Similarity$SloppySimScorer", "org.apache.lucene.search.similarities.Similarity$SloppySimScorer()", "public org.apache.lucene.search.similarities.Similarity$SloppySimScorer()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.Similarity$SloppySimScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["org.apache.lucene.search.similarities.Similarity", "org.apache.lucene.search.similarities.Similarity()", "public org.apache.lucene.search.similarities.Similarity()"], ["float", "org.apache.lucene.search.similarities.Similarity.coord(int, int)", "public float coord(int, int)"], ["float", "org.apache.lucene.search.similarities.Similarity.queryNorm(float)", "public float queryNorm(float)"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicExactDocScorer.score(int, int)", "public float score(int, int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.SimilarityBase$BasicExactDocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.score(int, float)", "public float score(int, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.similarities.SimilarityBase", "org.apache.lucene.search.similarities.SimilarityBase()", "public org.apache.lucene.search.similarities.SimilarityBase()"], ["void", "org.apache.lucene.search.similarities.SimilarityBase.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.similarities.SimilarityBase.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.SimilarityBase.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$ExactSimScorer", "org.apache.lucene.search.similarities.SimilarityBase.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.similarities.Similarity$ExactSimScorer exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SloppySimScorer", "org.apache.lucene.search.similarities.SimilarityBase.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public org.apache.lucene.search.similarities.Similarity$SloppySimScorer sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["void", "org.apache.lucene.search.similarities.SimilarityBase.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)", "public void computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"], ["double", "org.apache.lucene.search.similarities.SimilarityBase.log2(double)", "public static double log2(double)"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$ExactTFIDFDocScorer.score(int, int)", "public float score(int, int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity$ExactTFIDFDocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats", "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats(java.lang.String, org.apache.lucene.search.Explanation, float)", "public org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats(java.lang.String, org.apache.lucene.search.Explanation, float)"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats.getValueForNormalization()", "public float getValueForNormalization()"], ["void", "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats.normalize(float, float)", "public void normalize(float, float)"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.score(int, float)", "public float score(int, float)"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.computeSlopFactor(int)", "public float computeSlopFactor(int)"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)", "public float computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.explain(int, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation explain(int, org.apache.lucene.search.Explanation)"], ["org.apache.lucene.search.similarities.TFIDFSimilarity", "org.apache.lucene.search.similarities.TFIDFSimilarity()", "public org.apache.lucene.search.similarities.TFIDFSimilarity()"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity.tf(int)", "public float tf(int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])", "public org.apache.lucene.search.Explanation idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"], ["float", "org.apache.lucene.search.similarities.TFIDFSimilarity.decodeNormValue(byte)", "public float decodeNormValue(byte)"], ["byte", "org.apache.lucene.search.similarities.TFIDFSimilarity.encodeNormValue(float)", "public byte encodeNormValue(float)"], ["org.apache.lucene.search.similarities.Similarity$SimWeight", "org.apache.lucene.search.similarities.TFIDFSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)", "public final org.apache.lucene.search.similarities.Similarity$SimWeight computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"], ["org.apache.lucene.search.similarities.Similarity$ExactSimScorer", "org.apache.lucene.search.similarities.TFIDFSimilarity.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$ExactSimScorer exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.similarities.Similarity$SloppySimScorer", "org.apache.lucene.search.similarities.TFIDFSimilarity.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)", "public final org.apache.lucene.search.similarities.Similarity$SloppySimScorer sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException"], ["org.apache.lucene.search.spans.FieldMaskingSpanQuery", "org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)", "public org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()", "public org.apache.lucene.search.spans.SpanQuery getMaskedQuery()"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered$1.compare(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)", "public int compare(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.spans.NearSpansOrdered", "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.spans.NearSpansOrdered", "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, boolean)", "public org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, boolean) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.end()", "public int end()"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.NearSpansOrdered.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansOrdered.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["boolean", "org.apache.lucene.search.spans.NearSpansOrdered.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansOrdered.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.NearSpansOrdered.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.NearSpansUnordered$CellQueue", "org.apache.lucene.search.spans.NearSpansUnordered$CellQueue(org.apache.lucene.search.spans.NearSpansUnordered, int)", "public org.apache.lucene.search.spans.NearSpansUnordered$CellQueue(org.apache.lucene.search.spans.NearSpansUnordered, int)"], ["org.apache.lucene.search.spans.NearSpansUnordered$SpansCell", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.Spans, int)", "public org.apache.lucene.search.spans.NearSpansUnordered$SpansCell(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.Spans, int)"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.isPayloadAvailable()", "public boolean isPayloadAvailable() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.NearSpansUnordered", "org.apache.lucene.search.spans.NearSpansUnordered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.NearSpansUnordered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.NearSpansUnordered.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered.isPayloadAvailable()", "public boolean isPayloadAvailable() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.NearSpansUnordered.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanFirstQuery", "org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)", "public org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanFirstQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanFirstQuery", "org.apache.lucene.search.spans.SpanFirstQuery.clone()", "public org.apache.lucene.search.spans.SpanFirstQuery clone()"], ["boolean", "org.apache.lucene.search.spans.SpanFirstQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanFirstQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.spans.SpanPositionRangeQuery", "org.apache.lucene.search.spans.SpanFirstQuery.clone()", "public org.apache.lucene.search.spans.SpanPositionRangeQuery clone()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanFirstQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanFirstQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.spans.SpanQuery rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod()", "public org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(int)", "public org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(int)"], ["int", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.getSize()", "public int getSize()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.spans.SpanQuery rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper(Q)", "public org.apache.lucene.search.spans.SpanMultiTermQueryWrapper(Q)"], ["org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getRewriteMethod()", "public final org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod getRewriteMethod()"], ["void", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)", "public final void setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.spans.SpanNearPayloadCheckQuery", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery(org.apache.lucene.search.spans.SpanNearQuery, java.util.Collection<byte[]>)", "public org.apache.lucene.search.spans.SpanNearPayloadCheckQuery(org.apache.lucene.search.spans.SpanNearQuery, java.util.Collection<byte[]>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanNearPayloadCheckQuery", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()", "public org.apache.lucene.search.spans.SpanNearPayloadCheckQuery clone()"], ["boolean", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)", "public org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)", "public org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)"], ["org.apache.lucene.search.spans.SpanQuery[]", "org.apache.lucene.search.spans.SpanNearQuery.getClauses()", "public org.apache.lucene.search.spans.SpanQuery[] getClauses()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery.getSlop()", "public int getSlop()"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery.isInOrder()", "public boolean isInOrder()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanNearQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNearQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNearQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery.clone()", "public org.apache.lucene.search.spans.SpanNearQuery clone()"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNearQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNearQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanNearQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery$1.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery$1.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanNotQuery$1.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.SpanNotQuery$1.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.SpanNotQuery$1.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.SpanNotQuery$1.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery$1.isPayloadAvailable()", "public boolean isPayloadAvailable() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanNotQuery", "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanNotQuery.getInclude()", "public org.apache.lucene.search.spans.SpanQuery getInclude()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanNotQuery.getExclude()", "public org.apache.lucene.search.spans.SpanQuery getExclude()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanNotQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanNotQuery", "org.apache.lucene.search.spans.SpanNotQuery.clone()", "public org.apache.lucene.search.spans.SpanNotQuery clone()"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNotQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNotQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNotQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNotQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanNotQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$1.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$1.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$1.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$1.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$1.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.SpanOrQuery$1.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$1.isPayloadAvailable()", "public boolean isPayloadAvailable() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanOrQuery$SpanQueue", "org.apache.lucene.search.spans.SpanOrQuery$SpanQueue(org.apache.lucene.search.spans.SpanOrQuery, int)", "public org.apache.lucene.search.spans.SpanOrQuery$SpanQueue(org.apache.lucene.search.spans.SpanOrQuery, int)"], ["org.apache.lucene.search.spans.SpanOrQuery", "org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)", "public org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)"], ["void", "org.apache.lucene.search.spans.SpanOrQuery.addClause(org.apache.lucene.search.spans.SpanQuery)", "public final void addClause(org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanQuery[]", "org.apache.lucene.search.spans.SpanOrQuery.getClauses()", "public org.apache.lucene.search.spans.SpanQuery[] getClauses()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanOrQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.spans.SpanOrQuery", "org.apache.lucene.search.spans.SpanOrQuery.clone()", "public org.apache.lucene.search.spans.SpanOrQuery clone()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanOrQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanOrQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanOrQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanOrQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanOrQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.spans.SpanPayloadCheckQuery", "org.apache.lucene.search.spans.SpanPayloadCheckQuery(org.apache.lucene.search.spans.SpanQuery, java.util.Collection<byte[]>)", "public org.apache.lucene.search.spans.SpanPayloadCheckQuery(org.apache.lucene.search.spans.SpanQuery, java.util.Collection<byte[]>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanPayloadCheckQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanPayloadCheckQuery", "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()", "public org.apache.lucene.search.spans.SpanPayloadCheckQuery clone()"], ["boolean", "org.apache.lucene.search.spans.SpanPayloadCheckQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanPayloadCheckQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus[]", "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus.values()", "public static org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus[] values()"], ["org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus", "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus.valueOf(java.lang.String)", "public static org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus valueOf(java.lang.String)"], ["org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.isPayloadAvailable()", "public boolean isPayloadAvailable() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanPositionCheckQuery", "org.apache.lucene.search.spans.SpanPositionCheckQuery(org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanPositionCheckQuery(org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanPositionCheckQuery.getMatch()", "public org.apache.lucene.search.spans.SpanQuery getMatch()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanPositionCheckQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanPositionCheckQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanPositionCheckQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanPositionCheckQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanPositionRangeQuery", "org.apache.lucene.search.spans.SpanPositionRangeQuery(org.apache.lucene.search.spans.SpanQuery, int, int)", "public org.apache.lucene.search.spans.SpanPositionRangeQuery(org.apache.lucene.search.spans.SpanQuery, int, int)"], ["int", "org.apache.lucene.search.spans.SpanPositionRangeQuery.getStart()", "public int getStart()"], ["int", "org.apache.lucene.search.spans.SpanPositionRangeQuery.getEnd()", "public int getEnd()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanPositionRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.SpanPositionRangeQuery", "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()", "public org.apache.lucene.search.spans.SpanPositionRangeQuery clone()"], ["boolean", "org.apache.lucene.search.spans.SpanPositionRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanPositionRangeQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()", "public org.apache.lucene.search.Query clone()"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanQuery()", "public org.apache.lucene.search.spans.SpanQuery()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanQuery.createWeight(org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.spans.SpanScorer.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.spans.SpanScorer.freq()", "public float freq() throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanTermQuery", "org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.spans.SpanTermQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanTermQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanTermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanTermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.spans.SpanTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanTermQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher)", "public org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.spans.SpanWeight.getValueForNormalization()", "public float getValueForNormalization() throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanWeight.normalize(float, float)", "public void normalize(float, float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.spans.SpanWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.spans.SpanWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.AtomicReaderContext, int) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.Spans()", "public org.apache.lucene.search.spans.Spans()"], ["boolean", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.next()", "public boolean next()"], ["boolean", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.skipTo(int)", "public boolean skipTo(int)"], ["int", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.getPayload()", "public java.util.Collection<byte[]> getPayload()"], ["boolean", "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["org.apache.lucene.search.spans.TermSpans", "org.apache.lucene.search.spans.TermSpans(org.apache.lucene.index.DocsAndPositionsEnum, org.apache.lucene.index.Term)", "public org.apache.lucene.search.spans.TermSpans(org.apache.lucene.index.DocsAndPositionsEnum, org.apache.lucene.index.Term)"], ["boolean", "org.apache.lucene.search.spans.TermSpans.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.TermSpans.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.TermSpans.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.TermSpans.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.TermSpans.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.TermSpans.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.TermSpans.isPayloadAvailable()", "public boolean isPayloadAvailable() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.TermSpans.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.DocsAndPositionsEnum", "org.apache.lucene.search.spans.TermSpans.getPostings()", "public org.apache.lucene.index.DocsAndPositionsEnum getPostings()"], ["org.apache.lucene.store.AlreadyClosedException", "org.apache.lucene.store.AlreadyClosedException(java.lang.String)", "public org.apache.lucene.store.AlreadyClosedException(java.lang.String)"], ["byte", "org.apache.lucene.store.BufferedIndexInput.readByte()", "public final byte readByte() throws java.io.IOException"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(java.lang.String)", "public org.apache.lucene.store.BufferedIndexInput(java.lang.String)"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.BufferedIndexInput(java.lang.String, org.apache.lucene.store.IOContext)"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(java.lang.String, int)", "public org.apache.lucene.store.BufferedIndexInput(java.lang.String, int)"], ["void", "org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)", "public final void setBufferSize(int)"], ["int", "org.apache.lucene.store.BufferedIndexInput.getBufferSize()", "public final int getBufferSize()"], ["void", "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int)", "public final void readBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int, boolean)", "public final void readBytes(byte[], int, int, boolean) throws java.io.IOException"], ["short", "org.apache.lucene.store.BufferedIndexInput.readShort()", "public final short readShort() throws java.io.IOException"], ["int", "org.apache.lucene.store.BufferedIndexInput.readInt()", "public final int readInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.readLong()", "public final long readLong() throws java.io.IOException"], ["int", "org.apache.lucene.store.BufferedIndexInput.readVInt()", "public final int readVInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.readVLong()", "public final long readVLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.getFilePointer()", "public final long getFilePointer()"], ["void", "org.apache.lucene.store.BufferedIndexInput.seek(long)", "public final void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["int", "org.apache.lucene.store.BufferedIndexInput.bufferSize(org.apache.lucene.store.IOContext)", "public static int bufferSize(org.apache.lucene.store.IOContext)"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.BufferedIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.BufferedIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.BufferedIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.BufferedIndexOutput", "org.apache.lucene.store.BufferedIndexOutput()", "public org.apache.lucene.store.BufferedIndexOutput()"], ["void", "org.apache.lucene.store.BufferedIndexOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexOutput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.BufferedIndexOutput.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.ByteArrayDataInput", "org.apache.lucene.store.ByteArrayDataInput(byte[])", "public org.apache.lucene.store.ByteArrayDataInput(byte[])"], ["org.apache.lucene.store.ByteArrayDataInput", "org.apache.lucene.store.ByteArrayDataInput(byte[], int, int)", "public org.apache.lucene.store.ByteArrayDataInput(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayDataInput", "org.apache.lucene.store.ByteArrayDataInput()", "public org.apache.lucene.store.ByteArrayDataInput()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.reset(byte[])", "public void reset(byte[])"], ["void", "org.apache.lucene.store.ByteArrayDataInput.rewind()", "public void rewind()"], ["int", "org.apache.lucene.store.ByteArrayDataInput.getPosition()", "public int getPosition()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.setPosition(int)", "public void setPosition(int)"], ["void", "org.apache.lucene.store.ByteArrayDataInput.reset(byte[], int, int)", "public void reset(byte[], int, int)"], ["int", "org.apache.lucene.store.ByteArrayDataInput.length()", "public int length()"], ["boolean", "org.apache.lucene.store.ByteArrayDataInput.eof()", "public boolean eof()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.skipBytes(int)", "public void skipBytes(int)"], ["short", "org.apache.lucene.store.ByteArrayDataInput.readShort()", "public short readShort()"], ["int", "org.apache.lucene.store.ByteArrayDataInput.readInt()", "public int readInt()"], ["long", "org.apache.lucene.store.ByteArrayDataInput.readLong()", "public long readLong()"], ["int", "org.apache.lucene.store.ByteArrayDataInput.readVInt()", "public int readVInt()"], ["long", "org.apache.lucene.store.ByteArrayDataInput.readVLong()", "public long readVLong()"], ["byte", "org.apache.lucene.store.ByteArrayDataInput.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.store.ByteArrayDataInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayDataOutput", "org.apache.lucene.store.ByteArrayDataOutput(byte[])", "public org.apache.lucene.store.ByteArrayDataOutput(byte[])"], ["org.apache.lucene.store.ByteArrayDataOutput", "org.apache.lucene.store.ByteArrayDataOutput(byte[], int, int)", "public org.apache.lucene.store.ByteArrayDataOutput(byte[], int, int)"], ["org.apache.lucene.store.ByteArrayDataOutput", "org.apache.lucene.store.ByteArrayDataOutput()", "public org.apache.lucene.store.ByteArrayDataOutput()"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[])", "public void reset(byte[])"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[], int, int)", "public void reset(byte[], int, int)"], ["int", "org.apache.lucene.store.ByteArrayDataOutput.getPosition()", "public int getPosition()"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["byte", "org.apache.lucene.store.ByteBufferIndexInput.readByte()", "public final byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.ByteBufferIndexInput.readBytes(byte[], int, int)", "public final void readBytes(byte[], int, int) throws java.io.IOException"], ["short", "org.apache.lucene.store.ByteBufferIndexInput.readShort()", "public final short readShort() throws java.io.IOException"], ["int", "org.apache.lucene.store.ByteBufferIndexInput.readInt()", "public final int readInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.readLong()", "public final long readLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.getFilePointer()", "public final long getFilePointer()"], ["void", "org.apache.lucene.store.ByteBufferIndexInput.seek(long)", "public final void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.ByteBufferIndexInput.length()", "public final long length()"], ["org.apache.lucene.store.ByteBufferIndexInput", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public final org.apache.lucene.store.ByteBufferIndexInput clone()"], ["org.apache.lucene.store.ByteBufferIndexInput", "org.apache.lucene.store.ByteBufferIndexInput.slice(java.lang.String, long, long)", "public final org.apache.lucene.store.ByteBufferIndexInput slice(java.lang.String, long, long)"], ["void", "org.apache.lucene.store.ByteBufferIndexInput.close()", "public final void close() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.ByteBufferIndexInput.toString()", "public final java.lang.String toString()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.ByteBufferIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.ChecksumIndexInput", "org.apache.lucene.store.ChecksumIndexInput(org.apache.lucene.store.IndexInput)", "public org.apache.lucene.store.ChecksumIndexInput(org.apache.lucene.store.IndexInput)"], ["byte", "org.apache.lucene.store.ChecksumIndexInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexInput.getChecksum()", "public long getChecksum()"], ["void", "org.apache.lucene.store.ChecksumIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.ChecksumIndexInput.seek(long)", "public void seek(long)"], ["long", "org.apache.lucene.store.ChecksumIndexInput.length()", "public long length()"], ["org.apache.lucene.store.ChecksumIndexOutput", "org.apache.lucene.store.ChecksumIndexOutput(org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.store.ChecksumIndexOutput(org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexOutput.getChecksum()", "public long getChecksum()"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexOutput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.seek(long)", "public void seek(long)"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.finishCommit()", "public void finishCommit() throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexOutput.length()", "public long length() throws java.io.IOException"], ["void", "org.apache.lucene.store.CompoundFileDirectory$1.close()", "public void close()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.CompoundFileDirectory$1.openSlice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput openSlice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.CompoundFileDirectory$1.openFullSlice()", "public org.apache.lucene.store.IndexInput openFullSlice() throws java.io.IOException"], ["org.apache.lucene.store.CompoundFileDirectory$FileEntry", "org.apache.lucene.store.CompoundFileDirectory$FileEntry()", "public org.apache.lucene.store.CompoundFileDirectory$FileEntry()"], ["org.apache.lucene.store.CompoundFileDirectory", "org.apache.lucene.store.CompoundFileDirectory(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext, boolean)", "public org.apache.lucene.store.CompoundFileDirectory(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext, boolean) throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.CompoundFileDirectory.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["java.lang.String", "org.apache.lucene.store.CompoundFileDirectory.getName()", "public java.lang.String getName()"], ["synchronized", "org.apache.lucene.store.CompoundFileDirectory.void close()", "public synchronized void close() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.CompoundFileDirectory.org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.CompoundFileDirectory.listAll()", "public java.lang.String[] listAll()"], ["boolean", "org.apache.lucene.store.CompoundFileDirectory.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String)"], ["void", "org.apache.lucene.store.CompoundFileDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String)"], ["void", "org.apache.lucene.store.CompoundFileDirectory.renameFile(java.lang.String, java.lang.String)", "public void renameFile(java.lang.String, java.lang.String)"], ["long", "org.apache.lucene.store.CompoundFileDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.CompoundFileDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.CompoundFileDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>)"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.CompoundFileDirectory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.CompoundFileDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.CompoundFileDirectory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.length()", "public long length() throws java.io.IOException"], ["void", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.CompoundFileWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.DataInput()", "public org.apache.lucene.store.DataInput()"], ["void", "org.apache.lucene.store.DataInput.readBytes(byte[], int, int, boolean)", "public void readBytes(byte[], int, int, boolean) throws java.io.IOException"], ["short", "org.apache.lucene.store.DataInput.readShort()", "public short readShort() throws java.io.IOException"], ["int", "org.apache.lucene.store.DataInput.readInt()", "public int readInt() throws java.io.IOException"], ["int", "org.apache.lucene.store.DataInput.readVInt()", "public int readVInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.DataInput.readLong()", "public long readLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.DataInput.readVLong()", "public long readVLong() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.DataInput.readString()", "public java.lang.String readString() throws java.io.IOException"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.DataInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.store.DataInput.readStringStringMap()", "public java.util.Map<java.lang.String, java.lang.String> readStringStringMap() throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.apache.lucene.store.DataInput.readStringSet()", "public java.util.Set<java.lang.String> readStringSet() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.store.DataInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.DataOutput", "org.apache.lucene.store.DataOutput()", "public org.apache.lucene.store.DataOutput()"], ["void", "org.apache.lucene.store.DataOutput.writeBytes(byte[], int)", "public void writeBytes(byte[], int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeShort(short)", "public void writeShort(short) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeVInt(int)", "public final void writeVInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeVLong(long)", "public final void writeVLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeString(java.lang.String)", "public void writeString(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.copyBytes(org.apache.lucene.store.DataInput, long)", "public void copyBytes(org.apache.lucene.store.DataInput, long) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeStringStringMap(java.util.Map<java.lang.String, java.lang.String>)", "public void writeStringStringMap(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.store.DataOutput.writeStringSet(java.util.Set<java.lang.String>)", "public void writeStringSet(java.util.Set<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.Directory$1.openSlice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput openSlice(java.lang.String, long, long)"], ["void", "org.apache.lucene.store.Directory$1.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.Directory$1.openFullSlice()", "public org.apache.lucene.store.IndexInput openFullSlice()"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.Directory$IndexInputSlicer(org.apache.lucene.store.Directory)", "public org.apache.lucene.store.Directory$IndexInputSlicer(org.apache.lucene.store.Directory)"], ["org.apache.lucene.store.Directory$SlicedIndexInput", "org.apache.lucene.store.Directory$SlicedIndexInput.clone()", "public org.apache.lucene.store.Directory$SlicedIndexInput clone()"], ["void", "org.apache.lucene.store.Directory$SlicedIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.Directory$SlicedIndexInput.length()", "public long length()"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.Directory$SlicedIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.Directory$SlicedIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.Directory$SlicedIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.Directory$SlicedIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.Directory()", "public org.apache.lucene.store.Directory()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.Directory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.Directory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.Directory.setLockFactory(org.apache.lucene.store.LockFactory)", "public void setLockFactory(org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.Directory.getLockFactory()", "public org.apache.lucene.store.LockFactory getLockFactory()"], ["java.lang.String", "org.apache.lucene.store.Directory.getLockID()", "public java.lang.String getLockID()"], ["java.lang.String", "org.apache.lucene.store.Directory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.Directory.copy(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public void copy(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.Directory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["boolean", "org.apache.lucene.store.FSDirectory$1.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["void", "org.apache.lucene.store.FSDirectory$FSIndexInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory$FSIndexInput", "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()", "public org.apache.lucene.store.FSDirectory$FSIndexInput clone()"], ["long", "org.apache.lucene.store.FSDirectory$FSIndexInput.length()", "public final long length()"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()", "public org.apache.lucene.store.BufferedIndexInput clone()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.FSDirectory$FSIndexOutput", "org.apache.lucene.store.FSDirectory$FSIndexOutput(org.apache.lucene.store.FSDirectory, java.lang.String, org.apache.lucene.store.RateLimiter)", "public org.apache.lucene.store.FSDirectory$FSIndexOutput(org.apache.lucene.store.FSDirectory, java.lang.String, org.apache.lucene.store.RateLimiter) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory$FSIndexOutput.flushBuffer(byte[], int, int)", "public void flushBuffer(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory$FSIndexOutput.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory$FSIndexOutput.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.FSDirectory$FSIndexOutput.length()", "public long length() throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory$FSIndexOutput.setLength(long)", "public void setLength(long) throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.store.FSDirectory.open(java.io.File)", "public static org.apache.lucene.store.FSDirectory open(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.store.FSDirectory.open(java.io.File, org.apache.lucene.store.LockFactory)", "public static org.apache.lucene.store.FSDirectory open(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.setLockFactory(org.apache.lucene.store.LockFactory)", "public void setLockFactory(org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FSDirectory.listAll(java.io.File)", "public static java.lang.String[] listAll(java.io.File) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FSDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["boolean", "org.apache.lucene.store.FSDirectory.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String)"], ["long", "org.apache.lucene.store.FSDirectory.fileModified(java.io.File, java.lang.String)", "public static long fileModified(java.io.File, java.lang.String)"], ["long", "org.apache.lucene.store.FSDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FSDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.setMaxMergeWriteMBPerSec(java.lang.Double)", "public void setMaxMergeWriteMBPerSec(java.lang.Double)"], ["void", "org.apache.lucene.store.FSDirectory.setMaxMergeWriteLimiter(org.apache.lucene.store.RateLimiter)", "public void setMaxMergeWriteLimiter(org.apache.lucene.store.RateLimiter)"], ["java.lang.Double", "org.apache.lucene.store.FSDirectory.getMaxMergeWriteMBPerSec()", "public java.lang.Double getMaxMergeWriteMBPerSec()"], ["void", "org.apache.lucene.store.FSDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.FSDirectory.getLockID()", "public java.lang.String getLockID()"], ["synchronized", "org.apache.lucene.store.FSDirectory.void close()", "public synchronized void close()"], ["java.io.File", "org.apache.lucene.store.FSDirectory.getDirectory()", "public java.io.File getDirectory()"], ["java.lang.String", "org.apache.lucene.store.FSDirectory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.FSDirectory.setReadChunkSize(int)", "public final void setReadChunkSize(int)"], ["int", "org.apache.lucene.store.FSDirectory.getReadChunkSize()", "public final int getReadChunkSize()"], ["org.apache.lucene.store.FSLockFactory", "org.apache.lucene.store.FSLockFactory()", "public org.apache.lucene.store.FSLockFactory()"], ["java.io.File", "org.apache.lucene.store.FSLockFactory.getLockDir()", "public java.io.File getLockDir()"], ["org.apache.lucene.store.FileSwitchDirectory", "org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)", "public org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()", "public org.apache.lucene.store.Directory getPrimaryDir()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()", "public org.apache.lucene.store.Directory getSecondaryDir()"], ["void", "org.apache.lucene.store.FileSwitchDirectory.close()", "public void close() throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FileSwitchDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.FileSwitchDirectory.getExtension(java.lang.String)", "public static java.lang.String getExtension(java.lang.String)"], ["boolean", "org.apache.lucene.store.FileSwitchDirectory.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.FileSwitchDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FileSwitchDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.FileSwitchDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.FileSwitchDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.FlushInfo", "org.apache.lucene.store.FlushInfo(int, long)", "public org.apache.lucene.store.FlushInfo(int, long)"], ["int", "org.apache.lucene.store.FlushInfo.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.FlushInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.store.FlushInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.IOContext$Context[]", "org.apache.lucene.store.IOContext$Context.values()", "public static org.apache.lucene.store.IOContext$Context[] values()"], ["org.apache.lucene.store.IOContext$Context", "org.apache.lucene.store.IOContext$Context.valueOf(java.lang.String)", "public static org.apache.lucene.store.IOContext$Context valueOf(java.lang.String)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext()", "public org.apache.lucene.store.IOContext()"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.FlushInfo)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.FlushInfo)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext$Context)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext$Context)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.MergeInfo)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.MergeInfo)"], ["org.apache.lucene.store.IOContext", "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext, boolean)", "public org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext, boolean)"], ["int", "org.apache.lucene.store.IOContext.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.IOContext.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.store.IOContext.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.store.IndexInput.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.IndexInput.clone()", "public org.apache.lucene.store.IndexInput clone()"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.store.IndexInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.store.IndexInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.IndexOutput()", "public org.apache.lucene.store.IndexOutput()"], ["void", "org.apache.lucene.store.IndexOutput.setLength(long)", "public void setLength(long) throws java.io.IOException"], ["org.apache.lucene.store.InputStreamDataInput", "org.apache.lucene.store.InputStreamDataInput(java.io.InputStream)", "public org.apache.lucene.store.InputStreamDataInput(java.io.InputStream)"], ["byte", "org.apache.lucene.store.InputStreamDataInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.InputStreamDataInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.InputStreamDataInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.Lock$With", "org.apache.lucene.store.Lock$With(org.apache.lucene.store.Lock, long)", "public org.apache.lucene.store.Lock$With(org.apache.lucene.store.Lock, long)"], ["java.lang.Object", "org.apache.lucene.store.Lock$With.run()", "public java.lang.Object run() throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.Lock()", "public org.apache.lucene.store.Lock()"], ["boolean", "org.apache.lucene.store.Lock.obtain(long)", "public boolean obtain(long) throws java.io.IOException"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.LockFactory()", "public org.apache.lucene.store.LockFactory()"], ["void", "org.apache.lucene.store.LockFactory.setLockPrefix(java.lang.String)", "public void setLockPrefix(java.lang.String)"], ["java.lang.String", "org.apache.lucene.store.LockFactory.getLockPrefix()", "public java.lang.String getLockPrefix()"], ["org.apache.lucene.store.LockObtainFailedException", "org.apache.lucene.store.LockObtainFailedException(java.lang.String)", "public org.apache.lucene.store.LockObtainFailedException(java.lang.String)"], ["org.apache.lucene.store.LockReleaseFailedException", "org.apache.lucene.store.LockReleaseFailedException(java.lang.String)", "public org.apache.lucene.store.LockReleaseFailedException(java.lang.String)"], ["org.apache.lucene.store.LockStressTest", "org.apache.lucene.store.LockStressTest()", "public org.apache.lucene.store.LockStressTest()"], ["void", "org.apache.lucene.store.LockStressTest.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.lucene.store.LockVerifyServer", "org.apache.lucene.store.LockVerifyServer()", "public org.apache.lucene.store.LockVerifyServer()"], ["void", "org.apache.lucene.store.LockVerifyServer.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.store.MMapDirectory$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.MMapDirectory$2.openSlice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput openSlice(java.lang.String, long, long) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.MMapDirectory$2.openFullSlice()", "public org.apache.lucene.store.IndexInput openFullSlice() throws java.io.IOException"], ["void", "org.apache.lucene.store.MMapDirectory$2.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.io.File)", "public org.apache.lucene.store.MMapDirectory(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory, int)", "public org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)", "public void setUseUnmap(boolean)"], ["boolean", "org.apache.lucene.store.MMapDirectory.getUseUnmap()", "public boolean getUseUnmap()"], ["int", "org.apache.lucene.store.MMapDirectory.getMaxChunkSize()", "public final int getMaxChunkSize()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.MMapDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.MMapDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.MergeInfo", "org.apache.lucene.store.MergeInfo(int, long, boolean, int)", "public org.apache.lucene.store.MergeInfo(int, long, boolean, int)"], ["int", "org.apache.lucene.store.MergeInfo.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.store.MergeInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.store.MergeInfo.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.NIOFSDirectory$1.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory$1.openSlice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput openSlice(java.lang.String, long, long)"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory$1.openFullSlice()", "public org.apache.lucene.store.IndexInput openFullSlice()"], ["org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.io.File, org.apache.lucene.store.IOContext, int)", "public org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.io.File, org.apache.lucene.store.IOContext, int) throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.io.File, java.io.RandomAccessFile, java.nio.channels.FileChannel, long, long, int, int)", "public org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.io.File, java.io.RandomAccessFile, java.nio.channels.FileChannel, long, long, int, int)"], ["org.apache.lucene.store.NIOFSDirectory", "org.apache.lucene.store.NIOFSDirectory(java.io.File, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.NIOFSDirectory(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory", "org.apache.lucene.store.NIOFSDirectory(java.io.File)", "public org.apache.lucene.store.NIOFSDirectory(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.NIOFSDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.NRTCachingDirectory", "org.apache.lucene.store.NRTCachingDirectory(org.apache.lucene.store.Directory, double, double)", "public org.apache.lucene.store.NRTCachingDirectory(org.apache.lucene.store.Directory, double, double)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.NRTCachingDirectory.getDelegate()", "public org.apache.lucene.store.Directory getDelegate()"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.NRTCachingDirectory.getLockFactory()", "public org.apache.lucene.store.LockFactory getLockFactory()"], ["void", "org.apache.lucene.store.NRTCachingDirectory.setLockFactory(org.apache.lucene.store.LockFactory)", "public void setLockFactory(org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.NRTCachingDirectory.getLockID()", "public java.lang.String getLockID()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.NRTCachingDirectory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.NRTCachingDirectory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.NRTCachingDirectory.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.java.lang.String[] listAll()", "public synchronized java.lang.String[] listAll() throws java.io.IOException"], ["long", "org.apache.lucene.store.NRTCachingDirectory.sizeInBytes()", "public long sizeInBytes()"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.boolean fileExists(java.lang.String)", "public synchronized boolean fileExists(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.void deleteFile(java.lang.String)", "public synchronized void deleteFile(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.long fileLength(java.lang.String)", "public synchronized long fileLength(java.lang.String) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.NRTCachingDirectory.listCachedFiles()", "public java.lang.String[] listCachedFiles()"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.NRTCachingDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.NRTCachingDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NRTCachingDirectory.org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public synchronized org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.NRTCachingDirectory.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.NativeFSLock", "org.apache.lucene.store.NativeFSLock(java.io.File, java.lang.String)", "public org.apache.lucene.store.NativeFSLock(java.io.File, java.lang.String)"], ["synchronized", "org.apache.lucene.store.NativeFSLock.boolean obtain()", "public synchronized boolean obtain() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NativeFSLock.void release()", "public synchronized void release() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NativeFSLock.boolean isLocked()", "public synchronized boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.NativeFSLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.NativeFSLockFactory", "org.apache.lucene.store.NativeFSLockFactory()", "public org.apache.lucene.store.NativeFSLockFactory()"], ["org.apache.lucene.store.NativeFSLockFactory", "org.apache.lucene.store.NativeFSLockFactory(java.lang.String)", "public org.apache.lucene.store.NativeFSLockFactory(java.lang.String)"], ["org.apache.lucene.store.NativeFSLockFactory", "org.apache.lucene.store.NativeFSLockFactory(java.io.File)", "public org.apache.lucene.store.NativeFSLockFactory(java.io.File)"], ["synchronized", "org.apache.lucene.store.NativeFSLockFactory.org.apache.lucene.store.Lock makeLock(java.lang.String)", "public synchronized org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.NativeFSLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["boolean", "org.apache.lucene.store.NoLock.obtain()", "public boolean obtain() throws java.io.IOException"], ["void", "org.apache.lucene.store.NoLock.release()", "public void release()"], ["boolean", "org.apache.lucene.store.NoLock.isLocked()", "public boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.NoLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.NoLockFactory", "org.apache.lucene.store.NoLockFactory.getNoLockFactory()", "public static org.apache.lucene.store.NoLockFactory getNoLockFactory()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.NoLockFactory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.NoLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String)"], ["org.apache.lucene.store.NoSuchDirectoryException", "org.apache.lucene.store.NoSuchDirectoryException(java.lang.String)", "public org.apache.lucene.store.NoSuchDirectoryException(java.lang.String)"], ["org.apache.lucene.store.OutputStreamDataOutput", "org.apache.lucene.store.OutputStreamDataOutput(java.io.OutputStream)", "public org.apache.lucene.store.OutputStreamDataOutput(java.io.OutputStream)"], ["void", "org.apache.lucene.store.OutputStreamDataOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.OutputStreamDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.OutputStreamDataOutput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory()", "public org.apache.lucene.store.RAMDirectory()"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.Directory, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.Directory, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.RAMDirectory.listAll()", "public final java.lang.String[] listAll()"], ["boolean", "org.apache.lucene.store.RAMDirectory.fileExists(java.lang.String)", "public final boolean fileExists(java.lang.String)"], ["long", "org.apache.lucene.store.RAMDirectory.fileLength(java.lang.String)", "public final long fileLength(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMDirectory.sizeInBytes()", "public final long sizeInBytes()"], ["void", "org.apache.lucene.store.RAMDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.RAMDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.RAMDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.close()", "public void close()"], ["org.apache.lucene.store.RAMFile", "org.apache.lucene.store.RAMFile()", "public org.apache.lucene.store.RAMFile()"], ["synchronized", "org.apache.lucene.store.RAMFile.long getLength()", "public synchronized long getLength()"], ["synchronized", "org.apache.lucene.store.RAMFile.long getSizeInBytes()", "public synchronized long getSizeInBytes()"], ["org.apache.lucene.store.RAMInputStream", "org.apache.lucene.store.RAMInputStream(java.lang.String, org.apache.lucene.store.RAMFile)", "public org.apache.lucene.store.RAMInputStream(java.lang.String, org.apache.lucene.store.RAMFile) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMInputStream.close()", "public void close()"], ["long", "org.apache.lucene.store.RAMInputStream.length()", "public long length()"], ["byte", "org.apache.lucene.store.RAMInputStream.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMInputStream.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMInputStream.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.RAMInputStream.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream()", "public org.apache.lucene.store.RAMOutputStream()"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile)", "public org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile)"], ["void", "org.apache.lucene.store.RAMOutputStream.writeTo(org.apache.lucene.store.IndexOutput)", "public void writeTo(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.writeTo(byte[], int)", "public void writeTo(byte[], int) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.reset()", "public void reset()"], ["void", "org.apache.lucene.store.RAMOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMOutputStream.length()", "public long length()"], ["void", "org.apache.lucene.store.RAMOutputStream.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.flush()", "public void flush() throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMOutputStream.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.store.RAMOutputStream.sizeInBytes()", "public long sizeInBytes()"], ["org.apache.lucene.store.RateLimiter", "org.apache.lucene.store.RateLimiter(double)", "public org.apache.lucene.store.RateLimiter(double)"], ["void", "org.apache.lucene.store.RateLimiter.setMbPerSec(double)", "public void setMbPerSec(double)"], ["double", "org.apache.lucene.store.RateLimiter.getMbPerSec()", "public double getMbPerSec()"], ["void", "org.apache.lucene.store.RateLimiter.pause(long)", "public void pause(long)"], ["void", "org.apache.lucene.store.SimpleFSDirectory$1.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory$1.openSlice(java.lang.String, long, long)", "public org.apache.lucene.store.IndexInput openSlice(java.lang.String, long, long)"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory$1.openFullSlice()", "public org.apache.lucene.store.IndexInput openFullSlice()"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.io.File, org.apache.lucene.store.IOContext, int)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.io.File, org.apache.lucene.store.IOContext, int) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.io.RandomAccessFile, long, long, int, int)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.io.RandomAccessFile, long, long, int, int)"], ["org.apache.lucene.store.SimpleFSDirectory", "org.apache.lucene.store.SimpleFSDirectory(java.io.File, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.SimpleFSDirectory(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory", "org.apache.lucene.store.SimpleFSDirectory(java.io.File)", "public org.apache.lucene.store.SimpleFSDirectory(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.SimpleFSDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSLock", "org.apache.lucene.store.SimpleFSLock(java.io.File, java.lang.String)", "public org.apache.lucene.store.SimpleFSLock(java.io.File, java.lang.String)"], ["boolean", "org.apache.lucene.store.SimpleFSLock.obtain()", "public boolean obtain() throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSLock.release()", "public void release() throws org.apache.lucene.store.LockReleaseFailedException"], ["boolean", "org.apache.lucene.store.SimpleFSLock.isLocked()", "public boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.SimpleFSLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.SimpleFSLockFactory", "org.apache.lucene.store.SimpleFSLockFactory()", "public org.apache.lucene.store.SimpleFSLockFactory()"], ["org.apache.lucene.store.SimpleFSLockFactory", "org.apache.lucene.store.SimpleFSLockFactory(java.io.File)", "public org.apache.lucene.store.SimpleFSLockFactory(java.io.File)"], ["org.apache.lucene.store.SimpleFSLockFactory", "org.apache.lucene.store.SimpleFSLockFactory(java.lang.String)", "public org.apache.lucene.store.SimpleFSLockFactory(java.lang.String)"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.SimpleFSLockFactory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.SimpleFSLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.SingleInstanceLock", "org.apache.lucene.store.SingleInstanceLock(java.util.HashSet<java.lang.String>, java.lang.String)", "public org.apache.lucene.store.SingleInstanceLock(java.util.HashSet<java.lang.String>, java.lang.String)"], ["boolean", "org.apache.lucene.store.SingleInstanceLock.obtain()", "public boolean obtain() throws java.io.IOException"], ["void", "org.apache.lucene.store.SingleInstanceLock.release()", "public void release()"], ["boolean", "org.apache.lucene.store.SingleInstanceLock.isLocked()", "public boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.SingleInstanceLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.SingleInstanceLockFactory", "org.apache.lucene.store.SingleInstanceLockFactory()", "public org.apache.lucene.store.SingleInstanceLockFactory()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.SingleInstanceLockFactory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.SingleInstanceLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.TrackingDirectoryWrapper", "org.apache.lucene.store.TrackingDirectoryWrapper(org.apache.lucene.store.Directory)", "public org.apache.lucene.store.TrackingDirectoryWrapper(org.apache.lucene.store.Directory)"], ["java.lang.String[]", "org.apache.lucene.store.TrackingDirectoryWrapper.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["boolean", "org.apache.lucene.store.TrackingDirectoryWrapper.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.TrackingDirectoryWrapper.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.TrackingDirectoryWrapper.createOutput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.sync(java.util.Collection<java.lang.String>)", "public void sync(java.util.Collection<java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.TrackingDirectoryWrapper.openInput(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.TrackingDirectoryWrapper.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.setLockFactory(org.apache.lucene.store.LockFactory)", "public void setLockFactory(org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.TrackingDirectoryWrapper.getLockFactory()", "public org.apache.lucene.store.LockFactory getLockFactory()"], ["java.lang.String", "org.apache.lucene.store.TrackingDirectoryWrapper.getLockID()", "public java.lang.String getLockID()"], ["java.lang.String", "org.apache.lucene.store.TrackingDirectoryWrapper.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.TrackingDirectoryWrapper.copy(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)", "public void copy(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["org.apache.lucene.store.Directory$IndexInputSlicer", "org.apache.lucene.store.TrackingDirectoryWrapper.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)", "public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException"], ["java.util.Set<java.lang.String>", "org.apache.lucene.store.TrackingDirectoryWrapper.getCreatedFiles()", "public java.util.Set<java.lang.String> getCreatedFiles()"], ["org.apache.lucene.store.VerifyingLockFactory$CheckedLock", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)", "public org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain(long)", "public synchronized boolean obtain(long) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain()", "public synchronized boolean obtain() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean isLocked()", "public synchronized boolean isLocked() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.void release()", "public synchronized void release() throws java.io.IOException"], ["org.apache.lucene.store.VerifyingLockFactory", "org.apache.lucene.store.VerifyingLockFactory(byte, org.apache.lucene.store.LockFactory, java.lang.String, int)", "public org.apache.lucene.store.VerifyingLockFactory(byte, org.apache.lucene.store.LockFactory, java.lang.String, int)"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory.org.apache.lucene.store.Lock makeLock(java.lang.String)", "public synchronized org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory.void clearLock(java.lang.String)", "public synchronized void clearLock(java.lang.String) throws java.io.IOException"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[])", "public static int parseInt(char[]) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int)", "public static int parseInt(char[], int, int) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int, int)", "public static int parseInt(char[], int, int, int) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.oversize(int, int)", "public static int oversize(int, int)"], ["int", "org.apache.lucene.util.ArrayUtil.getShrinkSize(int, int, int)", "public static int getShrinkSize(int, int, int)"], ["short[]", "org.apache.lucene.util.ArrayUtil.grow(short[], int)", "public static short[] grow(short[], int)"], ["short[]", "org.apache.lucene.util.ArrayUtil.grow(short[])", "public static short[] grow(short[])"], ["float[]", "org.apache.lucene.util.ArrayUtil.grow(float[], int)", "public static float[] grow(float[], int)"], ["float[]", "org.apache.lucene.util.ArrayUtil.grow(float[])", "public static float[] grow(float[])"], ["double[]", "org.apache.lucene.util.ArrayUtil.grow(double[], int)", "public static double[] grow(double[], int)"], ["double[]", "org.apache.lucene.util.ArrayUtil.grow(double[])", "public static double[] grow(double[])"], ["short[]", "org.apache.lucene.util.ArrayUtil.shrink(short[], int)", "public static short[] shrink(short[], int)"], ["int[]", "org.apache.lucene.util.ArrayUtil.grow(int[], int)", "public static int[] grow(int[], int)"], ["int[]", "org.apache.lucene.util.ArrayUtil.grow(int[])", "public static int[] grow(int[])"], ["int[]", "org.apache.lucene.util.ArrayUtil.shrink(int[], int)", "public static int[] shrink(int[], int)"], ["long[]", "org.apache.lucene.util.ArrayUtil.grow(long[], int)", "public static long[] grow(long[], int)"], ["long[]", "org.apache.lucene.util.ArrayUtil.grow(long[])", "public static long[] grow(long[])"], ["long[]", "org.apache.lucene.util.ArrayUtil.shrink(long[], int)", "public static long[] shrink(long[], int)"], ["byte[]", "org.apache.lucene.util.ArrayUtil.grow(byte[], int)", "public static byte[] grow(byte[], int)"], ["byte[]", "org.apache.lucene.util.ArrayUtil.grow(byte[])", "public static byte[] grow(byte[])"], ["byte[]", "org.apache.lucene.util.ArrayUtil.shrink(byte[], int)", "public static byte[] shrink(byte[], int)"], ["boolean[]", "org.apache.lucene.util.ArrayUtil.grow(boolean[], int)", "public static boolean[] grow(boolean[], int)"], ["boolean[]", "org.apache.lucene.util.ArrayUtil.grow(boolean[])", "public static boolean[] grow(boolean[])"], ["boolean[]", "org.apache.lucene.util.ArrayUtil.shrink(boolean[], int)", "public static boolean[] shrink(boolean[], int)"], ["char[]", "org.apache.lucene.util.ArrayUtil.grow(char[], int)", "public static char[] grow(char[], int)"], ["char[]", "org.apache.lucene.util.ArrayUtil.grow(char[])", "public static char[] grow(char[])"], ["char[]", "org.apache.lucene.util.ArrayUtil.shrink(char[], int)", "public static char[] shrink(char[], int)"], ["int[][]", "org.apache.lucene.util.ArrayUtil.grow(int[][], int)", "public static int[][] grow(int[][], int)"], ["int[][]", "org.apache.lucene.util.ArrayUtil.grow(int[][])", "public static int[][] grow(int[][])"], ["int[][]", "org.apache.lucene.util.ArrayUtil.shrink(int[][], int)", "public static int[][] shrink(int[][], int)"], ["float[][]", "org.apache.lucene.util.ArrayUtil.grow(float[][], int)", "public static float[][] grow(float[][], int)"], ["float[][]", "org.apache.lucene.util.ArrayUtil.grow(float[][])", "public static float[][] grow(float[][])"], ["float[][]", "org.apache.lucene.util.ArrayUtil.shrink(float[][], int)", "public static float[][] shrink(float[][], int)"], ["int", "org.apache.lucene.util.ArrayUtil.hashCode(char[], int, int)", "public static int hashCode(char[], int, int)"], ["int", "org.apache.lucene.util.ArrayUtil.hashCode(byte[], int, int)", "public static int hashCode(byte[], int, int)"], ["boolean", "org.apache.lucene.util.ArrayUtil.equals(char[], int, char[], int, int)", "public static boolean equals(char[], int, char[], int, int)"], ["boolean", "org.apache.lucene.util.ArrayUtil.equals(byte[], int, byte[], int, int)", "public static boolean equals(byte[], int, byte[], int, int)"], ["boolean", "org.apache.lucene.util.ArrayUtil.equals(int[], int, int[], int, int)", "public static boolean equals(int[], int, int[], int, int)"], ["int[]", "org.apache.lucene.util.ArrayUtil.toIntArray(java.util.Collection<java.lang.Integer>)", "public static int[] toIntArray(java.util.Collection<java.lang.Integer>)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.quickSort(T[], int, int, java.util.Comparator<? super T>)", "public static <T> void quickSort(T[], int, int, java.util.Comparator<? super T>)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.quickSort(T[], java.util.Comparator<? super T>)", "public static <T> void quickSort(T[], java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.quickSort(T[], int, int)", "public static <T extends java.lang.Comparable<? super T>> void quickSort(T[], int, int)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.quickSort(T[])", "public static <T extends java.lang.Comparable<? super T>> void quickSort(T[])"], ["<T> void", "org.apache.lucene.util.ArrayUtil.mergeSort(T[], int, int, java.util.Comparator<? super T>)", "public static <T> void mergeSort(T[], int, int, java.util.Comparator<? super T>)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.mergeSort(T[], java.util.Comparator<? super T>)", "public static <T> void mergeSort(T[], java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.mergeSort(T[], int, int)", "public static <T extends java.lang.Comparable<? super T>> void mergeSort(T[], int, int)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.mergeSort(T[])", "public static <T extends java.lang.Comparable<? super T>> void mergeSort(T[])"], ["<T> void", "org.apache.lucene.util.ArrayUtil.insertionSort(T[], int, int, java.util.Comparator<? super T>)", "public static <T> void insertionSort(T[], int, int, java.util.Comparator<? super T>)"], ["<T> void", "org.apache.lucene.util.ArrayUtil.insertionSort(T[], java.util.Comparator<? super T>)", "public static <T> void insertionSort(T[], java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.insertionSort(T[], int, int)", "public static <T extends java.lang.Comparable<? super T>> void insertionSort(T[], int, int)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.ArrayUtil.insertionSort(T[])", "public static <T extends java.lang.Comparable<? super T>> void insertionSort(T[])"], ["void", "org.apache.lucene.util.AttributeImpl$1.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)", "public void reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeImpl()", "public org.apache.lucene.util.AttributeImpl()"], ["java.lang.String", "org.apache.lucene.util.AttributeImpl.reflectAsString(boolean)", "public final java.lang.String reflectAsString(boolean)"], ["void", "org.apache.lucene.util.AttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)", "public void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeImpl.clone()", "public org.apache.lucene.util.AttributeImpl clone()"], ["java.lang.Object", "org.apache.lucene.util.AttributeImpl.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.apache.lucene.util.AttributeSource$1.remove()", "public void remove()"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeSource$1.next()", "public org.apache.lucene.util.AttributeImpl next()"], ["boolean", "org.apache.lucene.util.AttributeSource$1.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.apache.lucene.util.AttributeSource$1.next()", "public java.lang.Object next()"], ["void", "org.apache.lucene.util.AttributeSource$2.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)", "public void reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeSource$AttributeFactory$DefaultAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["org.apache.lucene.util.AttributeSource$AttributeFactory", "org.apache.lucene.util.AttributeSource$AttributeFactory()", "public org.apache.lucene.util.AttributeSource$AttributeFactory()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource$State()", "public org.apache.lucene.util.AttributeSource$State()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource$State.clone()", "public org.apache.lucene.util.AttributeSource$State clone()"], ["java.lang.Object", "org.apache.lucene.util.AttributeSource$State.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource()", "public org.apache.lucene.util.AttributeSource()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)", "public org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource$AttributeFactory)", "public org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource$AttributeFactory)"], ["org.apache.lucene.util.AttributeSource$AttributeFactory", "org.apache.lucene.util.AttributeSource.getAttributeFactory()", "public final org.apache.lucene.util.AttributeSource$AttributeFactory getAttributeFactory()"], ["java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>>", "org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()", "public final java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>> getAttributeClassesIterator()"], ["java.util.Iterator<org.apache.lucene.util.AttributeImpl>", "org.apache.lucene.util.AttributeSource.getAttributeImplsIterator()", "public final java.util.Iterator<org.apache.lucene.util.AttributeImpl> getAttributeImplsIterator()"], ["void", "org.apache.lucene.util.AttributeSource.addAttributeImpl(org.apache.lucene.util.AttributeImpl)", "public final void addAttributeImpl(org.apache.lucene.util.AttributeImpl)"], ["<A extends org.apache.lucene.util.Attribute> A", "org.apache.lucene.util.AttributeSource.addAttribute(java.lang.Class<A>)", "public final <A extends org.apache.lucene.util.Attribute> A addAttribute(java.lang.Class<A>)"], ["boolean", "org.apache.lucene.util.AttributeSource.hasAttributes()", "public final boolean hasAttributes()"], ["boolean", "org.apache.lucene.util.AttributeSource.hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public final boolean hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["<A extends org.apache.lucene.util.Attribute> A", "org.apache.lucene.util.AttributeSource.getAttribute(java.lang.Class<A>)", "public final <A extends org.apache.lucene.util.Attribute> A getAttribute(java.lang.Class<A>)"], ["void", "org.apache.lucene.util.AttributeSource.clearAttributes()", "public final void clearAttributes()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource.captureState()", "public final org.apache.lucene.util.AttributeSource$State captureState()"], ["void", "org.apache.lucene.util.AttributeSource.restoreState(org.apache.lucene.util.AttributeSource$State)", "public final void restoreState(org.apache.lucene.util.AttributeSource$State)"], ["int", "org.apache.lucene.util.AttributeSource.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.AttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.AttributeSource.reflectAsString(boolean)", "public final java.lang.String reflectAsString(boolean)"], ["void", "org.apache.lucene.util.AttributeSource.reflectWith(org.apache.lucene.util.AttributeReflector)", "public final void reflectWith(org.apache.lucene.util.AttributeReflector)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource.cloneAttributes()", "public final org.apache.lucene.util.AttributeSource cloneAttributes()"], ["void", "org.apache.lucene.util.AttributeSource.copyTo(org.apache.lucene.util.AttributeSource)", "public final void copyTo(org.apache.lucene.util.AttributeSource)"], ["int", "org.apache.lucene.util.BitUtil.pop(long)", "public static int pop(long)"], ["long", "org.apache.lucene.util.BitUtil.pop_array(long[], int, int)", "public static long pop_array(long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_intersect(long[], long[], int, int)", "public static long pop_intersect(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_union(long[], long[], int, int)", "public static long pop_union(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_andnot(long[], long[], int, int)", "public static long pop_andnot(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_xor(long[], long[], int, int)", "public static long pop_xor(long[], long[], int, int)"], ["int", "org.apache.lucene.util.BitUtil.ntz(long)", "public static int ntz(long)"], ["int", "org.apache.lucene.util.BitUtil.ntz(int)", "public static int ntz(int)"], ["int", "org.apache.lucene.util.BitUtil.ntz2(long)", "public static int ntz2(long)"], ["int", "org.apache.lucene.util.BitUtil.ntz3(long)", "public static int ntz3(long)"], ["int", "org.apache.lucene.util.BitUtil.nlz(long)", "public static int nlz(long)"], ["boolean", "org.apache.lucene.util.BitUtil.isPowerOfTwo(int)", "public static boolean isPowerOfTwo(int)"], ["boolean", "org.apache.lucene.util.BitUtil.isPowerOfTwo(long)", "public static boolean isPowerOfTwo(long)"], ["int", "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)", "public static int nextHighestPowerOfTwo(int)"], ["long", "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)", "public static long nextHighestPowerOfTwo(long)"], ["org.apache.lucene.util.Bits$MatchAllBits", "org.apache.lucene.util.Bits$MatchAllBits(int)", "public org.apache.lucene.util.Bits$MatchAllBits(int)"], ["boolean", "org.apache.lucene.util.Bits$MatchAllBits.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.util.Bits$MatchAllBits.length()", "public int length()"], ["org.apache.lucene.util.Bits$MatchNoBits", "org.apache.lucene.util.Bits$MatchNoBits(int)", "public org.apache.lucene.util.Bits$MatchNoBits(int)"], ["boolean", "org.apache.lucene.util.Bits$MatchNoBits.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.util.Bits$MatchNoBits.length()", "public int length()"], ["org.apache.lucene.util.ByteBlockPool$Allocator", "org.apache.lucene.util.ByteBlockPool$Allocator(int)", "public org.apache.lucene.util.ByteBlockPool$Allocator(int)"], ["void", "org.apache.lucene.util.ByteBlockPool$Allocator.recycleByteBlocks(java.util.List<byte[]>)", "public void recycleByteBlocks(java.util.List<byte[]>)"], ["byte[]", "org.apache.lucene.util.ByteBlockPool$Allocator.getByteBlock()", "public byte[] getByteBlock()"], ["org.apache.lucene.util.ByteBlockPool$DirectAllocator", "org.apache.lucene.util.ByteBlockPool$DirectAllocator()", "public org.apache.lucene.util.ByteBlockPool$DirectAllocator()"], ["org.apache.lucene.util.ByteBlockPool$DirectAllocator", "org.apache.lucene.util.ByteBlockPool$DirectAllocator(int)", "public org.apache.lucene.util.ByteBlockPool$DirectAllocator(int)"], ["void", "org.apache.lucene.util.ByteBlockPool$DirectAllocator.recycleByteBlocks(byte[][], int, int)", "public void recycleByteBlocks(byte[][], int, int)"], ["org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(org.apache.lucene.util.Counter)", "public org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(org.apache.lucene.util.Counter)"], ["org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(int, org.apache.lucene.util.Counter)", "public org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(int, org.apache.lucene.util.Counter)"], ["byte[]", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.getByteBlock()", "public byte[] getByteBlock()"], ["void", "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.recycleByteBlocks(byte[][], int, int)", "public void recycleByteBlocks(byte[][], int, int)"], ["org.apache.lucene.util.ByteBlockPool", "org.apache.lucene.util.ByteBlockPool(org.apache.lucene.util.ByteBlockPool$Allocator)", "public org.apache.lucene.util.ByteBlockPool(org.apache.lucene.util.ByteBlockPool$Allocator)"], ["void", "org.apache.lucene.util.ByteBlockPool.dropBuffersAndReset()", "public void dropBuffersAndReset()"], ["void", "org.apache.lucene.util.ByteBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.util.ByteBlockPool.nextBuffer()", "public void nextBuffer()"], ["int", "org.apache.lucene.util.ByteBlockPool.newSlice(int)", "public int newSlice(int)"], ["int", "org.apache.lucene.util.ByteBlockPool.allocSlice(byte[], int)", "public int allocSlice(byte[], int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.ByteBlockPool.setBytesRef(org.apache.lucene.util.BytesRef, int)", "public final org.apache.lucene.util.BytesRef setBytesRef(org.apache.lucene.util.BytesRef, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.ByteBlockPool.deref(org.apache.lucene.util.BytesRef)", "public final org.apache.lucene.util.BytesRef deref(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.ByteBlockPool.copy(org.apache.lucene.util.BytesRef)", "public final void copy(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.ByteBlockPool.copyFrom(org.apache.lucene.util.BytesRef)", "public final org.apache.lucene.util.BytesRef copyFrom(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.ByteBlockPool.writePool(org.apache.lucene.store.DataOutput)", "public final void writePool(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["int", "org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public int compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef()", "public org.apache.lucene.util.BytesRef()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(byte[], int, int)", "public org.apache.lucene.util.BytesRef(byte[], int, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(byte[])", "public org.apache.lucene.util.BytesRef(byte[])"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(int)", "public org.apache.lucene.util.BytesRef(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef(java.lang.CharSequence)", "public org.apache.lucene.util.BytesRef(java.lang.CharSequence)"], ["void", "org.apache.lucene.util.BytesRef.copyChars(java.lang.CharSequence)", "public void copyChars(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.util.BytesRef.bytesEquals(org.apache.lucene.util.BytesRef)", "public boolean bytesEquals(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef.clone()", "public org.apache.lucene.util.BytesRef clone()"], ["int", "org.apache.lucene.util.BytesRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.BytesRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.BytesRef.utf8ToString()", "public java.lang.String utf8ToString()"], ["java.lang.String", "org.apache.lucene.util.BytesRef.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.util.BytesRef.copyBytes(org.apache.lucene.util.BytesRef)", "public void copyBytes(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.BytesRef.append(org.apache.lucene.util.BytesRef)", "public void append(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.BytesRef.grow(int)", "public void grow(int)"], ["int", "org.apache.lucene.util.BytesRef.compareTo(org.apache.lucene.util.BytesRef)", "public int compareTo(org.apache.lucene.util.BytesRef)"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.util.BytesRef.getUTF8SortedAsUnicodeComparator()", "public static java.util.Comparator<org.apache.lucene.util.BytesRef> getUTF8SortedAsUnicodeComparator()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.util.BytesRef.getUTF8SortedAsUTF16Comparator()", "public static java.util.Comparator<org.apache.lucene.util.BytesRef> getUTF8SortedAsUTF16Comparator()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRef.deepCopyOf(org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.util.BytesRef deepCopyOf(org.apache.lucene.util.BytesRef)"], ["java.lang.Object", "org.apache.lucene.util.BytesRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.BytesRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.BytesRefHash$BytesStartArray", "org.apache.lucene.util.BytesRefHash$BytesStartArray()", "public org.apache.lucene.util.BytesRefHash$BytesStartArray()"], ["org.apache.lucene.util.BytesRefHash$DirectBytesStartArray", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int)", "public org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int)"], ["int[]", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.clear()", "public int[] clear()"], ["int[]", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.init()", "public int[] init()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.bytesUsed()", "public org.apache.lucene.util.Counter bytesUsed()"], ["org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray", "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray(int, org.apache.lucene.util.Counter)", "public org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray(int, org.apache.lucene.util.Counter)"], ["int[]", "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.clear()", "public int[] clear()"], ["int[]", "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.grow()", "public int[] grow()"], ["int[]", "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.init()", "public int[] init()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.bytesUsed()", "public org.apache.lucene.util.Counter bytesUsed()"], ["org.apache.lucene.util.BytesRefHash", "org.apache.lucene.util.BytesRefHash()", "public org.apache.lucene.util.BytesRefHash()"], ["org.apache.lucene.util.BytesRefHash", "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool)", "public org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool)"], ["org.apache.lucene.util.BytesRefHash", "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)", "public org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)"], ["int", "org.apache.lucene.util.BytesRefHash.size()", "public int size()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefHash.get(int, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef get(int, org.apache.lucene.util.BytesRef)"], ["int[]", "org.apache.lucene.util.BytesRefHash.compact()", "public int[] compact()"], ["int[]", "org.apache.lucene.util.BytesRefHash.sort(java.util.Comparator<org.apache.lucene.util.BytesRef>)", "public int[] sort(java.util.Comparator<org.apache.lucene.util.BytesRef>)"], ["void", "org.apache.lucene.util.BytesRefHash.clear(boolean)", "public void clear(boolean)"], ["void", "org.apache.lucene.util.BytesRefHash.clear()", "public void clear()"], ["void", "org.apache.lucene.util.BytesRefHash.close()", "public void close()"], ["int", "org.apache.lucene.util.BytesRefHash.add(org.apache.lucene.util.BytesRef)", "public int add(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.BytesRefHash.add(org.apache.lucene.util.BytesRef, int)", "public int add(org.apache.lucene.util.BytesRef, int)"], ["int", "org.apache.lucene.util.BytesRefHash.addByPoolOffset(int)", "public int addByPoolOffset(int)"], ["void", "org.apache.lucene.util.BytesRefHash.reinit()", "public void reinit()"], ["int", "org.apache.lucene.util.BytesRefHash.byteStart(int)", "public int byteStart(int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.BytesRefIterator$1.next()", "public org.apache.lucene.util.BytesRef next()"], ["java.util.Comparator<org.apache.lucene.util.BytesRef>", "org.apache.lucene.util.BytesRefIterator$1.getComparator()", "public java.util.Comparator<org.apache.lucene.util.BytesRef> getComparator()"], ["int", "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public int compare(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["int", "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef()", "public org.apache.lucene.util.CharsRef()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef(int)", "public org.apache.lucene.util.CharsRef(int)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef(char[], int, int)", "public org.apache.lucene.util.CharsRef(char[], int, int)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef(java.lang.String)", "public org.apache.lucene.util.CharsRef(java.lang.String)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef.clone()", "public org.apache.lucene.util.CharsRef clone()"], ["int", "org.apache.lucene.util.CharsRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.CharsRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.CharsRef.charsEquals(org.apache.lucene.util.CharsRef)", "public boolean charsEquals(org.apache.lucene.util.CharsRef)"], ["int", "org.apache.lucene.util.CharsRef.compareTo(org.apache.lucene.util.CharsRef)", "public int compareTo(org.apache.lucene.util.CharsRef)"], ["void", "org.apache.lucene.util.CharsRef.copyChars(org.apache.lucene.util.CharsRef)", "public void copyChars(org.apache.lucene.util.CharsRef)"], ["void", "org.apache.lucene.util.CharsRef.grow(int)", "public void grow(int)"], ["void", "org.apache.lucene.util.CharsRef.copyChars(char[], int, int)", "public void copyChars(char[], int, int)"], ["void", "org.apache.lucene.util.CharsRef.append(char[], int, int)", "public void append(char[], int, int)"], ["java.lang.String", "org.apache.lucene.util.CharsRef.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.CharsRef.length()", "public int length()"], ["char", "org.apache.lucene.util.CharsRef.charAt(int)", "public char charAt(int)"], ["java.lang.CharSequence", "org.apache.lucene.util.CharsRef.subSequence(int, int)", "public java.lang.CharSequence subSequence(int, int)"], ["java.util.Comparator<org.apache.lucene.util.CharsRef>", "org.apache.lucene.util.CharsRef.getUTF16SortedAsUTF8Comparator()", "public static java.util.Comparator<org.apache.lucene.util.CharsRef> getUTF16SortedAsUTF8Comparator()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.CharsRef.deepCopyOf(org.apache.lucene.util.CharsRef)", "public static org.apache.lucene.util.CharsRef deepCopyOf(org.apache.lucene.util.CharsRef)"], ["java.lang.Object", "org.apache.lucene.util.CharsRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.CharsRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.CloseableThreadLocal", "org.apache.lucene.util.CloseableThreadLocal()", "public org.apache.lucene.util.CloseableThreadLocal()"], ["T", "org.apache.lucene.util.CloseableThreadLocal.get()", "public T get()"], ["void", "org.apache.lucene.util.CloseableThreadLocal.set(T)", "public void set(T)"], ["void", "org.apache.lucene.util.CloseableThreadLocal.close()", "public void close()"], ["<T> void", "org.apache.lucene.util.CollectionUtil.quickSort(java.util.List<T>, java.util.Comparator<? super T>)", "public static <T> void quickSort(java.util.List<T>, java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.CollectionUtil.quickSort(java.util.List<T>)", "public static <T extends java.lang.Comparable<? super T>> void quickSort(java.util.List<T>)"], ["<T> void", "org.apache.lucene.util.CollectionUtil.mergeSort(java.util.List<T>, java.util.Comparator<? super T>)", "public static <T> void mergeSort(java.util.List<T>, java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.CollectionUtil.mergeSort(java.util.List<T>)", "public static <T extends java.lang.Comparable<? super T>> void mergeSort(java.util.List<T>)"], ["<T> void", "org.apache.lucene.util.CollectionUtil.insertionSort(java.util.List<T>, java.util.Comparator<? super T>)", "public static <T> void insertionSort(java.util.List<T>, java.util.Comparator<? super T>)"], ["<T extends java.lang.Comparable<? super T>> void", "org.apache.lucene.util.CollectionUtil.insertionSort(java.util.List<T>)", "public static <T extends java.lang.Comparable<? super T>> void insertionSort(java.util.List<T>)"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.String, java.io.File)", "public static org.apache.lucene.store.FSDirectory newFSDirectory(java.lang.String, java.io.File)"], ["java.lang.Class<? extends org.apache.lucene.store.Directory>", "org.apache.lucene.util.CommandLineUtil.loadDirectoryClass(java.lang.String)", "public static java.lang.Class<? extends org.apache.lucene.store.Directory> loadDirectoryClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["java.lang.Class<? extends org.apache.lucene.store.FSDirectory>", "org.apache.lucene.util.CommandLineUtil.loadFSDirectoryClass(java.lang.String)", "public static java.lang.Class<? extends org.apache.lucene.store.FSDirectory> loadFSDirectoryClass(java.lang.String) throws java.lang.ClassNotFoundException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.io.File)", "public static org.apache.lucene.store.FSDirectory newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.io.File) throws java.lang.NoSuchMethodException, java.lang.InstantiationException, java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException"], ["long", "org.apache.lucene.util.Counter$AtomicCounter.addAndGet(long)", "public long addAndGet(long)"], ["long", "org.apache.lucene.util.Counter$AtomicCounter.get()", "public long get()"], ["long", "org.apache.lucene.util.Counter$SerialCounter.addAndGet(long)", "public long addAndGet(long)"], ["long", "org.apache.lucene.util.Counter$SerialCounter.get()", "public long get()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.Counter()", "public org.apache.lucene.util.Counter()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.Counter.newCounter()", "public static org.apache.lucene.util.Counter newCounter()"], ["org.apache.lucene.util.Counter", "org.apache.lucene.util.Counter.newCounter(boolean)", "public static org.apache.lucene.util.Counter newCounter(boolean)"], ["int", "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.advance(int)", "public int advance(int)"], ["org.apache.lucene.util.DocIdBitSet", "org.apache.lucene.util.DocIdBitSet(java.util.BitSet)", "public org.apache.lucene.util.DocIdBitSet(java.util.BitSet)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.DocIdBitSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.util.DocIdBitSet.bits()", "public org.apache.lucene.util.Bits bits()"], ["boolean", "org.apache.lucene.util.DocIdBitSet.isCacheable()", "public boolean isCacheable()"], ["java.util.BitSet", "org.apache.lucene.util.DocIdBitSet.getBitSet()", "public java.util.BitSet getBitSet()"], ["boolean", "org.apache.lucene.util.DocIdBitSet.get(int)", "public boolean get(int)"], ["int", "org.apache.lucene.util.DocIdBitSet.length()", "public int length()"], ["org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey", "org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey()", "public org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey()"], ["java.lang.Object", "org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.DoubleBarrelLRUCache", "org.apache.lucene.util.DoubleBarrelLRUCache(int)", "public org.apache.lucene.util.DoubleBarrelLRUCache(int)"], ["V", "org.apache.lucene.util.DoubleBarrelLRUCache.get(K)", "public V get(K)"], ["void", "org.apache.lucene.util.DoubleBarrelLRUCache.put(K, V)", "public void put(K, V)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType, java.lang.String, org.apache.lucene.search.FieldCache$CacheEntry...)", "public org.apache.lucene.util.FieldCacheSanityChecker$Insanity(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType, java.lang.String, org.apache.lucene.search.FieldCache$CacheEntry...)"], ["org.apache.lucene.util.FieldCacheSanityChecker$InsanityType", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getType()", "public org.apache.lucene.util.FieldCacheSanityChecker$InsanityType getType()"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getMsg()", "public java.lang.String getMsg()"], ["org.apache.lucene.search.FieldCache$CacheEntry[]", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getCacheEntries()", "public org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$InsanityType.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.FieldCacheSanityChecker$ReaderField", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField(java.lang.Object, java.lang.String)", "public org.apache.lucene.util.FieldCacheSanityChecker$ReaderField(java.lang.Object, java.lang.String)"], ["int", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.FieldCacheSanityChecker", "org.apache.lucene.util.FieldCacheSanityChecker()", "public org.apache.lucene.util.FieldCacheSanityChecker()"], ["void", "org.apache.lucene.util.FieldCacheSanityChecker.setRamUsageEstimator(boolean)", "public void setRamUsageEstimator(boolean)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]", "org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(org.apache.lucene.search.FieldCache)", "public static org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]", "org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(org.apache.lucene.search.FieldCache$CacheEntry...)", "public static org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache$CacheEntry...)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]", "org.apache.lucene.util.FieldCacheSanityChecker.check(org.apache.lucene.search.FieldCache$CacheEntry...)", "public org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] check(org.apache.lucene.search.FieldCache$CacheEntry...)"], ["org.apache.lucene.util.FilterIterator", "org.apache.lucene.util.FilterIterator(java.util.Iterator<T>)", "public org.apache.lucene.util.FilterIterator(java.util.Iterator<T>)"], ["boolean", "org.apache.lucene.util.FilterIterator.hasNext()", "public final boolean hasNext()"], ["T", "org.apache.lucene.util.FilterIterator.next()", "public final T next()"], ["void", "org.apache.lucene.util.FilterIterator.remove()", "public final void remove()"], ["int", "org.apache.lucene.util.FixedBitSet.bits2words(int)", "public static int bits2words(int)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet(int)", "public org.apache.lucene.util.FixedBitSet(int)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet(long[], int)", "public org.apache.lucene.util.FixedBitSet(long[], int)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet(org.apache.lucene.util.FixedBitSet)", "public org.apache.lucene.util.FixedBitSet(org.apache.lucene.util.FixedBitSet)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.FixedBitSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.util.FixedBitSet.bits()", "public org.apache.lucene.util.Bits bits()"], ["int", "org.apache.lucene.util.FixedBitSet.length()", "public int length()"], ["boolean", "org.apache.lucene.util.FixedBitSet.isCacheable()", "public boolean isCacheable()"], ["long[]", "org.apache.lucene.util.FixedBitSet.getBits()", "public long[] getBits()"], ["int", "org.apache.lucene.util.FixedBitSet.cardinality()", "public int cardinality()"], ["boolean", "org.apache.lucene.util.FixedBitSet.get(int)", "public boolean get(int)"], ["void", "org.apache.lucene.util.FixedBitSet.set(int)", "public void set(int)"], ["boolean", "org.apache.lucene.util.FixedBitSet.getAndSet(int)", "public boolean getAndSet(int)"], ["void", "org.apache.lucene.util.FixedBitSet.clear(int)", "public void clear(int)"], ["boolean", "org.apache.lucene.util.FixedBitSet.getAndClear(int)", "public boolean getAndClear(int)"], ["int", "org.apache.lucene.util.FixedBitSet.nextSetBit(int)", "public int nextSetBit(int)"], ["int", "org.apache.lucene.util.FixedBitSet.prevSetBit(int)", "public int prevSetBit(int)"], ["void", "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.search.DocIdSetIterator)", "public void or(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.util.FixedBitSet)", "public void or(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.search.DocIdSetIterator)", "public void and(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.util.FixedBitSet)", "public void and(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.search.DocIdSetIterator)", "public void andNot(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.util.FixedBitSet)", "public void andNot(org.apache.lucene.util.FixedBitSet)"], ["void", "org.apache.lucene.util.FixedBitSet.flip(int, int)", "public void flip(int, int)"], ["void", "org.apache.lucene.util.FixedBitSet.set(int, int)", "public void set(int, int)"], ["void", "org.apache.lucene.util.FixedBitSet.clear(int, int)", "public void clear(int, int)"], ["org.apache.lucene.util.FixedBitSet", "org.apache.lucene.util.FixedBitSet.clone()", "public org.apache.lucene.util.FixedBitSet clone()"], ["boolean", "org.apache.lucene.util.FixedBitSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.FixedBitSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.apache.lucene.util.FixedBitSet.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["<E extends java.lang.Exception> void", "org.apache.lucene.util.IOUtils.closeWhileHandlingException(E, java.io.Closeable...)", "public static <E extends java.lang.Exception> void closeWhileHandlingException(E, java.io.Closeable...) throws E, java/io/IOException"], ["<E extends java.lang.Exception> void", "org.apache.lucene.util.IOUtils.closeWhileHandlingException(E, java.lang.Iterable<? extends java.io.Closeable>)", "public static <E extends java.lang.Exception> void closeWhileHandlingException(E, java.lang.Iterable<? extends java.io.Closeable>) throws E, java/io/IOException"], ["void", "org.apache.lucene.util.IOUtils.close(java.io.Closeable...)", "public static void close(java.io.Closeable...) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.close(java.lang.Iterable<? extends java.io.Closeable>)", "public static void close(java.lang.Iterable<? extends java.io.Closeable>) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.io.Closeable...)", "public static void closeWhileHandlingException(java.io.Closeable...)"], ["void", "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.lang.Iterable<? extends java.io.Closeable>)", "public static void closeWhileHandlingException(java.lang.Iterable<? extends java.io.Closeable>)"], ["java.io.Reader", "org.apache.lucene.util.IOUtils.getDecodingReader(java.io.InputStream, java.nio.charset.Charset)", "public static java.io.Reader getDecodingReader(java.io.InputStream, java.nio.charset.Charset)"], ["java.io.Reader", "org.apache.lucene.util.IOUtils.getDecodingReader(java.io.File, java.nio.charset.Charset)", "public static java.io.Reader getDecodingReader(java.io.File, java.nio.charset.Charset) throws java.io.IOException"], ["java.io.Reader", "org.apache.lucene.util.IOUtils.getDecodingReader(java.lang.Class<?>, java.lang.String, java.nio.charset.Charset)", "public static java.io.Reader getDecodingReader(java.lang.Class<?>, java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["void", "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.lang.String...)", "public static void deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.lang.String...)"], ["void", "org.apache.lucene.util.IOUtils.copy(java.io.File, java.io.File)", "public static void copy(java.io.File, java.io.File) throws java.io.IOException"], ["int", "org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(byte[], int, int)", "public static int getEncodedLength(byte[], int, int)"], ["int", "org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(char[], int, int)", "public static int getDecodedLength(char[], int, int)"], ["void", "org.apache.lucene.util.IndexableBinaryStringTools.encode(byte[], int, int, char[], int, int)", "public static void encode(byte[], int, int, char[], int, int)"], ["void", "org.apache.lucene.util.IndexableBinaryStringTools.decode(char[], int, int, byte[], int, int)", "public static void decode(char[], int, int, byte[], int, int)"], ["void", "org.apache.lucene.util.InfoStream$NoOutput.message(java.lang.String, java.lang.String)", "public void message(java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.util.InfoStream$NoOutput.isEnabled(java.lang.String)", "public boolean isEnabled(java.lang.String)"], ["void", "org.apache.lucene.util.InfoStream$NoOutput.close()", "public void close()"], ["org.apache.lucene.util.InfoStream", "org.apache.lucene.util.InfoStream()", "public org.apache.lucene.util.InfoStream()"], ["synchronized", "org.apache.lucene.util.InfoStream.org.apache.lucene.util.InfoStream getDefault()", "public static synchronized org.apache.lucene.util.InfoStream getDefault()"], ["synchronized", "org.apache.lucene.util.InfoStream.void setDefault(org.apache.lucene.util.InfoStream)", "public static synchronized void setDefault(org.apache.lucene.util.InfoStream)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef()", "public org.apache.lucene.util.IntsRef()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef(int)", "public org.apache.lucene.util.IntsRef(int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef(int[], int, int)", "public org.apache.lucene.util.IntsRef(int[], int, int)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef.clone()", "public org.apache.lucene.util.IntsRef clone()"], ["int", "org.apache.lucene.util.IntsRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.IntsRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.IntsRef.intsEquals(org.apache.lucene.util.IntsRef)", "public boolean intsEquals(org.apache.lucene.util.IntsRef)"], ["int", "org.apache.lucene.util.IntsRef.compareTo(org.apache.lucene.util.IntsRef)", "public int compareTo(org.apache.lucene.util.IntsRef)"], ["void", "org.apache.lucene.util.IntsRef.copyInts(org.apache.lucene.util.IntsRef)", "public void copyInts(org.apache.lucene.util.IntsRef)"], ["void", "org.apache.lucene.util.IntsRef.grow(int)", "public void grow(int)"], ["java.lang.String", "org.apache.lucene.util.IntsRef.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.IntsRef.deepCopyOf(org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.IntsRef deepCopyOf(org.apache.lucene.util.IntsRef)"], ["java.lang.Object", "org.apache.lucene.util.IntsRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.IntsRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef()", "public org.apache.lucene.util.LongsRef()"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef(int)", "public org.apache.lucene.util.LongsRef(int)"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef(long[], int, int)", "public org.apache.lucene.util.LongsRef(long[], int, int)"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef.clone()", "public org.apache.lucene.util.LongsRef clone()"], ["int", "org.apache.lucene.util.LongsRef.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.LongsRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.apache.lucene.util.LongsRef.longsEquals(org.apache.lucene.util.LongsRef)", "public boolean longsEquals(org.apache.lucene.util.LongsRef)"], ["int", "org.apache.lucene.util.LongsRef.compareTo(org.apache.lucene.util.LongsRef)", "public int compareTo(org.apache.lucene.util.LongsRef)"], ["void", "org.apache.lucene.util.LongsRef.copyLongs(org.apache.lucene.util.LongsRef)", "public void copyLongs(org.apache.lucene.util.LongsRef)"], ["void", "org.apache.lucene.util.LongsRef.grow(int)", "public void grow(int)"], ["java.lang.String", "org.apache.lucene.util.LongsRef.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.LongsRef.deepCopyOf(org.apache.lucene.util.LongsRef)", "public static org.apache.lucene.util.LongsRef deepCopyOf(org.apache.lucene.util.LongsRef)"], ["java.lang.Object", "org.apache.lucene.util.LongsRef.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "org.apache.lucene.util.LongsRef.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.MapOfSets", "org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)", "public org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)"], ["java.util.Map<K, java.util.Set<V>>", "org.apache.lucene.util.MapOfSets.getMap()", "public java.util.Map<K, java.util.Set<V>> getMap()"], ["int", "org.apache.lucene.util.MapOfSets.put(K, V)", "public int put(K, V)"], ["int", "org.apache.lucene.util.MapOfSets.putAll(K, java.util.Collection<? extends V>)", "public int putAll(K, java.util.Collection<? extends V>)"], ["int", "org.apache.lucene.util.MathUtil.log(long, int)", "public static int log(long, int)"], ["org.apache.lucene.util.NamedSPILoader", "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>)", "public org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>)"], ["org.apache.lucene.util.NamedSPILoader", "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>, java.lang.ClassLoader)", "public org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>, java.lang.ClassLoader)"], ["void", "org.apache.lucene.util.NamedSPILoader.reload(java.lang.ClassLoader)", "public void reload(java.lang.ClassLoader)"], ["void", "org.apache.lucene.util.NamedSPILoader.checkServiceName(java.lang.String)", "public static void checkServiceName(java.lang.String)"], ["S", "org.apache.lucene.util.NamedSPILoader.lookup(java.lang.String)", "public S lookup(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.apache.lucene.util.NamedSPILoader.availableServices()", "public java.util.Set<java.lang.String> availableServices()"], ["java.util.Iterator<S>", "org.apache.lucene.util.NamedSPILoader.iterator()", "public java.util.Iterator<S> iterator()"], ["org.apache.lucene.util.NamedThreadFactory", "org.apache.lucene.util.NamedThreadFactory(java.lang.String)", "public org.apache.lucene.util.NamedThreadFactory(java.lang.String)"], ["java.lang.Thread", "org.apache.lucene.util.NamedThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["org.apache.lucene.util.NumericUtils$IntRangeBuilder", "org.apache.lucene.util.NumericUtils$IntRangeBuilder()", "public org.apache.lucene.util.NumericUtils$IntRangeBuilder()"], ["void", "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public void addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(int, int, int)", "public void addRange(int, int, int)"], ["org.apache.lucene.util.NumericUtils$LongRangeBuilder", "org.apache.lucene.util.NumericUtils$LongRangeBuilder()", "public org.apache.lucene.util.NumericUtils$LongRangeBuilder()"], ["void", "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public void addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(long, long, int)", "public void addRange(long, long, int)"], ["int", "org.apache.lucene.util.NumericUtils.longToPrefixCoded(long, int, org.apache.lucene.util.BytesRef)", "public static int longToPrefixCoded(long, int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.NumericUtils.intToPrefixCoded(int, int, org.apache.lucene.util.BytesRef)", "public static int intToPrefixCoded(int, int, org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.NumericUtils.getPrefixCodedLongShift(org.apache.lucene.util.BytesRef)", "public static int getPrefixCodedLongShift(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.NumericUtils.getPrefixCodedIntShift(org.apache.lucene.util.BytesRef)", "public static int getPrefixCodedIntShift(org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.util.NumericUtils.prefixCodedToLong(org.apache.lucene.util.BytesRef)", "public static long prefixCodedToLong(org.apache.lucene.util.BytesRef)"], ["int", "org.apache.lucene.util.NumericUtils.prefixCodedToInt(org.apache.lucene.util.BytesRef)", "public static int prefixCodedToInt(org.apache.lucene.util.BytesRef)"], ["long", "org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)", "public static long doubleToSortableLong(double)"], ["double", "org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)", "public static double sortableLongToDouble(long)"], ["int", "org.apache.lucene.util.NumericUtils.floatToSortableInt(float)", "public static int floatToSortableInt(float)"], ["float", "org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)", "public static float sortableIntToFloat(int)"], ["void", "org.apache.lucene.util.NumericUtils.splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder, int, long, long)", "public static void splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder, int, long, long)"], ["void", "org.apache.lucene.util.NumericUtils.splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder, int, int, int)", "public static void splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder, int, int, int)"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet(long)", "public org.apache.lucene.util.OpenBitSet(long)"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet()", "public org.apache.lucene.util.OpenBitSet()"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet(long[], int)", "public org.apache.lucene.util.OpenBitSet(long[], int)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.OpenBitSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.util.Bits", "org.apache.lucene.util.OpenBitSet.bits()", "public org.apache.lucene.util.Bits bits()"], ["boolean", "org.apache.lucene.util.OpenBitSet.isCacheable()", "public boolean isCacheable()"], ["long", "org.apache.lucene.util.OpenBitSet.capacity()", "public long capacity()"], ["long", "org.apache.lucene.util.OpenBitSet.size()", "public long size()"], ["int", "org.apache.lucene.util.OpenBitSet.length()", "public int length()"], ["boolean", "org.apache.lucene.util.OpenBitSet.isEmpty()", "public boolean isEmpty()"], ["long[]", "org.apache.lucene.util.OpenBitSet.getBits()", "public long[] getBits()"], ["void", "org.apache.lucene.util.OpenBitSet.setBits(long[])", "public void setBits(long[])"], ["int", "org.apache.lucene.util.OpenBitSet.getNumWords()", "public int getNumWords()"], ["void", "org.apache.lucene.util.OpenBitSet.setNumWords(int)", "public void setNumWords(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.get(int)", "public boolean get(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.fastGet(int)", "public boolean fastGet(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.get(long)", "public boolean get(long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.fastGet(long)", "public boolean fastGet(long)"], ["int", "org.apache.lucene.util.OpenBitSet.getBit(int)", "public int getBit(int)"], ["void", "org.apache.lucene.util.OpenBitSet.set(long)", "public void set(long)"], ["void", "org.apache.lucene.util.OpenBitSet.fastSet(int)", "public void fastSet(int)"], ["void", "org.apache.lucene.util.OpenBitSet.fastSet(long)", "public void fastSet(long)"], ["void", "org.apache.lucene.util.OpenBitSet.set(long, long)", "public void set(long, long)"], ["void", "org.apache.lucene.util.OpenBitSet.fastClear(int)", "public void fastClear(int)"], ["void", "org.apache.lucene.util.OpenBitSet.fastClear(long)", "public void fastClear(long)"], ["void", "org.apache.lucene.util.OpenBitSet.clear(long)", "public void clear(long)"], ["void", "org.apache.lucene.util.OpenBitSet.clear(int, int)", "public void clear(int, int)"], ["void", "org.apache.lucene.util.OpenBitSet.clear(long, long)", "public void clear(long, long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.getAndSet(int)", "public boolean getAndSet(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.getAndSet(long)", "public boolean getAndSet(long)"], ["void", "org.apache.lucene.util.OpenBitSet.fastFlip(int)", "public void fastFlip(int)"], ["void", "org.apache.lucene.util.OpenBitSet.fastFlip(long)", "public void fastFlip(long)"], ["void", "org.apache.lucene.util.OpenBitSet.flip(long)", "public void flip(long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.flipAndGet(int)", "public boolean flipAndGet(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.flipAndGet(long)", "public boolean flipAndGet(long)"], ["void", "org.apache.lucene.util.OpenBitSet.flip(long, long)", "public void flip(long, long)"], ["long", "org.apache.lucene.util.OpenBitSet.cardinality()", "public long cardinality()"], ["long", "org.apache.lucene.util.OpenBitSet.intersectionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long intersectionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["long", "org.apache.lucene.util.OpenBitSet.unionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long unionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["long", "org.apache.lucene.util.OpenBitSet.andNotCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long andNotCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["long", "org.apache.lucene.util.OpenBitSet.xorCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long xorCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["int", "org.apache.lucene.util.OpenBitSet.nextSetBit(int)", "public int nextSetBit(int)"], ["long", "org.apache.lucene.util.OpenBitSet.nextSetBit(long)", "public long nextSetBit(long)"], ["int", "org.apache.lucene.util.OpenBitSet.prevSetBit(int)", "public int prevSetBit(int)"], ["long", "org.apache.lucene.util.OpenBitSet.prevSetBit(long)", "public long prevSetBit(long)"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet.clone()", "public org.apache.lucene.util.OpenBitSet clone()"], ["void", "org.apache.lucene.util.OpenBitSet.intersect(org.apache.lucene.util.OpenBitSet)", "public void intersect(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.union(org.apache.lucene.util.OpenBitSet)", "public void union(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.remove(org.apache.lucene.util.OpenBitSet)", "public void remove(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.xor(org.apache.lucene.util.OpenBitSet)", "public void xor(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.and(org.apache.lucene.util.OpenBitSet)", "public void and(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.or(org.apache.lucene.util.OpenBitSet)", "public void or(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.andNot(org.apache.lucene.util.OpenBitSet)", "public void andNot(org.apache.lucene.util.OpenBitSet)"], ["boolean", "org.apache.lucene.util.OpenBitSet.intersects(org.apache.lucene.util.OpenBitSet)", "public boolean intersects(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.ensureCapacityWords(int)", "public void ensureCapacityWords(int)"], ["void", "org.apache.lucene.util.OpenBitSet.ensureCapacity(long)", "public void ensureCapacity(long)"], ["void", "org.apache.lucene.util.OpenBitSet.trimTrailingZeros()", "public void trimTrailingZeros()"], ["int", "org.apache.lucene.util.OpenBitSet.bits2words(long)", "public static int bits2words(long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.OpenBitSet.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.apache.lucene.util.OpenBitSet.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.OpenBitSetDISI", "org.apache.lucene.util.OpenBitSetDISI(org.apache.lucene.search.DocIdSetIterator, int)", "public org.apache.lucene.util.OpenBitSetDISI(org.apache.lucene.search.DocIdSetIterator, int) throws java.io.IOException"], ["org.apache.lucene.util.OpenBitSetDISI", "org.apache.lucene.util.OpenBitSetDISI(int)", "public org.apache.lucene.util.OpenBitSetDISI(int)"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceOr(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceOr(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceAnd(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceAnd(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceNot(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceNot(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceXor(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceXor(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["org.apache.lucene.util.OpenBitSetIterator", "org.apache.lucene.util.OpenBitSetIterator(org.apache.lucene.util.OpenBitSet)", "public org.apache.lucene.util.OpenBitSetIterator(org.apache.lucene.util.OpenBitSet)"], ["org.apache.lucene.util.OpenBitSetIterator", "org.apache.lucene.util.OpenBitSetIterator(long[], int)", "public org.apache.lucene.util.OpenBitSetIterator(long[], int)"], ["int", "org.apache.lucene.util.OpenBitSetIterator.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.util.OpenBitSetIterator.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.util.OpenBitSetIterator.docID()", "public int docID()"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataInput", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()", "public org.apache.lucene.util.PagedBytes$PagedBytesDataInput clone()"], ["long", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.getPosition()", "public long getPosition()"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.setPosition(long)", "public void setPosition(long)"], ["byte", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["org.apache.lucene.store.DataInput", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()", "public org.apache.lucene.store.DataInput clone()"], ["java.lang.Object", "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataOutput", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput(org.apache.lucene.util.PagedBytes)", "public org.apache.lucene.util.PagedBytes$PagedBytesDataOutput(org.apache.lucene.util.PagedBytes)"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["long", "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.getPosition()", "public long getPosition()"], ["org.apache.lucene.util.PagedBytes$Reader", "org.apache.lucene.util.PagedBytes$Reader(org.apache.lucene.util.PagedBytes)", "public org.apache.lucene.util.PagedBytes$Reader(org.apache.lucene.util.PagedBytes)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.PagedBytes$Reader.fillSlice(org.apache.lucene.util.BytesRef, long, int)", "public org.apache.lucene.util.BytesRef fillSlice(org.apache.lucene.util.BytesRef, long, int)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.PagedBytes$Reader.fill(org.apache.lucene.util.BytesRef, long)", "public org.apache.lucene.util.BytesRef fill(org.apache.lucene.util.BytesRef, long)"], ["int", "org.apache.lucene.util.PagedBytes$Reader.fillAndGetIndex(org.apache.lucene.util.BytesRef, long)", "public int fillAndGetIndex(org.apache.lucene.util.BytesRef, long)"], ["long", "org.apache.lucene.util.PagedBytes$Reader.fillAndGetStart(org.apache.lucene.util.BytesRef, long)", "public long fillAndGetStart(org.apache.lucene.util.BytesRef, long)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.PagedBytes$Reader.fillSliceWithPrefix(org.apache.lucene.util.BytesRef, long)", "public org.apache.lucene.util.BytesRef fillSliceWithPrefix(org.apache.lucene.util.BytesRef, long)"], ["byte[][]", "org.apache.lucene.util.PagedBytes$Reader.getBlocks()", "public byte[][] getBlocks()"], ["int[]", "org.apache.lucene.util.PagedBytes$Reader.getBlockEnds()", "public int[] getBlockEnds()"], ["org.apache.lucene.util.PagedBytes", "org.apache.lucene.util.PagedBytes(int)", "public org.apache.lucene.util.PagedBytes(int)"], ["void", "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.store.IndexInput, long)", "public void copy(org.apache.lucene.store.IndexInput, long) throws java.io.IOException"], ["void", "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.util.BytesRef)", "public void copy(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public void copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.PagedBytes$Reader", "org.apache.lucene.util.PagedBytes.freeze(boolean)", "public org.apache.lucene.util.PagedBytes$Reader freeze(boolean)"], ["long", "org.apache.lucene.util.PagedBytes.getPointer()", "public long getPointer()"], ["long", "org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)", "public long copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataInput", "org.apache.lucene.util.PagedBytes.getDataInput()", "public org.apache.lucene.util.PagedBytes$PagedBytesDataInput getDataInput()"], ["org.apache.lucene.util.PagedBytes$PagedBytesDataOutput", "org.apache.lucene.util.PagedBytes.getDataOutput()", "public org.apache.lucene.util.PagedBytes$PagedBytesDataOutput getDataOutput()"], ["org.apache.lucene.util.PrintStreamInfoStream", "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream)", "public org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream)"], ["org.apache.lucene.util.PrintStreamInfoStream", "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream, int)", "public org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream, int)"], ["void", "org.apache.lucene.util.PrintStreamInfoStream.message(java.lang.String, java.lang.String)", "public void message(java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.util.PrintStreamInfoStream.isEnabled(java.lang.String)", "public boolean isEnabled(java.lang.String)"], ["void", "org.apache.lucene.util.PrintStreamInfoStream.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.lucene.util.PrintStreamInfoStream.isSystemStream()", "public boolean isSystemStream()"], ["org.apache.lucene.util.PriorityQueue", "org.apache.lucene.util.PriorityQueue(int)", "public org.apache.lucene.util.PriorityQueue(int)"], ["org.apache.lucene.util.PriorityQueue", "org.apache.lucene.util.PriorityQueue(int, boolean)", "public org.apache.lucene.util.PriorityQueue(int, boolean)"], ["T", "org.apache.lucene.util.PriorityQueue.add(T)", "public final T add(T)"], ["T", "org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)", "public T insertWithOverflow(T)"], ["T", "org.apache.lucene.util.PriorityQueue.top()", "public final T top()"], ["T", "org.apache.lucene.util.PriorityQueue.pop()", "public final T pop()"], ["T", "org.apache.lucene.util.PriorityQueue.updateTop()", "public final T updateTop()"], ["int", "org.apache.lucene.util.PriorityQueue.size()", "public final int size()"], ["void", "org.apache.lucene.util.PriorityQueue.clear()", "public final void clear()"], ["org.apache.lucene.util.RamUsageEstimator$ClassCache", "org.apache.lucene.util.RamUsageEstimator$ClassCache(long, java.lang.reflect.Field[])", "public org.apache.lucene.util.RamUsageEstimator$ClassCache(long, java.lang.reflect.Field[])"], ["boolean", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1.hasNext()", "public boolean hasNext()"], ["KType", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1.next()", "public KType next()"], ["void", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1.remove()", "public void remove()"], ["org.apache.lucene.util.RamUsageEstimator$IdentityHashSet", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet()", "public org.apache.lucene.util.RamUsageEstimator$IdentityHashSet()"], ["org.apache.lucene.util.RamUsageEstimator$IdentityHashSet", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet(int)", "public org.apache.lucene.util.RamUsageEstimator$IdentityHashSet(int)"], ["org.apache.lucene.util.RamUsageEstimator$IdentityHashSet", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet(int, float)", "public org.apache.lucene.util.RamUsageEstimator$IdentityHashSet(int, float)"], ["boolean", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.add(KType)", "public boolean add(KType)"], ["boolean", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.contains(KType)", "public boolean contains(KType)"], ["void", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.clear()", "public void clear()"], ["int", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.size()", "public int size()"], ["boolean", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<KType>", "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.iterator()", "public java.util.Iterator<KType> iterator()"], ["org.apache.lucene.util.RamUsageEstimator$JvmFeature[]", "org.apache.lucene.util.RamUsageEstimator$JvmFeature.values()", "public static org.apache.lucene.util.RamUsageEstimator$JvmFeature[] values()"], ["org.apache.lucene.util.RamUsageEstimator$JvmFeature", "org.apache.lucene.util.RamUsageEstimator$JvmFeature.valueOf(java.lang.String)", "public static org.apache.lucene.util.RamUsageEstimator$JvmFeature valueOf(java.lang.String)"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator$JvmFeature.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.util.RamUsageEstimator.isSupportedJVM()", "public static boolean isSupportedJVM()"], ["long", "org.apache.lucene.util.RamUsageEstimator.alignObjectSize(long)", "public static long alignObjectSize(long)"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(byte[])", "public static long sizeOf(byte[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(boolean[])", "public static long sizeOf(boolean[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(char[])", "public static long sizeOf(char[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(short[])", "public static long sizeOf(short[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(int[])", "public static long sizeOf(int[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(float[])", "public static long sizeOf(float[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(long[])", "public static long sizeOf(long[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(double[])", "public static long sizeOf(double[])"], ["long", "org.apache.lucene.util.RamUsageEstimator.sizeOf(java.lang.Object)", "public static long sizeOf(java.lang.Object)"], ["long", "org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(java.lang.Object)", "public static long shallowSizeOf(java.lang.Object)"], ["long", "org.apache.lucene.util.RamUsageEstimator.shallowSizeOfInstance(java.lang.Class<?>)", "public static long shallowSizeOfInstance(java.lang.Class<?>)"], ["java.util.EnumSet<org.apache.lucene.util.RamUsageEstimator$JvmFeature>", "org.apache.lucene.util.RamUsageEstimator.getUnsupportedFeatures()", "public static java.util.EnumSet<org.apache.lucene.util.RamUsageEstimator$JvmFeature> getUnsupportedFeatures()"], ["java.util.EnumSet<org.apache.lucene.util.RamUsageEstimator$JvmFeature>", "org.apache.lucene.util.RamUsageEstimator.getSupportedFeatures()", "public static java.util.EnumSet<org.apache.lucene.util.RamUsageEstimator$JvmFeature> getSupportedFeatures()"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long)", "public static java.lang.String humanReadableUnits(long)"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long, java.text.DecimalFormat)", "public static java.lang.String humanReadableUnits(long, java.text.DecimalFormat)"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator.humanSizeOf(java.lang.Object)", "public static java.lang.String humanSizeOf(java.lang.Object)"], ["org.apache.lucene.util.RecyclingByteBlockAllocator", "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int, java.util.concurrent.atomic.AtomicLong)", "public org.apache.lucene.util.RecyclingByteBlockAllocator(int, int, java.util.concurrent.atomic.AtomicLong)"], ["org.apache.lucene.util.RecyclingByteBlockAllocator", "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int)", "public org.apache.lucene.util.RecyclingByteBlockAllocator(int, int)"], ["org.apache.lucene.util.RecyclingByteBlockAllocator", "org.apache.lucene.util.RecyclingByteBlockAllocator()", "public org.apache.lucene.util.RecyclingByteBlockAllocator()"], ["synchronized", "org.apache.lucene.util.RecyclingByteBlockAllocator.byte[] getByteBlock()", "public synchronized byte[] getByteBlock()"], ["synchronized", "org.apache.lucene.util.RecyclingByteBlockAllocator.void recycleByteBlocks(byte[][], int, int)", "public synchronized void recycleByteBlocks(byte[][], int, int)"], ["synchronized", "org.apache.lucene.util.RecyclingByteBlockAllocator.int numBufferedBlocks()", "public synchronized int numBufferedBlocks()"], ["synchronized", "org.apache.lucene.util.RecyclingByteBlockAllocator.long bytesUsed()", "public synchronized long bytesUsed()"], ["int", "org.apache.lucene.util.RecyclingByteBlockAllocator.maxBufferedBlocks()", "public int maxBufferedBlocks()"], ["synchronized", "org.apache.lucene.util.RecyclingByteBlockAllocator.int freeBlocks(int)", "public synchronized int freeBlocks(int)"], ["<S> org.apache.lucene.util.SPIClassIterator<S>", "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>)", "public static <S> org.apache.lucene.util.SPIClassIterator<S> get(java.lang.Class<S>)"], ["<S> org.apache.lucene.util.SPIClassIterator<S>", "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>, java.lang.ClassLoader)", "public static <S> org.apache.lucene.util.SPIClassIterator<S> get(java.lang.Class<S>, java.lang.ClassLoader)"], ["boolean", "org.apache.lucene.util.SPIClassIterator.hasNext()", "public boolean hasNext()"], ["java.lang.Class<? extends S>", "org.apache.lucene.util.SPIClassIterator.next()", "public java.lang.Class<? extends S> next()"], ["void", "org.apache.lucene.util.SPIClassIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.util.SPIClassIterator.next()", "public java.lang.Object next()"], ["org.apache.lucene.util.SentinelIntSet", "org.apache.lucene.util.SentinelIntSet(int, int)", "public org.apache.lucene.util.SentinelIntSet(int, int)"], ["void", "org.apache.lucene.util.SentinelIntSet.clear()", "public void clear()"], ["int", "org.apache.lucene.util.SentinelIntSet.hash(int)", "public int hash(int)"], ["int", "org.apache.lucene.util.SentinelIntSet.size()", "public int size()"], ["int", "org.apache.lucene.util.SentinelIntSet.getSlot(int)", "public int getSlot(int)"], ["int", "org.apache.lucene.util.SentinelIntSet.find(int)", "public int find(int)"], ["boolean", "org.apache.lucene.util.SentinelIntSet.exists(int)", "public boolean exists(int)"], ["int", "org.apache.lucene.util.SentinelIntSet.put(int)", "public int put(int)"], ["void", "org.apache.lucene.util.SentinelIntSet.rehash()", "public void rehash()"], ["org.apache.lucene.util.SetOnce$AlreadySetException", "org.apache.lucene.util.SetOnce$AlreadySetException()", "public org.apache.lucene.util.SetOnce$AlreadySetException()"], ["org.apache.lucene.util.SetOnce", "org.apache.lucene.util.SetOnce()", "public org.apache.lucene.util.SetOnce()"], ["org.apache.lucene.util.SetOnce", "org.apache.lucene.util.SetOnce(T)", "public org.apache.lucene.util.SetOnce(T)"], ["void", "org.apache.lucene.util.SetOnce.set(T)", "public final void set(T)"], ["T", "org.apache.lucene.util.SetOnce.get()", "public final T get()"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte(float, int, int)", "public static byte floatToByte(float, int, int)"], ["float", "org.apache.lucene.util.SmallFloat.byteToFloat(byte, int, int)", "public static float byteToFloat(byte, int, int)"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte315(float)", "public static byte floatToByte315(float)"], ["float", "org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)", "public static float byte315ToFloat(byte)"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte52(float)", "public static byte floatToByte52(float)"], ["float", "org.apache.lucene.util.SmallFloat.byte52ToFloat(byte)", "public static float byte52ToFloat(byte)"], ["org.apache.lucene.util.SorterTemplate", "org.apache.lucene.util.SorterTemplate()", "public org.apache.lucene.util.SorterTemplate()"], ["void", "org.apache.lucene.util.SorterTemplate.insertionSort(int, int)", "public final void insertionSort(int, int)"], ["void", "org.apache.lucene.util.SorterTemplate.quickSort(int, int)", "public final void quickSort(int, int)"], ["void", "org.apache.lucene.util.SorterTemplate.mergeSort(int, int)", "public final void mergeSort(int, int)"], ["int", "org.apache.lucene.util.StringHelper$1.compare(java.lang.String, java.lang.String)", "public int compare(java.lang.String, java.lang.String)"], ["int", "org.apache.lucene.util.StringHelper$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.util.StringHelper.bytesDifference(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static int bytesDifference(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["java.util.Comparator<java.lang.String>", "org.apache.lucene.util.StringHelper.getVersionComparator()", "public static java.util.Comparator<java.lang.String> getVersionComparator()"], ["boolean", "org.apache.lucene.util.StringHelper.equals(java.lang.String, java.lang.String)", "public static boolean equals(java.lang.String, java.lang.String)"], ["boolean", "org.apache.lucene.util.StringHelper.startsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static boolean startsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.StringHelper.endsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public static boolean endsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.ThreadInterruptedException", "org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)", "public org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)"], ["java.lang.String", "org.apache.lucene.util.ToStringUtils.boost(float)", "public static java.lang.String boost(float)"], ["void", "org.apache.lucene.util.ToStringUtils.byteArray(java.lang.StringBuilder, byte[])", "public static void byteArray(java.lang.StringBuilder, byte[])"], ["int", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8WithHash(char[], int, int, org.apache.lucene.util.BytesRef)", "public static int UTF16toUTF8WithHash(char[], int, int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[], int, int, org.apache.lucene.util.BytesRef)", "public static void UTF16toUTF8(char[], int, int, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(java.lang.CharSequence, int, int, org.apache.lucene.util.BytesRef)", "public static void UTF16toUTF8(java.lang.CharSequence, int, int, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.UnicodeUtil.validUTF16String(java.lang.CharSequence)", "public static boolean validUTF16String(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.util.UnicodeUtil.validUTF16String(char[], int)", "public static boolean validUTF16String(char[], int)"], ["int", "org.apache.lucene.util.UnicodeUtil.codePointCount(org.apache.lucene.util.BytesRef)", "public static int codePointCount(org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF32(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)", "public static void UTF8toUTF32(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)"], ["java.lang.String", "org.apache.lucene.util.UnicodeUtil.newString(int[], int, int)", "public static java.lang.String newString(int[], int, int)"], ["java.lang.String", "org.apache.lucene.util.UnicodeUtil.toHexString(java.lang.String)", "public static java.lang.String toHexString(java.lang.String)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[], int, int, org.apache.lucene.util.CharsRef)", "public static void UTF8toUTF16(byte[], int, int, org.apache.lucene.util.CharsRef)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(org.apache.lucene.util.BytesRef, org.apache.lucene.util.CharsRef)", "public static void UTF8toUTF16(org.apache.lucene.util.BytesRef, org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.Version[]", "org.apache.lucene.util.Version.values()", "public static org.apache.lucene.util.Version[] values()"], ["org.apache.lucene.util.Version", "org.apache.lucene.util.Version.valueOf(java.lang.String)", "public static org.apache.lucene.util.Version valueOf(java.lang.String)"], ["boolean", "org.apache.lucene.util.Version.onOrAfter(org.apache.lucene.util.Version)", "public boolean onOrAfter(org.apache.lucene.util.Version)"], ["org.apache.lucene.util.Version", "org.apache.lucene.util.Version.parseLeniently(java.lang.String)", "public static org.apache.lucene.util.Version parseLeniently(java.lang.String)"], ["org.apache.lucene.util.VirtualMethod", "org.apache.lucene.util.VirtualMethod(java.lang.Class<C>, java.lang.String, java.lang.Class<?>...)", "public org.apache.lucene.util.VirtualMethod(java.lang.Class<C>, java.lang.String, java.lang.Class<?>...)"], ["int", "org.apache.lucene.util.VirtualMethod.getImplementationDistance(java.lang.Class<? extends C>)", "public int getImplementationDistance(java.lang.Class<? extends C>)"], ["boolean", "org.apache.lucene.util.VirtualMethod.isOverriddenAsOf(java.lang.Class<? extends C>)", "public boolean isOverriddenAsOf(java.lang.Class<? extends C>)"], ["<C> int", "org.apache.lucene.util.VirtualMethod.compareImplementationDistance(java.lang.Class<? extends C>, org.apache.lucene.util.VirtualMethod<C>, org.apache.lucene.util.VirtualMethod<C>)", "public static <C> int compareImplementationDistance(java.lang.Class<? extends C>, org.apache.lucene.util.VirtualMethod<C>, org.apache.lucene.util.VirtualMethod<C>)"], ["boolean", "org.apache.lucene.util.WeakIdentityMap$1.hasNext()", "public boolean hasNext()"], ["K", "org.apache.lucene.util.WeakIdentityMap$1.next()", "public K next()"], ["void", "org.apache.lucene.util.WeakIdentityMap$1.remove()", "public void remove()"], ["int", "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>", "org.apache.lucene.util.WeakIdentityMap.newHashMap()", "public static final <K, V> org.apache.lucene.util.WeakIdentityMap<K, V> newHashMap()"], ["<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>", "org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap()", "public static final <K, V> org.apache.lucene.util.WeakIdentityMap<K, V> newConcurrentHashMap()"], ["void", "org.apache.lucene.util.WeakIdentityMap.clear()", "public void clear()"], ["boolean", "org.apache.lucene.util.WeakIdentityMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.apache.lucene.util.WeakIdentityMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.apache.lucene.util.WeakIdentityMap.put(K, V)", "public V put(K, V)"], ["boolean", "org.apache.lucene.util.WeakIdentityMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.apache.lucene.util.WeakIdentityMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.apache.lucene.util.WeakIdentityMap.size()", "public int size()"], ["java.util.Iterator<K>", "org.apache.lucene.util.WeakIdentityMap.keyIterator()", "public java.util.Iterator<K> keyIterator()"], ["java.util.Iterator<V>", "org.apache.lucene.util.WeakIdentityMap.valueIterator()", "public java.util.Iterator<V> valueIterator()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton(org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.Automaton(org.apache.lucene.util.automaton.State)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton()", "public org.apache.lucene.util.automaton.Automaton()"], ["void", "org.apache.lucene.util.automaton.Automaton.setMinimization(int)", "public static void setMinimization(int)"], ["void", "org.apache.lucene.util.automaton.Automaton.setMinimizeAlways(boolean)", "public static void setMinimizeAlways(boolean)"], ["boolean", "org.apache.lucene.util.automaton.Automaton.setAllowMutate(boolean)", "public static boolean setAllowMutate(boolean)"], ["java.lang.String", "org.apache.lucene.util.automaton.Automaton.getSingleton()", "public java.lang.String getSingleton()"], ["org.apache.lucene.util.automaton.State", "org.apache.lucene.util.automaton.Automaton.getInitialState()", "public org.apache.lucene.util.automaton.State getInitialState()"], ["boolean", "org.apache.lucene.util.automaton.Automaton.isDeterministic()", "public boolean isDeterministic()"], ["void", "org.apache.lucene.util.automaton.Automaton.setDeterministic(boolean)", "public void setDeterministic(boolean)"], ["void", "org.apache.lucene.util.automaton.Automaton.setInfo(java.lang.Object)", "public void setInfo(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.automaton.Automaton.getInfo()", "public java.lang.Object getInfo()"], ["org.apache.lucene.util.automaton.State[]", "org.apache.lucene.util.automaton.Automaton.getNumberedStates()", "public org.apache.lucene.util.automaton.State[] getNumberedStates()"], ["void", "org.apache.lucene.util.automaton.Automaton.setNumberedStates(org.apache.lucene.util.automaton.State[])", "public void setNumberedStates(org.apache.lucene.util.automaton.State[])"], ["void", "org.apache.lucene.util.automaton.Automaton.setNumberedStates(org.apache.lucene.util.automaton.State[], int)", "public void setNumberedStates(org.apache.lucene.util.automaton.State[], int)"], ["void", "org.apache.lucene.util.automaton.Automaton.clearNumberedStates()", "public void clearNumberedStates()"], ["java.util.Set<org.apache.lucene.util.automaton.State>", "org.apache.lucene.util.automaton.Automaton.getAcceptStates()", "public java.util.Set<org.apache.lucene.util.automaton.State> getAcceptStates()"], ["void", "org.apache.lucene.util.automaton.Automaton.restoreInvariant()", "public void restoreInvariant()"], ["void", "org.apache.lucene.util.automaton.Automaton.reduce()", "public void reduce()"], ["void", "org.apache.lucene.util.automaton.Automaton.removeDeadTransitions()", "public void removeDeadTransitions()"], ["org.apache.lucene.util.automaton.Transition[][]", "org.apache.lucene.util.automaton.Automaton.getSortedTransitions()", "public org.apache.lucene.util.automaton.Transition[][] getSortedTransitions()"], ["void", "org.apache.lucene.util.automaton.Automaton.expandSingleton()", "public void expandSingleton()"], ["int", "org.apache.lucene.util.automaton.Automaton.getNumberOfStates()", "public int getNumberOfStates()"], ["int", "org.apache.lucene.util.automaton.Automaton.getNumberOfTransitions()", "public int getNumberOfTransitions()"], ["boolean", "org.apache.lucene.util.automaton.Automaton.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.Automaton.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.util.automaton.Automaton.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.automaton.Automaton.toDot()", "public java.lang.String toDot()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.clone()", "public org.apache.lucene.util.automaton.Automaton clone()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.concatenate(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.Automaton concatenate(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)", "public static org.apache.lucene.util.automaton.Automaton concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.optional()", "public org.apache.lucene.util.automaton.Automaton optional()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.repeat()", "public org.apache.lucene.util.automaton.Automaton repeat()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.repeat(int)", "public org.apache.lucene.util.automaton.Automaton repeat(int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.repeat(int, int)", "public org.apache.lucene.util.automaton.Automaton repeat(int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.complement()", "public org.apache.lucene.util.automaton.Automaton complement()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.minus(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.Automaton minus(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.intersection(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.Automaton.subsetOf(org.apache.lucene.util.automaton.Automaton)", "public boolean subsetOf(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.union(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.Automaton union(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)", "public static org.apache.lucene.util.automaton.Automaton union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)"], ["void", "org.apache.lucene.util.automaton.Automaton.determinize()", "public void determinize()"], ["boolean", "org.apache.lucene.util.automaton.Automaton.isEmptyString()", "public boolean isEmptyString()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.Automaton.minimize(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton minimize(org.apache.lucene.util.automaton.Automaton)"], ["java.lang.Object", "org.apache.lucene.util.automaton.Automaton.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeEmpty()", "public static org.apache.lucene.util.automaton.Automaton makeEmpty()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeEmptyString()", "public static org.apache.lucene.util.automaton.Automaton makeEmptyString()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeAnyString()", "public static org.apache.lucene.util.automaton.Automaton makeAnyString()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeAnyChar()", "public static org.apache.lucene.util.automaton.Automaton makeAnyChar()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeChar(int)", "public static org.apache.lucene.util.automaton.Automaton makeChar(int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeCharRange(int, int)", "public static org.apache.lucene.util.automaton.Automaton makeCharRange(int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeInterval(int, int, int)", "public static org.apache.lucene.util.automaton.Automaton makeInterval(int, int, int) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeString(java.lang.String)", "public static org.apache.lucene.util.automaton.Automaton makeString(java.lang.String)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicAutomata.makeStringUnion(java.util.Collection<org.apache.lucene.util.BytesRef>)", "public static org.apache.lucene.util.automaton.Automaton makeStringUnion(java.util.Collection<org.apache.lucene.util.BytesRef>)"], ["void", "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.reset()", "public void reset()"], ["void", "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.sort()", "public void sort()"], ["void", "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.add(org.apache.lucene.util.automaton.Transition)", "public void add(org.apache.lucene.util.automaton.Transition)"], ["java.lang.String", "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.compareTo(org.apache.lucene.util.automaton.BasicOperations$PointTransitions)", "public int compareTo(org.apache.lucene.util.automaton.BasicOperations$PointTransitions)"], ["void", "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.reset(int)", "public void reset(int)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["void", "org.apache.lucene.util.automaton.BasicOperations$TransitionList.add(org.apache.lucene.util.automaton.Transition)", "public void add(org.apache.lucene.util.automaton.Transition)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)", "public static org.apache.lucene.util.automaton.Automaton concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.optional(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton optional(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.repeat(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.repeat(org.apache.lucene.util.automaton.Automaton, int)", "public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.repeat(org.apache.lucene.util.automaton.Automaton, int, int)", "public static org.apache.lucene.util.automaton.Automaton repeat(org.apache.lucene.util.automaton.Automaton, int, int)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.complement(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton complement(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations.sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static boolean sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations.subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static boolean subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.automaton.Automaton union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.BasicOperations.union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)", "public static org.apache.lucene.util.automaton.Automaton union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)"], ["void", "org.apache.lucene.util.automaton.BasicOperations.determinize(org.apache.lucene.util.automaton.Automaton)", "public static void determinize(org.apache.lucene.util.automaton.Automaton)"], ["void", "org.apache.lucene.util.automaton.BasicOperations.addEpsilons(org.apache.lucene.util.automaton.Automaton, java.util.Collection<org.apache.lucene.util.automaton.StatePair>)", "public static void addEpsilons(org.apache.lucene.util.automaton.Automaton, java.util.Collection<org.apache.lucene.util.automaton.StatePair>)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations.isEmptyString(org.apache.lucene.util.automaton.Automaton)", "public static boolean isEmptyString(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations.isEmpty(org.apache.lucene.util.automaton.Automaton)", "public static boolean isEmpty(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations.isTotal(org.apache.lucene.util.automaton.Automaton)", "public static boolean isTotal(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.BasicOperations.run(org.apache.lucene.util.automaton.Automaton, java.lang.String)", "public static boolean run(org.apache.lucene.util.automaton.Automaton, java.lang.String)"], ["org.apache.lucene.util.automaton.ByteRunAutomaton", "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.ByteRunAutomaton", "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton, boolean)", "public org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton, boolean)"], ["boolean", "org.apache.lucene.util.automaton.ByteRunAutomaton.run(byte[], int, int)", "public boolean run(byte[], int, int)"], ["org.apache.lucene.util.automaton.CharacterRunAutomaton", "org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(java.lang.String)", "public boolean run(java.lang.String)"], ["boolean", "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(char[], int, int)", "public boolean run(char[], int, int)"], ["org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE[]", "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.values()", "public static org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE[] values()"], ["org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE", "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.valueOf(java.lang.String)", "public static org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE valueOf(java.lang.String)"], ["org.apache.lucene.util.automaton.CompiledAutomaton", "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.CompiledAutomaton", "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean)", "public org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean)"], ["org.apache.lucene.index.TermsEnum", "org.apache.lucene.util.automaton.CompiledAutomaton.getTermsEnum(org.apache.lucene.index.Terms)", "public org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.automaton.CompiledAutomaton.floor(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef floor(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["boolean", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.add(org.apache.lucene.util.CharsRef)", "public void add(org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.complete()", "public org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State complete()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.build(java.util.Collection<org.apache.lucene.util.BytesRef>)", "public static org.apache.lucene.util.automaton.Automaton build(java.util.Collection<org.apache.lucene.util.BytesRef>)"], ["org.apache.lucene.util.automaton.Lev1ParametricDescription", "org.apache.lucene.util.automaton.Lev1ParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev1ParametricDescription(int)"], ["org.apache.lucene.util.automaton.Lev1TParametricDescription", "org.apache.lucene.util.automaton.Lev1TParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev1TParametricDescription(int)"], ["org.apache.lucene.util.automaton.Lev2ParametricDescription", "org.apache.lucene.util.automaton.Lev2ParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev2ParametricDescription(int)"], ["org.apache.lucene.util.automaton.Lev2TParametricDescription", "org.apache.lucene.util.automaton.Lev2TParametricDescription(int)", "public org.apache.lucene.util.automaton.Lev2TParametricDescription(int)"], ["org.apache.lucene.util.automaton.LevenshteinAutomata", "org.apache.lucene.util.automaton.LevenshteinAutomata(java.lang.String, boolean)", "public org.apache.lucene.util.automaton.LevenshteinAutomata(java.lang.String, boolean)"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(int)"], ["void", "org.apache.lucene.util.automaton.MinimizationOperations.minimize(org.apache.lucene.util.automaton.Automaton)", "public static void minimize(org.apache.lucene.util.automaton.Automaton)"], ["void", "org.apache.lucene.util.automaton.MinimizationOperations.minimizeHopcroft(org.apache.lucene.util.automaton.Automaton)", "public static void minimizeHopcroft(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.automaton.RegExp$Kind[]", "org.apache.lucene.util.automaton.RegExp$Kind.values()", "public static org.apache.lucene.util.automaton.RegExp$Kind[] values()"], ["org.apache.lucene.util.automaton.RegExp$Kind", "org.apache.lucene.util.automaton.RegExp$Kind.valueOf(java.lang.String)", "public static org.apache.lucene.util.automaton.RegExp$Kind valueOf(java.lang.String)"], ["org.apache.lucene.util.automaton.RegExp", "org.apache.lucene.util.automaton.RegExp(java.lang.String)", "public org.apache.lucene.util.automaton.RegExp(java.lang.String) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.RegExp", "org.apache.lucene.util.automaton.RegExp(java.lang.String, int)", "public org.apache.lucene.util.automaton.RegExp(java.lang.String, int) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton()", "public org.apache.lucene.util.automaton.Automaton toAutomaton()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.RegExp.toAutomaton(java.util.Map<java.lang.String, org.apache.lucene.util.automaton.Automaton>)", "public org.apache.lucene.util.automaton.Automaton toAutomaton(java.util.Map<java.lang.String, org.apache.lucene.util.automaton.Automaton>) throws java.lang.IllegalArgumentException"], ["boolean", "org.apache.lucene.util.automaton.RegExp.setAllowMutate(boolean)", "public boolean setAllowMutate(boolean)"], ["java.lang.String", "org.apache.lucene.util.automaton.RegExp.toString()", "public java.lang.String toString()"], ["java.util.Set<java.lang.String>", "org.apache.lucene.util.automaton.RegExp.getIdentifiers()", "public java.util.Set<java.lang.String> getIdentifiers()"], ["java.lang.String", "org.apache.lucene.util.automaton.RunAutomaton.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.automaton.RunAutomaton.getSize()", "public final int getSize()"], ["boolean", "org.apache.lucene.util.automaton.RunAutomaton.isAccept(int)", "public final boolean isAccept(int)"], ["int", "org.apache.lucene.util.automaton.RunAutomaton.getInitialState()", "public final int getInitialState()"], ["int[]", "org.apache.lucene.util.automaton.RunAutomaton.getCharIntervals()", "public final int[] getCharIntervals()"], ["org.apache.lucene.util.automaton.RunAutomaton", "org.apache.lucene.util.automaton.RunAutomaton(org.apache.lucene.util.automaton.Automaton, int, boolean)", "public org.apache.lucene.util.automaton.RunAutomaton(org.apache.lucene.util.automaton.Automaton, int, boolean)"], ["int", "org.apache.lucene.util.automaton.RunAutomaton.step(int, int)", "public final int step(int, int)"], ["org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int[], int, org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int[], int, org.apache.lucene.util.automaton.State)"], ["org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int, org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int, org.apache.lucene.util.automaton.State)"], ["int", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.SortedIntSet", "org.apache.lucene.util.automaton.SortedIntSet(int)", "public org.apache.lucene.util.automaton.SortedIntSet(int)"], ["void", "org.apache.lucene.util.automaton.SortedIntSet.incr(int)", "public void incr(int)"], ["void", "org.apache.lucene.util.automaton.SortedIntSet.decr(int)", "public void decr(int)"], ["void", "org.apache.lucene.util.automaton.SortedIntSet.computeHash()", "public void computeHash()"], ["org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet", "org.apache.lucene.util.automaton.SortedIntSet.freeze(org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet freeze(org.apache.lucene.util.automaton.State)"], ["int", "org.apache.lucene.util.automaton.SortedIntSet.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.automaton.SortedIntSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.automaton.SortedIntSet.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.util.automaton.SpecialOperations.isFinite(org.apache.lucene.util.automaton.Automaton)", "public static boolean isFinite(org.apache.lucene.util.automaton.Automaton)"], ["java.lang.String", "org.apache.lucene.util.automaton.SpecialOperations.getCommonPrefix(org.apache.lucene.util.automaton.Automaton)", "public static java.lang.String getCommonPrefix(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.automaton.SpecialOperations.getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.BytesRef getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)"], ["java.lang.String", "org.apache.lucene.util.automaton.SpecialOperations.getCommonSuffix(org.apache.lucene.util.automaton.Automaton)", "public static java.lang.String getCommonSuffix(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.automaton.SpecialOperations.getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton)", "public static org.apache.lucene.util.BytesRef getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton)"], ["java.util.Set<org.apache.lucene.util.automaton.State>", "org.apache.lucene.util.automaton.SpecialOperations.reverse(org.apache.lucene.util.automaton.Automaton)", "public static java.util.Set<org.apache.lucene.util.automaton.State> reverse(org.apache.lucene.util.automaton.Automaton)"], ["boolean", "org.apache.lucene.util.automaton.State$TransitionsIterable$1.hasNext()", "public boolean hasNext()"], ["org.apache.lucene.util.automaton.Transition", "org.apache.lucene.util.automaton.State$TransitionsIterable$1.next()", "public org.apache.lucene.util.automaton.Transition next()"], ["void", "org.apache.lucene.util.automaton.State$TransitionsIterable$1.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.util.automaton.State$TransitionsIterable$1.next()", "public java.lang.Object next()"], ["java.util.Iterator<org.apache.lucene.util.automaton.Transition>", "org.apache.lucene.util.automaton.State$TransitionsIterable.iterator()", "public java.util.Iterator<org.apache.lucene.util.automaton.Transition> iterator()"], ["org.apache.lucene.util.automaton.State", "org.apache.lucene.util.automaton.State()", "public org.apache.lucene.util.automaton.State()"], ["java.lang.Iterable<org.apache.lucene.util.automaton.Transition>", "org.apache.lucene.util.automaton.State.getTransitions()", "public java.lang.Iterable<org.apache.lucene.util.automaton.Transition> getTransitions()"], ["int", "org.apache.lucene.util.automaton.State.numTransitions()", "public int numTransitions()"], ["void", "org.apache.lucene.util.automaton.State.setTransitions(org.apache.lucene.util.automaton.Transition[])", "public void setTransitions(org.apache.lucene.util.automaton.Transition[])"], ["void", "org.apache.lucene.util.automaton.State.addTransition(org.apache.lucene.util.automaton.Transition)", "public void addTransition(org.apache.lucene.util.automaton.Transition)"], ["void", "org.apache.lucene.util.automaton.State.setAccept(boolean)", "public void setAccept(boolean)"], ["boolean", "org.apache.lucene.util.automaton.State.isAccept()", "public boolean isAccept()"], ["org.apache.lucene.util.automaton.State", "org.apache.lucene.util.automaton.State.step(int)", "public org.apache.lucene.util.automaton.State step(int)"], ["void", "org.apache.lucene.util.automaton.State.step(int, java.util.Collection<org.apache.lucene.util.automaton.State>)", "public void step(int, java.util.Collection<org.apache.lucene.util.automaton.State>)"], ["void", "org.apache.lucene.util.automaton.State.trimTransitionsArray()", "public void trimTransitionsArray()"], ["void", "org.apache.lucene.util.automaton.State.reduce()", "public void reduce()"], ["void", "org.apache.lucene.util.automaton.State.sortTransitions(java.util.Comparator<org.apache.lucene.util.automaton.Transition>)", "public void sortTransitions(java.util.Comparator<org.apache.lucene.util.automaton.Transition>)"], ["int", "org.apache.lucene.util.automaton.State.getNumber()", "public int getNumber()"], ["java.lang.String", "org.apache.lucene.util.automaton.State.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.automaton.State.compareTo(org.apache.lucene.util.automaton.State)", "public int compareTo(org.apache.lucene.util.automaton.State)"], ["int", "org.apache.lucene.util.automaton.State.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.util.automaton.State.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.automaton.StatePair", "org.apache.lucene.util.automaton.StatePair(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.StatePair(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State)"], ["org.apache.lucene.util.automaton.State", "org.apache.lucene.util.automaton.StatePair.getFirstState()", "public org.apache.lucene.util.automaton.State getFirstState()"], ["org.apache.lucene.util.automaton.State", "org.apache.lucene.util.automaton.StatePair.getSecondState()", "public org.apache.lucene.util.automaton.State getSecondState()"], ["boolean", "org.apache.lucene.util.automaton.StatePair.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.StatePair.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle.compare(org.apache.lucene.util.automaton.Transition, org.apache.lucene.util.automaton.Transition)", "public int compare(org.apache.lucene.util.automaton.Transition, org.apache.lucene.util.automaton.Transition)"], ["int", "org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle.compare(org.apache.lucene.util.automaton.Transition, org.apache.lucene.util.automaton.Transition)", "public int compare(org.apache.lucene.util.automaton.Transition, org.apache.lucene.util.automaton.Transition)"], ["int", "org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.automaton.Transition", "org.apache.lucene.util.automaton.Transition(int, org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.Transition(int, org.apache.lucene.util.automaton.State)"], ["org.apache.lucene.util.automaton.Transition", "org.apache.lucene.util.automaton.Transition(int, int, org.apache.lucene.util.automaton.State)", "public org.apache.lucene.util.automaton.Transition(int, int, org.apache.lucene.util.automaton.State)"], ["int", "org.apache.lucene.util.automaton.Transition.getMin()", "public int getMin()"], ["int", "org.apache.lucene.util.automaton.Transition.getMax()", "public int getMax()"], ["org.apache.lucene.util.automaton.State", "org.apache.lucene.util.automaton.Transition.getDest()", "public org.apache.lucene.util.automaton.State getDest()"], ["boolean", "org.apache.lucene.util.automaton.Transition.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.automaton.Transition.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.automaton.Transition", "org.apache.lucene.util.automaton.Transition.clone()", "public org.apache.lucene.util.automaton.Transition clone()"], ["java.lang.String", "org.apache.lucene.util.automaton.Transition.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.util.automaton.Transition.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence()", "public org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence()"], ["int", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.byteAt(int)", "public int byteAt(int)"], ["int", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.numBits(int)", "public int numBits(int)"], ["java.lang.String", "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.automaton.UTF32ToUTF8", "org.apache.lucene.util.automaton.UTF32ToUTF8()", "public org.apache.lucene.util.automaton.UTF32ToUTF8()"], ["org.apache.lucene.util.automaton.Automaton", "org.apache.lucene.util.automaton.UTF32ToUTF8.convert(org.apache.lucene.util.automaton.Automaton)", "public org.apache.lucene.util.automaton.Automaton convert(org.apache.lucene.util.automaton.Automaton)"], ["org.apache.lucene.util.fst.Builder$Arc", "org.apache.lucene.util.fst.Builder$Arc()", "public org.apache.lucene.util.fst.Builder$Arc()"], ["boolean", "org.apache.lucene.util.fst.Builder$CompiledNode.isCompiled()", "public boolean isCompiled()"], ["org.apache.lucene.util.fst.Builder$FreezeTail", "org.apache.lucene.util.fst.Builder$FreezeTail()", "public org.apache.lucene.util.fst.Builder$FreezeTail()"], ["org.apache.lucene.util.fst.Builder$UnCompiledNode", "org.apache.lucene.util.fst.Builder$UnCompiledNode(org.apache.lucene.util.fst.Builder<T>, int)", "public org.apache.lucene.util.fst.Builder$UnCompiledNode(org.apache.lucene.util.fst.Builder<T>, int)"], ["boolean", "org.apache.lucene.util.fst.Builder$UnCompiledNode.isCompiled()", "public boolean isCompiled()"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.clear()", "public void clear()"], ["T", "org.apache.lucene.util.fst.Builder$UnCompiledNode.getLastOutput(int)", "public T getLastOutput(int)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.addArc(int, org.apache.lucene.util.fst.Builder$Node)", "public void addArc(int, org.apache.lucene.util.fst.Builder$Node)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.replaceLast(int, org.apache.lucene.util.fst.Builder$Node, T, boolean)", "public void replaceLast(int, org.apache.lucene.util.fst.Builder$Node, T, boolean)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.deleteLast(int, org.apache.lucene.util.fst.Builder$Node)", "public void deleteLast(int, org.apache.lucene.util.fst.Builder$Node)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.setLastOutput(int, T)", "public void setLastOutput(int, T)"], ["void", "org.apache.lucene.util.fst.Builder$UnCompiledNode.prependOutput(T)", "public void prependOutput(T)"], ["org.apache.lucene.util.fst.Builder", "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs<T>)", "public org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs<T>)"], ["org.apache.lucene.util.fst.Builder", "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, org.apache.lucene.util.fst.Builder$FreezeTail<T>, boolean)", "public org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, org.apache.lucene.util.fst.Builder$FreezeTail<T>, boolean)"], ["org.apache.lucene.util.fst.Builder", "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, org.apache.lucene.util.fst.Builder$FreezeTail<T>, boolean, float)", "public org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, org.apache.lucene.util.fst.Builder$FreezeTail<T>, boolean, float)"], ["int", "org.apache.lucene.util.fst.Builder.getTotStateCount()", "public int getTotStateCount()"], ["long", "org.apache.lucene.util.fst.Builder.getTermCount()", "public long getTermCount()"], ["int", "org.apache.lucene.util.fst.Builder.getMappedStateCount()", "public int getMappedStateCount()"], ["void", "org.apache.lucene.util.fst.Builder.setAllowArrayArcs(boolean)", "public void setAllowArrayArcs(boolean)"], ["void", "org.apache.lucene.util.fst.Builder.add(org.apache.lucene.util.IntsRef, T)", "public void add(org.apache.lucene.util.IntsRef, T) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST<T>", "org.apache.lucene.util.fst.Builder.finish()", "public org.apache.lucene.util.fst.FST<T> finish() throws java.io.IOException"], ["org.apache.lucene.util.fst.ByteSequenceOutputs", "org.apache.lucene.util.fst.ByteSequenceOutputs.getSingleton()", "public static org.apache.lucene.util.fst.ByteSequenceOutputs getSingleton()"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.common(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef common(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef subtract(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.add(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.BytesRef add(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"], ["void", "org.apache.lucene.util.fst.ByteSequenceOutputs.write(org.apache.lucene.util.BytesRef, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.BytesRef, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.BytesRef read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()", "public org.apache.lucene.util.BytesRef getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(org.apache.lucene.util.BytesRef)", "public java.lang.String outputToString(org.apache.lucene.util.BytesRef)"], ["java.lang.String", "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.ByteSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.ByteSequenceOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput", "org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput()", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput()"], ["org.apache.lucene.util.fst.BytesRefFSTEnum", "org.apache.lucene.util.fst.BytesRefFSTEnum(org.apache.lucene.util.fst.FST<T>)", "public org.apache.lucene.util.fst.BytesRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.current()", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> current()"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.next()", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> next() throws java.io.IOException"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.seekCeil(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> seekCeil(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.seekFloor(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> seekFloor(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.BytesRefFSTEnum.seekExact(org.apache.lucene.util.BytesRef)", "public org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput<T> seekExact(org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.CharSequenceOutputs", "org.apache.lucene.util.fst.CharSequenceOutputs.getSingleton()", "public static org.apache.lucene.util.fst.CharSequenceOutputs getSingleton()"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public org.apache.lucene.util.CharsRef common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public org.apache.lucene.util.CharsRef subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)", "public org.apache.lucene.util.CharsRef add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"], ["void", "org.apache.lucene.util.fst.CharSequenceOutputs.write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.CharsRef read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.CharsRef", "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()", "public org.apache.lucene.util.CharsRef getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(org.apache.lucene.util.CharsRef)", "public java.lang.String outputToString(org.apache.lucene.util.CharsRef)"], ["java.lang.String", "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.CharSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.CharSequenceOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.FST$Arc", "org.apache.lucene.util.fst.FST$Arc()", "public org.apache.lucene.util.fst.FST$Arc()"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST$Arc.copyFrom(org.apache.lucene.util.fst.FST$Arc<T>)", "public org.apache.lucene.util.fst.FST$Arc<T> copyFrom(org.apache.lucene.util.fst.FST$Arc<T>)"], ["boolean", "org.apache.lucene.util.fst.FST$Arc.isLast()", "public boolean isLast()"], ["boolean", "org.apache.lucene.util.fst.FST$Arc.isFinal()", "public boolean isFinal()"], ["java.lang.String", "org.apache.lucene.util.fst.FST$Arc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.fst.FST$ArcAndState", "org.apache.lucene.util.fst.FST$ArcAndState(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.FST$ArcAndState(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.fst.FST$BytesWriter", "org.apache.lucene.util.fst.FST$BytesWriter(org.apache.lucene.util.fst.FST)", "public org.apache.lucene.util.fst.FST$BytesWriter(org.apache.lucene.util.fst.FST)"], ["void", "org.apache.lucene.util.fst.FST$BytesWriter.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.util.fst.FST$BytesWriter.setPosWrite(int)", "public void setPosWrite(int)"], ["void", "org.apache.lucene.util.fst.FST$BytesWriter.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["org.apache.lucene.util.fst.FST$ForwardBytesReader", "org.apache.lucene.util.fst.FST$ForwardBytesReader(byte[], int)", "public org.apache.lucene.util.fst.FST$ForwardBytesReader(byte[], int)"], ["byte", "org.apache.lucene.util.fst.FST$ForwardBytesReader.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.fst.FST$ForwardBytesReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.util.fst.FST$ForwardBytesReader.skip(int)", "public void skip(int)"], ["void", "org.apache.lucene.util.fst.FST$ForwardBytesReader.skip(int, int)", "public void skip(int, int)"], ["org.apache.lucene.util.fst.FST$INPUT_TYPE[]", "org.apache.lucene.util.fst.FST$INPUT_TYPE.values()", "public static org.apache.lucene.util.fst.FST$INPUT_TYPE[] values()"], ["org.apache.lucene.util.fst.FST$INPUT_TYPE", "org.apache.lucene.util.fst.FST$INPUT_TYPE.valueOf(java.lang.String)", "public static org.apache.lucene.util.fst.FST$INPUT_TYPE valueOf(java.lang.String)"], ["org.apache.lucene.util.fst.FST$NodeAndInCount", "org.apache.lucene.util.fst.FST$NodeAndInCount(int, int)", "public org.apache.lucene.util.fst.FST$NodeAndInCount(int, int)"], ["int", "org.apache.lucene.util.fst.FST$NodeAndInCount.compareTo(org.apache.lucene.util.fst.FST$NodeAndInCount)", "public int compareTo(org.apache.lucene.util.fst.FST$NodeAndInCount)"], ["int", "org.apache.lucene.util.fst.FST$NodeAndInCount.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.fst.FST$NodeQueue", "org.apache.lucene.util.fst.FST$NodeQueue(int)", "public org.apache.lucene.util.fst.FST$NodeQueue(int)"], ["boolean", "org.apache.lucene.util.fst.FST$NodeQueue.lessThan(org.apache.lucene.util.fst.FST$NodeAndInCount, org.apache.lucene.util.fst.FST$NodeAndInCount)", "public boolean lessThan(org.apache.lucene.util.fst.FST$NodeAndInCount, org.apache.lucene.util.fst.FST$NodeAndInCount)"], ["boolean", "org.apache.lucene.util.fst.FST$NodeQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.FST$ReverseBytesReader", "org.apache.lucene.util.fst.FST$ReverseBytesReader(byte[], int)", "public org.apache.lucene.util.fst.FST$ReverseBytesReader(byte[], int)"], ["byte", "org.apache.lucene.util.fst.FST$ReverseBytesReader.readByte()", "public byte readByte()"], ["void", "org.apache.lucene.util.fst.FST$ReverseBytesReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["void", "org.apache.lucene.util.fst.FST$ReverseBytesReader.skip(int)", "public void skip(int)"], ["void", "org.apache.lucene.util.fst.FST$ReverseBytesReader.skip(int, int)", "public void skip(int, int)"], ["org.apache.lucene.util.fst.FST", "org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>)", "public org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$INPUT_TYPE", "org.apache.lucene.util.fst.FST.getInputType()", "public org.apache.lucene.util.fst.FST$INPUT_TYPE getInputType()"], ["int", "org.apache.lucene.util.fst.FST.sizeInBytes()", "public int sizeInBytes()"], ["T", "org.apache.lucene.util.fst.FST.getEmptyOutput()", "public T getEmptyOutput()"], ["void", "org.apache.lucene.util.fst.FST.save(org.apache.lucene.store.DataOutput)", "public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.FST.save(java.io.File)", "public void save(java.io.File) throws java.io.IOException"], ["<T> org.apache.lucene.util.fst.FST<T>", "org.apache.lucene.util.fst.FST.read(java.io.File, org.apache.lucene.util.fst.Outputs<T>)", "public static <T> org.apache.lucene.util.fst.FST<T> read(java.io.File, org.apache.lucene.util.fst.Outputs<T>) throws java.io.IOException"], ["<T> boolean", "org.apache.lucene.util.fst.FST.targetHasArcs(org.apache.lucene.util.fst.FST$Arc<T>)", "public static <T> boolean targetHasArcs(org.apache.lucene.util.fst.FST$Arc<T>)"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.getFirstArc(org.apache.lucene.util.fst.FST$Arc<T>)", "public org.apache.lucene.util.fst.FST$Arc<T> getFirstArc(org.apache.lucene.util.fst.FST$Arc<T>)"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readLastTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readLastTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readFirstTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readFirstTargetArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readFirstRealTargetArc(int, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readFirstRealTargetArc(int, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readNextArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readNextArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.FST.readNextArcLabel(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public int readNextArcLabel(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.readNextRealArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> readNextRealArc(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["org.apache.lucene.util.fst.FST$Arc<T>", "org.apache.lucene.util.fst.FST.findTargetArc(int, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)", "public org.apache.lucene.util.fst.FST$Arc<T> findTargetArc(int, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.FST.getNodeCount()", "public int getNodeCount()"], ["int", "org.apache.lucene.util.fst.FST.getArcCount()", "public int getArcCount()"], ["int", "org.apache.lucene.util.fst.FST.getArcWithOutputCount()", "public int getArcWithOutputCount()"], ["void", "org.apache.lucene.util.fst.FST.setAllowArrayArcs(boolean)", "public void setAllowArrayArcs(boolean)"], ["org.apache.lucene.util.fst.FST$BytesReader", "org.apache.lucene.util.fst.FST.getBytesReader(int)", "public org.apache.lucene.util.fst.FST$BytesReader getBytesReader(int)"], ["org.apache.lucene.util.fst.FST<T>", "org.apache.lucene.util.fst.FST.pack(int, int, float)", "public org.apache.lucene.util.fst.FST<T> pack(int, int, float) throws java.io.IOException"], ["org.apache.lucene.util.fst.IntSequenceOutputs", "org.apache.lucene.util.fst.IntSequenceOutputs.getSingleton()", "public static org.apache.lucene.util.fst.IntSequenceOutputs getSingleton()"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.common(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.IntsRef common(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.IntsRef subtract(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.add(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.IntsRef add(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"], ["void", "org.apache.lucene.util.fst.IntSequenceOutputs.write(org.apache.lucene.util.IntsRef, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.IntsRef, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.IntsRef read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()", "public org.apache.lucene.util.IntsRef getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(org.apache.lucene.util.IntsRef)", "public java.lang.String outputToString(org.apache.lucene.util.IntsRef)"], ["java.lang.String", "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.IntSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.IntSequenceOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput", "org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput()", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput()"], ["org.apache.lucene.util.fst.IntsRefFSTEnum", "org.apache.lucene.util.fst.IntsRefFSTEnum(org.apache.lucene.util.fst.FST<T>)", "public org.apache.lucene.util.fst.IntsRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.current()", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> current()"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.next()", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> next() throws java.io.IOException"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.seekCeil(org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> seekCeil(org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.seekFloor(org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> seekFloor(org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T>", "org.apache.lucene.util.fst.IntsRefFSTEnum.seekExact(org.apache.lucene.util.IntsRef)", "public org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput<T> seekExact(org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.NoOutputs$1.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.fst.NoOutputs$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.util.fst.NoOutputs", "org.apache.lucene.util.fst.NoOutputs.getSingleton()", "public static org.apache.lucene.util.fst.NoOutputs getSingleton()"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["void", "org.apache.lucene.util.fst.NoOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput)"], ["java.lang.Object", "org.apache.lucene.util.fst.NoOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.NoOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["org.apache.lucene.util.fst.NodeHash", "org.apache.lucene.util.fst.NodeHash(org.apache.lucene.util.fst.FST<T>)", "public org.apache.lucene.util.fst.NodeHash(org.apache.lucene.util.fst.FST<T>)"], ["int", "org.apache.lucene.util.fst.NodeHash.add(org.apache.lucene.util.fst.Builder$UnCompiledNode<T>)", "public int add(org.apache.lucene.util.fst.Builder$UnCompiledNode<T>) throws java.io.IOException"], ["int", "org.apache.lucene.util.fst.NodeHash.count()", "public int count()"], ["org.apache.lucene.util.fst.Outputs", "org.apache.lucene.util.fst.Outputs()", "public org.apache.lucene.util.fst.Outputs()"], ["T", "org.apache.lucene.util.fst.Outputs.merge(T, T)", "public T merge(T, T)"], ["boolean", "org.apache.lucene.util.fst.PairOutputs$Pair.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.fst.PairOutputs$Pair.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.fst.PairOutputs", "org.apache.lucene.util.fst.PairOutputs(org.apache.lucene.util.fst.Outputs<A>, org.apache.lucene.util.fst.Outputs<B>)", "public org.apache.lucene.util.fst.PairOutputs(org.apache.lucene.util.fst.Outputs<A>, org.apache.lucene.util.fst.Outputs<B>)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.newPair(A, B)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> newPair(A, B)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.common(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> common(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.subtract(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> subtract(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.add(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> add(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["void", "org.apache.lucene.util.fst.PairOutputs.write(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.store.DataOutput)", "public void write(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.fst.PairOutputs$Pair<A, B>", "org.apache.lucene.util.fst.PairOutputs.getNoOutput()", "public org.apache.lucene.util.fst.PairOutputs$Pair<A, B> getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs.outputToString(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)", "public java.lang.String outputToString(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.fst.PairOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.PairOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PairOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.PositiveIntOutputs", "org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton()", "public static org.apache.lucene.util.fst.PositiveIntOutputs getSingleton()"], ["org.apache.lucene.util.fst.PositiveIntOutputs", "org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton(boolean)", "public static org.apache.lucene.util.fst.PositiveIntOutputs getSingleton(boolean)"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Long, java.lang.Long)", "public java.lang.Long common(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Long, java.lang.Long)", "public java.lang.Long subtract(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Long, java.lang.Long)", "public java.lang.Long add(java.lang.Long, java.lang.Long)"], ["void", "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Long, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Long, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Long read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["java.lang.Long", "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()", "public java.lang.Long getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Long)", "public java.lang.String outputToString(java.lang.Long)"], ["java.lang.String", "org.apache.lucene.util.fst.PositiveIntOutputs.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["void", "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs(long, long)", "public org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs(long, long)"], ["java.lang.String", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getSingleton(boolean)", "public static org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs getSingleton(boolean)"], ["java.lang.Long", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long)", "public java.lang.Long get(long)"], ["org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long, long)", "public org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs get(long, long)"], ["java.lang.Long", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Long common(java.lang.Object, java.lang.Object)"], ["java.lang.Long", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Long subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.add(java.lang.Object, java.lang.Object)", "public java.lang.Object add(java.lang.Object, java.lang.Object)"], ["void", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)", "public void write(java.lang.Object, org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.read(org.apache.lucene.store.DataInput)", "public java.lang.Object read(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getNoOutput()", "public java.lang.Object getNoOutput()"], ["java.lang.String", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.outputToString(java.lang.Object)", "public java.lang.String outputToString(java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.merge(java.lang.Object, java.lang.Object)", "public java.lang.Object merge(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)", "public java.lang.Object subtract(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.common(java.lang.Object, java.lang.Object)", "public java.lang.Object common(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.util.fst.Util$FSTPath", "org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, java.util.Comparator<T>)", "public org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, java.util.Comparator<T>)"], ["java.lang.String", "org.apache.lucene.util.fst.Util$FSTPath.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.fst.Util$FSTPath.compareTo(org.apache.lucene.util.fst.Util$FSTPath<T>)", "public int compareTo(org.apache.lucene.util.fst.Util$FSTPath<T>)"], ["int", "org.apache.lucene.util.fst.Util$FSTPath.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.fst.Util$MinResult", "org.apache.lucene.util.fst.Util$MinResult(org.apache.lucene.util.IntsRef, T, java.util.Comparator<T>)", "public org.apache.lucene.util.fst.Util$MinResult(org.apache.lucene.util.IntsRef, T, java.util.Comparator<T>)"], ["int", "org.apache.lucene.util.fst.Util$MinResult.compareTo(org.apache.lucene.util.fst.Util$MinResult<T>)", "public int compareTo(org.apache.lucene.util.fst.Util$MinResult<T>)"], ["int", "org.apache.lucene.util.fst.Util$MinResult.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.fst.Util$TopNSearcher", "org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, int, java.util.Comparator<T>)", "public org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, int, java.util.Comparator<T>)"], ["org.apache.lucene.util.fst.Util$MinResult<T>[]", "org.apache.lucene.util.fst.Util$TopNSearcher.search()", "public org.apache.lucene.util.fst.Util$MinResult<T>[] search() throws java.io.IOException"], ["<T> T", "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.IntsRef)", "public static <T> T get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.IntsRef) throws java.io.IOException"], ["<T> T", "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.BytesRef)", "public static <T> T get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.BytesRef) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long)", "public static org.apache.lucene.util.IntsRef getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long) throws java.io.IOException"], ["<T> org.apache.lucene.util.fst.Util$MinResult<T>[]", "org.apache.lucene.util.fst.Util.shortestPaths(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, java.util.Comparator<T>, int)", "public static <T> org.apache.lucene.util.fst.Util$MinResult<T>[] shortestPaths(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, java.util.Comparator<T>, int) throws java.io.IOException"], ["<T> void", "org.apache.lucene.util.fst.Util.toDot(org.apache.lucene.util.fst.FST<T>, java.io.Writer, boolean, boolean)", "public static <T> void toDot(org.apache.lucene.util.fst.FST<T>, java.io.Writer, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.IntsRef toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.IntsRef toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toUTF32(char[], int, int, org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.IntsRef toUTF32(char[], int, int, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.IntsRef", "org.apache.lucene.util.fst.Util.toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)", "public static org.apache.lucene.util.IntsRef toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)"], ["org.apache.lucene.util.BytesRef", "org.apache.lucene.util.fst.Util.toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRef)", "public static org.apache.lucene.util.BytesRef toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRef)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValue()", "public org.apache.lucene.util.mutable.MutableValue()"], ["boolean", "org.apache.lucene.util.mutable.MutableValue.exists()", "public boolean exists()"], ["int", "org.apache.lucene.util.mutable.MutableValue.compareTo(org.apache.lucene.util.mutable.MutableValue)", "public int compareTo(org.apache.lucene.util.mutable.MutableValue)"], ["boolean", "org.apache.lucene.util.mutable.MutableValue.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.mutable.MutableValue.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.mutable.MutableValue.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.util.mutable.MutableValueBool", "org.apache.lucene.util.mutable.MutableValueBool()", "public org.apache.lucene.util.mutable.MutableValueBool()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueBool.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueBool.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueBool.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueBool.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueBool.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueBool.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueDate", "org.apache.lucene.util.mutable.MutableValueDate()", "public org.apache.lucene.util.mutable.MutableValueDate()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueDate.toObject()", "public java.lang.Object toObject()"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueDate.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["org.apache.lucene.util.mutable.MutableValueDouble", "org.apache.lucene.util.mutable.MutableValueDouble()", "public org.apache.lucene.util.mutable.MutableValueDouble()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueDouble.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueDouble.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueDouble.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueDouble.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueDouble.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueDouble.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueFloat", "org.apache.lucene.util.mutable.MutableValueFloat()", "public org.apache.lucene.util.mutable.MutableValueFloat()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueFloat.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueFloat.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueFloat.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueFloat.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueFloat.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueFloat.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueInt", "org.apache.lucene.util.mutable.MutableValueInt()", "public org.apache.lucene.util.mutable.MutableValueInt()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueInt.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueInt.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueInt.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueInt.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueInt.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueInt.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueLong", "org.apache.lucene.util.mutable.MutableValueLong()", "public org.apache.lucene.util.mutable.MutableValueLong()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueLong.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueLong.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueLong.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueLong.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueLong.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueLong.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.mutable.MutableValueStr", "org.apache.lucene.util.mutable.MutableValueStr()", "public org.apache.lucene.util.mutable.MutableValueStr()"], ["java.lang.Object", "org.apache.lucene.util.mutable.MutableValueStr.toObject()", "public java.lang.Object toObject()"], ["void", "org.apache.lucene.util.mutable.MutableValueStr.copy(org.apache.lucene.util.mutable.MutableValue)", "public void copy(org.apache.lucene.util.mutable.MutableValue)"], ["org.apache.lucene.util.mutable.MutableValue", "org.apache.lucene.util.mutable.MutableValueStr.duplicate()", "public org.apache.lucene.util.mutable.MutableValue duplicate()"], ["boolean", "org.apache.lucene.util.mutable.MutableValueStr.equalsSameType(java.lang.Object)", "public boolean equalsSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueStr.compareSameType(java.lang.Object)", "public int compareSameType(java.lang.Object)"], ["int", "org.apache.lucene.util.mutable.MutableValueStr.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.packed.BulkOperation", "org.apache.lucene.util.packed.BulkOperation.of(org.apache.lucene.util.packed.PackedInts$Format, int)", "public static org.apache.lucene.util.packed.BulkOperation of(org.apache.lucene.util.packed.PackedInts$Format, int)"], ["int", "org.apache.lucene.util.packed.BulkOperation.computeIterations(int, int)", "public final int computeIterations(int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked", "org.apache.lucene.util.packed.BulkOperationPacked(int)", "public org.apache.lucene.util.packed.BulkOperationPacked(int)"], ["int", "org.apache.lucene.util.packed.BulkOperationPacked.blockCount()", "public int blockCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPacked.valueCount()", "public int valueCount()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, long[], int, int)", "public void encode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, long[], int, int)", "public void encode(int[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, byte[], int, int)", "public void encode(long[], int, byte[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, byte[], int, int)", "public void encode(int[], int, byte[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked1", "org.apache.lucene.util.packed.BulkOperationPacked1()", "public org.apache.lucene.util.packed.BulkOperationPacked1()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked10", "org.apache.lucene.util.packed.BulkOperationPacked10()", "public org.apache.lucene.util.packed.BulkOperationPacked10()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked11", "org.apache.lucene.util.packed.BulkOperationPacked11()", "public org.apache.lucene.util.packed.BulkOperationPacked11()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked12", "org.apache.lucene.util.packed.BulkOperationPacked12()", "public org.apache.lucene.util.packed.BulkOperationPacked12()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked13", "org.apache.lucene.util.packed.BulkOperationPacked13()", "public org.apache.lucene.util.packed.BulkOperationPacked13()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked14", "org.apache.lucene.util.packed.BulkOperationPacked14()", "public org.apache.lucene.util.packed.BulkOperationPacked14()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked15", "org.apache.lucene.util.packed.BulkOperationPacked15()", "public org.apache.lucene.util.packed.BulkOperationPacked15()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked16", "org.apache.lucene.util.packed.BulkOperationPacked16()", "public org.apache.lucene.util.packed.BulkOperationPacked16()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked17", "org.apache.lucene.util.packed.BulkOperationPacked17()", "public org.apache.lucene.util.packed.BulkOperationPacked17()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked18", "org.apache.lucene.util.packed.BulkOperationPacked18()", "public org.apache.lucene.util.packed.BulkOperationPacked18()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked19", "org.apache.lucene.util.packed.BulkOperationPacked19()", "public org.apache.lucene.util.packed.BulkOperationPacked19()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked2", "org.apache.lucene.util.packed.BulkOperationPacked2()", "public org.apache.lucene.util.packed.BulkOperationPacked2()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked20", "org.apache.lucene.util.packed.BulkOperationPacked20()", "public org.apache.lucene.util.packed.BulkOperationPacked20()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked21", "org.apache.lucene.util.packed.BulkOperationPacked21()", "public org.apache.lucene.util.packed.BulkOperationPacked21()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked22", "org.apache.lucene.util.packed.BulkOperationPacked22()", "public org.apache.lucene.util.packed.BulkOperationPacked22()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked23", "org.apache.lucene.util.packed.BulkOperationPacked23()", "public org.apache.lucene.util.packed.BulkOperationPacked23()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked24", "org.apache.lucene.util.packed.BulkOperationPacked24()", "public org.apache.lucene.util.packed.BulkOperationPacked24()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked3", "org.apache.lucene.util.packed.BulkOperationPacked3()", "public org.apache.lucene.util.packed.BulkOperationPacked3()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked4", "org.apache.lucene.util.packed.BulkOperationPacked4()", "public org.apache.lucene.util.packed.BulkOperationPacked4()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked5", "org.apache.lucene.util.packed.BulkOperationPacked5()", "public org.apache.lucene.util.packed.BulkOperationPacked5()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked6", "org.apache.lucene.util.packed.BulkOperationPacked6()", "public org.apache.lucene.util.packed.BulkOperationPacked6()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked7", "org.apache.lucene.util.packed.BulkOperationPacked7()", "public org.apache.lucene.util.packed.BulkOperationPacked7()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked8", "org.apache.lucene.util.packed.BulkOperationPacked8()", "public org.apache.lucene.util.packed.BulkOperationPacked8()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPacked9", "org.apache.lucene.util.packed.BulkOperationPacked9()", "public org.apache.lucene.util.packed.BulkOperationPacked9()"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["org.apache.lucene.util.packed.BulkOperationPackedSingleBlock", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock(int)", "public org.apache.lucene.util.packed.BulkOperationPackedSingleBlock(int)"], ["int", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.blockCount()", "public final int blockCount()"], ["int", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.valueCount()", "public int valueCount()"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, long[], int, int)", "public void decode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, long[], int, int)", "public void decode(byte[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, int[], int, int)", "public void decode(long[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, int[], int, int)", "public void decode(byte[], int, int[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, long[], int, int)", "public void encode(long[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, long[], int, int)", "public void encode(int[], int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, byte[], int, int)", "public void encode(long[], int, byte[], int, int)"], ["void", "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, byte[], int, int)", "public void encode(int[], int, byte[], int, int)"], ["long", "org.apache.lucene.util.packed.Direct16.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct16.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct16.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct16.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.util.packed.Direct16.getArray()", "public java.lang.Object getArray()"], ["boolean", "org.apache.lucene.util.packed.Direct16.hasArray()", "public boolean hasArray()"], ["int", "org.apache.lucene.util.packed.Direct16.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct16.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct16.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.Direct32.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct32.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct32.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct32.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.util.packed.Direct32.getArray()", "public java.lang.Object getArray()"], ["boolean", "org.apache.lucene.util.packed.Direct32.hasArray()", "public boolean hasArray()"], ["int", "org.apache.lucene.util.packed.Direct32.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct32.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct32.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.Direct64.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct64.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct64.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct64.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.util.packed.Direct64.getArray()", "public java.lang.Object getArray()"], ["boolean", "org.apache.lucene.util.packed.Direct64.hasArray()", "public boolean hasArray()"], ["int", "org.apache.lucene.util.packed.Direct64.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct64.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct64.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.Direct8.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Direct8.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Direct8.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Direct8.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.util.packed.Direct8.getArray()", "public java.lang.Object getArray()"], ["boolean", "org.apache.lucene.util.packed.Direct8.hasArray()", "public boolean hasArray()"], ["int", "org.apache.lucene.util.packed.Direct8.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Direct8.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Direct8.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.get(int)", "public long get(int)"], ["long", "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.packed.DirectPackedReader", "org.apache.lucene.util.packed.DirectPackedReader(int, int, org.apache.lucene.store.IndexInput)", "public org.apache.lucene.util.packed.DirectPackedReader(int, int, org.apache.lucene.store.IndexInput)"], ["long", "org.apache.lucene.util.packed.DirectPackedReader.get(int)", "public long get(int)"], ["long", "org.apache.lucene.util.packed.DirectPackedReader.ramBytesUsed()", "public long ramBytesUsed()"], ["org.apache.lucene.util.packed.GrowableWriter", "org.apache.lucene.util.packed.GrowableWriter(int, int, float)", "public org.apache.lucene.util.packed.GrowableWriter(int, int, float)"], ["long", "org.apache.lucene.util.packed.GrowableWriter.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.GrowableWriter.size()", "public int size()"], ["int", "org.apache.lucene.util.packed.GrowableWriter.getBitsPerValue()", "public int getBitsPerValue()"], ["org.apache.lucene.util.packed.PackedInts$Mutable", "org.apache.lucene.util.packed.GrowableWriter.getMutable()", "public org.apache.lucene.util.packed.PackedInts$Mutable getMutable()"], ["java.lang.Object", "org.apache.lucene.util.packed.GrowableWriter.getArray()", "public java.lang.Object getArray()"], ["boolean", "org.apache.lucene.util.packed.GrowableWriter.hasArray()", "public boolean hasArray()"], ["void", "org.apache.lucene.util.packed.GrowableWriter.set(int, long)", "public void set(int, long)"], ["void", "org.apache.lucene.util.packed.GrowableWriter.clear()", "public void clear()"], ["org.apache.lucene.util.packed.GrowableWriter", "org.apache.lucene.util.packed.GrowableWriter.resize(int)", "public org.apache.lucene.util.packed.GrowableWriter resize(int)"], ["int", "org.apache.lucene.util.packed.GrowableWriter.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.GrowableWriter.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.GrowableWriter.fill(int, int, long)", "public void fill(int, int, long)"], ["long", "org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.GrowableWriter.save(org.apache.lucene.store.DataOutput)", "public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long)", "public void set(int, long)"], ["int", "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed16ThreeBlocks.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.Packed16ThreeBlocks.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed16ThreeBlocks.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.packed.Packed16ThreeBlocks.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.Packed64", "org.apache.lucene.util.packed.Packed64(int, int)", "public org.apache.lucene.util.packed.Packed64(int, int)"], ["org.apache.lucene.util.packed.Packed64", "org.apache.lucene.util.packed.Packed64(long[], int, int)", "public org.apache.lucene.util.packed.Packed64(long[], int, int)"], ["org.apache.lucene.util.packed.Packed64", "org.apache.lucene.util.packed.Packed64(org.apache.lucene.store.DataInput, int, int)", "public org.apache.lucene.util.packed.Packed64(org.apache.lucene.store.DataInput, int, int) throws java.io.IOException"], ["long", "org.apache.lucene.util.packed.Packed64.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.Packed64.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed64.set(int, long)", "public void set(int, long)"], ["int", "org.apache.lucene.util.packed.Packed64.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["java.lang.String", "org.apache.lucene.util.packed.Packed64.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.util.packed.Packed64.ramBytesUsed()", "public long ramBytesUsed()"], ["void", "org.apache.lucene.util.packed.Packed64.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.Packed64.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.set(int, long)", "public void set(int, long)"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.get(int)", "public long get(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.set(int, long)", "public void set(int, long)"], ["boolean", "org.apache.lucene.util.packed.Packed64SingleBlock.isSupported(int)", "public static boolean isSupported(int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed64SingleBlock.ramBytesUsed()", "public long ramBytesUsed()"], ["int", "org.apache.lucene.util.packed.Packed64SingleBlock.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["int", "org.apache.lucene.util.packed.Packed64SingleBlock.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed64SingleBlock.fill(int, int, long)", "public void fill(int, int, long)"], ["java.lang.String", "org.apache.lucene.util.packed.Packed64SingleBlock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.packed.Packed64SingleBlock", "org.apache.lucene.util.packed.Packed64SingleBlock.create(org.apache.lucene.store.DataInput, int, int)", "public static org.apache.lucene.util.packed.Packed64SingleBlock create(org.apache.lucene.store.DataInput, int, int) throws java.io.IOException"], ["org.apache.lucene.util.packed.Packed64SingleBlock", "org.apache.lucene.util.packed.Packed64SingleBlock.create(int, int)", "public static org.apache.lucene.util.packed.Packed64SingleBlock create(int, int)"], ["long", "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int)", "public long get(int)"], ["int", "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long)", "public void set(int, long)"], ["int", "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.Packed8ThreeBlocks.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.Packed8ThreeBlocks.clear()", "public void clear()"], ["long", "org.apache.lucene.util.packed.Packed8ThreeBlocks.ramBytesUsed()", "public long ramBytesUsed()"], ["java.lang.String", "org.apache.lucene.util.packed.Packed8ThreeBlocks.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.util.packed.PackedInts$Format$1.nblocks(int, int)", "public int nblocks(int, int)"], ["int", "org.apache.lucene.util.packed.PackedInts$Format$2.nblocks(int, int)", "public int nblocks(int, int)"], ["boolean", "org.apache.lucene.util.packed.PackedInts$Format$2.isSupported(int)", "public boolean isSupported(int)"], ["float", "org.apache.lucene.util.packed.PackedInts$Format$2.overheadPerValue(int)", "public float overheadPerValue(int)"], ["org.apache.lucene.util.packed.PackedInts$Format[]", "org.apache.lucene.util.packed.PackedInts$Format.values()", "public static org.apache.lucene.util.packed.PackedInts$Format[] values()"], ["org.apache.lucene.util.packed.PackedInts$Format", "org.apache.lucene.util.packed.PackedInts$Format.valueOf(java.lang.String)", "public static org.apache.lucene.util.packed.PackedInts$Format valueOf(java.lang.String)"], ["org.apache.lucene.util.packed.PackedInts$Format", "org.apache.lucene.util.packed.PackedInts$Format.byId(int)", "public static org.apache.lucene.util.packed.PackedInts$Format byId(int)"], ["int", "org.apache.lucene.util.packed.PackedInts$Format.getId()", "public int getId()"], ["boolean", "org.apache.lucene.util.packed.PackedInts$Format.isSupported(int)", "public boolean isSupported(int)"], ["float", "org.apache.lucene.util.packed.PackedInts$Format.overheadPerValue(int)", "public float overheadPerValue(int)"], ["float", "org.apache.lucene.util.packed.PackedInts$Format.overheadRatio(int)", "public final float overheadRatio(int)"], ["org.apache.lucene.util.packed.PackedInts$FormatAndBits", "org.apache.lucene.util.packed.PackedInts$FormatAndBits(org.apache.lucene.util.packed.PackedInts$Format, int)", "public org.apache.lucene.util.packed.PackedInts$FormatAndBits(org.apache.lucene.util.packed.PackedInts$Format, int)"], ["int", "org.apache.lucene.util.packed.PackedInts$MutableImpl.set(int, long[], int, int)", "public int set(int, long[], int, int)"], ["void", "org.apache.lucene.util.packed.PackedInts$MutableImpl.fill(int, int, long)", "public void fill(int, int, long)"], ["void", "org.apache.lucene.util.packed.PackedInts$MutableImpl.save(org.apache.lucene.store.DataOutput)", "public void save(org.apache.lucene.store.DataOutput) throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderImpl.getBitsPerValue()", "public int getBitsPerValue()"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderImpl.size()", "public int size()"], ["java.lang.Object", "org.apache.lucene.util.packed.PackedInts$ReaderImpl.getArray()", "public java.lang.Object getArray()"], ["boolean", "org.apache.lucene.util.packed.PackedInts$ReaderImpl.hasArray()", "public boolean hasArray()"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderImpl.get(int, long[], int, int)", "public int get(int, long[], int, int)"], ["long", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.next()", "public long next() throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.getBitsPerValue()", "public int getBitsPerValue()"], ["int", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.size()", "public int size()"], ["void", "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts$Writer.bitsPerValue()", "public final int bitsPerValue()"], ["org.apache.lucene.util.packed.PackedInts", "org.apache.lucene.util.packed.PackedInts()", "public org.apache.lucene.util.packed.PackedInts()"], ["org.apache.lucene.util.packed.PackedInts$FormatAndBits", "org.apache.lucene.util.packed.PackedInts.fastestFormatAndBits(int, int, float)", "public static org.apache.lucene.util.packed.PackedInts$FormatAndBits fastestFormatAndBits(int, int, float)"], ["org.apache.lucene.util.packed.PackedInts$Decoder", "org.apache.lucene.util.packed.PackedInts.getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Decoder getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Encoder", "org.apache.lucene.util.packed.PackedInts.getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Encoder getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Reader getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getReader(org.apache.lucene.store.DataInput)", "public static org.apache.lucene.util.packed.PackedInts$Reader getReader(org.apache.lucene.store.DataInput) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$ReaderIterator", "org.apache.lucene.util.packed.PackedInts.getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)"], ["org.apache.lucene.util.packed.PackedInts$ReaderIterator", "org.apache.lucene.util.packed.PackedInts.getReaderIterator(org.apache.lucene.store.DataInput, int)", "public static org.apache.lucene.util.packed.PackedInts$ReaderIterator getReaderIterator(org.apache.lucene.store.DataInput, int) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Reader", "org.apache.lucene.util.packed.PackedInts.getDirectReader(org.apache.lucene.store.IndexInput)", "public static org.apache.lucene.util.packed.PackedInts$Reader getDirectReader(org.apache.lucene.store.IndexInput) throws java.io.IOException"], ["org.apache.lucene.util.packed.PackedInts$Mutable", "org.apache.lucene.util.packed.PackedInts.getMutable(int, int, float)", "public static org.apache.lucene.util.packed.PackedInts$Mutable getMutable(int, int, float)"], ["org.apache.lucene.util.packed.PackedInts$Writer", "org.apache.lucene.util.packed.PackedInts.getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)", "public static org.apache.lucene.util.packed.PackedInts$Writer getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"], ["org.apache.lucene.util.packed.PackedInts$Writer", "org.apache.lucene.util.packed.PackedInts.getWriter(org.apache.lucene.store.DataOutput, int, int, float)", "public static org.apache.lucene.util.packed.PackedInts$Writer getWriter(org.apache.lucene.store.DataOutput, int, int, float) throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedInts.bitsRequired(long)", "public static int bitsRequired(long)"], ["long", "org.apache.lucene.util.packed.PackedInts.maxValue(int)", "public static long maxValue(int)"], ["void", "org.apache.lucene.util.packed.PackedInts.copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)", "public static void copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)"], ["org.apache.lucene.util.LongsRef", "org.apache.lucene.util.packed.PackedReaderIterator.next(int)", "public org.apache.lucene.util.LongsRef next(int) throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedReaderIterator.ord()", "public int ord()"], ["void", "org.apache.lucene.util.packed.PackedWriter.add(long)", "public void add(long) throws java.io.IOException"], ["void", "org.apache.lucene.util.packed.PackedWriter.finish()", "public void finish() throws java.io.IOException"], ["int", "org.apache.lucene.util.packed.PackedWriter.ord()", "public int ord()"]]}