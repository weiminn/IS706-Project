{"mapdb-1.0.9.jar": [["org.mapdb.AsyncWriteEngine$WriterRunnable", "org.mapdb.AsyncWriteEngine$WriterRunnable(org.mapdb.AsyncWriteEngine)", "public org.mapdb.AsyncWriteEngine$WriterRunnable(org.mapdb.AsyncWriteEngine)"], ["void", "org.mapdb.AsyncWriteEngine$WriterRunnable.run()", "public void run()"], ["org.mapdb.AsyncWriteEngine", "org.mapdb.AsyncWriteEngine(org.mapdb.Engine, int, int, java.util.concurrent.Executor)", "public org.mapdb.AsyncWriteEngine(org.mapdb.Engine, int, int, java.util.concurrent.Executor)"], ["org.mapdb.AsyncWriteEngine", "org.mapdb.AsyncWriteEngine(org.mapdb.Engine)", "public org.mapdb.AsyncWriteEngine(org.mapdb.Engine)"], ["<A> long", "org.mapdb.AsyncWriteEngine.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.AsyncWriteEngine.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.AsyncWriteEngine.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.AsyncWriteEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.AsyncWriteEngine.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.AsyncWriteEngine.close()", "public void close()"], ["void", "org.mapdb.AsyncWriteEngine.commit()", "public void commit()"], ["void", "org.mapdb.AsyncWriteEngine.rollback()", "public void rollback()"], ["void", "org.mapdb.AsyncWriteEngine.compact()", "public void compact()"], ["void", "org.mapdb.AsyncWriteEngine.clearCache()", "public void clearCache()"], ["org.mapdb.Atomic$Boolean", "org.mapdb.Atomic$Boolean(org.mapdb.Engine, long)", "public org.mapdb.Atomic$Boolean(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$Boolean.getRecid()", "public long getRecid()"], ["boolean", "org.mapdb.Atomic$Boolean.get()", "public final boolean get()"], ["boolean", "org.mapdb.Atomic$Boolean.compareAndSet(boolean, boolean)", "public final boolean compareAndSet(boolean, boolean)"], ["void", "org.mapdb.Atomic$Boolean.set(boolean)", "public final void set(boolean)"], ["boolean", "org.mapdb.Atomic$Boolean.getAndSet(boolean)", "public final boolean getAndSet(boolean)"], ["java.lang.String", "org.mapdb.Atomic$Boolean.toString()", "public java.lang.String toString()"], ["org.mapdb.Atomic$Integer", "org.mapdb.Atomic$Integer(org.mapdb.Engine, long)", "public org.mapdb.Atomic$Integer(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$Integer.getRecid()", "public long getRecid()"], ["int", "org.mapdb.Atomic$Integer.get()", "public final int get()"], ["void", "org.mapdb.Atomic$Integer.set(int)", "public final void set(int)"], ["int", "org.mapdb.Atomic$Integer.getAndSet(int)", "public final int getAndSet(int)"], ["boolean", "org.mapdb.Atomic$Integer.compareAndSet(int, int)", "public final boolean compareAndSet(int, int)"], ["int", "org.mapdb.Atomic$Integer.getAndIncrement()", "public final int getAndIncrement()"], ["int", "org.mapdb.Atomic$Integer.getAndDecrement()", "public final int getAndDecrement()"], ["int", "org.mapdb.Atomic$Integer.getAndAdd(int)", "public final int getAndAdd(int)"], ["int", "org.mapdb.Atomic$Integer.incrementAndGet()", "public final int incrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.decrementAndGet()", "public final int decrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.addAndGet(int)", "public final int addAndGet(int)"], ["java.lang.String", "org.mapdb.Atomic$Integer.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.Atomic$Integer.intValue()", "public int intValue()"], ["long", "org.mapdb.Atomic$Integer.longValue()", "public long longValue()"], ["float", "org.mapdb.Atomic$Integer.floatValue()", "public float floatValue()"], ["double", "org.mapdb.Atomic$Integer.doubleValue()", "public double doubleValue()"], ["org.mapdb.Atomic$Long", "org.mapdb.Atomic$Long(org.mapdb.Engine, long)", "public org.mapdb.Atomic$Long(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$Long.getRecid()", "public long getRecid()"], ["long", "org.mapdb.Atomic$Long.get()", "public final long get()"], ["void", "org.mapdb.Atomic$Long.set(long)", "public final void set(long)"], ["long", "org.mapdb.Atomic$Long.getAndSet(long)", "public final long getAndSet(long)"], ["boolean", "org.mapdb.Atomic$Long.compareAndSet(long, long)", "public final boolean compareAndSet(long, long)"], ["long", "org.mapdb.Atomic$Long.getAndIncrement()", "public final long getAndIncrement()"], ["long", "org.mapdb.Atomic$Long.getAndDecrement()", "public final long getAndDecrement()"], ["long", "org.mapdb.Atomic$Long.getAndAdd(long)", "public final long getAndAdd(long)"], ["long", "org.mapdb.Atomic$Long.incrementAndGet()", "public final long incrementAndGet()"], ["long", "org.mapdb.Atomic$Long.decrementAndGet()", "public final long decrementAndGet()"], ["long", "org.mapdb.Atomic$Long.addAndGet(long)", "public final long addAndGet(long)"], ["java.lang.String", "org.mapdb.Atomic$Long.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.Atomic$Long.intValue()", "public int intValue()"], ["long", "org.mapdb.Atomic$Long.longValue()", "public long longValue()"], ["float", "org.mapdb.Atomic$Long.floatValue()", "public float floatValue()"], ["double", "org.mapdb.Atomic$Long.doubleValue()", "public double doubleValue()"], ["org.mapdb.Atomic$String", "org.mapdb.Atomic$String(org.mapdb.Engine, long)", "public org.mapdb.Atomic$String(org.mapdb.Engine, long)"], ["long", "org.mapdb.Atomic$String.getRecid()", "public long getRecid()"], ["java.lang.String", "org.mapdb.Atomic$String.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.mapdb.Atomic$String.get()", "public final java.lang.String get()"], ["boolean", "org.mapdb.Atomic$String.compareAndSet(java.lang.String, java.lang.String)", "public final boolean compareAndSet(java.lang.String, java.lang.String)"], ["void", "org.mapdb.Atomic$String.set(java.lang.String)", "public final void set(java.lang.String)"], ["java.lang.String", "org.mapdb.Atomic$String.getAndSet(java.lang.String)", "public final java.lang.String getAndSet(java.lang.String)"], ["org.mapdb.Atomic$Var", "org.mapdb.Atomic$Var(org.mapdb.Engine, long, org.mapdb.Serializer<E>)", "public org.mapdb.Atomic$Var(org.mapdb.Engine, long, org.mapdb.Serializer<E>)"], ["long", "org.mapdb.Atomic$Var.getRecid()", "public long getRecid()"], ["java.lang.String", "org.mapdb.Atomic$Var.toString()", "public java.lang.String toString()"], ["E", "org.mapdb.Atomic$Var.get()", "public final E get()"], ["boolean", "org.mapdb.Atomic$Var.compareAndSet(E, E)", "public final boolean compareAndSet(E, E)"], ["void", "org.mapdb.Atomic$Var.set(E)", "public final void set(E)"], ["E", "org.mapdb.Atomic$Var.getAndSet(E)", "public final E getAndSet(E)"], ["void", "org.mapdb.BTreeKeySerializer$1.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$1.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<java.lang.Long>", "org.mapdb.BTreeKeySerializer$1.getComparator()", "public java.util.Comparator<java.lang.Long> getComparator()"], ["void", "org.mapdb.BTreeKeySerializer$2.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$2.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<java.lang.Integer>", "org.mapdb.BTreeKeySerializer$2.getComparator()", "public java.util.Comparator<java.lang.Integer> getComparator()"], ["void", "org.mapdb.BTreeKeySerializer$3.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$3.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<java.lang.String>", "org.mapdb.BTreeKeySerializer$3.getComparator()", "public java.util.Comparator<java.lang.String> getComparator()"], ["org.mapdb.BTreeKeySerializer$BasicKeySerializer", "org.mapdb.BTreeKeySerializer$BasicKeySerializer(org.mapdb.Serializer)", "public org.mapdb.BTreeKeySerializer$BasicKeySerializer(org.mapdb.Serializer)"], ["void", "org.mapdb.BTreeKeySerializer$BasicKeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$BasicKeySerializer.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<java.lang.Object>", "org.mapdb.BTreeKeySerializer$BasicKeySerializer.getComparator()", "public java.util.Comparator<java.lang.Object> getComparator()"], ["org.mapdb.BTreeKeySerializer$Tuple2KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer(java.util.Comparator<A>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>)", "public org.mapdb.BTreeKeySerializer$Tuple2KeySerializer(java.util.Comparator<A>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<org.mapdb.Fun$Tuple2<A, B>>", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.getComparator()", "public java.util.Comparator<org.mapdb.Fun$Tuple2<A, B>> getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple2KeySerializer.hashCode()", "public int hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple3KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>)", "public org.mapdb.BTreeKeySerializer$Tuple3KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<org.mapdb.Fun$Tuple3<A, B, C>>", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.getComparator()", "public java.util.Comparator<org.mapdb.Fun$Tuple3<A, B, C>> getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple3KeySerializer.hashCode()", "public int hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple4KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>)", "public org.mapdb.BTreeKeySerializer$Tuple4KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<org.mapdb.Fun$Tuple4<A, B, C, D>>", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.getComparator()", "public java.util.Comparator<org.mapdb.Fun$Tuple4<A, B, C, D>> getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple4KeySerializer.hashCode()", "public int hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple5KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>, org.mapdb.Serializer<E>)", "public org.mapdb.BTreeKeySerializer$Tuple5KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>, org.mapdb.Serializer<E>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<org.mapdb.Fun$Tuple5<A, B, C, D, E>>", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.getComparator()", "public java.util.Comparator<org.mapdb.Fun$Tuple5<A, B, C, D, E>> getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple5KeySerializer.hashCode()", "public int hashCode()"], ["org.mapdb.BTreeKeySerializer$Tuple6KeySerializer", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>, org.mapdb.Serializer<E>, org.mapdb.Serializer<F>)", "public org.mapdb.BTreeKeySerializer$Tuple6KeySerializer(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>, org.mapdb.Serializer<A>, org.mapdb.Serializer<B>, org.mapdb.Serializer<C>, org.mapdb.Serializer<D>, org.mapdb.Serializer<E>, org.mapdb.Serializer<F>)"], ["void", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.serialize(java.io.DataOutput, int, int, java.lang.Object[])", "public void serialize(java.io.DataOutput, int, int, java.lang.Object[]) throws java.io.IOException"], ["java.lang.Object[]", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.deserialize(java.io.DataInput, int, int, int)", "public java.lang.Object[] deserialize(java.io.DataInput, int, int, int) throws java.io.IOException"], ["java.util.Comparator<org.mapdb.Fun$Tuple6<A, B, C, D, E, F>>", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.getComparator()", "public java.util.Comparator<org.mapdb.Fun$Tuple6<A, B, C, D, E, F>> getComparator()"], ["boolean", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.BTreeKeySerializer$Tuple6KeySerializer.hashCode()", "public int hashCode()"], ["org.mapdb.BTreeKeySerializer", "org.mapdb.BTreeKeySerializer()", "public org.mapdb.BTreeKeySerializer()"], ["byte[]", "org.mapdb.BTreeKeySerializer.leadingValuePackRead(java.io.DataInput, byte[], int)", "public static byte[] leadingValuePackRead(java.io.DataInput, byte[], int) throws java.io.IOException"], ["void", "org.mapdb.BTreeKeySerializer.leadingValuePackWrite(java.io.DataOutput, byte[], byte[], int)", "public static void leadingValuePackWrite(java.io.DataOutput, byte[], byte[], int) throws java.io.IOException"], ["int", "org.mapdb.BTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.BTreeMap$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$BTreeEntryIterator.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.BTreeMap$BTreeEntryIterator.next()", "public java.lang.Object next()"], ["boolean", "org.mapdb.BTreeMap$BTreeIterator.hasNext()", "public boolean hasNext()"], ["void", "org.mapdb.BTreeMap$BTreeIterator.remove()", "public void remove()"], ["K", "org.mapdb.BTreeMap$BTreeKeyIterator.next()", "public K next()"], ["V", "org.mapdb.BTreeMap$BTreeValueIterator.next()", "public V next()"], ["K", "org.mapdb.BTreeMap$DescendingMap$1.next()", "public K next()"], ["V", "org.mapdb.BTreeMap$DescendingMap$2.next()", "public V next()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap$3.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.BTreeMap$DescendingMap$3.next()", "public java.lang.Object next()"], ["boolean", "org.mapdb.BTreeMap$DescendingMap$Iter.hasNext()", "public boolean hasNext()"], ["void", "org.mapdb.BTreeMap$DescendingMap$Iter.advance()", "public void advance()"], ["void", "org.mapdb.BTreeMap$DescendingMap$Iter.remove()", "public void remove()"], ["org.mapdb.BTreeMap$DescendingMap", "org.mapdb.BTreeMap$DescendingMap(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)", "public org.mapdb.BTreeMap$DescendingMap(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$DescendingMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$DescendingMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.BTreeMap$DescendingMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMap$DescendingMap.size()", "public int size()"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$DescendingMap.clear()", "public void clear()"], ["V", "org.mapdb.BTreeMap$DescendingMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$DescendingMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.BTreeMap$DescendingMap.replace(K, V)", "public V replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap$DescendingMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.higherKey(K)", "public K higherKey(K)"], ["K", "org.mapdb.BTreeMap$DescendingMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.BTreeMap$DescendingMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$DescendingMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.subMap(K, boolean, K, boolean)", "public org.mapdb.BTreeMap$DescendingMap<K, V> subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.headMap(K, boolean)", "public org.mapdb.BTreeMap$DescendingMap<K, V> headMap(K, boolean)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.tailMap(K, boolean)", "public org.mapdb.BTreeMap$DescendingMap<K, V> tailMap(K, boolean)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.subMap(K, K)", "public org.mapdb.BTreeMap$DescendingMap<K, V> subMap(K, K)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.headMap(K)", "public org.mapdb.BTreeMap$DescendingMap<K, V> headMap(K)"], ["org.mapdb.BTreeMap$DescendingMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.tailMap(K)", "public org.mapdb.BTreeMap$DescendingMap<K, V> tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap$DescendingMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap$DescendingMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap$DescendingMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap$DescendingMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap$DescendingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set", "org.mapdb.BTreeMap$DescendingMap.keySet()", "public java.util.Set keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$DescendingMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["boolean", "org.mapdb.BTreeMap$DirNode.isLeaf()", "public boolean isLeaf()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$DirNode.keys()", "public java.lang.Object[] keys()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$DirNode.vals()", "public java.lang.Object[] vals()"], ["java.lang.Object", "org.mapdb.BTreeMap$DirNode.highKey()", "public java.lang.Object highKey()"], ["long[]", "org.mapdb.BTreeMap$DirNode.child()", "public long[] child()"], ["long", "org.mapdb.BTreeMap$DirNode.next()", "public long next()"], ["java.lang.String", "org.mapdb.BTreeMap$DirNode.toString()", "public java.lang.String toString()"], ["java.util.Iterator<java.util.Map$Entry<K1, V1>>", "org.mapdb.BTreeMap$EntrySet.iterator()", "public java.util.Iterator<java.util.Map$Entry<K1, V1>> iterator()"], ["boolean", "org.mapdb.BTreeMap$EntrySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$EntrySet.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMap$EntrySet.size()", "public int size()"], ["void", "org.mapdb.BTreeMap$EntrySet.clear()", "public void clear()"], ["boolean", "org.mapdb.BTreeMap$EntrySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMap$EntrySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.mapdb.BTreeMap$EntrySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["int", "org.mapdb.BTreeMap$KeySet.size()", "public int size()"], ["long", "org.mapdb.BTreeMap$KeySet.sizeLong()", "public long sizeLong()"], ["boolean", "org.mapdb.BTreeMap$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.BTreeMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$KeySet.clear()", "public void clear()"], ["E", "org.mapdb.BTreeMap$KeySet.lower(E)", "public E lower(E)"], ["E", "org.mapdb.BTreeMap$KeySet.floor(E)", "public E floor(E)"], ["E", "org.mapdb.BTreeMap$KeySet.ceiling(E)", "public E ceiling(E)"], ["E", "org.mapdb.BTreeMap$KeySet.higher(E)", "public E higher(E)"], ["java.util.Comparator<? super E>", "org.mapdb.BTreeMap$KeySet.comparator()", "public java.util.Comparator<? super E> comparator()"], ["E", "org.mapdb.BTreeMap$KeySet.first()", "public E first()"], ["E", "org.mapdb.BTreeMap$KeySet.last()", "public E last()"], ["E", "org.mapdb.BTreeMap$KeySet.pollFirst()", "public E pollFirst()"], ["E", "org.mapdb.BTreeMap$KeySet.pollLast()", "public E pollLast()"], ["java.util.Iterator<E>", "org.mapdb.BTreeMap$KeySet.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.mapdb.BTreeMap$KeySet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMap$KeySet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.mapdb.BTreeMap$KeySet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.util.Iterator<E>", "org.mapdb.BTreeMap$KeySet.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.subSet(E, boolean, E, boolean)", "public java.util.NavigableSet<E> subSet(E, boolean, E, boolean)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.headSet(E, boolean)", "public java.util.NavigableSet<E> headSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.tailSet(E, boolean)", "public java.util.NavigableSet<E> tailSet(E, boolean)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.subSet(E, E)", "public java.util.NavigableSet<E> subSet(E, E)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.headSet(E)", "public java.util.NavigableSet<E> headSet(E)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.tailSet(E)", "public java.util.NavigableSet<E> tailSet(E)"], ["java.util.NavigableSet<E>", "org.mapdb.BTreeMap$KeySet.descendingSet()", "public java.util.NavigableSet<E> descendingSet()"], ["boolean", "org.mapdb.BTreeMap$KeySet.add(E)", "public boolean add(E)"], ["java.util.SortedSet", "org.mapdb.BTreeMap$KeySet.tailSet(java.lang.Object)", "public java.util.SortedSet tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMap$KeySet.headSet(java.lang.Object)", "public java.util.SortedSet headSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMap$KeySet.subSet(java.lang.Object, java.lang.Object)", "public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$LeafNode.isLeaf()", "public boolean isLeaf()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$LeafNode.keys()", "public java.lang.Object[] keys()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$LeafNode.vals()", "public java.lang.Object[] vals()"], ["java.lang.Object", "org.mapdb.BTreeMap$LeafNode.highKey()", "public java.lang.Object highKey()"], ["long[]", "org.mapdb.BTreeMap$LeafNode.child()", "public long[] child()"], ["long", "org.mapdb.BTreeMap$LeafNode.next()", "public long next()"], ["java.lang.String", "org.mapdb.BTreeMap$LeafNode.toString()", "public java.lang.String toString()"], ["org.mapdb.BTreeMap$NodeSerializer", "org.mapdb.BTreeMap$NodeSerializer(boolean, org.mapdb.BTreeKeySerializer, org.mapdb.Serializer, java.util.Comparator, int)", "public org.mapdb.BTreeMap$NodeSerializer(boolean, org.mapdb.BTreeKeySerializer, org.mapdb.Serializer, java.util.Comparator, int)"], ["void", "org.mapdb.BTreeMap$NodeSerializer.serialize(java.io.DataOutput, org.mapdb.BTreeMap$BNode)", "public void serialize(java.io.DataOutput, org.mapdb.BTreeMap$BNode) throws java.io.IOException"], ["org.mapdb.BTreeMap$BNode", "org.mapdb.BTreeMap$NodeSerializer.deserialize(java.io.DataInput, int)", "public org.mapdb.BTreeMap$BNode deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.BTreeMap$NodeSerializer.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.BTreeMap$NodeSerializer.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.BTreeMap$NodeSerializer.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["org.mapdb.BTreeMap$SubMap", "org.mapdb.BTreeMap$SubMap(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)", "public org.mapdb.BTreeMap$SubMap(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$SubMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$SubMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap$SubMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.BTreeMap$SubMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMap$SubMap.size()", "public int size()"], ["long", "org.mapdb.BTreeMap$SubMap.sizeLong()", "public long sizeLong()"], ["boolean", "org.mapdb.BTreeMap$SubMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.BTreeMap$SubMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$SubMap.clear()", "public void clear()"], ["V", "org.mapdb.BTreeMap$SubMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap$SubMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$SubMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.BTreeMap$SubMap.replace(K, V)", "public V replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap$SubMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.BTreeMap$SubMap.higherKey(K)", "public K higherKey(K)"], ["K", "org.mapdb.BTreeMap$SubMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.BTreeMap$SubMap.lastKey()", "public K lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$SubMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.subMap(K, boolean, K, boolean)", "public org.mapdb.BTreeMap$SubMap<K, V> subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.headMap(K, boolean)", "public org.mapdb.BTreeMap$SubMap<K, V> headMap(K, boolean)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.tailMap(K, boolean)", "public org.mapdb.BTreeMap$SubMap<K, V> tailMap(K, boolean)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.subMap(K, K)", "public org.mapdb.BTreeMap$SubMap<K, V> subMap(K, K)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.headMap(K)", "public org.mapdb.BTreeMap$SubMap<K, V> headMap(K)"], ["org.mapdb.BTreeMap$SubMap<K, V>", "org.mapdb.BTreeMap$SubMap.tailMap(K)", "public org.mapdb.BTreeMap$SubMap<K, V> tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap$SubMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap$SubMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap$SubMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap$SubMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap$SubMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set", "org.mapdb.BTreeMap$SubMap.keySet()", "public java.util.Set keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap$SubMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["org.mapdb.BTreeMap$ValRef", "org.mapdb.BTreeMap$ValRef(long)", "public org.mapdb.BTreeMap$ValRef(long)"], ["boolean", "org.mapdb.BTreeMap$ValRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.BTreeMap$ValRef.hashCode()", "public int hashCode()"], ["java.lang.String", "org.mapdb.BTreeMap$ValRef.toString()", "public java.lang.String toString()"], ["java.util.Iterator<E>", "org.mapdb.BTreeMap$Values.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.mapdb.BTreeMap$Values.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMap$Values.size()", "public int size()"], ["boolean", "org.mapdb.BTreeMap$Values.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$Values.clear()", "public void clear()"], ["java.lang.Object[]", "org.mapdb.BTreeMap$Values.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.mapdb.BTreeMap$Values.toArray(T[])", "public <T> T[] toArray(T[])"], ["org.mapdb.BTreeMap", "org.mapdb.BTreeMap(org.mapdb.Engine, long, int, boolean, long, org.mapdb.BTreeKeySerializer<K>, org.mapdb.Serializer<V>, java.util.Comparator<K>, int, boolean)", "public org.mapdb.BTreeMap(org.mapdb.Engine, long, int, boolean, long, org.mapdb.BTreeKeySerializer<K>, org.mapdb.Serializer<V>, java.util.Comparator<K>, int, boolean)"], ["V", "org.mapdb.BTreeMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.BTreeMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMap.clear()", "public void clear()"], ["boolean", "org.mapdb.BTreeMap.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.BTreeMap.size()", "public int size()"], ["long", "org.mapdb.BTreeMap.sizeLong()", "public long sizeLong()"], ["V", "org.mapdb.BTreeMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.BTreeMap.replace(K, V)", "public V replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap.comparator()", "public java.util.Comparator<? super K> comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.firstEntry()", "public java.util.Map$Entry<K, V> firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollFirstEntry()", "public java.util.Map$Entry<K, V> pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollLastEntry()", "public java.util.Map$Entry<K, V> pollLastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lastEntry()", "public java.util.Map$Entry<K, V> lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lowerEntry(K)", "public java.util.Map$Entry<K, V> lowerEntry(K)"], ["K", "org.mapdb.BTreeMap.lowerKey(K)", "public K lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.floorEntry(K)", "public java.util.Map$Entry<K, V> floorEntry(K)"], ["K", "org.mapdb.BTreeMap.floorKey(K)", "public K floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.ceilingEntry(K)", "public java.util.Map$Entry<K, V> ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap.ceilingKey(K)", "public K ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.higherEntry(K)", "public java.util.Map$Entry<K, V> higherEntry(K)"], ["K", "org.mapdb.BTreeMap.higherKey(K)", "public K higherKey(K)"], ["boolean", "org.mapdb.BTreeMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["K", "org.mapdb.BTreeMap.firstKey()", "public K firstKey()"], ["K", "org.mapdb.BTreeMap.lastKey()", "public K lastKey()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, boolean, K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, boolean, K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K, boolean)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> subMap(K, K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> headMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K)", "public java.util.concurrent.ConcurrentNavigableMap<K, V> tailMap(K)"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap.keySet()", "public java.util.NavigableSet<K> keySet()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap.navigableKeySet()", "public java.util.NavigableSet<K> navigableKeySet()"], ["java.util.Collection<V>", "org.mapdb.BTreeMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.descendingMap()", "public java.util.concurrent.ConcurrentNavigableMap<K, V> descendingMap()"], ["java.util.NavigableSet<K>", "org.mapdb.BTreeMap.descendingKeySet()", "public java.util.NavigableSet<K> descendingKeySet()"], ["java.util.NavigableMap<K, V>", "org.mapdb.BTreeMap.snapshot()", "public java.util.NavigableMap<K, V> snapshot()"], ["void", "org.mapdb.BTreeMap.modificationListenerAdd(org.mapdb.Bind$MapListener<K, V>)", "public void modificationListenerAdd(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.BTreeMap.modificationListenerRemove(org.mapdb.Bind$MapListener<K, V>)", "public void modificationListenerRemove(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.BTreeMap.close()", "public void close()"], ["org.mapdb.Engine", "org.mapdb.BTreeMap.getEngine()", "public org.mapdb.Engine getEngine()"], ["void", "org.mapdb.BTreeMap.printTreeStructure()", "public void printTreeStructure()"], ["java.util.Set", "org.mapdb.BTreeMap.keySet()", "public java.util.Set keySet()"], ["java.util.SortedMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object)", "public java.util.SortedMap tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.headMap(java.lang.Object)", "public java.util.SortedMap headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, java.lang.Object)", "public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object, boolean)", "public java.util.NavigableMap tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.headMap(java.lang.Object, boolean)", "public java.util.NavigableMap headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)", "public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.descendingMap()", "public java.util.NavigableMap descendingMap()"], ["void", "org.mapdb.Bind$1.update(K, V, V)", "public void update(K, V, V)"], ["void", "org.mapdb.Bind$2.update(K, V, V)", "public void update(K, V, V)"], ["void", "org.mapdb.Bind$3.update(K, V, V)", "public void update(K, V, V)"], ["void", "org.mapdb.Bind$4.update(K, V, V)", "public void update(K, V, V)"], ["void", "org.mapdb.Bind$5.update(K, V, V)", "public void update(K, V, V)"], ["void", "org.mapdb.Bind$6.update(K, V, V)", "public void update(K, V, V)"], ["V", "org.mapdb.Bind$7.run(K, V)", "public V run(K, V)"], ["V", "org.mapdb.Bind$8.run(K, V)", "public V run(K, V)"], ["void", "org.mapdb.Bind$9.update(K, V, V)", "public void update(K, V, V)"], ["<K, V> void", "org.mapdb.Bind.size(org.mapdb.Bind$MapWithModificationListener<K, V>, org.mapdb.Atomic$Long)", "public static <K, V> void size(org.mapdb.Bind$MapWithModificationListener<K, V>, org.mapdb.Atomic$Long)"], ["<K, V, V2> void", "org.mapdb.Bind.secondaryValue(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<K, V2>, org.mapdb.Fun$Function2<V2, K, V>)", "public static <K, V, V2> void secondaryValue(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<K, V2>, org.mapdb.Fun$Function2<V2, K, V>)"], ["<K, V, V2> void", "org.mapdb.Bind.secondaryValues(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K, V2>>, org.mapdb.Fun$Function2<V2[], K, V>)", "public static <K, V, V2> void secondaryValues(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K, V2>>, org.mapdb.Fun$Function2<V2[], K, V>)"], ["<K, V, K2> void", "org.mapdb.Bind.secondaryKey(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K2, K>>, org.mapdb.Fun$Function2<K2, K, V>)", "public static <K, V, K2> void secondaryKey(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K2, K>>, org.mapdb.Fun$Function2<K2, K, V>)"], ["<K, V, K2> void", "org.mapdb.Bind.secondaryKey(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<K2, K>, org.mapdb.Fun$Function2<K2, K, V>)", "public static <K, V, K2> void secondaryKey(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<K2, K>, org.mapdb.Fun$Function2<K2, K, V>)"], ["<K, V, K2> void", "org.mapdb.Bind.secondaryKeys(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K2, K>>, org.mapdb.Fun$Function2<K2[], K, V>)", "public static <K, V, K2> void secondaryKeys(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<K2, K>>, org.mapdb.Fun$Function2<K2[], K, V>)"], ["<K, V> void", "org.mapdb.Bind.mapInverse(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<V, K>>)", "public static <K, V> void mapInverse(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Set<org.mapdb.Fun$Tuple2<V, K>>)"], ["<K, V> void", "org.mapdb.Bind.mapInverse(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<V, K>)", "public static <K, V> void mapInverse(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.Map<V, K>)"], ["<K, V, C> void", "org.mapdb.Bind.histogram(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.concurrent.ConcurrentMap<C, java.lang.Long>, org.mapdb.Fun$Function2<C, K, V>)", "public static <K, V, C> void histogram(org.mapdb.Bind$MapWithModificationListener<K, V>, java.util.concurrent.ConcurrentMap<C, java.lang.Long>, org.mapdb.Fun$Function2<C, K, V>)"], ["org.mapdb.Caches$HardRef", "org.mapdb.Caches$HardRef(org.mapdb.Engine, int, boolean)", "public org.mapdb.Caches$HardRef(org.mapdb.Engine, int, boolean)"], ["<A> A", "org.mapdb.Caches$HardRef.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HardRef.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HardRef.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$HardRef.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["org.mapdb.Caches$HashTable", "org.mapdb.Caches$HashTable(org.mapdb.Engine, int, boolean)", "public org.mapdb.Caches$HashTable(org.mapdb.Engine, int, boolean)"], ["<A> long", "org.mapdb.Caches$HashTable.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.Caches$HashTable.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HashTable.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$HashTable.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$HashTable.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.Caches$HashTable.close()", "public void close()"], ["void", "org.mapdb.Caches$HashTable.rollback()", "public void rollback()"], ["void", "org.mapdb.Caches$HashTable.clearCache()", "public void clearCache()"], ["org.mapdb.Caches$LRU", "org.mapdb.Caches$LRU(org.mapdb.Engine, int, boolean)", "public org.mapdb.Caches$LRU(org.mapdb.Engine, int, boolean)"], ["org.mapdb.Caches$LRU", "org.mapdb.Caches$LRU(org.mapdb.Engine, org.mapdb.LongMap<java.lang.Object>, boolean)", "public org.mapdb.Caches$LRU(org.mapdb.Engine, org.mapdb.LongMap<java.lang.Object>, boolean)"], ["<A> long", "org.mapdb.Caches$LRU.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.Caches$LRU.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$LRU.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$LRU.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$LRU.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.Caches$LRU.close()", "public void close()"], ["void", "org.mapdb.Caches$LRU.rollback()", "public void rollback()"], ["void", "org.mapdb.Caches$LRU.clearCache()", "public void clearCache()"], ["void", "org.mapdb.Caches$WeakSoftRef$1.run()", "public void run()"], ["org.mapdb.Caches$WeakSoftRef$CacheSoftItem", "org.mapdb.Caches$WeakSoftRef$CacheSoftItem(A, java.lang.ref.ReferenceQueue<A>, long)", "public org.mapdb.Caches$WeakSoftRef$CacheSoftItem(A, java.lang.ref.ReferenceQueue<A>, long)"], ["long", "org.mapdb.Caches$WeakSoftRef$CacheSoftItem.getRecid()", "public long getRecid()"], ["org.mapdb.Caches$WeakSoftRef$CacheWeakItem", "org.mapdb.Caches$WeakSoftRef$CacheWeakItem(A, java.lang.ref.ReferenceQueue<A>, long)", "public org.mapdb.Caches$WeakSoftRef$CacheWeakItem(A, java.lang.ref.ReferenceQueue<A>, long)"], ["long", "org.mapdb.Caches$WeakSoftRef$CacheWeakItem.getRecid()", "public long getRecid()"], ["org.mapdb.Caches$WeakSoftRef", "org.mapdb.Caches$WeakSoftRef(org.mapdb.Engine, boolean, boolean)", "public org.mapdb.Caches$WeakSoftRef(org.mapdb.Engine, boolean, boolean)"], ["<A> long", "org.mapdb.Caches$WeakSoftRef.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.Caches$WeakSoftRef.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$WeakSoftRef.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.Caches$WeakSoftRef.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.Caches$WeakSoftRef.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.Caches$WeakSoftRef.close()", "public void close()"], ["void", "org.mapdb.Caches$WeakSoftRef.rollback()", "public void rollback()"], ["void", "org.mapdb.Caches$WeakSoftRef.clearCache()", "public void clearCache()"], ["org.mapdb.CompressLZF", "org.mapdb.CompressLZF()", "public org.mapdb.CompressLZF()"], ["int", "org.mapdb.CompressLZF.compress(byte[], int, byte[], int)", "public int compress(byte[], int, byte[], int)"], ["void", "org.mapdb.CompressLZF.expand(java.io.DataInput, byte[], int, int)", "public void expand(java.io.DataInput, byte[], int, int) throws java.io.IOException"], ["void", "org.mapdb.CompressLZF.expand(java.nio.ByteBuffer, int, byte[], int, int)", "public void expand(java.nio.ByteBuffer, int, byte[], int, int)"], ["int", "org.mapdb.DB$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker(org.mapdb.DB, java.lang.String)", "public org.mapdb.DB$BTreeMapMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.nodeSize(int)", "public org.mapdb.DB$BTreeMapMaker nodeSize(int)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.valuesOutsideNodesEnable()", "public org.mapdb.DB$BTreeMapMaker valuesOutsideNodesEnable()"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.counterEnable()", "public org.mapdb.DB$BTreeMapMaker counterEnable()"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.keySerializer(org.mapdb.BTreeKeySerializer<?>)", "public org.mapdb.DB$BTreeMapMaker keySerializer(org.mapdb.BTreeKeySerializer<?>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.keySerializerWrap(org.mapdb.Serializer<?>)", "public org.mapdb.DB$BTreeMapMaker keySerializerWrap(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.valueSerializer(org.mapdb.Serializer<?>)", "public org.mapdb.DB$BTreeMapMaker valueSerializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.comparator(java.util.Comparator<?>)", "public org.mapdb.DB$BTreeMapMaker comparator(java.util.Comparator<?>)"], ["<K, V> org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpSource(java.util.Iterator<K>, org.mapdb.Fun$Function1<V, K>)", "public <K, V> org.mapdb.DB$BTreeMapMaker pumpSource(java.util.Iterator<K>, org.mapdb.Fun$Function1<V, K>)"], ["<K, V> org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpSource(java.util.Iterator<org.mapdb.Fun$Tuple2<K, V>>)", "public <K, V> org.mapdb.DB$BTreeMapMaker pumpSource(java.util.Iterator<org.mapdb.Fun$Tuple2<K, V>>)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpPresort(int)", "public org.mapdb.DB$BTreeMapMaker pumpPresort(int)"], ["<K> org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB$BTreeMapMaker.pumpIgnoreDuplicates()", "public <K> org.mapdb.DB$BTreeMapMaker pumpIgnoreDuplicates()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$BTreeMapMaker.make()", "public <K, V> org.mapdb.BTreeMap<K, V> make()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$BTreeMapMaker.makeOrGet()", "public <K, V> org.mapdb.BTreeMap<K, V> makeOrGet()"], ["<V> org.mapdb.BTreeMap<java.lang.String, V>", "org.mapdb.DB$BTreeMapMaker.makeStringMap()", "public <V> org.mapdb.BTreeMap<java.lang.String, V> makeStringMap()"], ["<V> org.mapdb.BTreeMap<java.lang.Long, V>", "org.mapdb.DB$BTreeMapMaker.makeLongMap()", "public <V> org.mapdb.BTreeMap<java.lang.Long, V> makeLongMap()"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker(org.mapdb.DB, java.lang.String)", "public org.mapdb.DB$BTreeSetMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.nodeSize(int)", "public org.mapdb.DB$BTreeSetMaker nodeSize(int)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.counterEnable()", "public org.mapdb.DB$BTreeSetMaker counterEnable()"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.serializer(org.mapdb.BTreeKeySerializer<?>)", "public org.mapdb.DB$BTreeSetMaker serializer(org.mapdb.BTreeKeySerializer<?>)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.comparator(java.util.Comparator<?>)", "public org.mapdb.DB$BTreeSetMaker comparator(java.util.Comparator<?>)"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.pumpSource(java.util.Iterator<?>)", "public org.mapdb.DB$BTreeSetMaker pumpSource(java.util.Iterator<?>)"], ["<K> org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.pumpIgnoreDuplicates()", "public <K> org.mapdb.DB$BTreeSetMaker pumpIgnoreDuplicates()"], ["org.mapdb.DB$BTreeSetMaker", "org.mapdb.DB$BTreeSetMaker.pumpPresort(int)", "public org.mapdb.DB$BTreeSetMaker pumpPresort(int)"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB$BTreeSetMaker.make()", "public <K> java.util.NavigableSet<K> make()"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB$BTreeSetMaker.makeOrGet()", "public <K> java.util.NavigableSet<K> makeOrGet()"], ["java.util.NavigableSet<java.lang.String>", "org.mapdb.DB$BTreeSetMaker.makeStringSet()", "public java.util.NavigableSet<java.lang.String> makeStringSet()"], ["java.util.NavigableSet<java.lang.Long>", "org.mapdb.DB$BTreeSetMaker.makeLongSet()", "public java.util.NavigableSet<java.lang.Long> makeLongSet()"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker(org.mapdb.DB, java.lang.String)", "public org.mapdb.DB$HTreeMapMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.counterEnable()", "public org.mapdb.DB$HTreeMapMaker counterEnable()"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.keySerializer(org.mapdb.Serializer<?>)", "public org.mapdb.DB$HTreeMapMaker keySerializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.valueSerializer(org.mapdb.Serializer<?>)", "public org.mapdb.DB$HTreeMapMaker valueSerializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireMaxSize(long)", "public org.mapdb.DB$HTreeMapMaker expireMaxSize(long)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterWrite(long, java.util.concurrent.TimeUnit)", "public org.mapdb.DB$HTreeMapMaker expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterWrite(long)", "public org.mapdb.DB$HTreeMapMaker expireAfterWrite(long)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterAccess(long, java.util.concurrent.TimeUnit)", "public org.mapdb.DB$HTreeMapMaker expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireAfterAccess(long)", "public org.mapdb.DB$HTreeMapMaker expireAfterAccess(long)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.expireStoreSize(double)", "public org.mapdb.DB$HTreeMapMaker expireStoreSize(double)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.valueCreator(org.mapdb.Fun$Function1<?, ?>)", "public org.mapdb.DB$HTreeMapMaker valueCreator(org.mapdb.Fun$Function1<?, ?>)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB$HTreeMapMaker.hasher(org.mapdb.Hasher<?>)", "public org.mapdb.DB$HTreeMapMaker hasher(org.mapdb.Hasher<?>)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HTreeMapMaker.make()", "public <K, V> org.mapdb.HTreeMap<K, V> make()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HTreeMapMaker.makeOrGet()", "public <K, V> org.mapdb.HTreeMap<K, V> makeOrGet()"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker(org.mapdb.DB, java.lang.String)", "public org.mapdb.DB$HTreeSetMaker(org.mapdb.DB, java.lang.String)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.counterEnable()", "public org.mapdb.DB$HTreeSetMaker counterEnable()"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.serializer(org.mapdb.Serializer<?>)", "public org.mapdb.DB$HTreeSetMaker serializer(org.mapdb.Serializer<?>)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireMaxSize(long)", "public org.mapdb.DB$HTreeSetMaker expireMaxSize(long)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireStoreSize(double)", "public org.mapdb.DB$HTreeSetMaker expireStoreSize(double)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterWrite(long, java.util.concurrent.TimeUnit)", "public org.mapdb.DB$HTreeSetMaker expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterWrite(long)", "public org.mapdb.DB$HTreeSetMaker expireAfterWrite(long)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterAccess(long, java.util.concurrent.TimeUnit)", "public org.mapdb.DB$HTreeSetMaker expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.expireAfterAccess(long)", "public org.mapdb.DB$HTreeSetMaker expireAfterAccess(long)"], ["org.mapdb.DB$HTreeSetMaker", "org.mapdb.DB$HTreeSetMaker.hasher(org.mapdb.Hasher<?>)", "public org.mapdb.DB$HTreeSetMaker hasher(org.mapdb.Hasher<?>)"], ["<K> java.util.Set<K>", "org.mapdb.DB$HTreeSetMaker.make()", "public <K> java.util.Set<K> make()"], ["<K> java.util.Set<K>", "org.mapdb.DB$HTreeSetMaker.makeOrGet()", "public <K> java.util.Set<K> makeOrGet()"], ["org.mapdb.DB$IdentityWrapper", "org.mapdb.DB$IdentityWrapper(java.lang.Object)", "public org.mapdb.DB$IdentityWrapper(java.lang.Object)"], ["int", "org.mapdb.DB$IdentityWrapper.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.DB$IdentityWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Engine)", "public org.mapdb.DB(org.mapdb.Engine)"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Engine, boolean, boolean)", "public org.mapdb.DB(org.mapdb.Engine, boolean, boolean)"], ["<A> A", "org.mapdb.DB.catGet(java.lang.String, A)", "public <A> A catGet(java.lang.String, A)"], ["<A> A", "org.mapdb.DB.catGet(java.lang.String)", "public <A> A catGet(java.lang.String)"], ["<A> A", "org.mapdb.DB.catPut(java.lang.String, A)", "public <A> A catPut(java.lang.String, A)"], ["<A> A", "org.mapdb.DB.catPut(java.lang.String, A, A)", "public <A> A catPut(java.lang.String, A, A)"], ["java.lang.String", "org.mapdb.DB.getNameForObject(java.lang.Object)", "public java.lang.String getNameForObject(java.lang.Object)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB.getHashMap(java.lang.String)", "public synchronized <K, V> org.mapdb.HTreeMap<K, V> getHashMap(java.lang.String)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DB.getHashMap(java.lang.String, org.mapdb.Fun$Function1<V, K>)", "public synchronized <K, V> org.mapdb.HTreeMap<K, V> getHashMap(java.lang.String, org.mapdb.Fun$Function1<V, K>)"], ["<V> V", "org.mapdb.DB.namedPut(java.lang.String, java.lang.Object)", "public <V> V namedPut(java.lang.String, java.lang.Object)"], ["org.mapdb.DB$HTreeMapMaker", "org.mapdb.DB.createHashMap(java.lang.String)", "public org.mapdb.DB$HTreeMapMaker createHashMap(java.lang.String)"], ["<K> java.util.Set<K>", "org.mapdb.DB.getHashSet(java.lang.String)", "public synchronized <K> java.util.Set<K> getHashSet(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.DB$HTreeSetMaker createHashSet(java.lang.String)", "public synchronized org.mapdb.DB$HTreeSetMaker createHashSet(java.lang.String)"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DB.getTreeMap(java.lang.String)", "public synchronized <K, V> org.mapdb.BTreeMap<K, V> getTreeMap(java.lang.String)"], ["org.mapdb.DB$BTreeMapMaker", "org.mapdb.DB.createTreeMap(java.lang.String)", "public org.mapdb.DB$BTreeMapMaker createTreeMap(java.lang.String)"], ["java.util.SortedMap<java.lang.String, java.lang.Object>", "org.mapdb.DB.getCatalog()", "public java.util.SortedMap<java.lang.String, java.lang.Object> getCatalog()"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB.getTreeSet(java.lang.String)", "public synchronized <K> java.util.NavigableSet<K> getTreeSet(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.DB$BTreeSetMaker createTreeSet(java.lang.String)", "public synchronized org.mapdb.DB$BTreeSetMaker createTreeSet(java.lang.String)"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DB.createTreeSet(org.mapdb.DB$BTreeSetMaker)", "public synchronized <K> java.util.NavigableSet<K> createTreeSet(org.mapdb.DB$BTreeSetMaker)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.getQueue(java.lang.String)", "public synchronized <E> java.util.concurrent.BlockingQueue<E> getQueue(java.lang.String)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.createQueue(java.lang.String, org.mapdb.Serializer<E>, boolean)", "public synchronized <E> java.util.concurrent.BlockingQueue<E> createQueue(java.lang.String, org.mapdb.Serializer<E>, boolean)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.getStack(java.lang.String)", "public synchronized <E> java.util.concurrent.BlockingQueue<E> getStack(java.lang.String)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.createStack(java.lang.String, org.mapdb.Serializer<E>, boolean)", "public synchronized <E> java.util.concurrent.BlockingQueue<E> createStack(java.lang.String, org.mapdb.Serializer<E>, boolean)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.getCircularQueue(java.lang.String)", "public synchronized <E> java.util.concurrent.BlockingQueue<E> getCircularQueue(java.lang.String)"], ["<E> java.util.concurrent.BlockingQueue<E>", "org.mapdb.DB.createCircularQueue(java.lang.String, org.mapdb.Serializer<E>, long)", "public synchronized <E> java.util.concurrent.BlockingQueue<E> createCircularQueue(java.lang.String, org.mapdb.Serializer<E>, long)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Long createAtomicLong(java.lang.String, long)", "public synchronized org.mapdb.Atomic$Long createAtomicLong(java.lang.String, long)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Long getAtomicLong(java.lang.String)", "public synchronized org.mapdb.Atomic$Long getAtomicLong(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Integer createAtomicInteger(java.lang.String, int)", "public synchronized org.mapdb.Atomic$Integer createAtomicInteger(java.lang.String, int)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Integer getAtomicInteger(java.lang.String)", "public synchronized org.mapdb.Atomic$Integer getAtomicInteger(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Boolean createAtomicBoolean(java.lang.String, boolean)", "public synchronized org.mapdb.Atomic$Boolean createAtomicBoolean(java.lang.String, boolean)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$Boolean getAtomicBoolean(java.lang.String)", "public synchronized org.mapdb.Atomic$Boolean getAtomicBoolean(java.lang.String)"], ["void", "org.mapdb.DB.checkShouldCreate(java.lang.String)", "public void checkShouldCreate(java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$String createAtomicString(java.lang.String, java.lang.String)", "public synchronized org.mapdb.Atomic$String createAtomicString(java.lang.String, java.lang.String)"], ["synchronized", "org.mapdb.DB.org.mapdb.Atomic$String getAtomicString(java.lang.String)", "public synchronized org.mapdb.Atomic$String getAtomicString(java.lang.String)"], ["<E> org.mapdb.Atomic$Var<E>", "org.mapdb.DB.createAtomicVar(java.lang.String, E, org.mapdb.Serializer<E>)", "public synchronized <E> org.mapdb.Atomic$Var<E> createAtomicVar(java.lang.String, E, org.mapdb.Serializer<E>)"], ["<E> org.mapdb.Atomic$Var<E>", "org.mapdb.DB.getAtomicVar(java.lang.String)", "public synchronized <E> org.mapdb.Atomic$Var<E> getAtomicVar(java.lang.String)"], ["<E> E", "org.mapdb.DB.get(java.lang.String)", "public synchronized <E> E get(java.lang.String)"], ["synchronized", "org.mapdb.DB.boolean exists(java.lang.String)", "public synchronized boolean exists(java.lang.String)"], ["synchronized", "org.mapdb.DB.void delete(java.lang.String)", "public synchronized void delete(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.mapdb.DB.getAll()", "public synchronized java.util.Map<java.lang.String, java.lang.Object> getAll()"], ["synchronized", "org.mapdb.DB.void rename(java.lang.String, java.lang.String)", "public synchronized void rename(java.lang.String, java.lang.String)"], ["void", "org.mapdb.DB.checkNameNotExists(java.lang.String)", "public void checkNameNotExists(java.lang.String)"], ["synchronized", "org.mapdb.DB.void close()", "public synchronized void close()"], ["java.lang.Object", "org.mapdb.DB.getFromWeakCollection(java.lang.String)", "public java.lang.Object getFromWeakCollection(java.lang.String)"], ["void", "org.mapdb.DB.checkNotClosed()", "public void checkNotClosed()"], ["synchronized", "org.mapdb.DB.boolean isClosed()", "public synchronized boolean isClosed()"], ["synchronized", "org.mapdb.DB.void commit()", "public synchronized void commit()"], ["synchronized", "org.mapdb.DB.void rollback()", "public synchronized void rollback()"], ["synchronized", "org.mapdb.DB.void compact()", "public synchronized void compact()"], ["synchronized", "org.mapdb.DB.org.mapdb.DB snapshot()", "public synchronized org.mapdb.DB snapshot()"], ["org.mapdb.Serializer", "org.mapdb.DB.getDefaultSerializer()", "public org.mapdb.Serializer getDefaultSerializer()"], ["org.mapdb.Engine", "org.mapdb.DB.getEngine()", "public org.mapdb.Engine getEngine()"], ["void", "org.mapdb.DB.checkType(java.lang.String, java.lang.String)", "public void checkType(java.lang.String, java.lang.String)"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newHeapDB()", "public static org.mapdb.DBMaker newHeapDB()"], ["DBMakerT", "org.mapdb.DBMaker._newHeapDB()", "public DBMakerT _newHeapDB()"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newMemoryDB()", "public static org.mapdb.DBMaker newMemoryDB()"], ["DBMakerT", "org.mapdb.DBMaker._newMemoryDB()", "public DBMakerT _newMemoryDB()"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newMemoryDirectDB()", "public static org.mapdb.DBMaker newMemoryDirectDB()"], ["DBMakerT", "org.mapdb.DBMaker._newMemoryDirectDB()", "public DBMakerT _newMemoryDirectDB()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.DBMaker.newTempTreeMap()", "public static <K, V> org.mapdb.BTreeMap<K, V> newTempTreeMap()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DBMaker.newTempHashMap()", "public static <K, V> org.mapdb.HTreeMap<K, V> newTempHashMap()"], ["<K> java.util.NavigableSet<K>", "org.mapdb.DBMaker.newTempTreeSet()", "public static <K> java.util.NavigableSet<K> newTempTreeSet()"], ["<K> java.util.Set<K>", "org.mapdb.DBMaker.newTempHashSet()", "public static <K> java.util.Set<K> newTempHashSet()"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newTempFileDB()", "public static org.mapdb.DBMaker newTempFileDB()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DBMaker.newCacheDirect(double)", "public static <K, V> org.mapdb.HTreeMap<K, V> newCacheDirect(double)"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.DBMaker.newCache(double)", "public static <K, V> org.mapdb.HTreeMap<K, V> newCache(double)"], ["org.mapdb.DBMaker", "org.mapdb.DBMaker.newFileDB(java.io.File)", "public static org.mapdb.DBMaker newFileDB(java.io.File)"], ["DBMakerT", "org.mapdb.DBMaker._newFileDB(java.io.File)", "public DBMakerT _newFileDB(java.io.File)"], ["DBMakerT", "org.mapdb.DBMaker.transactionDisable()", "public DBMakerT transactionDisable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheDisable()", "public DBMakerT cacheDisable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheHardRefEnable()", "public DBMakerT cacheHardRefEnable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheWeakRefEnable()", "public DBMakerT cacheWeakRefEnable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheSoftRefEnable()", "public DBMakerT cacheSoftRefEnable()"], ["DBMakerT", "org.mapdb.DBMaker.cacheLRUEnable()", "public DBMakerT cacheLRUEnable()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileEnable()", "public DBMakerT mmapFileEnable()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileCleanerHackDisable()", "public DBMakerT mmapFileCleanerHackDisable()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileEnablePartial()", "public DBMakerT mmapFileEnablePartial()"], ["DBMakerT", "org.mapdb.DBMaker.mmapFileEnableIfSupported()", "public DBMakerT mmapFileEnableIfSupported()"], ["DBMakerT", "org.mapdb.DBMaker.cacheSize(int)", "public DBMakerT cacheSize(int)"], ["DBMakerT", "org.mapdb.DBMaker.snapshotEnable()", "public DBMakerT snapshotEnable()"], ["DBMakerT", "org.mapdb.DBMaker.asyncWriteEnable()", "public DBMakerT asyncWriteEnable()"], ["DBMakerT", "org.mapdb.DBMaker.asyncWriteFlushDelay(int)", "public DBMakerT asyncWriteFlushDelay(int)"], ["DBMakerT", "org.mapdb.DBMaker.asyncWriteQueueSize(int)", "public DBMakerT asyncWriteQueueSize(int)"], ["DBMakerT", "org.mapdb.DBMaker.deleteFilesAfterClose()", "public DBMakerT deleteFilesAfterClose()"], ["DBMakerT", "org.mapdb.DBMaker.closeOnJvmShutdown()", "public DBMakerT closeOnJvmShutdown()"], ["DBMakerT", "org.mapdb.DBMaker.compressionEnable()", "public DBMakerT compressionEnable()"], ["DBMakerT", "org.mapdb.DBMaker.encryptionEnable(java.lang.String)", "public DBMakerT encryptionEnable(java.lang.String)"], ["DBMakerT", "org.mapdb.DBMaker.encryptionEnable(byte[])", "public DBMakerT encryptionEnable(byte[])"], ["DBMakerT", "org.mapdb.DBMaker.checksumEnable()", "public DBMakerT checksumEnable()"], ["DBMakerT", "org.mapdb.DBMaker.strictDBGet()", "public DBMakerT strictDBGet()"], ["DBMakerT", "org.mapdb.DBMaker.readOnly()", "public DBMakerT readOnly()"], ["DBMakerT", "org.mapdb.DBMaker.freeSpaceReclaimQ(int)", "public DBMakerT freeSpaceReclaimQ(int)"], ["DBMakerT", "org.mapdb.DBMaker.commitFileSyncDisable()", "public DBMakerT commitFileSyncDisable()"], ["DBMakerT", "org.mapdb.DBMaker.sizeLimit(double)", "public DBMakerT sizeLimit(double)"], ["org.mapdb.DB", "org.mapdb.DBMaker.make()", "public org.mapdb.DB make()"], ["org.mapdb.TxMaker", "org.mapdb.DBMaker.makeTxMaker()", "public org.mapdb.TxMaker makeTxMaker()"], ["org.mapdb.Engine", "org.mapdb.DBMaker.makeEngine()", "public org.mapdb.Engine makeEngine()"], ["org.mapdb.DataInput2", "org.mapdb.DataInput2(java.nio.ByteBuffer, int)", "public org.mapdb.DataInput2(java.nio.ByteBuffer, int)"], ["org.mapdb.DataInput2", "org.mapdb.DataInput2(byte[])", "public org.mapdb.DataInput2(byte[])"], ["void", "org.mapdb.DataInput2.readFully(byte[])", "public void readFully(byte[]) throws java.io.IOException"], ["void", "org.mapdb.DataInput2.readFully(byte[], int, int)", "public void readFully(byte[], int, int) throws java.io.IOException"], ["int", "org.mapdb.DataInput2.skipBytes(int)", "public int skipBytes(int) throws java.io.IOException"], ["boolean", "org.mapdb.DataInput2.readBoolean()", "public boolean readBoolean() throws java.io.IOException"], ["byte", "org.mapdb.DataInput2.readByte()", "public byte readByte() throws java.io.IOException"], ["int", "org.mapdb.DataInput2.readUnsignedByte()", "public int readUnsignedByte() throws java.io.IOException"], ["short", "org.mapdb.DataInput2.readShort()", "public short readShort() throws java.io.IOException"], ["int", "org.mapdb.DataInput2.readUnsignedShort()", "public int readUnsignedShort() throws java.io.IOException"], ["char", "org.mapdb.DataInput2.readChar()", "public char readChar() throws java.io.IOException"], ["int", "org.mapdb.DataInput2.readInt()", "public int readInt() throws java.io.IOException"], ["long", "org.mapdb.DataInput2.readLong()", "public long readLong() throws java.io.IOException"], ["float", "org.mapdb.DataInput2.readFloat()", "public float readFloat() throws java.io.IOException"], ["double", "org.mapdb.DataInput2.readDouble()", "public double readDouble() throws java.io.IOException"], ["java.lang.String", "org.mapdb.DataInput2.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["java.lang.String", "org.mapdb.DataInput2.readUTF()", "public java.lang.String readUTF() throws java.io.IOException"], ["int", "org.mapdb.DataInput2.read()", "public int read() throws java.io.IOException"], ["int", "org.mapdb.DataInput2.unpackInt(java.io.DataInput)", "public static int unpackInt(java.io.DataInput) throws java.io.IOException"], ["long", "org.mapdb.DataInput2.unpackLong(java.io.DataInput)", "public static long unpackLong(java.io.DataInput) throws java.io.IOException"], ["org.mapdb.DataOutput2", "org.mapdb.DataOutput2()", "public org.mapdb.DataOutput2()"], ["org.mapdb.DataOutput2", "org.mapdb.DataOutput2(byte[])", "public org.mapdb.DataOutput2(byte[])"], ["byte[]", "org.mapdb.DataOutput2.copyBytes()", "public byte[] copyBytes()"], ["void", "org.mapdb.DataOutput2.ensureAvail(int)", "public void ensureAvail(int)"], ["void", "org.mapdb.DataOutput2.write(int)", "public void write(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeBoolean(boolean)", "public void writeBoolean(boolean) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeByte(int)", "public void writeByte(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeShort(int)", "public void writeShort(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeChar(int)", "public void writeChar(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeFloat(float)", "public void writeFloat(float) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeDouble(double)", "public void writeDouble(double) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeBytes(java.lang.String)", "public void writeBytes(java.lang.String) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeChars(java.lang.String)", "public void writeChars(java.lang.String) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.writeUTF(java.lang.String)", "public void writeUTF(java.lang.String) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.packLong(java.io.DataOutput, long)", "public static void packLong(java.io.DataOutput, long) throws java.io.IOException"], ["void", "org.mapdb.DataOutput2.packInt(java.io.DataOutput, int)", "public static void packInt(java.io.DataOutput, int) throws java.io.IOException"], ["org.mapdb.EncryptionXTEA", "org.mapdb.EncryptionXTEA(byte[])", "public org.mapdb.EncryptionXTEA(byte[])"], ["void", "org.mapdb.EncryptionXTEA.encrypt(byte[], int, int)", "public void encrypt(byte[], int, int)"], ["void", "org.mapdb.EncryptionXTEA.decrypt(byte[], int, int)", "public void decrypt(byte[], int, int)"], ["byte[]", "org.mapdb.EncryptionXTEA.getHash(byte[])", "public static byte[] getHash(byte[])"], ["long", "org.mapdb.EngineWrapper$1.preallocate()", "public long preallocate()"], ["void", "org.mapdb.EngineWrapper$1.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.EngineWrapper$1.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.EngineWrapper$1.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$1.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$1.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$1.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper$1.close()", "public void close()"], ["boolean", "org.mapdb.EngineWrapper$1.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.EngineWrapper$1.commit()", "public void commit()"], ["void", "org.mapdb.EngineWrapper$1.rollback()", "public void rollback() throws java.lang.UnsupportedOperationException"], ["boolean", "org.mapdb.EngineWrapper$1.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.EngineWrapper$1.canRollback()", "public boolean canRollback()"], ["boolean", "org.mapdb.EngineWrapper$1.canSnapshot()", "public boolean canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper$1.snapshot()", "public org.mapdb.Engine snapshot() throws java.lang.UnsupportedOperationException"], ["void", "org.mapdb.EngineWrapper$1.clearCache()", "public void clearCache()"], ["void", "org.mapdb.EngineWrapper$1.compact()", "public void compact()"], ["org.mapdb.SerializerPojo", "org.mapdb.EngineWrapper$1.getSerializerPojo()", "public org.mapdb.SerializerPojo getSerializerPojo()"], ["void", "org.mapdb.EngineWrapper$1.closeListenerRegister(java.lang.Runnable)", "public void closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.EngineWrapper$1.closeListenerUnregister(java.lang.Runnable)", "public void closeListenerUnregister(java.lang.Runnable)"], ["void", "org.mapdb.EngineWrapper$CloseOnJVMShutdown$1.run()", "public void run()"], ["org.mapdb.EngineWrapper$CloseOnJVMShutdown", "org.mapdb.EngineWrapper$CloseOnJVMShutdown(org.mapdb.Engine)", "public org.mapdb.EngineWrapper$CloseOnJVMShutdown(org.mapdb.Engine)"], ["void", "org.mapdb.EngineWrapper$CloseOnJVMShutdown.close()", "public void close()"], ["org.mapdb.EngineWrapper$ImmutabilityCheckEngine$Item", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine$Item(org.mapdb.Serializer, java.lang.Object)", "public org.mapdb.EngineWrapper$ImmutabilityCheckEngine$Item(org.mapdb.Serializer, java.lang.Object)"], ["<A> A", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> long", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper$ImmutabilityCheckEngine.close()", "public void close()"], ["org.mapdb.EngineWrapper$ReadOnlyEngine", "org.mapdb.EngineWrapper$ReadOnlyEngine(org.mapdb.Engine)", "public org.mapdb.EngineWrapper$ReadOnlyEngine(org.mapdb.Engine)"], ["long", "org.mapdb.EngineWrapper$ReadOnlyEngine.preallocate()", "public long preallocate()"], ["void", "org.mapdb.EngineWrapper$ReadOnlyEngine.preallocate(long[])", "public void preallocate(long[])"], ["<A> boolean", "org.mapdb.EngineWrapper$ReadOnlyEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> long", "org.mapdb.EngineWrapper$ReadOnlyEngine.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$ReadOnlyEngine.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$ReadOnlyEngine.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper$ReadOnlyEngine.commit()", "public void commit()"], ["void", "org.mapdb.EngineWrapper$ReadOnlyEngine.rollback()", "public void rollback()"], ["boolean", "org.mapdb.EngineWrapper$ReadOnlyEngine.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.EngineWrapper$ReadOnlyEngine.canSnapshot()", "public boolean canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper$ReadOnlyEngine.snapshot()", "public org.mapdb.Engine snapshot() throws java.lang.UnsupportedOperationException"], ["<A> A", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SerializerCheckEngineWrapper.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.long preallocate()", "public synchronized long preallocate()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void preallocate(long[])", "public synchronized void preallocate(long[])"], ["<A> long", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.put(A, org.mapdb.Serializer<A>)", "public synchronized <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.get(long, org.mapdb.Serializer<A>)", "public synchronized <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.update(long, A, org.mapdb.Serializer<A>)", "public synchronized <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public synchronized <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.delete(long, org.mapdb.Serializer<A>)", "public synchronized <A> void delete(long, org.mapdb.Serializer<A>)"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void close()", "public synchronized void close()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.boolean isClosed()", "public synchronized boolean isClosed()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void commit()", "public synchronized void commit()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void rollback()", "public synchronized void rollback()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.boolean isReadOnly()", "public synchronized boolean isReadOnly()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.boolean canSnapshot()", "public synchronized boolean canSnapshot()"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.org.mapdb.Engine snapshot()", "public synchronized org.mapdb.Engine snapshot() throws java.lang.UnsupportedOperationException"], ["synchronized", "org.mapdb.EngineWrapper$SynchronizedEngineWrapper.void compact()", "public synchronized void compact()"], ["long", "org.mapdb.EngineWrapper.preallocate()", "public long preallocate()"], ["void", "org.mapdb.EngineWrapper.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.EngineWrapper.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.EngineWrapper.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.EngineWrapper.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.EngineWrapper.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.EngineWrapper.close()", "public void close()"], ["boolean", "org.mapdb.EngineWrapper.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.EngineWrapper.commit()", "public void commit()"], ["void", "org.mapdb.EngineWrapper.rollback()", "public void rollback()"], ["boolean", "org.mapdb.EngineWrapper.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.EngineWrapper.canRollback()", "public boolean canRollback()"], ["boolean", "org.mapdb.EngineWrapper.canSnapshot()", "public boolean canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper.snapshot()", "public org.mapdb.Engine snapshot() throws java.lang.UnsupportedOperationException"], ["void", "org.mapdb.EngineWrapper.clearCache()", "public void clearCache()"], ["void", "org.mapdb.EngineWrapper.compact()", "public void compact()"], ["org.mapdb.SerializerPojo", "org.mapdb.EngineWrapper.getSerializerPojo()", "public org.mapdb.SerializerPojo getSerializerPojo()"], ["void", "org.mapdb.EngineWrapper.closeListenerRegister(java.lang.Runnable)", "public void closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.EngineWrapper.closeListenerUnregister(java.lang.Runnable)", "public void closeListenerUnregister(java.lang.Runnable)"], ["org.mapdb.Engine", "org.mapdb.EngineWrapper.getWrappedEngine()", "public org.mapdb.Engine getWrappedEngine()"], ["int", "org.mapdb.Fun$1.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.Fun$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$10.compare(long[], long[])", "public int compare(long[], long[])"], ["int", "org.mapdb.Fun$10.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$11.compare(double[], double[])", "public int compare(double[], double[])"], ["int", "org.mapdb.Fun$11.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$12.compare(java.lang.Object[], java.lang.Object[])", "public int compare(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.Fun$12.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.Fun$13$1.hasNext()", "public boolean hasNext()"], ["K1", "org.mapdb.Fun$13$1.next()", "public K1 next()"], ["void", "org.mapdb.Fun$13$1.remove()", "public void remove()"], ["java.util.Iterator<K1>", "org.mapdb.Fun$13.iterator()", "public java.util.Iterator<K1> iterator()"], ["boolean", "org.mapdb.Fun$14$1.hasNext()", "public boolean hasNext()"], ["C", "org.mapdb.Fun$14$1.next()", "public C next()"], ["void", "org.mapdb.Fun$14$1.remove()", "public void remove()"], ["java.util.Iterator<C>", "org.mapdb.Fun$14.iterator()", "public java.util.Iterator<C> iterator()"], ["boolean", "org.mapdb.Fun$15$1.hasNext()", "public boolean hasNext()"], ["D", "org.mapdb.Fun$15$1.next()", "public D next()"], ["void", "org.mapdb.Fun$15$1.remove()", "public void remove()"], ["java.util.Iterator<D>", "org.mapdb.Fun$15.iterator()", "public java.util.Iterator<D> iterator()"], ["int", "org.mapdb.Fun$2.compare(java.lang.Comparable, java.lang.Comparable)", "public int compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.Fun$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.mapdb.Fun$3.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.Fun$3.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["K", "org.mapdb.Fun$4.run(org.mapdb.Fun$Tuple2<K, V>)", "public K run(org.mapdb.Fun$Tuple2<K, V>)"], ["java.lang.Object", "org.mapdb.Fun$4.run(java.lang.Object)", "public java.lang.Object run(java.lang.Object)"], ["V", "org.mapdb.Fun$5.run(org.mapdb.Fun$Tuple2<K, V>)", "public V run(org.mapdb.Fun$Tuple2<K, V>)"], ["java.lang.Object", "org.mapdb.Fun$5.run(java.lang.Object)", "public java.lang.Object run(java.lang.Object)"], ["K", "org.mapdb.Fun$6.run(K)", "public K run(K)"], ["int", "org.mapdb.Fun$7.compare(byte[], byte[])", "public int compare(byte[], byte[])"], ["int", "org.mapdb.Fun$7.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$8.compare(char[], char[])", "public int compare(char[], char[])"], ["int", "org.mapdb.Fun$8.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Fun$9.compare(int[], int[])", "public int compare(int[], int[])"], ["int", "org.mapdb.Fun$9.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$ArrayComparator", "org.mapdb.Fun$ArrayComparator(java.util.Comparator<?>[])", "public org.mapdb.Fun$ArrayComparator(java.util.Comparator<?>[])"], ["int", "org.mapdb.Fun$ArrayComparator.compare(java.lang.Object[], java.lang.Object[])", "public int compare(java.lang.Object[], java.lang.Object[])"], ["boolean", "org.mapdb.Fun$ArrayComparator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$ArrayComparator.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$ArrayComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple2", "org.mapdb.Fun$Tuple2(A, B)", "public org.mapdb.Fun$Tuple2(A, B)"], ["int", "org.mapdb.Fun$Tuple2.compareTo(org.mapdb.Fun$Tuple2<A, B>)", "public int compareTo(org.mapdb.Fun$Tuple2<A, B>)"], ["boolean", "org.mapdb.Fun$Tuple2.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple2.hashCode()", "public int hashCode()"], ["java.lang.String", "org.mapdb.Fun$Tuple2.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.Fun$Tuple2.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple2Comparator", "org.mapdb.Fun$Tuple2Comparator(java.util.Comparator<A>, java.util.Comparator<B>)", "public org.mapdb.Fun$Tuple2Comparator(java.util.Comparator<A>, java.util.Comparator<B>)"], ["int", "org.mapdb.Fun$Tuple2Comparator.compare(org.mapdb.Fun$Tuple2<A, B>, org.mapdb.Fun$Tuple2<A, B>)", "public int compare(org.mapdb.Fun$Tuple2<A, B>, org.mapdb.Fun$Tuple2<A, B>)"], ["boolean", "org.mapdb.Fun$Tuple2Comparator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple2Comparator.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple2Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple3", "org.mapdb.Fun$Tuple3(A, B, C)", "public org.mapdb.Fun$Tuple3(A, B, C)"], ["int", "org.mapdb.Fun$Tuple3.compareTo(org.mapdb.Fun$Tuple3<A, B, C>)", "public int compareTo(org.mapdb.Fun$Tuple3<A, B, C>)"], ["java.lang.String", "org.mapdb.Fun$Tuple3.toString()", "public java.lang.String toString()"], ["boolean", "org.mapdb.Fun$Tuple3.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple3.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple3.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple3Comparator", "org.mapdb.Fun$Tuple3Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>)", "public org.mapdb.Fun$Tuple3Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>)"], ["int", "org.mapdb.Fun$Tuple3Comparator.compare(org.mapdb.Fun$Tuple3<A, B, C>, org.mapdb.Fun$Tuple3<A, B, C>)", "public int compare(org.mapdb.Fun$Tuple3<A, B, C>, org.mapdb.Fun$Tuple3<A, B, C>)"], ["boolean", "org.mapdb.Fun$Tuple3Comparator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple3Comparator.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple3Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple4", "org.mapdb.Fun$Tuple4(A, B, C, D)", "public org.mapdb.Fun$Tuple4(A, B, C, D)"], ["int", "org.mapdb.Fun$Tuple4.compareTo(org.mapdb.Fun$Tuple4<A, B, C, D>)", "public int compareTo(org.mapdb.Fun$Tuple4<A, B, C, D>)"], ["java.lang.String", "org.mapdb.Fun$Tuple4.toString()", "public java.lang.String toString()"], ["boolean", "org.mapdb.Fun$Tuple4.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple4.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple4.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple4Comparator", "org.mapdb.Fun$Tuple4Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>)", "public org.mapdb.Fun$Tuple4Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>)"], ["int", "org.mapdb.Fun$Tuple4Comparator.compare(org.mapdb.Fun$Tuple4<A, B, C, D>, org.mapdb.Fun$Tuple4<A, B, C, D>)", "public int compare(org.mapdb.Fun$Tuple4<A, B, C, D>, org.mapdb.Fun$Tuple4<A, B, C, D>)"], ["boolean", "org.mapdb.Fun$Tuple4Comparator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple4Comparator.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple4Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple5", "org.mapdb.Fun$Tuple5(A, B, C, D, E)", "public org.mapdb.Fun$Tuple5(A, B, C, D, E)"], ["int", "org.mapdb.Fun$Tuple5.compareTo(org.mapdb.Fun$Tuple5<A, B, C, D, E>)", "public int compareTo(org.mapdb.Fun$Tuple5<A, B, C, D, E>)"], ["java.lang.String", "org.mapdb.Fun$Tuple5.toString()", "public java.lang.String toString()"], ["boolean", "org.mapdb.Fun$Tuple5.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple5.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple5.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple5Comparator", "org.mapdb.Fun$Tuple5Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>)", "public org.mapdb.Fun$Tuple5Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>)"], ["int", "org.mapdb.Fun$Tuple5Comparator.compare(org.mapdb.Fun$Tuple5<A, B, C, D, E>, org.mapdb.Fun$Tuple5<A, B, C, D, E>)", "public int compare(org.mapdb.Fun$Tuple5<A, B, C, D, E>, org.mapdb.Fun$Tuple5<A, B, C, D, E>)"], ["boolean", "org.mapdb.Fun$Tuple5Comparator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple5Comparator.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple5Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.mapdb.Fun$Tuple6", "org.mapdb.Fun$Tuple6(A, B, C, D, E, F)", "public org.mapdb.Fun$Tuple6(A, B, C, D, E, F)"], ["int", "org.mapdb.Fun$Tuple6.compareTo(org.mapdb.Fun$Tuple6<A, B, C, D, E, F>)", "public int compareTo(org.mapdb.Fun$Tuple6<A, B, C, D, E, F>)"], ["java.lang.String", "org.mapdb.Fun$Tuple6.toString()", "public java.lang.String toString()"], ["boolean", "org.mapdb.Fun$Tuple6.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple6.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple6.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.mapdb.Fun$Tuple6Comparator", "org.mapdb.Fun$Tuple6Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>, java.util.Comparator<F>)", "public org.mapdb.Fun$Tuple6Comparator(java.util.Comparator<A>, java.util.Comparator<B>, java.util.Comparator<C>, java.util.Comparator<D>, java.util.Comparator<E>, java.util.Comparator<F>)"], ["int", "org.mapdb.Fun$Tuple6Comparator.compare(org.mapdb.Fun$Tuple6<A, B, C, D, E, F>, org.mapdb.Fun$Tuple6<A, B, C, D, E, F>)", "public int compare(org.mapdb.Fun$Tuple6<A, B, C, D, E, F>, org.mapdb.Fun$Tuple6<A, B, C, D, E, F>)"], ["boolean", "org.mapdb.Fun$Tuple6Comparator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Fun$Tuple6Comparator.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Fun$Tuple6Comparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["<A> A", "org.mapdb.Fun.HI()", "public static <A> A HI()"], ["<A, B> org.mapdb.Fun$Tuple2<A, B>", "org.mapdb.Fun.t2(A, B)", "public static <A, B> org.mapdb.Fun$Tuple2<A, B> t2(A, B)"], ["<A, B, C> org.mapdb.Fun$Tuple3<A, B, C>", "org.mapdb.Fun.t3(A, B, C)", "public static <A, B, C> org.mapdb.Fun$Tuple3<A, B, C> t3(A, B, C)"], ["<A, B, C, D> org.mapdb.Fun$Tuple4<A, B, C, D>", "org.mapdb.Fun.t4(A, B, C, D)", "public static <A, B, C, D> org.mapdb.Fun$Tuple4<A, B, C, D> t4(A, B, C, D)"], ["<A, B, C, D, E> org.mapdb.Fun$Tuple5<A, B, C, D, E>", "org.mapdb.Fun.t5(A, B, C, D, E)", "public static <A, B, C, D, E> org.mapdb.Fun$Tuple5<A, B, C, D, E> t5(A, B, C, D, E)"], ["<A, B, C, D, E, F> org.mapdb.Fun$Tuple6<A, B, C, D, E, F>", "org.mapdb.Fun.t6(A, B, C, D, E, F)", "public static <A, B, C, D, E, F> org.mapdb.Fun$Tuple6<A, B, C, D, E, F> t6(A, B, C, D, E, F)"], ["boolean", "org.mapdb.Fun.eq(java.lang.Object, java.lang.Object)", "public static boolean eq(java.lang.Object, java.lang.Object)"], ["long", "org.mapdb.Fun.roundUp(long, long)", "public static long roundUp(long, long)"], ["<K, V> org.mapdb.Fun$Function1<K, org.mapdb.Fun$Tuple2<K, V>>", "org.mapdb.Fun.extractKey()", "public static <K, V> org.mapdb.Fun$Function1<K, org.mapdb.Fun$Tuple2<K, V>> extractKey()"], ["<K, V> org.mapdb.Fun$Function1<V, org.mapdb.Fun$Tuple2<K, V>>", "org.mapdb.Fun.extractValue()", "public static <K, V> org.mapdb.Fun$Function1<V, org.mapdb.Fun$Tuple2<K, V>> extractValue()"], ["<K> org.mapdb.Fun$Function1<K, K>", "org.mapdb.Fun.extractNoTransform()", "public static <K> org.mapdb.Fun$Function1<K, K> extractNoTransform()"], ["<K2, K1> java.lang.Iterable<K1>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple2<K2, K1>>, K2)", "public static <K2, K1> java.lang.Iterable<K1> filter(java.util.NavigableSet<org.mapdb.Fun$Tuple2<K2, K1>>, K2)"], ["<K2, K1> java.lang.Iterable<K1>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple2<K2, K1>>, K2, boolean, K2, boolean)", "public static <K2, K1> java.lang.Iterable<K1> filter(java.util.NavigableSet<org.mapdb.Fun$Tuple2<K2, K1>>, K2, boolean, K2, boolean)"], ["<A, B, C> java.lang.Iterable<C>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple3<A, B, C>>, A, B)", "public static <A, B, C> java.lang.Iterable<C> filter(java.util.NavigableSet<org.mapdb.Fun$Tuple3<A, B, C>>, A, B)"], ["<A, B, C, D> java.lang.Iterable<D>", "org.mapdb.Fun.filter(java.util.NavigableSet<org.mapdb.Fun$Tuple4<A, B, C, D>>, A, B, C)", "public static <A, B, C, D> java.lang.Iterable<D> filter(java.util.NavigableSet<org.mapdb.Fun$Tuple4<A, B, C, D>>, A, B, C)"], ["void", "org.mapdb.HTreeMap$1.run()", "public void run()"], ["void", "org.mapdb.HTreeMap$2.serialize(java.io.DataOutput, org.mapdb.HTreeMap$LinkedNode<K, V>)", "public void serialize(java.io.DataOutput, org.mapdb.HTreeMap$LinkedNode<K, V>) throws java.io.IOException"], ["org.mapdb.HTreeMap$LinkedNode<K, V>", "org.mapdb.HTreeMap$2.deserialize(java.io.DataInput, int)", "public org.mapdb.HTreeMap$LinkedNode<K, V> deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.HTreeMap$2.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.HTreeMap$2.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.HTreeMap$2.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.HTreeMap$3.serialize(java.io.DataOutput, long[][])", "public void serialize(java.io.DataOutput, long[][]) throws java.io.IOException"], ["long[][]", "org.mapdb.HTreeMap$3.deserialize(java.io.DataInput, int)", "public long[][] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.HTreeMap$3.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.HTreeMap$3.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.HTreeMap$3.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["int", "org.mapdb.HTreeMap$4.size()", "public int size()"], ["boolean", "org.mapdb.HTreeMap$4.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.HTreeMap$4.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<V>", "org.mapdb.HTreeMap$4.iterator()", "public java.util.Iterator<V> iterator()"], ["int", "org.mapdb.HTreeMap$5.size()", "public int size()"], ["boolean", "org.mapdb.HTreeMap$5.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.HTreeMap$5.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap$5.iterator()", "public java.util.Iterator<java.util.Map$Entry<K, V>> iterator()"], ["boolean", "org.mapdb.HTreeMap$5.add(java.util.Map$Entry<K, V>)", "public boolean add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.HTreeMap$5.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$5.clear()", "public void clear()"], ["boolean", "org.mapdb.HTreeMap$5.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["K", "org.mapdb.HTreeMap$Entry2.getKey()", "public K getKey()"], ["V", "org.mapdb.HTreeMap$Entry2.getValue()", "public V getValue()"], ["V", "org.mapdb.HTreeMap$Entry2.setValue(V)", "public V setValue(V)"], ["boolean", "org.mapdb.HTreeMap$Entry2.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.HTreeMap$Entry2.hashCode()", "public int hashCode()"], ["java.util.Map$Entry<K, V>", "org.mapdb.HTreeMap$EntryIterator.next()", "public java.util.Map$Entry<K, V> next()"], ["java.lang.Object", "org.mapdb.HTreeMap$EntryIterator.next()", "public java.lang.Object next()"], ["void", "org.mapdb.HTreeMap$ExpireLinkNode$1.serialize(java.io.DataOutput, org.mapdb.HTreeMap$ExpireLinkNode)", "public void serialize(java.io.DataOutput, org.mapdb.HTreeMap$ExpireLinkNode) throws java.io.IOException"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode$1.deserialize(java.io.DataInput, int)", "public org.mapdb.HTreeMap$ExpireLinkNode deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.HTreeMap$ExpireLinkNode$1.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.HTreeMap$ExpireLinkNode$1.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.HTreeMap$ExpireLinkNode$1.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode(long, long, long, long, int)", "public org.mapdb.HTreeMap$ExpireLinkNode(long, long, long, long, int)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode.copyNext(long)", "public org.mapdb.HTreeMap$ExpireLinkNode copyNext(long)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode.copyPrev(long)", "public org.mapdb.HTreeMap$ExpireLinkNode copyPrev(long)"], ["org.mapdb.HTreeMap$ExpireLinkNode", "org.mapdb.HTreeMap$ExpireLinkNode.copyTime(long)", "public org.mapdb.HTreeMap$ExpireLinkNode copyTime(long)"], ["org.mapdb.HTreeMap$ExpireRunnable", "org.mapdb.HTreeMap$ExpireRunnable(org.mapdb.HTreeMap)", "public org.mapdb.HTreeMap$ExpireRunnable(org.mapdb.HTreeMap)"], ["void", "org.mapdb.HTreeMap$ExpireRunnable.run()", "public void run()"], ["void", "org.mapdb.HTreeMap$HashIterator.remove()", "public void remove()"], ["boolean", "org.mapdb.HTreeMap$HashIterator.hasNext()", "public boolean hasNext()"], ["K", "org.mapdb.HTreeMap$KeyIterator.next()", "public K next()"], ["org.mapdb.HTreeMap$KeySet", "org.mapdb.HTreeMap$KeySet(org.mapdb.HTreeMap)", "public org.mapdb.HTreeMap$KeySet(org.mapdb.HTreeMap)"], ["int", "org.mapdb.HTreeMap$KeySet.size()", "public int size()"], ["long", "org.mapdb.HTreeMap$KeySet.sizeLong()", "public long sizeLong()"], ["boolean", "org.mapdb.HTreeMap$KeySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.HTreeMap$KeySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<K>", "org.mapdb.HTreeMap$KeySet.iterator()", "public java.util.Iterator<K> iterator()"], ["boolean", "org.mapdb.HTreeMap$KeySet.add(K)", "public boolean add(K)"], ["boolean", "org.mapdb.HTreeMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$KeySet.clear()", "public void clear()"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.HTreeMap$KeySet.parent()", "public org.mapdb.HTreeMap<K, V> parent()"], ["int", "org.mapdb.HTreeMap$KeySet.hashCode()", "public int hashCode()"], ["org.mapdb.HTreeMap$LinkedNode", "org.mapdb.HTreeMap$LinkedNode(long, long, K, V)", "public org.mapdb.HTreeMap$LinkedNode(long, long, K, V)"], ["V", "org.mapdb.HTreeMap$ValueIterator.next()", "public V next()"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap(org.mapdb.Engine, long, int, long[], org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, long, long, long, long, long, long[], long[], org.mapdb.Fun$Function1<V, K>, org.mapdb.Hasher, boolean)", "public org.mapdb.HTreeMap(org.mapdb.Engine, long, int, long[], org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, long, long, long, long, long, long[], long[], org.mapdb.Fun$Function1<V, K>, org.mapdb.Hasher, boolean)"], ["boolean", "org.mapdb.HTreeMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["int", "org.mapdb.HTreeMap.size()", "public int size()"], ["long", "org.mapdb.HTreeMap.sizeLong()", "public long sizeLong()"], ["boolean", "org.mapdb.HTreeMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.mapdb.HTreeMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.mapdb.HTreeMap.getPeek(java.lang.Object)", "public V getPeek(java.lang.Object)"], ["V", "org.mapdb.HTreeMap.put(K, V)", "public V put(K, V)"], ["V", "org.mapdb.HTreeMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap.clear()", "public void clear()"], ["boolean", "org.mapdb.HTreeMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["java.util.Set<K>", "org.mapdb.HTreeMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.mapdb.HTreeMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["V", "org.mapdb.HTreeMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.mapdb.HTreeMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.mapdb.HTreeMap.replace(K, V)", "public V replace(K, V)"], ["long", "org.mapdb.HTreeMap.getMaxExpireTime()", "public long getMaxExpireTime()"], ["long", "org.mapdb.HTreeMap.getMinExpireTime()", "public long getMinExpireTime()"], ["java.util.Map<K, V>", "org.mapdb.HTreeMap.snapshot()", "public java.util.Map<K, V> snapshot()"], ["void", "org.mapdb.HTreeMap.modificationListenerAdd(org.mapdb.Bind$MapListener<K, V>)", "public void modificationListenerAdd(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.HTreeMap.modificationListenerRemove(org.mapdb.Bind$MapListener<K, V>)", "public void modificationListenerRemove(org.mapdb.Bind$MapListener<K, V>)"], ["void", "org.mapdb.HTreeMap.close()", "public void close()"], ["org.mapdb.Engine", "org.mapdb.HTreeMap.getEngine()", "public org.mapdb.Engine getEngine()"], ["int", "org.mapdb.Hasher$1.hashCode(java.lang.Object)", "public final int hashCode(java.lang.Object)"], ["boolean", "org.mapdb.Hasher$1.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$2.hashCode(byte[])", "public final int hashCode(byte[])"], ["boolean", "org.mapdb.Hasher$2.equals(byte[], byte[])", "public boolean equals(byte[], byte[])"], ["boolean", "org.mapdb.Hasher$2.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$2.hashCode(java.lang.Object)", "public int hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$3.hashCode(char[])", "public final int hashCode(char[])"], ["boolean", "org.mapdb.Hasher$3.equals(char[], char[])", "public boolean equals(char[], char[])"], ["boolean", "org.mapdb.Hasher$3.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$3.hashCode(java.lang.Object)", "public int hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$4.hashCode(int[])", "public final int hashCode(int[])"], ["boolean", "org.mapdb.Hasher$4.equals(int[], int[])", "public boolean equals(int[], int[])"], ["boolean", "org.mapdb.Hasher$4.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$4.hashCode(java.lang.Object)", "public int hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$5.hashCode(long[])", "public final int hashCode(long[])"], ["boolean", "org.mapdb.Hasher$5.equals(long[], long[])", "public boolean equals(long[], long[])"], ["boolean", "org.mapdb.Hasher$5.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$5.hashCode(java.lang.Object)", "public int hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$6.hashCode(double[])", "public final int hashCode(double[])"], ["boolean", "org.mapdb.Hasher$6.equals(double[], double[])", "public boolean equals(double[], double[])"], ["boolean", "org.mapdb.Hasher$6.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$6.hashCode(java.lang.Object)", "public int hashCode(java.lang.Object)"], ["int", "org.mapdb.Hasher$7.hashCode(java.lang.Object[])", "public final int hashCode(java.lang.Object[])"], ["boolean", "org.mapdb.Hasher$7.equals(java.lang.Object[], java.lang.Object[])", "public boolean equals(java.lang.Object[], java.lang.Object[])"], ["boolean", "org.mapdb.Hasher$7.equals(java.lang.Object, java.lang.Object)", "public boolean equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.Hasher$7.hashCode(java.lang.Object)", "public int hashCode(java.lang.Object)"], ["boolean", "org.mapdb.LongConcurrentHashMap$HashIterator.hasNext()", "public boolean hasNext()"], ["void", "org.mapdb.LongConcurrentHashMap$HashIterator.remove()", "public void remove()"], ["java.lang.Long", "org.mapdb.LongConcurrentHashMap$KeyIterator.next()", "public java.lang.Long next()"], ["java.lang.Object", "org.mapdb.LongConcurrentHashMap$KeyIterator.next()", "public java.lang.Object next()"], ["boolean", "org.mapdb.LongConcurrentHashMap$MapIterator.moveToNext()", "public boolean moveToNext()"], ["long", "org.mapdb.LongConcurrentHashMap$MapIterator.key()", "public long key()"], ["V", "org.mapdb.LongConcurrentHashMap$MapIterator.value()", "public V value()"], ["V", "org.mapdb.LongConcurrentHashMap$ValueIterator.next()", "public V next()"], ["org.mapdb.LongConcurrentHashMap", "org.mapdb.LongConcurrentHashMap(int, float, int)", "public org.mapdb.LongConcurrentHashMap(int, float, int)"], ["org.mapdb.LongConcurrentHashMap", "org.mapdb.LongConcurrentHashMap(int)", "public org.mapdb.LongConcurrentHashMap(int)"], ["org.mapdb.LongConcurrentHashMap", "org.mapdb.LongConcurrentHashMap()", "public org.mapdb.LongConcurrentHashMap()"], ["boolean", "org.mapdb.LongConcurrentHashMap.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.LongConcurrentHashMap.size()", "public int size()"], ["java.util.Iterator<V>", "org.mapdb.LongConcurrentHashMap.valuesIterator()", "public java.util.Iterator<V> valuesIterator()"], ["org.mapdb.LongMap$LongMapIterator<V>", "org.mapdb.LongConcurrentHashMap.longMapIterator()", "public org.mapdb.LongMap$LongMapIterator<V> longMapIterator()"], ["V", "org.mapdb.LongConcurrentHashMap.get(long)", "public V get(long)"], ["boolean", "org.mapdb.LongConcurrentHashMap.containsKey(long)", "public boolean containsKey(long)"], ["boolean", "org.mapdb.LongConcurrentHashMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.mapdb.LongConcurrentHashMap.put(long, V)", "public V put(long, V)"], ["V", "org.mapdb.LongConcurrentHashMap.putIfAbsent(long, V)", "public V putIfAbsent(long, V)"], ["V", "org.mapdb.LongConcurrentHashMap.remove(long)", "public V remove(long)"], ["boolean", "org.mapdb.LongConcurrentHashMap.remove(long, java.lang.Object)", "public boolean remove(long, java.lang.Object)"], ["boolean", "org.mapdb.LongConcurrentHashMap.replace(long, V, V)", "public boolean replace(long, V, V)"], ["V", "org.mapdb.LongConcurrentHashMap.replace(long, V)", "public V replace(long, V)"], ["void", "org.mapdb.LongConcurrentHashMap.clear()", "public void clear()"], ["boolean", "org.mapdb.LongConcurrentLRUMap$1.hasNext()", "public boolean hasNext()"], ["V", "org.mapdb.LongConcurrentLRUMap$1.next()", "public V next()"], ["void", "org.mapdb.LongConcurrentLRUMap$1.remove()", "public void remove()"], ["boolean", "org.mapdb.LongConcurrentLRUMap$2.moveToNext()", "public boolean moveToNext()"], ["long", "org.mapdb.LongConcurrentLRUMap$2.key()", "public long key()"], ["V", "org.mapdb.LongConcurrentLRUMap$2.value()", "public V value()"], ["void", "org.mapdb.LongConcurrentLRUMap$2.remove()", "public void remove()"], ["org.mapdb.LongConcurrentLRUMap$CacheEntry", "org.mapdb.LongConcurrentLRUMap$CacheEntry(long, V, long)", "public org.mapdb.LongConcurrentLRUMap$CacheEntry(long, V, long)"], ["int", "org.mapdb.LongConcurrentLRUMap$CacheEntry.compareTo(org.mapdb.LongConcurrentLRUMap$CacheEntry<V>)", "public int compareTo(org.mapdb.LongConcurrentLRUMap$CacheEntry<V>)"], ["int", "org.mapdb.LongConcurrentLRUMap$CacheEntry.hashCode()", "public int hashCode()"], ["boolean", "org.mapdb.LongConcurrentLRUMap$CacheEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.mapdb.LongConcurrentLRUMap$CacheEntry.toString()", "public java.lang.String toString()"], ["int", "org.mapdb.LongConcurrentLRUMap$CacheEntry.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.mapdb.LongConcurrentLRUMap$CacheEntry<V>", "org.mapdb.LongConcurrentLRUMap$PQueue.myInsertWithOverflow(org.mapdb.LongConcurrentLRUMap$CacheEntry<V>)", "public org.mapdb.LongConcurrentLRUMap$CacheEntry<V> myInsertWithOverflow(org.mapdb.LongConcurrentLRUMap$CacheEntry<V>)"], ["org.mapdb.LongConcurrentLRUMap$PriorityQueue", "org.mapdb.LongConcurrentLRUMap$PriorityQueue(int)", "public org.mapdb.LongConcurrentLRUMap$PriorityQueue(int)"], ["org.mapdb.LongConcurrentLRUMap$PriorityQueue", "org.mapdb.LongConcurrentLRUMap$PriorityQueue(int, boolean)", "public org.mapdb.LongConcurrentLRUMap$PriorityQueue(int, boolean)"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.add(T)", "public final T add(T)"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.insertWithOverflow(T)", "public T insertWithOverflow(T)"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.top()", "public final T top()"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.pop()", "public final T pop()"], ["T", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.updateTop()", "public final T updateTop()"], ["int", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.size()", "public final int size()"], ["void", "org.mapdb.LongConcurrentLRUMap$PriorityQueue.clear()", "public final void clear()"], ["org.mapdb.LongConcurrentLRUMap", "org.mapdb.LongConcurrentLRUMap(int, int, int, int)", "public org.mapdb.LongConcurrentLRUMap(int, int, int, int)"], ["org.mapdb.LongConcurrentLRUMap", "org.mapdb.LongConcurrentLRUMap(int, int)", "public org.mapdb.LongConcurrentLRUMap(int, int)"], ["V", "org.mapdb.LongConcurrentLRUMap.get(long)", "public V get(long)"], ["boolean", "org.mapdb.LongConcurrentLRUMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.mapdb.LongConcurrentLRUMap.remove(long)", "public V remove(long)"], ["V", "org.mapdb.LongConcurrentLRUMap.put(long, V)", "public V put(long, V)"], ["int", "org.mapdb.LongConcurrentLRUMap.size()", "public int size()"], ["java.util.Iterator<V>", "org.mapdb.LongConcurrentLRUMap.valuesIterator()", "public java.util.Iterator<V> valuesIterator()"], ["org.mapdb.LongMap$LongMapIterator<V>", "org.mapdb.LongConcurrentLRUMap.longMapIterator()", "public org.mapdb.LongMap$LongMapIterator<V> longMapIterator()"], ["void", "org.mapdb.LongConcurrentLRUMap.clear()", "public void clear()"], ["org.mapdb.LongMap<org.mapdb.LongConcurrentLRUMap$CacheEntry<V>>", "org.mapdb.LongConcurrentLRUMap.getMap()", "public org.mapdb.LongMap<org.mapdb.LongConcurrentLRUMap$CacheEntry<V>> getMap()"], ["boolean", "org.mapdb.LongHashMap$AbstractMapIterator.hasNext()", "public boolean hasNext()"], ["void", "org.mapdb.LongHashMap$AbstractMapIterator.remove()", "public final void remove()"], ["org.mapdb.LongHashMap$Entry", "org.mapdb.LongHashMap$Entry(long, int)", "public org.mapdb.LongHashMap$Entry(long, int)"], ["boolean", "org.mapdb.LongHashMap$EntryIterator.moveToNext()", "public boolean moveToNext()"], ["long", "org.mapdb.LongHashMap$EntryIterator.key()", "public long key()"], ["V", "org.mapdb.LongHashMap$EntryIterator.value()", "public V value()"], ["V", "org.mapdb.LongHashMap$ValueIterator.next()", "public V next()"], ["org.mapdb.LongHashMap", "org.mapdb.LongHashMap()", "public org.mapdb.LongHashMap()"], ["org.mapdb.LongHashMap", "org.mapdb.LongHashMap(int)", "public org.mapdb.LongHashMap(int)"], ["org.mapdb.LongHashMap", "org.mapdb.LongHashMap(int, float)", "public org.mapdb.LongHashMap(int, float)"], ["void", "org.mapdb.LongHashMap.clear()", "public void clear()"], ["V", "org.mapdb.LongHashMap.get(long)", "public V get(long)"], ["boolean", "org.mapdb.LongHashMap.isEmpty()", "public boolean isEmpty()"], ["V", "org.mapdb.LongHashMap.put(long, V)", "public V put(long, V)"], ["V", "org.mapdb.LongHashMap.remove(long)", "public V remove(long)"], ["int", "org.mapdb.LongHashMap.size()", "public int size()"], ["java.util.Iterator<V>", "org.mapdb.LongHashMap.valuesIterator()", "public java.util.Iterator<V> valuesIterator()"], ["org.mapdb.LongMap$LongMapIterator<V>", "org.mapdb.LongHashMap.longMapIterator()", "public org.mapdb.LongMap$LongMapIterator<V> longMapIterator()"], ["int", "org.mapdb.LongHashMap.longHash(long)", "public static int longHash(long)"], ["int", "org.mapdb.LongHashMap.intHash(int)", "public static int intHash(int)"], ["org.mapdb.LongMap", "org.mapdb.LongMap()", "public org.mapdb.LongMap()"], ["java.lang.String", "org.mapdb.LongMap.toString()", "public java.lang.String toString()"], ["boolean", "org.mapdb.Pump$1.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.mapdb.Pump$1.next()", "public java.lang.Object next()"], ["void", "org.mapdb.Pump$1.remove()", "public void remove()"], ["boolean", "org.mapdb.Pump$2.hasNext()", "public boolean hasNext()"], ["E", "org.mapdb.Pump$2.next()", "public E next()"], ["void", "org.mapdb.Pump$2.remove()", "public void remove()"], ["boolean", "org.mapdb.Pump$3.hasNext()", "public boolean hasNext()"], ["E", "org.mapdb.Pump$3.next()", "public E next()"], ["void", "org.mapdb.Pump$3.remove()", "public void remove()"], ["boolean", "org.mapdb.Pump$4.hasNext()", "public boolean hasNext()"], ["E", "org.mapdb.Pump$4.next()", "public E next()"], ["void", "org.mapdb.Pump$4.remove()", "public void remove()"], ["org.mapdb.Pump", "org.mapdb.Pump()", "public org.mapdb.Pump()"], ["<E> java.util.Iterator<E>", "org.mapdb.Pump.sort(java.util.Iterator<E>, boolean, int, java.util.Comparator, org.mapdb.Serializer)", "public static <E> java.util.Iterator<E> sort(java.util.Iterator<E>, boolean, int, java.util.Comparator, org.mapdb.Serializer)"], ["<E> java.util.Iterator<E>", "org.mapdb.Pump.sort(java.util.Comparator, boolean, java.util.Iterator...)", "public static <E> java.util.Iterator<E> sort(java.util.Comparator, boolean, java.util.Iterator...)"], ["<E> java.util.Iterator<E>", "org.mapdb.Pump.merge(java.util.Iterator...)", "public static <E> java.util.Iterator<E> merge(java.util.Iterator...)"], ["<E, K, V> long", "org.mapdb.Pump.buildTreeMap(java.util.Iterator<E>, org.mapdb.Engine, org.mapdb.Fun$Function1<K, E>, org.mapdb.Fun$Function1<V, E>, boolean, int, boolean, long, org.mapdb.BTreeKeySerializer<K>, org.mapdb.Serializer<V>, java.util.Comparator)", "public static <E, K, V> long buildTreeMap(java.util.Iterator<E>, org.mapdb.Engine, org.mapdb.Fun$Function1<K, E>, org.mapdb.Fun$Function1<V, E>, boolean, int, boolean, long, org.mapdb.BTreeKeySerializer<K>, org.mapdb.Serializer<V>, java.util.Comparator)"], ["org.mapdb.Queues$CircularQueue", "org.mapdb.Queues$CircularQueue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, long, long)", "public org.mapdb.Queues$CircularQueue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, long, long)"], ["boolean", "org.mapdb.Queues$CircularQueue.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["void", "org.mapdb.Queues$CircularQueue.clear()", "public void clear()"], ["E", "org.mapdb.Queues$CircularQueue.poll()", "public E poll()"], ["E", "org.mapdb.Queues$CircularQueue.peek()", "public E peek()"], ["org.mapdb.Queues$Queue", "org.mapdb.Queues$Queue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, long, boolean)", "public org.mapdb.Queues$Queue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, long, boolean)"], ["boolean", "org.mapdb.Queues$Queue.add(E)", "public boolean add(E)"], ["org.mapdb.Queues$SimpleQueue$Node", "org.mapdb.Queues$SimpleQueue$Node(long, E)", "public org.mapdb.Queues$SimpleQueue$Node(long, E)"], ["boolean", "org.mapdb.Queues$SimpleQueue$Node.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Queues$SimpleQueue$Node.hashCode()", "public int hashCode()"], ["org.mapdb.Queues$SimpleQueue$NodeSerializer", "org.mapdb.Queues$SimpleQueue$NodeSerializer(org.mapdb.Serializer<E>)", "public org.mapdb.Queues$SimpleQueue$NodeSerializer(org.mapdb.Serializer<E>)"], ["void", "org.mapdb.Queues$SimpleQueue$NodeSerializer.serialize(java.io.DataOutput, org.mapdb.Queues$SimpleQueue$Node<E>)", "public void serialize(java.io.DataOutput, org.mapdb.Queues$SimpleQueue$Node<E>) throws java.io.IOException"], ["org.mapdb.Queues$SimpleQueue$Node<E>", "org.mapdb.Queues$SimpleQueue$NodeSerializer.deserialize(java.io.DataInput, int)", "public org.mapdb.Queues$SimpleQueue$Node<E> deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Queues$SimpleQueue$NodeSerializer.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Queues$SimpleQueue$NodeSerializer.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Queues$SimpleQueue$NodeSerializer.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["org.mapdb.Queues$SimpleQueue", "org.mapdb.Queues$SimpleQueue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, boolean)", "public org.mapdb.Queues$SimpleQueue(org.mapdb.Engine, org.mapdb.Serializer<E>, long, boolean)"], ["void", "org.mapdb.Queues$SimpleQueue.close()", "public void close()"], ["E", "org.mapdb.Queues$SimpleQueue.peek()", "public E peek()"], ["E", "org.mapdb.Queues$SimpleQueue.poll()", "public E poll()"], ["void", "org.mapdb.Queues$SimpleQueue.clear()", "public void clear()"], ["E", "org.mapdb.Queues$SimpleQueue.remove()", "public E remove()"], ["E", "org.mapdb.Queues$SimpleQueue.element()", "public E element()"], ["boolean", "org.mapdb.Queues$SimpleQueue.offer(E)", "public boolean offer(E)"], ["void", "org.mapdb.Queues$SimpleQueue.put(E)", "public void put(E) throws java.lang.InterruptedException"], ["boolean", "org.mapdb.Queues$SimpleQueue.offer(E, long, java.util.concurrent.TimeUnit)", "public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "org.mapdb.Queues$SimpleQueue.take()", "public E take() throws java.lang.InterruptedException"], ["E", "org.mapdb.Queues$SimpleQueue.poll(long, java.util.concurrent.TimeUnit)", "public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["int", "org.mapdb.Queues$SimpleQueue.drainTo(java.util.Collection<? super E>)", "public int drainTo(java.util.Collection<? super E>)"], ["int", "org.mapdb.Queues$SimpleQueue.drainTo(java.util.Collection<? super E>, int)", "public int drainTo(java.util.Collection<? super E>, int)"], ["int", "org.mapdb.Queues$SimpleQueue.remainingCapacity()", "public int remainingCapacity()"], ["boolean", "org.mapdb.Queues$SimpleQueue.isEmpty()", "public boolean isEmpty()"], ["int", "org.mapdb.Queues$SimpleQueue.size()", "public int size()"], ["boolean", "org.mapdb.Queues$SimpleQueue.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<E>", "org.mapdb.Queues$SimpleQueue.iterator()", "public java.util.Iterator<E> iterator()"], ["java.lang.Object[]", "org.mapdb.Queues$SimpleQueue.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.mapdb.Queues$SimpleQueue.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.mapdb.Queues$SimpleQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.mapdb.Queues$SimpleQueue.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.mapdb.Queues$SimpleQueue.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["boolean", "org.mapdb.Queues$SimpleQueue.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.mapdb.Queues$SimpleQueue.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["org.mapdb.Queues$Stack", "org.mapdb.Queues$Stack(org.mapdb.Engine, org.mapdb.Serializer<E>, long, boolean)", "public org.mapdb.Queues$Stack(org.mapdb.Engine, org.mapdb.Serializer<E>, long, boolean)"], ["boolean", "org.mapdb.Queues$Stack.add(E)", "public boolean add(E)"], ["void", "org.mapdb.Serializer$1.serialize(java.io.DataOutput, java.lang.String)", "public void serialize(java.io.DataOutput, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.Serializer$1.deserialize(java.io.DataInput, int)", "public java.lang.String deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$1.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$1.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$1.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$10.serialize(java.io.DataOutput, byte[])", "public void serialize(java.io.DataOutput, byte[]) throws java.io.IOException"], ["byte[]", "org.mapdb.Serializer$10.deserialize(java.io.DataInput, int)", "public byte[] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$10.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$10.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$10.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$11.serialize(java.io.DataOutput, char[])", "public void serialize(java.io.DataOutput, char[]) throws java.io.IOException"], ["char[]", "org.mapdb.Serializer$11.deserialize(java.io.DataInput, int)", "public char[] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$11.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$11.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$11.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$12.serialize(java.io.DataOutput, int[])", "public void serialize(java.io.DataOutput, int[]) throws java.io.IOException"], ["int[]", "org.mapdb.Serializer$12.deserialize(java.io.DataInput, int)", "public int[] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$12.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$12.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$12.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$13.serialize(java.io.DataOutput, long[])", "public void serialize(java.io.DataOutput, long[]) throws java.io.IOException"], ["long[]", "org.mapdb.Serializer$13.deserialize(java.io.DataInput, int)", "public long[] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$13.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$13.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$13.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$14.serialize(java.io.DataOutput, double[])", "public void serialize(java.io.DataOutput, double[]) throws java.io.IOException"], ["double[]", "org.mapdb.Serializer$14.deserialize(java.io.DataInput, int)", "public double[] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$14.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$14.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$14.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$15.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.Serializer$15.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$15.fixedSize()", "public int fixedSize()"], ["void", "org.mapdb.Serializer$16.serialize(java.io.DataOutput, java.util.UUID)", "public void serialize(java.io.DataOutput, java.util.UUID) throws java.io.IOException"], ["java.util.UUID", "org.mapdb.Serializer$16.deserialize(java.io.DataInput, int)", "public java.util.UUID deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$16.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$16.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$16.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$2.serialize(java.io.DataOutput, java.lang.String)", "public void serialize(java.io.DataOutput, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.Serializer$2.deserialize(java.io.DataInput, int)", "public java.lang.String deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$2.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$2.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$2.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$3.serialize(java.io.DataOutput, java.lang.String)", "public void serialize(java.io.DataOutput, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.Serializer$3.deserialize(java.io.DataInput, int)", "public java.lang.String deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$3.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$3.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$3.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$4.serialize(java.io.DataOutput, java.lang.String)", "public void serialize(java.io.DataOutput, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.mapdb.Serializer$4.deserialize(java.io.DataInput, int)", "public java.lang.String deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$4.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$4.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$4.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$5.serialize(java.io.DataOutput, java.lang.Long)", "public void serialize(java.io.DataOutput, java.lang.Long) throws java.io.IOException"], ["java.lang.Long", "org.mapdb.Serializer$5.deserialize(java.io.DataInput, int)", "public java.lang.Long deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$5.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$5.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$5.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$6.serialize(java.io.DataOutput, java.lang.Integer)", "public void serialize(java.io.DataOutput, java.lang.Integer) throws java.io.IOException"], ["java.lang.Integer", "org.mapdb.Serializer$6.deserialize(java.io.DataInput, int)", "public java.lang.Integer deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$6.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$6.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$6.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$7.serialize(java.io.DataOutput, java.lang.Boolean)", "public void serialize(java.io.DataOutput, java.lang.Boolean) throws java.io.IOException"], ["java.lang.Boolean", "org.mapdb.Serializer$7.deserialize(java.io.DataInput, int)", "public java.lang.Boolean deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$7.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$7.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$7.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.Serializer$8.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.Serializer$8.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$8.fixedSize()", "public int fixedSize()"], ["void", "org.mapdb.Serializer$9.serialize(java.io.DataOutput, byte[])", "public void serialize(java.io.DataOutput, byte[]) throws java.io.IOException"], ["byte[]", "org.mapdb.Serializer$9.deserialize(java.io.DataInput, int)", "public byte[] deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.Serializer$9.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.Serializer$9.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Serializer$9.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["org.mapdb.Serializer$CompressionWrapper", "org.mapdb.Serializer$CompressionWrapper(org.mapdb.Serializer<E>)", "public org.mapdb.Serializer$CompressionWrapper(org.mapdb.Serializer<E>)"], ["void", "org.mapdb.Serializer$CompressionWrapper.serialize(java.io.DataOutput, E)", "public void serialize(java.io.DataOutput, E) throws java.io.IOException"], ["E", "org.mapdb.Serializer$CompressionWrapper.deserialize(java.io.DataInput, int)", "public E deserialize(java.io.DataInput, int) throws java.io.IOException"], ["boolean", "org.mapdb.Serializer$CompressionWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.mapdb.Serializer$CompressionWrapper.hashCode()", "public int hashCode()"], ["int", "org.mapdb.Serializer$CompressionWrapper.fixedSize()", "public int fixedSize()"], ["org.mapdb.SerializerBase$FastArrayList", "org.mapdb.SerializerBase$FastArrayList()", "public org.mapdb.SerializerBase$FastArrayList()"], ["void", "org.mapdb.SerializerBase$FastArrayList.add(K)", "public void add(K)"], ["int", "org.mapdb.SerializerBase$FastArrayList.identityIndexOf(java.lang.Object)", "public int identityIndexOf(java.lang.Object)"], ["org.mapdb.SerializerBase", "org.mapdb.SerializerBase()", "public org.mapdb.SerializerBase()"], ["void", "org.mapdb.SerializerBase.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["void", "org.mapdb.SerializerBase.serialize(java.io.DataOutput, java.lang.Object, org.mapdb.SerializerBase$FastArrayList<java.lang.Object>)", "public void serialize(java.io.DataOutput, java.lang.Object, org.mapdb.SerializerBase$FastArrayList<java.lang.Object>) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.SerializerBase.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.SerializerBase.deserialize(java.io.DataInput, org.mapdb.SerializerBase$FastArrayList<java.lang.Object>)", "public java.lang.Object deserialize(java.io.DataInput, org.mapdb.SerializerBase$FastArrayList<java.lang.Object>) throws java.io.IOException"], ["void", "org.mapdb.SerializerBase.assertSerializable(java.lang.Object)", "public static void assertSerializable(java.lang.Object)"], ["int", "org.mapdb.SerializerBase.fixedSize()", "public int fixedSize()"], ["void", "org.mapdb.SerializerPojo$1.serialize(java.io.DataOutput, java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>)", "public void serialize(java.io.DataOutput, java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>) throws java.io.IOException"], ["java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>", "org.mapdb.SerializerPojo$1.deserialize(java.io.DataInput, int)", "public java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo> deserialize(java.io.DataInput, int) throws java.io.IOException"], ["int", "org.mapdb.SerializerPojo$1.fixedSize()", "public int fixedSize()"], ["java.lang.Object", "org.mapdb.SerializerPojo$1.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.SerializerPojo$1.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["org.mapdb.SerializerPojo$ClassInfo", "org.mapdb.SerializerPojo$ClassInfo(java.lang.String, org.mapdb.SerializerPojo$FieldInfo[], boolean, boolean)", "public org.mapdb.SerializerPojo$ClassInfo(java.lang.String, org.mapdb.SerializerPojo$FieldInfo[], boolean, boolean)"], ["int", "org.mapdb.SerializerPojo$ClassInfo.getFieldId(java.lang.String)", "public int getFieldId(java.lang.String)"], ["int", "org.mapdb.SerializerPojo$ClassInfo.addFieldInfo(org.mapdb.SerializerPojo$FieldInfo)", "public int addFieldInfo(org.mapdb.SerializerPojo$FieldInfo)"], ["java.io.ObjectStreamField[]", "org.mapdb.SerializerPojo$ClassInfo.getObjectStreamFields()", "public java.io.ObjectStreamField[] getObjectStreamFields()"], ["void", "org.mapdb.SerializerPojo$ClassInfo.setObjectStreamFields(java.io.ObjectStreamField[])", "public void setObjectStreamFields(java.io.ObjectStreamField[])"], ["java.lang.String", "org.mapdb.SerializerPojo$ClassInfo.toString()", "public java.lang.String toString()"], ["org.mapdb.SerializerPojo$FieldInfo", "org.mapdb.SerializerPojo$FieldInfo(java.lang.String, boolean, java.lang.String, java.lang.Class<?>)", "public org.mapdb.SerializerPojo$FieldInfo(java.lang.String, boolean, java.lang.String, java.lang.Class<?>)"], ["org.mapdb.SerializerPojo$FieldInfo", "org.mapdb.SerializerPojo$FieldInfo(java.io.ObjectStreamField, java.lang.Class<?>)", "public org.mapdb.SerializerPojo$FieldInfo(java.io.ObjectStreamField, java.lang.Class<?>)"], ["org.mapdb.SerializerPojo", "org.mapdb.SerializerPojo(java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>)", "public org.mapdb.SerializerPojo(java.util.concurrent.CopyOnWriteArrayList<org.mapdb.SerializerPojo$ClassInfo>)"], ["void", "org.mapdb.SerializerPojo.registerClass(java.lang.Class<?>)", "public void registerClass(java.lang.Class<?>) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.SerializerPojo.getFieldValue(org.mapdb.SerializerPojo$FieldInfo, java.lang.Object)", "public java.lang.Object getFieldValue(org.mapdb.SerializerPojo$FieldInfo, java.lang.Object)"], ["void", "org.mapdb.SerializerPojo.setFieldValue(org.mapdb.SerializerPojo$FieldInfo, java.lang.Object, java.lang.Object)", "public void setFieldValue(org.mapdb.SerializerPojo$FieldInfo, java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.SerializerPojo.containsClass(java.lang.Class<?>)", "public boolean containsClass(java.lang.Class<?>)"], ["int", "org.mapdb.SerializerPojo.getClassId(java.lang.Class<?>)", "public int getClassId(java.lang.Class<?>)"], ["boolean", "org.mapdb.SerializerPojo.hasUnsavedChanges()", "public boolean hasUnsavedChanges()"], ["void", "org.mapdb.SerializerPojo.save(org.mapdb.Engine)", "public void save(org.mapdb.Engine)"], ["<A, R> void", "org.mapdb.SerializerPojo.serializerTransformAdd(org.mapdb.Fun$Function1<A, R>, org.mapdb.Fun$Function1<R, A>)", "public <A, R> void serializerTransformAdd(org.mapdb.Fun$Function1<A, R>, org.mapdb.Fun$Function1<R, A>)"], ["<A, R> void", "org.mapdb.SerializerPojo.serializerTransformRemove(org.mapdb.Fun$Function1<A, R>, org.mapdb.Fun$Function1<R, A>)", "public <A, R> void serializerTransformRemove(org.mapdb.Fun$Function1<A, R>, org.mapdb.Fun$Function1<R, A>)"], ["void", "org.mapdb.SerializerPojo.serialize(java.io.DataOutput, java.lang.Object)", "public void serialize(java.io.DataOutput, java.lang.Object) throws java.io.IOException"], ["java.lang.Object", "org.mapdb.SerializerPojo.deserialize(java.io.DataInput, int)", "public java.lang.Object deserialize(java.io.DataInput, int) throws java.io.IOException"], ["void", "org.mapdb.Store.printStatistics()", "public void printStatistics()"], ["org.mapdb.SerializerPojo", "org.mapdb.Store.getSerializerPojo()", "public org.mapdb.SerializerPojo getSerializerPojo()"], ["org.mapdb.Store", "org.mapdb.Store.forDB(org.mapdb.DB)", "public static org.mapdb.Store forDB(org.mapdb.DB)"], ["org.mapdb.Store", "org.mapdb.Store.forEngine(org.mapdb.Engine)", "public static org.mapdb.Store forEngine(org.mapdb.Engine)"], ["boolean", "org.mapdb.Store.canSnapshot()", "public boolean canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.Store.snapshot()", "public org.mapdb.Engine snapshot() throws java.lang.UnsupportedOperationException"], ["void", "org.mapdb.Store.closeListenerRegister(java.lang.Runnable)", "public void closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.Store.closeListenerUnregister(java.lang.Runnable)", "public void closeListenerUnregister(java.lang.Runnable)"], ["org.mapdb.StoreAppend", "org.mapdb.StoreAppend(java.io.File, boolean, boolean, boolean, boolean, boolean, boolean, boolean, byte[], boolean)", "public org.mapdb.StoreAppend(java.io.File, boolean, boolean, boolean, boolean, boolean, boolean, boolean, byte[], boolean)"], ["org.mapdb.StoreAppend", "org.mapdb.StoreAppend(java.io.File)", "public org.mapdb.StoreAppend(java.io.File)"], ["long", "org.mapdb.StoreAppend.preallocate()", "public long preallocate()"], ["void", "org.mapdb.StoreAppend.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.StoreAppend.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreAppend.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreAppend.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreAppend.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreAppend.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreAppend.close()", "public void close()"], ["boolean", "org.mapdb.StoreAppend.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.StoreAppend.commit()", "public void commit()"], ["void", "org.mapdb.StoreAppend.rollback()", "public void rollback() throws java.lang.UnsupportedOperationException"], ["boolean", "org.mapdb.StoreAppend.canRollback()", "public boolean canRollback()"], ["boolean", "org.mapdb.StoreAppend.isReadOnly()", "public boolean isReadOnly()"], ["void", "org.mapdb.StoreAppend.clearCache()", "public void clearCache()"], ["void", "org.mapdb.StoreAppend.compact()", "public void compact()"], ["long", "org.mapdb.StoreAppend.getMaxRecid()", "public long getMaxRecid()"], ["java.nio.ByteBuffer", "org.mapdb.StoreAppend.getRaw(long)", "public java.nio.ByteBuffer getRaw(long)"], ["java.util.Iterator<java.lang.Long>", "org.mapdb.StoreAppend.getFreeRecids()", "public java.util.Iterator<java.lang.Long> getFreeRecids()"], ["void", "org.mapdb.StoreAppend.updateRaw(long, java.nio.ByteBuffer)", "public void updateRaw(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.StoreAppend.getSizeLimit()", "public long getSizeLimit()"], ["long", "org.mapdb.StoreAppend.getCurrSize()", "public long getCurrSize()"], ["long", "org.mapdb.StoreAppend.getFreeSize()", "public long getFreeSize()"], ["java.lang.String", "org.mapdb.StoreAppend.calculateStatistics()", "public java.lang.String calculateStatistics()"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect(org.mapdb.Volume$Factory, boolean, boolean, int, boolean, long, boolean, boolean, byte[], boolean, int)", "public org.mapdb.StoreDirect(org.mapdb.Volume$Factory, boolean, boolean, int, boolean, long, boolean, boolean, byte[], boolean, int)"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect(org.mapdb.Volume$Factory)", "public org.mapdb.StoreDirect(org.mapdb.Volume$Factory)"], ["long", "org.mapdb.StoreDirect.preallocate()", "public long preallocate()"], ["void", "org.mapdb.StoreDirect.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.StoreDirect.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreDirect.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreDirect.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreDirect.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreDirect.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreDirect.close()", "public void close()"], ["boolean", "org.mapdb.StoreDirect.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.StoreDirect.commit()", "public void commit()"], ["void", "org.mapdb.StoreDirect.rollback()", "public void rollback() throws java.lang.UnsupportedOperationException"], ["boolean", "org.mapdb.StoreDirect.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.StoreDirect.canRollback()", "public boolean canRollback()"], ["void", "org.mapdb.StoreDirect.clearCache()", "public void clearCache()"], ["void", "org.mapdb.StoreDirect.compact()", "public void compact()"], ["long", "org.mapdb.StoreDirect.getMaxRecid()", "public long getMaxRecid()"], ["java.nio.ByteBuffer", "org.mapdb.StoreDirect.getRaw(long)", "public java.nio.ByteBuffer getRaw(long)"], ["java.util.Iterator<java.lang.Long>", "org.mapdb.StoreDirect.getFreeRecids()", "public java.util.Iterator<java.lang.Long> getFreeRecids()"], ["void", "org.mapdb.StoreDirect.updateRaw(long, java.nio.ByteBuffer)", "public void updateRaw(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.StoreDirect.getSizeLimit()", "public long getSizeLimit()"], ["long", "org.mapdb.StoreDirect.getCurrSize()", "public long getCurrSize()"], ["long", "org.mapdb.StoreDirect.getFreeSize()", "public long getFreeSize()"], ["java.lang.String", "org.mapdb.StoreDirect.calculateStatistics()", "public java.lang.String calculateStatistics()"], ["org.mapdb.StoreHeap", "org.mapdb.StoreHeap()", "public org.mapdb.StoreHeap()"], ["long", "org.mapdb.StoreHeap.preallocate()", "public long preallocate()"], ["void", "org.mapdb.StoreHeap.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.StoreHeap.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreHeap.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreHeap.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreHeap.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreHeap.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreHeap.close()", "public void close()"], ["boolean", "org.mapdb.StoreHeap.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.StoreHeap.commit()", "public void commit()"], ["void", "org.mapdb.StoreHeap.rollback()", "public void rollback() throws java.lang.UnsupportedOperationException"], ["boolean", "org.mapdb.StoreHeap.isReadOnly()", "public boolean isReadOnly()"], ["void", "org.mapdb.StoreHeap.clearCache()", "public void clearCache()"], ["void", "org.mapdb.StoreHeap.compact()", "public void compact()"], ["boolean", "org.mapdb.StoreHeap.canRollback()", "public boolean canRollback()"], ["long", "org.mapdb.StoreHeap.getMaxRecid()", "public long getMaxRecid()"], ["java.nio.ByteBuffer", "org.mapdb.StoreHeap.getRaw(long)", "public java.nio.ByteBuffer getRaw(long)"], ["java.util.Iterator<java.lang.Long>", "org.mapdb.StoreHeap.getFreeRecids()", "public java.util.Iterator<java.lang.Long> getFreeRecids()"], ["void", "org.mapdb.StoreHeap.updateRaw(long, java.nio.ByteBuffer)", "public void updateRaw(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.StoreHeap.getSizeLimit()", "public long getSizeLimit()"], ["long", "org.mapdb.StoreHeap.getCurrSize()", "public long getCurrSize()"], ["long", "org.mapdb.StoreHeap.getFreeSize()", "public long getFreeSize()"], ["java.lang.String", "org.mapdb.StoreHeap.calculateStatistics()", "public java.lang.String calculateStatistics()"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL(org.mapdb.Volume$Factory)", "public org.mapdb.StoreWAL(org.mapdb.Volume$Factory)"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL(org.mapdb.Volume$Factory, boolean, boolean, int, boolean, long, boolean, boolean, byte[], boolean, int)", "public org.mapdb.StoreWAL(org.mapdb.Volume$Factory, boolean, boolean, int, boolean, long, boolean, boolean, byte[], boolean, int)"], ["long", "org.mapdb.StoreWAL.preallocate()", "public long preallocate()"], ["void", "org.mapdb.StoreWAL.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.StoreWAL.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.StoreWAL.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreWAL.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.StoreWAL.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.StoreWAL.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.StoreWAL.commit()", "public void commit()"], ["void", "org.mapdb.StoreWAL.rollback()", "public void rollback() throws java.lang.UnsupportedOperationException"], ["void", "org.mapdb.StoreWAL.close()", "public void close()"], ["boolean", "org.mapdb.StoreWAL.canRollback()", "public boolean canRollback()"], ["org.mapdb.TxEngine$Tx", "org.mapdb.TxEngine$Tx(org.mapdb.TxEngine)", "public org.mapdb.TxEngine$Tx(org.mapdb.TxEngine)"], ["long", "org.mapdb.TxEngine$Tx.preallocate()", "public long preallocate()"], ["void", "org.mapdb.TxEngine$Tx.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.TxEngine$Tx.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.TxEngine$Tx.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine$Tx.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.TxEngine$Tx.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine$Tx.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.TxEngine$Tx.close()", "public void close()"], ["boolean", "org.mapdb.TxEngine$Tx.isClosed()", "public boolean isClosed()"], ["void", "org.mapdb.TxEngine$Tx.commit()", "public void commit()"], ["void", "org.mapdb.TxEngine$Tx.rollback()", "public void rollback() throws java.lang.UnsupportedOperationException"], ["boolean", "org.mapdb.TxEngine$Tx.isReadOnly()", "public boolean isReadOnly()"], ["boolean", "org.mapdb.TxEngine$Tx.canRollback()", "public boolean canRollback()"], ["boolean", "org.mapdb.TxEngine$Tx.canSnapshot()", "public boolean canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.TxEngine$Tx.snapshot()", "public org.mapdb.Engine snapshot() throws java.lang.UnsupportedOperationException"], ["void", "org.mapdb.TxEngine$Tx.clearCache()", "public void clearCache()"], ["void", "org.mapdb.TxEngine$Tx.compact()", "public void compact()"], ["org.mapdb.SerializerPojo", "org.mapdb.TxEngine$Tx.getSerializerPojo()", "public org.mapdb.SerializerPojo getSerializerPojo()"], ["void", "org.mapdb.TxEngine$Tx.closeListenerRegister(java.lang.Runnable)", "public void closeListenerRegister(java.lang.Runnable)"], ["void", "org.mapdb.TxEngine$Tx.closeListenerUnregister(java.lang.Runnable)", "public void closeListenerUnregister(java.lang.Runnable)"], ["org.mapdb.Engine", "org.mapdb.TxEngine$Tx.getWrappedEngine()", "public org.mapdb.Engine getWrappedEngine()"], ["org.mapdb.Engine", "org.mapdb.TxEngine.createSnapshotFor(org.mapdb.Engine)", "public static org.mapdb.Engine createSnapshotFor(org.mapdb.Engine)"], ["boolean", "org.mapdb.TxEngine.canSnapshot()", "public boolean canSnapshot()"], ["org.mapdb.Engine", "org.mapdb.TxEngine.snapshot()", "public org.mapdb.Engine snapshot()"], ["long", "org.mapdb.TxEngine.preallocate()", "public long preallocate()"], ["void", "org.mapdb.TxEngine.preallocate(long[])", "public void preallocate(long[])"], ["<A> long", "org.mapdb.TxEngine.put(A, org.mapdb.Serializer<A>)", "public <A> long put(A, org.mapdb.Serializer<A>)"], ["<A> A", "org.mapdb.TxEngine.get(long, org.mapdb.Serializer<A>)", "public <A> A get(long, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine.update(long, A, org.mapdb.Serializer<A>)", "public <A> void update(long, A, org.mapdb.Serializer<A>)"], ["<A> boolean", "org.mapdb.TxEngine.compareAndSwap(long, A, A, org.mapdb.Serializer<A>)", "public <A> boolean compareAndSwap(long, A, A, org.mapdb.Serializer<A>)"], ["<A> void", "org.mapdb.TxEngine.delete(long, org.mapdb.Serializer<A>)", "public <A> void delete(long, org.mapdb.Serializer<A>)"], ["void", "org.mapdb.TxEngine.close()", "public void close()"], ["void", "org.mapdb.TxEngine.commit()", "public void commit()"], ["void", "org.mapdb.TxEngine.rollback()", "public void rollback()"], ["org.mapdb.TxMaker", "org.mapdb.TxMaker(org.mapdb.Engine)", "public org.mapdb.TxMaker(org.mapdb.Engine)"], ["org.mapdb.TxMaker", "org.mapdb.TxMaker(org.mapdb.Engine, boolean, boolean)", "public org.mapdb.TxMaker(org.mapdb.Engine, boolean, boolean)"], ["org.mapdb.DB", "org.mapdb.TxMaker.makeTx()", "public org.mapdb.DB makeTx()"], ["void", "org.mapdb.TxMaker.close()", "public void close()"], ["void", "org.mapdb.TxMaker.execute(org.mapdb.TxBlock)", "public void execute(org.mapdb.TxBlock)"], ["<A> A", "org.mapdb.TxMaker.execute(org.mapdb.Fun$Function1<A, org.mapdb.DB>)", "public <A> A execute(org.mapdb.Fun$Function1<A, org.mapdb.DB>)"], ["org.mapdb.TxRollbackException", "org.mapdb.TxRollbackException()", "public org.mapdb.TxRollbackException()"], ["org.mapdb.Volume", "org.mapdb.Volume$1.createIndexVolume()", "public org.mapdb.Volume createIndexVolume()"], ["org.mapdb.Volume", "org.mapdb.Volume$1.createPhysVolume()", "public org.mapdb.Volume createPhysVolume()"], ["org.mapdb.Volume", "org.mapdb.Volume$1.createTransLogVolume()", "public org.mapdb.Volume createTransLogVolume()"], ["synchronized", "org.mapdb.Volume$2.org.mapdb.Volume createIndexVolume()", "public synchronized org.mapdb.Volume createIndexVolume()"], ["synchronized", "org.mapdb.Volume$2.org.mapdb.Volume createPhysVolume()", "public synchronized org.mapdb.Volume createPhysVolume()"], ["synchronized", "org.mapdb.Volume$2.org.mapdb.Volume createTransLogVolume()", "public synchronized org.mapdb.Volume createTransLogVolume()"], ["boolean", "org.mapdb.Volume$ByteBufferVol.tryAvailable(long)", "public final boolean tryAvailable(long)"], ["void", "org.mapdb.Volume$ByteBufferVol.putLong(long, long)", "public final void putLong(long, long)"], ["void", "org.mapdb.Volume$ByteBufferVol.putInt(long, int)", "public final void putInt(long, int)"], ["void", "org.mapdb.Volume$ByteBufferVol.putByte(long, byte)", "public final void putByte(long, byte)"], ["void", "org.mapdb.Volume$ByteBufferVol.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.Volume$ByteBufferVol.putData(long, java.nio.ByteBuffer)", "public final void putData(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.Volume$ByteBufferVol.getLong(long)", "public final long getLong(long)"], ["int", "org.mapdb.Volume$ByteBufferVol.getInt(long)", "public final int getInt(long)"], ["byte", "org.mapdb.Volume$ByteBufferVol.getByte(long)", "public final byte getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.Volume$ByteBufferVol.getDataInput(long, int)", "public final org.mapdb.DataInput2 getDataInput(long, int)"], ["boolean", "org.mapdb.Volume$ByteBufferVol.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.mapdb.Volume$ByteBufferVol.isSliced()", "public boolean isSliced()"], ["java.io.DataInput", "org.mapdb.Volume$ByteBufferVol.getDataInput(long, int)", "public java.io.DataInput getDataInput(long, int)"], ["org.mapdb.Volume$FileChannelVol", "org.mapdb.Volume$FileChannelVol(java.io.File, boolean, long, int, int)", "public org.mapdb.Volume$FileChannelVol(java.io.File, boolean, long, int, int)"], ["boolean", "org.mapdb.Volume$FileChannelVol.tryAvailable(long)", "public boolean tryAvailable(long)"], ["void", "org.mapdb.Volume$FileChannelVol.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.Volume$FileChannelVol.putSixLong(long, long)", "public final void putSixLong(long, long)"], ["void", "org.mapdb.Volume$FileChannelVol.putLong(long, long)", "public void putLong(long, long)"], ["void", "org.mapdb.Volume$FileChannelVol.putInt(long, int)", "public void putInt(long, int)"], ["void", "org.mapdb.Volume$FileChannelVol.putByte(long, byte)", "public void putByte(long, byte)"], ["void", "org.mapdb.Volume$FileChannelVol.putData(long, byte[], int, int)", "public void putData(long, byte[], int, int)"], ["void", "org.mapdb.Volume$FileChannelVol.putData(long, java.nio.ByteBuffer)", "public void putData(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.Volume$FileChannelVol.getSixLong(long)", "public final long getSixLong(long)"], ["long", "org.mapdb.Volume$FileChannelVol.getLong(long)", "public long getLong(long)"], ["int", "org.mapdb.Volume$FileChannelVol.getInt(long)", "public int getInt(long)"], ["byte", "org.mapdb.Volume$FileChannelVol.getByte(long)", "public byte getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.Volume$FileChannelVol.getDataInput(long, int)", "public org.mapdb.DataInput2 getDataInput(long, int)"], ["void", "org.mapdb.Volume$FileChannelVol.close()", "public void close()"], ["void", "org.mapdb.Volume$FileChannelVol.sync()", "public void sync()"], ["boolean", "org.mapdb.Volume$FileChannelVol.isEmpty()", "public boolean isEmpty()"], ["void", "org.mapdb.Volume$FileChannelVol.deleteFile()", "public void deleteFile()"], ["boolean", "org.mapdb.Volume$FileChannelVol.isSliced()", "public boolean isSliced()"], ["java.io.File", "org.mapdb.Volume$FileChannelVol.getFile()", "public java.io.File getFile()"], ["java.io.DataInput", "org.mapdb.Volume$FileChannelVol.getDataInput(long, int)", "public java.io.DataInput getDataInput(long, int)"], ["org.mapdb.Volume$MappedFileVol", "org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int)", "public org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int)"], ["org.mapdb.Volume$MappedFileVol", "org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int, boolean)", "public org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int, boolean)"], ["org.mapdb.Volume$MappedFileVol", "org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int, boolean, boolean)", "public org.mapdb.Volume$MappedFileVol(java.io.File, boolean, long, int, int, boolean, boolean)"], ["void", "org.mapdb.Volume$MappedFileVol.close()", "public void close()"], ["void", "org.mapdb.Volume$MappedFileVol.sync()", "public void sync()"], ["void", "org.mapdb.Volume$MappedFileVol.deleteFile()", "public void deleteFile()"], ["java.io.File", "org.mapdb.Volume$MappedFileVol.getFile()", "public java.io.File getFile()"], ["void", "org.mapdb.Volume$MappedFileVol.truncate(long)", "public void truncate(long)"], ["java.lang.String", "org.mapdb.Volume$MemoryVol.toString()", "public java.lang.String toString()"], ["org.mapdb.Volume$MemoryVol", "org.mapdb.Volume$MemoryVol(boolean, long, int)", "public org.mapdb.Volume$MemoryVol(boolean, long, int)"], ["void", "org.mapdb.Volume$MemoryVol.truncate(long)", "public void truncate(long)"], ["void", "org.mapdb.Volume$MemoryVol.close()", "public void close()"], ["void", "org.mapdb.Volume$MemoryVol.sync()", "public void sync()"], ["void", "org.mapdb.Volume$MemoryVol.deleteFile()", "public void deleteFile()"], ["java.io.File", "org.mapdb.Volume$MemoryVol.getFile()", "public java.io.File getFile()"], ["org.mapdb.Volume", "org.mapdb.Volume()", "public org.mapdb.Volume()"], ["void", "org.mapdb.Volume.ensureAvailable(long)", "public void ensureAvailable(long)"], ["void", "org.mapdb.Volume.putUnsignedShort(long, int)", "public void putUnsignedShort(long, int)"], ["int", "org.mapdb.Volume.getUnsignedShort(long)", "public int getUnsignedShort(long)"], ["int", "org.mapdb.Volume.getUnsignedByte(long)", "public int getUnsignedByte(long)"], ["void", "org.mapdb.Volume.putUnsignedByte(long, int)", "public void putUnsignedByte(long, int)"], ["long", "org.mapdb.Volume.getSixLong(long)", "public long getSixLong(long)"], ["void", "org.mapdb.Volume.putSixLong(long, long)", "public void putSixLong(long, long)"], ["int", "org.mapdb.Volume.putPackedLong(long, long)", "public int putPackedLong(long, long)"], ["long", "org.mapdb.Volume.getPackedLong(long)", "public long getPackedLong(long)"], ["org.mapdb.Volume", "org.mapdb.Volume.volumeForFile(java.io.File, boolean, boolean, long, int, int)", "public static org.mapdb.Volume volumeForFile(java.io.File, boolean, boolean, long, int, int)"], ["org.mapdb.Volume", "org.mapdb.Volume.volumeForFile(java.io.File, boolean, boolean, long, int, int, boolean)", "public static org.mapdb.Volume volumeForFile(java.io.File, boolean, boolean, long, int, int, boolean)"], ["org.mapdb.Volume", "org.mapdb.Volume.volumeForFile(java.io.File, boolean, boolean, long, int, int, boolean, boolean)", "public static org.mapdb.Volume volumeForFile(java.io.File, boolean, boolean, long, int, int, boolean, boolean)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int)", "public static org.mapdb.Volume$Factory fileFactory(java.io.File, int, boolean, long, int, int)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File)", "public static org.mapdb.Volume$Factory fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File, boolean)", "public static org.mapdb.Volume$Factory fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File, boolean)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File, boolean, boolean)", "public static org.mapdb.Volume$Factory fileFactory(java.io.File, int, boolean, long, int, int, java.io.File, java.io.File, boolean, boolean)"], ["org.mapdb.Volume$Factory", "org.mapdb.Volume.memoryFactory(boolean, long, int)", "public static org.mapdb.Volume$Factory memoryFactory(boolean, long, int)"], ["void", "org.mapdb.Volume.volumeTransfer(long, org.mapdb.Volume, org.mapdb.Volume)", "public static void volumeTransfer(long, org.mapdb.Volume, org.mapdb.Volume)"]]}