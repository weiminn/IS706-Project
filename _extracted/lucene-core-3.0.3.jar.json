{"lucene-core-3.0.3.jar": [["java.lang.Package", "org.apache.lucene.LucenePackage.get()", "public static java.lang.Package get()"], ["org.apache.lucene.analysis.ASCIIFoldingFilter", "org.apache.lucene.analysis.ASCIIFoldingFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.ASCIIFoldingFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.ASCIIFoldingFilter.incrementToken()", "public boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.ASCIIFoldingFilter.foldToASCII(char[], int)", "public void foldToASCII(char[], int)"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.analysis.Analyzer()", "public org.apache.lucene.analysis.Analyzer()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.Analyzer.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["int", "org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(java.lang.String)", "public int getPositionIncrementGap(java.lang.String)"], ["int", "org.apache.lucene.analysis.Analyzer.getOffsetGap(org.apache.lucene.document.Fieldable)", "public int getOffsetGap(org.apache.lucene.document.Fieldable)"], ["void", "org.apache.lucene.analysis.Analyzer.close()", "public void close()"], ["org.apache.lucene.analysis.BaseCharFilter", "org.apache.lucene.analysis.BaseCharFilter(org.apache.lucene.analysis.CharStream)", "public org.apache.lucene.analysis.BaseCharFilter(org.apache.lucene.analysis.CharStream)"], ["org.apache.lucene.analysis.CachingTokenFilter", "org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.CachingTokenFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CachingTokenFilter.end()", "public final void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CachingTokenFilter.reset()", "public void reset() throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.CharArraySet$CharArraySetIterator.hasNext()", "public boolean hasNext()"], ["char[]", "org.apache.lucene.analysis.CharArraySet$CharArraySetIterator.nextCharArray()", "public char[] nextCharArray()"], ["java.lang.String", "org.apache.lucene.analysis.CharArraySet$CharArraySetIterator.next()", "public java.lang.String next()"], ["void", "org.apache.lucene.analysis.CharArraySet$CharArraySetIterator.remove()", "public void remove()"], ["java.lang.Object", "org.apache.lucene.analysis.CharArraySet$CharArraySetIterator.next()", "public java.lang.Object next()"], ["boolean", "org.apache.lucene.analysis.CharArraySet$UnmodifiableCharArraySet.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArraySet$UnmodifiableCharArraySet.addAll(java.util.Collection<? extends java.lang.Object>)", "public boolean addAll(java.util.Collection<? extends java.lang.Object>)"], ["boolean", "org.apache.lucene.analysis.CharArraySet$UnmodifiableCharArraySet.add(char[])", "public boolean add(char[])"], ["boolean", "org.apache.lucene.analysis.CharArraySet$UnmodifiableCharArraySet.add(java.lang.CharSequence)", "public boolean add(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArraySet$UnmodifiableCharArraySet.add(java.lang.String)", "public boolean add(java.lang.String)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet(int, boolean)", "public org.apache.lucene.analysis.CharArraySet(int, boolean)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet(java.util.Collection<? extends java.lang.Object>, boolean)", "public org.apache.lucene.analysis.CharArraySet(java.util.Collection<? extends java.lang.Object>, boolean)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.contains(char[], int, int)", "public boolean contains(char[], int, int)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.contains(java.lang.CharSequence)", "public boolean contains(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(java.lang.CharSequence)", "public boolean add(java.lang.CharSequence)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(java.lang.String)", "public boolean add(java.lang.String)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(char[])", "public boolean add(char[])"], ["int", "org.apache.lucene.analysis.CharArraySet.size()", "public int size()"], ["boolean", "org.apache.lucene.analysis.CharArraySet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.apache.lucene.analysis.CharArraySet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.apache.lucene.analysis.CharArraySet.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet.unmodifiableSet(org.apache.lucene.analysis.CharArraySet)", "public static org.apache.lucene.analysis.CharArraySet unmodifiableSet(org.apache.lucene.analysis.CharArraySet)"], ["org.apache.lucene.analysis.CharArraySet", "org.apache.lucene.analysis.CharArraySet.copy(java.util.Set<?>)", "public static org.apache.lucene.analysis.CharArraySet copy(java.util.Set<?>)"], ["java.util.Iterator<java.lang.String>", "org.apache.lucene.analysis.CharArraySet.stringIterator()", "public java.util.Iterator<java.lang.String> stringIterator()"], ["java.util.Iterator<java.lang.Object>", "org.apache.lucene.analysis.CharArraySet.iterator()", "public java.util.Iterator<java.lang.Object> iterator()"], ["int", "org.apache.lucene.analysis.CharFilter.correctOffset(int)", "public final int correctOffset(int)"], ["void", "org.apache.lucene.analysis.CharFilter.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.CharFilter.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.CharFilter.markSupported()", "public boolean markSupported()"], ["void", "org.apache.lucene.analysis.CharFilter.mark(int)", "public void mark(int) throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CharFilter.reset()", "public void reset() throws java.io.IOException"], ["org.apache.lucene.analysis.CharStream", "org.apache.lucene.analysis.CharReader.get(java.io.Reader)", "public static org.apache.lucene.analysis.CharStream get(java.io.Reader)"], ["int", "org.apache.lucene.analysis.CharReader.correctOffset(int)", "public int correctOffset(int)"], ["void", "org.apache.lucene.analysis.CharReader.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.CharReader.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.CharReader.markSupported()", "public boolean markSupported()"], ["void", "org.apache.lucene.analysis.CharReader.mark(int)", "public void mark(int) throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CharReader.reset()", "public void reset() throws java.io.IOException"], ["org.apache.lucene.analysis.CharStream", "org.apache.lucene.analysis.CharStream()", "public org.apache.lucene.analysis.CharStream()"], ["org.apache.lucene.analysis.CharTokenizer", "org.apache.lucene.analysis.CharTokenizer(java.io.Reader)", "public org.apache.lucene.analysis.CharTokenizer(java.io.Reader)"], ["org.apache.lucene.analysis.CharTokenizer", "org.apache.lucene.analysis.CharTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)", "public org.apache.lucene.analysis.CharTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)"], ["org.apache.lucene.analysis.CharTokenizer", "org.apache.lucene.analysis.CharTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)", "public org.apache.lucene.analysis.CharTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)"], ["boolean", "org.apache.lucene.analysis.CharTokenizer.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.CharTokenizer.end()", "public final void end()"], ["void", "org.apache.lucene.analysis.CharTokenizer.reset(java.io.Reader)", "public void reset(java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.ISOLatin1AccentFilter", "org.apache.lucene.analysis.ISOLatin1AccentFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.ISOLatin1AccentFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.ISOLatin1AccentFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.ISOLatin1AccentFilter.removeAccents(char[], int)", "public final void removeAccents(char[], int)"], ["org.apache.lucene.analysis.KeywordAnalyzer", "org.apache.lucene.analysis.KeywordAnalyzer()", "public org.apache.lucene.analysis.KeywordAnalyzer()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.KeywordAnalyzer.tokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.KeywordAnalyzer.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.KeywordTokenizer", "org.apache.lucene.analysis.KeywordTokenizer(java.io.Reader)", "public org.apache.lucene.analysis.KeywordTokenizer(java.io.Reader)"], ["org.apache.lucene.analysis.KeywordTokenizer", "org.apache.lucene.analysis.KeywordTokenizer(java.io.Reader, int)", "public org.apache.lucene.analysis.KeywordTokenizer(java.io.Reader, int)"], ["org.apache.lucene.analysis.KeywordTokenizer", "org.apache.lucene.analysis.KeywordTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader, int)", "public org.apache.lucene.analysis.KeywordTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader, int)"], ["org.apache.lucene.analysis.KeywordTokenizer", "org.apache.lucene.analysis.KeywordTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader, int)", "public org.apache.lucene.analysis.KeywordTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader, int)"], ["boolean", "org.apache.lucene.analysis.KeywordTokenizer.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.KeywordTokenizer.end()", "public final void end()"], ["void", "org.apache.lucene.analysis.KeywordTokenizer.reset(java.io.Reader)", "public void reset(java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.LengthFilter", "org.apache.lucene.analysis.LengthFilter(org.apache.lucene.analysis.TokenStream, int, int)", "public org.apache.lucene.analysis.LengthFilter(org.apache.lucene.analysis.TokenStream, int, int)"], ["boolean", "org.apache.lucene.analysis.LengthFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["org.apache.lucene.analysis.LetterTokenizer", "org.apache.lucene.analysis.LetterTokenizer(java.io.Reader)", "public org.apache.lucene.analysis.LetterTokenizer(java.io.Reader)"], ["org.apache.lucene.analysis.LetterTokenizer", "org.apache.lucene.analysis.LetterTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)", "public org.apache.lucene.analysis.LetterTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)"], ["org.apache.lucene.analysis.LetterTokenizer", "org.apache.lucene.analysis.LetterTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)", "public org.apache.lucene.analysis.LetterTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)"], ["org.apache.lucene.analysis.LowerCaseFilter", "org.apache.lucene.analysis.LowerCaseFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.LowerCaseFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.LowerCaseFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["org.apache.lucene.analysis.LowerCaseTokenizer", "org.apache.lucene.analysis.LowerCaseTokenizer(java.io.Reader)", "public org.apache.lucene.analysis.LowerCaseTokenizer(java.io.Reader)"], ["org.apache.lucene.analysis.LowerCaseTokenizer", "org.apache.lucene.analysis.LowerCaseTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)", "public org.apache.lucene.analysis.LowerCaseTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)"], ["org.apache.lucene.analysis.LowerCaseTokenizer", "org.apache.lucene.analysis.LowerCaseTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)", "public org.apache.lucene.analysis.LowerCaseTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)"], ["org.apache.lucene.analysis.MappingCharFilter", "org.apache.lucene.analysis.MappingCharFilter(org.apache.lucene.analysis.NormalizeCharMap, org.apache.lucene.analysis.CharStream)", "public org.apache.lucene.analysis.MappingCharFilter(org.apache.lucene.analysis.NormalizeCharMap, org.apache.lucene.analysis.CharStream)"], ["org.apache.lucene.analysis.MappingCharFilter", "org.apache.lucene.analysis.MappingCharFilter(org.apache.lucene.analysis.NormalizeCharMap, java.io.Reader)", "public org.apache.lucene.analysis.MappingCharFilter(org.apache.lucene.analysis.NormalizeCharMap, java.io.Reader)"], ["int", "org.apache.lucene.analysis.MappingCharFilter.read()", "public int read() throws java.io.IOException"], ["int", "org.apache.lucene.analysis.MappingCharFilter.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["org.apache.lucene.analysis.NormalizeCharMap", "org.apache.lucene.analysis.NormalizeCharMap()", "public org.apache.lucene.analysis.NormalizeCharMap()"], ["void", "org.apache.lucene.analysis.NormalizeCharMap.add(java.lang.String, java.lang.String)", "public void add(java.lang.String, java.lang.String)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream()", "public org.apache.lucene.analysis.NumericTokenStream()"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream(int)", "public org.apache.lucene.analysis.NumericTokenStream(int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource, int)", "public org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource, int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource$AttributeFactory, int)", "public org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource$AttributeFactory, int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setLongValue(long)", "public org.apache.lucene.analysis.NumericTokenStream setLongValue(long)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setIntValue(int)", "public org.apache.lucene.analysis.NumericTokenStream setIntValue(int)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setDoubleValue(double)", "public org.apache.lucene.analysis.NumericTokenStream setDoubleValue(double)"], ["org.apache.lucene.analysis.NumericTokenStream", "org.apache.lucene.analysis.NumericTokenStream.setFloatValue(float)", "public org.apache.lucene.analysis.NumericTokenStream setFloatValue(float)"], ["void", "org.apache.lucene.analysis.NumericTokenStream.reset()", "public void reset()"], ["boolean", "org.apache.lucene.analysis.NumericTokenStream.incrementToken()", "public boolean incrementToken()"], ["java.lang.String", "org.apache.lucene.analysis.NumericTokenStream.toString()", "public java.lang.String toString()"], ["org.apache.lucene.analysis.PerFieldAnalyzerWrapper", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper(org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.analysis.PerFieldAnalyzerWrapper(org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.analysis.PerFieldAnalyzerWrapper", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper(org.apache.lucene.analysis.Analyzer, java.util.Map<java.lang.String, org.apache.lucene.analysis.Analyzer>)", "public org.apache.lucene.analysis.PerFieldAnalyzerWrapper(org.apache.lucene.analysis.Analyzer, java.util.Map<java.lang.String, org.apache.lucene.analysis.Analyzer>)"], ["void", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper.addAnalyzer(java.lang.String, org.apache.lucene.analysis.Analyzer)", "public void addAnalyzer(java.lang.String, org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper.tokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["int", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper.getPositionIncrementGap(java.lang.String)", "public int getPositionIncrementGap(java.lang.String)"], ["int", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper.getOffsetGap(org.apache.lucene.document.Fieldable)", "public int getOffsetGap(org.apache.lucene.document.Fieldable)"], ["java.lang.String", "org.apache.lucene.analysis.PerFieldAnalyzerWrapper.toString()", "public java.lang.String toString()"], ["org.apache.lucene.analysis.PorterStemFilter", "org.apache.lucene.analysis.PorterStemFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.PorterStemFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.PorterStemFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["org.apache.lucene.analysis.PorterStemmer", "org.apache.lucene.analysis.PorterStemmer()", "public org.apache.lucene.analysis.PorterStemmer()"], ["void", "org.apache.lucene.analysis.PorterStemmer.reset()", "public void reset()"], ["void", "org.apache.lucene.analysis.PorterStemmer.add(char)", "public void add(char)"], ["java.lang.String", "org.apache.lucene.analysis.PorterStemmer.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.analysis.PorterStemmer.getResultLength()", "public int getResultLength()"], ["char[]", "org.apache.lucene.analysis.PorterStemmer.getResultBuffer()", "public char[] getResultBuffer()"], ["java.lang.String", "org.apache.lucene.analysis.PorterStemmer.stem(java.lang.String)", "public java.lang.String stem(java.lang.String)"], ["boolean", "org.apache.lucene.analysis.PorterStemmer.stem(char[])", "public boolean stem(char[])"], ["boolean", "org.apache.lucene.analysis.PorterStemmer.stem(char[], int, int)", "public boolean stem(char[], int, int)"], ["boolean", "org.apache.lucene.analysis.PorterStemmer.stem(char[], int)", "public boolean stem(char[], int)"], ["boolean", "org.apache.lucene.analysis.PorterStemmer.stem()", "public boolean stem()"], ["boolean", "org.apache.lucene.analysis.PorterStemmer.stem(int)", "public boolean stem(int)"], ["void", "org.apache.lucene.analysis.PorterStemmer.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["org.apache.lucene.analysis.SimpleAnalyzer", "org.apache.lucene.analysis.SimpleAnalyzer()", "public org.apache.lucene.analysis.SimpleAnalyzer()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.SimpleAnalyzer.tokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.SimpleAnalyzer.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.StopAnalyzer", "org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version)", "public org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version)"], ["org.apache.lucene.analysis.StopAnalyzer", "org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version, java.util.Set<?>)", "public org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version, java.util.Set<?>)"], ["org.apache.lucene.analysis.StopAnalyzer", "org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version, java.io.File)", "public org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version, java.io.File) throws java.io.IOException"], ["org.apache.lucene.analysis.StopAnalyzer", "org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version, java.io.Reader)", "public org.apache.lucene.analysis.StopAnalyzer(org.apache.lucene.util.Version, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.StopAnalyzer.tokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.StopAnalyzer.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.StopFilter", "org.apache.lucene.analysis.StopFilter(boolean, org.apache.lucene.analysis.TokenStream, java.util.Set<?>, boolean)", "public org.apache.lucene.analysis.StopFilter(boolean, org.apache.lucene.analysis.TokenStream, java.util.Set<?>, boolean)"], ["org.apache.lucene.analysis.StopFilter", "org.apache.lucene.analysis.StopFilter(boolean, org.apache.lucene.analysis.TokenStream, java.util.Set<?>)", "public org.apache.lucene.analysis.StopFilter(boolean, org.apache.lucene.analysis.TokenStream, java.util.Set<?>)"], ["java.util.Set<java.lang.Object>", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.lang.String...)", "public static final java.util.Set<java.lang.Object> makeStopSet(java.lang.String...)"], ["java.util.Set<java.lang.Object>", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.util.List<?>)", "public static final java.util.Set<java.lang.Object> makeStopSet(java.util.List<?>)"], ["java.util.Set<java.lang.Object>", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.lang.String[], boolean)", "public static final java.util.Set<java.lang.Object> makeStopSet(java.lang.String[], boolean)"], ["java.util.Set<java.lang.Object>", "org.apache.lucene.analysis.StopFilter.makeStopSet(java.util.List<?>, boolean)", "public static final java.util.Set<java.lang.Object> makeStopSet(java.util.List<?>, boolean)"], ["boolean", "org.apache.lucene.analysis.StopFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.StopFilter.getEnablePositionIncrementsVersionDefault(org.apache.lucene.util.Version)", "public static boolean getEnablePositionIncrementsVersionDefault(org.apache.lucene.util.Version)"], ["boolean", "org.apache.lucene.analysis.StopFilter.getEnablePositionIncrements()", "public boolean getEnablePositionIncrements()"], ["void", "org.apache.lucene.analysis.StopFilter.setEnablePositionIncrements(boolean)", "public void setEnablePositionIncrements(boolean)"], ["boolean", "org.apache.lucene.analysis.TeeSinkTokenFilter$1.accept(org.apache.lucene.util.AttributeSource)", "public boolean accept(org.apache.lucene.util.AttributeSource)"], ["org.apache.lucene.analysis.TeeSinkTokenFilter$SinkFilter", "org.apache.lucene.analysis.TeeSinkTokenFilter$SinkFilter()", "public org.apache.lucene.analysis.TeeSinkTokenFilter$SinkFilter()"], ["void", "org.apache.lucene.analysis.TeeSinkTokenFilter$SinkFilter.reset()", "public void reset() throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream.end()", "public final void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream.reset()", "public final void reset()"], ["org.apache.lucene.analysis.TeeSinkTokenFilter", "org.apache.lucene.analysis.TeeSinkTokenFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.TeeSinkTokenFilter(org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream", "org.apache.lucene.analysis.TeeSinkTokenFilter.newSinkTokenStream()", "public org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream newSinkTokenStream()"], ["org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream", "org.apache.lucene.analysis.TeeSinkTokenFilter.newSinkTokenStream(org.apache.lucene.analysis.TeeSinkTokenFilter$SinkFilter)", "public org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream newSinkTokenStream(org.apache.lucene.analysis.TeeSinkTokenFilter$SinkFilter)"], ["void", "org.apache.lucene.analysis.TeeSinkTokenFilter.addSinkTokenStream(org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream)", "public void addSinkTokenStream(org.apache.lucene.analysis.TeeSinkTokenFilter$SinkTokenStream)"], ["void", "org.apache.lucene.analysis.TeeSinkTokenFilter.consumeAllTokens()", "public void consumeAllTokens() throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.TeeSinkTokenFilter.incrementToken()", "public boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TeeSinkTokenFilter.end()", "public final void end() throws java.io.IOException"], ["org.apache.lucene.analysis.Token$TokenAttributeFactory", "org.apache.lucene.analysis.Token$TokenAttributeFactory(org.apache.lucene.util.AttributeSource$AttributeFactory)", "public org.apache.lucene.analysis.Token$TokenAttributeFactory(org.apache.lucene.util.AttributeSource$AttributeFactory)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.analysis.Token$TokenAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["boolean", "org.apache.lucene.analysis.Token$TokenAttributeFactory.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.Token$TokenAttributeFactory.hashCode()", "public int hashCode()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token()", "public org.apache.lucene.analysis.Token()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(int, int)", "public org.apache.lucene.analysis.Token(int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(int, int, java.lang.String)", "public org.apache.lucene.analysis.Token(int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(int, int, int)", "public org.apache.lucene.analysis.Token(int, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(java.lang.String, int, int)", "public org.apache.lucene.analysis.Token(java.lang.String, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(java.lang.String, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token(java.lang.String, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(java.lang.String, int, int, int)", "public org.apache.lucene.analysis.Token(java.lang.String, int, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token(char[], int, int, int, int)", "public org.apache.lucene.analysis.Token(char[], int, int, int, int)"], ["void", "org.apache.lucene.analysis.Token.setPositionIncrement(int)", "public void setPositionIncrement(int)"], ["int", "org.apache.lucene.analysis.Token.getPositionIncrement()", "public int getPositionIncrement()"], ["java.lang.String", "org.apache.lucene.analysis.Token.term()", "public final java.lang.String term()"], ["void", "org.apache.lucene.analysis.Token.setTermBuffer(char[], int, int)", "public final void setTermBuffer(char[], int, int)"], ["void", "org.apache.lucene.analysis.Token.setTermBuffer(java.lang.String)", "public final void setTermBuffer(java.lang.String)"], ["void", "org.apache.lucene.analysis.Token.setTermBuffer(java.lang.String, int, int)", "public final void setTermBuffer(java.lang.String, int, int)"], ["char[]", "org.apache.lucene.analysis.Token.termBuffer()", "public final char[] termBuffer()"], ["char[]", "org.apache.lucene.analysis.Token.resizeTermBuffer(int)", "public char[] resizeTermBuffer(int)"], ["int", "org.apache.lucene.analysis.Token.termLength()", "public final int termLength()"], ["void", "org.apache.lucene.analysis.Token.setTermLength(int)", "public final void setTermLength(int)"], ["int", "org.apache.lucene.analysis.Token.startOffset()", "public final int startOffset()"], ["void", "org.apache.lucene.analysis.Token.setStartOffset(int)", "public void setStartOffset(int)"], ["int", "org.apache.lucene.analysis.Token.endOffset()", "public final int endOffset()"], ["void", "org.apache.lucene.analysis.Token.setEndOffset(int)", "public void setEndOffset(int)"], ["void", "org.apache.lucene.analysis.Token.setOffset(int, int)", "public void setOffset(int, int)"], ["java.lang.String", "org.apache.lucene.analysis.Token.type()", "public final java.lang.String type()"], ["void", "org.apache.lucene.analysis.Token.setType(java.lang.String)", "public final void setType(java.lang.String)"], ["int", "org.apache.lucene.analysis.Token.getFlags()", "public int getFlags()"], ["void", "org.apache.lucene.analysis.Token.setFlags(int)", "public void setFlags(int)"], ["org.apache.lucene.index.Payload", "org.apache.lucene.analysis.Token.getPayload()", "public org.apache.lucene.index.Payload getPayload()"], ["void", "org.apache.lucene.analysis.Token.setPayload(org.apache.lucene.index.Payload)", "public void setPayload(org.apache.lucene.index.Payload)"], ["java.lang.String", "org.apache.lucene.analysis.Token.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.analysis.Token.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.analysis.Token.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.clone(char[], int, int, int, int)", "public org.apache.lucene.analysis.Token clone(char[], int, int, int, int)"], ["boolean", "org.apache.lucene.analysis.Token.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.Token.hashCode()", "public int hashCode()"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(char[], int, int, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token reinit(char[], int, int, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(char[], int, int, int, int)", "public org.apache.lucene.analysis.Token reinit(char[], int, int, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, int, int, java.lang.String)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, int, int, java.lang.String)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int)"], ["org.apache.lucene.analysis.Token", "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, int, int)", "public org.apache.lucene.analysis.Token reinit(java.lang.String, int, int, int, int)"], ["void", "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token)", "public void reinit(org.apache.lucene.analysis.Token)"], ["void", "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token, java.lang.String)", "public void reinit(org.apache.lucene.analysis.Token, java.lang.String)"], ["void", "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token, char[], int, int)", "public void reinit(org.apache.lucene.analysis.Token, char[], int, int)"], ["void", "org.apache.lucene.analysis.Token.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.analysis.TokenFilter.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenFilter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenFilter.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.end()", "public void end() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.reset()", "public void reset() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.TokenStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.Tokenizer.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.Tokenizer.reset(java.io.Reader)", "public void reset(java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.WhitespaceAnalyzer", "org.apache.lucene.analysis.WhitespaceAnalyzer()", "public org.apache.lucene.analysis.WhitespaceAnalyzer()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.WhitespaceAnalyzer.tokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.WhitespaceAnalyzer.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.WhitespaceTokenizer", "org.apache.lucene.analysis.WhitespaceTokenizer(java.io.Reader)", "public org.apache.lucene.analysis.WhitespaceTokenizer(java.io.Reader)"], ["org.apache.lucene.analysis.WhitespaceTokenizer", "org.apache.lucene.analysis.WhitespaceTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)", "public org.apache.lucene.analysis.WhitespaceTokenizer(org.apache.lucene.util.AttributeSource, java.io.Reader)"], ["org.apache.lucene.analysis.WhitespaceTokenizer", "org.apache.lucene.analysis.WhitespaceTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)", "public org.apache.lucene.analysis.WhitespaceTokenizer(org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)"], ["org.apache.lucene.analysis.WordlistLoader", "org.apache.lucene.analysis.WordlistLoader()", "public org.apache.lucene.analysis.WordlistLoader()"], ["java.util.HashSet<java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.File)", "public static java.util.HashSet<java.lang.String> getWordSet(java.io.File) throws java.io.IOException"], ["java.util.HashSet<java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.File, java.lang.String)", "public static java.util.HashSet<java.lang.String> getWordSet(java.io.File, java.lang.String) throws java.io.IOException"], ["java.util.HashSet<java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.Reader)", "public static java.util.HashSet<java.lang.String> getWordSet(java.io.Reader) throws java.io.IOException"], ["java.util.HashSet<java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getWordSet(java.io.Reader, java.lang.String)", "public static java.util.HashSet<java.lang.String> getWordSet(java.io.Reader, java.lang.String) throws java.io.IOException"], ["java.util.HashMap<java.lang.String, java.lang.String>", "org.apache.lucene.analysis.WordlistLoader.getStemDict(java.io.File)", "public static java.util.HashMap<java.lang.String, java.lang.String> getStemDict(java.io.File) throws java.io.IOException"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version)", "public org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version)"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version, java.util.Set<?>)", "public org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version, java.util.Set<?>)"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version, java.io.File)", "public org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version, java.io.File) throws java.io.IOException"], ["org.apache.lucene.analysis.standard.StandardAnalyzer", "org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version, java.io.Reader)", "public org.apache.lucene.analysis.standard.StandardAnalyzer(org.apache.lucene.util.Version, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.standard.StandardAnalyzer.tokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)"], ["void", "org.apache.lucene.analysis.standard.StandardAnalyzer.setMaxTokenLength(int)", "public void setMaxTokenLength(int)"], ["int", "org.apache.lucene.analysis.standard.StandardAnalyzer.getMaxTokenLength()", "public int getMaxTokenLength()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.analysis.standard.StandardAnalyzer.reusableTokenStream(java.lang.String, java.io.Reader)", "public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException"], ["org.apache.lucene.analysis.standard.StandardFilter", "org.apache.lucene.analysis.standard.StandardFilter(org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.analysis.standard.StandardFilter(org.apache.lucene.analysis.TokenStream)"], ["boolean", "org.apache.lucene.analysis.standard.StandardFilter.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.setMaxTokenLength(int)", "public void setMaxTokenLength(int)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizer.getMaxTokenLength()", "public int getMaxTokenLength()"], ["org.apache.lucene.analysis.standard.StandardTokenizer", "org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.Version, java.io.Reader)", "public org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.Version, java.io.Reader)"], ["org.apache.lucene.analysis.standard.StandardTokenizer", "org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.Version, org.apache.lucene.util.AttributeSource, java.io.Reader)", "public org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.Version, org.apache.lucene.util.AttributeSource, java.io.Reader)"], ["org.apache.lucene.analysis.standard.StandardTokenizer", "org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.Version, org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)", "public org.apache.lucene.analysis.standard.StandardTokenizer(org.apache.lucene.util.Version, org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)"], ["boolean", "org.apache.lucene.analysis.standard.StandardTokenizer.incrementToken()", "public final boolean incrementToken() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.end()", "public final void end()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.reset(java.io.Reader)", "public void reset(java.io.Reader) throws java.io.IOException"], ["boolean", "org.apache.lucene.analysis.standard.StandardTokenizer.isReplaceInvalidAcronym()", "public boolean isReplaceInvalidAcronym()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizer.setReplaceInvalidAcronym(boolean)", "public void setReplaceInvalidAcronym(boolean)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yychar()", "public final int yychar()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyclose()", "public final void yyclose() throws java.io.IOException"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yyreset(java.io.Reader)", "public final void yyreset(java.io.Reader)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yystate()", "public final int yystate()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yybegin(int)", "public final void yybegin(int)"], ["java.lang.String", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yytext()", "public final java.lang.String yytext()"], ["char", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yycharat(int)", "public final char yycharat(int)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yylength()", "public final int yylength()"], ["void", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.yypushback(int)", "public void yypushback(int)"], ["int", "org.apache.lucene.analysis.standard.StandardTokenizerImpl.getNextToken()", "public int getNextToken() throws java.io.IOException"], ["org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()"], ["int", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()", "public int getFlags()"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)", "public void setFlags(int)"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()", "public int startOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int, int)", "public void setOffset(int, int)"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()", "public int endOffset()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()"], ["org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.index.Payload)", "public org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.index.Payload)"], ["org.apache.lucene.index.Payload", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()", "public org.apache.lucene.index.Payload getPayload()"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(org.apache.lucene.index.Payload)", "public void setPayload(org.apache.lucene.index.Payload)"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()", "public java.lang.Object clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)", "public void setPositionIncrement(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()", "public int getPositionIncrement()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.TermAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.TermAttributeImpl()"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.term()", "public java.lang.String term()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.setTermBuffer(char[], int, int)", "public void setTermBuffer(char[], int, int)"], ["void", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.setTermBuffer(java.lang.String)", "public void setTermBuffer(java.lang.String)"], ["void", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.setTermBuffer(java.lang.String, int, int)", "public void setTermBuffer(java.lang.String, int, int)"], ["char[]", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.termBuffer()", "public char[] termBuffer()"], ["char[]", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.resizeTermBuffer(int)", "public char[] resizeTermBuffer(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.termLength()", "public int termLength()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.setTermLength(int)", "public void setTermLength(int)"], ["int", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.clear()", "public void clear()"], ["java.lang.Object", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.clone()", "public java.lang.Object clone()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.analysis.tokenattributes.TermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()", "public org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()"], ["org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)", "public org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)"], ["java.lang.String", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()", "public java.lang.String type()"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(java.lang.String)", "public void setType(java.lang.String)"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()", "public void clear()"], ["boolean", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)", "public void copyTo(org.apache.lucene.util.AttributeImpl)"], ["void", "org.apache.lucene.document.AbstractField.setBoost(float)", "public void setBoost(float)"], ["float", "org.apache.lucene.document.AbstractField.getBoost()", "public float getBoost()"], ["java.lang.String", "org.apache.lucene.document.AbstractField.name()", "public java.lang.String name()"], ["boolean", "org.apache.lucene.document.AbstractField.isStored()", "public final boolean isStored()"], ["boolean", "org.apache.lucene.document.AbstractField.isIndexed()", "public final boolean isIndexed()"], ["boolean", "org.apache.lucene.document.AbstractField.isTokenized()", "public final boolean isTokenized()"], ["boolean", "org.apache.lucene.document.AbstractField.isTermVectorStored()", "public final boolean isTermVectorStored()"], ["boolean", "org.apache.lucene.document.AbstractField.isStoreOffsetWithTermVector()", "public boolean isStoreOffsetWithTermVector()"], ["boolean", "org.apache.lucene.document.AbstractField.isStorePositionWithTermVector()", "public boolean isStorePositionWithTermVector()"], ["boolean", "org.apache.lucene.document.AbstractField.isBinary()", "public final boolean isBinary()"], ["byte[]", "org.apache.lucene.document.AbstractField.getBinaryValue()", "public byte[] getBinaryValue()"], ["byte[]", "org.apache.lucene.document.AbstractField.getBinaryValue(byte[])", "public byte[] getBinaryValue(byte[])"], ["int", "org.apache.lucene.document.AbstractField.getBinaryLength()", "public int getBinaryLength()"], ["int", "org.apache.lucene.document.AbstractField.getBinaryOffset()", "public int getBinaryOffset()"], ["boolean", "org.apache.lucene.document.AbstractField.getOmitNorms()", "public boolean getOmitNorms()"], ["boolean", "org.apache.lucene.document.AbstractField.getOmitTermFreqAndPositions()", "public boolean getOmitTermFreqAndPositions()"], ["void", "org.apache.lucene.document.AbstractField.setOmitNorms(boolean)", "public void setOmitNorms(boolean)"], ["void", "org.apache.lucene.document.AbstractField.setOmitTermFreqAndPositions(boolean)", "public void setOmitTermFreqAndPositions(boolean)"], ["boolean", "org.apache.lucene.document.AbstractField.isLazy()", "public boolean isLazy()"], ["java.lang.String", "org.apache.lucene.document.AbstractField.toString()", "public final java.lang.String toString()"], ["byte[]", "org.apache.lucene.document.CompressionTools.compress(byte[], int, int, int)", "public static byte[] compress(byte[], int, int, int)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compress(byte[], int, int)", "public static byte[] compress(byte[], int, int)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compress(byte[])", "public static byte[] compress(byte[])"], ["byte[]", "org.apache.lucene.document.CompressionTools.compressString(java.lang.String)", "public static byte[] compressString(java.lang.String)"], ["byte[]", "org.apache.lucene.document.CompressionTools.compressString(java.lang.String, int)", "public static byte[] compressString(java.lang.String, int)"], ["byte[]", "org.apache.lucene.document.CompressionTools.decompress(byte[])", "public static byte[] decompress(byte[]) throws java.util.zip.DataFormatException"], ["java.lang.String", "org.apache.lucene.document.CompressionTools.decompressString(byte[])", "public static java.lang.String decompressString(byte[]) throws java.util.zip.DataFormatException"], ["java.lang.String", "org.apache.lucene.document.DateField.MIN_DATE_STRING()", "public static java.lang.String MIN_DATE_STRING()"], ["java.lang.String", "org.apache.lucene.document.DateField.MAX_DATE_STRING()", "public static java.lang.String MAX_DATE_STRING()"], ["java.lang.String", "org.apache.lucene.document.DateField.dateToString(java.util.Date)", "public static java.lang.String dateToString(java.util.Date)"], ["java.lang.String", "org.apache.lucene.document.DateField.timeToString(long)", "public static java.lang.String timeToString(long)"], ["long", "org.apache.lucene.document.DateField.stringToTime(java.lang.String)", "public static long stringToTime(java.lang.String)"], ["java.util.Date", "org.apache.lucene.document.DateField.stringToDate(java.lang.String)", "public static java.util.Date stringToDate(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.DateTools$Resolution.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.lucene.document.DateTools.java.lang.String dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)", "public static synchronized java.lang.String dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"], ["synchronized", "org.apache.lucene.document.DateTools.java.lang.String timeToString(long, org.apache.lucene.document.DateTools$Resolution)", "public static synchronized java.lang.String timeToString(long, org.apache.lucene.document.DateTools$Resolution)"], ["synchronized", "org.apache.lucene.document.DateTools.long stringToTime(java.lang.String)", "public static synchronized long stringToTime(java.lang.String) throws java.text.ParseException"], ["synchronized", "org.apache.lucene.document.DateTools.java.util.Date stringToDate(java.lang.String)", "public static synchronized java.util.Date stringToDate(java.lang.String) throws java.text.ParseException"], ["synchronized", "org.apache.lucene.document.DateTools.java.util.Date round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)", "public static synchronized java.util.Date round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"], ["synchronized", "org.apache.lucene.document.DateTools.long round(long, org.apache.lucene.document.DateTools$Resolution)", "public static synchronized long round(long, org.apache.lucene.document.DateTools$Resolution)"], ["org.apache.lucene.document.Document", "org.apache.lucene.document.Document()", "public org.apache.lucene.document.Document()"], ["void", "org.apache.lucene.document.Document.setBoost(float)", "public void setBoost(float)"], ["float", "org.apache.lucene.document.Document.getBoost()", "public float getBoost()"], ["void", "org.apache.lucene.document.Document.add(org.apache.lucene.document.Fieldable)", "public final void add(org.apache.lucene.document.Fieldable)"], ["void", "org.apache.lucene.document.Document.removeField(java.lang.String)", "public final void removeField(java.lang.String)"], ["void", "org.apache.lucene.document.Document.removeFields(java.lang.String)", "public final void removeFields(java.lang.String)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Document.getField(java.lang.String)", "public final org.apache.lucene.document.Field getField(java.lang.String)"], ["org.apache.lucene.document.Fieldable", "org.apache.lucene.document.Document.getFieldable(java.lang.String)", "public org.apache.lucene.document.Fieldable getFieldable(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.Document.get(java.lang.String)", "public final java.lang.String get(java.lang.String)"], ["java.util.List<org.apache.lucene.document.Fieldable>", "org.apache.lucene.document.Document.getFields()", "public final java.util.List<org.apache.lucene.document.Fieldable> getFields()"], ["org.apache.lucene.document.Field[]", "org.apache.lucene.document.Document.getFields(java.lang.String)", "public final org.apache.lucene.document.Field[] getFields(java.lang.String)"], ["org.apache.lucene.document.Fieldable[]", "org.apache.lucene.document.Document.getFieldables(java.lang.String)", "public org.apache.lucene.document.Fieldable[] getFieldables(java.lang.String)"], ["java.lang.String[]", "org.apache.lucene.document.Document.getValues(java.lang.String)", "public final java.lang.String[] getValues(java.lang.String)"], ["byte[][]", "org.apache.lucene.document.Document.getBinaryValues(java.lang.String)", "public final byte[][] getBinaryValues(java.lang.String)"], ["byte[]", "org.apache.lucene.document.Document.getBinaryValue(java.lang.String)", "public final byte[] getBinaryValue(java.lang.String)"], ["java.lang.String", "org.apache.lucene.document.Document.toString()", "public final java.lang.String toString()"], ["boolean", "org.apache.lucene.document.Field$Index$1.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$1.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$1.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$2.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$2.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$2.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$3.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$3.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$3.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$4.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$4.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$4.omitNorms()", "public boolean omitNorms()"], ["boolean", "org.apache.lucene.document.Field$Index$5.isIndexed()", "public boolean isIndexed()"], ["boolean", "org.apache.lucene.document.Field$Index$5.isAnalyzed()", "public boolean isAnalyzed()"], ["boolean", "org.apache.lucene.document.Field$Index$5.omitNorms()", "public boolean omitNorms()"], ["org.apache.lucene.document.Field$Index[]", "org.apache.lucene.document.Field$Index.values()", "public static final org.apache.lucene.document.Field$Index[] values()"], ["org.apache.lucene.document.Field$Index", "org.apache.lucene.document.Field$Index.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$Index valueOf(java.lang.String)"], ["org.apache.lucene.document.Field$Index", "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean)", "public static org.apache.lucene.document.Field$Index toIndex(boolean, boolean)"], ["org.apache.lucene.document.Field$Index", "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean, boolean)", "public static org.apache.lucene.document.Field$Index toIndex(boolean, boolean, boolean)"], ["boolean", "org.apache.lucene.document.Field$Store$1.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$Store$2.isStored()", "public boolean isStored()"], ["org.apache.lucene.document.Field$Store[]", "org.apache.lucene.document.Field$Store.values()", "public static final org.apache.lucene.document.Field$Store[] values()"], ["org.apache.lucene.document.Field$Store", "org.apache.lucene.document.Field$Store.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$Store valueOf(java.lang.String)"], ["boolean", "org.apache.lucene.document.Field$TermVector$1.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$1.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$1.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$2.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$2.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$2.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$3.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$3.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$3.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$4.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$4.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$4.withOffsets()", "public boolean withOffsets()"], ["boolean", "org.apache.lucene.document.Field$TermVector$5.isStored()", "public boolean isStored()"], ["boolean", "org.apache.lucene.document.Field$TermVector$5.withPositions()", "public boolean withPositions()"], ["boolean", "org.apache.lucene.document.Field$TermVector$5.withOffsets()", "public boolean withOffsets()"], ["org.apache.lucene.document.Field$TermVector[]", "org.apache.lucene.document.Field$TermVector.values()", "public static final org.apache.lucene.document.Field$TermVector[] values()"], ["org.apache.lucene.document.Field$TermVector", "org.apache.lucene.document.Field$TermVector.valueOf(java.lang.String)", "public static org.apache.lucene.document.Field$TermVector valueOf(java.lang.String)"], ["org.apache.lucene.document.Field$TermVector", "org.apache.lucene.document.Field$TermVector.toTermVector(boolean, boolean, boolean)", "public static org.apache.lucene.document.Field$TermVector toTermVector(boolean, boolean, boolean)"], ["java.lang.String", "org.apache.lucene.document.Field.stringValue()", "public java.lang.String stringValue()"], ["java.io.Reader", "org.apache.lucene.document.Field.readerValue()", "public java.io.Reader readerValue()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.document.Field.tokenStreamValue()", "public org.apache.lucene.analysis.TokenStream tokenStreamValue()"], ["void", "org.apache.lucene.document.Field.setValue(java.lang.String)", "public void setValue(java.lang.String)"], ["void", "org.apache.lucene.document.Field.setValue(java.io.Reader)", "public void setValue(java.io.Reader)"], ["void", "org.apache.lucene.document.Field.setValue(byte[])", "public void setValue(byte[])"], ["void", "org.apache.lucene.document.Field.setValue(byte[], int, int)", "public void setValue(byte[], int, int)"], ["void", "org.apache.lucene.document.Field.setTokenStream(org.apache.lucene.analysis.TokenStream)", "public void setTokenStream(org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)", "public org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, boolean, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, boolean, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.io.Reader)", "public org.apache.lucene.document.Field(java.lang.String, java.io.Reader)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)", "public org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.Field", "org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.document.Field$Store)", "public org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.document.Field$Store)"], ["org.apache.lucene.document.FieldSelectorResult[]", "org.apache.lucene.document.FieldSelectorResult.values()", "public static final org.apache.lucene.document.FieldSelectorResult[] values()"], ["org.apache.lucene.document.FieldSelectorResult", "org.apache.lucene.document.FieldSelectorResult.valueOf(java.lang.String)", "public static org.apache.lucene.document.FieldSelectorResult valueOf(java.lang.String)"], ["org.apache.lucene.document.LoadFirstFieldSelector", "org.apache.lucene.document.LoadFirstFieldSelector()", "public org.apache.lucene.document.LoadFirstFieldSelector()"], ["org.apache.lucene.document.FieldSelectorResult", "org.apache.lucene.document.LoadFirstFieldSelector.accept(java.lang.String)", "public org.apache.lucene.document.FieldSelectorResult accept(java.lang.String)"], ["org.apache.lucene.document.MapFieldSelector", "org.apache.lucene.document.MapFieldSelector(java.util.Map<java.lang.String, org.apache.lucene.document.FieldSelectorResult>)", "public org.apache.lucene.document.MapFieldSelector(java.util.Map<java.lang.String, org.apache.lucene.document.FieldSelectorResult>)"], ["org.apache.lucene.document.MapFieldSelector", "org.apache.lucene.document.MapFieldSelector(java.util.List<java.lang.String>)", "public org.apache.lucene.document.MapFieldSelector(java.util.List<java.lang.String>)"], ["org.apache.lucene.document.MapFieldSelector", "org.apache.lucene.document.MapFieldSelector(java.lang.String...)", "public org.apache.lucene.document.MapFieldSelector(java.lang.String...)"], ["org.apache.lucene.document.FieldSelectorResult", "org.apache.lucene.document.MapFieldSelector.accept(java.lang.String)", "public org.apache.lucene.document.FieldSelectorResult accept(java.lang.String)"], ["org.apache.lucene.document.NumberTools", "org.apache.lucene.document.NumberTools()", "public org.apache.lucene.document.NumberTools()"], ["java.lang.String", "org.apache.lucene.document.NumberTools.longToString(long)", "public static java.lang.String longToString(long)"], ["long", "org.apache.lucene.document.NumberTools.stringToLong(java.lang.String)", "public static long stringToLong(java.lang.String)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField(java.lang.String)", "public org.apache.lucene.document.NumericField(java.lang.String)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField(java.lang.String, org.apache.lucene.document.Field$Store, boolean)", "public org.apache.lucene.document.NumericField(java.lang.String, org.apache.lucene.document.Field$Store, boolean)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField(java.lang.String, int)", "public org.apache.lucene.document.NumericField(java.lang.String, int)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField(java.lang.String, int, org.apache.lucene.document.Field$Store, boolean)", "public org.apache.lucene.document.NumericField(java.lang.String, int, org.apache.lucene.document.Field$Store, boolean)"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.document.NumericField.tokenStreamValue()", "public org.apache.lucene.analysis.TokenStream tokenStreamValue()"], ["byte[]", "org.apache.lucene.document.NumericField.getBinaryValue(byte[])", "public byte[] getBinaryValue(byte[])"], ["java.io.Reader", "org.apache.lucene.document.NumericField.readerValue()", "public java.io.Reader readerValue()"], ["java.lang.String", "org.apache.lucene.document.NumericField.stringValue()", "public java.lang.String stringValue()"], ["java.lang.Number", "org.apache.lucene.document.NumericField.getNumericValue()", "public java.lang.Number getNumericValue()"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField.setLongValue(long)", "public org.apache.lucene.document.NumericField setLongValue(long)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField.setIntValue(int)", "public org.apache.lucene.document.NumericField setIntValue(int)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField.setDoubleValue(double)", "public org.apache.lucene.document.NumericField setDoubleValue(double)"], ["org.apache.lucene.document.NumericField", "org.apache.lucene.document.NumericField.setFloatValue(float)", "public org.apache.lucene.document.NumericField setFloatValue(float)"], ["org.apache.lucene.document.SetBasedFieldSelector", "org.apache.lucene.document.SetBasedFieldSelector(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>)", "public org.apache.lucene.document.SetBasedFieldSelector(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>)"], ["org.apache.lucene.document.FieldSelectorResult", "org.apache.lucene.document.SetBasedFieldSelector.accept(java.lang.String)", "public org.apache.lucene.document.FieldSelectorResult accept(java.lang.String)"], ["void", "org.apache.lucene.index.AbstractAllTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.AbstractAllTermDocs.seek(org.apache.lucene.index.TermEnum)", "public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException"], ["int", "org.apache.lucene.index.AbstractAllTermDocs.doc()", "public int doc()"], ["int", "org.apache.lucene.index.AbstractAllTermDocs.freq()", "public int freq()"], ["boolean", "org.apache.lucene.index.AbstractAllTermDocs.next()", "public boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.AbstractAllTermDocs.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.AbstractAllTermDocs.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.AbstractAllTermDocs.close()", "public void close() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.AllTermDocs.isDeleted(int)", "public boolean isDeleted(int)"], ["org.apache.lucene.index.BufferedDeletes", "org.apache.lucene.index.BufferedDeletes(boolean)", "public org.apache.lucene.index.BufferedDeletes(boolean)"], ["org.apache.lucene.index.ByteBlockPool", "org.apache.lucene.index.ByteBlockPool(org.apache.lucene.index.ByteBlockPool$Allocator, boolean)", "public org.apache.lucene.index.ByteBlockPool(org.apache.lucene.index.ByteBlockPool$Allocator, boolean)"], ["void", "org.apache.lucene.index.ByteBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.index.ByteBlockPool.nextBuffer()", "public void nextBuffer()"], ["int", "org.apache.lucene.index.ByteBlockPool.newSlice(int)", "public int newSlice(int)"], ["int", "org.apache.lucene.index.ByteBlockPool.allocSlice(byte[], int)", "public int allocSlice(byte[], int)"], ["void", "org.apache.lucene.index.ByteSliceReader.init(org.apache.lucene.index.ByteBlockPool, int, int)", "public void init(org.apache.lucene.index.ByteBlockPool, int, int)"], ["boolean", "org.apache.lucene.index.ByteSliceReader.eof()", "public boolean eof()"], ["byte", "org.apache.lucene.index.ByteSliceReader.readByte()", "public byte readByte()"], ["long", "org.apache.lucene.index.ByteSliceReader.writeTo(org.apache.lucene.store.IndexOutput)", "public long writeTo(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["void", "org.apache.lucene.index.ByteSliceReader.nextSlice()", "public void nextSlice()"], ["void", "org.apache.lucene.index.ByteSliceReader.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["long", "org.apache.lucene.index.ByteSliceReader.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.index.ByteSliceReader.length()", "public long length()"], ["void", "org.apache.lucene.index.ByteSliceReader.seek(long)", "public void seek(long)"], ["void", "org.apache.lucene.index.ByteSliceReader.close()", "public void close()"], ["org.apache.lucene.index.ByteSliceWriter", "org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.index.ByteBlockPool)", "public org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.index.ByteBlockPool)"], ["void", "org.apache.lucene.index.ByteSliceWriter.init(int)", "public void init(int)"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeByte(byte)", "public void writeByte(byte)"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["int", "org.apache.lucene.index.ByteSliceWriter.getAddress()", "public int getAddress()"], ["void", "org.apache.lucene.index.ByteSliceWriter.writeVInt(int)", "public void writeVInt(int)"], ["org.apache.lucene.index.CharBlockPool", "org.apache.lucene.index.CharBlockPool(org.apache.lucene.index.DocumentsWriter)", "public org.apache.lucene.index.CharBlockPool(org.apache.lucene.index.DocumentsWriter)"], ["void", "org.apache.lucene.index.CharBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.index.CharBlockPool.nextBuffer()", "public void nextBuffer()"], ["void", "org.apache.lucene.index.CheckIndex$MySegmentTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status$FieldNormStatus", "org.apache.lucene.index.CheckIndex$Status$FieldNormStatus()", "public org.apache.lucene.index.CheckIndex$Status$FieldNormStatus()"], ["org.apache.lucene.index.CheckIndex$Status$SegmentInfoStatus", "org.apache.lucene.index.CheckIndex$Status$SegmentInfoStatus()", "public org.apache.lucene.index.CheckIndex$Status$SegmentInfoStatus()"], ["org.apache.lucene.index.CheckIndex$Status$StoredFieldStatus", "org.apache.lucene.index.CheckIndex$Status$StoredFieldStatus()", "public org.apache.lucene.index.CheckIndex$Status$StoredFieldStatus()"], ["org.apache.lucene.index.CheckIndex$Status$TermIndexStatus", "org.apache.lucene.index.CheckIndex$Status$TermIndexStatus()", "public org.apache.lucene.index.CheckIndex$Status$TermIndexStatus()"], ["org.apache.lucene.index.CheckIndex$Status$TermVectorStatus", "org.apache.lucene.index.CheckIndex$Status$TermVectorStatus()", "public org.apache.lucene.index.CheckIndex$Status$TermVectorStatus()"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex$Status()", "public org.apache.lucene.index.CheckIndex$Status()"], ["org.apache.lucene.index.CheckIndex", "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream)", "public void setInfoStream(java.io.PrintStream)"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex.checkIndex()", "public org.apache.lucene.index.CheckIndex$Status checkIndex() throws java.io.IOException"], ["org.apache.lucene.index.CheckIndex$Status", "org.apache.lucene.index.CheckIndex.checkIndex(java.util.List<java.lang.String>)", "public org.apache.lucene.index.CheckIndex$Status checkIndex(java.util.List<java.lang.String>) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.fixIndex(org.apache.lucene.index.CheckIndex$Status)", "public void fixIndex(org.apache.lucene.index.CheckIndex$Status) throws java.io.IOException"], ["void", "org.apache.lucene.index.CheckIndex.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException, java.lang.InterruptedException"], ["java.lang.Object", "org.apache.lucene.index.CompoundFileReader$CSIndexInput.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.index.CompoundFileReader$CSIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.index.CompoundFileReader$CSIndexInput.length()", "public long length()"], ["org.apache.lucene.index.CompoundFileReader", "org.apache.lucene.index.CompoundFileReader(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.index.CompoundFileReader(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.index.CompoundFileReader", "org.apache.lucene.index.CompoundFileReader(org.apache.lucene.store.Directory, java.lang.String, int)", "public org.apache.lucene.index.CompoundFileReader(org.apache.lucene.store.Directory, java.lang.String, int) throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.CompoundFileReader.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["java.lang.String", "org.apache.lucene.index.CompoundFileReader.getName()", "public java.lang.String getName()"], ["synchronized", "org.apache.lucene.index.CompoundFileReader.void close()", "public synchronized void close() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.CompoundFileReader.org.apache.lucene.store.IndexInput openInput(java.lang.String)", "public synchronized org.apache.lucene.store.IndexInput openInput(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.CompoundFileReader.org.apache.lucene.store.IndexInput openInput(java.lang.String, int)", "public synchronized org.apache.lucene.store.IndexInput openInput(java.lang.String, int) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.index.CompoundFileReader.listAll()", "public java.lang.String[] listAll()"], ["boolean", "org.apache.lucene.index.CompoundFileReader.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String)"], ["long", "org.apache.lucene.index.CompoundFileReader.fileModified(java.lang.String)", "public long fileModified(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.CompoundFileReader.touchFile(java.lang.String)", "public void touchFile(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.CompoundFileReader.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String)"], ["void", "org.apache.lucene.index.CompoundFileReader.renameFile(java.lang.String, java.lang.String)", "public void renameFile(java.lang.String, java.lang.String)"], ["long", "org.apache.lucene.index.CompoundFileReader.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.index.CompoundFileReader.createOutput(java.lang.String)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String)"], ["org.apache.lucene.store.Lock", "org.apache.lucene.index.CompoundFileReader.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["org.apache.lucene.index.CompoundFileWriter", "org.apache.lucene.index.CompoundFileWriter(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.index.CompoundFileWriter(org.apache.lucene.store.Directory, java.lang.String)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.CompoundFileWriter.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["java.lang.String", "org.apache.lucene.index.CompoundFileWriter.getName()", "public java.lang.String getName()"], ["void", "org.apache.lucene.index.CompoundFileWriter.addFile(java.lang.String)", "public void addFile(java.lang.String)"], ["void", "org.apache.lucene.index.CompoundFileWriter.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)", "public org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge)", "public synchronized void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge)"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.org.apache.lucene.index.MergePolicy$OneMerge getRunningMerge()", "public synchronized org.apache.lucene.index.MergePolicy$OneMerge getRunningMerge()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.setThreadPriority(int)", "public void setThreadPriority(int)"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run()", "public void run()"], ["java.lang.String", "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.ConcurrentMergeScheduler", "org.apache.lucene.index.ConcurrentMergeScheduler()", "public org.apache.lucene.index.ConcurrentMergeScheduler()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.setMaxThreadCount(int)", "public void setMaxThreadCount(int)"], ["int", "org.apache.lucene.index.ConcurrentMergeScheduler.getMaxThreadCount()", "public int getMaxThreadCount()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.int getMergeThreadPriority()", "public synchronized int getMergeThreadPriority()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void setMergeThreadPriority(int)", "public synchronized void setMergeThreadPriority(int)"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.close()", "public void close()"], ["synchronized", "org.apache.lucene.index.ConcurrentMergeScheduler.void sync()", "public synchronized void sync()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.merge(org.apache.lucene.index.IndexWriter)", "public void merge(org.apache.lucene.index.IndexWriter) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.ConcurrentMergeScheduler.anyUnhandledExceptions()", "public static boolean anyUnhandledExceptions()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.clearUnhandledExceptions()", "public static void clearUnhandledExceptions()"], ["void", "org.apache.lucene.index.ConcurrentMergeScheduler.setTestMode()", "public static void setTestMode()"], ["org.apache.lucene.index.CorruptIndexException", "org.apache.lucene.index.CorruptIndexException(java.lang.String)", "public org.apache.lucene.index.CorruptIndexException(java.lang.String)"], ["org.apache.lucene.index.DirectoryReader$MultiTermDocs", "org.apache.lucene.index.DirectoryReader$MultiTermDocs(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[])", "public org.apache.lucene.index.DirectoryReader$MultiTermDocs(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[])"], ["int", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.doc()", "public int doc()"], ["int", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.freq()", "public int freq()"], ["void", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.seek(org.apache.lucene.index.TermEnum)", "public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.next()", "public boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.DirectoryReader$MultiTermDocs.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader$MultiTermEnum", "org.apache.lucene.index.DirectoryReader$MultiTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[], org.apache.lucene.index.Term)", "public org.apache.lucene.index.DirectoryReader$MultiTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[], org.apache.lucene.index.Term) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader$MultiTermEnum.next()", "public boolean next() throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.DirectoryReader$MultiTermEnum.term()", "public org.apache.lucene.index.Term term()"], ["int", "org.apache.lucene.index.DirectoryReader$MultiTermEnum.docFreq()", "public int docFreq()"], ["void", "org.apache.lucene.index.DirectoryReader$MultiTermEnum.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.DirectoryReader$MultiTermPositions", "org.apache.lucene.index.DirectoryReader$MultiTermPositions(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[])", "public org.apache.lucene.index.DirectoryReader$MultiTermPositions(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[])"], ["int", "org.apache.lucene.index.DirectoryReader$MultiTermPositions.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.DirectoryReader$MultiTermPositions.getPayloadLength()", "public int getPayloadLength()"], ["byte[]", "org.apache.lucene.index.DirectoryReader$MultiTermPositions.getPayload(byte[], int)", "public byte[] getPayload(byte[], int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader$MultiTermPositions.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.index.DirectoryReader$ReaderCommit.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.index.DirectoryReader$ReaderCommit.isOptimized()", "public boolean isOptimized()"], ["java.lang.String", "org.apache.lucene.index.DirectoryReader$ReaderCommit.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.DirectoryReader$ReaderCommit.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.DirectoryReader$ReaderCommit.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["long", "org.apache.lucene.index.DirectoryReader$ReaderCommit.getVersion()", "public long getVersion()"], ["long", "org.apache.lucene.index.DirectoryReader$ReaderCommit.getGeneration()", "public long getGeneration()"], ["boolean", "org.apache.lucene.index.DirectoryReader$ReaderCommit.isDeleted()", "public boolean isDeleted()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.DirectoryReader$ReaderCommit.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.DirectoryReader$ReaderCommit.delete()", "public void delete()"], ["synchronized", "org.apache.lucene.index.DirectoryReader.java.lang.Object clone()", "public final synchronized java.lang.Object clone()"], ["synchronized", "org.apache.lucene.index.DirectoryReader.org.apache.lucene.index.IndexReader clone(boolean)", "public final synchronized org.apache.lucene.index.IndexReader clone(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.DirectoryReader.reopen()", "public final org.apache.lucene.index.IndexReader reopen() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.DirectoryReader.reopen(boolean)", "public final org.apache.lucene.index.IndexReader reopen(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.DirectoryReader.reopen(org.apache.lucene.index.IndexCommit)", "public final org.apache.lucene.index.IndexReader reopen(org.apache.lucene.index.IndexCommit) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["long", "org.apache.lucene.index.DirectoryReader.getVersion()", "public long getVersion()"], ["org.apache.lucene.index.TermFreqVector[]", "org.apache.lucene.index.DirectoryReader.getTermFreqVectors(int)", "public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.TermFreqVector", "org.apache.lucene.index.DirectoryReader.getTermFreqVector(int, java.lang.String)", "public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.DirectoryReader.getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["void", "org.apache.lucene.index.DirectoryReader.getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader.isOptimized()", "public boolean isOptimized()"], ["int", "org.apache.lucene.index.DirectoryReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.DirectoryReader.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.DirectoryReader.document(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.DirectoryReader.isDeleted(int)", "public boolean isDeleted(int)"], ["boolean", "org.apache.lucene.index.DirectoryReader.hasDeletions()", "public boolean hasDeletions()"], ["boolean", "org.apache.lucene.index.DirectoryReader.hasNorms(java.lang.String)", "public boolean hasNorms(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.DirectoryReader.byte[] norms(java.lang.String)", "public synchronized byte[] norms(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.DirectoryReader.void norms(java.lang.String, byte[], int)", "public synchronized void norms(java.lang.String, byte[], int) throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.DirectoryReader.terms()", "public org.apache.lucene.index.TermEnum terms() throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.DirectoryReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.DirectoryReader.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.DirectoryReader.termDocs()", "public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.DirectoryReader.termPositions()", "public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.DirectoryReader.getCommitUserData()", "public java.util.Map<java.lang.String, java.lang.String> getCommitUserData()"], ["boolean", "org.apache.lucene.index.DirectoryReader.isCurrent()", "public boolean isCurrent() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.DirectoryReader.getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)", "public java.util.Collection<java.lang.String> getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)"], ["org.apache.lucene.index.IndexReader[]", "org.apache.lucene.index.DirectoryReader.getSequentialSubReaders()", "public org.apache.lucene.index.IndexReader[] getSequentialSubReaders()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.DirectoryReader.directory()", "public org.apache.lucene.store.Directory directory()"], ["int", "org.apache.lucene.index.DirectoryReader.getTermInfosIndexDivisor()", "public int getTermInfosIndexDivisor()"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.DirectoryReader.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit() throws java.io.IOException"], ["java.util.Collection<org.apache.lucene.index.IndexCommit>", "org.apache.lucene.index.DirectoryReader.listCommits(org.apache.lucene.store.Directory)", "public static java.util.Collection<org.apache.lucene.index.IndexCommit> listCommits(org.apache.lucene.store.Directory) throws java.io.IOException"], ["long", "org.apache.lucene.index.DocFieldConsumers$PerDoc.sizeInBytes()", "public long sizeInBytes()"], ["void", "org.apache.lucene.index.DocFieldConsumers$PerDoc.finish()", "public void finish() throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldConsumers$PerDoc.abort()", "public void abort()"], ["org.apache.lucene.index.DocFieldConsumers", "org.apache.lucene.index.DocFieldConsumers(org.apache.lucene.index.DocFieldConsumer, org.apache.lucene.index.DocFieldConsumer)", "public org.apache.lucene.index.DocFieldConsumers(org.apache.lucene.index.DocFieldConsumer, org.apache.lucene.index.DocFieldConsumer)"], ["void", "org.apache.lucene.index.DocFieldConsumers.flush(java.util.Map<org.apache.lucene.index.DocFieldConsumerPerThread, java.util.Collection<org.apache.lucene.index.DocFieldConsumerPerField>>, org.apache.lucene.index.SegmentWriteState)", "public void flush(java.util.Map<org.apache.lucene.index.DocFieldConsumerPerThread, java.util.Collection<org.apache.lucene.index.DocFieldConsumerPerField>>, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldConsumers.closeDocStore(org.apache.lucene.index.SegmentWriteState)", "public void closeDocStore(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldConsumers.abort()", "public void abort()"], ["boolean", "org.apache.lucene.index.DocFieldConsumers.freeRAM()", "public boolean freeRAM()"], ["org.apache.lucene.index.DocFieldConsumerPerThread", "org.apache.lucene.index.DocFieldConsumers.addThread(org.apache.lucene.index.DocFieldProcessorPerThread)", "public org.apache.lucene.index.DocFieldConsumerPerThread addThread(org.apache.lucene.index.DocFieldProcessorPerThread) throws java.io.IOException"], ["org.apache.lucene.index.DocFieldConsumersPerField", "org.apache.lucene.index.DocFieldConsumersPerField(org.apache.lucene.index.DocFieldConsumersPerThread, org.apache.lucene.index.DocFieldConsumerPerField, org.apache.lucene.index.DocFieldConsumerPerField)", "public org.apache.lucene.index.DocFieldConsumersPerField(org.apache.lucene.index.DocFieldConsumersPerThread, org.apache.lucene.index.DocFieldConsumerPerField, org.apache.lucene.index.DocFieldConsumerPerField)"], ["void", "org.apache.lucene.index.DocFieldConsumersPerField.processFields(org.apache.lucene.document.Fieldable[], int)", "public void processFields(org.apache.lucene.document.Fieldable[], int) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldConsumersPerField.abort()", "public void abort()"], ["org.apache.lucene.index.DocFieldConsumersPerThread", "org.apache.lucene.index.DocFieldConsumersPerThread(org.apache.lucene.index.DocFieldProcessorPerThread, org.apache.lucene.index.DocFieldConsumers, org.apache.lucene.index.DocFieldConsumerPerThread, org.apache.lucene.index.DocFieldConsumerPerThread)", "public org.apache.lucene.index.DocFieldConsumersPerThread(org.apache.lucene.index.DocFieldProcessorPerThread, org.apache.lucene.index.DocFieldConsumers, org.apache.lucene.index.DocFieldConsumerPerThread, org.apache.lucene.index.DocFieldConsumerPerThread)"], ["void", "org.apache.lucene.index.DocFieldConsumersPerThread.startDocument()", "public void startDocument() throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldConsumersPerThread.abort()", "public void abort()"], ["org.apache.lucene.index.DocumentsWriter$DocWriter", "org.apache.lucene.index.DocFieldConsumersPerThread.finishDocument()", "public org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() throws java.io.IOException"], ["org.apache.lucene.index.DocFieldConsumerPerField", "org.apache.lucene.index.DocFieldConsumersPerThread.addField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocFieldConsumerPerField addField(org.apache.lucene.index.FieldInfo)"], ["org.apache.lucene.index.DocFieldProcessor", "org.apache.lucene.index.DocFieldProcessor(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.DocFieldConsumer)", "public org.apache.lucene.index.DocFieldProcessor(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.DocFieldConsumer)"], ["void", "org.apache.lucene.index.DocFieldProcessor.closeDocStore(org.apache.lucene.index.SegmentWriteState)", "public void closeDocStore(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldProcessor.flush(java.util.Collection<org.apache.lucene.index.DocConsumerPerThread>, org.apache.lucene.index.SegmentWriteState)", "public void flush(java.util.Collection<org.apache.lucene.index.DocConsumerPerThread>, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldProcessor.abort()", "public void abort()"], ["boolean", "org.apache.lucene.index.DocFieldProcessor.freeRAM()", "public boolean freeRAM()"], ["org.apache.lucene.index.DocConsumerPerThread", "org.apache.lucene.index.DocFieldProcessor.addThread(org.apache.lucene.index.DocumentsWriterThreadState)", "public org.apache.lucene.index.DocConsumerPerThread addThread(org.apache.lucene.index.DocumentsWriterThreadState) throws java.io.IOException"], ["org.apache.lucene.index.DocFieldProcessorPerField", "org.apache.lucene.index.DocFieldProcessorPerField(org.apache.lucene.index.DocFieldProcessorPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocFieldProcessorPerField(org.apache.lucene.index.DocFieldProcessorPerThread, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.DocFieldProcessorPerField.abort()", "public void abort()"], ["long", "org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc.sizeInBytes()", "public long sizeInBytes()"], ["void", "org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc.finish()", "public void finish() throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldProcessorPerThread$PerDoc.abort()", "public void abort()"], ["org.apache.lucene.index.DocFieldProcessorPerThread", "org.apache.lucene.index.DocFieldProcessorPerThread(org.apache.lucene.index.DocumentsWriterThreadState, org.apache.lucene.index.DocFieldProcessor)", "public org.apache.lucene.index.DocFieldProcessorPerThread(org.apache.lucene.index.DocumentsWriterThreadState, org.apache.lucene.index.DocFieldProcessor) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocFieldProcessorPerThread.abort()", "public void abort()"], ["java.util.Collection<org.apache.lucene.index.DocFieldConsumerPerField>", "org.apache.lucene.index.DocFieldProcessorPerThread.fields()", "public java.util.Collection<org.apache.lucene.index.DocFieldConsumerPerField> fields()"], ["org.apache.lucene.index.DocumentsWriter$DocWriter", "org.apache.lucene.index.DocFieldProcessorPerThread.processDocument()", "public org.apache.lucene.index.DocumentsWriter$DocWriter processDocument() throws java.io.IOException"], ["org.apache.lucene.index.DocInverter", "org.apache.lucene.index.DocInverter(org.apache.lucene.index.InvertedDocConsumer, org.apache.lucene.index.InvertedDocEndConsumer)", "public org.apache.lucene.index.DocInverter(org.apache.lucene.index.InvertedDocConsumer, org.apache.lucene.index.InvertedDocEndConsumer)"], ["void", "org.apache.lucene.index.DocInverter.closeDocStore(org.apache.lucene.index.SegmentWriteState)", "public void closeDocStore(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.DocInverter.freeRAM()", "public boolean freeRAM()"], ["org.apache.lucene.index.DocFieldConsumerPerThread", "org.apache.lucene.index.DocInverter.addThread(org.apache.lucene.index.DocFieldProcessorPerThread)", "public org.apache.lucene.index.DocFieldConsumerPerThread addThread(org.apache.lucene.index.DocFieldProcessorPerThread)"], ["org.apache.lucene.index.DocInverterPerField", "org.apache.lucene.index.DocInverterPerField(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocInverterPerField(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.DocInverterPerField.processFields(org.apache.lucene.document.Fieldable[], int)", "public void processFields(org.apache.lucene.document.Fieldable[], int) throws java.io.IOException"], ["void", "org.apache.lucene.index.DocInverterPerThread$SingleTokenAttributeSource.reinit(java.lang.String, int, int)", "public void reinit(java.lang.String, int, int)"], ["org.apache.lucene.index.DocInverterPerThread", "org.apache.lucene.index.DocInverterPerThread(org.apache.lucene.index.DocFieldProcessorPerThread, org.apache.lucene.index.DocInverter)", "public org.apache.lucene.index.DocInverterPerThread(org.apache.lucene.index.DocFieldProcessorPerThread, org.apache.lucene.index.DocInverter)"], ["void", "org.apache.lucene.index.DocInverterPerThread.startDocument()", "public void startDocument() throws java.io.IOException"], ["org.apache.lucene.index.DocumentsWriter$DocWriter", "org.apache.lucene.index.DocInverterPerThread.finishDocument()", "public org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() throws java.io.IOException"], ["org.apache.lucene.index.DocFieldConsumerPerField", "org.apache.lucene.index.DocInverterPerThread.addField(org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.DocFieldConsumerPerField addField(org.apache.lucene.index.FieldInfo)"], ["boolean", "org.apache.lucene.index.DocumentsWriter$DocState.testPoint(java.lang.String)", "public boolean testPoint(java.lang.String)"], ["void", "org.apache.lucene.index.DocumentsWriter$DocState.clear()", "public void clear()"], ["org.apache.lucene.index.DocumentsWriter$WaitQueue", "org.apache.lucene.index.DocumentsWriter$WaitQueue(org.apache.lucene.index.DocumentsWriter)", "public org.apache.lucene.index.DocumentsWriter$WaitQueue(org.apache.lucene.index.DocumentsWriter)"], ["synchronized", "org.apache.lucene.index.DocumentsWriter$WaitQueue.boolean add(org.apache.lucene.index.DocumentsWriter$DocWriter)", "public synchronized boolean add(org.apache.lucene.index.DocumentsWriter$DocWriter) throws java.io.IOException"], ["org.apache.lucene.index.DocumentsWriterThreadState", "org.apache.lucene.index.DocumentsWriterThreadState(org.apache.lucene.index.DocumentsWriter)", "public org.apache.lucene.index.DocumentsWriterThreadState(org.apache.lucene.index.DocumentsWriter) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.FieldInfo.clone()", "public java.lang.Object clone()"], ["synchronized", "org.apache.lucene.index.FieldInfos.java.lang.Object clone()", "public synchronized java.lang.Object clone()"], ["synchronized", "org.apache.lucene.index.FieldInfos.void add(org.apache.lucene.document.Document)", "public synchronized void add(org.apache.lucene.document.Document)"], ["synchronized", "org.apache.lucene.index.FieldInfos.void addIndexed(java.util.Collection<java.lang.String>, boolean, boolean, boolean)", "public synchronized void addIndexed(java.util.Collection<java.lang.String>, boolean, boolean, boolean)"], ["synchronized", "org.apache.lucene.index.FieldInfos.void add(java.util.Collection<java.lang.String>, boolean)", "public synchronized void add(java.util.Collection<java.lang.String>, boolean)"], ["synchronized", "org.apache.lucene.index.FieldInfos.void add(java.lang.String, boolean)", "public synchronized void add(java.lang.String, boolean)"], ["synchronized", "org.apache.lucene.index.FieldInfos.void add(java.lang.String, boolean, boolean)", "public synchronized void add(java.lang.String, boolean, boolean)"], ["synchronized", "org.apache.lucene.index.FieldInfos.void add(java.lang.String, boolean, boolean, boolean, boolean)", "public synchronized void add(java.lang.String, boolean, boolean, boolean, boolean)"], ["synchronized", "org.apache.lucene.index.FieldInfos.void add(java.lang.String, boolean, boolean, boolean, boolean, boolean)", "public synchronized void add(java.lang.String, boolean, boolean, boolean, boolean, boolean)"], ["synchronized", "org.apache.lucene.index.FieldInfos.org.apache.lucene.index.FieldInfo add(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean)", "public synchronized org.apache.lucene.index.FieldInfo add(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean)"], ["int", "org.apache.lucene.index.FieldInfos.fieldNumber(java.lang.String)", "public int fieldNumber(java.lang.String)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos.fieldInfo(java.lang.String)", "public org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.FieldInfos.fieldName(int)", "public java.lang.String fieldName(int)"], ["org.apache.lucene.index.FieldInfo", "org.apache.lucene.index.FieldInfos.fieldInfo(int)", "public org.apache.lucene.index.FieldInfo fieldInfo(int)"], ["int", "org.apache.lucene.index.FieldInfos.size()", "public int size()"], ["boolean", "org.apache.lucene.index.FieldInfos.hasVectors()", "public boolean hasVectors()"], ["void", "org.apache.lucene.index.FieldInfos.write(org.apache.lucene.store.Directory, java.lang.String)", "public void write(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.FieldInfos.write(org.apache.lucene.store.IndexOutput)", "public void write(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["org.apache.lucene.index.FieldInvertState", "org.apache.lucene.index.FieldInvertState()", "public org.apache.lucene.index.FieldInvertState()"], ["org.apache.lucene.index.FieldInvertState", "org.apache.lucene.index.FieldInvertState(int, int, int, int, float)", "public org.apache.lucene.index.FieldInvertState(int, int, int, int, float)"], ["int", "org.apache.lucene.index.FieldInvertState.getPosition()", "public int getPosition()"], ["int", "org.apache.lucene.index.FieldInvertState.getLength()", "public int getLength()"], ["int", "org.apache.lucene.index.FieldInvertState.getNumOverlap()", "public int getNumOverlap()"], ["int", "org.apache.lucene.index.FieldInvertState.getOffset()", "public int getOffset()"], ["float", "org.apache.lucene.index.FieldInvertState.getBoost()", "public float getBoost()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.index.FieldInvertState.getAttributeSource()", "public org.apache.lucene.util.AttributeSource getAttributeSource()"], ["org.apache.lucene.index.FieldReaderException", "org.apache.lucene.index.FieldReaderException()", "public org.apache.lucene.index.FieldReaderException()"], ["org.apache.lucene.index.FieldReaderException", "org.apache.lucene.index.FieldReaderException(java.lang.Throwable)", "public org.apache.lucene.index.FieldReaderException(java.lang.Throwable)"], ["org.apache.lucene.index.FieldReaderException", "org.apache.lucene.index.FieldReaderException(java.lang.String)", "public org.apache.lucene.index.FieldReaderException(java.lang.String)"], ["org.apache.lucene.index.FieldReaderException", "org.apache.lucene.index.FieldReaderException(java.lang.String, java.lang.Throwable)", "public org.apache.lucene.index.FieldReaderException(java.lang.String, java.lang.Throwable)"], ["org.apache.lucene.index.FieldSortedTermVectorMapper", "org.apache.lucene.index.FieldSortedTermVectorMapper(java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)", "public org.apache.lucene.index.FieldSortedTermVectorMapper(java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)"], ["org.apache.lucene.index.FieldSortedTermVectorMapper", "org.apache.lucene.index.FieldSortedTermVectorMapper(boolean, boolean, java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)", "public org.apache.lucene.index.FieldSortedTermVectorMapper(boolean, boolean, java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)"], ["void", "org.apache.lucene.index.FieldSortedTermVectorMapper.map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])", "public void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])"], ["void", "org.apache.lucene.index.FieldSortedTermVectorMapper.setExpectations(java.lang.String, int, boolean, boolean)", "public void setExpectations(java.lang.String, int, boolean, boolean)"], ["java.util.Map<java.lang.String, java.util.SortedSet<org.apache.lucene.index.TermVectorEntry>>", "org.apache.lucene.index.FieldSortedTermVectorMapper.getFieldToTerms()", "public java.util.Map<java.lang.String, java.util.SortedSet<org.apache.lucene.index.TermVectorEntry>> getFieldToTerms()"], ["java.util.Comparator<org.apache.lucene.index.TermVectorEntry>", "org.apache.lucene.index.FieldSortedTermVectorMapper.getComparator()", "public java.util.Comparator<org.apache.lucene.index.TermVectorEntry> getComparator()"], ["org.apache.lucene.index.FieldsReader$LazyField", "org.apache.lucene.index.FieldsReader$LazyField(org.apache.lucene.index.FieldsReader, java.lang.String, org.apache.lucene.document.Field$Store, int, long, boolean, boolean)", "public org.apache.lucene.index.FieldsReader$LazyField(org.apache.lucene.index.FieldsReader, java.lang.String, org.apache.lucene.document.Field$Store, int, long, boolean, boolean)"], ["org.apache.lucene.index.FieldsReader$LazyField", "org.apache.lucene.index.FieldsReader$LazyField(org.apache.lucene.index.FieldsReader, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector, int, long, boolean, boolean)", "public org.apache.lucene.index.FieldsReader$LazyField(org.apache.lucene.index.FieldsReader, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector, int, long, boolean, boolean)"], ["java.io.Reader", "org.apache.lucene.index.FieldsReader$LazyField.readerValue()", "public java.io.Reader readerValue()"], ["org.apache.lucene.analysis.TokenStream", "org.apache.lucene.index.FieldsReader$LazyField.tokenStreamValue()", "public org.apache.lucene.analysis.TokenStream tokenStreamValue()"], ["java.lang.String", "org.apache.lucene.index.FieldsReader$LazyField.stringValue()", "public java.lang.String stringValue()"], ["long", "org.apache.lucene.index.FieldsReader$LazyField.getPointer()", "public long getPointer()"], ["void", "org.apache.lucene.index.FieldsReader$LazyField.setPointer(long)", "public void setPointer(long)"], ["int", "org.apache.lucene.index.FieldsReader$LazyField.getToRead()", "public int getToRead()"], ["void", "org.apache.lucene.index.FieldsReader$LazyField.setToRead(int)", "public void setToRead(int)"], ["byte[]", "org.apache.lucene.index.FieldsReader$LazyField.getBinaryValue(byte[])", "public byte[] getBinaryValue(byte[])"], ["java.lang.Object", "org.apache.lucene.index.FieldsReader.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.index.FilterIndexReader$FilterTermDocs", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs(org.apache.lucene.index.TermDocs)", "public org.apache.lucene.index.FilterIndexReader$FilterTermDocs(org.apache.lucene.index.TermDocs)"], ["void", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.seek(org.apache.lucene.index.TermEnum)", "public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.doc()", "public int doc()"], ["int", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.freq()", "public int freq()"], ["boolean", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.next()", "public boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterIndexReader$FilterTermDocs.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.FilterIndexReader$FilterTermEnum", "org.apache.lucene.index.FilterIndexReader$FilterTermEnum(org.apache.lucene.index.TermEnum)", "public org.apache.lucene.index.FilterIndexReader$FilterTermEnum(org.apache.lucene.index.TermEnum)"], ["boolean", "org.apache.lucene.index.FilterIndexReader$FilterTermEnum.next()", "public boolean next() throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.FilterIndexReader$FilterTermEnum.term()", "public org.apache.lucene.index.Term term()"], ["int", "org.apache.lucene.index.FilterIndexReader$FilterTermEnum.docFreq()", "public int docFreq()"], ["void", "org.apache.lucene.index.FilterIndexReader$FilterTermEnum.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.FilterIndexReader$FilterTermPositions", "org.apache.lucene.index.FilterIndexReader$FilterTermPositions(org.apache.lucene.index.TermPositions)", "public org.apache.lucene.index.FilterIndexReader$FilterTermPositions(org.apache.lucene.index.TermPositions)"], ["int", "org.apache.lucene.index.FilterIndexReader$FilterTermPositions.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterIndexReader$FilterTermPositions.getPayloadLength()", "public int getPayloadLength()"], ["byte[]", "org.apache.lucene.index.FilterIndexReader$FilterTermPositions.getPayload(byte[], int)", "public byte[] getPayload(byte[], int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterIndexReader$FilterTermPositions.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["org.apache.lucene.index.FilterIndexReader", "org.apache.lucene.index.FilterIndexReader(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.index.FilterIndexReader(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.FilterIndexReader.directory()", "public org.apache.lucene.store.Directory directory()"], ["org.apache.lucene.index.TermFreqVector[]", "org.apache.lucene.index.FilterIndexReader.getTermFreqVectors(int)", "public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.TermFreqVector", "org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int, java.lang.String)", "public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterIndexReader.getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterIndexReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.FilterIndexReader.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.FilterIndexReader.document(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterIndexReader.isDeleted(int)", "public boolean isDeleted(int)"], ["boolean", "org.apache.lucene.index.FilterIndexReader.hasDeletions()", "public boolean hasDeletions()"], ["boolean", "org.apache.lucene.index.FilterIndexReader.hasNorms(java.lang.String)", "public boolean hasNorms(java.lang.String) throws java.io.IOException"], ["byte[]", "org.apache.lucene.index.FilterIndexReader.norms(java.lang.String)", "public byte[] norms(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.FilterIndexReader.norms(java.lang.String, byte[], int)", "public void norms(java.lang.String, byte[], int) throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.FilterIndexReader.terms()", "public org.apache.lucene.index.TermEnum terms() throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.FilterIndexReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.FilterIndexReader.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.FilterIndexReader.termDocs()", "public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.FilterIndexReader.termDocs(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.FilterIndexReader.termPositions()", "public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.FilterIndexReader.getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)", "public java.util.Collection<java.lang.String> getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)"], ["long", "org.apache.lucene.index.FilterIndexReader.getVersion()", "public long getVersion()"], ["boolean", "org.apache.lucene.index.FilterIndexReader.isCurrent()", "public boolean isCurrent() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.FilterIndexReader.isOptimized()", "public boolean isOptimized()"], ["org.apache.lucene.index.IndexReader[]", "org.apache.lucene.index.FilterIndexReader.getSequentialSubReaders()", "public org.apache.lucene.index.IndexReader[] getSequentialSubReaders()"], ["java.lang.Object", "org.apache.lucene.index.FilterIndexReader.getFieldCacheKey()", "public java.lang.Object getFieldCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.FilterIndexReader.getDeletesCacheKey()", "public java.lang.Object getDeletesCacheKey()"], ["org.apache.lucene.index.FormatPostingsFieldsWriter", "org.apache.lucene.index.FormatPostingsFieldsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.FieldInfos)", "public org.apache.lucene.index.FormatPostingsFieldsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.index.FieldInfos) throws java.io.IOException"], ["org.apache.lucene.index.FreqProxFieldMergeState", "org.apache.lucene.index.FreqProxFieldMergeState(org.apache.lucene.index.FreqProxTermsWriterPerField)", "public org.apache.lucene.index.FreqProxFieldMergeState(org.apache.lucene.index.FreqProxTermsWriterPerField)"], ["boolean", "org.apache.lucene.index.FreqProxFieldMergeState.nextDoc()", "public boolean nextDoc() throws java.io.IOException"], ["org.apache.lucene.index.TermsHashConsumerPerThread", "org.apache.lucene.index.FreqProxTermsWriter.addThread(org.apache.lucene.index.TermsHashPerThread)", "public org.apache.lucene.index.TermsHashConsumerPerThread addThread(org.apache.lucene.index.TermsHashPerThread)"], ["void", "org.apache.lucene.index.FreqProxTermsWriter.flush(java.util.Map<org.apache.lucene.index.TermsHashConsumerPerThread, java.util.Collection<org.apache.lucene.index.TermsHashConsumerPerField>>, org.apache.lucene.index.SegmentWriteState)", "public void flush(java.util.Map<org.apache.lucene.index.TermsHashConsumerPerThread, java.util.Collection<org.apache.lucene.index.TermsHashConsumerPerField>>, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["org.apache.lucene.index.FreqProxTermsWriterPerField", "org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FreqProxTermsWriterPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FreqProxTermsWriterPerThread, org.apache.lucene.index.FieldInfo)"], ["int", "org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(org.apache.lucene.index.FreqProxTermsWriterPerField)", "public int compareTo(org.apache.lucene.index.FreqProxTermsWriterPerField)"], ["void", "org.apache.lucene.index.FreqProxTermsWriterPerField.abort()", "public void abort()"], ["int", "org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.FreqProxTermsWriterPerThread", "org.apache.lucene.index.FreqProxTermsWriterPerThread(org.apache.lucene.index.TermsHashPerThread)", "public org.apache.lucene.index.FreqProxTermsWriterPerThread(org.apache.lucene.index.TermsHashPerThread)"], ["org.apache.lucene.index.TermsHashConsumerPerField", "org.apache.lucene.index.FreqProxTermsWriterPerThread.addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.FreqProxTermsWriterPerThread.abort()", "public void abort()"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.IndexCommit()", "public org.apache.lucene.index.IndexCommit()"], ["boolean", "org.apache.lucene.index.IndexCommit.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.IndexCommit.hashCode()", "public int hashCode()"], ["long", "org.apache.lucene.index.IndexCommit.getTimestamp()", "public long getTimestamp() throws java.io.IOException"], ["org.apache.lucene.index.IndexFileDeleter$CommitPoint", "org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.isOptimized()", "public boolean isOptimized()"], ["java.lang.String", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames() throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["long", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getVersion()", "public long getVersion()"], ["long", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getGeneration()", "public long getGeneration()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["void", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.delete()", "public void delete()"], ["boolean", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.isDeleted()", "public boolean isDeleted()"], ["int", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.compareTo(org.apache.lucene.index.IndexFileDeleter$CommitPoint)", "public int compareTo(org.apache.lucene.index.IndexFileDeleter$CommitPoint)"], ["int", "org.apache.lucene.index.IndexFileDeleter$CommitPoint.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.apache.lucene.index.IndexFileDeleter$RefCount.IncRef()", "public int IncRef()"], ["int", "org.apache.lucene.index.IndexFileDeleter$RefCount.DecRef()", "public int DecRef()"], ["org.apache.lucene.index.IndexFileDeleter", "org.apache.lucene.index.IndexFileDeleter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, java.io.PrintStream, org.apache.lucene.index.DocumentsWriter, java.util.Set<java.lang.String>)", "public org.apache.lucene.index.IndexFileDeleter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, java.io.PrintStream, org.apache.lucene.index.DocumentsWriter, java.util.Set<java.lang.String>) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()", "public org.apache.lucene.index.SegmentInfos getLastSegmentInfos()"], ["void", "org.apache.lucene.index.IndexFileDeleter.refresh(java.lang.String)", "public void refresh(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.refresh()", "public void refresh() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexFileDeleter.checkpoint(org.apache.lucene.index.SegmentInfos, boolean)", "public void checkpoint(org.apache.lucene.index.SegmentInfos, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexFileDeleter.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["boolean", "org.apache.lucene.index.IndexFileNameFilter.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["boolean", "org.apache.lucene.index.IndexFileNameFilter.isCFSFile(java.lang.String)", "public boolean isCFSFile(java.lang.String)"], ["org.apache.lucene.index.IndexFileNameFilter", "org.apache.lucene.index.IndexFileNameFilter.getFilter()", "public static org.apache.lucene.index.IndexFileNameFilter getFilter()"], ["java.lang.Object", "org.apache.lucene.index.IndexReader$1.doBody(java.lang.String)", "public java.lang.Object doBody(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.IndexReader$FieldOption.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.lucene.index.IndexReader.int getRefCount()", "public synchronized int getRefCount()"], ["synchronized", "org.apache.lucene.index.IndexReader.void incRef()", "public synchronized void incRef()"], ["synchronized", "org.apache.lucene.index.IndexReader.void decRef()", "public synchronized void decRef() throws java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory, boolean)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.store.Directory, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit, boolean)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.index.IndexCommit, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, boolean)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, boolean, int)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, boolean, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit, org.apache.lucene.index.IndexDeletionPolicy, boolean)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.index.IndexCommit, org.apache.lucene.index.IndexDeletionPolicy, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit, org.apache.lucene.index.IndexDeletionPolicy, boolean, int)", "public static org.apache.lucene.index.IndexReader open(org.apache.lucene.index.IndexCommit, org.apache.lucene.index.IndexDeletionPolicy, boolean, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.org.apache.lucene.index.IndexReader reopen()", "public synchronized org.apache.lucene.index.IndexReader reopen() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.org.apache.lucene.index.IndexReader reopen(boolean)", "public synchronized org.apache.lucene.index.IndexReader reopen(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.org.apache.lucene.index.IndexReader reopen(org.apache.lucene.index.IndexCommit)", "public synchronized org.apache.lucene.index.IndexReader reopen(org.apache.lucene.index.IndexCommit) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.java.lang.Object clone()", "public synchronized java.lang.Object clone()"], ["synchronized", "org.apache.lucene.index.IndexReader.org.apache.lucene.index.IndexReader clone(boolean)", "public synchronized org.apache.lucene.index.IndexReader clone(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexReader.directory()", "public org.apache.lucene.store.Directory directory()"], ["long", "org.apache.lucene.index.IndexReader.lastModified(org.apache.lucene.store.Directory)", "public static long lastModified(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["long", "org.apache.lucene.index.IndexReader.getCurrentVersion(org.apache.lucene.store.Directory)", "public static long getCurrentVersion(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.IndexReader.getCommitUserData(org.apache.lucene.store.Directory)", "public static java.util.Map<java.lang.String, java.lang.String> getCommitUserData(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["long", "org.apache.lucene.index.IndexReader.getVersion()", "public long getVersion()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.IndexReader.getCommitUserData()", "public java.util.Map<java.lang.String, java.lang.String> getCommitUserData()"], ["boolean", "org.apache.lucene.index.IndexReader.isCurrent()", "public boolean isCurrent() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexReader.isOptimized()", "public boolean isOptimized()"], ["boolean", "org.apache.lucene.index.IndexReader.indexExists(org.apache.lucene.store.Directory)", "public static boolean indexExists(org.apache.lucene.store.Directory) throws java.io.IOException"], ["int", "org.apache.lucene.index.IndexReader.numDeletedDocs()", "public int numDeletedDocs()"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.IndexReader.document(int)", "public org.apache.lucene.document.Document document(int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.IndexReader.hasNorms(java.lang.String)", "public boolean hasNorms(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void setNorm(int, java.lang.String, byte)", "public synchronized void setNorm(int, java.lang.String, byte) throws org.apache.lucene.index.StaleReaderException, org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexReader.setNorm(int, java.lang.String, float)", "public void setNorm(int, java.lang.String, float) throws org.apache.lucene.index.StaleReaderException, org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.IndexReader.termDocs(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.IndexReader.termPositions(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermPositions termPositions(org.apache.lucene.index.Term) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void deleteDocument(int)", "public synchronized void deleteDocument(int) throws org.apache.lucene.index.StaleReaderException, org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["int", "org.apache.lucene.index.IndexReader.deleteDocuments(org.apache.lucene.index.Term)", "public int deleteDocuments(org.apache.lucene.index.Term) throws org.apache.lucene.index.StaleReaderException, org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void undeleteAll()", "public synchronized void undeleteAll() throws org.apache.lucene.index.StaleReaderException, org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void flush()", "public final synchronized void flush() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void flush(java.util.Map<java.lang.String, java.lang.String>)", "public final synchronized void flush(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void commit(java.util.Map<java.lang.String, java.lang.String>)", "public final synchronized void commit(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexReader.void close()", "public final synchronized void close() throws java.io.IOException"], ["org.apache.lucene.index.IndexCommit", "org.apache.lucene.index.IndexReader.getIndexCommit()", "public org.apache.lucene.index.IndexCommit getIndexCommit() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexReader.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["java.util.Collection<org.apache.lucene.index.IndexCommit>", "org.apache.lucene.index.IndexReader.listCommits(org.apache.lucene.store.Directory)", "public static java.util.Collection<org.apache.lucene.index.IndexCommit> listCommits(org.apache.lucene.store.Directory) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader[]", "org.apache.lucene.index.IndexReader.getSequentialSubReaders()", "public org.apache.lucene.index.IndexReader[] getSequentialSubReaders()"], ["java.lang.Object", "org.apache.lucene.index.IndexReader.getFieldCacheKey()", "public java.lang.Object getFieldCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.IndexReader.getDeletesCacheKey()", "public java.lang.Object getDeletesCacheKey()"], ["long", "org.apache.lucene.index.IndexReader.getUniqueTermCount()", "public long getUniqueTermCount() throws java.io.IOException"], ["int", "org.apache.lucene.index.IndexReader.getTermInfosIndexDivisor()", "public int getTermInfosIndexDivisor()"], ["org.apache.lucene.index.IndexWriter$IndexReaderWarmer", "org.apache.lucene.index.IndexWriter$IndexReaderWarmer()", "public org.apache.lucene.index.IndexWriter$IndexReaderWarmer()"], ["org.apache.lucene.index.IndexWriter$MaxFieldLength", "org.apache.lucene.index.IndexWriter$MaxFieldLength(int)", "public org.apache.lucene.index.IndexWriter$MaxFieldLength(int)"], ["int", "org.apache.lucene.index.IndexWriter$MaxFieldLength.getLimit()", "public int getLimit()"], ["java.lang.String", "org.apache.lucene.index.IndexWriter$MaxFieldLength.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.boolean infoIsLive(org.apache.lucene.index.SegmentInfo)", "public synchronized boolean infoIsLive(org.apache.lucene.index.SegmentInfo)"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.SegmentInfo mapToLive(org.apache.lucene.index.SegmentInfo)", "public synchronized org.apache.lucene.index.SegmentInfo mapToLive(org.apache.lucene.index.SegmentInfo)"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.SegmentReader)", "public synchronized void release(org.apache.lucene.index.SegmentReader) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.SegmentReader, boolean)", "public synchronized void release(org.apache.lucene.index.SegmentReader, boolean) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.index.SegmentInfo, boolean, int)", "public synchronized org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.index.SegmentInfo, boolean, int) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo, boolean)", "public synchronized org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo, boolean) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo, boolean, int, int)", "public synchronized org.apache.lucene.index.SegmentReader get(org.apache.lucene.index.SegmentInfo, boolean, int, int) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.SegmentReader getIfExists(org.apache.lucene.index.SegmentInfo)", "public synchronized org.apache.lucene.index.SegmentReader getIfExists(org.apache.lucene.index.SegmentInfo) throws java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexWriter.getReader()", "public org.apache.lucene.index.IndexReader getReader() throws java.io.IOException"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.index.IndexWriter.getReader(int)", "public org.apache.lucene.index.IndexReader getReader(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.IndexWriter.numDeletedDocs(org.apache.lucene.index.SegmentInfo)", "public int numDeletedDocs(org.apache.lucene.index.SegmentInfo) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.message(java.lang.String)", "public void message(java.lang.String)"], ["boolean", "org.apache.lucene.index.IndexWriter.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["void", "org.apache.lucene.index.IndexWriter.setUseCompoundFile(boolean)", "public void setUseCompoundFile(boolean)"], ["void", "org.apache.lucene.index.IndexWriter.setSimilarity(org.apache.lucene.search.Similarity)", "public void setSimilarity(org.apache.lucene.search.Similarity)"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.index.IndexWriter.getSimilarity()", "public org.apache.lucene.search.Similarity getSimilarity()"], ["void", "org.apache.lucene.index.IndexWriter.setTermIndexInterval(int)", "public void setTermIndexInterval(int)"], ["int", "org.apache.lucene.index.IndexWriter.getTermIndexInterval()", "public int getTermIndexInterval()"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, boolean, org.apache.lucene.index.IndexWriter$MaxFieldLength)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, boolean, org.apache.lucene.index.IndexWriter$MaxFieldLength) throws org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.IndexWriter$MaxFieldLength)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.IndexWriter$MaxFieldLength) throws org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.IndexWriter$MaxFieldLength)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.IndexWriter$MaxFieldLength) throws org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, boolean, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.IndexWriter$MaxFieldLength)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, boolean, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.IndexWriter$MaxFieldLength) throws org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.index.IndexWriter", "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.IndexWriter$MaxFieldLength, org.apache.lucene.index.IndexCommit)", "public org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.IndexWriter$MaxFieldLength, org.apache.lucene.index.IndexCommit) throws org.apache.lucene.index.CorruptIndexException, org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.setMergePolicy(org.apache.lucene.index.MergePolicy)", "public void setMergePolicy(org.apache.lucene.index.MergePolicy)"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.IndexWriter.getMergePolicy()", "public org.apache.lucene.index.MergePolicy getMergePolicy()"], ["synchronized", "org.apache.lucene.index.IndexWriter.void setMergeScheduler(org.apache.lucene.index.MergeScheduler)", "public synchronized void setMergeScheduler(org.apache.lucene.index.MergeScheduler) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.IndexWriter.getMergeScheduler()", "public org.apache.lucene.index.MergeScheduler getMergeScheduler()"], ["void", "org.apache.lucene.index.IndexWriter.setMaxMergeDocs(int)", "public void setMaxMergeDocs(int)"], ["int", "org.apache.lucene.index.IndexWriter.getMaxMergeDocs()", "public int getMaxMergeDocs()"], ["void", "org.apache.lucene.index.IndexWriter.setMaxFieldLength(int)", "public void setMaxFieldLength(int)"], ["int", "org.apache.lucene.index.IndexWriter.getMaxFieldLength()", "public int getMaxFieldLength()"], ["void", "org.apache.lucene.index.IndexWriter.setReaderTermsIndexDivisor(int)", "public void setReaderTermsIndexDivisor(int)"], ["int", "org.apache.lucene.index.IndexWriter.getReaderTermsIndexDivisor()", "public int getReaderTermsIndexDivisor()"], ["void", "org.apache.lucene.index.IndexWriter.setMaxBufferedDocs(int)", "public void setMaxBufferedDocs(int)"], ["int", "org.apache.lucene.index.IndexWriter.getMaxBufferedDocs()", "public int getMaxBufferedDocs()"], ["void", "org.apache.lucene.index.IndexWriter.setRAMBufferSizeMB(double)", "public void setRAMBufferSizeMB(double)"], ["double", "org.apache.lucene.index.IndexWriter.getRAMBufferSizeMB()", "public double getRAMBufferSizeMB()"], ["void", "org.apache.lucene.index.IndexWriter.setMaxBufferedDeleteTerms(int)", "public void setMaxBufferedDeleteTerms(int)"], ["int", "org.apache.lucene.index.IndexWriter.getMaxBufferedDeleteTerms()", "public int getMaxBufferedDeleteTerms()"], ["void", "org.apache.lucene.index.IndexWriter.setMergeFactor(int)", "public void setMergeFactor(int)"], ["int", "org.apache.lucene.index.IndexWriter.getMergeFactor()", "public int getMergeFactor()"], ["void", "org.apache.lucene.index.IndexWriter.setDefaultInfoStream(java.io.PrintStream)", "public static void setDefaultInfoStream(java.io.PrintStream)"], ["java.io.PrintStream", "org.apache.lucene.index.IndexWriter.getDefaultInfoStream()", "public static java.io.PrintStream getDefaultInfoStream()"], ["void", "org.apache.lucene.index.IndexWriter.setInfoStream(java.io.PrintStream)", "public void setInfoStream(java.io.PrintStream)"], ["java.io.PrintStream", "org.apache.lucene.index.IndexWriter.getInfoStream()", "public java.io.PrintStream getInfoStream()"], ["boolean", "org.apache.lucene.index.IndexWriter.verbose()", "public boolean verbose()"], ["void", "org.apache.lucene.index.IndexWriter.setWriteLockTimeout(long)", "public void setWriteLockTimeout(long)"], ["long", "org.apache.lucene.index.IndexWriter.getWriteLockTimeout()", "public long getWriteLockTimeout()"], ["void", "org.apache.lucene.index.IndexWriter.setDefaultWriteLockTimeout(long)", "public static void setDefaultWriteLockTimeout(long)"], ["long", "org.apache.lucene.index.IndexWriter.getDefaultWriteLockTimeout()", "public static long getDefaultWriteLockTimeout()"], ["void", "org.apache.lucene.index.IndexWriter.close()", "public void close() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.close(boolean)", "public void close(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.IndexWriter.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.index.IndexWriter.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int maxDoc()", "public synchronized int maxDoc()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int numDocs()", "public synchronized int numDocs() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.boolean hasDeletions()", "public synchronized boolean hasDeletions() throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addDocument(org.apache.lucene.document.Document)", "public void addDocument(org.apache.lucene.document.Document) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addDocument(org.apache.lucene.document.Document, org.apache.lucene.analysis.Analyzer)", "public void addDocument(org.apache.lucene.document.Document, org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term)", "public void deleteDocuments(org.apache.lucene.index.Term) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term...)", "public void deleteDocuments(org.apache.lucene.index.Term...) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query)", "public void deleteDocuments(org.apache.lucene.search.Query) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query...)", "public void deleteDocuments(org.apache.lucene.search.Query...) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, org.apache.lucene.document.Document)", "public void updateDocument(org.apache.lucene.index.Term, org.apache.lucene.document.Document) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, org.apache.lucene.document.Document, org.apache.lucene.analysis.Analyzer)", "public void updateDocument(org.apache.lucene.index.Term, org.apache.lucene.document.Document, org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.optimize()", "public void optimize() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.optimize(int)", "public void optimize(int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.optimize(boolean)", "public void optimize(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.optimize(int, boolean)", "public void optimize(int, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.expungeDeletes(boolean)", "public void expungeDeletes(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.expungeDeletes()", "public void expungeDeletes() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.maybeMerge()", "public final void maybeMerge() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.rollback()", "public void rollback() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void deleteAll()", "public synchronized void deleteAll() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.IndexWriter.void waitForMerges()", "public synchronized void waitForMerges()"], ["void", "org.apache.lucene.index.IndexWriter.addIndexesNoOptimize(org.apache.lucene.store.Directory...)", "public void addIndexesNoOptimize(org.apache.lucene.store.Directory...) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.index.IndexReader...)", "public void addIndexes(org.apache.lucene.index.IndexReader...) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.prepareCommit()", "public final void prepareCommit() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.prepareCommit(java.util.Map<java.lang.String, java.lang.String>)", "public final void prepareCommit(java.util.Map<java.lang.String, java.lang.String>) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.commit()", "public final void commit() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.commit(java.util.Map<java.lang.String, java.lang.String>)", "public final void commit(java.util.Map<java.lang.String, java.lang.String>) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["long", "org.apache.lucene.index.IndexWriter.ramSizeInBytes()", "public final long ramSizeInBytes()"], ["synchronized", "org.apache.lucene.index.IndexWriter.int numRamDocs()", "public final synchronized int numRamDocs()"], ["synchronized", "org.apache.lucene.index.IndexWriter.java.lang.String segString()", "public synchronized java.lang.String segString()"], ["boolean", "org.apache.lucene.index.IndexWriter.isLocked(org.apache.lucene.store.Directory)", "public static boolean isLocked(org.apache.lucene.store.Directory) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.unlock(org.apache.lucene.store.Directory)", "public static void unlock(org.apache.lucene.store.Directory) throws java.io.IOException"], ["void", "org.apache.lucene.index.IndexWriter.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)", "public void setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"], ["org.apache.lucene.index.IndexWriter$IndexReaderWarmer", "org.apache.lucene.index.IndexWriter.getMergedSegmentWarmer()", "public org.apache.lucene.index.IndexWriter$IndexReaderWarmer getMergedSegmentWarmer()"], ["org.apache.lucene.index.IntBlockPool", "org.apache.lucene.index.IntBlockPool(org.apache.lucene.index.DocumentsWriter, boolean)", "public org.apache.lucene.index.IntBlockPool(org.apache.lucene.index.DocumentsWriter, boolean)"], ["void", "org.apache.lucene.index.IntBlockPool.reset()", "public void reset()"], ["void", "org.apache.lucene.index.IntBlockPool.nextBuffer()", "public void nextBuffer()"], ["org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()", "public org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()"], ["void", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["void", "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"], ["org.apache.lucene.index.LogByteSizeMergePolicy", "org.apache.lucene.index.LogByteSizeMergePolicy(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.LogByteSizeMergePolicy(org.apache.lucene.index.IndexWriter)"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)", "public void setMaxMergeMB(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()", "public double getMaxMergeMB()"], ["void", "org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)", "public void setMinMergeMB(double)"], ["double", "org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()", "public double getMinMergeMB()"], ["org.apache.lucene.index.LogDocMergePolicy", "org.apache.lucene.index.LogDocMergePolicy(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.LogDocMergePolicy(org.apache.lucene.index.IndexWriter)"], ["void", "org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)", "public void setMinMergeDocs(int)"], ["int", "org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()", "public int getMinMergeDocs()"], ["org.apache.lucene.index.LogMergePolicy", "org.apache.lucene.index.LogMergePolicy(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.LogMergePolicy(org.apache.lucene.index.IndexWriter)"], ["double", "org.apache.lucene.index.LogMergePolicy.getNoCFSRatio()", "public double getNoCFSRatio()"], ["void", "org.apache.lucene.index.LogMergePolicy.setNoCFSRatio(double)", "public void setNoCFSRatio(double)"], ["int", "org.apache.lucene.index.LogMergePolicy.getMergeFactor()", "public int getMergeFactor()"], ["void", "org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)", "public void setMergeFactor(int)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfo)", "public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfo)"], ["void", "org.apache.lucene.index.LogMergePolicy.setUseCompoundFile(boolean)", "public void setUseCompoundFile(boolean)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.getUseCompoundFile()", "public boolean getUseCompoundFile()"], ["boolean", "org.apache.lucene.index.LogMergePolicy.useCompoundDocStore(org.apache.lucene.index.SegmentInfos)", "public boolean useCompoundDocStore(org.apache.lucene.index.SegmentInfos)"], ["void", "org.apache.lucene.index.LogMergePolicy.setUseCompoundDocStore(boolean)", "public void setUseCompoundDocStore(boolean)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.getUseCompoundDocStore()", "public boolean getUseCompoundDocStore()"], ["void", "org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)", "public void setCalibrateSizeByDeletes(boolean)"], ["boolean", "org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()", "public boolean getCalibrateSizeByDeletes()"], ["void", "org.apache.lucene.index.LogMergePolicy.close()", "public void close()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findMergesForOptimize(org.apache.lucene.index.SegmentInfos, int, java.util.Set<org.apache.lucene.index.SegmentInfo>)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMergesForOptimize(org.apache.lucene.index.SegmentInfos, int, java.util.Set<org.apache.lucene.index.SegmentInfo>) throws java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findMergesToExpungeDeletes(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMergesToExpungeDeletes(org.apache.lucene.index.SegmentInfos) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.LogMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)", "public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException"], ["void", "org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)", "public void setMaxMergeDocs(int)"], ["int", "org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()", "public int getMaxMergeDocs()"], ["org.apache.lucene.index.MergeDocIDRemapper", "org.apache.lucene.index.MergeDocIDRemapper(org.apache.lucene.index.SegmentInfos, int[][], int[], org.apache.lucene.index.MergePolicy$OneMerge, int)", "public org.apache.lucene.index.MergeDocIDRemapper(org.apache.lucene.index.SegmentInfos, int[][], int[], org.apache.lucene.index.MergePolicy$OneMerge, int)"], ["int", "org.apache.lucene.index.MergeDocIDRemapper.remap(int)", "public int remap(int)"], ["org.apache.lucene.index.MergePolicy$MergeAbortedException", "org.apache.lucene.index.MergePolicy$MergeAbortedException()", "public org.apache.lucene.index.MergePolicy$MergeAbortedException()"], ["org.apache.lucene.index.MergePolicy$MergeAbortedException", "org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)", "public org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)"], ["org.apache.lucene.index.MergePolicy$MergeException", "org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergePolicy$MergeException", "org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.MergePolicy$MergeException.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["org.apache.lucene.index.MergePolicy$MergeSpecification", "org.apache.lucene.index.MergePolicy$MergeSpecification()", "public org.apache.lucene.index.MergePolicy$MergeSpecification()"], ["void", "org.apache.lucene.index.MergePolicy$MergeSpecification.add(org.apache.lucene.index.MergePolicy$OneMerge)", "public void add(org.apache.lucene.index.MergePolicy$OneMerge)"], ["java.lang.String", "org.apache.lucene.index.MergePolicy$MergeSpecification.segString(org.apache.lucene.store.Directory)", "public java.lang.String segString(org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.MergePolicy$OneMerge", "org.apache.lucene.index.MergePolicy$OneMerge(org.apache.lucene.index.SegmentInfos, boolean)", "public org.apache.lucene.index.MergePolicy$OneMerge(org.apache.lucene.index.SegmentInfos, boolean)"], ["org.apache.lucene.index.MergePolicy", "org.apache.lucene.index.MergePolicy(org.apache.lucene.index.IndexWriter)", "public org.apache.lucene.index.MergePolicy(org.apache.lucene.index.IndexWriter)"], ["org.apache.lucene.index.MergeScheduler", "org.apache.lucene.index.MergeScheduler()", "public org.apache.lucene.index.MergeScheduler()"], ["void", "org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer.length()", "public long length()"], ["byte", "org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.index.MultiLevelSkipListReader$SkipBuffer.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.index.MultiLevelSkipListReader", "org.apache.lucene.index.MultiLevelSkipListReader(org.apache.lucene.store.IndexInput, int, int)", "public org.apache.lucene.index.MultiLevelSkipListReader(org.apache.lucene.store.IndexInput, int, int)"], ["org.apache.lucene.index.MultiReader", "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)", "public org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)"], ["org.apache.lucene.index.MultiReader", "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)", "public org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)"], ["synchronized", "org.apache.lucene.index.MultiReader.org.apache.lucene.index.IndexReader reopen()", "public synchronized org.apache.lucene.index.IndexReader reopen() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.MultiReader.java.lang.Object clone()", "public synchronized java.lang.Object clone()"], ["org.apache.lucene.index.TermFreqVector[]", "org.apache.lucene.index.MultiReader.getTermFreqVectors(int)", "public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.TermFreqVector", "org.apache.lucene.index.MultiReader.getTermFreqVector(int, java.lang.String)", "public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.MultiReader.getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["void", "org.apache.lucene.index.MultiReader.getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiReader.isOptimized()", "public boolean isOptimized()"], ["int", "org.apache.lucene.index.MultiReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.MultiReader.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.MultiReader.document(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.MultiReader.isDeleted(int)", "public boolean isDeleted(int)"], ["boolean", "org.apache.lucene.index.MultiReader.hasDeletions()", "public boolean hasDeletions()"], ["boolean", "org.apache.lucene.index.MultiReader.hasNorms(java.lang.String)", "public boolean hasNorms(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.MultiReader.byte[] norms(java.lang.String)", "public synchronized byte[] norms(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.MultiReader.void norms(java.lang.String, byte[], int)", "public synchronized void norms(java.lang.String, byte[], int) throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.MultiReader.terms()", "public org.apache.lucene.index.TermEnum terms() throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.MultiReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultiReader.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.MultiReader.termDocs()", "public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.MultiReader.termPositions()", "public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.MultiReader.getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)", "public java.util.Collection<java.lang.String> getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)"], ["boolean", "org.apache.lucene.index.MultiReader.isCurrent()", "public boolean isCurrent() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["long", "org.apache.lucene.index.MultiReader.getVersion()", "public long getVersion()"], ["org.apache.lucene.index.IndexReader[]", "org.apache.lucene.index.MultiReader.getSequentialSubReaders()", "public org.apache.lucene.index.IndexReader[] getSequentialSubReaders()"], ["boolean", "org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue.lessThan(org.apache.lucene.index.TermPositions, org.apache.lucene.index.TermPositions)", "public final boolean lessThan(org.apache.lucene.index.TermPositions, org.apache.lucene.index.TermPositions)"], ["boolean", "org.apache.lucene.index.MultipleTermPositions$TermPositionsQueue.lessThan(java.lang.Object, java.lang.Object)", "public boolean lessThan(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.index.MultipleTermPositions", "org.apache.lucene.index.MultipleTermPositions(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term[])", "public org.apache.lucene.index.MultipleTermPositions(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultipleTermPositions.next()", "public final boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.MultipleTermPositions.nextPosition()", "public final int nextPosition()"], ["boolean", "org.apache.lucene.index.MultipleTermPositions.skipTo(int)", "public final boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultipleTermPositions.doc()", "public final int doc()"], ["int", "org.apache.lucene.index.MultipleTermPositions.freq()", "public final int freq()"], ["void", "org.apache.lucene.index.MultipleTermPositions.close()", "public final void close() throws java.io.IOException"], ["void", "org.apache.lucene.index.MultipleTermPositions.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.MultipleTermPositions.seek(org.apache.lucene.index.TermEnum)", "public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultipleTermPositions.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["int", "org.apache.lucene.index.MultipleTermPositions.getPayloadLength()", "public int getPayloadLength()"], ["byte[]", "org.apache.lucene.index.MultipleTermPositions.getPayload(byte[], int)", "public byte[] getPayload(byte[], int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.MultipleTermPositions.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["org.apache.lucene.index.InvertedDocEndConsumerPerThread", "org.apache.lucene.index.NormsWriter.addThread(org.apache.lucene.index.DocInverterPerThread)", "public org.apache.lucene.index.InvertedDocEndConsumerPerThread addThread(org.apache.lucene.index.DocInverterPerThread)"], ["void", "org.apache.lucene.index.NormsWriter.abort()", "public void abort()"], ["void", "org.apache.lucene.index.NormsWriter.flush(java.util.Map<org.apache.lucene.index.InvertedDocEndConsumerPerThread, java.util.Collection<org.apache.lucene.index.InvertedDocEndConsumerPerField>>, org.apache.lucene.index.SegmentWriteState)", "public void flush(java.util.Map<org.apache.lucene.index.InvertedDocEndConsumerPerThread, java.util.Collection<org.apache.lucene.index.InvertedDocEndConsumerPerField>>, org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["void", "org.apache.lucene.index.NormsWriterPerField.reset()", "public void reset()"], ["org.apache.lucene.index.NormsWriterPerField", "org.apache.lucene.index.NormsWriterPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.NormsWriterPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.NormsWriterPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.NormsWriterPerThread, org.apache.lucene.index.FieldInfo)"], ["int", "org.apache.lucene.index.NormsWriterPerField.compareTo(org.apache.lucene.index.NormsWriterPerField)", "public int compareTo(org.apache.lucene.index.NormsWriterPerField)"], ["int", "org.apache.lucene.index.NormsWriterPerField.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.index.NormsWriterPerThread", "org.apache.lucene.index.NormsWriterPerThread(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.NormsWriter)", "public org.apache.lucene.index.NormsWriterPerThread(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.NormsWriter)"], ["void", "org.apache.lucene.index.ParallelArrayTermVectorMapper.setExpectations(java.lang.String, int, boolean, boolean)", "public void setExpectations(java.lang.String, int, boolean, boolean)"], ["void", "org.apache.lucene.index.ParallelArrayTermVectorMapper.map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])", "public void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])"], ["org.apache.lucene.index.TermFreqVector", "org.apache.lucene.index.ParallelArrayTermVectorMapper.materializeVector()", "public org.apache.lucene.index.TermFreqVector materializeVector()"], ["org.apache.lucene.index.ParallelReader$ParallelTermDocs", "org.apache.lucene.index.ParallelReader$ParallelTermDocs(org.apache.lucene.index.ParallelReader)", "public org.apache.lucene.index.ParallelReader$ParallelTermDocs(org.apache.lucene.index.ParallelReader)"], ["org.apache.lucene.index.ParallelReader$ParallelTermDocs", "org.apache.lucene.index.ParallelReader$ParallelTermDocs(org.apache.lucene.index.ParallelReader, org.apache.lucene.index.Term)", "public org.apache.lucene.index.ParallelReader$ParallelTermDocs(org.apache.lucene.index.ParallelReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.doc()", "public int doc()"], ["int", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.freq()", "public int freq()"], ["void", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.seek(org.apache.lucene.index.TermEnum)", "public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.next()", "public boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader$ParallelTermDocs.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.ParallelReader$ParallelTermEnum", "org.apache.lucene.index.ParallelReader$ParallelTermEnum(org.apache.lucene.index.ParallelReader)", "public org.apache.lucene.index.ParallelReader$ParallelTermEnum(org.apache.lucene.index.ParallelReader) throws java.io.IOException"], ["org.apache.lucene.index.ParallelReader$ParallelTermEnum", "org.apache.lucene.index.ParallelReader$ParallelTermEnum(org.apache.lucene.index.ParallelReader, org.apache.lucene.index.Term)", "public org.apache.lucene.index.ParallelReader$ParallelTermEnum(org.apache.lucene.index.ParallelReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader$ParallelTermEnum.next()", "public boolean next() throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.ParallelReader$ParallelTermEnum.term()", "public org.apache.lucene.index.Term term()"], ["int", "org.apache.lucene.index.ParallelReader$ParallelTermEnum.docFreq()", "public int docFreq()"], ["void", "org.apache.lucene.index.ParallelReader$ParallelTermEnum.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.index.ParallelReader$ParallelTermPositions", "org.apache.lucene.index.ParallelReader$ParallelTermPositions(org.apache.lucene.index.ParallelReader)", "public org.apache.lucene.index.ParallelReader$ParallelTermPositions(org.apache.lucene.index.ParallelReader)"], ["org.apache.lucene.index.ParallelReader$ParallelTermPositions", "org.apache.lucene.index.ParallelReader$ParallelTermPositions(org.apache.lucene.index.ParallelReader, org.apache.lucene.index.Term)", "public org.apache.lucene.index.ParallelReader$ParallelTermPositions(org.apache.lucene.index.ParallelReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader$ParallelTermPositions.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.ParallelReader$ParallelTermPositions.nextPosition()", "public int nextPosition() throws java.io.IOException"], ["int", "org.apache.lucene.index.ParallelReader$ParallelTermPositions.getPayloadLength()", "public int getPayloadLength()"], ["byte[]", "org.apache.lucene.index.ParallelReader$ParallelTermPositions.getPayload(byte[], int)", "public byte[] getPayload(byte[], int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader$ParallelTermPositions.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["org.apache.lucene.index.ParallelReader", "org.apache.lucene.index.ParallelReader()", "public org.apache.lucene.index.ParallelReader() throws java.io.IOException"], ["org.apache.lucene.index.ParallelReader", "org.apache.lucene.index.ParallelReader(boolean)", "public org.apache.lucene.index.ParallelReader(boolean) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader.add(org.apache.lucene.index.IndexReader)", "public void add(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader.add(org.apache.lucene.index.IndexReader, boolean)", "public void add(org.apache.lucene.index.IndexReader, boolean) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.ParallelReader.java.lang.Object clone()", "public synchronized java.lang.Object clone()"], ["synchronized", "org.apache.lucene.index.ParallelReader.org.apache.lucene.index.IndexReader reopen()", "public synchronized org.apache.lucene.index.IndexReader reopen() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["int", "org.apache.lucene.index.ParallelReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.ParallelReader.maxDoc()", "public int maxDoc()"], ["boolean", "org.apache.lucene.index.ParallelReader.hasDeletions()", "public boolean hasDeletions()"], ["boolean", "org.apache.lucene.index.ParallelReader.isDeleted(int)", "public boolean isDeleted(int)"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.ParallelReader.document(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.TermFreqVector[]", "org.apache.lucene.index.ParallelReader.getTermFreqVectors(int)", "public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException"], ["org.apache.lucene.index.TermFreqVector", "org.apache.lucene.index.ParallelReader.getTermFreqVector(int, java.lang.String)", "public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader.getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader.getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader.hasNorms(java.lang.String)", "public boolean hasNorms(java.lang.String) throws java.io.IOException"], ["byte[]", "org.apache.lucene.index.ParallelReader.norms(java.lang.String)", "public byte[] norms(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.ParallelReader.norms(java.lang.String, byte[], int)", "public void norms(java.lang.String, byte[], int) throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.ParallelReader.terms()", "public org.apache.lucene.index.TermEnum terms() throws java.io.IOException"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.ParallelReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.ParallelReader.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.ParallelReader.termDocs(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.ParallelReader.termDocs()", "public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.ParallelReader.termPositions(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermPositions termPositions(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.ParallelReader.termPositions()", "public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader.isCurrent()", "public boolean isCurrent() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.ParallelReader.isOptimized()", "public boolean isOptimized()"], ["long", "org.apache.lucene.index.ParallelReader.getVersion()", "public long getVersion()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.ParallelReader.getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)", "public java.util.Collection<java.lang.String> getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)"], ["org.apache.lucene.index.Payload", "org.apache.lucene.index.Payload()", "public org.apache.lucene.index.Payload()"], ["org.apache.lucene.index.Payload", "org.apache.lucene.index.Payload(byte[])", "public org.apache.lucene.index.Payload(byte[])"], ["org.apache.lucene.index.Payload", "org.apache.lucene.index.Payload(byte[], int, int)", "public org.apache.lucene.index.Payload(byte[], int, int)"], ["void", "org.apache.lucene.index.Payload.setData(byte[])", "public void setData(byte[])"], ["void", "org.apache.lucene.index.Payload.setData(byte[], int, int)", "public void setData(byte[], int, int)"], ["byte[]", "org.apache.lucene.index.Payload.getData()", "public byte[] getData()"], ["int", "org.apache.lucene.index.Payload.getOffset()", "public int getOffset()"], ["int", "org.apache.lucene.index.Payload.length()", "public int length()"], ["byte", "org.apache.lucene.index.Payload.byteAt(int)", "public byte byteAt(int)"], ["byte[]", "org.apache.lucene.index.Payload.toByteArray()", "public byte[] toByteArray()"], ["void", "org.apache.lucene.index.Payload.copyTo(byte[], int)", "public void copyTo(byte[], int)"], ["java.lang.Object", "org.apache.lucene.index.Payload.clone()", "public java.lang.Object clone()"], ["boolean", "org.apache.lucene.index.Payload.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.Payload.hashCode()", "public int hashCode()"], ["org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo", "org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo(int, boolean)", "public org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo(int, boolean)"], ["int", "org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo.getPosition()", "public int getPosition()"], ["java.util.List<java.lang.String>", "org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo.getTerms()", "public java.util.List<java.lang.String> getTerms()"], ["java.util.List<org.apache.lucene.index.TermVectorOffsetInfo>", "org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo.getOffsets()", "public java.util.List<org.apache.lucene.index.TermVectorOffsetInfo> getOffsets()"], ["org.apache.lucene.index.PositionBasedTermVectorMapper", "org.apache.lucene.index.PositionBasedTermVectorMapper()", "public org.apache.lucene.index.PositionBasedTermVectorMapper()"], ["org.apache.lucene.index.PositionBasedTermVectorMapper", "org.apache.lucene.index.PositionBasedTermVectorMapper(boolean)", "public org.apache.lucene.index.PositionBasedTermVectorMapper(boolean)"], ["boolean", "org.apache.lucene.index.PositionBasedTermVectorMapper.isIgnoringPositions()", "public boolean isIgnoringPositions()"], ["void", "org.apache.lucene.index.PositionBasedTermVectorMapper.map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])", "public void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])"], ["void", "org.apache.lucene.index.PositionBasedTermVectorMapper.setExpectations(java.lang.String, int, boolean, boolean)", "public void setExpectations(java.lang.String, int, boolean, boolean)"], ["java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo>>", "org.apache.lucene.index.PositionBasedTermVectorMapper.getFieldToTerms()", "public java.util.Map<java.lang.String, java.util.Map<java.lang.Integer, org.apache.lucene.index.PositionBasedTermVectorMapper$TVPositionInfo>> getFieldToTerms()"], ["boolean", "org.apache.lucene.index.ReadOnlySegmentReader.isDeleted(int)", "public boolean isDeleted(int)"], ["int", "org.apache.lucene.index.ReusableStringReader.read(char[])", "public int read(char[])"], ["int", "org.apache.lucene.index.ReusableStringReader.read(char[], int, int)", "public int read(char[], int, int)"], ["void", "org.apache.lucene.index.ReusableStringReader.close()", "public void close()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.index.SegmentInfo(java.lang.String, int, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.SegmentInfo(java.lang.String, int, org.apache.lucene.store.Directory)"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.index.SegmentInfo(java.lang.String, int, org.apache.lucene.store.Directory, boolean, boolean)", "public org.apache.lucene.index.SegmentInfo(java.lang.String, int, org.apache.lucene.store.Directory, boolean, boolean)"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.index.SegmentInfo(java.lang.String, int, org.apache.lucene.store.Directory, boolean, boolean, int, java.lang.String, boolean, boolean)", "public org.apache.lucene.index.SegmentInfo(java.lang.String, int, org.apache.lucene.store.Directory, boolean, boolean, int, java.lang.String, boolean, boolean)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfo.getDiagnostics()", "public java.util.Map<java.lang.String, java.lang.String> getDiagnostics()"], ["long", "org.apache.lucene.index.SegmentInfo.sizeInBytes()", "public long sizeInBytes() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentInfo.hasDeletions()", "public boolean hasDeletions() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfo.clone()", "public java.lang.Object clone()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.getDelFileName()", "public java.lang.String getDelFileName()"], ["boolean", "org.apache.lucene.index.SegmentInfo.hasSeparateNorms(int)", "public boolean hasSeparateNorms(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentInfo.hasSeparateNorms()", "public boolean hasSeparateNorms() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.getNormFileName(int)", "public java.lang.String getNormFileName(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentInfo.getUseCompoundFile()", "public boolean getUseCompoundFile() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentInfo.getDelCount()", "public int getDelCount() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentInfo.getDocStoreOffset()", "public int getDocStoreOffset()"], ["boolean", "org.apache.lucene.index.SegmentInfo.getDocStoreIsCompoundFile()", "public boolean getDocStoreIsCompoundFile()"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.getDocStoreSegment()", "public java.lang.String getDocStoreSegment()"], ["boolean", "org.apache.lucene.index.SegmentInfo.getHasProx()", "public boolean getHasProx()"], ["java.util.List<java.lang.String>", "org.apache.lucene.index.SegmentInfo.files()", "public java.util.List<java.lang.String> files() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfo.segString(org.apache.lucene.store.Directory)", "public java.lang.String segString(org.apache.lucene.store.Directory)"], ["boolean", "org.apache.lucene.index.SegmentInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.SegmentInfo.hashCode()", "public int hashCode()"], ["org.apache.lucene.index.SegmentInfos$FindSegmentsFile", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)", "public org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run()", "public java.lang.Object run() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(org.apache.lucene.index.IndexCommit)", "public java.lang.Object run(org.apache.lucene.index.IndexCommit) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos()", "public org.apache.lucene.index.SegmentInfos()"], ["org.apache.lucene.index.SegmentInfo", "org.apache.lucene.index.SegmentInfos.info(int)", "public final org.apache.lucene.index.SegmentInfo info(int)"], ["long", "org.apache.lucene.index.SegmentInfos.getCurrentSegmentGeneration(java.lang.String[])", "public static long getCurrentSegmentGeneration(java.lang.String[])"], ["long", "org.apache.lucene.index.SegmentInfos.getCurrentSegmentGeneration(org.apache.lucene.store.Directory)", "public static long getCurrentSegmentGeneration(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getCurrentSegmentFileName(java.lang.String[])", "public static java.lang.String getCurrentSegmentFileName(java.lang.String[]) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getCurrentSegmentFileName(org.apache.lucene.store.Directory)", "public static java.lang.String getCurrentSegmentFileName(org.apache.lucene.store.Directory) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getCurrentSegmentFileName()", "public java.lang.String getCurrentSegmentFileName()"], ["long", "org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(java.lang.String)", "public static long generationFromSegmentsFileName(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.SegmentInfos.getNextSegmentFileName()", "public java.lang.String getNextSegmentFileName()"], ["void", "org.apache.lucene.index.SegmentInfos.read(org.apache.lucene.store.Directory, java.lang.String)", "public final void read(org.apache.lucene.store.Directory, java.lang.String) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.SegmentInfos.read(org.apache.lucene.store.Directory)", "public final void read(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["java.lang.Object", "org.apache.lucene.index.SegmentInfos.clone()", "public java.lang.Object clone()"], ["long", "org.apache.lucene.index.SegmentInfos.getVersion()", "public long getVersion()"], ["long", "org.apache.lucene.index.SegmentInfos.getGeneration()", "public long getGeneration()"], ["long", "org.apache.lucene.index.SegmentInfos.getLastGeneration()", "public long getLastGeneration()"], ["long", "org.apache.lucene.index.SegmentInfos.readCurrentVersion(org.apache.lucene.store.Directory)", "public static long readCurrentVersion(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfos.readCurrentUserData(org.apache.lucene.store.Directory)", "public static java.util.Map<java.lang.String, java.lang.String> readCurrentUserData(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.SegmentInfos.setInfoStream(java.io.PrintStream)", "public static void setInfoStream(java.io.PrintStream)"], ["void", "org.apache.lucene.index.SegmentInfos.setDefaultGenFileRetryCount(int)", "public static void setDefaultGenFileRetryCount(int)"], ["int", "org.apache.lucene.index.SegmentInfos.getDefaultGenFileRetryCount()", "public static int getDefaultGenFileRetryCount()"], ["void", "org.apache.lucene.index.SegmentInfos.setDefaultGenFileRetryPauseMsec(int)", "public static void setDefaultGenFileRetryPauseMsec(int)"], ["int", "org.apache.lucene.index.SegmentInfos.getDefaultGenFileRetryPauseMsec()", "public static int getDefaultGenFileRetryPauseMsec()"], ["void", "org.apache.lucene.index.SegmentInfos.setDefaultGenLookaheadCount(int)", "public static void setDefaultGenLookaheadCount(int)"], ["int", "org.apache.lucene.index.SegmentInfos.getDefaultGenLookahedCount()", "public static int getDefaultGenLookahedCount()"], ["java.io.PrintStream", "org.apache.lucene.index.SegmentInfos.getInfoStream()", "public static java.io.PrintStream getInfoStream()"], ["org.apache.lucene.index.SegmentInfos", "org.apache.lucene.index.SegmentInfos.range(int, int)", "public org.apache.lucene.index.SegmentInfos range(int, int)"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SegmentInfos.files(org.apache.lucene.store.Directory, boolean)", "public java.util.Collection<java.lang.String> files(org.apache.lucene.store.Directory, boolean) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentInfos.java.lang.String segString(org.apache.lucene.store.Directory)", "public synchronized java.lang.String segString(org.apache.lucene.store.Directory)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SegmentInfos.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData()"], ["boolean", "org.apache.lucene.index.SegmentInfos.hasExternalSegments(org.apache.lucene.store.Directory)", "public boolean hasExternalSegments(org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.index.SegmentMerger$1.work(double)", "public void work(double) throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["void", "org.apache.lucene.index.SegmentMerger$2.work(double)", "public void work(double) throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["org.apache.lucene.index.SegmentMerger$CheckAbort", "org.apache.lucene.index.SegmentMerger$CheckAbort(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)", "public org.apache.lucene.index.SegmentMerger$CheckAbort(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)"], ["void", "org.apache.lucene.index.SegmentMerger$CheckAbort.work(double)", "public void work(double) throws org.apache.lucene.index.MergePolicy$MergeAbortedException"], ["org.apache.lucene.index.SegmentReader$Norm", "org.apache.lucene.index.SegmentReader$Norm(org.apache.lucene.index.SegmentReader, org.apache.lucene.store.IndexInput, int, long)", "public org.apache.lucene.index.SegmentReader$Norm(org.apache.lucene.index.SegmentReader, org.apache.lucene.store.IndexInput, int, long)"], ["synchronized", "org.apache.lucene.index.SegmentReader$Norm.void incRef()", "public synchronized void incRef()"], ["synchronized", "org.apache.lucene.index.SegmentReader$Norm.void decRef()", "public synchronized void decRef() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader$Norm.void bytes(byte[], int, int)", "public synchronized void bytes(byte[], int, int) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader$Norm.byte[] bytes()", "public synchronized byte[] bytes() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader$Norm.byte[] copyOnWrite()", "public synchronized byte[] copyOnWrite() throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader$Norm.java.lang.Object clone()", "public synchronized java.lang.Object clone()"], ["void", "org.apache.lucene.index.SegmentReader$Norm.reWrite(org.apache.lucene.index.SegmentInfo)", "public void reWrite(org.apache.lucene.index.SegmentInfo) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentReader$Ref.toString()", "public java.lang.String toString()"], ["synchronized", "org.apache.lucene.index.SegmentReader$Ref.int refCount()", "public synchronized int refCount()"], ["synchronized", "org.apache.lucene.index.SegmentReader$Ref.int incRef()", "public synchronized int incRef()"], ["synchronized", "org.apache.lucene.index.SegmentReader$Ref.int decRef()", "public synchronized int decRef()"], ["org.apache.lucene.index.SegmentReader", "org.apache.lucene.index.SegmentReader()", "public org.apache.lucene.index.SegmentReader()"], ["org.apache.lucene.index.SegmentReader", "org.apache.lucene.index.SegmentReader.get(boolean, org.apache.lucene.index.SegmentInfo, int)", "public static org.apache.lucene.index.SegmentReader get(boolean, org.apache.lucene.index.SegmentInfo, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.index.SegmentReader", "org.apache.lucene.index.SegmentReader.get(boolean, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, int, boolean, int)", "public static org.apache.lucene.index.SegmentReader get(boolean, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, int, boolean, int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader.java.lang.Object clone()", "public final synchronized java.lang.Object clone()"], ["synchronized", "org.apache.lucene.index.SegmentReader.org.apache.lucene.index.IndexReader clone(boolean)", "public final synchronized org.apache.lucene.index.IndexReader clone(boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentReader.hasDeletions()", "public boolean hasDeletions()"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.SegmentReader.terms()", "public org.apache.lucene.index.TermEnum terms()"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.SegmentReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.index.SegmentReader.document(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader.boolean isDeleted(int)", "public synchronized boolean isDeleted(int)"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.SegmentReader.termDocs(org.apache.lucene.index.Term)", "public org.apache.lucene.index.TermDocs termDocs(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermDocs", "org.apache.lucene.index.SegmentReader.termDocs()", "public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.index.SegmentReader.termPositions()", "public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentReader.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentReader.numDocs()", "public int numDocs()"], ["int", "org.apache.lucene.index.SegmentReader.maxDoc()", "public int maxDoc()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SegmentReader.getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)", "public java.util.Collection<java.lang.String> getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)"], ["synchronized", "org.apache.lucene.index.SegmentReader.boolean hasNorms(java.lang.String)", "public synchronized boolean hasNorms(java.lang.String)"], ["synchronized", "org.apache.lucene.index.SegmentReader.byte[] norms(java.lang.String)", "public synchronized byte[] norms(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SegmentReader.void norms(java.lang.String, byte[], int)", "public synchronized void norms(java.lang.String, byte[], int) throws java.io.IOException"], ["org.apache.lucene.index.TermFreqVector", "org.apache.lucene.index.SegmentReader.getTermFreqVector(int, java.lang.String)", "public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentReader.getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentReader.getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper)", "public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["org.apache.lucene.index.TermFreqVector[]", "org.apache.lucene.index.SegmentReader.getTermFreqVectors(int)", "public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.index.SegmentReader.getSegmentName()", "public java.lang.String getSegmentName()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.SegmentReader.directory()", "public org.apache.lucene.store.Directory directory()"], ["java.lang.Object", "org.apache.lucene.index.SegmentReader.getFieldCacheKey()", "public final java.lang.Object getFieldCacheKey()"], ["java.lang.Object", "org.apache.lucene.index.SegmentReader.getDeletesCacheKey()", "public java.lang.Object getDeletesCacheKey()"], ["long", "org.apache.lucene.index.SegmentReader.getUniqueTermCount()", "public long getUniqueTermCount()"], ["int", "org.apache.lucene.index.SegmentReader.getTermInfosIndexDivisor()", "public int getTermInfosIndexDivisor()"], ["void", "org.apache.lucene.index.SegmentTermDocs.seek(org.apache.lucene.index.Term)", "public void seek(org.apache.lucene.index.Term) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentTermDocs.seek(org.apache.lucene.index.TermEnum)", "public void seek(org.apache.lucene.index.TermEnum) throws java.io.IOException"], ["void", "org.apache.lucene.index.SegmentTermDocs.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentTermDocs.doc()", "public final int doc()"], ["int", "org.apache.lucene.index.SegmentTermDocs.freq()", "public final int freq()"], ["boolean", "org.apache.lucene.index.SegmentTermDocs.next()", "public boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentTermDocs.read(int[], int[])", "public int read(int[], int[]) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentTermDocs.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentTermEnum.next()", "public final boolean next() throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.SegmentTermEnum.term()", "public final org.apache.lucene.index.Term term()"], ["int", "org.apache.lucene.index.SegmentTermEnum.docFreq()", "public final int docFreq()"], ["void", "org.apache.lucene.index.SegmentTermEnum.close()", "public final void close() throws java.io.IOException"], ["org.apache.lucene.index.SegmentTermPositionVector", "org.apache.lucene.index.SegmentTermPositionVector(java.lang.String, java.lang.String[], int[], int[][], org.apache.lucene.index.TermVectorOffsetInfo[][])", "public org.apache.lucene.index.SegmentTermPositionVector(java.lang.String, java.lang.String[], int[], int[][], org.apache.lucene.index.TermVectorOffsetInfo[][])"], ["org.apache.lucene.index.TermVectorOffsetInfo[]", "org.apache.lucene.index.SegmentTermPositionVector.getOffsets(int)", "public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int)"], ["int[]", "org.apache.lucene.index.SegmentTermPositionVector.getTermPositions(int)", "public int[] getTermPositions(int)"], ["void", "org.apache.lucene.index.SegmentTermPositions.close()", "public final void close() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentTermPositions.nextPosition()", "public final int nextPosition() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentTermPositions.next()", "public final boolean next() throws java.io.IOException"], ["int", "org.apache.lucene.index.SegmentTermPositions.read(int[], int[])", "public final int read(int[], int[])"], ["int", "org.apache.lucene.index.SegmentTermPositions.getPayloadLength()", "public int getPayloadLength()"], ["byte[]", "org.apache.lucene.index.SegmentTermPositions.getPayload(byte[], int)", "public byte[] getPayload(byte[], int) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SegmentTermPositions.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.index.SegmentTermVector.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.index.SegmentTermVector.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.index.SegmentTermVector.size()", "public int size()"], ["java.lang.String[]", "org.apache.lucene.index.SegmentTermVector.getTerms()", "public java.lang.String[] getTerms()"], ["int[]", "org.apache.lucene.index.SegmentTermVector.getTermFrequencies()", "public int[] getTermFrequencies()"], ["int", "org.apache.lucene.index.SegmentTermVector.indexOf(java.lang.String)", "public int indexOf(java.lang.String)"], ["int[]", "org.apache.lucene.index.SegmentTermVector.indexesOf(java.lang.String[], int, int)", "public int[] indexesOf(java.lang.String[], int, int)"], ["org.apache.lucene.index.SegmentWriteState", "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, int, int)", "public org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, int, int)"], ["java.lang.String", "org.apache.lucene.index.SegmentWriteState.segmentFileName(java.lang.String)", "public java.lang.String segmentFileName(java.lang.String)"], ["org.apache.lucene.index.SerialMergeScheduler", "org.apache.lucene.index.SerialMergeScheduler()", "public org.apache.lucene.index.SerialMergeScheduler()"], ["synchronized", "org.apache.lucene.index.SerialMergeScheduler.void merge(org.apache.lucene.index.IndexWriter)", "public synchronized void merge(org.apache.lucene.index.IndexWriter) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["void", "org.apache.lucene.index.SerialMergeScheduler.close()", "public void close()"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.getSegmentsFileName()", "public java.lang.String getSegmentsFileName()"], ["java.util.Collection<java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.getFileNames()", "public java.util.Collection<java.lang.String> getFileNames() throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.getDirectory()", "public org.apache.lucene.store.Directory getDirectory()"], ["void", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.delete()", "public void delete()"], ["boolean", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.isDeleted()", "public boolean isDeleted()"], ["long", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.getVersion()", "public long getVersion()"], ["long", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.getGeneration()", "public long getGeneration()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.getUserData()", "public java.util.Map<java.lang.String, java.lang.String> getUserData() throws java.io.IOException"], ["boolean", "org.apache.lucene.index.SnapshotDeletionPolicy$MyCommitPoint.isOptimized()", "public boolean isOptimized()"], ["org.apache.lucene.index.SnapshotDeletionPolicy", "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)", "public org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)", "public synchronized void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot()", "public synchronized org.apache.lucene.index.IndexCommit snapshot()"], ["synchronized", "org.apache.lucene.index.SnapshotDeletionPolicy.void release()", "public synchronized void release()"], ["org.apache.lucene.index.SortedTermVectorMapper", "org.apache.lucene.index.SortedTermVectorMapper(java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)", "public org.apache.lucene.index.SortedTermVectorMapper(java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)"], ["org.apache.lucene.index.SortedTermVectorMapper", "org.apache.lucene.index.SortedTermVectorMapper(boolean, boolean, java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)", "public org.apache.lucene.index.SortedTermVectorMapper(boolean, boolean, java.util.Comparator<org.apache.lucene.index.TermVectorEntry>)"], ["void", "org.apache.lucene.index.SortedTermVectorMapper.map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])", "public void map(java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])"], ["void", "org.apache.lucene.index.SortedTermVectorMapper.setExpectations(java.lang.String, int, boolean, boolean)", "public void setExpectations(java.lang.String, int, boolean, boolean)"], ["java.util.SortedSet<org.apache.lucene.index.TermVectorEntry>", "org.apache.lucene.index.SortedTermVectorMapper.getTermVectorEntrySet()", "public java.util.SortedSet<org.apache.lucene.index.TermVectorEntry> getTermVectorEntrySet()"], ["org.apache.lucene.index.StaleReaderException", "org.apache.lucene.index.StaleReaderException(java.lang.String)", "public org.apache.lucene.index.StaleReaderException(java.lang.String)"], ["long", "org.apache.lucene.index.StoredFieldsWriter$PerDoc.sizeInBytes()", "public long sizeInBytes()"], ["void", "org.apache.lucene.index.StoredFieldsWriter$PerDoc.finish()", "public void finish() throws java.io.IOException"], ["org.apache.lucene.index.StoredFieldsWriter", "org.apache.lucene.index.StoredFieldsWriter(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.FieldInfos)", "public org.apache.lucene.index.StoredFieldsWriter(org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.FieldInfos)"], ["org.apache.lucene.index.StoredFieldsWriterPerThread", "org.apache.lucene.index.StoredFieldsWriter.addThread(org.apache.lucene.index.DocumentsWriter$DocState)", "public org.apache.lucene.index.StoredFieldsWriterPerThread addThread(org.apache.lucene.index.DocumentsWriter$DocState) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.StoredFieldsWriter.void flush(org.apache.lucene.index.SegmentWriteState)", "public synchronized void flush(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["synchronized", "org.apache.lucene.index.StoredFieldsWriter.void closeDocStore(org.apache.lucene.index.SegmentWriteState)", "public synchronized void closeDocStore(org.apache.lucene.index.SegmentWriteState) throws java.io.IOException"], ["boolean", "org.apache.lucene.index.StoredFieldsWriter.freeRAM()", "public boolean freeRAM()"], ["org.apache.lucene.index.StoredFieldsWriterPerThread", "org.apache.lucene.index.StoredFieldsWriterPerThread(org.apache.lucene.index.DocumentsWriter$DocState, org.apache.lucene.index.StoredFieldsWriter)", "public org.apache.lucene.index.StoredFieldsWriterPerThread(org.apache.lucene.index.DocumentsWriter$DocState, org.apache.lucene.index.StoredFieldsWriter) throws java.io.IOException"], ["void", "org.apache.lucene.index.StoredFieldsWriterPerThread.startDocument()", "public void startDocument()"], ["void", "org.apache.lucene.index.StoredFieldsWriterPerThread.addField(org.apache.lucene.document.Fieldable, org.apache.lucene.index.FieldInfo)", "public void addField(org.apache.lucene.document.Fieldable, org.apache.lucene.index.FieldInfo) throws java.io.IOException"], ["org.apache.lucene.index.DocumentsWriter$DocWriter", "org.apache.lucene.index.StoredFieldsWriterPerThread.finishDocument()", "public org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument()"], ["void", "org.apache.lucene.index.StoredFieldsWriterPerThread.abort()", "public void abort()"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String, java.lang.String)", "public org.apache.lucene.index.Term(java.lang.String, java.lang.String)"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term(java.lang.String)", "public org.apache.lucene.index.Term(java.lang.String)"], ["java.lang.String", "org.apache.lucene.index.Term.field()", "public final java.lang.String field()"], ["java.lang.String", "org.apache.lucene.index.Term.text()", "public final java.lang.String text()"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.Term.createTerm(java.lang.String)", "public org.apache.lucene.index.Term createTerm(java.lang.String)"], ["boolean", "org.apache.lucene.index.Term.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.Term.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.index.Term.compareTo(org.apache.lucene.index.Term)", "public final int compareTo(org.apache.lucene.index.Term)"], ["java.lang.String", "org.apache.lucene.index.Term.toString()", "public final java.lang.String toString()"], ["int", "org.apache.lucene.index.Term.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["int", "org.apache.lucene.index.TermBuffer.compareTo(org.apache.lucene.index.TermBuffer)", "public final int compareTo(org.apache.lucene.index.TermBuffer)"], ["void", "org.apache.lucene.index.TermBuffer.read(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfos)", "public final void read(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfos) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermBuffer.set(org.apache.lucene.index.Term)", "public final void set(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.index.TermBuffer.set(org.apache.lucene.index.TermBuffer)", "public final void set(org.apache.lucene.index.TermBuffer)"], ["void", "org.apache.lucene.index.TermBuffer.reset()", "public void reset()"], ["org.apache.lucene.index.Term", "org.apache.lucene.index.TermBuffer.toTerm()", "public org.apache.lucene.index.Term toTerm()"], ["org.apache.lucene.index.TermEnum", "org.apache.lucene.index.TermEnum()", "public org.apache.lucene.index.TermEnum()"], ["int", "org.apache.lucene.index.TermInfosReader.getSkipInterval()", "public int getSkipInterval()"], ["int", "org.apache.lucene.index.TermInfosReader.getMaxSkipLevels()", "public int getMaxSkipLevels()"], ["org.apache.lucene.index.SegmentTermEnum", "org.apache.lucene.index.TermInfosReader.terms()", "public org.apache.lucene.index.SegmentTermEnum terms()"], ["org.apache.lucene.index.SegmentTermEnum", "org.apache.lucene.index.TermInfosReader.terms(org.apache.lucene.index.Term)", "public org.apache.lucene.index.SegmentTermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.index.TermVectorEntry", "org.apache.lucene.index.TermVectorEntry()", "public org.apache.lucene.index.TermVectorEntry()"], ["org.apache.lucene.index.TermVectorEntry", "org.apache.lucene.index.TermVectorEntry(java.lang.String, java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])", "public org.apache.lucene.index.TermVectorEntry(java.lang.String, java.lang.String, int, org.apache.lucene.index.TermVectorOffsetInfo[], int[])"], ["java.lang.String", "org.apache.lucene.index.TermVectorEntry.getField()", "public java.lang.String getField()"], ["int", "org.apache.lucene.index.TermVectorEntry.getFrequency()", "public int getFrequency()"], ["org.apache.lucene.index.TermVectorOffsetInfo[]", "org.apache.lucene.index.TermVectorEntry.getOffsets()", "public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets()"], ["int[]", "org.apache.lucene.index.TermVectorEntry.getPositions()", "public int[] getPositions()"], ["java.lang.String", "org.apache.lucene.index.TermVectorEntry.getTerm()", "public java.lang.String getTerm()"], ["boolean", "org.apache.lucene.index.TermVectorEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.TermVectorEntry.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.index.TermVectorEntry.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.TermVectorEntryFreqSortedComparator", "org.apache.lucene.index.TermVectorEntryFreqSortedComparator()", "public org.apache.lucene.index.TermVectorEntryFreqSortedComparator()"], ["int", "org.apache.lucene.index.TermVectorEntryFreqSortedComparator.compare(org.apache.lucene.index.TermVectorEntry, org.apache.lucene.index.TermVectorEntry)", "public int compare(org.apache.lucene.index.TermVectorEntry, org.apache.lucene.index.TermVectorEntry)"], ["int", "org.apache.lucene.index.TermVectorEntryFreqSortedComparator.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.apache.lucene.index.TermVectorMapper.isIgnoringPositions()", "public boolean isIgnoringPositions()"], ["boolean", "org.apache.lucene.index.TermVectorMapper.isIgnoringOffsets()", "public boolean isIgnoringOffsets()"], ["void", "org.apache.lucene.index.TermVectorMapper.setDocumentNumber(int)", "public void setDocumentNumber(int)"], ["org.apache.lucene.index.TermVectorOffsetInfo", "org.apache.lucene.index.TermVectorOffsetInfo()", "public org.apache.lucene.index.TermVectorOffsetInfo()"], ["org.apache.lucene.index.TermVectorOffsetInfo", "org.apache.lucene.index.TermVectorOffsetInfo(int, int)", "public org.apache.lucene.index.TermVectorOffsetInfo(int, int)"], ["int", "org.apache.lucene.index.TermVectorOffsetInfo.getEndOffset()", "public int getEndOffset()"], ["void", "org.apache.lucene.index.TermVectorOffsetInfo.setEndOffset(int)", "public void setEndOffset(int)"], ["int", "org.apache.lucene.index.TermVectorOffsetInfo.getStartOffset()", "public int getStartOffset()"], ["void", "org.apache.lucene.index.TermVectorOffsetInfo.setStartOffset(int)", "public void setStartOffset(int)"], ["boolean", "org.apache.lucene.index.TermVectorOffsetInfo.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.index.TermVectorOffsetInfo.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.index.TermVectorsReader.get(int, java.lang.String, org.apache.lucene.index.TermVectorMapper)", "public void get(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermVectorsReader.get(int, org.apache.lucene.index.TermVectorMapper)", "public void get(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException"], ["long", "org.apache.lucene.index.TermVectorsTermsWriter$PerDoc.sizeInBytes()", "public long sizeInBytes()"], ["void", "org.apache.lucene.index.TermVectorsTermsWriter$PerDoc.finish()", "public void finish() throws java.io.IOException"], ["org.apache.lucene.index.TermVectorsTermsWriter", "org.apache.lucene.index.TermVectorsTermsWriter(org.apache.lucene.index.DocumentsWriter)", "public org.apache.lucene.index.TermVectorsTermsWriter(org.apache.lucene.index.DocumentsWriter)"], ["org.apache.lucene.index.TermsHashConsumerPerThread", "org.apache.lucene.index.TermVectorsTermsWriter.addThread(org.apache.lucene.index.TermsHashPerThread)", "public org.apache.lucene.index.TermsHashConsumerPerThread addThread(org.apache.lucene.index.TermsHashPerThread)"], ["boolean", "org.apache.lucene.index.TermVectorsTermsWriter.freeRAM()", "public boolean freeRAM()"], ["void", "org.apache.lucene.index.TermVectorsTermsWriter.abort()", "public void abort()"], ["org.apache.lucene.index.TermVectorsTermsWriterPerField", "org.apache.lucene.index.TermVectorsTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.TermVectorsTermsWriterPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermVectorsTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.TermVectorsTermsWriterPerThread, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermVectorsTermsWriterPerField.abort()", "public void abort()"], ["org.apache.lucene.index.TermVectorsTermsWriterPerThread", "org.apache.lucene.index.TermVectorsTermsWriterPerThread(org.apache.lucene.index.TermsHashPerThread, org.apache.lucene.index.TermVectorsTermsWriter)", "public org.apache.lucene.index.TermVectorsTermsWriterPerThread(org.apache.lucene.index.TermsHashPerThread, org.apache.lucene.index.TermVectorsTermsWriter)"], ["void", "org.apache.lucene.index.TermVectorsTermsWriterPerThread.startDocument()", "public void startDocument()"], ["org.apache.lucene.index.DocumentsWriter$DocWriter", "org.apache.lucene.index.TermVectorsTermsWriterPerThread.finishDocument()", "public org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument()"], ["org.apache.lucene.index.TermsHashConsumerPerField", "org.apache.lucene.index.TermVectorsTermsWriterPerThread.addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashConsumerPerField addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermVectorsTermsWriterPerThread.abort()", "public void abort()"], ["org.apache.lucene.index.TermVectorsWriter", "org.apache.lucene.index.TermVectorsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos)", "public org.apache.lucene.index.TermVectorsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermVectorsWriter.addAllDocVectors(org.apache.lucene.index.TermFreqVector[])", "public final void addAllDocVectors(org.apache.lucene.index.TermFreqVector[]) throws java.io.IOException"], ["org.apache.lucene.index.TermsHash", "org.apache.lucene.index.TermsHash(org.apache.lucene.index.DocumentsWriter, boolean, org.apache.lucene.index.TermsHashConsumer, org.apache.lucene.index.TermsHash)", "public org.apache.lucene.index.TermsHash(org.apache.lucene.index.DocumentsWriter, boolean, org.apache.lucene.index.TermsHashConsumer, org.apache.lucene.index.TermsHash)"], ["void", "org.apache.lucene.index.TermsHash.abort()", "public void abort()"], ["boolean", "org.apache.lucene.index.TermsHash.freeRAM()", "public boolean freeRAM()"], ["synchronized", "org.apache.lucene.index.TermsHash.void recyclePostings(org.apache.lucene.index.RawPostingList[], int)", "public synchronized void recyclePostings(org.apache.lucene.index.RawPostingList[], int)"], ["synchronized", "org.apache.lucene.index.TermsHash.void getPostings(org.apache.lucene.index.RawPostingList[])", "public synchronized void getPostings(org.apache.lucene.index.RawPostingList[])"], ["org.apache.lucene.index.TermsHashPerField", "org.apache.lucene.index.TermsHashPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.TermsHashPerThread, org.apache.lucene.index.TermsHashPerThread, org.apache.lucene.index.FieldInfo)", "public org.apache.lucene.index.TermsHashPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.TermsHashPerThread, org.apache.lucene.index.TermsHashPerThread, org.apache.lucene.index.FieldInfo)"], ["void", "org.apache.lucene.index.TermsHashPerField.reset()", "public void reset()"], ["synchronized", "org.apache.lucene.index.TermsHashPerField.void abort()", "public synchronized void abort()"], ["void", "org.apache.lucene.index.TermsHashPerField.initReader(org.apache.lucene.index.ByteSliceReader, org.apache.lucene.index.RawPostingList, int)", "public void initReader(org.apache.lucene.index.ByteSliceReader, org.apache.lucene.index.RawPostingList, int)"], ["org.apache.lucene.index.RawPostingList[]", "org.apache.lucene.index.TermsHashPerField.sortPostings()", "public org.apache.lucene.index.RawPostingList[] sortPostings()"], ["void", "org.apache.lucene.index.TermsHashPerField.add(int)", "public void add(int) throws java.io.IOException"], ["void", "org.apache.lucene.index.TermsHashPerField.writeBytes(int, byte[], int, int)", "public void writeBytes(int, byte[], int, int)"], ["org.apache.lucene.index.TermsHashPerThread", "org.apache.lucene.index.TermsHashPerThread(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHashPerThread)", "public org.apache.lucene.index.TermsHashPerThread(org.apache.lucene.index.DocInverterPerThread, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHashPerThread)"], ["synchronized", "org.apache.lucene.index.TermsHashPerThread.void abort()", "public synchronized void abort()"], ["void", "org.apache.lucene.index.TermsHashPerThread.startDocument()", "public void startDocument() throws java.io.IOException"], ["org.apache.lucene.index.DocumentsWriter$DocWriter", "org.apache.lucene.index.TermsHashPerThread.finishDocument()", "public org.apache.lucene.index.DocumentsWriter$DocWriter finishDocument() throws java.io.IOException"], ["org.apache.lucene.messages.MessageImpl", "org.apache.lucene.messages.MessageImpl(java.lang.String)", "public org.apache.lucene.messages.MessageImpl(java.lang.String)"], ["org.apache.lucene.messages.MessageImpl", "org.apache.lucene.messages.MessageImpl(java.lang.String, java.lang.Object...)", "public org.apache.lucene.messages.MessageImpl(java.lang.String, java.lang.Object...)"], ["java.lang.Object[]", "org.apache.lucene.messages.MessageImpl.getArguments()", "public java.lang.Object[] getArguments()"], ["java.lang.String", "org.apache.lucene.messages.MessageImpl.getKey()", "public java.lang.String getKey()"], ["java.lang.String", "org.apache.lucene.messages.MessageImpl.getLocalizedMessage()", "public java.lang.String getLocalizedMessage()"], ["java.lang.String", "org.apache.lucene.messages.MessageImpl.getLocalizedMessage(java.util.Locale)", "public java.lang.String getLocalizedMessage(java.util.Locale)"], ["java.lang.String", "org.apache.lucene.messages.MessageImpl.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.messages.NLS$1.run()", "public java.lang.Object run()"], ["java.lang.String", "org.apache.lucene.messages.NLS.getLocalizedMessage(java.lang.String)", "public static java.lang.String getLocalizedMessage(java.lang.String)"], ["java.lang.String", "org.apache.lucene.messages.NLS.getLocalizedMessage(java.lang.String, java.util.Locale)", "public static java.lang.String getLocalizedMessage(java.lang.String, java.util.Locale)"], ["java.lang.String", "org.apache.lucene.messages.NLS.getLocalizedMessage(java.lang.String, java.util.Locale, java.lang.Object...)", "public static java.lang.String getLocalizedMessage(java.lang.String, java.util.Locale, java.lang.Object...)"], ["java.lang.String", "org.apache.lucene.messages.NLS.getLocalizedMessage(java.lang.String, java.lang.Object...)", "public static java.lang.String getLocalizedMessage(java.lang.String, java.lang.Object...)"], ["org.apache.lucene.queryParser.FastCharStream", "org.apache.lucene.queryParser.FastCharStream(java.io.Reader)", "public org.apache.lucene.queryParser.FastCharStream(java.io.Reader)"], ["char", "org.apache.lucene.queryParser.FastCharStream.readChar()", "public final char readChar() throws java.io.IOException"], ["char", "org.apache.lucene.queryParser.FastCharStream.BeginToken()", "public final char BeginToken() throws java.io.IOException"], ["void", "org.apache.lucene.queryParser.FastCharStream.backup(int)", "public final void backup(int)"], ["java.lang.String", "org.apache.lucene.queryParser.FastCharStream.GetImage()", "public final java.lang.String GetImage()"], ["char[]", "org.apache.lucene.queryParser.FastCharStream.GetSuffix(int)", "public final char[] GetSuffix(int)"], ["void", "org.apache.lucene.queryParser.FastCharStream.Done()", "public final void Done()"], ["int", "org.apache.lucene.queryParser.FastCharStream.getColumn()", "public final int getColumn()"], ["int", "org.apache.lucene.queryParser.FastCharStream.getLine()", "public final int getLine()"], ["int", "org.apache.lucene.queryParser.FastCharStream.getEndColumn()", "public final int getEndColumn()"], ["int", "org.apache.lucene.queryParser.FastCharStream.getEndLine()", "public final int getEndLine()"], ["int", "org.apache.lucene.queryParser.FastCharStream.getBeginColumn()", "public final int getBeginColumn()"], ["int", "org.apache.lucene.queryParser.FastCharStream.getBeginLine()", "public final int getBeginLine()"], ["org.apache.lucene.queryParser.MultiFieldQueryParser", "org.apache.lucene.queryParser.MultiFieldQueryParser(org.apache.lucene.util.Version, java.lang.String[], org.apache.lucene.analysis.Analyzer, java.util.Map<java.lang.String, java.lang.Float>)", "public org.apache.lucene.queryParser.MultiFieldQueryParser(org.apache.lucene.util.Version, java.lang.String[], org.apache.lucene.analysis.Analyzer, java.util.Map<java.lang.String, java.lang.Float>)"], ["org.apache.lucene.queryParser.MultiFieldQueryParser", "org.apache.lucene.queryParser.MultiFieldQueryParser(org.apache.lucene.util.Version, java.lang.String[], org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.queryParser.MultiFieldQueryParser(org.apache.lucene.util.Version, java.lang.String[], org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.MultiFieldQueryParser.parse(org.apache.lucene.util.Version, java.lang.String[], java.lang.String[], org.apache.lucene.analysis.Analyzer)", "public static org.apache.lucene.search.Query parse(org.apache.lucene.util.Version, java.lang.String[], java.lang.String[], org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.MultiFieldQueryParser.parse(org.apache.lucene.util.Version, java.lang.String, java.lang.String[], org.apache.lucene.search.BooleanClause$Occur[], org.apache.lucene.analysis.Analyzer)", "public static org.apache.lucene.search.Query parse(org.apache.lucene.util.Version, java.lang.String, java.lang.String[], org.apache.lucene.search.BooleanClause$Occur[], org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.MultiFieldQueryParser.parse(org.apache.lucene.util.Version, java.lang.String[], java.lang.String[], org.apache.lucene.search.BooleanClause$Occur[], org.apache.lucene.analysis.Analyzer)", "public static org.apache.lucene.search.Query parse(org.apache.lucene.util.Version, java.lang.String[], java.lang.String[], org.apache.lucene.search.BooleanClause$Occur[], org.apache.lucene.analysis.Analyzer) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.queryParser.ParseException", "org.apache.lucene.queryParser.ParseException(org.apache.lucene.queryParser.Token, int[][], java.lang.String[])", "public org.apache.lucene.queryParser.ParseException(org.apache.lucene.queryParser.Token, int[][], java.lang.String[])"], ["org.apache.lucene.queryParser.ParseException", "org.apache.lucene.queryParser.ParseException()", "public org.apache.lucene.queryParser.ParseException()"], ["org.apache.lucene.queryParser.ParseException", "org.apache.lucene.queryParser.ParseException(java.lang.String)", "public org.apache.lucene.queryParser.ParseException(java.lang.String)"], ["java.lang.String", "org.apache.lucene.queryParser.ParseException.getMessage()", "public java.lang.String getMessage()"], ["org.apache.lucene.queryParser.QueryParser$Operator[]", "org.apache.lucene.queryParser.QueryParser$Operator.values()", "public static final org.apache.lucene.queryParser.QueryParser$Operator[] values()"], ["org.apache.lucene.queryParser.QueryParser$Operator", "org.apache.lucene.queryParser.QueryParser$Operator.valueOf(java.lang.String)", "public static org.apache.lucene.queryParser.QueryParser$Operator valueOf(java.lang.String)"], ["org.apache.lucene.queryParser.QueryParser", "org.apache.lucene.queryParser.QueryParser(org.apache.lucene.util.Version, java.lang.String, org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.queryParser.QueryParser(org.apache.lucene.util.Version, java.lang.String, org.apache.lucene.analysis.Analyzer)"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.QueryParser.parse(java.lang.String)", "public org.apache.lucene.search.Query parse(java.lang.String) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.analysis.Analyzer", "org.apache.lucene.queryParser.QueryParser.getAnalyzer()", "public org.apache.lucene.analysis.Analyzer getAnalyzer()"], ["java.lang.String", "org.apache.lucene.queryParser.QueryParser.getField()", "public java.lang.String getField()"], ["float", "org.apache.lucene.queryParser.QueryParser.getFuzzyMinSim()", "public float getFuzzyMinSim()"], ["void", "org.apache.lucene.queryParser.QueryParser.setFuzzyMinSim(float)", "public void setFuzzyMinSim(float)"], ["int", "org.apache.lucene.queryParser.QueryParser.getFuzzyPrefixLength()", "public int getFuzzyPrefixLength()"], ["void", "org.apache.lucene.queryParser.QueryParser.setFuzzyPrefixLength(int)", "public void setFuzzyPrefixLength(int)"], ["void", "org.apache.lucene.queryParser.QueryParser.setPhraseSlop(int)", "public void setPhraseSlop(int)"], ["int", "org.apache.lucene.queryParser.QueryParser.getPhraseSlop()", "public int getPhraseSlop()"], ["void", "org.apache.lucene.queryParser.QueryParser.setAllowLeadingWildcard(boolean)", "public void setAllowLeadingWildcard(boolean)"], ["boolean", "org.apache.lucene.queryParser.QueryParser.getAllowLeadingWildcard()", "public boolean getAllowLeadingWildcard()"], ["void", "org.apache.lucene.queryParser.QueryParser.setEnablePositionIncrements(boolean)", "public void setEnablePositionIncrements(boolean)"], ["boolean", "org.apache.lucene.queryParser.QueryParser.getEnablePositionIncrements()", "public boolean getEnablePositionIncrements()"], ["void", "org.apache.lucene.queryParser.QueryParser.setDefaultOperator(org.apache.lucene.queryParser.QueryParser$Operator)", "public void setDefaultOperator(org.apache.lucene.queryParser.QueryParser$Operator)"], ["org.apache.lucene.queryParser.QueryParser$Operator", "org.apache.lucene.queryParser.QueryParser.getDefaultOperator()", "public org.apache.lucene.queryParser.QueryParser$Operator getDefaultOperator()"], ["void", "org.apache.lucene.queryParser.QueryParser.setLowercaseExpandedTerms(boolean)", "public void setLowercaseExpandedTerms(boolean)"], ["boolean", "org.apache.lucene.queryParser.QueryParser.getLowercaseExpandedTerms()", "public boolean getLowercaseExpandedTerms()"], ["void", "org.apache.lucene.queryParser.QueryParser.setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)", "public void setMultiTermRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.queryParser.QueryParser.getMultiTermRewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod getMultiTermRewriteMethod()"], ["void", "org.apache.lucene.queryParser.QueryParser.setLocale(java.util.Locale)", "public void setLocale(java.util.Locale)"], ["java.util.Locale", "org.apache.lucene.queryParser.QueryParser.getLocale()", "public java.util.Locale getLocale()"], ["void", "org.apache.lucene.queryParser.QueryParser.setDateResolution(org.apache.lucene.document.DateTools$Resolution)", "public void setDateResolution(org.apache.lucene.document.DateTools$Resolution)"], ["void", "org.apache.lucene.queryParser.QueryParser.setDateResolution(java.lang.String, org.apache.lucene.document.DateTools$Resolution)", "public void setDateResolution(java.lang.String, org.apache.lucene.document.DateTools$Resolution)"], ["org.apache.lucene.document.DateTools$Resolution", "org.apache.lucene.queryParser.QueryParser.getDateResolution(java.lang.String)", "public org.apache.lucene.document.DateTools$Resolution getDateResolution(java.lang.String)"], ["void", "org.apache.lucene.queryParser.QueryParser.setRangeCollator(java.text.Collator)", "public void setRangeCollator(java.text.Collator)"], ["java.text.Collator", "org.apache.lucene.queryParser.QueryParser.getRangeCollator()", "public java.text.Collator getRangeCollator()"], ["java.lang.String", "org.apache.lucene.queryParser.QueryParser.escape(java.lang.String)", "public static java.lang.String escape(java.lang.String)"], ["void", "org.apache.lucene.queryParser.QueryParser.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["int", "org.apache.lucene.queryParser.QueryParser.Conjunction()", "public final int Conjunction() throws org.apache.lucene.queryParser.ParseException"], ["int", "org.apache.lucene.queryParser.QueryParser.Modifiers()", "public final int Modifiers() throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.QueryParser.TopLevelQuery(java.lang.String)", "public final org.apache.lucene.search.Query TopLevelQuery(java.lang.String) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.QueryParser.Query(java.lang.String)", "public final org.apache.lucene.search.Query Query(java.lang.String) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.QueryParser.Clause(java.lang.String)", "public final org.apache.lucene.search.Query Clause(java.lang.String) throws org.apache.lucene.queryParser.ParseException"], ["org.apache.lucene.search.Query", "org.apache.lucene.queryParser.QueryParser.Term(java.lang.String)", "public final org.apache.lucene.search.Query Term(java.lang.String) throws org.apache.lucene.queryParser.ParseException"], ["void", "org.apache.lucene.queryParser.QueryParser.ReInit(org.apache.lucene.queryParser.CharStream)", "public void ReInit(org.apache.lucene.queryParser.CharStream)"], ["void", "org.apache.lucene.queryParser.QueryParser.ReInit(org.apache.lucene.queryParser.QueryParserTokenManager)", "public void ReInit(org.apache.lucene.queryParser.QueryParserTokenManager)"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.QueryParser.getNextToken()", "public final org.apache.lucene.queryParser.Token getNextToken()"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.QueryParser.getToken(int)", "public final org.apache.lucene.queryParser.Token getToken(int)"], ["org.apache.lucene.queryParser.ParseException", "org.apache.lucene.queryParser.QueryParser.generateParseException()", "public org.apache.lucene.queryParser.ParseException generateParseException()"], ["void", "org.apache.lucene.queryParser.QueryParser.enable_tracing()", "public final void enable_tracing()"], ["void", "org.apache.lucene.queryParser.QueryParser.disable_tracing()", "public final void disable_tracing()"], ["void", "org.apache.lucene.queryParser.QueryParserTokenManager.setDebugStream(java.io.PrintStream)", "public void setDebugStream(java.io.PrintStream)"], ["org.apache.lucene.queryParser.QueryParserTokenManager", "org.apache.lucene.queryParser.QueryParserTokenManager(org.apache.lucene.queryParser.CharStream)", "public org.apache.lucene.queryParser.QueryParserTokenManager(org.apache.lucene.queryParser.CharStream)"], ["org.apache.lucene.queryParser.QueryParserTokenManager", "org.apache.lucene.queryParser.QueryParserTokenManager(org.apache.lucene.queryParser.CharStream, int)", "public org.apache.lucene.queryParser.QueryParserTokenManager(org.apache.lucene.queryParser.CharStream, int)"], ["void", "org.apache.lucene.queryParser.QueryParserTokenManager.ReInit(org.apache.lucene.queryParser.CharStream)", "public void ReInit(org.apache.lucene.queryParser.CharStream)"], ["void", "org.apache.lucene.queryParser.QueryParserTokenManager.ReInit(org.apache.lucene.queryParser.CharStream, int)", "public void ReInit(org.apache.lucene.queryParser.CharStream, int)"], ["void", "org.apache.lucene.queryParser.QueryParserTokenManager.SwitchTo(int)", "public void SwitchTo(int)"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.QueryParserTokenManager.getNextToken()", "public org.apache.lucene.queryParser.Token getNextToken()"], ["java.lang.Object", "org.apache.lucene.queryParser.Token.getValue()", "public java.lang.Object getValue()"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.Token()", "public org.apache.lucene.queryParser.Token()"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.Token(int)", "public org.apache.lucene.queryParser.Token(int)"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.Token(int, java.lang.String)", "public org.apache.lucene.queryParser.Token(int, java.lang.String)"], ["java.lang.String", "org.apache.lucene.queryParser.Token.toString()", "public java.lang.String toString()"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.Token.newToken(int, java.lang.String)", "public static org.apache.lucene.queryParser.Token newToken(int, java.lang.String)"], ["org.apache.lucene.queryParser.Token", "org.apache.lucene.queryParser.Token.newToken(int)", "public static org.apache.lucene.queryParser.Token newToken(int)"], ["java.lang.String", "org.apache.lucene.queryParser.TokenMgrError.getMessage()", "public java.lang.String getMessage()"], ["org.apache.lucene.queryParser.TokenMgrError", "org.apache.lucene.queryParser.TokenMgrError()", "public org.apache.lucene.queryParser.TokenMgrError()"], ["org.apache.lucene.queryParser.TokenMgrError", "org.apache.lucene.queryParser.TokenMgrError(java.lang.String, int)", "public org.apache.lucene.queryParser.TokenMgrError(java.lang.String, int)"], ["org.apache.lucene.queryParser.TokenMgrError", "org.apache.lucene.queryParser.TokenMgrError(boolean, int, int, int, java.lang.String, char, int)", "public org.apache.lucene.queryParser.TokenMgrError(boolean, int, int, int, java.lang.String, char, int)"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$1.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$2.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause$Occur$3.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.BooleanClause$Occur[]", "org.apache.lucene.search.BooleanClause$Occur.values()", "public static final org.apache.lucene.search.BooleanClause$Occur[] values()"], ["org.apache.lucene.search.BooleanClause$Occur", "org.apache.lucene.search.BooleanClause$Occur.valueOf(java.lang.String)", "public static org.apache.lucene.search.BooleanClause$Occur valueOf(java.lang.String)"], ["org.apache.lucene.search.BooleanClause", "org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)", "public org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.BooleanClause$Occur", "org.apache.lucene.search.BooleanClause.getOccur()", "public org.apache.lucene.search.BooleanClause$Occur getOccur()"], ["void", "org.apache.lucene.search.BooleanClause.setOccur(org.apache.lucene.search.BooleanClause$Occur)", "public void setOccur(org.apache.lucene.search.BooleanClause$Occur)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanClause.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["void", "org.apache.lucene.search.BooleanClause.setQuery(org.apache.lucene.search.Query)", "public void setQuery(org.apache.lucene.search.Query)"], ["boolean", "org.apache.lucene.search.BooleanClause.isProhibited()", "public boolean isProhibited()"], ["boolean", "org.apache.lucene.search.BooleanClause.isRequired()", "public boolean isRequired()"], ["boolean", "org.apache.lucene.search.BooleanClause.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BooleanClause.hashCode()", "public int hashCode()"], ["java.lang.String", "org.apache.lucene.search.BooleanClause.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.BooleanQuery$1.coord(int, int)", "public float coord(int, int)"], ["org.apache.lucene.search.BooleanQuery$BooleanWeight", "org.apache.lucene.search.BooleanQuery$BooleanWeight(org.apache.lucene.search.BooleanQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.BooleanQuery$BooleanWeight(org.apache.lucene.search.BooleanQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanQuery$BooleanWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.BooleanQuery$BooleanWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.BooleanQuery$BooleanWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanQuery$BooleanWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.BooleanQuery$BooleanWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.BooleanQuery$BooleanWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.BooleanQuery$BooleanWeight.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["org.apache.lucene.search.BooleanQuery$TooManyClauses", "org.apache.lucene.search.BooleanQuery$TooManyClauses()", "public org.apache.lucene.search.BooleanQuery$TooManyClauses()"], ["java.lang.String", "org.apache.lucene.search.BooleanQuery$TooManyClauses.getMessage()", "public java.lang.String getMessage()"], ["int", "org.apache.lucene.search.BooleanQuery.getMaxClauseCount()", "public static int getMaxClauseCount()"], ["void", "org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)", "public static void setMaxClauseCount(int)"], ["org.apache.lucene.search.BooleanQuery", "org.apache.lucene.search.BooleanQuery()", "public org.apache.lucene.search.BooleanQuery()"], ["org.apache.lucene.search.BooleanQuery", "org.apache.lucene.search.BooleanQuery(boolean)", "public org.apache.lucene.search.BooleanQuery(boolean)"], ["boolean", "org.apache.lucene.search.BooleanQuery.isCoordDisabled()", "public boolean isCoordDisabled()"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.BooleanQuery.getSimilarity(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)"], ["void", "org.apache.lucene.search.BooleanQuery.setMinimumNumberShouldMatch(int)", "public void setMinimumNumberShouldMatch(int)"], ["int", "org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()", "public int getMinimumNumberShouldMatch()"], ["void", "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)", "public void add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"], ["void", "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.BooleanClause)", "public void add(org.apache.lucene.search.BooleanClause)"], ["org.apache.lucene.search.BooleanClause[]", "org.apache.lucene.search.BooleanQuery.getClauses()", "public org.apache.lucene.search.BooleanClause[] getClauses()"], ["java.util.List<org.apache.lucene.search.BooleanClause>", "org.apache.lucene.search.BooleanQuery.clauses()", "public java.util.List<org.apache.lucene.search.BooleanClause> clauses()"], ["java.util.Iterator<org.apache.lucene.search.BooleanClause>", "org.apache.lucene.search.BooleanQuery.iterator()", "public final java.util.Iterator<org.apache.lucene.search.BooleanClause> iterator()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.BooleanQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.BooleanQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.Object", "org.apache.lucene.search.BooleanQuery.clone()", "public java.lang.Object clone()"], ["java.lang.String", "org.apache.lucene.search.BooleanQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.BooleanQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.BooleanQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.BooleanScorer$BooleanScorerCollector", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector(int, org.apache.lucene.search.BooleanScorer$BucketTable)", "public org.apache.lucene.search.BooleanScorer$BooleanScorerCollector(int, org.apache.lucene.search.BooleanScorer$BucketTable)"], ["void", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.collect(int)", "public final void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int)"], ["void", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.BooleanScorer$BucketScorer", "org.apache.lucene.search.BooleanScorer$BucketScorer()", "public org.apache.lucene.search.BooleanScorer$BucketScorer()"], ["int", "org.apache.lucene.search.BooleanScorer$BucketScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer$BucketScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer$BucketScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer$BucketScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.BooleanScorer$BucketTable", "org.apache.lucene.search.BooleanScorer$BucketTable()", "public org.apache.lucene.search.BooleanScorer$BucketTable()"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.BooleanScorer$BucketTable.newCollector(int)", "public org.apache.lucene.search.Collector newCollector(int)"], ["int", "org.apache.lucene.search.BooleanScorer$BucketTable.size()", "public final int size()"], ["org.apache.lucene.search.BooleanScorer$SubScorer", "org.apache.lucene.search.BooleanScorer$SubScorer(org.apache.lucene.search.Scorer, boolean, boolean, org.apache.lucene.search.Collector, org.apache.lucene.search.BooleanScorer$SubScorer)", "public org.apache.lucene.search.BooleanScorer$SubScorer(org.apache.lucene.search.Scorer, boolean, boolean, org.apache.lucene.search.Collector, org.apache.lucene.search.BooleanScorer$SubScorer) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer.score()", "public float score()"], ["void", "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.BooleanScorer.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.BooleanScorer2$1.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2$2.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.BooleanScorer2", "org.apache.lucene.search.BooleanScorer2(org.apache.lucene.search.Similarity, int, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>)", "public org.apache.lucene.search.BooleanScorer2(org.apache.lucene.search.Similarity, int, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>) throws java.io.IOException"], ["void", "org.apache.lucene.search.BooleanScorer2.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2.docID()", "public int docID()"], ["int", "org.apache.lucene.search.BooleanScorer2.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.BooleanScorer2.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.BooleanScorer2.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.CachingSpanFilter", "org.apache.lucene.search.CachingSpanFilter(org.apache.lucene.search.SpanFilter)", "public org.apache.lucene.search.CachingSpanFilter(org.apache.lucene.search.SpanFilter)"], ["org.apache.lucene.search.CachingSpanFilter", "org.apache.lucene.search.CachingSpanFilter(org.apache.lucene.search.SpanFilter, org.apache.lucene.search.CachingWrapperFilter$DeletesMode)", "public org.apache.lucene.search.CachingSpanFilter(org.apache.lucene.search.SpanFilter, org.apache.lucene.search.CachingWrapperFilter$DeletesMode)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.CachingSpanFilter.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.SpanFilterResult", "org.apache.lucene.search.CachingSpanFilter.bitSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.SpanFilterResult bitSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.CachingSpanFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.CachingSpanFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.CachingSpanFilter.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.CachingWrapperFilter$1.mergeDeletes(org.apache.lucene.index.IndexReader, org.apache.lucene.search.DocIdSet)", "public org.apache.lucene.search.DocIdSet mergeDeletes(org.apache.lucene.index.IndexReader, org.apache.lucene.search.DocIdSet)"], ["java.lang.Object", "org.apache.lucene.search.CachingWrapperFilter$1.mergeDeletes(org.apache.lucene.index.IndexReader, java.lang.Object)", "public java.lang.Object mergeDeletes(org.apache.lucene.index.IndexReader, java.lang.Object)"], ["org.apache.lucene.search.CachingWrapperFilter$DeletesMode[]", "org.apache.lucene.search.CachingWrapperFilter$DeletesMode.values()", "public static final org.apache.lucene.search.CachingWrapperFilter$DeletesMode[] values()"], ["org.apache.lucene.search.CachingWrapperFilter$DeletesMode", "org.apache.lucene.search.CachingWrapperFilter$DeletesMode.valueOf(java.lang.String)", "public static org.apache.lucene.search.CachingWrapperFilter$DeletesMode valueOf(java.lang.String)"], ["org.apache.lucene.search.CachingWrapperFilter$FilterCache", "org.apache.lucene.search.CachingWrapperFilter$FilterCache(org.apache.lucene.search.CachingWrapperFilter$DeletesMode)", "public org.apache.lucene.search.CachingWrapperFilter$FilterCache(org.apache.lucene.search.CachingWrapperFilter$DeletesMode)"], ["synchronized", "org.apache.lucene.search.CachingWrapperFilter$FilterCache.T get(org.apache.lucene.index.IndexReader, java.lang.Object, java.lang.Object)", "public synchronized T get(org.apache.lucene.index.IndexReader, java.lang.Object, java.lang.Object) throws java.io.IOException"], ["synchronized", "org.apache.lucene.search.CachingWrapperFilter$FilterCache.void put(java.lang.Object, java.lang.Object, T)", "public synchronized void put(java.lang.Object, java.lang.Object, T)"], ["org.apache.lucene.search.CachingWrapperFilter", "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter)", "public org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.CachingWrapperFilter", "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter, org.apache.lucene.search.CachingWrapperFilter$DeletesMode)", "public org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter, org.apache.lucene.search.CachingWrapperFilter$DeletesMode)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.CachingWrapperFilter.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.CachingWrapperFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.CachingWrapperFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.CachingWrapperFilter.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.Collector", "org.apache.lucene.search.Collector()", "public org.apache.lucene.search.Collector()"], ["org.apache.lucene.search.ComplexExplanation", "org.apache.lucene.search.ComplexExplanation()", "public org.apache.lucene.search.ComplexExplanation()"], ["org.apache.lucene.search.ComplexExplanation", "org.apache.lucene.search.ComplexExplanation(boolean, float, java.lang.String)", "public org.apache.lucene.search.ComplexExplanation(boolean, float, java.lang.String)"], ["java.lang.Boolean", "org.apache.lucene.search.ComplexExplanation.getMatch()", "public java.lang.Boolean getMatch()"], ["void", "org.apache.lucene.search.ComplexExplanation.setMatch(java.lang.Boolean)", "public void setMatch(java.lang.Boolean)"], ["boolean", "org.apache.lucene.search.ComplexExplanation.isMatch()", "public boolean isMatch()"], ["int", "org.apache.lucene.search.ConjunctionScorer$1.compare(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)", "public int compare(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.ConjunctionScorer$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.ConjunctionScorer", "org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Similarity, java.util.Collection<org.apache.lucene.search.Scorer>)", "public org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Similarity, java.util.Collection<org.apache.lucene.search.Scorer>) throws java.io.IOException"], ["org.apache.lucene.search.ConjunctionScorer", "org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Similarity, org.apache.lucene.search.Scorer...)", "public org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Similarity, org.apache.lucene.search.Scorer...) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConjunctionScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ConjunctionScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.ConjunctionScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreQuery$ConstantScorer", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.Similarity, org.apache.lucene.index.IndexReader, org.apache.lucene.search.Weight)", "public org.apache.lucene.search.ConstantScoreQuery$ConstantScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.Similarity, org.apache.lucene.index.IndexReader, org.apache.lucene.search.Weight) throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreQuery$ConstantWeight", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.ConstantScoreQuery$ConstantWeight(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.Searcher)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.ConstantScoreQuery", "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Filter)", "public org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.ConstantScoreQuery.getFilter()", "public org.apache.lucene.search.Filter getFilter()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.ConstantScoreQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.ConstantScoreQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.ConstantScoreQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)"], ["java.lang.String", "org.apache.lucene.search.ConstantScoreQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.ConstantScoreQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.ConstantScoreQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.DefaultSimilarity", "org.apache.lucene.search.DefaultSimilarity()", "public org.apache.lucene.search.DefaultSimilarity()"], ["float", "org.apache.lucene.search.DefaultSimilarity.computeNorm(java.lang.String, org.apache.lucene.index.FieldInvertState)", "public float computeNorm(java.lang.String, org.apache.lucene.index.FieldInvertState)"], ["float", "org.apache.lucene.search.DefaultSimilarity.lengthNorm(java.lang.String, int)", "public float lengthNorm(java.lang.String, int)"], ["float", "org.apache.lucene.search.DefaultSimilarity.queryNorm(float)", "public float queryNorm(float)"], ["float", "org.apache.lucene.search.DefaultSimilarity.tf(float)", "public float tf(float)"], ["float", "org.apache.lucene.search.DefaultSimilarity.sloppyFreq(int)", "public float sloppyFreq(int)"], ["float", "org.apache.lucene.search.DefaultSimilarity.idf(int, int)", "public float idf(int, int)"], ["float", "org.apache.lucene.search.DefaultSimilarity.coord(int, int)", "public float coord(int, int)"], ["void", "org.apache.lucene.search.DefaultSimilarity.setDiscountOverlaps(boolean)", "public void setDiscountOverlaps(boolean)"], ["boolean", "org.apache.lucene.search.DefaultSimilarity.getDiscountOverlaps()", "public boolean getDiscountOverlaps()"], ["org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionMaxQuery", "org.apache.lucene.search.DisjunctionMaxQuery(float)", "public org.apache.lucene.search.DisjunctionMaxQuery(float)"], ["org.apache.lucene.search.DisjunctionMaxQuery", "org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)", "public org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery.add(org.apache.lucene.search.Query)", "public void add(org.apache.lucene.search.Query)"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery.add(java.util.Collection<org.apache.lucene.search.Query>)", "public void add(java.util.Collection<org.apache.lucene.search.Query>)"], ["java.util.Iterator<org.apache.lucene.search.Query>", "org.apache.lucene.search.DisjunctionMaxQuery.iterator()", "public java.util.Iterator<org.apache.lucene.search.Query> iterator()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.DisjunctionMaxQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.DisjunctionMaxQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.DisjunctionMaxQuery.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.search.DisjunctionMaxQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.DisjunctionMaxQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.DisjunctionMaxQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.DisjunctionMaxQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.DisjunctionMaxScorer", "org.apache.lucene.search.DisjunctionMaxScorer(float, org.apache.lucene.search.Similarity, org.apache.lucene.search.Scorer[], int)", "public org.apache.lucene.search.DisjunctionMaxScorer(float, org.apache.lucene.search.Similarity, org.apache.lucene.search.Scorer[], int) throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionMaxScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionMaxScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.DisjunctionMaxScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionMaxScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionSumScorer", "org.apache.lucene.search.DisjunctionSumScorer(java.util.List<org.apache.lucene.search.Scorer>, int)", "public org.apache.lucene.search.DisjunctionSumScorer(java.util.List<org.apache.lucene.search.Scorer>, int) throws java.io.IOException"], ["org.apache.lucene.search.DisjunctionSumScorer", "org.apache.lucene.search.DisjunctionSumScorer(java.util.List<org.apache.lucene.search.Scorer>)", "public org.apache.lucene.search.DisjunctionSumScorer(java.util.List<org.apache.lucene.search.Scorer>) throws java.io.IOException"], ["void", "org.apache.lucene.search.DisjunctionSumScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.DisjunctionSumScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.nrMatchers()", "public int nrMatchers()"], ["int", "org.apache.lucene.search.DisjunctionSumScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.DocIdSet$1$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.DocIdSet$1$1.docID()", "public int docID()"], ["int", "org.apache.lucene.search.DocIdSet$1$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSet$1.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["boolean", "org.apache.lucene.search.DocIdSet$1.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.DocIdSet()", "public org.apache.lucene.search.DocIdSet()"], ["boolean", "org.apache.lucene.search.DocIdSet.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.DocIdSetIterator()", "public org.apache.lucene.search.DocIdSetIterator()"], ["org.apache.lucene.search.Explanation$IDFExplanation", "org.apache.lucene.search.Explanation$IDFExplanation()", "public org.apache.lucene.search.Explanation$IDFExplanation()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation()", "public org.apache.lucene.search.Explanation()"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Explanation(float, java.lang.String)", "public org.apache.lucene.search.Explanation(float, java.lang.String)"], ["boolean", "org.apache.lucene.search.Explanation.isMatch()", "public boolean isMatch()"], ["float", "org.apache.lucene.search.Explanation.getValue()", "public float getValue()"], ["void", "org.apache.lucene.search.Explanation.setValue(float)", "public void setValue(float)"], ["java.lang.String", "org.apache.lucene.search.Explanation.getDescription()", "public java.lang.String getDescription()"], ["void", "org.apache.lucene.search.Explanation.setDescription(java.lang.String)", "public void setDescription(java.lang.String)"], ["org.apache.lucene.search.Explanation[]", "org.apache.lucene.search.Explanation.getDetails()", "public org.apache.lucene.search.Explanation[] getDetails()"], ["void", "org.apache.lucene.search.Explanation.addDetail(org.apache.lucene.search.Explanation)", "public void addDetail(org.apache.lucene.search.Explanation)"], ["java.lang.String", "org.apache.lucene.search.Explanation.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.Explanation.toHtml()", "public java.lang.String toHtml()"], ["byte", "org.apache.lucene.search.FieldCache$1.parseByte(java.lang.String)", "public byte parseByte(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$1.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.search.FieldCache$10.parseDouble(java.lang.String)", "public double parseDouble(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$10.toString()", "public java.lang.String toString()"], ["short", "org.apache.lucene.search.FieldCache$2.parseShort(java.lang.String)", "public short parseShort(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$2.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.FieldCache$3.parseInt(java.lang.String)", "public int parseInt(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$3.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.FieldCache$4.parseFloat(java.lang.String)", "public float parseFloat(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$4.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.search.FieldCache$5.parseLong(java.lang.String)", "public long parseLong(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$5.toString()", "public java.lang.String toString()"], ["double", "org.apache.lucene.search.FieldCache$6.parseDouble(java.lang.String)", "public double parseDouble(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$6.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.FieldCache$7.parseInt(java.lang.String)", "public int parseInt(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$7.toString()", "public java.lang.String toString()"], ["float", "org.apache.lucene.search.FieldCache$8.parseFloat(java.lang.String)", "public float parseFloat(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$8.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.search.FieldCache$9.parseLong(java.lang.String)", "public long parseLong(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$9.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldCache$CacheEntry", "org.apache.lucene.search.FieldCache$CacheEntry()", "public org.apache.lucene.search.FieldCache$CacheEntry()"], ["void", "org.apache.lucene.search.FieldCache$CacheEntry.estimateSize()", "public void estimateSize()"], ["void", "org.apache.lucene.search.FieldCache$CacheEntry.estimateSize(org.apache.lucene.util.RamUsageEstimator)", "public void estimateSize(org.apache.lucene.util.RamUsageEstimator)"], ["java.lang.String", "org.apache.lucene.search.FieldCache$CacheEntry.getEstimatedSize()", "public final java.lang.String getEstimatedSize()"], ["java.lang.String", "org.apache.lucene.search.FieldCache$CacheEntry.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldCache$CreationPlaceholder", "org.apache.lucene.search.FieldCache$CreationPlaceholder()", "public org.apache.lucene.search.FieldCache$CreationPlaceholder()"], ["int", "org.apache.lucene.search.FieldCache$StringIndex.binarySearchLookup(java.lang.String)", "public int binarySearchLookup(java.lang.String)"], ["org.apache.lucene.search.FieldCache$StringIndex", "org.apache.lucene.search.FieldCache$StringIndex(int[], java.lang.String[])", "public org.apache.lucene.search.FieldCache$StringIndex(int[], java.lang.String[])"], ["void", "org.apache.lucene.search.FieldCacheImpl$Cache.purge(org.apache.lucene.index.IndexReader)", "public void purge(org.apache.lucene.index.IndexReader)"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$Cache.get(org.apache.lucene.index.IndexReader, org.apache.lucene.search.FieldCacheImpl$Entry)", "public java.lang.Object get(org.apache.lucene.index.IndexReader, org.apache.lucene.search.FieldCacheImpl$Entry) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getReaderKey()", "public java.lang.Object getReaderKey()"], ["java.lang.String", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getFieldName()", "public java.lang.String getFieldName()"], ["java.lang.Class<?>", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getCacheType()", "public java.lang.Class<?> getCacheType()"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getCustom()", "public java.lang.Object getCustom()"], ["java.lang.Object", "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getValue()", "public java.lang.Object getValue()"], ["boolean", "org.apache.lucene.search.FieldCacheImpl$Entry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FieldCacheImpl$Entry.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.search.FieldCacheImpl.purgeAllCaches()", "public void purgeAllCaches()"], ["void", "org.apache.lucene.search.FieldCacheImpl.purge(org.apache.lucene.index.IndexReader)", "public void purge(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.search.FieldCache$CacheEntry[]", "org.apache.lucene.search.FieldCacheImpl.getCacheEntries()", "public org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()"], ["byte[]", "org.apache.lucene.search.FieldCacheImpl.getBytes(org.apache.lucene.index.IndexReader, java.lang.String)", "public byte[] getBytes(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["byte[]", "org.apache.lucene.search.FieldCacheImpl.getBytes(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$ByteParser)", "public byte[] getBytes(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$ByteParser) throws java.io.IOException"], ["short[]", "org.apache.lucene.search.FieldCacheImpl.getShorts(org.apache.lucene.index.IndexReader, java.lang.String)", "public short[] getShorts(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["short[]", "org.apache.lucene.search.FieldCacheImpl.getShorts(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$ShortParser)", "public short[] getShorts(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$ShortParser) throws java.io.IOException"], ["int[]", "org.apache.lucene.search.FieldCacheImpl.getInts(org.apache.lucene.index.IndexReader, java.lang.String)", "public int[] getInts(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["int[]", "org.apache.lucene.search.FieldCacheImpl.getInts(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$IntParser)", "public int[] getInts(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$IntParser) throws java.io.IOException"], ["float[]", "org.apache.lucene.search.FieldCacheImpl.getFloats(org.apache.lucene.index.IndexReader, java.lang.String)", "public float[] getFloats(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["float[]", "org.apache.lucene.search.FieldCacheImpl.getFloats(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$FloatParser)", "public float[] getFloats(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$FloatParser) throws java.io.IOException"], ["long[]", "org.apache.lucene.search.FieldCacheImpl.getLongs(org.apache.lucene.index.IndexReader, java.lang.String)", "public long[] getLongs(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["long[]", "org.apache.lucene.search.FieldCacheImpl.getLongs(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$LongParser)", "public long[] getLongs(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$LongParser) throws java.io.IOException"], ["double[]", "org.apache.lucene.search.FieldCacheImpl.getDoubles(org.apache.lucene.index.IndexReader, java.lang.String)", "public double[] getDoubles(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["double[]", "org.apache.lucene.search.FieldCacheImpl.getDoubles(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser)", "public double[] getDoubles(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.search.FieldCacheImpl.getStrings(org.apache.lucene.index.IndexReader, java.lang.String)", "public java.lang.String[] getStrings(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.search.FieldCache$StringIndex", "org.apache.lucene.search.FieldCacheImpl.getStringIndex(org.apache.lucene.index.IndexReader, java.lang.String)", "public org.apache.lucene.search.FieldCache$StringIndex getStringIndex(org.apache.lucene.index.IndexReader, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldCacheImpl.setInfoStream(java.io.PrintStream)", "public void setInfoStream(java.io.PrintStream)"], ["java.io.PrintStream", "org.apache.lucene.search.FieldCacheImpl.getInfoStream()", "public java.io.PrintStream getInfoStream()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$1.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$2.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$3.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$4.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$5.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$6.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheRangeFilter$7.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet$1.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet$2.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet$2.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet$2.advance(int)", "public int advance(int)"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FieldCacheRangeFilter$FieldCacheDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.String>", "org.apache.lucene.search.FieldCacheRangeFilter.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.String> newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte>", "org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(java.lang.String, java.lang.Byte, java.lang.Byte, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte> newByteRange(java.lang.String, java.lang.Byte, java.lang.Byte, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte>", "org.apache.lucene.search.FieldCacheRangeFilter.newByteRange(java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, java.lang.Byte, java.lang.Byte, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Byte> newByteRange(java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, java.lang.Byte, java.lang.Byte, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short>", "org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(java.lang.String, java.lang.Short, java.lang.Short, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short> newShortRange(java.lang.String, java.lang.Short, java.lang.Short, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short>", "org.apache.lucene.search.FieldCacheRangeFilter.newShortRange(java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, java.lang.Short, java.lang.Short, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Short> newShortRange(java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, java.lang.Short, java.lang.Short, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer>", "org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer> newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer>", "org.apache.lucene.search.FieldCacheRangeFilter.newIntRange(java.lang.String, org.apache.lucene.search.FieldCache$IntParser, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Integer> newIntRange(java.lang.String, org.apache.lucene.search.FieldCache$IntParser, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long>", "org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long> newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long>", "org.apache.lucene.search.FieldCacheRangeFilter.newLongRange(java.lang.String, org.apache.lucene.search.FieldCache$LongParser, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Long> newLongRange(java.lang.String, org.apache.lucene.search.FieldCache$LongParser, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float>", "org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float> newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float>", "org.apache.lucene.search.FieldCacheRangeFilter.newFloatRange(java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Float> newFloatRange(java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double>", "org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double>", "org.apache.lucene.search.FieldCacheRangeFilter.newDoubleRange(java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.FieldCacheRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, java.lang.Double, java.lang.Double, boolean, boolean)"], ["java.lang.String", "org.apache.lucene.search.FieldCacheRangeFilter.toString()", "public final java.lang.String toString()"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FieldCacheRangeFilter.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.apache.lucene.search.FieldCacheRangeFilter.getField()", "public java.lang.String getField()"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.FieldCacheRangeFilter.includesUpper()", "public boolean includesUpper()"], ["T", "org.apache.lucene.search.FieldCacheRangeFilter.getLowerVal()", "public T getLowerVal()"], ["T", "org.apache.lucene.search.FieldCacheRangeFilter.getUpperVal()", "public T getUpperVal()"], ["org.apache.lucene.search.FieldCache$Parser", "org.apache.lucene.search.FieldCacheRangeFilter.getParser()", "public org.apache.lucene.search.FieldCache$Parser getParser()"], ["int", "org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet$FieldCacheTermsFilterDocIdSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet$FieldCacheTermsFilterDocIdSetIterator.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet$FieldCacheTermsFilterDocIdSetIterator.advance(int)", "public int advance(int)"], ["org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet", "org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet(org.apache.lucene.search.FieldCacheTermsFilter, org.apache.lucene.search.FieldCache$StringIndex)", "public org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet(org.apache.lucene.search.FieldCacheTermsFilter, org.apache.lucene.search.FieldCache$StringIndex)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["boolean", "org.apache.lucene.search.FieldCacheTermsFilter$FieldCacheTermsFilterDocIdSet.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.FieldCacheTermsFilter", "org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, java.lang.String...)", "public org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, java.lang.String...)"], ["org.apache.lucene.search.FieldCache", "org.apache.lucene.search.FieldCacheTermsFilter.getFieldCache()", "public org.apache.lucene.search.FieldCache getFieldCache()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.FieldCacheTermsFilter.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["int", "org.apache.lucene.search.FieldComparator$ByteComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$ByteComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$ByteComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$ByteComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$ByteComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$ByteComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$DocComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int)"], ["void", "org.apache.lucene.search.FieldComparator$DocComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$DocComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$DoubleComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$DoubleComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$FloatComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$FloatComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$IntComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$IntComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$IntComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$LongComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$LongComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$LongComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareBottom(int)", "public int compareBottom(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.copy(int, int)", "public void copy(int, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setBottom(int)", "public void setBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$RelevanceComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$ShortComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$ShortComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$ShortComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$ShortComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$ShortComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$ShortComparator.value(int)", "public java.lang.Comparable value(int)"], ["int", "org.apache.lucene.search.FieldComparator$StringComparatorLocale.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$StringComparatorLocale.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$StringComparatorLocale.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$StringComparatorLocale.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$StringComparatorLocale.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$StringComparatorLocale.value(int)", "public java.lang.Comparable value(int)"], ["org.apache.lucene.search.FieldComparator$StringOrdValComparator", "org.apache.lucene.search.FieldComparator$StringOrdValComparator(int, java.lang.String, int, boolean)", "public org.apache.lucene.search.FieldComparator$StringOrdValComparator(int, java.lang.String, int, boolean)"], ["int", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.value(int)", "public java.lang.Comparable value(int)"], ["java.lang.String[]", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.getValues()", "public java.lang.String[] getValues()"], ["int", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.getBottomSlot()", "public int getBottomSlot()"], ["java.lang.String", "org.apache.lucene.search.FieldComparator$StringOrdValComparator.getField()", "public java.lang.String getField()"], ["int", "org.apache.lucene.search.FieldComparator$StringValComparator.compare(int, int)", "public int compare(int, int)"], ["int", "org.apache.lucene.search.FieldComparator$StringValComparator.compareBottom(int)", "public int compareBottom(int)"], ["void", "org.apache.lucene.search.FieldComparator$StringValComparator.copy(int, int)", "public void copy(int, int)"], ["void", "org.apache.lucene.search.FieldComparator$StringValComparator.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.FieldComparator$StringValComparator.setBottom(int)", "public void setBottom(int)"], ["java.lang.Comparable", "org.apache.lucene.search.FieldComparator$StringValComparator.value(int)", "public java.lang.Comparable value(int)"], ["org.apache.lucene.search.FieldComparator", "org.apache.lucene.search.FieldComparator()", "public org.apache.lucene.search.FieldComparator()"], ["void", "org.apache.lucene.search.FieldComparator.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.FieldComparatorSource", "org.apache.lucene.search.FieldComparatorSource()", "public org.apache.lucene.search.FieldComparatorSource()"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float)", "public org.apache.lucene.search.FieldDoc(int, float)"], ["org.apache.lucene.search.FieldDoc", "org.apache.lucene.search.FieldDoc(int, float, java.lang.Comparable[])", "public org.apache.lucene.search.FieldDoc(int, float, java.lang.Comparable[])"], ["java.lang.String", "org.apache.lucene.search.FieldDoc.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.search.FieldValueHitQueue$Entry.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int)", "public org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int) throws java.io.IOException"], ["org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int)", "public org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int) throws java.io.IOException"], ["org.apache.lucene.search.FieldValueHitQueue", "org.apache.lucene.search.FieldValueHitQueue.create(org.apache.lucene.search.SortField[], int)", "public static org.apache.lucene.search.FieldValueHitQueue create(org.apache.lucene.search.SortField[], int) throws java.io.IOException"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.Filter()", "public org.apache.lucene.search.Filter()"], ["int", "org.apache.lucene.search.FilterManager$FilterCleaner$1.compare(java.util.Map$Entry<java.lang.Integer, org.apache.lucene.search.FilterManager$FilterItem>, java.util.Map$Entry<java.lang.Integer, org.apache.lucene.search.FilterManager$FilterItem>)", "public int compare(java.util.Map$Entry<java.lang.Integer, org.apache.lucene.search.FilterManager$FilterItem>, java.util.Map$Entry<java.lang.Integer, org.apache.lucene.search.FilterManager$FilterItem>)"], ["int", "org.apache.lucene.search.FilterManager$FilterCleaner$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.FilterManager$FilterCleaner", "org.apache.lucene.search.FilterManager$FilterCleaner(org.apache.lucene.search.FilterManager)", "public org.apache.lucene.search.FilterManager$FilterCleaner(org.apache.lucene.search.FilterManager)"], ["void", "org.apache.lucene.search.FilterManager$FilterCleaner.run()", "public void run()"], ["org.apache.lucene.search.FilterManager$FilterItem", "org.apache.lucene.search.FilterManager$FilterItem(org.apache.lucene.search.FilterManager, org.apache.lucene.search.Filter)", "public org.apache.lucene.search.FilterManager$FilterItem(org.apache.lucene.search.FilterManager, org.apache.lucene.search.Filter)"], ["synchronized", "org.apache.lucene.search.FilterManager.org.apache.lucene.search.FilterManager getInstance()", "public static synchronized org.apache.lucene.search.FilterManager getInstance()"], ["void", "org.apache.lucene.search.FilterManager.setCacheSize(int)", "public void setCacheSize(int)"], ["void", "org.apache.lucene.search.FilterManager.setCleanThreadSleepTime(long)", "public void setCleanThreadSleepTime(long)"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.FilterManager.getFilter(org.apache.lucene.search.Filter)", "public org.apache.lucene.search.Filter getFilter(org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.FilteredDocIdSet", "org.apache.lucene.search.FilteredDocIdSet(org.apache.lucene.search.DocIdSet)", "public org.apache.lucene.search.FilteredDocIdSet(org.apache.lucene.search.DocIdSet)"], ["boolean", "org.apache.lucene.search.FilteredDocIdSet.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.FilteredDocIdSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["org.apache.lucene.search.FilteredDocIdSetIterator", "org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredQuery$1$1.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.FilteredQuery$1$1.docID()", "public int docID()"], ["int", "org.apache.lucene.search.FilteredQuery$1$1.advance(int)", "public int advance(int) throws java.io.IOException"], ["float", "org.apache.lucene.search.FilteredQuery$1$1.score()", "public float score() throws java.io.IOException"], ["float", "org.apache.lucene.search.FilteredQuery$1.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.FilteredQuery$1.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.FilteredQuery$1.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.FilteredQuery$1.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FilteredQuery$1.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.FilteredQuery$1.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.FilteredQuery", "org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter)", "public org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.FilteredQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FilteredQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FilteredQuery.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["org.apache.lucene.search.Filter", "org.apache.lucene.search.FilteredQuery.getFilter()", "public org.apache.lucene.search.Filter getFilter()"], ["void", "org.apache.lucene.search.FilteredQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.FilteredQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.FilteredQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.FilteredQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.FilteredTermEnum", "org.apache.lucene.search.FilteredTermEnum()", "public org.apache.lucene.search.FilteredTermEnum()"], ["int", "org.apache.lucene.search.FilteredTermEnum.docFreq()", "public int docFreq()"], ["boolean", "org.apache.lucene.search.FilteredTermEnum.next()", "public boolean next() throws java.io.IOException"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.FilteredTermEnum.term()", "public org.apache.lucene.index.Term term()"], ["void", "org.apache.lucene.search.FilteredTermEnum.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.search.FuzzyQuery$ScoreTerm.compareTo(org.apache.lucene.search.FuzzyQuery$ScoreTerm)", "public int compareTo(org.apache.lucene.search.FuzzyQuery$ScoreTerm)"], ["int", "org.apache.lucene.search.FuzzyQuery$ScoreTerm.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, float, int)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, float, int) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, float)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, float) throws java.lang.IllegalArgumentException"], ["org.apache.lucene.search.FuzzyQuery", "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)"], ["float", "org.apache.lucene.search.FuzzyQuery.getMinSimilarity()", "public float getMinSimilarity()"], ["int", "org.apache.lucene.search.FuzzyQuery.getPrefixLength()", "public int getPrefixLength()"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.FuzzyQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["void", "org.apache.lucene.search.FuzzyQuery.setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)", "public void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.FuzzyQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.FuzzyQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.FuzzyQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.FuzzyQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.FuzzyTermEnum", "org.apache.lucene.search.FuzzyTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term)", "public org.apache.lucene.search.FuzzyTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.search.FuzzyTermEnum", "org.apache.lucene.search.FuzzyTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term, float)", "public org.apache.lucene.search.FuzzyTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term, float) throws java.io.IOException"], ["org.apache.lucene.search.FuzzyTermEnum", "org.apache.lucene.search.FuzzyTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term, float, int)", "public org.apache.lucene.search.FuzzyTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term, float, int) throws java.io.IOException"], ["float", "org.apache.lucene.search.FuzzyTermEnum.difference()", "public final float difference()"], ["boolean", "org.apache.lucene.search.FuzzyTermEnum.endEnum()", "public final boolean endEnum()"], ["void", "org.apache.lucene.search.FuzzyTermEnum.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.store.Directory)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.store.Directory) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.store.Directory, boolean)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.store.Directory, boolean) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.search.IndexSearcher", "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[])", "public org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, org.apache.lucene.index.IndexReader[], int[])"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.search.IndexSearcher.getIndexReader()", "public org.apache.lucene.index.IndexReader getIndexReader()"], ["void", "org.apache.lucene.search.IndexSearcher.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.search.IndexSearcher.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.IndexSearcher.doc(int)", "public org.apache.lucene.document.Document doc(int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.IndexSearcher.doc(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document doc(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["int", "org.apache.lucene.search.IndexSearcher.maxDoc()", "public int maxDoc() throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.IndexSearcher.rewrite(org.apache.lucene.search.Query)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.IndexSearcher.explain(org.apache.lucene.search.Weight, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.Weight, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.IndexSearcher.setDefaultFieldSortScoring(boolean, boolean)", "public void setDefaultFieldSortScoring(boolean, boolean)"], ["org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight(org.apache.lucene.search.MatchAllDocsQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight(org.apache.lucene.search.MatchAllDocsQuery, org.apache.lucene.search.Searcher)"], ["java.lang.String", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights()"], ["void", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int)"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.score()", "public float score()"], ["int", "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.MatchAllDocsQuery", "org.apache.lucene.search.MatchAllDocsQuery()", "public org.apache.lucene.search.MatchAllDocsQuery()"], ["org.apache.lucene.search.MatchAllDocsQuery", "org.apache.lucene.search.MatchAllDocsQuery(java.lang.String)", "public org.apache.lucene.search.MatchAllDocsQuery(java.lang.String)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MatchAllDocsQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)"], ["void", "org.apache.lucene.search.MatchAllDocsQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.MatchAllDocsQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MatchAllDocsQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MatchAllDocsQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights()"], ["void", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.MultiPhraseQuery", "org.apache.lucene.search.MultiPhraseQuery()", "public org.apache.lucene.search.MultiPhraseQuery()"], ["void", "org.apache.lucene.search.MultiPhraseQuery.setSlop(int)", "public void setSlop(int)"], ["int", "org.apache.lucene.search.MultiPhraseQuery.getSlop()", "public int getSlop()"], ["void", "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term)", "public void add(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[])", "public void add(org.apache.lucene.index.Term[])"], ["void", "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[], int)", "public void add(org.apache.lucene.index.Term[], int)"], ["java.util.List<org.apache.lucene.index.Term[]>", "org.apache.lucene.search.MultiPhraseQuery.getTermArrays()", "public java.util.List<org.apache.lucene.index.Term[]> getTermArrays()"], ["int[]", "org.apache.lucene.search.MultiPhraseQuery.getPositions()", "public int[] getPositions()"], ["void", "org.apache.lucene.search.MultiPhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.MultiPhraseQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.MultiPhraseQuery.toString(java.lang.String)", "public final java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.MultiPhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiPhraseQuery.hashCode()", "public int hashCode()"], ["void", "org.apache.lucene.search.MultiSearcher$1.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiSearcher$1.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiSearcher$1.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.MultiSearcher$1.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.MultiSearcher$CachedDfSource", "org.apache.lucene.search.MultiSearcher$CachedDfSource(java.util.Map<org.apache.lucene.index.Term, java.lang.Integer>, int, org.apache.lucene.search.Similarity)", "public org.apache.lucene.search.MultiSearcher$CachedDfSource(java.util.Map<org.apache.lucene.index.Term, java.lang.Integer>, int, org.apache.lucene.search.Similarity)"], ["int", "org.apache.lucene.search.MultiSearcher$CachedDfSource.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term)"], ["int[]", "org.apache.lucene.search.MultiSearcher$CachedDfSource.docFreqs(org.apache.lucene.index.Term[])", "public int[] docFreqs(org.apache.lucene.index.Term[])"], ["int", "org.apache.lucene.search.MultiSearcher$CachedDfSource.maxDoc()", "public int maxDoc()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiSearcher$CachedDfSource.rewrite(org.apache.lucene.search.Query)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query)"], ["void", "org.apache.lucene.search.MultiSearcher$CachedDfSource.close()", "public void close()"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.MultiSearcher$CachedDfSource.doc(int)", "public org.apache.lucene.document.Document doc(int)"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.MultiSearcher$CachedDfSource.doc(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document doc(int, org.apache.lucene.document.FieldSelector)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MultiSearcher$CachedDfSource.explain(org.apache.lucene.search.Weight, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.Weight, int)"], ["void", "org.apache.lucene.search.MultiSearcher$CachedDfSource.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.MultiSearcher$CachedDfSource.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int)"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.MultiSearcher$CachedDfSource.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)"], ["org.apache.lucene.search.MultiSearcher$MultiSearcherCallableNoSort", "org.apache.lucene.search.MultiSearcher$MultiSearcherCallableNoSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.Searchable, org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.HitQueue, int, int[])", "public org.apache.lucene.search.MultiSearcher$MultiSearcherCallableNoSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.Searchable, org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.HitQueue, int, int[])"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.MultiSearcher$MultiSearcherCallableNoSort.call()", "public org.apache.lucene.search.TopDocs call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.MultiSearcher$MultiSearcherCallableNoSort.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.search.MultiSearcher$MultiSearcherCallableWithSort", "org.apache.lucene.search.MultiSearcher$MultiSearcherCallableWithSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.Searchable, org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.FieldDocSortedHitQueue, org.apache.lucene.search.Sort, int, int[])", "public org.apache.lucene.search.MultiSearcher$MultiSearcherCallableWithSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.Searchable, org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.FieldDocSortedHitQueue, org.apache.lucene.search.Sort, int, int[])"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.MultiSearcher$MultiSearcherCallableWithSort.call()", "public org.apache.lucene.search.TopFieldDocs call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.MultiSearcher$MultiSearcherCallableWithSort.call()", "public java.lang.Object call() throws java.lang.Exception"], ["org.apache.lucene.search.MultiSearcher", "org.apache.lucene.search.MultiSearcher(org.apache.lucene.search.Searchable...)", "public org.apache.lucene.search.MultiSearcher(org.apache.lucene.search.Searchable...) throws java.io.IOException"], ["org.apache.lucene.search.Searchable[]", "org.apache.lucene.search.MultiSearcher.getSearchables()", "public org.apache.lucene.search.Searchable[] getSearchables()"], ["void", "org.apache.lucene.search.MultiSearcher.close()", "public void close() throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiSearcher.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.MultiSearcher.doc(int)", "public org.apache.lucene.document.Document doc(int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["org.apache.lucene.document.Document", "org.apache.lucene.search.MultiSearcher.doc(int, org.apache.lucene.document.FieldSelector)", "public org.apache.lucene.document.Document doc(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException"], ["int", "org.apache.lucene.search.MultiSearcher.subSearcher(int)", "public int subSearcher(int)"], ["int", "org.apache.lucene.search.MultiSearcher.subDoc(int)", "public int subDoc(int)"], ["int", "org.apache.lucene.search.MultiSearcher.maxDoc()", "public int maxDoc() throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.MultiSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.MultiSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiSearcher.rewrite(org.apache.lucene.search.Query)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.MultiSearcher.explain(org.apache.lucene.search.Weight, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.Weight, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.MultiTermQuery$1.setTermCountCutoff(int)", "public void setTermCountCutoff(int)"], ["void", "org.apache.lucene.search.MultiTermQuery$1.setDocCountPercent(double)", "public void setDocCountPercent(double)"], ["org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite()", "public org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite()"], ["void", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.setTermCountCutoff(int)", "public void setTermCountCutoff(int)"], ["int", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.getTermCountCutoff()", "public int getTermCountCutoff()"], ["void", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.setDocCountPercent(double)", "public void setDocCountPercent(double)"], ["double", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.getDocCountPercent()", "public double getDocCountPercent()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["int", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$ConstantScoreBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$ConstantScoreFilterRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.search.MultiTermQuery$RewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery$ScoringBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery) throws java.io.IOException"], ["org.apache.lucene.search.MultiTermQuery", "org.apache.lucene.search.MultiTermQuery()", "public org.apache.lucene.search.MultiTermQuery()"], ["int", "org.apache.lucene.search.MultiTermQuery.getTotalNumberOfTerms()", "public int getTotalNumberOfTerms()"], ["void", "org.apache.lucene.search.MultiTermQuery.clearTotalNumberOfTerms()", "public void clearTotalNumberOfTerms()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.MultiTermQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.MultiTermQuery$RewriteMethod", "org.apache.lucene.search.MultiTermQuery.getRewriteMethod()", "public org.apache.lucene.search.MultiTermQuery$RewriteMethod getRewriteMethod()"], ["void", "org.apache.lucene.search.MultiTermQuery.setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)", "public void setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"], ["int", "org.apache.lucene.search.MultiTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.MultiTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.MultiTermQueryWrapperFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.MultiTermQueryWrapperFilter.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.MultiTermQueryWrapperFilter.hashCode()", "public final int hashCode()"], ["int", "org.apache.lucene.search.MultiTermQueryWrapperFilter.getTotalNumberOfTerms()", "public int getTotalNumberOfTerms()"], ["void", "org.apache.lucene.search.MultiTermQueryWrapperFilter.clearTotalNumberOfTerms()", "public void clearTotalNumberOfTerms()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Long>", "org.apache.lucene.search.NumericRangeFilter.newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Long> newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Long>", "org.apache.lucene.search.NumericRangeFilter.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Long> newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Integer>", "org.apache.lucene.search.NumericRangeFilter.newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Integer> newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Integer>", "org.apache.lucene.search.NumericRangeFilter.newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Integer> newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Double>", "org.apache.lucene.search.NumericRangeFilter.newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Double>", "org.apache.lucene.search.NumericRangeFilter.newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Double> newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Float>", "org.apache.lucene.search.NumericRangeFilter.newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Float> newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeFilter<java.lang.Float>", "org.apache.lucene.search.NumericRangeFilter.newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeFilter<java.lang.Float> newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)"], ["java.lang.String", "org.apache.lucene.search.NumericRangeFilter.getField()", "public java.lang.String getField()"], ["boolean", "org.apache.lucene.search.NumericRangeFilter.includesMin()", "public boolean includesMin()"], ["boolean", "org.apache.lucene.search.NumericRangeFilter.includesMax()", "public boolean includesMax()"], ["T", "org.apache.lucene.search.NumericRangeFilter.getMin()", "public T getMin()"], ["T", "org.apache.lucene.search.NumericRangeFilter.getMax()", "public T getMax()"], ["void", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum$1.addRange(java.lang.String, java.lang.String)", "public final void addRange(java.lang.String, java.lang.String)"], ["void", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum$2.addRange(java.lang.String, java.lang.String)", "public final void addRange(java.lang.String, java.lang.String)"], ["float", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum.difference()", "public float difference()"], ["boolean", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum.next()", "public boolean next() throws java.io.IOException"], ["void", "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermEnum.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Long>", "org.apache.lucene.search.NumericRangeQuery.newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Long> newLongRange(java.lang.String, int, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Long>", "org.apache.lucene.search.NumericRangeQuery.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Long> newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Integer>", "org.apache.lucene.search.NumericRangeQuery.newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Integer> newIntRange(java.lang.String, int, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Integer>", "org.apache.lucene.search.NumericRangeQuery.newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Integer> newIntRange(java.lang.String, java.lang.Integer, java.lang.Integer, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Double>", "org.apache.lucene.search.NumericRangeQuery.newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Double> newDoubleRange(java.lang.String, int, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Double>", "org.apache.lucene.search.NumericRangeQuery.newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Double> newDoubleRange(java.lang.String, java.lang.Double, java.lang.Double, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Float>", "org.apache.lucene.search.NumericRangeQuery.newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Float> newFloatRange(java.lang.String, int, java.lang.Float, java.lang.Float, boolean, boolean)"], ["org.apache.lucene.search.NumericRangeQuery<java.lang.Float>", "org.apache.lucene.search.NumericRangeQuery.newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)", "public static org.apache.lucene.search.NumericRangeQuery<java.lang.Float> newFloatRange(java.lang.String, java.lang.Float, java.lang.Float, boolean, boolean)"], ["java.lang.String", "org.apache.lucene.search.NumericRangeQuery.getField()", "public java.lang.String getField()"], ["boolean", "org.apache.lucene.search.NumericRangeQuery.includesMin()", "public boolean includesMin()"], ["boolean", "org.apache.lucene.search.NumericRangeQuery.includesMax()", "public boolean includesMax()"], ["T", "org.apache.lucene.search.NumericRangeQuery.getMin()", "public T getMin()"], ["T", "org.apache.lucene.search.NumericRangeQuery.getMax()", "public T getMax()"], ["java.lang.String", "org.apache.lucene.search.NumericRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.NumericRangeQuery.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.NumericRangeQuery.hashCode()", "public final int hashCode()"], ["java.lang.Integer", "org.apache.lucene.search.ParallelMultiSearcher$1.call()", "public java.lang.Integer call() throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.ParallelMultiSearcher$1.call()", "public java.lang.Object call() throws java.lang.Exception"], ["void", "org.apache.lucene.search.ParallelMultiSearcher$2.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["void", "org.apache.lucene.search.ParallelMultiSearcher$2.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.ParallelMultiSearcher$2.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.ParallelMultiSearcher$2.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["boolean", "org.apache.lucene.search.ParallelMultiSearcher$ExecutionHelper.hasNext()", "public boolean hasNext()"], ["void", "org.apache.lucene.search.ParallelMultiSearcher$ExecutionHelper.submit(java.util.concurrent.Callable<T>)", "public void submit(java.util.concurrent.Callable<T>)"], ["T", "org.apache.lucene.search.ParallelMultiSearcher$ExecutionHelper.next()", "public T next()"], ["void", "org.apache.lucene.search.ParallelMultiSearcher$ExecutionHelper.remove()", "public void remove()"], ["java.util.Iterator<T>", "org.apache.lucene.search.ParallelMultiSearcher$ExecutionHelper.iterator()", "public java.util.Iterator<T> iterator()"], ["org.apache.lucene.search.ParallelMultiSearcher", "org.apache.lucene.search.ParallelMultiSearcher(org.apache.lucene.search.Searchable...)", "public org.apache.lucene.search.ParallelMultiSearcher(org.apache.lucene.search.Searchable...) throws java.io.IOException"], ["int", "org.apache.lucene.search.ParallelMultiSearcher.docFreq(org.apache.lucene.index.Term)", "public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.ParallelMultiSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.ParallelMultiSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["void", "org.apache.lucene.search.ParallelMultiSearcher.search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Weight, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector) throws java.io.IOException"], ["void", "org.apache.lucene.search.ParallelMultiSearcher.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.search.PhraseQuery$PhraseWeight", "org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.PhraseQuery$PhraseWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.PhraseQuery$PhraseWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.PhraseQuery$PhraseWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.PhraseQuery$PhraseWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights()"], ["void", "org.apache.lucene.search.PhraseQuery$PhraseWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.PhraseQuery$PhraseWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.PhraseQuery$PhraseWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.PhraseQuery", "org.apache.lucene.search.PhraseQuery()", "public org.apache.lucene.search.PhraseQuery()"], ["void", "org.apache.lucene.search.PhraseQuery.setSlop(int)", "public void setSlop(int)"], ["int", "org.apache.lucene.search.PhraseQuery.getSlop()", "public int getSlop()"], ["void", "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term)", "public void add(org.apache.lucene.index.Term)"], ["void", "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term, int)", "public void add(org.apache.lucene.index.Term, int)"], ["org.apache.lucene.index.Term[]", "org.apache.lucene.search.PhraseQuery.getTerms()", "public org.apache.lucene.index.Term[] getTerms()"], ["int[]", "org.apache.lucene.search.PhraseQuery.getPositions()", "public int[] getPositions()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.PhraseQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["void", "org.apache.lucene.search.PhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.PhraseQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.PhraseQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.PhraseQuery.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.search.PhraseScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.PhraseScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.PhraseScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.PhraseScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["float", "org.apache.lucene.search.PhraseScorer.currentFreq()", "public final float currentFreq()"], ["java.lang.String", "org.apache.lucene.search.PhraseScorer.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.PositiveScoresOnlyCollector", "org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)", "public org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.PositiveScoresOnlyCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.PositiveScoresOnlyCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.PrefixFilter", "org.apache.lucene.search.PrefixFilter(org.apache.lucene.index.Term)", "public org.apache.lucene.search.PrefixFilter(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.PrefixFilter.getPrefix()", "public org.apache.lucene.index.Term getPrefix()"], ["java.lang.String", "org.apache.lucene.search.PrefixFilter.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.PrefixQuery", "org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.PrefixQuery.getPrefix()", "public org.apache.lucene.index.Term getPrefix()"], ["java.lang.String", "org.apache.lucene.search.PrefixQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.PrefixQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.PrefixQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.PrefixTermEnum", "org.apache.lucene.search.PrefixTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term)", "public org.apache.lucene.search.PrefixTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["float", "org.apache.lucene.search.PrefixTermEnum.difference()", "public float difference()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query()", "public org.apache.lucene.search.Query()"], ["void", "org.apache.lucene.search.Query.setBoost(float)", "public void setBoost(float)"], ["float", "org.apache.lucene.search.Query.getBoost()", "public float getBoost()"], ["java.lang.String", "org.apache.lucene.search.Query.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Query.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Query.weight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight weight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query.combine(org.apache.lucene.search.Query[])", "public org.apache.lucene.search.Query combine(org.apache.lucene.search.Query[])"], ["void", "org.apache.lucene.search.Query.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.Query.mergeBooleanQueries(org.apache.lucene.search.BooleanQuery...)", "public static org.apache.lucene.search.Query mergeBooleanQueries(org.apache.lucene.search.BooleanQuery...)"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.Query.getSimilarity(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)"], ["java.lang.Object", "org.apache.lucene.search.Query.clone()", "public java.lang.Object clone()"], ["int", "org.apache.lucene.search.Query.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.Query.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.search.QueryTermVector.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.QueryTermVector", "org.apache.lucene.search.QueryTermVector(java.lang.String[])", "public org.apache.lucene.search.QueryTermVector(java.lang.String[])"], ["org.apache.lucene.search.QueryTermVector", "org.apache.lucene.search.QueryTermVector(java.lang.String, org.apache.lucene.analysis.Analyzer)", "public org.apache.lucene.search.QueryTermVector(java.lang.String, org.apache.lucene.analysis.Analyzer)"], ["java.lang.String", "org.apache.lucene.search.QueryTermVector.toString()", "public final java.lang.String toString()"], ["int", "org.apache.lucene.search.QueryTermVector.size()", "public int size()"], ["java.lang.String[]", "org.apache.lucene.search.QueryTermVector.getTerms()", "public java.lang.String[] getTerms()"], ["int[]", "org.apache.lucene.search.QueryTermVector.getTermFrequencies()", "public int[] getTermFrequencies()"], ["int", "org.apache.lucene.search.QueryTermVector.indexOf(java.lang.String)", "public int indexOf(java.lang.String)"], ["int[]", "org.apache.lucene.search.QueryTermVector.indexesOf(java.lang.String[], int, int)", "public int[] indexesOf(java.lang.String[], int, int)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.search.QueryWrapperFilter$1.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.QueryWrapperFilter$1.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.QueryWrapperFilter", "org.apache.lucene.search.QueryWrapperFilter(org.apache.lucene.search.Query)", "public org.apache.lucene.search.QueryWrapperFilter(org.apache.lucene.search.Query)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.QueryWrapperFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.QueryWrapperFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.QueryWrapperFilter.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.ReqExclScorer", "org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.DocIdSetIterator)"], ["int", "org.apache.lucene.search.ReqExclScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqExclScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ReqExclScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqExclScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.ReqOptSumScorer", "org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"], ["int", "org.apache.lucene.search.ReqOptSumScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqOptSumScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.ReqOptSumScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.ReqOptSumScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.ScoreCachingWrappingScorer", "org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)", "public org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.ScoreCachingWrappingScorer.getSimilarity()", "public org.apache.lucene.search.Similarity getSimilarity()"], ["float", "org.apache.lucene.search.ScoreCachingWrappingScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.ScoreCachingWrappingScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.ScoreCachingWrappingScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["void", "org.apache.lucene.search.ScoreCachingWrappingScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["int", "org.apache.lucene.search.ScoreCachingWrappingScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.ScoreDoc", "org.apache.lucene.search.ScoreDoc(int, float)", "public org.apache.lucene.search.ScoreDoc(int, float)"], ["java.lang.String", "org.apache.lucene.search.ScoreDoc.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.Scorer.getSimilarity()", "public org.apache.lucene.search.Similarity getSimilarity()"], ["void", "org.apache.lucene.search.Scorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["org.apache.lucene.search.Searcher", "org.apache.lucene.search.Searcher()", "public org.apache.lucene.search.Searcher()"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.Searcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)", "public org.apache.lucene.search.TopFieldDocs search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort) throws java.io.IOException"], ["void", "org.apache.lucene.search.Searcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector) throws java.io.IOException"], ["void", "org.apache.lucene.search.Searcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)", "public void search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.Searcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int) throws java.io.IOException"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.Searcher.search(org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.TopDocs search(org.apache.lucene.search.Query, int) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.Searcher.explain(org.apache.lucene.search.Query, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.search.Query, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.Searcher.setSimilarity(org.apache.lucene.search.Similarity)", "public void setSimilarity(org.apache.lucene.search.Similarity)"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.Searcher.getSimilarity()", "public org.apache.lucene.search.Similarity getSimilarity()"], ["int[]", "org.apache.lucene.search.Searcher.docFreqs(org.apache.lucene.index.Term[])", "public int[] docFreqs(org.apache.lucene.index.Term[]) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.Similarity$1.explain()", "public java.lang.String explain()"], ["float", "org.apache.lucene.search.Similarity$1.getIdf()", "public float getIdf()"], ["float", "org.apache.lucene.search.Similarity$2.getIdf()", "public float getIdf()"], ["java.lang.String", "org.apache.lucene.search.Similarity$2.explain()", "public java.lang.String explain()"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.Similarity()", "public org.apache.lucene.search.Similarity()"], ["void", "org.apache.lucene.search.Similarity.setDefault(org.apache.lucene.search.Similarity)", "public static void setDefault(org.apache.lucene.search.Similarity)"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.Similarity.getDefault()", "public static org.apache.lucene.search.Similarity getDefault()"], ["float", "org.apache.lucene.search.Similarity.decodeNorm(byte)", "public static float decodeNorm(byte)"], ["float[]", "org.apache.lucene.search.Similarity.getNormDecoder()", "public static float[] getNormDecoder()"], ["float", "org.apache.lucene.search.Similarity.computeNorm(java.lang.String, org.apache.lucene.index.FieldInvertState)", "public float computeNorm(java.lang.String, org.apache.lucene.index.FieldInvertState)"], ["byte", "org.apache.lucene.search.Similarity.encodeNorm(float)", "public static byte encodeNorm(float)"], ["float", "org.apache.lucene.search.Similarity.tf(int)", "public float tf(int)"], ["org.apache.lucene.search.Explanation$IDFExplanation", "org.apache.lucene.search.Similarity.idfExplain(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Explanation$IDFExplanation idfExplain(org.apache.lucene.index.Term, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Explanation$IDFExplanation", "org.apache.lucene.search.Similarity.idfExplain(java.util.Collection<org.apache.lucene.index.Term>, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Explanation$IDFExplanation idfExplain(java.util.Collection<org.apache.lucene.index.Term>, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["float", "org.apache.lucene.search.Similarity.scorePayload(int, java.lang.String, int, int, byte[], int, int)", "public float scorePayload(int, java.lang.String, int, int, byte[], int, int)"], ["org.apache.lucene.search.SimilarityDelegator", "org.apache.lucene.search.SimilarityDelegator(org.apache.lucene.search.Similarity)", "public org.apache.lucene.search.SimilarityDelegator(org.apache.lucene.search.Similarity)"], ["float", "org.apache.lucene.search.SimilarityDelegator.computeNorm(java.lang.String, org.apache.lucene.index.FieldInvertState)", "public float computeNorm(java.lang.String, org.apache.lucene.index.FieldInvertState)"], ["float", "org.apache.lucene.search.SimilarityDelegator.lengthNorm(java.lang.String, int)", "public float lengthNorm(java.lang.String, int)"], ["float", "org.apache.lucene.search.SimilarityDelegator.queryNorm(float)", "public float queryNorm(float)"], ["float", "org.apache.lucene.search.SimilarityDelegator.tf(float)", "public float tf(float)"], ["float", "org.apache.lucene.search.SimilarityDelegator.sloppyFreq(int)", "public float sloppyFreq(int)"], ["float", "org.apache.lucene.search.SimilarityDelegator.idf(int, int)", "public float idf(int, int)"], ["float", "org.apache.lucene.search.SimilarityDelegator.coord(int, int)", "public float coord(int, int)"], ["float", "org.apache.lucene.search.SimilarityDelegator.scorePayload(int, java.lang.String, int, int, byte[], int, int)", "public float scorePayload(int, java.lang.String, int, int, byte[], int, int)"], ["org.apache.lucene.search.SingleTermEnum", "org.apache.lucene.search.SingleTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term)", "public org.apache.lucene.search.SingleTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["float", "org.apache.lucene.search.SingleTermEnum.difference()", "public float difference()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort()", "public org.apache.lucene.search.Sort()"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)", "public org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)"], ["org.apache.lucene.search.Sort", "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)", "public org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)"], ["void", "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField)", "public void setSort(org.apache.lucene.search.SortField)"], ["void", "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField...)", "public void setSort(org.apache.lucene.search.SortField...)"], ["org.apache.lucene.search.SortField[]", "org.apache.lucene.search.Sort.getSort()", "public org.apache.lucene.search.SortField[] getSort()"], ["java.lang.String", "org.apache.lucene.search.Sort.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.Sort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.Sort.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, int)", "public org.apache.lucene.search.SortField(java.lang.String, int)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, int, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, int, boolean)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser, boolean)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, java.util.Locale)", "public org.apache.lucene.search.SortField(java.lang.String, java.util.Locale)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, java.util.Locale, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, java.util.Locale, boolean)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)"], ["org.apache.lucene.search.SortField", "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)", "public org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)"], ["java.lang.String", "org.apache.lucene.search.SortField.getField()", "public java.lang.String getField()"], ["int", "org.apache.lucene.search.SortField.getType()", "public int getType()"], ["java.util.Locale", "org.apache.lucene.search.SortField.getLocale()", "public java.util.Locale getLocale()"], ["org.apache.lucene.search.FieldCache$Parser", "org.apache.lucene.search.SortField.getParser()", "public org.apache.lucene.search.FieldCache$Parser getParser()"], ["boolean", "org.apache.lucene.search.SortField.getReverse()", "public boolean getReverse()"], ["org.apache.lucene.search.FieldComparatorSource", "org.apache.lucene.search.SortField.getComparatorSource()", "public org.apache.lucene.search.FieldComparatorSource getComparatorSource()"], ["java.lang.String", "org.apache.lucene.search.SortField.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.SortField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.SortField.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.FieldComparator", "org.apache.lucene.search.SortField.getComparator(int, int)", "public org.apache.lucene.search.FieldComparator getComparator(int, int) throws java.io.IOException"], ["org.apache.lucene.search.SpanFilter", "org.apache.lucene.search.SpanFilter()", "public org.apache.lucene.search.SpanFilter()"], ["org.apache.lucene.search.SpanFilterResult$PositionInfo", "org.apache.lucene.search.SpanFilterResult$PositionInfo(int)", "public org.apache.lucene.search.SpanFilterResult$PositionInfo(int)"], ["void", "org.apache.lucene.search.SpanFilterResult$PositionInfo.addPosition(int, int)", "public void addPosition(int, int)"], ["int", "org.apache.lucene.search.SpanFilterResult$PositionInfo.getDoc()", "public int getDoc()"], ["java.util.List<org.apache.lucene.search.SpanFilterResult$StartEnd>", "org.apache.lucene.search.SpanFilterResult$PositionInfo.getPositions()", "public java.util.List<org.apache.lucene.search.SpanFilterResult$StartEnd> getPositions()"], ["org.apache.lucene.search.SpanFilterResult$StartEnd", "org.apache.lucene.search.SpanFilterResult$StartEnd(int, int)", "public org.apache.lucene.search.SpanFilterResult$StartEnd(int, int)"], ["int", "org.apache.lucene.search.SpanFilterResult$StartEnd.getEnd()", "public int getEnd()"], ["int", "org.apache.lucene.search.SpanFilterResult$StartEnd.getStart()", "public int getStart()"], ["org.apache.lucene.search.SpanFilterResult", "org.apache.lucene.search.SpanFilterResult(org.apache.lucene.search.DocIdSet, java.util.List<org.apache.lucene.search.SpanFilterResult$PositionInfo>)", "public org.apache.lucene.search.SpanFilterResult(org.apache.lucene.search.DocIdSet, java.util.List<org.apache.lucene.search.SpanFilterResult$PositionInfo>)"], ["java.util.List<org.apache.lucene.search.SpanFilterResult$PositionInfo>", "org.apache.lucene.search.SpanFilterResult.getPositions()", "public java.util.List<org.apache.lucene.search.SpanFilterResult$PositionInfo> getPositions()"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.SpanFilterResult.getDocIdSet()", "public org.apache.lucene.search.DocIdSet getDocIdSet()"], ["org.apache.lucene.search.SpanQueryFilter", "org.apache.lucene.search.SpanQueryFilter(org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.SpanQueryFilter(org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.DocIdSet", "org.apache.lucene.search.SpanQueryFilter.getDocIdSet(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.SpanFilterResult", "org.apache.lucene.search.SpanQueryFilter.bitSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.SpanFilterResult bitSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.SpanQueryFilter.getQuery()", "public org.apache.lucene.search.spans.SpanQuery getQuery()"], ["java.lang.String", "org.apache.lucene.search.SpanQueryFilter.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.SpanQueryFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.SpanQueryFilter.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.TermQuery$TermWeight", "org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.TermQuery$TermWeight.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.TermQuery$TermWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.TermQuery$TermWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.TermQuery$TermWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights()"], ["void", "org.apache.lucene.search.TermQuery$TermWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.TermQuery$TermWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.TermQuery$TermWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.TermQuery", "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.TermQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.TermQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["void", "org.apache.lucene.search.TermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.TermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.TermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.TermQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public org.apache.lucene.search.TermRangeFilter(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator)", "public org.apache.lucene.search.TermRangeFilter(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator)"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter.Less(java.lang.String, java.lang.String)", "public static org.apache.lucene.search.TermRangeFilter Less(java.lang.String, java.lang.String)"], ["org.apache.lucene.search.TermRangeFilter", "org.apache.lucene.search.TermRangeFilter.More(java.lang.String, java.lang.String)", "public static org.apache.lucene.search.TermRangeFilter More(java.lang.String, java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.TermRangeFilter.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.TermRangeFilter.getLowerTerm()", "public java.lang.String getLowerTerm()"], ["java.lang.String", "org.apache.lucene.search.TermRangeFilter.getUpperTerm()", "public java.lang.String getUpperTerm()"], ["boolean", "org.apache.lucene.search.TermRangeFilter.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.TermRangeFilter.includesUpper()", "public boolean includesUpper()"], ["java.text.Collator", "org.apache.lucene.search.TermRangeFilter.getCollator()", "public java.text.Collator getCollator()"], ["org.apache.lucene.search.TermRangeQuery", "org.apache.lucene.search.TermRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)", "public org.apache.lucene.search.TermRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"], ["org.apache.lucene.search.TermRangeQuery", "org.apache.lucene.search.TermRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator)", "public org.apache.lucene.search.TermRangeQuery(java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator)"], ["java.lang.String", "org.apache.lucene.search.TermRangeQuery.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.TermRangeQuery.getLowerTerm()", "public java.lang.String getLowerTerm()"], ["java.lang.String", "org.apache.lucene.search.TermRangeQuery.getUpperTerm()", "public java.lang.String getUpperTerm()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.includesLower()", "public boolean includesLower()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.includesUpper()", "public boolean includesUpper()"], ["java.text.Collator", "org.apache.lucene.search.TermRangeQuery.getCollator()", "public java.text.Collator getCollator()"], ["java.lang.String", "org.apache.lucene.search.TermRangeQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.TermRangeQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.TermRangeQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.TermRangeTermEnum", "org.apache.lucene.search.TermRangeTermEnum(org.apache.lucene.index.IndexReader, java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator)", "public org.apache.lucene.search.TermRangeTermEnum(org.apache.lucene.index.IndexReader, java.lang.String, java.lang.String, java.lang.String, boolean, boolean, java.text.Collator) throws java.io.IOException"], ["float", "org.apache.lucene.search.TermRangeTermEnum.difference()", "public float difference()"], ["void", "org.apache.lucene.search.TermScorer.score(org.apache.lucene.search.Collector)", "public void score(org.apache.lucene.search.Collector) throws java.io.IOException"], ["int", "org.apache.lucene.search.TermScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.TermScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["float", "org.apache.lucene.search.TermScorer.score()", "public float score()"], ["int", "org.apache.lucene.search.TermScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.TermScorer.toString()", "public java.lang.String toString()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeAllowed()", "public long getTimeAllowed()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeElapsed()", "public long getTimeElapsed()"], ["int", "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getLastDocCollected()", "public int getLastDocCollected()"], ["void", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.run()", "public void run()"], ["long", "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getMilliseconds()", "public long getMilliseconds()"], ["org.apache.lucene.search.TimeLimitingCollector", "org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, long)", "public org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, long)"], ["long", "org.apache.lucene.search.TimeLimitingCollector.getResolution()", "public static long getResolution()"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setResolution(long)", "public static void setResolution(long)"], ["boolean", "org.apache.lucene.search.TimeLimitingCollector.isGreedy()", "public boolean isGreedy()"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)", "public void setGreedy(boolean)"], ["void", "org.apache.lucene.search.TimeLimitingCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TimeLimitingCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TimeLimitingCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["float", "org.apache.lucene.search.TopDocs.getMaxScore()", "public float getMaxScore()"], ["void", "org.apache.lucene.search.TopDocs.setMaxScore(float)", "public void setMaxScore(float)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocs(int, org.apache.lucene.search.ScoreDoc[], float)", "public org.apache.lucene.search.TopDocs(int, org.apache.lucene.search.ScoreDoc[], float)"], ["int", "org.apache.lucene.search.TopDocsCollector.getTotalHits()", "public int getTotalHits()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs()", "public final org.apache.lucene.search.TopDocs topDocs()"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs(int)", "public final org.apache.lucene.search.TopDocs topDocs(int)"], ["org.apache.lucene.search.TopDocs", "org.apache.lucene.search.TopDocsCollector.topDocs(int, int)", "public final org.apache.lucene.search.TopDocs topDocs(int, int)"], ["org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean)", "public org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue, int, boolean) throws java.io.IOException"], ["void", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldCollector", "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean, boolean)", "public static org.apache.lucene.search.TopFieldCollector create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopFieldCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopFieldDocs", "org.apache.lucene.search.TopFieldDocs(int, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)", "public org.apache.lucene.search.TopFieldDocs(int, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)"], ["void", "org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["void", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector.collect(int)", "public void collect(int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector.acceptsDocsOutOfOrder()", "public boolean acceptsDocsOutOfOrder()"], ["org.apache.lucene.search.TopScoreDocCollector", "org.apache.lucene.search.TopScoreDocCollector.create(int, boolean)", "public static org.apache.lucene.search.TopScoreDocCollector create(int, boolean)"], ["void", "org.apache.lucene.search.TopScoreDocCollector.setNextReader(org.apache.lucene.index.IndexReader, int)", "public void setNextReader(org.apache.lucene.index.IndexReader, int)"], ["void", "org.apache.lucene.search.TopScoreDocCollector.setScorer(org.apache.lucene.search.Scorer)", "public void setScorer(org.apache.lucene.search.Scorer) throws java.io.IOException"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.Weight()", "public org.apache.lucene.search.Weight()"], ["boolean", "org.apache.lucene.search.Weight.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["org.apache.lucene.search.WildcardQuery", "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.WildcardQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.WildcardQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.WildcardQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.WildcardQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.WildcardQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.WildcardTermEnum", "org.apache.lucene.search.WildcardTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term)", "public org.apache.lucene.search.WildcardTermEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.index.Term) throws java.io.IOException"], ["float", "org.apache.lucene.search.WildcardTermEnum.difference()", "public float difference()"], ["boolean", "org.apache.lucene.search.WildcardTermEnum.endEnum()", "public final boolean endEnum()"], ["boolean", "org.apache.lucene.search.WildcardTermEnum.wildcardEquals(java.lang.String, int, java.lang.String, int)", "public static final boolean wildcardEquals(java.lang.String, int, java.lang.String, int)"], ["float", "org.apache.lucene.search.function.ByteFieldSource$1.floatVal(int)", "public float floatVal(int)"], ["int", "org.apache.lucene.search.function.ByteFieldSource$1.intVal(int)", "public int intVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.ByteFieldSource$1.toString(int)", "public java.lang.String toString(int)"], ["org.apache.lucene.search.function.ByteFieldSource", "org.apache.lucene.search.function.ByteFieldSource(java.lang.String)", "public org.apache.lucene.search.function.ByteFieldSource(java.lang.String)"], ["org.apache.lucene.search.function.ByteFieldSource", "org.apache.lucene.search.function.ByteFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$ByteParser)", "public org.apache.lucene.search.function.ByteFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$ByteParser)"], ["java.lang.String", "org.apache.lucene.search.function.ByteFieldSource.description()", "public java.lang.String description()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.ByteFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.ByteFieldSource.cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)", "public boolean cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)"], ["int", "org.apache.lucene.search.function.ByteFieldSource.cachedFieldSourceHashCode()", "public int cachedFieldSourceHashCode()"], ["org.apache.lucene.search.function.CustomScoreProvider", "org.apache.lucene.search.function.CustomScoreProvider(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.CustomScoreProvider(org.apache.lucene.index.IndexReader)"], ["float", "org.apache.lucene.search.function.CustomScoreProvider.customScore(int, float, float[])", "public float customScore(int, float, float[]) throws java.io.IOException"], ["float", "org.apache.lucene.search.function.CustomScoreProvider.customScore(int, float, float)", "public float customScore(int, float, float) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreProvider.customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation[])", "public org.apache.lucene.search.Explanation customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation[]) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreProvider.customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["float", "org.apache.lucene.search.function.CustomScoreQuery$1.customScore(int, float, float[])", "public float customScore(int, float, float[]) throws java.io.IOException"], ["float", "org.apache.lucene.search.function.CustomScoreQuery$1.customScore(int, float, float)", "public float customScore(int, float, float) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreQuery$1.customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation[])", "public org.apache.lucene.search.Explanation customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation[]) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreQuery$1.customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation) throws java.io.IOException"], ["int", "org.apache.lucene.search.function.CustomScoreQuery$CustomScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.function.CustomScoreQuery$CustomScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.function.CustomScoreQuery$CustomScorer.score()", "public float score() throws java.io.IOException"], ["int", "org.apache.lucene.search.function.CustomScoreQuery$CustomScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["org.apache.lucene.search.function.CustomScoreQuery$CustomWeight", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight(org.apache.lucene.search.function.CustomScoreQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.function.CustomScoreQuery$CustomWeight(org.apache.lucene.search.function.CustomScoreQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.CustomScoreQuery$CustomWeight.scoresDocsOutOfOrder()", "public boolean scoresDocsOutOfOrder()"], ["org.apache.lucene.search.function.CustomScoreQuery", "org.apache.lucene.search.function.CustomScoreQuery(org.apache.lucene.search.Query)", "public org.apache.lucene.search.function.CustomScoreQuery(org.apache.lucene.search.Query)"], ["org.apache.lucene.search.function.CustomScoreQuery", "org.apache.lucene.search.function.CustomScoreQuery(org.apache.lucene.search.Query, org.apache.lucene.search.function.ValueSourceQuery)", "public org.apache.lucene.search.function.CustomScoreQuery(org.apache.lucene.search.Query, org.apache.lucene.search.function.ValueSourceQuery)"], ["org.apache.lucene.search.function.CustomScoreQuery", "org.apache.lucene.search.function.CustomScoreQuery(org.apache.lucene.search.Query, org.apache.lucene.search.function.ValueSourceQuery...)", "public org.apache.lucene.search.function.CustomScoreQuery(org.apache.lucene.search.Query, org.apache.lucene.search.function.ValueSourceQuery...)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.function.CustomScoreQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.function.CustomScoreQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.Object", "org.apache.lucene.search.function.CustomScoreQuery.clone()", "public java.lang.Object clone()"], ["java.lang.String", "org.apache.lucene.search.function.CustomScoreQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.function.CustomScoreQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.function.CustomScoreQuery.hashCode()", "public int hashCode()"], ["float", "org.apache.lucene.search.function.CustomScoreQuery.customScore(int, float, float[])", "public float customScore(int, float, float[])"], ["float", "org.apache.lucene.search.function.CustomScoreQuery.customScore(int, float, float)", "public float customScore(int, float, float)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreQuery.customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation[])", "public org.apache.lucene.search.Explanation customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation[])"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.CustomScoreQuery.customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)", "public org.apache.lucene.search.Explanation customExplain(int, org.apache.lucene.search.Explanation, org.apache.lucene.search.Explanation)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.function.CustomScoreQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.CustomScoreQuery.isStrict()", "public boolean isStrict()"], ["void", "org.apache.lucene.search.function.CustomScoreQuery.setStrict(boolean)", "public void setStrict(boolean)"], ["java.lang.String", "org.apache.lucene.search.function.CustomScoreQuery.name()", "public java.lang.String name()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.DocValues()", "public org.apache.lucene.search.function.DocValues()"], ["int", "org.apache.lucene.search.function.DocValues.intVal(int)", "public int intVal(int)"], ["long", "org.apache.lucene.search.function.DocValues.longVal(int)", "public long longVal(int)"], ["double", "org.apache.lucene.search.function.DocValues.doubleVal(int)", "public double doubleVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.DocValues.strVal(int)", "public java.lang.String strVal(int)"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.DocValues.explain(int)", "public org.apache.lucene.search.Explanation explain(int)"], ["float", "org.apache.lucene.search.function.DocValues.getMinValue()", "public float getMinValue()"], ["float", "org.apache.lucene.search.function.DocValues.getMaxValue()", "public float getMaxValue()"], ["float", "org.apache.lucene.search.function.DocValues.getAverageValue()", "public float getAverageValue()"], ["org.apache.lucene.search.function.FieldCacheSource", "org.apache.lucene.search.function.FieldCacheSource(java.lang.String)", "public org.apache.lucene.search.function.FieldCacheSource(java.lang.String)"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.FieldCacheSource.getValues(org.apache.lucene.index.IndexReader)", "public final org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.function.FieldCacheSource.description()", "public java.lang.String description()"], ["boolean", "org.apache.lucene.search.function.FieldCacheSource.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.function.FieldCacheSource.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.apache.lucene.search.function.FieldScoreQuery$Type.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.function.FieldScoreQuery", "org.apache.lucene.search.function.FieldScoreQuery(java.lang.String, org.apache.lucene.search.function.FieldScoreQuery$Type)", "public org.apache.lucene.search.function.FieldScoreQuery(java.lang.String, org.apache.lucene.search.function.FieldScoreQuery$Type)"], ["float", "org.apache.lucene.search.function.FloatFieldSource$1.floatVal(int)", "public float floatVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.FloatFieldSource$1.toString(int)", "public java.lang.String toString(int)"], ["org.apache.lucene.search.function.FloatFieldSource", "org.apache.lucene.search.function.FloatFieldSource(java.lang.String)", "public org.apache.lucene.search.function.FloatFieldSource(java.lang.String)"], ["org.apache.lucene.search.function.FloatFieldSource", "org.apache.lucene.search.function.FloatFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$FloatParser)", "public org.apache.lucene.search.function.FloatFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$FloatParser)"], ["java.lang.String", "org.apache.lucene.search.function.FloatFieldSource.description()", "public java.lang.String description()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.FloatFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.FloatFieldSource.cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)", "public boolean cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)"], ["int", "org.apache.lucene.search.function.FloatFieldSource.cachedFieldSourceHashCode()", "public int cachedFieldSourceHashCode()"], ["float", "org.apache.lucene.search.function.IntFieldSource$1.floatVal(int)", "public float floatVal(int)"], ["int", "org.apache.lucene.search.function.IntFieldSource$1.intVal(int)", "public int intVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.IntFieldSource$1.toString(int)", "public java.lang.String toString(int)"], ["org.apache.lucene.search.function.IntFieldSource", "org.apache.lucene.search.function.IntFieldSource(java.lang.String)", "public org.apache.lucene.search.function.IntFieldSource(java.lang.String)"], ["org.apache.lucene.search.function.IntFieldSource", "org.apache.lucene.search.function.IntFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$IntParser)", "public org.apache.lucene.search.function.IntFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$IntParser)"], ["java.lang.String", "org.apache.lucene.search.function.IntFieldSource.description()", "public java.lang.String description()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.IntFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.IntFieldSource.cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)", "public boolean cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)"], ["int", "org.apache.lucene.search.function.IntFieldSource.cachedFieldSourceHashCode()", "public int cachedFieldSourceHashCode()"], ["float", "org.apache.lucene.search.function.OrdFieldSource$1.floatVal(int)", "public float floatVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.OrdFieldSource$1.strVal(int)", "public java.lang.String strVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.OrdFieldSource$1.toString(int)", "public java.lang.String toString(int)"], ["org.apache.lucene.search.function.OrdFieldSource", "org.apache.lucene.search.function.OrdFieldSource(java.lang.String)", "public org.apache.lucene.search.function.OrdFieldSource(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.function.OrdFieldSource.description()", "public java.lang.String description()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.OrdFieldSource.getValues(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.OrdFieldSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.function.OrdFieldSource.hashCode()", "public int hashCode()"], ["float", "org.apache.lucene.search.function.ReverseOrdFieldSource$1.floatVal(int)", "public float floatVal(int)"], ["int", "org.apache.lucene.search.function.ReverseOrdFieldSource$1.intVal(int)", "public int intVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.ReverseOrdFieldSource$1.strVal(int)", "public java.lang.String strVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.ReverseOrdFieldSource$1.toString(int)", "public java.lang.String toString(int)"], ["org.apache.lucene.search.function.ReverseOrdFieldSource", "org.apache.lucene.search.function.ReverseOrdFieldSource(java.lang.String)", "public org.apache.lucene.search.function.ReverseOrdFieldSource(java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.function.ReverseOrdFieldSource.description()", "public java.lang.String description()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.ReverseOrdFieldSource.getValues(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.DocValues getValues(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.ReverseOrdFieldSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.function.ReverseOrdFieldSource.hashCode()", "public int hashCode()"], ["float", "org.apache.lucene.search.function.ShortFieldSource$1.floatVal(int)", "public float floatVal(int)"], ["int", "org.apache.lucene.search.function.ShortFieldSource$1.intVal(int)", "public int intVal(int)"], ["java.lang.String", "org.apache.lucene.search.function.ShortFieldSource$1.toString(int)", "public java.lang.String toString(int)"], ["org.apache.lucene.search.function.ShortFieldSource", "org.apache.lucene.search.function.ShortFieldSource(java.lang.String)", "public org.apache.lucene.search.function.ShortFieldSource(java.lang.String)"], ["org.apache.lucene.search.function.ShortFieldSource", "org.apache.lucene.search.function.ShortFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$ShortParser)", "public org.apache.lucene.search.function.ShortFieldSource(java.lang.String, org.apache.lucene.search.FieldCache$ShortParser)"], ["java.lang.String", "org.apache.lucene.search.function.ShortFieldSource.description()", "public java.lang.String description()"], ["org.apache.lucene.search.function.DocValues", "org.apache.lucene.search.function.ShortFieldSource.getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.function.DocValues getCachedFieldValues(org.apache.lucene.search.FieldCache, java.lang.String, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.function.ShortFieldSource.cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)", "public boolean cachedFieldSourceEquals(org.apache.lucene.search.function.FieldCacheSource)"], ["int", "org.apache.lucene.search.function.ShortFieldSource.cachedFieldSourceHashCode()", "public int cachedFieldSourceHashCode()"], ["org.apache.lucene.search.function.ValueSource", "org.apache.lucene.search.function.ValueSource()", "public org.apache.lucene.search.function.ValueSource()"], ["java.lang.String", "org.apache.lucene.search.function.ValueSource.toString()", "public java.lang.String toString()"], ["int", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceScorer.docID()", "public int docID()"], ["int", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["float", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight(org.apache.lucene.search.function.ValueSourceQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight(org.apache.lucene.search.function.ValueSourceQuery, org.apache.lucene.search.Searcher)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.function.ValueSourceQuery$ValueSourceWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.function.ValueSourceQuery", "org.apache.lucene.search.function.ValueSourceQuery(org.apache.lucene.search.function.ValueSource)", "public org.apache.lucene.search.function.ValueSourceQuery(org.apache.lucene.search.function.ValueSource)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.function.ValueSourceQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.function.ValueSourceQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.function.ValueSourceQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher)"], ["java.lang.String", "org.apache.lucene.search.function.ValueSourceQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.function.ValueSourceQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.function.ValueSourceQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.payloads.AveragePayloadFunction", "org.apache.lucene.search.payloads.AveragePayloadFunction()", "public org.apache.lucene.search.payloads.AveragePayloadFunction()"], ["float", "org.apache.lucene.search.payloads.AveragePayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)", "public float currentScore(int, java.lang.String, int, int, int, float, float)"], ["float", "org.apache.lucene.search.payloads.AveragePayloadFunction.docScore(int, java.lang.String, int, float)", "public float docScore(int, java.lang.String, int, float)"], ["int", "org.apache.lucene.search.payloads.AveragePayloadFunction.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.AveragePayloadFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.MaxPayloadFunction", "org.apache.lucene.search.payloads.MaxPayloadFunction()", "public org.apache.lucene.search.payloads.MaxPayloadFunction()"], ["float", "org.apache.lucene.search.payloads.MaxPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)", "public float currentScore(int, java.lang.String, int, int, int, float, float)"], ["float", "org.apache.lucene.search.payloads.MaxPayloadFunction.docScore(int, java.lang.String, int, float)", "public float docScore(int, java.lang.String, int, float)"], ["int", "org.apache.lucene.search.payloads.MaxPayloadFunction.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.MaxPayloadFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.MinPayloadFunction", "org.apache.lucene.search.payloads.MinPayloadFunction()", "public org.apache.lucene.search.payloads.MinPayloadFunction()"], ["float", "org.apache.lucene.search.payloads.MinPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)", "public float currentScore(int, java.lang.String, int, int, int, float, float)"], ["float", "org.apache.lucene.search.payloads.MinPayloadFunction.docScore(int, java.lang.String, int, float)", "public float docScore(int, java.lang.String, int, float)"], ["int", "org.apache.lucene.search.payloads.MinPayloadFunction.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.MinPayloadFunction.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.PayloadFunction", "org.apache.lucene.search.payloads.PayloadFunction()", "public org.apache.lucene.search.payloads.PayloadFunction()"], ["void", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.getPayloads(org.apache.lucene.search.spans.Spans[])", "public void getPayloads(org.apache.lucene.search.spans.Spans[]) throws java.io.IOException"], ["float", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight(org.apache.lucene.search.payloads.PayloadNearQuery, org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight(org.apache.lucene.search.payloads.PayloadNearQuery, org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadNearQuery", "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)", "public org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"], ["org.apache.lucene.search.payloads.PayloadNearQuery", "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, org.apache.lucene.search.payloads.PayloadFunction)", "public org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, org.apache.lucene.search.payloads.PayloadFunction)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.payloads.PayloadNearQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.payloads.PayloadNearQuery.clone()", "public java.lang.Object clone()"], ["java.lang.String", "org.apache.lucene.search.payloads.PayloadNearQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.payloads.PayloadNearQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.PayloadNearQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.payloads.PayloadSpanUtil", "org.apache.lucene.search.payloads.PayloadSpanUtil(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.payloads.PayloadSpanUtil(org.apache.lucene.index.IndexReader)"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.payloads.PayloadSpanUtil.getPayloadsForQuery(org.apache.lucene.search.Query)", "public java.util.Collection<byte[]> getPayloadsForQuery(org.apache.lucene.search.Query) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer(org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight, org.apache.lucene.search.spans.TermSpans, org.apache.lucene.search.Weight, org.apache.lucene.search.Similarity, byte[])", "public org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer(org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight, org.apache.lucene.search.spans.TermSpans, org.apache.lucene.search.Weight, org.apache.lucene.search.Similarity, byte[]) throws java.io.IOException"], ["float", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight(org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight(org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.payloads.PayloadTermQuery", "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction)", "public org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction)"], ["org.apache.lucene.search.payloads.PayloadTermQuery", "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction, boolean)", "public org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction, boolean)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.payloads.PayloadTermQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["int", "org.apache.lucene.search.payloads.PayloadTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.payloads.PayloadTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.spans.FieldMaskingSpanQuery", "org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)", "public org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)"], ["java.lang.String", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()", "public java.lang.String getField()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()", "public org.apache.lucene.search.spans.SpanQuery getMaskedQuery()"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Similarity", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSimilarity(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Similarity getSimilarity(org.apache.lucene.search.Searcher)"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()", "public int hashCode()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered$1.compare(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)", "public int compare(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.apache.lucene.search.spans.NearSpansOrdered", "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.NearSpansOrdered", "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.IndexReader, boolean)", "public org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.IndexReader, boolean) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.NearSpansOrdered.end()", "public int end()"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.NearSpansOrdered.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansOrdered.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["boolean", "org.apache.lucene.search.spans.NearSpansOrdered.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansOrdered.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.NearSpansOrdered.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.NearSpansUnordered$CellQueue", "org.apache.lucene.search.spans.NearSpansUnordered$CellQueue(org.apache.lucene.search.spans.NearSpansUnordered, int)", "public org.apache.lucene.search.spans.NearSpansUnordered$CellQueue(org.apache.lucene.search.spans.NearSpansUnordered, int)"], ["org.apache.lucene.search.spans.NearSpansUnordered$SpansCell", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.Spans, int)", "public org.apache.lucene.search.spans.NearSpansUnordered$SpansCell(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.Spans, int)"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.NearSpansUnordered", "org.apache.lucene.search.spans.NearSpansUnordered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.NearSpansUnordered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans[]", "org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()", "public org.apache.lucene.search.spans.Spans[] getSubSpans()"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.NearSpansUnordered.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.NearSpansUnordered.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.NearSpansUnordered.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.search.spans.NearSpansUnordered.toString()", "public java.lang.String toString()"], ["boolean", "org.apache.lucene.search.spans.SpanFirstQuery$1.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanFirstQuery$1.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanFirstQuery$1.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.SpanFirstQuery$1.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.SpanFirstQuery$1.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.SpanFirstQuery$1.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanFirstQuery$1.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanFirstQuery$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanFirstQuery", "org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)", "public org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanFirstQuery.getMatch()", "public org.apache.lucene.search.spans.SpanQuery getMatch()"], ["int", "org.apache.lucene.search.spans.SpanFirstQuery.getEnd()", "public int getEnd()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanFirstQuery.getField()", "public java.lang.String getField()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanFirstQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanFirstQuery.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.search.spans.SpanFirstQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanFirstQuery.getSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanFirstQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanFirstQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanFirstQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)", "public org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"], ["org.apache.lucene.search.spans.SpanNearQuery", "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)", "public org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)"], ["org.apache.lucene.search.spans.SpanQuery[]", "org.apache.lucene.search.spans.SpanNearQuery.getClauses()", "public org.apache.lucene.search.spans.SpanQuery[] getClauses()"], ["int", "org.apache.lucene.search.spans.SpanNearQuery.getSlop()", "public int getSlop()"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery.isInOrder()", "public boolean isInOrder()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanNearQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNearQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNearQuery.getSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNearQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanNearQuery.clone()", "public java.lang.Object clone()"], ["boolean", "org.apache.lucene.search.spans.SpanNearQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNearQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery$1.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery$1.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanNotQuery$1.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.SpanNotQuery$1.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.SpanNotQuery$1.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.SpanNotQuery$1.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery$1.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanNotQuery", "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)", "public org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanNotQuery.getInclude()", "public org.apache.lucene.search.spans.SpanQuery getInclude()"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanNotQuery.getExclude()", "public org.apache.lucene.search.spans.SpanQuery getExclude()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanNotQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanNotQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanNotQuery.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanNotQuery.getSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanNotQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanNotQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanNotQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$1.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$1.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$1.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$1.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.SpanOrQuery$1.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.SpanOrQuery$1.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery$1.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery$1.toString()", "public java.lang.String toString()"], ["org.apache.lucene.search.spans.SpanOrQuery$SpanQueue", "org.apache.lucene.search.spans.SpanOrQuery$SpanQueue(org.apache.lucene.search.spans.SpanOrQuery, int)", "public org.apache.lucene.search.spans.SpanOrQuery$SpanQueue(org.apache.lucene.search.spans.SpanOrQuery, int)"], ["org.apache.lucene.search.spans.SpanOrQuery", "org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)", "public org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)"], ["org.apache.lucene.search.spans.SpanQuery[]", "org.apache.lucene.search.spans.SpanOrQuery.getClauses()", "public org.apache.lucene.search.spans.SpanQuery[] getClauses()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanOrQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.Object", "org.apache.lucene.search.spans.SpanOrQuery.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanOrQuery.rewrite(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.Query rewrite(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.search.spans.SpanOrQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["boolean", "org.apache.lucene.search.spans.SpanOrQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.search.spans.SpanOrQuery.hashCode()", "public int hashCode()"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanOrQuery.getSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanQuery", "org.apache.lucene.search.spans.SpanQuery()", "public org.apache.lucene.search.spans.SpanQuery()"], ["org.apache.lucene.search.Weight", "org.apache.lucene.search.spans.SpanQuery.createWeight(org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.Weight createWeight(org.apache.lucene.search.Searcher) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.nextDoc()", "public int nextDoc() throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.advance(int)", "public int advance(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.SpanScorer.docID()", "public int docID()"], ["float", "org.apache.lucene.search.spans.SpanScorer.score()", "public float score() throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanTermQuery", "org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)", "public org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)"], ["org.apache.lucene.index.Term", "org.apache.lucene.search.spans.SpanTermQuery.getTerm()", "public org.apache.lucene.index.Term getTerm()"], ["java.lang.String", "org.apache.lucene.search.spans.SpanTermQuery.getField()", "public java.lang.String getField()"], ["void", "org.apache.lucene.search.spans.SpanTermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)", "public void extractTerms(java.util.Set<org.apache.lucene.index.Term>)"], ["java.lang.String", "org.apache.lucene.search.spans.SpanTermQuery.toString(java.lang.String)", "public java.lang.String toString(java.lang.String)"], ["int", "org.apache.lucene.search.spans.SpanTermQuery.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.search.spans.SpanTermQuery.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.SpanTermQuery.getSpans(org.apache.lucene.index.IndexReader)", "public org.apache.lucene.search.spans.Spans getSpans(org.apache.lucene.index.IndexReader) throws java.io.IOException"], ["org.apache.lucene.search.spans.SpanWeight", "org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.Searcher)", "public org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.Searcher) throws java.io.IOException"], ["org.apache.lucene.search.Query", "org.apache.lucene.search.spans.SpanWeight.getQuery()", "public org.apache.lucene.search.Query getQuery()"], ["float", "org.apache.lucene.search.spans.SpanWeight.getValue()", "public float getValue()"], ["float", "org.apache.lucene.search.spans.SpanWeight.sumOfSquaredWeights()", "public float sumOfSquaredWeights() throws java.io.IOException"], ["void", "org.apache.lucene.search.spans.SpanWeight.normalize(float)", "public void normalize(float)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.search.spans.SpanWeight.scorer(org.apache.lucene.index.IndexReader, boolean, boolean)", "public org.apache.lucene.search.Scorer scorer(org.apache.lucene.index.IndexReader, boolean, boolean) throws java.io.IOException"], ["org.apache.lucene.search.Explanation", "org.apache.lucene.search.spans.SpanWeight.explain(org.apache.lucene.index.IndexReader, int)", "public org.apache.lucene.search.Explanation explain(org.apache.lucene.index.IndexReader, int) throws java.io.IOException"], ["org.apache.lucene.search.spans.Spans", "org.apache.lucene.search.spans.Spans()", "public org.apache.lucene.search.spans.Spans()"], ["org.apache.lucene.search.spans.TermSpans", "org.apache.lucene.search.spans.TermSpans(org.apache.lucene.index.TermPositions, org.apache.lucene.index.Term)", "public org.apache.lucene.search.spans.TermSpans(org.apache.lucene.index.TermPositions, org.apache.lucene.index.Term) throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.TermSpans.next()", "public boolean next() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.TermSpans.skipTo(int)", "public boolean skipTo(int) throws java.io.IOException"], ["int", "org.apache.lucene.search.spans.TermSpans.doc()", "public int doc()"], ["int", "org.apache.lucene.search.spans.TermSpans.start()", "public int start()"], ["int", "org.apache.lucene.search.spans.TermSpans.end()", "public int end()"], ["java.util.Collection<byte[]>", "org.apache.lucene.search.spans.TermSpans.getPayload()", "public java.util.Collection<byte[]> getPayload() throws java.io.IOException"], ["boolean", "org.apache.lucene.search.spans.TermSpans.isPayloadAvailable()", "public boolean isPayloadAvailable()"], ["java.lang.String", "org.apache.lucene.search.spans.TermSpans.toString()", "public java.lang.String toString()"], ["org.apache.lucene.index.TermPositions", "org.apache.lucene.search.spans.TermSpans.getPositions()", "public org.apache.lucene.index.TermPositions getPositions()"], ["org.apache.lucene.store.AlreadyClosedException", "org.apache.lucene.store.AlreadyClosedException(java.lang.String)", "public org.apache.lucene.store.AlreadyClosedException(java.lang.String)"], ["byte", "org.apache.lucene.store.BufferedIndexInput.readByte()", "public byte readByte() throws java.io.IOException"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput()", "public org.apache.lucene.store.BufferedIndexInput()"], ["org.apache.lucene.store.BufferedIndexInput", "org.apache.lucene.store.BufferedIndexInput(int)", "public org.apache.lucene.store.BufferedIndexInput(int)"], ["void", "org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)", "public void setBufferSize(int)"], ["int", "org.apache.lucene.store.BufferedIndexInput.getBufferSize()", "public int getBufferSize()"], ["void", "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int, boolean)", "public void readBytes(byte[], int, int, boolean) throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.BufferedIndexInput.seek(long)", "public void seek(long) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.store.BufferedIndexInput.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.store.BufferedIndexOutput", "org.apache.lucene.store.BufferedIndexOutput()", "public org.apache.lucene.store.BufferedIndexOutput()"], ["void", "org.apache.lucene.store.BufferedIndexOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.lucene.store.BufferedIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.BufferedIndexOutput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.BufferedIndexOutput.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.ChecksumIndexInput", "org.apache.lucene.store.ChecksumIndexInput(org.apache.lucene.store.IndexInput)", "public org.apache.lucene.store.ChecksumIndexInput(org.apache.lucene.store.IndexInput)"], ["byte", "org.apache.lucene.store.ChecksumIndexInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexInput.getChecksum()", "public long getChecksum()"], ["void", "org.apache.lucene.store.ChecksumIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.ChecksumIndexInput.seek(long)", "public void seek(long)"], ["long", "org.apache.lucene.store.ChecksumIndexInput.length()", "public long length()"], ["org.apache.lucene.store.ChecksumIndexOutput", "org.apache.lucene.store.ChecksumIndexOutput(org.apache.lucene.store.IndexOutput)", "public org.apache.lucene.store.ChecksumIndexOutput(org.apache.lucene.store.IndexOutput)"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexOutput.getChecksum()", "public long getChecksum()"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.flush()", "public void flush() throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexOutput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.seek(long)", "public void seek(long)"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.prepareCommit()", "public void prepareCommit() throws java.io.IOException"], ["void", "org.apache.lucene.store.ChecksumIndexOutput.finishCommit()", "public void finishCommit() throws java.io.IOException"], ["long", "org.apache.lucene.store.ChecksumIndexOutput.length()", "public long length() throws java.io.IOException"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.Directory()", "public org.apache.lucene.store.Directory()"], ["void", "org.apache.lucene.store.Directory.sync(java.lang.String)", "public void sync(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.Directory.openInput(java.lang.String, int)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, int) throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.Directory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.Directory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.Directory.setLockFactory(org.apache.lucene.store.LockFactory)", "public void setLockFactory(org.apache.lucene.store.LockFactory)"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.Directory.getLockFactory()", "public org.apache.lucene.store.LockFactory getLockFactory()"], ["java.lang.String", "org.apache.lucene.store.Directory.getLockID()", "public java.lang.String getLockID()"], ["java.lang.String", "org.apache.lucene.store.Directory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.Directory.copy(org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)", "public static void copy(org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean) throws java.io.IOException"], ["boolean", "org.apache.lucene.store.FSDirectory$1.accept(java.io.File, java.lang.String)", "public boolean accept(java.io.File, java.lang.String)"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.store.FSDirectory.open(java.io.File)", "public static org.apache.lucene.store.FSDirectory open(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.FSDirectory", "org.apache.lucene.store.FSDirectory.open(java.io.File, org.apache.lucene.store.LockFactory)", "public static org.apache.lucene.store.FSDirectory open(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FSDirectory.listAll(java.io.File)", "public static java.lang.String[] listAll(java.io.File) throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FSDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["boolean", "org.apache.lucene.store.FSDirectory.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String)"], ["long", "org.apache.lucene.store.FSDirectory.fileModified(java.lang.String)", "public long fileModified(java.lang.String)"], ["long", "org.apache.lucene.store.FSDirectory.fileModified(java.io.File, java.lang.String)", "public static long fileModified(java.io.File, java.lang.String)"], ["void", "org.apache.lucene.store.FSDirectory.touchFile(java.lang.String)", "public void touchFile(java.lang.String)"], ["long", "org.apache.lucene.store.FSDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String)"], ["void", "org.apache.lucene.store.FSDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FSDirectory.sync(java.lang.String)", "public void sync(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.FSDirectory.openInput(java.lang.String)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.FSDirectory.getLockID()", "public java.lang.String getLockID()"], ["synchronized", "org.apache.lucene.store.FSDirectory.void close()", "public synchronized void close()"], ["java.io.File", "org.apache.lucene.store.FSDirectory.getFile()", "public java.io.File getFile()"], ["java.lang.String", "org.apache.lucene.store.FSDirectory.toString()", "public java.lang.String toString()"], ["void", "org.apache.lucene.store.FSDirectory.setReadChunkSize(int)", "public final void setReadChunkSize(int)"], ["int", "org.apache.lucene.store.FSDirectory.getReadChunkSize()", "public final int getReadChunkSize()"], ["org.apache.lucene.store.FSLockFactory", "org.apache.lucene.store.FSLockFactory()", "public org.apache.lucene.store.FSLockFactory()"], ["java.io.File", "org.apache.lucene.store.FSLockFactory.getLockDir()", "public java.io.File getLockDir()"], ["org.apache.lucene.store.FileSwitchDirectory", "org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)", "public org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()", "public org.apache.lucene.store.Directory getPrimaryDir()"], ["org.apache.lucene.store.Directory", "org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()", "public org.apache.lucene.store.Directory getSecondaryDir()"], ["void", "org.apache.lucene.store.FileSwitchDirectory.close()", "public void close() throws java.io.IOException"], ["java.lang.String[]", "org.apache.lucene.store.FileSwitchDirectory.listAll()", "public java.lang.String[] listAll() throws java.io.IOException"], ["java.lang.String", "org.apache.lucene.store.FileSwitchDirectory.getExtension(java.lang.String)", "public static java.lang.String getExtension(java.lang.String)"], ["boolean", "org.apache.lucene.store.FileSwitchDirectory.fileExists(java.lang.String)", "public boolean fileExists(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.FileSwitchDirectory.fileModified(java.lang.String)", "public long fileModified(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.touchFile(java.lang.String)", "public void touchFile(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.deleteFile(java.lang.String)", "public void deleteFile(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.FileSwitchDirectory.fileLength(java.lang.String)", "public long fileLength(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.FileSwitchDirectory.createOutput(java.lang.String)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.FileSwitchDirectory.sync(java.lang.String)", "public void sync(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.FileSwitchDirectory.openInput(java.lang.String)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.IndexInput()", "public org.apache.lucene.store.IndexInput()"], ["void", "org.apache.lucene.store.IndexInput.readBytes(byte[], int, int, boolean)", "public void readBytes(byte[], int, int, boolean) throws java.io.IOException"], ["int", "org.apache.lucene.store.IndexInput.readInt()", "public int readInt() throws java.io.IOException"], ["int", "org.apache.lucene.store.IndexInput.readVInt()", "public int readVInt() throws java.io.IOException"], ["long", "org.apache.lucene.store.IndexInput.readLong()", "public long readLong() throws java.io.IOException"], ["long", "org.apache.lucene.store.IndexInput.readVLong()", "public long readVLong() throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexInput.setModifiedUTF8StringsMode()", "public void setModifiedUTF8StringsMode()"], ["java.lang.String", "org.apache.lucene.store.IndexInput.readString()", "public java.lang.String readString() throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexInput.readChars(char[], int, int)", "public void readChars(char[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexInput.skipChars(int)", "public void skipChars(int) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.store.IndexInput.clone()", "public java.lang.Object clone()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.apache.lucene.store.IndexInput.readStringStringMap()", "public java.util.Map<java.lang.String, java.lang.String> readStringStringMap() throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.IndexOutput()", "public org.apache.lucene.store.IndexOutput()"], ["void", "org.apache.lucene.store.IndexOutput.writeBytes(byte[], int)", "public void writeBytes(byte[], int) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeInt(int)", "public void writeInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeVInt(int)", "public void writeVInt(int) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeLong(long)", "public void writeLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeVLong(long)", "public void writeVLong(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeString(java.lang.String)", "public void writeString(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeChars(java.lang.String, int, int)", "public void writeChars(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeChars(char[], int, int)", "public void writeChars(char[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.copyBytes(org.apache.lucene.store.IndexInput, long)", "public void copyBytes(org.apache.lucene.store.IndexInput, long) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.setLength(long)", "public void setLength(long) throws java.io.IOException"], ["void", "org.apache.lucene.store.IndexOutput.writeStringStringMap(java.util.Map<java.lang.String, java.lang.String>)", "public void writeStringStringMap(java.util.Map<java.lang.String, java.lang.String>) throws java.io.IOException"], ["org.apache.lucene.store.Lock$With", "org.apache.lucene.store.Lock$With(org.apache.lucene.store.Lock, long)", "public org.apache.lucene.store.Lock$With(org.apache.lucene.store.Lock, long)"], ["java.lang.Object", "org.apache.lucene.store.Lock$With.run()", "public java.lang.Object run() throws org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.Lock()", "public org.apache.lucene.store.Lock()"], ["boolean", "org.apache.lucene.store.Lock.obtain(long)", "public boolean obtain(long) throws org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["org.apache.lucene.store.LockFactory", "org.apache.lucene.store.LockFactory()", "public org.apache.lucene.store.LockFactory()"], ["void", "org.apache.lucene.store.LockFactory.setLockPrefix(java.lang.String)", "public void setLockPrefix(java.lang.String)"], ["java.lang.String", "org.apache.lucene.store.LockFactory.getLockPrefix()", "public java.lang.String getLockPrefix()"], ["org.apache.lucene.store.LockObtainFailedException", "org.apache.lucene.store.LockObtainFailedException(java.lang.String)", "public org.apache.lucene.store.LockObtainFailedException(java.lang.String)"], ["org.apache.lucene.store.LockReleaseFailedException", "org.apache.lucene.store.LockReleaseFailedException(java.lang.String)", "public org.apache.lucene.store.LockReleaseFailedException(java.lang.String)"], ["org.apache.lucene.store.LockStressTest", "org.apache.lucene.store.LockStressTest()", "public org.apache.lucene.store.LockStressTest()"], ["void", "org.apache.lucene.store.LockStressTest.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["org.apache.lucene.store.LockVerifyServer", "org.apache.lucene.store.LockVerifyServer()", "public org.apache.lucene.store.LockVerifyServer()"], ["void", "org.apache.lucene.store.LockVerifyServer.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.io.IOException"], ["java.lang.Object", "org.apache.lucene.store.MMapDirectory$1.run()", "public java.lang.Object run() throws java.lang.Exception"], ["byte", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.length()", "public long length()"], ["java.lang.Object", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.store.MMapDirectory$MMapIndexInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput(org.apache.lucene.store.MMapDirectory, java.io.RandomAccessFile, int)", "public org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput(org.apache.lucene.store.MMapDirectory, java.io.RandomAccessFile, int) throws java.io.IOException"], ["byte", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.length()", "public long length()"], ["java.lang.Object", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.store.MMapDirectory$MultiMMapIndexInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.MMapDirectory", "org.apache.lucene.store.MMapDirectory(java.io.File)", "public org.apache.lucene.store.MMapDirectory(java.io.File) throws java.io.IOException"], ["void", "org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)", "public void setUseUnmap(boolean)"], ["boolean", "org.apache.lucene.store.MMapDirectory.getUseUnmap()", "public boolean getUseUnmap()"], ["void", "org.apache.lucene.store.MMapDirectory.setMaxChunkSize(int)", "public void setMaxChunkSize(int)"], ["int", "org.apache.lucene.store.MMapDirectory.getMaxChunkSize()", "public int getMaxChunkSize()"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.MMapDirectory.openInput(java.lang.String, int)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, int) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.MMapDirectory.createOutput(java.lang.String)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.io.File, int, int)", "public org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.io.File, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory", "org.apache.lucene.store.NIOFSDirectory(java.io.File, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.NIOFSDirectory(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.NIOFSDirectory", "org.apache.lucene.store.NIOFSDirectory(java.io.File)", "public org.apache.lucene.store.NIOFSDirectory(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.NIOFSDirectory.openInput(java.lang.String, int)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, int) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.NIOFSDirectory.createOutput(java.lang.String)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.NativeFSLock", "org.apache.lucene.store.NativeFSLock(java.io.File, java.lang.String)", "public org.apache.lucene.store.NativeFSLock(java.io.File, java.lang.String)"], ["synchronized", "org.apache.lucene.store.NativeFSLock.boolean obtain()", "public synchronized boolean obtain() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NativeFSLock.void release()", "public synchronized void release() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NativeFSLock.boolean isLocked()", "public synchronized boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.NativeFSLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.NativeFSLockFactory", "org.apache.lucene.store.NativeFSLockFactory()", "public org.apache.lucene.store.NativeFSLockFactory() throws java.io.IOException"], ["org.apache.lucene.store.NativeFSLockFactory", "org.apache.lucene.store.NativeFSLockFactory(java.lang.String)", "public org.apache.lucene.store.NativeFSLockFactory(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.NativeFSLockFactory", "org.apache.lucene.store.NativeFSLockFactory(java.io.File)", "public org.apache.lucene.store.NativeFSLockFactory(java.io.File) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.NativeFSLockFactory.org.apache.lucene.store.Lock makeLock(java.lang.String)", "public synchronized org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.NativeFSLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["boolean", "org.apache.lucene.store.NoLock.obtain()", "public boolean obtain() throws java.io.IOException"], ["void", "org.apache.lucene.store.NoLock.release()", "public void release()"], ["boolean", "org.apache.lucene.store.NoLock.isLocked()", "public boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.NoLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.NoLockFactory", "org.apache.lucene.store.NoLockFactory()", "public org.apache.lucene.store.NoLockFactory()"], ["org.apache.lucene.store.NoLockFactory", "org.apache.lucene.store.NoLockFactory.getNoLockFactory()", "public static org.apache.lucene.store.NoLockFactory getNoLockFactory()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.NoLockFactory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.NoLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String)"], ["org.apache.lucene.store.NoSuchDirectoryException", "org.apache.lucene.store.NoSuchDirectoryException(java.lang.String)", "public org.apache.lucene.store.NoSuchDirectoryException(java.lang.String)"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory()", "public org.apache.lucene.store.RAMDirectory()"], ["org.apache.lucene.store.RAMDirectory", "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.Directory)", "public org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.Directory) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.RAMDirectory.java.lang.String[] listAll()", "public final synchronized java.lang.String[] listAll()"], ["boolean", "org.apache.lucene.store.RAMDirectory.fileExists(java.lang.String)", "public final boolean fileExists(java.lang.String)"], ["long", "org.apache.lucene.store.RAMDirectory.fileModified(java.lang.String)", "public final long fileModified(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.touchFile(java.lang.String)", "public void touchFile(java.lang.String) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMDirectory.fileLength(java.lang.String)", "public final long fileLength(java.lang.String) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.RAMDirectory.long sizeInBytes()", "public final synchronized long sizeInBytes()"], ["synchronized", "org.apache.lucene.store.RAMDirectory.void deleteFile(java.lang.String)", "public synchronized void deleteFile(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.RAMDirectory.createOutput(java.lang.String)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.RAMDirectory.openInput(java.lang.String)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMDirectory.close()", "public void close()"], ["synchronized", "org.apache.lucene.store.RAMFile.long getLength()", "public synchronized long getLength()"], ["synchronized", "org.apache.lucene.store.RAMFile.long getLastModified()", "public synchronized long getLastModified()"], ["synchronized", "org.apache.lucene.store.RAMFile.long getSizeInBytes()", "public synchronized long getSizeInBytes()"], ["void", "org.apache.lucene.store.RAMInputStream.close()", "public void close()"], ["long", "org.apache.lucene.store.RAMInputStream.length()", "public long length()"], ["byte", "org.apache.lucene.store.RAMInputStream.readByte()", "public byte readByte() throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMInputStream.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMInputStream.getFilePointer()", "public long getFilePointer()"], ["void", "org.apache.lucene.store.RAMInputStream.seek(long)", "public void seek(long) throws java.io.IOException"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream()", "public org.apache.lucene.store.RAMOutputStream()"], ["org.apache.lucene.store.RAMOutputStream", "org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile)", "public org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile)"], ["void", "org.apache.lucene.store.RAMOutputStream.writeTo(org.apache.lucene.store.IndexOutput)", "public void writeTo(org.apache.lucene.store.IndexOutput) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.reset()", "public void reset()"], ["void", "org.apache.lucene.store.RAMOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMOutputStream.length()", "public long length()"], ["void", "org.apache.lucene.store.RAMOutputStream.writeByte(byte)", "public void writeByte(byte) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.RAMOutputStream.flush()", "public void flush() throws java.io.IOException"], ["long", "org.apache.lucene.store.RAMOutputStream.getFilePointer()", "public long getFilePointer()"], ["long", "org.apache.lucene.store.RAMOutputStream.sizeInBytes()", "public long sizeInBytes()"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput$Descriptor", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput$Descriptor(java.io.File, java.lang.String)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput$Descriptor(java.io.File, java.lang.String) throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput$Descriptor.close()", "public void close() throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.io.File, int, int)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.io.File, int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.close()", "public void close() throws java.io.IOException"], ["long", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.length()", "public long length()"], ["java.lang.Object", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput(java.io.File)", "public org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput(java.io.File) throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput.flushBuffer(byte[], int, int)", "public void flushBuffer(byte[], int, int) throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput.close()", "public void close() throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput.seek(long)", "public void seek(long) throws java.io.IOException"], ["long", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput.length()", "public long length() throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexOutput.setLength(long)", "public void setLength(long) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory", "org.apache.lucene.store.SimpleFSDirectory(java.io.File, org.apache.lucene.store.LockFactory)", "public org.apache.lucene.store.SimpleFSDirectory(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSDirectory", "org.apache.lucene.store.SimpleFSDirectory(java.io.File)", "public org.apache.lucene.store.SimpleFSDirectory(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.IndexOutput", "org.apache.lucene.store.SimpleFSDirectory.createOutput(java.lang.String)", "public org.apache.lucene.store.IndexOutput createOutput(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.IndexInput", "org.apache.lucene.store.SimpleFSDirectory.openInput(java.lang.String, int)", "public org.apache.lucene.store.IndexInput openInput(java.lang.String, int) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSLock", "org.apache.lucene.store.SimpleFSLock(java.io.File, java.lang.String)", "public org.apache.lucene.store.SimpleFSLock(java.io.File, java.lang.String)"], ["boolean", "org.apache.lucene.store.SimpleFSLock.obtain()", "public boolean obtain() throws java.io.IOException"], ["void", "org.apache.lucene.store.SimpleFSLock.release()", "public void release() throws org.apache.lucene.store.LockReleaseFailedException"], ["boolean", "org.apache.lucene.store.SimpleFSLock.isLocked()", "public boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.SimpleFSLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.SimpleFSLockFactory", "org.apache.lucene.store.SimpleFSLockFactory()", "public org.apache.lucene.store.SimpleFSLockFactory() throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSLockFactory", "org.apache.lucene.store.SimpleFSLockFactory(java.io.File)", "public org.apache.lucene.store.SimpleFSLockFactory(java.io.File) throws java.io.IOException"], ["org.apache.lucene.store.SimpleFSLockFactory", "org.apache.lucene.store.SimpleFSLockFactory(java.lang.String)", "public org.apache.lucene.store.SimpleFSLockFactory(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.SimpleFSLockFactory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.SimpleFSLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.SingleInstanceLock", "org.apache.lucene.store.SingleInstanceLock(java.util.HashSet<java.lang.String>, java.lang.String)", "public org.apache.lucene.store.SingleInstanceLock(java.util.HashSet<java.lang.String>, java.lang.String)"], ["boolean", "org.apache.lucene.store.SingleInstanceLock.obtain()", "public boolean obtain() throws java.io.IOException"], ["void", "org.apache.lucene.store.SingleInstanceLock.release()", "public void release()"], ["boolean", "org.apache.lucene.store.SingleInstanceLock.isLocked()", "public boolean isLocked()"], ["java.lang.String", "org.apache.lucene.store.SingleInstanceLock.toString()", "public java.lang.String toString()"], ["org.apache.lucene.store.SingleInstanceLockFactory", "org.apache.lucene.store.SingleInstanceLockFactory()", "public org.apache.lucene.store.SingleInstanceLockFactory()"], ["org.apache.lucene.store.Lock", "org.apache.lucene.store.SingleInstanceLockFactory.makeLock(java.lang.String)", "public org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["void", "org.apache.lucene.store.SingleInstanceLockFactory.clearLock(java.lang.String)", "public void clearLock(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.store.VerifyingLockFactory$CheckedLock", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)", "public org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain(long)", "public synchronized boolean obtain(long) throws org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain()", "public synchronized boolean obtain() throws org.apache.lucene.store.LockObtainFailedException, java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean isLocked()", "public synchronized boolean isLocked() throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.void release()", "public synchronized void release() throws java.io.IOException"], ["org.apache.lucene.store.VerifyingLockFactory", "org.apache.lucene.store.VerifyingLockFactory(byte, org.apache.lucene.store.LockFactory, java.lang.String, int)", "public org.apache.lucene.store.VerifyingLockFactory(byte, org.apache.lucene.store.LockFactory, java.lang.String, int) throws java.io.IOException"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory.org.apache.lucene.store.Lock makeLock(java.lang.String)", "public synchronized org.apache.lucene.store.Lock makeLock(java.lang.String)"], ["synchronized", "org.apache.lucene.store.VerifyingLockFactory.void clearLock(java.lang.String)", "public synchronized void clearLock(java.lang.String) throws java.io.IOException"], ["org.apache.lucene.util.ArrayUtil", "org.apache.lucene.util.ArrayUtil()", "public org.apache.lucene.util.ArrayUtil()"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[])", "public static int parseInt(char[]) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int)", "public static int parseInt(char[], int, int) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int, int)", "public static int parseInt(char[], int, int, int) throws java.lang.NumberFormatException"], ["int", "org.apache.lucene.util.ArrayUtil.getNextSize(int)", "public static int getNextSize(int)"], ["int", "org.apache.lucene.util.ArrayUtil.getShrinkSize(int, int)", "public static int getShrinkSize(int, int)"], ["int[]", "org.apache.lucene.util.ArrayUtil.grow(int[], int)", "public static int[] grow(int[], int)"], ["int[]", "org.apache.lucene.util.ArrayUtil.grow(int[])", "public static int[] grow(int[])"], ["int[]", "org.apache.lucene.util.ArrayUtil.shrink(int[], int)", "public static int[] shrink(int[], int)"], ["long[]", "org.apache.lucene.util.ArrayUtil.grow(long[], int)", "public static long[] grow(long[], int)"], ["long[]", "org.apache.lucene.util.ArrayUtil.grow(long[])", "public static long[] grow(long[])"], ["long[]", "org.apache.lucene.util.ArrayUtil.shrink(long[], int)", "public static long[] shrink(long[], int)"], ["byte[]", "org.apache.lucene.util.ArrayUtil.grow(byte[], int)", "public static byte[] grow(byte[], int)"], ["byte[]", "org.apache.lucene.util.ArrayUtil.grow(byte[])", "public static byte[] grow(byte[])"], ["byte[]", "org.apache.lucene.util.ArrayUtil.shrink(byte[], int)", "public static byte[] shrink(byte[], int)"], ["int", "org.apache.lucene.util.ArrayUtil.hashCode(char[], int, int)", "public static int hashCode(char[], int, int)"], ["int", "org.apache.lucene.util.ArrayUtil.hashCode(byte[], int, int)", "public static int hashCode(byte[], int, int)"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeImpl()", "public org.apache.lucene.util.AttributeImpl()"], ["java.lang.String", "org.apache.lucene.util.AttributeImpl.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.apache.lucene.util.AttributeImpl.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.util.AttributeSource$1.remove()", "public void remove()"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeSource$1.next()", "public org.apache.lucene.util.AttributeImpl next()"], ["boolean", "org.apache.lucene.util.AttributeSource$1.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.apache.lucene.util.AttributeSource$1.next()", "public java.lang.Object next()"], ["org.apache.lucene.util.AttributeImpl", "org.apache.lucene.util.AttributeSource$AttributeFactory$DefaultAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public org.apache.lucene.util.AttributeImpl createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["org.apache.lucene.util.AttributeSource$AttributeFactory", "org.apache.lucene.util.AttributeSource$AttributeFactory()", "public org.apache.lucene.util.AttributeSource$AttributeFactory()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource$State()", "public org.apache.lucene.util.AttributeSource$State()"], ["java.lang.Object", "org.apache.lucene.util.AttributeSource$State.clone()", "public java.lang.Object clone()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource()", "public org.apache.lucene.util.AttributeSource()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)", "public org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource$AttributeFactory)", "public org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource$AttributeFactory)"], ["org.apache.lucene.util.AttributeSource$AttributeFactory", "org.apache.lucene.util.AttributeSource.getAttributeFactory()", "public org.apache.lucene.util.AttributeSource$AttributeFactory getAttributeFactory()"], ["java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>>", "org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()", "public java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>> getAttributeClassesIterator()"], ["java.util.Iterator<org.apache.lucene.util.AttributeImpl>", "org.apache.lucene.util.AttributeSource.getAttributeImplsIterator()", "public java.util.Iterator<org.apache.lucene.util.AttributeImpl> getAttributeImplsIterator()"], ["void", "org.apache.lucene.util.AttributeSource.addAttributeImpl(org.apache.lucene.util.AttributeImpl)", "public void addAttributeImpl(org.apache.lucene.util.AttributeImpl)"], ["<A extends org.apache.lucene.util.Attribute> A", "org.apache.lucene.util.AttributeSource.addAttribute(java.lang.Class<A>)", "public <A extends org.apache.lucene.util.Attribute> A addAttribute(java.lang.Class<A>)"], ["boolean", "org.apache.lucene.util.AttributeSource.hasAttributes()", "public boolean hasAttributes()"], ["boolean", "org.apache.lucene.util.AttributeSource.hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)", "public boolean hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"], ["<A extends org.apache.lucene.util.Attribute> A", "org.apache.lucene.util.AttributeSource.getAttribute(java.lang.Class<A>)", "public <A extends org.apache.lucene.util.Attribute> A getAttribute(java.lang.Class<A>)"], ["void", "org.apache.lucene.util.AttributeSource.clearAttributes()", "public void clearAttributes()"], ["org.apache.lucene.util.AttributeSource$State", "org.apache.lucene.util.AttributeSource.captureState()", "public org.apache.lucene.util.AttributeSource$State captureState()"], ["void", "org.apache.lucene.util.AttributeSource.restoreState(org.apache.lucene.util.AttributeSource$State)", "public void restoreState(org.apache.lucene.util.AttributeSource$State)"], ["int", "org.apache.lucene.util.AttributeSource.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.AttributeSource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.AttributeSource.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.AttributeSource", "org.apache.lucene.util.AttributeSource.cloneAttributes()", "public org.apache.lucene.util.AttributeSource cloneAttributes()"], ["org.apache.lucene.util.AverageGuessMemoryModel", "org.apache.lucene.util.AverageGuessMemoryModel()", "public org.apache.lucene.util.AverageGuessMemoryModel()"], ["int", "org.apache.lucene.util.AverageGuessMemoryModel.getArraySize()", "public int getArraySize()"], ["int", "org.apache.lucene.util.AverageGuessMemoryModel.getClassSize()", "public int getClassSize()"], ["int", "org.apache.lucene.util.AverageGuessMemoryModel.getPrimitiveSize(java.lang.Class)", "public int getPrimitiveSize(java.lang.Class)"], ["int", "org.apache.lucene.util.AverageGuessMemoryModel.getReferenceSize()", "public int getReferenceSize()"], ["org.apache.lucene.util.BitUtil", "org.apache.lucene.util.BitUtil()", "public org.apache.lucene.util.BitUtil()"], ["int", "org.apache.lucene.util.BitUtil.pop(long)", "public static int pop(long)"], ["long", "org.apache.lucene.util.BitUtil.pop_array(long[], int, int)", "public static long pop_array(long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_intersect(long[], long[], int, int)", "public static long pop_intersect(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_union(long[], long[], int, int)", "public static long pop_union(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_andnot(long[], long[], int, int)", "public static long pop_andnot(long[], long[], int, int)"], ["long", "org.apache.lucene.util.BitUtil.pop_xor(long[], long[], int, int)", "public static long pop_xor(long[], long[], int, int)"], ["int", "org.apache.lucene.util.BitUtil.ntz(long)", "public static int ntz(long)"], ["int", "org.apache.lucene.util.BitUtil.ntz(int)", "public static int ntz(int)"], ["int", "org.apache.lucene.util.BitUtil.ntz2(long)", "public static int ntz2(long)"], ["int", "org.apache.lucene.util.BitUtil.ntz3(long)", "public static int ntz3(long)"], ["boolean", "org.apache.lucene.util.BitUtil.isPowerOfTwo(int)", "public static boolean isPowerOfTwo(int)"], ["boolean", "org.apache.lucene.util.BitUtil.isPowerOfTwo(long)", "public static boolean isPowerOfTwo(long)"], ["int", "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)", "public static int nextHighestPowerOfTwo(int)"], ["long", "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)", "public static long nextHighestPowerOfTwo(long)"], ["org.apache.lucene.util.BitVector", "org.apache.lucene.util.BitVector(int)", "public org.apache.lucene.util.BitVector(int)"], ["java.lang.Object", "org.apache.lucene.util.BitVector.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.util.BitVector.set(int)", "public final void set(int)"], ["boolean", "org.apache.lucene.util.BitVector.getAndSet(int)", "public final boolean getAndSet(int)"], ["void", "org.apache.lucene.util.BitVector.clear(int)", "public final void clear(int)"], ["boolean", "org.apache.lucene.util.BitVector.get(int)", "public final boolean get(int)"], ["int", "org.apache.lucene.util.BitVector.size()", "public final int size()"], ["int", "org.apache.lucene.util.BitVector.count()", "public final int count()"], ["int", "org.apache.lucene.util.BitVector.getRecomputedCount()", "public final int getRecomputedCount()"], ["void", "org.apache.lucene.util.BitVector.write(org.apache.lucene.store.Directory, java.lang.String)", "public final void write(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.util.BitVector", "org.apache.lucene.util.BitVector(org.apache.lucene.store.Directory, java.lang.String)", "public org.apache.lucene.util.BitVector(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException"], ["org.apache.lucene.util.BitVector", "org.apache.lucene.util.BitVector.subset(int, int)", "public org.apache.lucene.util.BitVector subset(int, int)"], ["org.apache.lucene.util.CloseableThreadLocal", "org.apache.lucene.util.CloseableThreadLocal()", "public org.apache.lucene.util.CloseableThreadLocal()"], ["T", "org.apache.lucene.util.CloseableThreadLocal.get()", "public T get()"], ["void", "org.apache.lucene.util.CloseableThreadLocal.set(T)", "public void set(T)"], ["void", "org.apache.lucene.util.CloseableThreadLocal.close()", "public void close()"], ["int", "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.docID()", "public int docID()"], ["int", "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.advance(int)", "public int advance(int)"], ["org.apache.lucene.util.DocIdBitSet", "org.apache.lucene.util.DocIdBitSet(java.util.BitSet)", "public org.apache.lucene.util.DocIdBitSet(java.util.BitSet)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.DocIdBitSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["boolean", "org.apache.lucene.util.DocIdBitSet.isCacheable()", "public boolean isCacheable()"], ["java.util.BitSet", "org.apache.lucene.util.DocIdBitSet.getBitSet()", "public java.util.BitSet getBitSet()"], ["org.apache.lucene.util.DummyConcurrentLock", "org.apache.lucene.util.DummyConcurrentLock()", "public org.apache.lucene.util.DummyConcurrentLock()"], ["void", "org.apache.lucene.util.DummyConcurrentLock.lock()", "public void lock()"], ["void", "org.apache.lucene.util.DummyConcurrentLock.lockInterruptibly()", "public void lockInterruptibly()"], ["boolean", "org.apache.lucene.util.DummyConcurrentLock.tryLock()", "public boolean tryLock()"], ["boolean", "org.apache.lucene.util.DummyConcurrentLock.tryLock(long, java.util.concurrent.TimeUnit)", "public boolean tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.apache.lucene.util.DummyConcurrentLock.unlock()", "public void unlock()"], ["java.util.concurrent.locks.Condition", "org.apache.lucene.util.DummyConcurrentLock.newCondition()", "public java.util.concurrent.locks.Condition newCondition()"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType, java.lang.String, org.apache.lucene.search.FieldCache$CacheEntry...)", "public org.apache.lucene.util.FieldCacheSanityChecker$Insanity(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType, java.lang.String, org.apache.lucene.search.FieldCache$CacheEntry...)"], ["org.apache.lucene.util.FieldCacheSanityChecker$InsanityType", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getType()", "public org.apache.lucene.util.FieldCacheSanityChecker$InsanityType getType()"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getMsg()", "public java.lang.String getMsg()"], ["org.apache.lucene.search.FieldCache$CacheEntry[]", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getCacheEntries()", "public org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$InsanityType.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.FieldCacheSanityChecker$ReaderField", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField(java.lang.Object, java.lang.String)", "public org.apache.lucene.util.FieldCacheSanityChecker$ReaderField(java.lang.Object, java.lang.String)"], ["int", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.hashCode()", "public int hashCode()"], ["boolean", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.FieldCacheSanityChecker", "org.apache.lucene.util.FieldCacheSanityChecker()", "public org.apache.lucene.util.FieldCacheSanityChecker()"], ["void", "org.apache.lucene.util.FieldCacheSanityChecker.setRamUsageEstimator(org.apache.lucene.util.RamUsageEstimator)", "public void setRamUsageEstimator(org.apache.lucene.util.RamUsageEstimator)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]", "org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(org.apache.lucene.search.FieldCache)", "public static org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]", "org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(org.apache.lucene.search.FieldCache$CacheEntry...)", "public static org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] checkSanity(org.apache.lucene.search.FieldCache$CacheEntry...)"], ["org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]", "org.apache.lucene.util.FieldCacheSanityChecker.check(org.apache.lucene.search.FieldCache$CacheEntry...)", "public org.apache.lucene.util.FieldCacheSanityChecker$Insanity[] check(org.apache.lucene.search.FieldCache$CacheEntry...)"], ["int", "org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(java.nio.ByteBuffer)", "public static int getEncodedLength(java.nio.ByteBuffer) throws java.lang.IllegalArgumentException"], ["int", "org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(java.nio.CharBuffer)", "public static int getDecodedLength(java.nio.CharBuffer) throws java.lang.IllegalArgumentException"], ["void", "org.apache.lucene.util.IndexableBinaryStringTools.encode(java.nio.ByteBuffer, java.nio.CharBuffer)", "public static void encode(java.nio.ByteBuffer, java.nio.CharBuffer)"], ["void", "org.apache.lucene.util.IndexableBinaryStringTools.decode(java.nio.CharBuffer, java.nio.ByteBuffer)", "public static void decode(java.nio.CharBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.apache.lucene.util.IndexableBinaryStringTools.decode(java.nio.CharBuffer)", "public static java.nio.ByteBuffer decode(java.nio.CharBuffer)"], ["java.nio.CharBuffer", "org.apache.lucene.util.IndexableBinaryStringTools.encode(java.nio.ByteBuffer)", "public static java.nio.CharBuffer encode(java.nio.ByteBuffer)"], ["org.apache.lucene.util.MapOfSets", "org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)", "public org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)"], ["java.util.Map<K, java.util.Set<V>>", "org.apache.lucene.util.MapOfSets.getMap()", "public java.util.Map<K, java.util.Set<V>> getMap()"], ["int", "org.apache.lucene.util.MapOfSets.put(K, V)", "public int put(K, V)"], ["int", "org.apache.lucene.util.MapOfSets.putAll(K, java.util.Collection<? extends V>)", "public int putAll(K, java.util.Collection<? extends V>)"], ["org.apache.lucene.util.MemoryModel", "org.apache.lucene.util.MemoryModel()", "public org.apache.lucene.util.MemoryModel()"], ["org.apache.lucene.util.NamedThreadFactory", "org.apache.lucene.util.NamedThreadFactory(java.lang.String)", "public org.apache.lucene.util.NamedThreadFactory(java.lang.String)"], ["java.lang.Thread", "org.apache.lucene.util.NamedThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["org.apache.lucene.util.NumericUtils$IntRangeBuilder", "org.apache.lucene.util.NumericUtils$IntRangeBuilder()", "public org.apache.lucene.util.NumericUtils$IntRangeBuilder()"], ["void", "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(java.lang.String, java.lang.String)", "public void addRange(java.lang.String, java.lang.String)"], ["void", "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(int, int, int)", "public void addRange(int, int, int)"], ["org.apache.lucene.util.NumericUtils$LongRangeBuilder", "org.apache.lucene.util.NumericUtils$LongRangeBuilder()", "public org.apache.lucene.util.NumericUtils$LongRangeBuilder()"], ["void", "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(java.lang.String, java.lang.String)", "public void addRange(java.lang.String, java.lang.String)"], ["void", "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(long, long, int)", "public void addRange(long, long, int)"], ["int", "org.apache.lucene.util.NumericUtils.longToPrefixCoded(long, int, char[])", "public static int longToPrefixCoded(long, int, char[])"], ["java.lang.String", "org.apache.lucene.util.NumericUtils.longToPrefixCoded(long, int)", "public static java.lang.String longToPrefixCoded(long, int)"], ["java.lang.String", "org.apache.lucene.util.NumericUtils.longToPrefixCoded(long)", "public static java.lang.String longToPrefixCoded(long)"], ["int", "org.apache.lucene.util.NumericUtils.intToPrefixCoded(int, int, char[])", "public static int intToPrefixCoded(int, int, char[])"], ["java.lang.String", "org.apache.lucene.util.NumericUtils.intToPrefixCoded(int, int)", "public static java.lang.String intToPrefixCoded(int, int)"], ["java.lang.String", "org.apache.lucene.util.NumericUtils.intToPrefixCoded(int)", "public static java.lang.String intToPrefixCoded(int)"], ["long", "org.apache.lucene.util.NumericUtils.prefixCodedToLong(java.lang.String)", "public static long prefixCodedToLong(java.lang.String)"], ["int", "org.apache.lucene.util.NumericUtils.prefixCodedToInt(java.lang.String)", "public static int prefixCodedToInt(java.lang.String)"], ["long", "org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)", "public static long doubleToSortableLong(double)"], ["java.lang.String", "org.apache.lucene.util.NumericUtils.doubleToPrefixCoded(double)", "public static java.lang.String doubleToPrefixCoded(double)"], ["double", "org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)", "public static double sortableLongToDouble(long)"], ["double", "org.apache.lucene.util.NumericUtils.prefixCodedToDouble(java.lang.String)", "public static double prefixCodedToDouble(java.lang.String)"], ["int", "org.apache.lucene.util.NumericUtils.floatToSortableInt(float)", "public static int floatToSortableInt(float)"], ["java.lang.String", "org.apache.lucene.util.NumericUtils.floatToPrefixCoded(float)", "public static java.lang.String floatToPrefixCoded(float)"], ["float", "org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)", "public static float sortableIntToFloat(int)"], ["float", "org.apache.lucene.util.NumericUtils.prefixCodedToFloat(java.lang.String)", "public static float prefixCodedToFloat(java.lang.String)"], ["void", "org.apache.lucene.util.NumericUtils.splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder, int, long, long)", "public static void splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder, int, long, long)"], ["void", "org.apache.lucene.util.NumericUtils.splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder, int, int, int)", "public static void splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder, int, int, int)"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet(long)", "public org.apache.lucene.util.OpenBitSet(long)"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet()", "public org.apache.lucene.util.OpenBitSet()"], ["org.apache.lucene.util.OpenBitSet", "org.apache.lucene.util.OpenBitSet(long[], int)", "public org.apache.lucene.util.OpenBitSet(long[], int)"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.OpenBitSet.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["boolean", "org.apache.lucene.util.OpenBitSet.isCacheable()", "public boolean isCacheable()"], ["long", "org.apache.lucene.util.OpenBitSet.capacity()", "public long capacity()"], ["long", "org.apache.lucene.util.OpenBitSet.size()", "public long size()"], ["boolean", "org.apache.lucene.util.OpenBitSet.isEmpty()", "public boolean isEmpty()"], ["long[]", "org.apache.lucene.util.OpenBitSet.getBits()", "public long[] getBits()"], ["void", "org.apache.lucene.util.OpenBitSet.setBits(long[])", "public void setBits(long[])"], ["int", "org.apache.lucene.util.OpenBitSet.getNumWords()", "public int getNumWords()"], ["void", "org.apache.lucene.util.OpenBitSet.setNumWords(int)", "public void setNumWords(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.get(int)", "public boolean get(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.fastGet(int)", "public boolean fastGet(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.get(long)", "public boolean get(long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.fastGet(long)", "public boolean fastGet(long)"], ["int", "org.apache.lucene.util.OpenBitSet.getBit(int)", "public int getBit(int)"], ["void", "org.apache.lucene.util.OpenBitSet.set(long)", "public void set(long)"], ["void", "org.apache.lucene.util.OpenBitSet.fastSet(int)", "public void fastSet(int)"], ["void", "org.apache.lucene.util.OpenBitSet.fastSet(long)", "public void fastSet(long)"], ["void", "org.apache.lucene.util.OpenBitSet.set(long, long)", "public void set(long, long)"], ["void", "org.apache.lucene.util.OpenBitSet.fastClear(int)", "public void fastClear(int)"], ["void", "org.apache.lucene.util.OpenBitSet.fastClear(long)", "public void fastClear(long)"], ["void", "org.apache.lucene.util.OpenBitSet.clear(long)", "public void clear(long)"], ["void", "org.apache.lucene.util.OpenBitSet.clear(int, int)", "public void clear(int, int)"], ["void", "org.apache.lucene.util.OpenBitSet.clear(long, long)", "public void clear(long, long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.getAndSet(int)", "public boolean getAndSet(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.getAndSet(long)", "public boolean getAndSet(long)"], ["void", "org.apache.lucene.util.OpenBitSet.fastFlip(int)", "public void fastFlip(int)"], ["void", "org.apache.lucene.util.OpenBitSet.fastFlip(long)", "public void fastFlip(long)"], ["void", "org.apache.lucene.util.OpenBitSet.flip(long)", "public void flip(long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.flipAndGet(int)", "public boolean flipAndGet(int)"], ["boolean", "org.apache.lucene.util.OpenBitSet.flipAndGet(long)", "public boolean flipAndGet(long)"], ["void", "org.apache.lucene.util.OpenBitSet.flip(long, long)", "public void flip(long, long)"], ["long", "org.apache.lucene.util.OpenBitSet.cardinality()", "public long cardinality()"], ["long", "org.apache.lucene.util.OpenBitSet.intersectionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long intersectionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["long", "org.apache.lucene.util.OpenBitSet.unionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long unionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["long", "org.apache.lucene.util.OpenBitSet.andNotCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long andNotCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["long", "org.apache.lucene.util.OpenBitSet.xorCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)", "public static long xorCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"], ["int", "org.apache.lucene.util.OpenBitSet.nextSetBit(int)", "public int nextSetBit(int)"], ["long", "org.apache.lucene.util.OpenBitSet.nextSetBit(long)", "public long nextSetBit(long)"], ["java.lang.Object", "org.apache.lucene.util.OpenBitSet.clone()", "public java.lang.Object clone()"], ["void", "org.apache.lucene.util.OpenBitSet.intersect(org.apache.lucene.util.OpenBitSet)", "public void intersect(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.union(org.apache.lucene.util.OpenBitSet)", "public void union(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.remove(org.apache.lucene.util.OpenBitSet)", "public void remove(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.xor(org.apache.lucene.util.OpenBitSet)", "public void xor(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.and(org.apache.lucene.util.OpenBitSet)", "public void and(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.or(org.apache.lucene.util.OpenBitSet)", "public void or(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.andNot(org.apache.lucene.util.OpenBitSet)", "public void andNot(org.apache.lucene.util.OpenBitSet)"], ["boolean", "org.apache.lucene.util.OpenBitSet.intersects(org.apache.lucene.util.OpenBitSet)", "public boolean intersects(org.apache.lucene.util.OpenBitSet)"], ["void", "org.apache.lucene.util.OpenBitSet.ensureCapacityWords(int)", "public void ensureCapacityWords(int)"], ["void", "org.apache.lucene.util.OpenBitSet.ensureCapacity(long)", "public void ensureCapacity(long)"], ["void", "org.apache.lucene.util.OpenBitSet.trimTrailingZeros()", "public void trimTrailingZeros()"], ["int", "org.apache.lucene.util.OpenBitSet.bits2words(long)", "public static int bits2words(long)"], ["boolean", "org.apache.lucene.util.OpenBitSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.apache.lucene.util.OpenBitSet.hashCode()", "public int hashCode()"], ["org.apache.lucene.util.OpenBitSetDISI", "org.apache.lucene.util.OpenBitSetDISI(org.apache.lucene.search.DocIdSetIterator, int)", "public org.apache.lucene.util.OpenBitSetDISI(org.apache.lucene.search.DocIdSetIterator, int) throws java.io.IOException"], ["org.apache.lucene.util.OpenBitSetDISI", "org.apache.lucene.util.OpenBitSetDISI(int)", "public org.apache.lucene.util.OpenBitSetDISI(int)"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceOr(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceOr(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceAnd(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceAnd(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceNot(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceNot(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["void", "org.apache.lucene.util.OpenBitSetDISI.inPlaceXor(org.apache.lucene.search.DocIdSetIterator)", "public void inPlaceXor(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["org.apache.lucene.util.OpenBitSetIterator", "org.apache.lucene.util.OpenBitSetIterator(org.apache.lucene.util.OpenBitSet)", "public org.apache.lucene.util.OpenBitSetIterator(org.apache.lucene.util.OpenBitSet)"], ["org.apache.lucene.util.OpenBitSetIterator", "org.apache.lucene.util.OpenBitSetIterator(long[], int)", "public org.apache.lucene.util.OpenBitSetIterator(long[], int)"], ["int", "org.apache.lucene.util.OpenBitSetIterator.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.util.OpenBitSetIterator.advance(int)", "public int advance(int)"], ["int", "org.apache.lucene.util.OpenBitSetIterator.docID()", "public int docID()"], ["java.lang.String", "org.apache.lucene.util.Parameter.toString()", "public java.lang.String toString()"], ["org.apache.lucene.util.PriorityQueue", "org.apache.lucene.util.PriorityQueue()", "public org.apache.lucene.util.PriorityQueue()"], ["T", "org.apache.lucene.util.PriorityQueue.add(T)", "public final T add(T)"], ["T", "org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)", "public T insertWithOverflow(T)"], ["T", "org.apache.lucene.util.PriorityQueue.top()", "public final T top()"], ["T", "org.apache.lucene.util.PriorityQueue.pop()", "public final T pop()"], ["T", "org.apache.lucene.util.PriorityQueue.updateTop()", "public final T updateTop()"], ["int", "org.apache.lucene.util.PriorityQueue.size()", "public final int size()"], ["void", "org.apache.lucene.util.PriorityQueue.clear()", "public final void clear()"], ["org.apache.lucene.util.RamUsageEstimator", "org.apache.lucene.util.RamUsageEstimator()", "public org.apache.lucene.util.RamUsageEstimator()"], ["org.apache.lucene.util.RamUsageEstimator", "org.apache.lucene.util.RamUsageEstimator(boolean)", "public org.apache.lucene.util.RamUsageEstimator(boolean)"], ["org.apache.lucene.util.RamUsageEstimator", "org.apache.lucene.util.RamUsageEstimator(org.apache.lucene.util.MemoryModel)", "public org.apache.lucene.util.RamUsageEstimator(org.apache.lucene.util.MemoryModel)"], ["org.apache.lucene.util.RamUsageEstimator", "org.apache.lucene.util.RamUsageEstimator(org.apache.lucene.util.MemoryModel, boolean)", "public org.apache.lucene.util.RamUsageEstimator(org.apache.lucene.util.MemoryModel, boolean)"], ["long", "org.apache.lucene.util.RamUsageEstimator.estimateRamUsage(java.lang.Object)", "public long estimateRamUsage(java.lang.Object)"], ["java.lang.String", "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long, java.text.DecimalFormat)", "public static java.lang.String humanReadableUnits(long, java.text.DecimalFormat)"], ["org.apache.lucene.util.ReaderUtil", "org.apache.lucene.util.ReaderUtil()", "public org.apache.lucene.util.ReaderUtil()"], ["void", "org.apache.lucene.util.ReaderUtil.gatherSubReaders(java.util.List<org.apache.lucene.index.IndexReader>, org.apache.lucene.index.IndexReader)", "public static void gatherSubReaders(java.util.List<org.apache.lucene.index.IndexReader>, org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.util.ReaderUtil.subReader(int, org.apache.lucene.index.IndexReader)", "public static org.apache.lucene.index.IndexReader subReader(int, org.apache.lucene.index.IndexReader)"], ["org.apache.lucene.index.IndexReader", "org.apache.lucene.util.ReaderUtil.subReader(org.apache.lucene.index.IndexReader, int)", "public static org.apache.lucene.index.IndexReader subReader(org.apache.lucene.index.IndexReader, int)"], ["int", "org.apache.lucene.util.ReaderUtil.subIndex(int, int[])", "public static int subIndex(int, int[])"], ["org.apache.lucene.util.ScorerDocQueue", "org.apache.lucene.util.ScorerDocQueue(int)", "public org.apache.lucene.util.ScorerDocQueue(int)"], ["void", "org.apache.lucene.util.ScorerDocQueue.put(org.apache.lucene.search.Scorer)", "public final void put(org.apache.lucene.search.Scorer)"], ["boolean", "org.apache.lucene.util.ScorerDocQueue.insert(org.apache.lucene.search.Scorer)", "public boolean insert(org.apache.lucene.search.Scorer)"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.util.ScorerDocQueue.top()", "public final org.apache.lucene.search.Scorer top()"], ["int", "org.apache.lucene.util.ScorerDocQueue.topDoc()", "public final int topDoc()"], ["float", "org.apache.lucene.util.ScorerDocQueue.topScore()", "public final float topScore() throws java.io.IOException"], ["boolean", "org.apache.lucene.util.ScorerDocQueue.topNextAndAdjustElsePop()", "public final boolean topNextAndAdjustElsePop() throws java.io.IOException"], ["boolean", "org.apache.lucene.util.ScorerDocQueue.topSkipToAndAdjustElsePop(int)", "public final boolean topSkipToAndAdjustElsePop(int) throws java.io.IOException"], ["org.apache.lucene.search.Scorer", "org.apache.lucene.util.ScorerDocQueue.pop()", "public final org.apache.lucene.search.Scorer pop()"], ["void", "org.apache.lucene.util.ScorerDocQueue.adjustTop()", "public final void adjustTop()"], ["int", "org.apache.lucene.util.ScorerDocQueue.size()", "public final int size()"], ["void", "org.apache.lucene.util.ScorerDocQueue.clear()", "public final void clear()"], ["org.apache.lucene.util.SimpleStringInterner", "org.apache.lucene.util.SimpleStringInterner(int, int)", "public org.apache.lucene.util.SimpleStringInterner(int, int)"], ["java.lang.String", "org.apache.lucene.util.SimpleStringInterner.intern(java.lang.String)", "public java.lang.String intern(java.lang.String)"], ["org.apache.lucene.util.SmallFloat", "org.apache.lucene.util.SmallFloat()", "public org.apache.lucene.util.SmallFloat()"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte(float, int, int)", "public static byte floatToByte(float, int, int)"], ["float", "org.apache.lucene.util.SmallFloat.byteToFloat(byte, int, int)", "public static float byteToFloat(byte, int, int)"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte315(float)", "public static byte floatToByte315(float)"], ["float", "org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)", "public static float byte315ToFloat(byte)"], ["byte", "org.apache.lucene.util.SmallFloat.floatToByte52(float)", "public static byte floatToByte52(float)"], ["float", "org.apache.lucene.util.SmallFloat.byte52ToFloat(byte)", "public static float byte52ToFloat(byte)"], ["int", "org.apache.lucene.util.SortedVIntList$1.docID()", "public int docID()"], ["int", "org.apache.lucene.util.SortedVIntList$1.nextDoc()", "public int nextDoc()"], ["int", "org.apache.lucene.util.SortedVIntList$1.advance(int)", "public int advance(int)"], ["org.apache.lucene.util.SortedVIntList", "org.apache.lucene.util.SortedVIntList(int...)", "public org.apache.lucene.util.SortedVIntList(int...)"], ["org.apache.lucene.util.SortedVIntList", "org.apache.lucene.util.SortedVIntList(int[], int)", "public org.apache.lucene.util.SortedVIntList(int[], int)"], ["org.apache.lucene.util.SortedVIntList", "org.apache.lucene.util.SortedVIntList(java.util.BitSet)", "public org.apache.lucene.util.SortedVIntList(java.util.BitSet)"], ["org.apache.lucene.util.SortedVIntList", "org.apache.lucene.util.SortedVIntList(org.apache.lucene.util.OpenBitSet)", "public org.apache.lucene.util.SortedVIntList(org.apache.lucene.util.OpenBitSet)"], ["org.apache.lucene.util.SortedVIntList", "org.apache.lucene.util.SortedVIntList(org.apache.lucene.search.DocIdSetIterator)", "public org.apache.lucene.util.SortedVIntList(org.apache.lucene.search.DocIdSetIterator) throws java.io.IOException"], ["int", "org.apache.lucene.util.SortedVIntList.size()", "public int size()"], ["int", "org.apache.lucene.util.SortedVIntList.getByteSize()", "public int getByteSize()"], ["boolean", "org.apache.lucene.util.SortedVIntList.isCacheable()", "public boolean isCacheable()"], ["org.apache.lucene.search.DocIdSetIterator", "org.apache.lucene.util.SortedVIntList.iterator()", "public org.apache.lucene.search.DocIdSetIterator iterator()"], ["org.apache.lucene.util.SorterTemplate", "org.apache.lucene.util.SorterTemplate()", "public org.apache.lucene.util.SorterTemplate()"], ["void", "org.apache.lucene.util.SorterTemplate.quickSort(int, int)", "public void quickSort(int, int)"], ["java.lang.String", "org.apache.lucene.util.StringHelper.intern(java.lang.String)", "public static java.lang.String intern(java.lang.String)"], ["int", "org.apache.lucene.util.StringHelper.bytesDifference(byte[], int, byte[], int)", "public static final int bytesDifference(byte[], int, byte[], int)"], ["int", "org.apache.lucene.util.StringHelper.stringDifference(java.lang.String, java.lang.String)", "public static final int stringDifference(java.lang.String, java.lang.String)"], ["org.apache.lucene.util.StringInterner", "org.apache.lucene.util.StringInterner()", "public org.apache.lucene.util.StringInterner()"], ["java.lang.String", "org.apache.lucene.util.StringInterner.intern(java.lang.String)", "public java.lang.String intern(java.lang.String)"], ["java.lang.String", "org.apache.lucene.util.StringInterner.intern(char[], int, int)", "public java.lang.String intern(char[], int, int)"], ["org.apache.lucene.util.ThreadInterruptedException", "org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)", "public org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)"], ["org.apache.lucene.util.ToStringUtils", "org.apache.lucene.util.ToStringUtils()", "public org.apache.lucene.util.ToStringUtils()"], ["java.lang.String", "org.apache.lucene.util.ToStringUtils.boost(float)", "public static java.lang.String boost(float)"], ["org.apache.lucene.util.UnicodeUtil$UTF16Result", "org.apache.lucene.util.UnicodeUtil$UTF16Result()", "public org.apache.lucene.util.UnicodeUtil$UTF16Result()"], ["void", "org.apache.lucene.util.UnicodeUtil$UTF16Result.setLength(int)", "public void setLength(int)"], ["void", "org.apache.lucene.util.UnicodeUtil$UTF16Result.copyText(org.apache.lucene.util.UnicodeUtil$UTF16Result)", "public void copyText(org.apache.lucene.util.UnicodeUtil$UTF16Result)"], ["org.apache.lucene.util.UnicodeUtil$UTF8Result", "org.apache.lucene.util.UnicodeUtil$UTF8Result()", "public org.apache.lucene.util.UnicodeUtil$UTF8Result()"], ["void", "org.apache.lucene.util.UnicodeUtil$UTF8Result.setLength(int)", "public void setLength(int)"], ["org.apache.lucene.util.UnicodeUtil", "org.apache.lucene.util.UnicodeUtil()", "public org.apache.lucene.util.UnicodeUtil()"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[], int, org.apache.lucene.util.UnicodeUtil$UTF8Result)", "public static void UTF16toUTF8(char[], int, org.apache.lucene.util.UnicodeUtil$UTF8Result)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[], int, int, org.apache.lucene.util.UnicodeUtil$UTF8Result)", "public static void UTF16toUTF8(char[], int, int, org.apache.lucene.util.UnicodeUtil$UTF8Result)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(java.lang.String, int, int, org.apache.lucene.util.UnicodeUtil$UTF8Result)", "public static void UTF16toUTF8(java.lang.String, int, int, org.apache.lucene.util.UnicodeUtil$UTF8Result)"], ["void", "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[], int, int, org.apache.lucene.util.UnicodeUtil$UTF16Result)", "public static void UTF8toUTF16(byte[], int, int, org.apache.lucene.util.UnicodeUtil$UTF16Result)"], ["org.apache.lucene.util.Version[]", "org.apache.lucene.util.Version.values()", "public static final org.apache.lucene.util.Version[] values()"], ["org.apache.lucene.util.Version", "org.apache.lucene.util.Version.valueOf(java.lang.String)", "public static org.apache.lucene.util.Version valueOf(java.lang.String)"], ["boolean", "org.apache.lucene.util.Version.onOrAfter(org.apache.lucene.util.Version)", "public boolean onOrAfter(org.apache.lucene.util.Version)"], ["void", "org.apache.lucene.util.cache.Cache$SynchronizedCache.put(K, V)", "public void put(K, V)"], ["V", "org.apache.lucene.util.cache.Cache$SynchronizedCache.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.apache.lucene.util.cache.Cache$SynchronizedCache.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["void", "org.apache.lucene.util.cache.Cache$SynchronizedCache.close()", "public void close()"], ["org.apache.lucene.util.cache.Cache", "org.apache.lucene.util.cache.Cache()", "public org.apache.lucene.util.cache.Cache()"], ["<K, V> org.apache.lucene.util.cache.Cache<K, V>", "org.apache.lucene.util.cache.Cache.synchronizedCache(org.apache.lucene.util.cache.Cache<K, V>)", "public static <K, V> org.apache.lucene.util.cache.Cache<K, V> synchronizedCache(org.apache.lucene.util.cache.Cache<K, V>)"], ["org.apache.lucene.util.cache.SimpleLRUCache", "org.apache.lucene.util.cache.SimpleLRUCache(int)", "public org.apache.lucene.util.cache.SimpleLRUCache(int)"], ["void", "org.apache.lucene.util.cache.SimpleMapCache$SynchronizedSimpleMapCache.put(K, V)", "public void put(K, V)"], ["V", "org.apache.lucene.util.cache.SimpleMapCache$SynchronizedSimpleMapCache.get(java.lang.Object)", "public V get(java.lang.Object)"], ["boolean", "org.apache.lucene.util.cache.SimpleMapCache$SynchronizedSimpleMapCache.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["void", "org.apache.lucene.util.cache.SimpleMapCache$SynchronizedSimpleMapCache.close()", "public void close()"], ["java.util.Set<K>", "org.apache.lucene.util.cache.SimpleMapCache$SynchronizedSimpleMapCache.keySet()", "public java.util.Set<K> keySet()"], ["org.apache.lucene.util.cache.SimpleMapCache", "org.apache.lucene.util.cache.SimpleMapCache()", "public org.apache.lucene.util.cache.SimpleMapCache()"], ["org.apache.lucene.util.cache.SimpleMapCache", "org.apache.lucene.util.cache.SimpleMapCache(java.util.Map<K, V>)", "public org.apache.lucene.util.cache.SimpleMapCache(java.util.Map<K, V>)"], ["V", "org.apache.lucene.util.cache.SimpleMapCache.get(java.lang.Object)", "public V get(java.lang.Object)"], ["void", "org.apache.lucene.util.cache.SimpleMapCache.put(K, V)", "public void put(K, V)"], ["void", "org.apache.lucene.util.cache.SimpleMapCache.close()", "public void close()"], ["boolean", "org.apache.lucene.util.cache.SimpleMapCache.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.util.Set<K>", "org.apache.lucene.util.cache.SimpleMapCache.keySet()", "public java.util.Set<K> keySet()"]]}