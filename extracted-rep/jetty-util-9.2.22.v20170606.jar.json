{"jetty-util-9.2.22.v20170606.jar": [["boolean", "org.eclipse.jetty.util.AbstractTrie.put(V)", "public boolean put(V)"], ["V", "org.eclipse.jetty.util.AbstractTrie.remove(java.lang.String)", "public V remove(java.lang.String)"], ["V", "org.eclipse.jetty.util.AbstractTrie.get(java.lang.String)", "public V get(java.lang.String)"], ["V", "org.eclipse.jetty.util.AbstractTrie.get(java.nio.ByteBuffer)", "public V get(java.nio.ByteBuffer)"], ["V", "org.eclipse.jetty.util.AbstractTrie.getBest(java.lang.String)", "public V getBest(java.lang.String)"], ["V", "org.eclipse.jetty.util.AbstractTrie.getBest(byte[], int, int)", "public V getBest(byte[], int, int)"], ["boolean", "org.eclipse.jetty.util.AbstractTrie.isCaseInsensitive()", "public boolean isCaseInsensitive()"], ["org.eclipse.jetty.util.ArrayQueue", "org.eclipse.jetty.util.ArrayQueue()", "public org.eclipse.jetty.util.ArrayQueue()"], ["org.eclipse.jetty.util.ArrayQueue", "org.eclipse.jetty.util.ArrayQueue(java.lang.Object)", "public org.eclipse.jetty.util.ArrayQueue(java.lang.Object)"], ["org.eclipse.jetty.util.ArrayQueue", "org.eclipse.jetty.util.ArrayQueue(int)", "public org.eclipse.jetty.util.ArrayQueue(int)"], ["org.eclipse.jetty.util.ArrayQueue", "org.eclipse.jetty.util.ArrayQueue(int, int)", "public org.eclipse.jetty.util.ArrayQueue(int, int)"], ["org.eclipse.jetty.util.ArrayQueue", "org.eclipse.jetty.util.ArrayQueue(int, int, java.lang.Object)", "public org.eclipse.jetty.util.ArrayQueue(int, int, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.ArrayQueue.lock()", "public java.lang.Object lock()"], ["int", "org.eclipse.jetty.util.ArrayQueue.getCapacity()", "public int getCapacity()"], ["boolean", "org.eclipse.jetty.util.ArrayQueue.add(E)", "public boolean add(E)"], ["boolean", "org.eclipse.jetty.util.ArrayQueue.offer(E)", "public boolean offer(E)"], ["void", "org.eclipse.jetty.util.ArrayQueue.addUnsafe(E)", "public void addUnsafe(E)"], ["E", "org.eclipse.jetty.util.ArrayQueue.element()", "public E element()"], ["E", "org.eclipse.jetty.util.ArrayQueue.peek()", "public E peek()"], ["E", "org.eclipse.jetty.util.ArrayQueue.peekUnsafe()", "public E peekUnsafe()"], ["E", "org.eclipse.jetty.util.ArrayQueue.poll()", "public E poll()"], ["E", "org.eclipse.jetty.util.ArrayQueue.pollUnsafe()", "public E pollUnsafe()"], ["E", "org.eclipse.jetty.util.ArrayQueue.remove()", "public E remove()"], ["void", "org.eclipse.jetty.util.ArrayQueue.clear()", "public void clear()"], ["boolean", "org.eclipse.jetty.util.ArrayQueue.isEmpty()", "public boolean isEmpty()"], ["int", "org.eclipse.jetty.util.ArrayQueue.size()", "public int size()"], ["E", "org.eclipse.jetty.util.ArrayQueue.get(int)", "public E get(int)"], ["E", "org.eclipse.jetty.util.ArrayQueue.getUnsafe(int)", "public E getUnsafe(int)"], ["E", "org.eclipse.jetty.util.ArrayQueue.remove(int)", "public E remove(int)"], ["E", "org.eclipse.jetty.util.ArrayQueue.set(int, E)", "public E set(int, E)"], ["void", "org.eclipse.jetty.util.ArrayQueue.add(int, E)", "public void add(int, E)"], ["org.eclipse.jetty.util.ArrayTernaryTrie", "org.eclipse.jetty.util.ArrayTernaryTrie()", "public org.eclipse.jetty.util.ArrayTernaryTrie()"], ["org.eclipse.jetty.util.ArrayTernaryTrie", "org.eclipse.jetty.util.ArrayTernaryTrie(boolean)", "public org.eclipse.jetty.util.ArrayTernaryTrie(boolean)"], ["org.eclipse.jetty.util.ArrayTernaryTrie", "org.eclipse.jetty.util.ArrayTernaryTrie(int)", "public org.eclipse.jetty.util.ArrayTernaryTrie(int)"], ["org.eclipse.jetty.util.ArrayTernaryTrie", "org.eclipse.jetty.util.ArrayTernaryTrie(boolean, int)", "public org.eclipse.jetty.util.ArrayTernaryTrie(boolean, int)"], ["org.eclipse.jetty.util.ArrayTernaryTrie", "org.eclipse.jetty.util.ArrayTernaryTrie(org.eclipse.jetty.util.ArrayTernaryTrie<V>, double)", "public org.eclipse.jetty.util.ArrayTernaryTrie(org.eclipse.jetty.util.ArrayTernaryTrie<V>, double)"], ["boolean", "org.eclipse.jetty.util.ArrayTernaryTrie.put(java.lang.String, V)", "public boolean put(java.lang.String, V)"], ["V", "org.eclipse.jetty.util.ArrayTernaryTrie.get(java.lang.String, int, int)", "public V get(java.lang.String, int, int)"], ["V", "org.eclipse.jetty.util.ArrayTernaryTrie.get(java.nio.ByteBuffer, int, int)", "public V get(java.nio.ByteBuffer, int, int)"], ["V", "org.eclipse.jetty.util.ArrayTernaryTrie.getBest(java.lang.String)", "public V getBest(java.lang.String)"], ["V", "org.eclipse.jetty.util.ArrayTernaryTrie.getBest(java.lang.String, int, int)", "public V getBest(java.lang.String, int, int)"], ["V", "org.eclipse.jetty.util.ArrayTernaryTrie.getBest(java.nio.ByteBuffer, int, int)", "public V getBest(java.nio.ByteBuffer, int, int)"], ["java.lang.String", "org.eclipse.jetty.util.ArrayTernaryTrie.toString()", "public java.lang.String toString()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.util.ArrayTernaryTrie.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "org.eclipse.jetty.util.ArrayTernaryTrie.isFull()", "public boolean isFull()"], ["int", "org.eclipse.jetty.util.ArrayTernaryTrie.hilo(int)", "public static int hilo(int)"], ["void", "org.eclipse.jetty.util.ArrayTernaryTrie.dump()", "public void dump()"], ["org.eclipse.jetty.util.ArrayTrie", "org.eclipse.jetty.util.ArrayTrie()", "public org.eclipse.jetty.util.ArrayTrie()"], ["org.eclipse.jetty.util.ArrayTrie", "org.eclipse.jetty.util.ArrayTrie(int)", "public org.eclipse.jetty.util.ArrayTrie(int)"], ["boolean", "org.eclipse.jetty.util.ArrayTrie.put(java.lang.String, V)", "public boolean put(java.lang.String, V)"], ["V", "org.eclipse.jetty.util.ArrayTrie.get(java.lang.String, int, int)", "public V get(java.lang.String, int, int)"], ["V", "org.eclipse.jetty.util.ArrayTrie.get(java.nio.ByteBuffer, int, int)", "public V get(java.nio.ByteBuffer, int, int)"], ["V", "org.eclipse.jetty.util.ArrayTrie.getBest(byte[], int, int)", "public V getBest(byte[], int, int)"], ["V", "org.eclipse.jetty.util.ArrayTrie.getBest(java.nio.ByteBuffer, int, int)", "public V getBest(java.nio.ByteBuffer, int, int)"], ["V", "org.eclipse.jetty.util.ArrayTrie.getBest(java.lang.String, int, int)", "public V getBest(java.lang.String, int, int)"], ["java.lang.String", "org.eclipse.jetty.util.ArrayTrie.toString()", "public java.lang.String toString()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.util.ArrayTrie.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "org.eclipse.jetty.util.ArrayTrie.isFull()", "public boolean isFull()"], ["org.eclipse.jetty.util.ArrayUtil", "org.eclipse.jetty.util.ArrayUtil()", "public org.eclipse.jetty.util.ArrayUtil()"], ["<T> T[]", "org.eclipse.jetty.util.ArrayUtil.removeFromArray(T[], java.lang.Object)", "public static <T> T[] removeFromArray(T[], java.lang.Object)"], ["<T> T[]", "org.eclipse.jetty.util.ArrayUtil.addToArray(T[], T, java.lang.Class<?>)", "public static <T> T[] addToArray(T[], T, java.lang.Class<?>)"], ["<T> T[]", "org.eclipse.jetty.util.ArrayUtil.prependToArray(T, T[], java.lang.Class<?>)", "public static <T> T[] prependToArray(T, T[], java.lang.Class<?>)"], ["<E> java.util.List<E>", "org.eclipse.jetty.util.ArrayUtil.asMutableList(E[])", "public static <E> java.util.List<E> asMutableList(E[])"], ["<T> T[]", "org.eclipse.jetty.util.ArrayUtil.removeNulls(T[])", "public static <T> T[] removeNulls(T[])"], ["boolean", "org.eclipse.jetty.util.Atomics.updateMin(java.util.concurrent.atomic.AtomicLong, long)", "public static boolean updateMin(java.util.concurrent.atomic.AtomicLong, long)"], ["boolean", "org.eclipse.jetty.util.Atomics.updateMax(java.util.concurrent.atomic.AtomicLong, long)", "public static boolean updateMax(java.util.concurrent.atomic.AtomicLong, long)"], ["boolean", "org.eclipse.jetty.util.Atomics.updateMin(java.util.concurrent.atomic.AtomicInteger, int)", "public static boolean updateMin(java.util.concurrent.atomic.AtomicInteger, int)"], ["boolean", "org.eclipse.jetty.util.Atomics.updateMax(java.util.concurrent.atomic.AtomicInteger, int)", "public static boolean updateMax(java.util.concurrent.atomic.AtomicInteger, int)"], ["org.eclipse.jetty.util.AttributesMap", "org.eclipse.jetty.util.AttributesMap()", "public org.eclipse.jetty.util.AttributesMap()"], ["org.eclipse.jetty.util.AttributesMap", "org.eclipse.jetty.util.AttributesMap(org.eclipse.jetty.util.AttributesMap)", "public org.eclipse.jetty.util.AttributesMap(org.eclipse.jetty.util.AttributesMap)"], ["void", "org.eclipse.jetty.util.AttributesMap.removeAttribute(java.lang.String)", "public void removeAttribute(java.lang.String)"], ["void", "org.eclipse.jetty.util.AttributesMap.setAttribute(java.lang.String, java.lang.Object)", "public void setAttribute(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.AttributesMap.getAttribute(java.lang.String)", "public java.lang.Object getAttribute(java.lang.String)"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.util.AttributesMap.getAttributeNames()", "public java.util.Enumeration<java.lang.String> getAttributeNames()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.util.AttributesMap.getAttributeNameSet()", "public java.util.Set<java.lang.String> getAttributeNameSet()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.eclipse.jetty.util.AttributesMap.getAttributeEntrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> getAttributeEntrySet()"], ["java.util.Enumeration<java.lang.String>", "org.eclipse.jetty.util.AttributesMap.getAttributeNamesCopy(org.eclipse.jetty.util.Attributes)", "public static java.util.Enumeration<java.lang.String> getAttributeNamesCopy(org.eclipse.jetty.util.Attributes)"], ["void", "org.eclipse.jetty.util.AttributesMap.clearAttributes()", "public void clearAttributes()"], ["int", "org.eclipse.jetty.util.AttributesMap.size()", "public int size()"], ["java.lang.String", "org.eclipse.jetty.util.AttributesMap.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.util.AttributesMap.addAll(org.eclipse.jetty.util.Attributes)", "public void addAll(org.eclipse.jetty.util.Attributes)"], ["java.lang.String", "org.eclipse.jetty.util.B64Code.encode(java.lang.String)", "public static java.lang.String encode(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.B64Code.encode(java.lang.String, java.lang.String)", "public static java.lang.String encode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.B64Code.encode(java.lang.String, java.nio.charset.Charset)", "public static java.lang.String encode(java.lang.String, java.nio.charset.Charset)"], ["char[]", "org.eclipse.jetty.util.B64Code.encode(byte[])", "public static char[] encode(byte[])"], ["char[]", "org.eclipse.jetty.util.B64Code.encode(byte[], boolean)", "public static char[] encode(byte[], boolean)"], ["java.lang.String", "org.eclipse.jetty.util.B64Code.decode(java.lang.String, java.lang.String)", "public static java.lang.String decode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.B64Code.decode(java.lang.String, java.nio.charset.Charset)", "public static java.lang.String decode(java.lang.String, java.nio.charset.Charset)"], ["byte[]", "org.eclipse.jetty.util.B64Code.decode(char[])", "public static byte[] decode(char[])"], ["byte[]", "org.eclipse.jetty.util.B64Code.decode(java.lang.String)", "public static byte[] decode(java.lang.String)"], ["void", "org.eclipse.jetty.util.B64Code.decode(java.lang.String, java.io.ByteArrayOutputStream)", "public static void decode(java.lang.String, java.io.ByteArrayOutputStream)"], ["void", "org.eclipse.jetty.util.B64Code.encode(int, java.lang.Appendable)", "public static void encode(int, java.lang.Appendable) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.B64Code.encode(long, java.lang.Appendable)", "public static void encode(long, java.lang.Appendable) throws java.io.IOException"], ["org.eclipse.jetty.util.BlockingArrayQueue$Itr", "org.eclipse.jetty.util.BlockingArrayQueue$Itr(org.eclipse.jetty.util.BlockingArrayQueue, java.lang.Object[], int)", "public org.eclipse.jetty.util.BlockingArrayQueue$Itr(org.eclipse.jetty.util.BlockingArrayQueue, java.lang.Object[], int)"], ["boolean", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.hasNext()", "public boolean hasNext()"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.next()", "public E next()"], ["boolean", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.hasPrevious()", "public boolean hasPrevious()"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.previous()", "public E previous()"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.nextIndex()", "public int nextIndex()"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.previousIndex()", "public int previousIndex()"], ["void", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.remove()", "public void remove()"], ["void", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.set(E)", "public void set(E)"], ["void", "org.eclipse.jetty.util.BlockingArrayQueue$Itr.add(E)", "public void add(E)"], ["org.eclipse.jetty.util.BlockingArrayQueue", "org.eclipse.jetty.util.BlockingArrayQueue()", "public org.eclipse.jetty.util.BlockingArrayQueue()"], ["org.eclipse.jetty.util.BlockingArrayQueue", "org.eclipse.jetty.util.BlockingArrayQueue(int)", "public org.eclipse.jetty.util.BlockingArrayQueue(int)"], ["org.eclipse.jetty.util.BlockingArrayQueue", "org.eclipse.jetty.util.BlockingArrayQueue(int, int)", "public org.eclipse.jetty.util.BlockingArrayQueue(int, int)"], ["org.eclipse.jetty.util.BlockingArrayQueue", "org.eclipse.jetty.util.BlockingArrayQueue(int, int, int)", "public org.eclipse.jetty.util.BlockingArrayQueue(int, int, int)"], ["void", "org.eclipse.jetty.util.BlockingArrayQueue.clear()", "public void clear()"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue.size()", "public int size()"], ["java.util.Iterator<E>", "org.eclipse.jetty.util.BlockingArrayQueue.iterator()", "public java.util.Iterator<E> iterator()"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.poll()", "public E poll()"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.peek()", "public E peek()"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.remove()", "public E remove()"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.element()", "public E element()"], ["boolean", "org.eclipse.jetty.util.BlockingArrayQueue.offer(E)", "public boolean offer(E)"], ["boolean", "org.eclipse.jetty.util.BlockingArrayQueue.add(E)", "public boolean add(E)"], ["void", "org.eclipse.jetty.util.BlockingArrayQueue.put(E)", "public void put(E) throws java.lang.InterruptedException"], ["boolean", "org.eclipse.jetty.util.BlockingArrayQueue.offer(E, long, java.util.concurrent.TimeUnit)", "public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.take()", "public E take() throws java.lang.InterruptedException"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.poll(long, java.util.concurrent.TimeUnit)", "public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["boolean", "org.eclipse.jetty.util.BlockingArrayQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue.remainingCapacity()", "public int remainingCapacity()"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue.drainTo(java.util.Collection<? super E>)", "public int drainTo(java.util.Collection<? super E>)"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue.drainTo(java.util.Collection<? super E>, int)", "public int drainTo(java.util.Collection<? super E>, int)"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.get(int)", "public E get(int)"], ["void", "org.eclipse.jetty.util.BlockingArrayQueue.add(int, E)", "public void add(int, E)"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.set(int, E)", "public E set(int, E)"], ["E", "org.eclipse.jetty.util.BlockingArrayQueue.remove(int)", "public E remove(int)"], ["java.util.ListIterator<E>", "org.eclipse.jetty.util.BlockingArrayQueue.listIterator(int)", "public java.util.ListIterator<E> listIterator(int)"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue.getCapacity()", "public int getCapacity()"], ["int", "org.eclipse.jetty.util.BlockingArrayQueue.getMaxCapacity()", "public int getMaxCapacity()"], ["org.eclipse.jetty.util.BlockingCallback", "org.eclipse.jetty.util.BlockingCallback()", "public org.eclipse.jetty.util.BlockingCallback()"], ["void", "org.eclipse.jetty.util.BlockingCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.BlockingCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.BlockingCallback.block()", "public void block() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.BlockingCallback.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.BufferUtil", "org.eclipse.jetty.util.BufferUtil()", "public org.eclipse.jetty.util.BufferUtil()"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.allocate(int)", "public static java.nio.ByteBuffer allocate(int)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.allocateDirect(int)", "public static java.nio.ByteBuffer allocateDirect(int)"], ["void", "org.eclipse.jetty.util.BufferUtil.clear(java.nio.ByteBuffer)", "public static void clear(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.util.BufferUtil.clearToFill(java.nio.ByteBuffer)", "public static void clearToFill(java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.flipToFill(java.nio.ByteBuffer)", "public static int flipToFill(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.util.BufferUtil.flipToFlush(java.nio.ByteBuffer, int)", "public static void flipToFlush(java.nio.ByteBuffer, int)"], ["byte[]", "org.eclipse.jetty.util.BufferUtil.toArray(java.nio.ByteBuffer)", "public static byte[] toArray(java.nio.ByteBuffer)"], ["boolean", "org.eclipse.jetty.util.BufferUtil.isEmpty(java.nio.ByteBuffer)", "public static boolean isEmpty(java.nio.ByteBuffer)"], ["boolean", "org.eclipse.jetty.util.BufferUtil.hasContent(java.nio.ByteBuffer)", "public static boolean hasContent(java.nio.ByteBuffer)"], ["boolean", "org.eclipse.jetty.util.BufferUtil.isFull(java.nio.ByteBuffer)", "public static boolean isFull(java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.length(java.nio.ByteBuffer)", "public static int length(java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.space(java.nio.ByteBuffer)", "public static int space(java.nio.ByteBuffer)"], ["boolean", "org.eclipse.jetty.util.BufferUtil.compact(java.nio.ByteBuffer)", "public static boolean compact(java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.put(java.nio.ByteBuffer, java.nio.ByteBuffer)", "public static int put(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.flipPutFlip(java.nio.ByteBuffer, java.nio.ByteBuffer)", "public static int flipPutFlip(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.util.BufferUtil.append(java.nio.ByteBuffer, byte[], int, int)", "public static void append(java.nio.ByteBuffer, byte[], int, int) throws java.nio.BufferOverflowException"], ["void", "org.eclipse.jetty.util.BufferUtil.append(java.nio.ByteBuffer, byte)", "public static void append(java.nio.ByteBuffer, byte)"], ["int", "org.eclipse.jetty.util.BufferUtil.append(java.nio.ByteBuffer, java.nio.ByteBuffer)", "public static int append(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.fill(java.nio.ByteBuffer, byte[], int, int)", "public static int fill(java.nio.ByteBuffer, byte[], int, int)"], ["void", "org.eclipse.jetty.util.BufferUtil.readFrom(java.io.File, java.nio.ByteBuffer)", "public static void readFrom(java.io.File, java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.BufferUtil.readFrom(java.io.InputStream, int, java.nio.ByteBuffer)", "public static void readFrom(java.io.InputStream, int, java.nio.ByteBuffer) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.BufferUtil.writeTo(java.nio.ByteBuffer, java.io.OutputStream)", "public static void writeTo(java.nio.ByteBuffer, java.io.OutputStream) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toString(java.nio.ByteBuffer)", "public static java.lang.String toString(java.nio.ByteBuffer)"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toUTF8String(java.nio.ByteBuffer)", "public static java.lang.String toUTF8String(java.nio.ByteBuffer)"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toString(java.nio.ByteBuffer, java.nio.charset.Charset)", "public static java.lang.String toString(java.nio.ByteBuffer, java.nio.charset.Charset)"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toString(java.nio.ByteBuffer, int, int, java.nio.charset.Charset)", "public static java.lang.String toString(java.nio.ByteBuffer, int, int, java.nio.charset.Charset)"], ["int", "org.eclipse.jetty.util.BufferUtil.toInt(java.nio.ByteBuffer)", "public static int toInt(java.nio.ByteBuffer)"], ["int", "org.eclipse.jetty.util.BufferUtil.takeInt(java.nio.ByteBuffer)", "public static int takeInt(java.nio.ByteBuffer)"], ["long", "org.eclipse.jetty.util.BufferUtil.toLong(java.nio.ByteBuffer)", "public static long toLong(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.util.BufferUtil.putHexInt(java.nio.ByteBuffer, int)", "public static void putHexInt(java.nio.ByteBuffer, int)"], ["void", "org.eclipse.jetty.util.BufferUtil.putDecInt(java.nio.ByteBuffer, int)", "public static void putDecInt(java.nio.ByteBuffer, int)"], ["void", "org.eclipse.jetty.util.BufferUtil.putDecLong(java.nio.ByteBuffer, long)", "public static void putDecLong(java.nio.ByteBuffer, long)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(int)", "public static java.nio.ByteBuffer toBuffer(int)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(long)", "public static java.nio.ByteBuffer toBuffer(long)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(java.lang.String)", "public static java.nio.ByteBuffer toBuffer(java.lang.String)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toDirectBuffer(java.lang.String)", "public static java.nio.ByteBuffer toDirectBuffer(java.lang.String)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(java.lang.String, java.nio.charset.Charset)", "public static java.nio.ByteBuffer toBuffer(java.lang.String, java.nio.charset.Charset)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toDirectBuffer(java.lang.String, java.nio.charset.Charset)", "public static java.nio.ByteBuffer toDirectBuffer(java.lang.String, java.nio.charset.Charset)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(byte[])", "public static java.nio.ByteBuffer toBuffer(byte[])"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(byte[], int, int)", "public static java.nio.ByteBuffer toBuffer(byte[], int, int)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toMappedBuffer(java.io.File)", "public static java.nio.ByteBuffer toMappedBuffer(java.io.File) throws java.io.IOException"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.toBuffer(org.eclipse.jetty.util.resource.Resource, boolean)", "public static java.nio.ByteBuffer toBuffer(org.eclipse.jetty.util.resource.Resource, boolean) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toSummaryString(java.nio.ByteBuffer)", "public static java.lang.String toSummaryString(java.nio.ByteBuffer)"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toDetailString(java.nio.ByteBuffer[])", "public static java.lang.String toDetailString(java.nio.ByteBuffer[])"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toIDString(java.nio.ByteBuffer)", "public static java.lang.String toIDString(java.nio.ByteBuffer)"], ["java.lang.String", "org.eclipse.jetty.util.BufferUtil.toDetailString(java.nio.ByteBuffer)", "public static java.lang.String toDetailString(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.util.BufferUtil.putCRLF(java.nio.ByteBuffer)", "public static void putCRLF(java.nio.ByteBuffer)"], ["boolean", "org.eclipse.jetty.util.BufferUtil.isPrefix(java.nio.ByteBuffer, java.nio.ByteBuffer)", "public static boolean isPrefix(java.nio.ByteBuffer, java.nio.ByteBuffer)"], ["java.nio.ByteBuffer", "org.eclipse.jetty.util.BufferUtil.ensureCapacity(java.nio.ByteBuffer, int)", "public static java.nio.ByteBuffer ensureCapacity(java.nio.ByteBuffer, int)"], ["org.eclipse.jetty.util.ByteArrayISO8859Writer", "org.eclipse.jetty.util.ByteArrayISO8859Writer()", "public org.eclipse.jetty.util.ByteArrayISO8859Writer()"], ["org.eclipse.jetty.util.ByteArrayISO8859Writer", "org.eclipse.jetty.util.ByteArrayISO8859Writer(int)", "public org.eclipse.jetty.util.ByteArrayISO8859Writer(int)"], ["org.eclipse.jetty.util.ByteArrayISO8859Writer", "org.eclipse.jetty.util.ByteArrayISO8859Writer(byte[])", "public org.eclipse.jetty.util.ByteArrayISO8859Writer(byte[])"], ["java.lang.Object", "org.eclipse.jetty.util.ByteArrayISO8859Writer.getLock()", "public java.lang.Object getLock()"], ["int", "org.eclipse.jetty.util.ByteArrayISO8859Writer.size()", "public int size()"], ["int", "org.eclipse.jetty.util.ByteArrayISO8859Writer.capacity()", "public int capacity()"], ["int", "org.eclipse.jetty.util.ByteArrayISO8859Writer.spareCapacity()", "public int spareCapacity()"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.setLength(int)", "public void setLength(int)"], ["byte[]", "org.eclipse.jetty.util.ByteArrayISO8859Writer.getBuf()", "public byte[] getBuf()"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.writeTo(java.io.OutputStream)", "public void writeTo(java.io.OutputStream) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.write(char)", "public void write(char) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.write(char[])", "public void write(char[]) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.write(char[], int, int)", "public void write(char[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.flush()", "public void flush()"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.resetWriter()", "public void resetWriter()"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.close()", "public void close()"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.destroy()", "public void destroy()"], ["void", "org.eclipse.jetty.util.ByteArrayISO8859Writer.ensureSpareCapacity(int)", "public void ensureSpareCapacity(int) throws java.io.IOException"], ["byte[]", "org.eclipse.jetty.util.ByteArrayISO8859Writer.getByteArray()", "public byte[] getByteArray()"], ["org.eclipse.jetty.util.ByteArrayOutputStream2", "org.eclipse.jetty.util.ByteArrayOutputStream2()", "public org.eclipse.jetty.util.ByteArrayOutputStream2()"], ["org.eclipse.jetty.util.ByteArrayOutputStream2", "org.eclipse.jetty.util.ByteArrayOutputStream2(int)", "public org.eclipse.jetty.util.ByteArrayOutputStream2(int)"], ["byte[]", "org.eclipse.jetty.util.ByteArrayOutputStream2.getBuf()", "public byte[] getBuf()"], ["int", "org.eclipse.jetty.util.ByteArrayOutputStream2.getCount()", "public int getCount()"], ["void", "org.eclipse.jetty.util.ByteArrayOutputStream2.setCount(int)", "public void setCount(int)"], ["void", "org.eclipse.jetty.util.ByteArrayOutputStream2.reset(int)", "public void reset(int)"], ["void", "org.eclipse.jetty.util.ByteArrayOutputStream2.writeUnchecked(int)", "public void writeUnchecked(int)"], ["java.lang.String", "org.eclipse.jetty.util.ByteArrayOutputStream2.toString(java.nio.charset.Charset)", "public java.lang.String toString(java.nio.charset.Charset)"], ["org.eclipse.jetty.util.Callback$Adapter", "org.eclipse.jetty.util.Callback$Adapter()", "public org.eclipse.jetty.util.Callback$Adapter()"], ["void", "org.eclipse.jetty.util.Callback$Adapter.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.Callback$Adapter.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.util.ClassLoadingObjectInputStream", "org.eclipse.jetty.util.ClassLoadingObjectInputStream(java.io.InputStream)", "public org.eclipse.jetty.util.ClassLoadingObjectInputStream(java.io.InputStream) throws java.io.IOException"], ["org.eclipse.jetty.util.ClassLoadingObjectInputStream", "org.eclipse.jetty.util.ClassLoadingObjectInputStream()", "public org.eclipse.jetty.util.ClassLoadingObjectInputStream() throws java.io.IOException"], ["java.lang.Class<?>", "org.eclipse.jetty.util.ClassLoadingObjectInputStream.resolveClass(java.io.ObjectStreamClass)", "public java.lang.Class<?> resolveClass(java.io.ObjectStreamClass) throws java.io.IOException, java.lang.ClassNotFoundException"], ["org.eclipse.jetty.util.CompletableCallback$State[]", "org.eclipse.jetty.util.CompletableCallback$State.values()", "public static org.eclipse.jetty.util.CompletableCallback$State[] values()"], ["org.eclipse.jetty.util.CompletableCallback$State", "org.eclipse.jetty.util.CompletableCallback$State.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.CompletableCallback$State valueOf(java.lang.String)"], ["org.eclipse.jetty.util.CompletableCallback", "org.eclipse.jetty.util.CompletableCallback()", "public org.eclipse.jetty.util.CompletableCallback()"], ["void", "org.eclipse.jetty.util.CompletableCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.CompletableCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.CompletableCallback.tryComplete()", "public boolean tryComplete()"], ["org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener", "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener()", "public org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener()"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener.lifeCycleFailure(org.eclipse.jetty.util.component.LifeCycle, java.lang.Throwable)", "public void lifeCycleFailure(org.eclipse.jetty.util.component.LifeCycle, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener.lifeCycleStarted(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStarted(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener.lifeCycleStarting(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStarting(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener.lifeCycleStopped(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStopped(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle$AbstractLifeCycleListener.lifeCycleStopping(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStopping(org.eclipse.jetty.util.component.LifeCycle)"], ["org.eclipse.jetty.util.component.AbstractLifeCycle", "org.eclipse.jetty.util.component.AbstractLifeCycle()", "public org.eclipse.jetty.util.component.AbstractLifeCycle()"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle.start()", "public final void start() throws java.lang.Exception"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle.stop()", "public final void stop() throws java.lang.Exception"], ["boolean", "org.eclipse.jetty.util.component.AbstractLifeCycle.isRunning()", "public boolean isRunning()"], ["boolean", "org.eclipse.jetty.util.component.AbstractLifeCycle.isStarted()", "public boolean isStarted()"], ["boolean", "org.eclipse.jetty.util.component.AbstractLifeCycle.isStarting()", "public boolean isStarting()"], ["boolean", "org.eclipse.jetty.util.component.AbstractLifeCycle.isStopping()", "public boolean isStopping()"], ["boolean", "org.eclipse.jetty.util.component.AbstractLifeCycle.isStopped()", "public boolean isStopped()"], ["boolean", "org.eclipse.jetty.util.component.AbstractLifeCycle.isFailed()", "public boolean isFailed()"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle.addLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle$Listener)", "public void addLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle$Listener)"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle.removeLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle$Listener)", "public void removeLifeCycleListener(org.eclipse.jetty.util.component.LifeCycle$Listener)"], ["java.lang.String", "org.eclipse.jetty.util.component.AbstractLifeCycle.getState()", "public java.lang.String getState()"], ["java.lang.String", "org.eclipse.jetty.util.component.AbstractLifeCycle.getState(org.eclipse.jetty.util.component.LifeCycle)", "public static java.lang.String getState(org.eclipse.jetty.util.component.LifeCycle)"], ["long", "org.eclipse.jetty.util.component.AbstractLifeCycle.getStopTimeout()", "public long getStopTimeout()"], ["void", "org.eclipse.jetty.util.component.AbstractLifeCycle.setStopTimeout(long)", "public void setStopTimeout(long)"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle$Bean.isManaged()", "public boolean isManaged()"], ["java.lang.String", "org.eclipse.jetty.util.component.ContainerLifeCycle$Bean.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.component.ContainerLifeCycle$Managed[]", "org.eclipse.jetty.util.component.ContainerLifeCycle$Managed.values()", "public static org.eclipse.jetty.util.component.ContainerLifeCycle$Managed[] values()"], ["org.eclipse.jetty.util.component.ContainerLifeCycle$Managed", "org.eclipse.jetty.util.component.ContainerLifeCycle$Managed.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.component.ContainerLifeCycle$Managed valueOf(java.lang.String)"], ["org.eclipse.jetty.util.component.ContainerLifeCycle", "org.eclipse.jetty.util.component.ContainerLifeCycle()", "public org.eclipse.jetty.util.component.ContainerLifeCycle()"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.destroy()", "public void destroy()"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle.isManaged(java.lang.Object)", "public boolean isManaged(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(java.lang.Object)", "public boolean addBean(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(java.lang.Object, boolean)", "public boolean addBean(java.lang.Object, boolean)"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(java.lang.Object, org.eclipse.jetty.util.component.ContainerLifeCycle$Managed)", "public boolean addBean(java.lang.Object, org.eclipse.jetty.util.component.ContainerLifeCycle$Managed)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.addManaged(org.eclipse.jetty.util.component.LifeCycle)", "public void addManaged(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.addEventListener(org.eclipse.jetty.util.component.Container$Listener)", "public void addEventListener(org.eclipse.jetty.util.component.Container$Listener)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.manage(java.lang.Object)", "public void manage(java.lang.Object)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.unmanage(java.lang.Object)", "public void unmanage(java.lang.Object)"], ["java.util.Collection<java.lang.Object>", "org.eclipse.jetty.util.component.ContainerLifeCycle.getBeans()", "public java.util.Collection<java.lang.Object> getBeans()"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.setBeans(java.util.Collection<java.lang.Object>)", "public void setBeans(java.util.Collection<java.lang.Object>)"], ["<T> java.util.Collection<T>", "org.eclipse.jetty.util.component.ContainerLifeCycle.getBeans(java.lang.Class<T>)", "public <T> java.util.Collection<T> getBeans(java.lang.Class<T>)"], ["<T> T", "org.eclipse.jetty.util.component.ContainerLifeCycle.getBean(java.lang.Class<T>)", "public <T> T getBean(java.lang.Class<T>)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.removeBeans()", "public void removeBeans()"], ["boolean", "org.eclipse.jetty.util.component.ContainerLifeCycle.removeBean(java.lang.Object)", "public boolean removeBean(java.lang.Object)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.removeEventListener(org.eclipse.jetty.util.component.Container$Listener)", "public void removeEventListener(org.eclipse.jetty.util.component.Container$Listener)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.setStopTimeout(long)", "public void setStopTimeout(long)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.dumpStdErr()", "public void dumpStdErr()"], ["java.lang.String", "org.eclipse.jetty.util.component.ContainerLifeCycle.dump()", "public java.lang.String dump()"], ["java.lang.String", "org.eclipse.jetty.util.component.ContainerLifeCycle.dump(org.eclipse.jetty.util.component.Dumpable)", "public static java.lang.String dump(org.eclipse.jetty.util.component.Dumpable)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.dump(java.lang.Appendable)", "public void dump(java.lang.Appendable) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.dumpObject(java.lang.Appendable, java.lang.Object)", "public static void dumpObject(java.lang.Appendable, java.lang.Object) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.dump(java.lang.Appendable, java.lang.String, java.util.Collection<?>...)", "public static void dump(java.lang.Appendable, java.lang.String, java.util.Collection<?>...) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.updateBean(java.lang.Object, java.lang.Object)", "public void updateBean(java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.component.ContainerLifeCycle.updateBeans(java.lang.Object[], java.lang.Object[])", "public void updateBeans(java.lang.Object[], java.lang.Object[])"], ["org.eclipse.jetty.util.component.FileDestroyable", "org.eclipse.jetty.util.component.FileDestroyable()", "public org.eclipse.jetty.util.component.FileDestroyable()"], ["org.eclipse.jetty.util.component.FileDestroyable", "org.eclipse.jetty.util.component.FileDestroyable(java.lang.String)", "public org.eclipse.jetty.util.component.FileDestroyable(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.util.component.FileDestroyable", "org.eclipse.jetty.util.component.FileDestroyable(java.io.File)", "public org.eclipse.jetty.util.component.FileDestroyable(java.io.File)"], ["void", "org.eclipse.jetty.util.component.FileDestroyable.addFile(java.lang.String)", "public void addFile(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.component.FileDestroyable.addFile(java.io.File)", "public void addFile(java.io.File)"], ["void", "org.eclipse.jetty.util.component.FileDestroyable.addFiles(java.util.Collection<java.io.File>)", "public void addFiles(java.util.Collection<java.io.File>)"], ["void", "org.eclipse.jetty.util.component.FileDestroyable.removeFile(java.lang.String)", "public void removeFile(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.component.FileDestroyable.removeFile(java.io.File)", "public void removeFile(java.io.File)"], ["void", "org.eclipse.jetty.util.component.FileDestroyable.destroy()", "public void destroy()"], ["org.eclipse.jetty.util.component.FileNoticeLifeCycleListener", "org.eclipse.jetty.util.component.FileNoticeLifeCycleListener(java.lang.String)", "public org.eclipse.jetty.util.component.FileNoticeLifeCycleListener(java.lang.String)"], ["void", "org.eclipse.jetty.util.component.FileNoticeLifeCycleListener.lifeCycleStarting(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStarting(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.FileNoticeLifeCycleListener.lifeCycleStarted(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStarted(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.FileNoticeLifeCycleListener.lifeCycleFailure(org.eclipse.jetty.util.component.LifeCycle, java.lang.Throwable)", "public void lifeCycleFailure(org.eclipse.jetty.util.component.LifeCycle, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.component.FileNoticeLifeCycleListener.lifeCycleStopping(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStopping(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.component.FileNoticeLifeCycleListener.lifeCycleStopped(org.eclipse.jetty.util.component.LifeCycle)", "public void lifeCycleStopped(org.eclipse.jetty.util.component.LifeCycle)"], ["java.lang.String", "org.eclipse.jetty.util.ConcurrentArrayQueue$1.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue$2.hasNext()", "public boolean hasNext()"], ["T", "org.eclipse.jetty.util.ConcurrentArrayQueue$2.next()", "public T next()"], ["void", "org.eclipse.jetty.util.ConcurrentArrayQueue$2.remove()", "public void remove()"], ["E", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.peek(int)", "public E peek(int)"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.store(int, E)", "public boolean store(int, E)"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.remove(int, java.lang.Object, boolean)", "public boolean remove(int, java.lang.Object, boolean)"], ["org.eclipse.jetty.util.ConcurrentArrayQueue$Block<E>", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.next()", "public org.eclipse.jetty.util.ConcurrentArrayQueue$Block<E> next()"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.link(org.eclipse.jetty.util.ConcurrentArrayQueue$Block<E>)", "public boolean link(org.eclipse.jetty.util.ConcurrentArrayQueue$Block<E>)"], ["int", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.head()", "public int head()"], ["int", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.tail()", "public int tail()"], ["java.lang.Object[]", "org.eclipse.jetty.util.ConcurrentArrayQueue$Block.arrayCopy()", "public java.lang.Object[] arrayCopy()"], ["org.eclipse.jetty.util.ConcurrentArrayQueue", "org.eclipse.jetty.util.ConcurrentArrayQueue()", "public org.eclipse.jetty.util.ConcurrentArrayQueue()"], ["org.eclipse.jetty.util.ConcurrentArrayQueue", "org.eclipse.jetty.util.ConcurrentArrayQueue(int)", "public org.eclipse.jetty.util.ConcurrentArrayQueue(int)"], ["int", "org.eclipse.jetty.util.ConcurrentArrayQueue.getBlockSize()", "public int getBlockSize()"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue.offer(T)", "public boolean offer(T)"], ["T", "org.eclipse.jetty.util.ConcurrentArrayQueue.poll()", "public T poll()"], ["T", "org.eclipse.jetty.util.ConcurrentArrayQueue.peek()", "public T peek()"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.eclipse.jetty.util.ConcurrentArrayQueue.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Iterator<T>", "org.eclipse.jetty.util.ConcurrentArrayQueue.iterator()", "public java.util.Iterator<T> iterator()"], ["int", "org.eclipse.jetty.util.ConcurrentArrayQueue.size()", "public int size()"], ["org.eclipse.jetty.util.ConcurrentHashSet", "org.eclipse.jetty.util.ConcurrentHashSet()", "public org.eclipse.jetty.util.ConcurrentHashSet()"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.add(E)", "public boolean add(E)"], ["void", "org.eclipse.jetty.util.ConcurrentHashSet.clear()", "public void clear()"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.eclipse.jetty.util.ConcurrentHashSet.hashCode()", "public int hashCode()"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<E>", "org.eclipse.jetty.util.ConcurrentHashSet.iterator()", "public java.util.Iterator<E> iterator()"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.eclipse.jetty.util.ConcurrentHashSet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["int", "org.eclipse.jetty.util.ConcurrentHashSet.size()", "public int size()"], ["java.lang.Object[]", "org.eclipse.jetty.util.ConcurrentHashSet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.eclipse.jetty.util.ConcurrentHashSet.toArray(T[])", "public <T> T[] toArray(T[])"], ["java.lang.String", "org.eclipse.jetty.util.ConcurrentHashSet.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.ConstantThrowable", "org.eclipse.jetty.util.ConstantThrowable()", "public org.eclipse.jetty.util.ConstantThrowable()"], ["org.eclipse.jetty.util.ConstantThrowable", "org.eclipse.jetty.util.ConstantThrowable(java.lang.String)", "public org.eclipse.jetty.util.ConstantThrowable(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ConstantThrowable.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.CountingCallback", "org.eclipse.jetty.util.CountingCallback(org.eclipse.jetty.util.Callback, int)", "public org.eclipse.jetty.util.CountingCallback(org.eclipse.jetty.util.Callback, int)"], ["void", "org.eclipse.jetty.util.CountingCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.CountingCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.util.CountingCallback.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.DateCache$Tick", "org.eclipse.jetty.util.DateCache$Tick(long, java.lang.String)", "public org.eclipse.jetty.util.DateCache$Tick(long, java.lang.String)"], ["org.eclipse.jetty.util.DateCache", "org.eclipse.jetty.util.DateCache()", "public org.eclipse.jetty.util.DateCache()"], ["org.eclipse.jetty.util.DateCache", "org.eclipse.jetty.util.DateCache(java.lang.String)", "public org.eclipse.jetty.util.DateCache(java.lang.String)"], ["org.eclipse.jetty.util.DateCache", "org.eclipse.jetty.util.DateCache(java.lang.String, java.util.Locale)", "public org.eclipse.jetty.util.DateCache(java.lang.String, java.util.Locale)"], ["org.eclipse.jetty.util.DateCache", "org.eclipse.jetty.util.DateCache(java.lang.String, java.util.Locale, java.lang.String)", "public org.eclipse.jetty.util.DateCache(java.lang.String, java.util.Locale, java.lang.String)"], ["org.eclipse.jetty.util.DateCache", "org.eclipse.jetty.util.DateCache(java.lang.String, java.util.Locale, java.util.TimeZone)", "public org.eclipse.jetty.util.DateCache(java.lang.String, java.util.Locale, java.util.TimeZone)"], ["java.util.TimeZone", "org.eclipse.jetty.util.DateCache.getTimeZone()", "public java.util.TimeZone getTimeZone()"], ["java.lang.String", "org.eclipse.jetty.util.DateCache.format(java.util.Date)", "public java.lang.String format(java.util.Date)"], ["java.lang.String", "org.eclipse.jetty.util.DateCache.format(long)", "public java.lang.String format(long)"], ["java.lang.String", "org.eclipse.jetty.util.DateCache.formatNow(long)", "public java.lang.String formatNow(long)"], ["java.lang.String", "org.eclipse.jetty.util.DateCache.now()", "public java.lang.String now()"], ["org.eclipse.jetty.util.DateCache$Tick", "org.eclipse.jetty.util.DateCache.tick()", "public org.eclipse.jetty.util.DateCache$Tick tick()"], ["java.lang.String", "org.eclipse.jetty.util.DateCache.getFormatString()", "public java.lang.String getFormatString()"], ["org.eclipse.jetty.util.Fields$Field", "org.eclipse.jetty.util.Fields$Field(java.lang.String, java.lang.String)", "public org.eclipse.jetty.util.Fields$Field(java.lang.String, java.lang.String)"], ["boolean", "org.eclipse.jetty.util.Fields$Field.equals(org.eclipse.jetty.util.Fields$Field, boolean)", "public boolean equals(org.eclipse.jetty.util.Fields$Field, boolean)"], ["boolean", "org.eclipse.jetty.util.Fields$Field.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.eclipse.jetty.util.Fields$Field.hashCode()", "public int hashCode()"], ["java.lang.String", "org.eclipse.jetty.util.Fields$Field.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.eclipse.jetty.util.Fields$Field.getValue()", "public java.lang.String getValue()"], ["java.lang.Integer", "org.eclipse.jetty.util.Fields$Field.getValueAsInt()", "public java.lang.Integer getValueAsInt()"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.util.Fields$Field.getValues()", "public java.util.List<java.lang.String> getValues()"], ["boolean", "org.eclipse.jetty.util.Fields$Field.hasMultipleValues()", "public boolean hasMultipleValues()"], ["java.lang.String", "org.eclipse.jetty.util.Fields$Field.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.Fields", "org.eclipse.jetty.util.Fields()", "public org.eclipse.jetty.util.Fields()"], ["org.eclipse.jetty.util.Fields", "org.eclipse.jetty.util.Fields(boolean)", "public org.eclipse.jetty.util.Fields(boolean)"], ["org.eclipse.jetty.util.Fields", "org.eclipse.jetty.util.Fields(org.eclipse.jetty.util.Fields, boolean)", "public org.eclipse.jetty.util.Fields(org.eclipse.jetty.util.Fields, boolean)"], ["boolean", "org.eclipse.jetty.util.Fields.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.eclipse.jetty.util.Fields.hashCode()", "public int hashCode()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.util.Fields.getNames()", "public java.util.Set<java.lang.String> getNames()"], ["org.eclipse.jetty.util.Fields$Field", "org.eclipse.jetty.util.Fields.get(java.lang.String)", "public org.eclipse.jetty.util.Fields$Field get(java.lang.String)"], ["void", "org.eclipse.jetty.util.Fields.put(java.lang.String, java.lang.String)", "public void put(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.util.Fields.put(org.eclipse.jetty.util.Fields$Field)", "public void put(org.eclipse.jetty.util.Fields$Field)"], ["void", "org.eclipse.jetty.util.Fields.add(java.lang.String, java.lang.String)", "public void add(java.lang.String, java.lang.String)"], ["org.eclipse.jetty.util.Fields$Field", "org.eclipse.jetty.util.Fields.remove(java.lang.String)", "public org.eclipse.jetty.util.Fields$Field remove(java.lang.String)"], ["void", "org.eclipse.jetty.util.Fields.clear()", "public void clear()"], ["boolean", "org.eclipse.jetty.util.Fields.isEmpty()", "public boolean isEmpty()"], ["int", "org.eclipse.jetty.util.Fields.getSize()", "public int getSize()"], ["java.util.Iterator<org.eclipse.jetty.util.Fields$Field>", "org.eclipse.jetty.util.Fields.iterator()", "public java.util.Iterator<org.eclipse.jetty.util.Fields$Field> iterator()"], ["java.lang.String", "org.eclipse.jetty.util.Fields.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.FutureCallback", "org.eclipse.jetty.util.FutureCallback()", "public org.eclipse.jetty.util.FutureCallback()"], ["org.eclipse.jetty.util.FutureCallback", "org.eclipse.jetty.util.FutureCallback(boolean)", "public org.eclipse.jetty.util.FutureCallback(boolean)"], ["org.eclipse.jetty.util.FutureCallback", "org.eclipse.jetty.util.FutureCallback(java.lang.Throwable)", "public org.eclipse.jetty.util.FutureCallback(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.FutureCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.FutureCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.FutureCallback.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.eclipse.jetty.util.FutureCallback.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.eclipse.jetty.util.FutureCallback.isDone()", "public boolean isDone()"], ["java.lang.Void", "org.eclipse.jetty.util.FutureCallback.get()", "public java.lang.Void get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["java.lang.Void", "org.eclipse.jetty.util.FutureCallback.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Void get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "org.eclipse.jetty.util.FutureCallback.rethrow(java.util.concurrent.ExecutionException)", "public static void rethrow(java.util.concurrent.ExecutionException) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.FutureCallback.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.eclipse.jetty.util.FutureCallback.get(long, java.util.concurrent.TimeUnit)", "public java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["java.lang.Object", "org.eclipse.jetty.util.FutureCallback.get()", "public java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["org.eclipse.jetty.util.FuturePromise", "org.eclipse.jetty.util.FuturePromise()", "public org.eclipse.jetty.util.FuturePromise()"], ["org.eclipse.jetty.util.FuturePromise", "org.eclipse.jetty.util.FuturePromise(C)", "public org.eclipse.jetty.util.FuturePromise(C)"], ["org.eclipse.jetty.util.FuturePromise", "org.eclipse.jetty.util.FuturePromise(C, java.lang.Throwable)", "public org.eclipse.jetty.util.FuturePromise(C, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.FuturePromise.succeeded(C)", "public void succeeded(C)"], ["void", "org.eclipse.jetty.util.FuturePromise.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.FuturePromise.cancel(boolean)", "public boolean cancel(boolean)"], ["boolean", "org.eclipse.jetty.util.FuturePromise.isCancelled()", "public boolean isCancelled()"], ["boolean", "org.eclipse.jetty.util.FuturePromise.isDone()", "public boolean isDone()"], ["C", "org.eclipse.jetty.util.FuturePromise.get()", "public C get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException"], ["C", "org.eclipse.jetty.util.FuturePromise.get(long, java.util.concurrent.TimeUnit)", "public C get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException"], ["void", "org.eclipse.jetty.util.FuturePromise.rethrow(java.util.concurrent.ExecutionException)", "public static void rethrow(java.util.concurrent.ExecutionException) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.FuturePromise.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.HostMap", "org.eclipse.jetty.util.HostMap()", "public org.eclipse.jetty.util.HostMap()"], ["org.eclipse.jetty.util.HostMap", "org.eclipse.jetty.util.HostMap(int)", "public org.eclipse.jetty.util.HostMap(int)"], ["TYPE", "org.eclipse.jetty.util.HostMap.put(java.lang.String, TYPE)", "public TYPE put(java.lang.String, TYPE) throws java.lang.IllegalArgumentException"], ["TYPE", "org.eclipse.jetty.util.HostMap.get(java.lang.Object)", "public TYPE get(java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.HostMap.getLazyMatches(java.lang.String)", "public java.lang.Object getLazyMatches(java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.util.HostMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["org.eclipse.jetty.util.HostPort", "org.eclipse.jetty.util.HostPort(java.lang.String)", "public org.eclipse.jetty.util.HostPort(java.lang.String) throws java.lang.IllegalArgumentException"], ["java.lang.String", "org.eclipse.jetty.util.HostPort.getHost()", "public java.lang.String getHost()"], ["int", "org.eclipse.jetty.util.HostPort.getPort()", "public int getPort()"], ["int", "org.eclipse.jetty.util.HostPort.getPort(int)", "public int getPort(int)"], ["java.lang.String", "org.eclipse.jetty.util.HostPort.normalizeHost(java.lang.String)", "public static java.lang.String normalizeHost(java.lang.String)"], ["org.eclipse.jetty.util.HttpCookieStore$Empty", "org.eclipse.jetty.util.HttpCookieStore$Empty()", "public org.eclipse.jetty.util.HttpCookieStore$Empty()"], ["void", "org.eclipse.jetty.util.HttpCookieStore$Empty.add(java.net.URI, java.net.HttpCookie)", "public void add(java.net.URI, java.net.HttpCookie)"], ["java.util.List<java.net.HttpCookie>", "org.eclipse.jetty.util.HttpCookieStore$Empty.get(java.net.URI)", "public java.util.List<java.net.HttpCookie> get(java.net.URI)"], ["java.util.List<java.net.HttpCookie>", "org.eclipse.jetty.util.HttpCookieStore$Empty.getCookies()", "public java.util.List<java.net.HttpCookie> getCookies()"], ["java.util.List<java.net.URI>", "org.eclipse.jetty.util.HttpCookieStore$Empty.getURIs()", "public java.util.List<java.net.URI> getURIs()"], ["boolean", "org.eclipse.jetty.util.HttpCookieStore$Empty.remove(java.net.URI, java.net.HttpCookie)", "public boolean remove(java.net.URI, java.net.HttpCookie)"], ["boolean", "org.eclipse.jetty.util.HttpCookieStore$Empty.removeAll()", "public boolean removeAll()"], ["org.eclipse.jetty.util.HttpCookieStore", "org.eclipse.jetty.util.HttpCookieStore()", "public org.eclipse.jetty.util.HttpCookieStore()"], ["void", "org.eclipse.jetty.util.HttpCookieStore.add(java.net.URI, java.net.HttpCookie)", "public void add(java.net.URI, java.net.HttpCookie)"], ["java.util.List<java.net.HttpCookie>", "org.eclipse.jetty.util.HttpCookieStore.get(java.net.URI)", "public java.util.List<java.net.HttpCookie> get(java.net.URI)"], ["java.util.List<java.net.HttpCookie>", "org.eclipse.jetty.util.HttpCookieStore.getCookies()", "public java.util.List<java.net.HttpCookie> getCookies()"], ["java.util.List<java.net.URI>", "org.eclipse.jetty.util.HttpCookieStore.getURIs()", "public java.util.List<java.net.URI> getURIs()"], ["boolean", "org.eclipse.jetty.util.HttpCookieStore.remove(java.net.URI, java.net.HttpCookie)", "public boolean remove(java.net.URI, java.net.HttpCookie)"], ["boolean", "org.eclipse.jetty.util.HttpCookieStore.removeAll()", "public boolean removeAll()"], ["org.eclipse.jetty.util.IncludeExclude", "org.eclipse.jetty.util.IncludeExclude()", "public org.eclipse.jetty.util.IncludeExclude()"], ["<SET extends java.util.Set<ITEM>>", "org.eclipse.jetty.util.IncludeExclude.org.eclipse.jetty.util.IncludeExclude(java.lang.Class<SET>)", "public <SET extends java.util.Set<ITEM>> org.eclipse.jetty.util.IncludeExclude(java.lang.Class<SET>)"], ["<SET extends java.util.Set<ITEM>>", "org.eclipse.jetty.util.IncludeExclude.org.eclipse.jetty.util.IncludeExclude(java.util.Set<ITEM>, org.eclipse.jetty.util.Predicate<ITEM>, java.util.Set<ITEM>, org.eclipse.jetty.util.Predicate<ITEM>)", "public <SET extends java.util.Set<ITEM>> org.eclipse.jetty.util.IncludeExclude(java.util.Set<ITEM>, org.eclipse.jetty.util.Predicate<ITEM>, java.util.Set<ITEM>, org.eclipse.jetty.util.Predicate<ITEM>)"], ["org.eclipse.jetty.util.IncludeExcludeSet$SetContainsPredicate", "org.eclipse.jetty.util.IncludeExcludeSet$SetContainsPredicate(java.util.Set<T>)", "public org.eclipse.jetty.util.IncludeExcludeSet$SetContainsPredicate(java.util.Set<T>)"], ["boolean", "org.eclipse.jetty.util.IncludeExcludeSet$SetContainsPredicate.test(T)", "public boolean test(T)"], ["org.eclipse.jetty.util.IncludeExcludeSet", "org.eclipse.jetty.util.IncludeExcludeSet()", "public org.eclipse.jetty.util.IncludeExcludeSet()"], ["<SET extends java.util.Set<P>>", "org.eclipse.jetty.util.IncludeExcludeSet.org.eclipse.jetty.util.IncludeExcludeSet(java.lang.Class<SET>)", "public <SET extends java.util.Set<P>> org.eclipse.jetty.util.IncludeExcludeSet(java.lang.Class<SET>)"], ["<SET extends java.util.Set<P>>", "org.eclipse.jetty.util.IncludeExcludeSet.org.eclipse.jetty.util.IncludeExcludeSet(java.util.Set<P>, org.eclipse.jetty.util.Predicate<T>, java.util.Set<P>, org.eclipse.jetty.util.Predicate<T>)", "public <SET extends java.util.Set<P>> org.eclipse.jetty.util.IncludeExcludeSet(java.util.Set<P>, org.eclipse.jetty.util.Predicate<T>, java.util.Set<P>, org.eclipse.jetty.util.Predicate<T>)"], ["void", "org.eclipse.jetty.util.IncludeExcludeSet.include(P)", "public void include(P)"], ["void", "org.eclipse.jetty.util.IncludeExcludeSet.include(P...)", "public void include(P...)"], ["void", "org.eclipse.jetty.util.IncludeExcludeSet.exclude(P)", "public void exclude(P)"], ["void", "org.eclipse.jetty.util.IncludeExcludeSet.exclude(P...)", "public void exclude(P...)"], ["boolean", "org.eclipse.jetty.util.IncludeExcludeSet.matches(T)", "public boolean matches(T)"], ["boolean", "org.eclipse.jetty.util.IncludeExcludeSet.test(T)", "public boolean test(T)"], ["int", "org.eclipse.jetty.util.IncludeExcludeSet.size()", "public int size()"], ["java.util.Set<P>", "org.eclipse.jetty.util.IncludeExcludeSet.getIncluded()", "public java.util.Set<P> getIncluded()"], ["java.util.Set<P>", "org.eclipse.jetty.util.IncludeExcludeSet.getExcluded()", "public java.util.Set<P> getExcluded()"], ["void", "org.eclipse.jetty.util.IncludeExcludeSet.clear()", "public void clear()"], ["java.lang.String", "org.eclipse.jetty.util.IncludeExcludeSet.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.InetAddressSet$CidrInetRange", "org.eclipse.jetty.util.InetAddressSet$CidrInetRange(java.lang.String, java.net.InetAddress, int)", "public org.eclipse.jetty.util.InetAddressSet$CidrInetRange(java.lang.String, java.net.InetAddress, int)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet$CidrInetRange.test(java.net.InetAddress, byte[])", "public boolean test(java.net.InetAddress, byte[])"], ["java.lang.String", "org.eclipse.jetty.util.InetAddressSet$InetPattern.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.InetAddressSet$LegacyInetRange", "org.eclipse.jetty.util.InetAddressSet$LegacyInetRange(java.lang.String)", "public org.eclipse.jetty.util.InetAddressSet$LegacyInetRange(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet$LegacyInetRange.test(java.net.InetAddress, byte[])", "public boolean test(java.net.InetAddress, byte[])"], ["org.eclipse.jetty.util.InetAddressSet$MinMaxInetRange", "org.eclipse.jetty.util.InetAddressSet$MinMaxInetRange(java.lang.String, java.net.InetAddress, java.net.InetAddress)", "public org.eclipse.jetty.util.InetAddressSet$MinMaxInetRange(java.lang.String, java.net.InetAddress, java.net.InetAddress)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet$MinMaxInetRange.test(java.net.InetAddress, byte[])", "public boolean test(java.net.InetAddress, byte[])"], ["org.eclipse.jetty.util.InetAddressSet$SingletonInetRange", "org.eclipse.jetty.util.InetAddressSet$SingletonInetRange(java.lang.String, java.net.InetAddress)", "public org.eclipse.jetty.util.InetAddressSet$SingletonInetRange(java.lang.String, java.net.InetAddress)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet$SingletonInetRange.test(java.net.InetAddress, byte[])", "public boolean test(java.net.InetAddress, byte[])"], ["org.eclipse.jetty.util.InetAddressSet", "org.eclipse.jetty.util.InetAddressSet()", "public org.eclipse.jetty.util.InetAddressSet()"], ["boolean", "org.eclipse.jetty.util.InetAddressSet.add(java.lang.String)", "public boolean add(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["java.util.Iterator<java.lang.String>", "org.eclipse.jetty.util.InetAddressSet.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["int", "org.eclipse.jetty.util.InetAddressSet.size()", "public int size()"], ["boolean", "org.eclipse.jetty.util.InetAddressSet.test(java.net.InetAddress)", "public boolean test(java.net.InetAddress)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.InetAddressSet.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["org.eclipse.jetty.util.IntrospectionUtil", "org.eclipse.jetty.util.IntrospectionUtil()", "public org.eclipse.jetty.util.IntrospectionUtil()"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.isJavaBeanCompliantSetter(java.lang.reflect.Method)", "public static boolean isJavaBeanCompliantSetter(java.lang.reflect.Method)"], ["java.lang.reflect.Method", "org.eclipse.jetty.util.IntrospectionUtil.findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>[], boolean, boolean)", "public static java.lang.reflect.Method findMethod(java.lang.Class<?>, java.lang.String, java.lang.Class<?>[], boolean, boolean) throws java.lang.NoSuchMethodException"], ["java.lang.reflect.Field", "org.eclipse.jetty.util.IntrospectionUtil.findField(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, boolean, boolean)", "public static java.lang.reflect.Field findField(java.lang.Class<?>, java.lang.String, java.lang.Class<?>, boolean, boolean) throws java.lang.NoSuchFieldException"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.isInheritable(java.lang.Package, java.lang.reflect.Member)", "public static boolean isInheritable(java.lang.Package, java.lang.reflect.Member)"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.checkParams(java.lang.Class<?>[], java.lang.Class<?>[], boolean)", "public static boolean checkParams(java.lang.Class<?>[], java.lang.Class<?>[], boolean)"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.isSameSignature(java.lang.reflect.Method, java.lang.reflect.Method)", "public static boolean isSameSignature(java.lang.reflect.Method, java.lang.reflect.Method)"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.isTypeCompatible(java.lang.Class<?>, java.lang.Class<?>, boolean)", "public static boolean isTypeCompatible(java.lang.Class<?>, java.lang.Class<?>, boolean)"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.containsSameMethodSignature(java.lang.reflect.Method, java.lang.Class<?>, boolean)", "public static boolean containsSameMethodSignature(java.lang.reflect.Method, java.lang.Class<?>, boolean)"], ["boolean", "org.eclipse.jetty.util.IntrospectionUtil.containsSameFieldName(java.lang.reflect.Field, java.lang.Class<?>, boolean)", "public static boolean containsSameFieldName(java.lang.reflect.Field, java.lang.Class<?>, boolean)"], ["int", "org.eclipse.jetty.util.IO$ClosedIS.read()", "public int read() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO$Job.run()", "public void run()"], ["void", "org.eclipse.jetty.util.IO$NullOS.close()", "public void close()"], ["void", "org.eclipse.jetty.util.IO$NullOS.flush()", "public void flush()"], ["void", "org.eclipse.jetty.util.IO$NullOS.write(byte[])", "public void write(byte[])"], ["void", "org.eclipse.jetty.util.IO$NullOS.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "org.eclipse.jetty.util.IO$NullOS.write(int)", "public void write(int)"], ["void", "org.eclipse.jetty.util.IO$NullWrite.close()", "public void close()"], ["void", "org.eclipse.jetty.util.IO$NullWrite.flush()", "public void flush()"], ["void", "org.eclipse.jetty.util.IO$NullWrite.write(char[])", "public void write(char[])"], ["void", "org.eclipse.jetty.util.IO$NullWrite.write(char[], int, int)", "public void write(char[], int, int)"], ["void", "org.eclipse.jetty.util.IO$NullWrite.write(int)", "public void write(int)"], ["void", "org.eclipse.jetty.util.IO$NullWrite.write(java.lang.String)", "public void write(java.lang.String)"], ["void", "org.eclipse.jetty.util.IO$NullWrite.write(java.lang.String, int, int)", "public void write(java.lang.String, int, int)"], ["org.eclipse.jetty.util.IO", "org.eclipse.jetty.util.IO()", "public org.eclipse.jetty.util.IO()"], ["void", "org.eclipse.jetty.util.IO.copy(java.io.InputStream, java.io.OutputStream)", "public static void copy(java.io.InputStream, java.io.OutputStream) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.copy(java.io.Reader, java.io.Writer)", "public static void copy(java.io.Reader, java.io.Writer) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.copy(java.io.InputStream, java.io.OutputStream, long)", "public static void copy(java.io.InputStream, java.io.OutputStream, long) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.copy(java.io.Reader, java.io.Writer, long)", "public static void copy(java.io.Reader, java.io.Writer, long) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.copy(java.io.File, java.io.File)", "public static void copy(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.copyDir(java.io.File, java.io.File)", "public static void copyDir(java.io.File, java.io.File) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.copyFile(java.io.File, java.io.File)", "public static void copyFile(java.io.File, java.io.File) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.IO.toString(java.io.InputStream)", "public static java.lang.String toString(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.IO.toString(java.io.InputStream, java.lang.String)", "public static java.lang.String toString(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.IO.toString(java.io.InputStream, java.nio.charset.Charset)", "public static java.lang.String toString(java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.IO.toString(java.io.Reader)", "public static java.lang.String toString(java.io.Reader) throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.IO.delete(java.io.File)", "public static boolean delete(java.io.File)"], ["void", "org.eclipse.jetty.util.IO.close(java.io.InputStream)", "public static void close(java.io.InputStream)"], ["void", "org.eclipse.jetty.util.IO.close(java.io.Reader)", "public static void close(java.io.Reader)"], ["void", "org.eclipse.jetty.util.IO.close(java.io.Writer)", "public static void close(java.io.Writer)"], ["byte[]", "org.eclipse.jetty.util.IO.readBytes(java.io.InputStream)", "public static byte[] readBytes(java.io.InputStream) throws java.io.IOException"], ["long", "org.eclipse.jetty.util.IO.write(java.nio.channels.GatheringByteChannel, java.nio.ByteBuffer[], int, int)", "public static long write(java.nio.channels.GatheringByteChannel, java.nio.ByteBuffer[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.IO.close(java.io.OutputStream)", "public static void close(java.io.OutputStream)"], ["java.io.OutputStream", "org.eclipse.jetty.util.IO.getNullStream()", "public static java.io.OutputStream getNullStream()"], ["java.io.InputStream", "org.eclipse.jetty.util.IO.getClosedStream()", "public static java.io.InputStream getClosedStream()"], ["java.io.Writer", "org.eclipse.jetty.util.IO.getNullWriter()", "public static java.io.Writer getNullWriter()"], ["java.io.PrintWriter", "org.eclipse.jetty.util.IO.getNullPrintWriter()", "public static java.io.PrintWriter getNullPrintWriter()"], ["org.eclipse.jetty.util.IPAddressMap$IPAddrPattern", "org.eclipse.jetty.util.IPAddressMap$IPAddrPattern(java.lang.String)", "public org.eclipse.jetty.util.IPAddressMap$IPAddrPattern(java.lang.String) throws java.lang.IllegalArgumentException"], ["boolean", "org.eclipse.jetty.util.IPAddressMap$IPAddrPattern.match(java.lang.String)", "public boolean match(java.lang.String) throws java.lang.IllegalArgumentException"], ["org.eclipse.jetty.util.IPAddressMap$OctetPattern", "org.eclipse.jetty.util.IPAddressMap$OctetPattern(java.lang.String)", "public org.eclipse.jetty.util.IPAddressMap$OctetPattern(java.lang.String) throws java.lang.IllegalArgumentException"], ["boolean", "org.eclipse.jetty.util.IPAddressMap$OctetPattern.match(java.lang.String)", "public boolean match(java.lang.String) throws java.lang.IllegalArgumentException"], ["boolean", "org.eclipse.jetty.util.IPAddressMap$OctetPattern.match(int)", "public boolean match(int) throws java.lang.IllegalArgumentException"], ["org.eclipse.jetty.util.IPAddressMap", "org.eclipse.jetty.util.IPAddressMap()", "public org.eclipse.jetty.util.IPAddressMap()"], ["org.eclipse.jetty.util.IPAddressMap", "org.eclipse.jetty.util.IPAddressMap(int)", "public org.eclipse.jetty.util.IPAddressMap(int)"], ["TYPE", "org.eclipse.jetty.util.IPAddressMap.put(java.lang.String, TYPE)", "public TYPE put(java.lang.String, TYPE) throws java.lang.IllegalArgumentException"], ["TYPE", "org.eclipse.jetty.util.IPAddressMap.get(java.lang.Object)", "public TYPE get(java.lang.Object)"], ["TYPE", "org.eclipse.jetty.util.IPAddressMap.match(java.lang.String)", "public TYPE match(java.lang.String)"], ["java.util.Map$Entry<java.lang.String, TYPE>", "org.eclipse.jetty.util.IPAddressMap.getMatch(java.lang.String)", "public java.util.Map$Entry<java.lang.String, TYPE> getMatch(java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.util.IPAddressMap.getLazyMatches(java.lang.String)", "public java.lang.Object getLazyMatches(java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.util.IPAddressMap.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["org.eclipse.jetty.util.IteratingCallback$Action[]", "org.eclipse.jetty.util.IteratingCallback$Action.values()", "public static org.eclipse.jetty.util.IteratingCallback$Action[] values()"], ["org.eclipse.jetty.util.IteratingCallback$Action", "org.eclipse.jetty.util.IteratingCallback$Action.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.IteratingCallback$Action valueOf(java.lang.String)"], ["org.eclipse.jetty.util.IteratingCallback$State[]", "org.eclipse.jetty.util.IteratingCallback$State.values()", "public static org.eclipse.jetty.util.IteratingCallback$State[] values()"], ["org.eclipse.jetty.util.IteratingCallback$State", "org.eclipse.jetty.util.IteratingCallback$State.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.IteratingCallback$State valueOf(java.lang.String)"], ["void", "org.eclipse.jetty.util.IteratingCallback.iterate()", "public void iterate()"], ["void", "org.eclipse.jetty.util.IteratingCallback.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.IteratingCallback.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.IteratingCallback.close()", "public void close()"], ["boolean", "org.eclipse.jetty.util.IteratingCallback.isClosed()", "public boolean isClosed()"], ["boolean", "org.eclipse.jetty.util.IteratingCallback.isFailed()", "public boolean isFailed()"], ["boolean", "org.eclipse.jetty.util.IteratingCallback.isSucceeded()", "public boolean isSucceeded()"], ["boolean", "org.eclipse.jetty.util.IteratingCallback.reset()", "public boolean reset()"], ["java.lang.String", "org.eclipse.jetty.util.IteratingCallback.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.IteratingNestedCallback", "org.eclipse.jetty.util.IteratingNestedCallback(org.eclipse.jetty.util.Callback)", "public org.eclipse.jetty.util.IteratingNestedCallback(org.eclipse.jetty.util.Callback)"], ["java.lang.String", "org.eclipse.jetty.util.IteratingNestedCallback.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.add(java.lang.Object, java.lang.Object)", "public static java.lang.Object add(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.add(java.lang.Object, int, java.lang.Object)", "public static java.lang.Object add(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.addCollection(java.lang.Object, java.util.Collection<?>)", "public static java.lang.Object addCollection(java.lang.Object, java.util.Collection<?>)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.addArray(java.lang.Object, java.lang.Object[])", "public static java.lang.Object addArray(java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.ensureSize(java.lang.Object, int)", "public static java.lang.Object ensureSize(java.lang.Object, int)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.remove(java.lang.Object, java.lang.Object)", "public static java.lang.Object remove(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.remove(java.lang.Object, int)", "public static java.lang.Object remove(java.lang.Object, int)"], ["<E> java.util.List<E>", "org.eclipse.jetty.util.LazyList.getList(java.lang.Object)", "public static <E> java.util.List<E> getList(java.lang.Object)"], ["<E> java.util.List<E>", "org.eclipse.jetty.util.LazyList.getList(java.lang.Object, boolean)", "public static <E> java.util.List<E> getList(java.lang.Object, boolean)"], ["boolean", "org.eclipse.jetty.util.LazyList.hasEntry(java.lang.Object)", "public static boolean hasEntry(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.LazyList.isEmpty(java.lang.Object)", "public static boolean isEmpty(java.lang.Object)"], ["java.lang.String[]", "org.eclipse.jetty.util.LazyList.toStringArray(java.lang.Object)", "public static java.lang.String[] toStringArray(java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.toArray(java.lang.Object, java.lang.Class<?>)", "public static java.lang.Object toArray(java.lang.Object, java.lang.Class<?>)"], ["int", "org.eclipse.jetty.util.LazyList.size(java.lang.Object)", "public static int size(java.lang.Object)"], ["<E> E", "org.eclipse.jetty.util.LazyList.get(java.lang.Object, int)", "public static <E> E get(java.lang.Object, int)"], ["boolean", "org.eclipse.jetty.util.LazyList.contains(java.lang.Object, java.lang.Object)", "public static boolean contains(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.eclipse.jetty.util.LazyList.clone(java.lang.Object)", "public static java.lang.Object clone(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.util.LazyList.toString(java.lang.Object)", "public static java.lang.String toString(java.lang.Object)"], ["<E> java.util.Iterator<E>", "org.eclipse.jetty.util.LazyList.iterator(java.lang.Object)", "public static <E> java.util.Iterator<E> iterator(java.lang.Object)"], ["<E> java.util.ListIterator<E>", "org.eclipse.jetty.util.LazyList.listIterator(java.lang.Object)", "public static <E> java.util.ListIterator<E> listIterator(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.util.LeakDetector$LeakInfo.getResourceDescription()", "public java.lang.String getResourceDescription()"], ["java.lang.Throwable", "org.eclipse.jetty.util.LeakDetector$LeakInfo.getStackFrames()", "public java.lang.Throwable getStackFrames()"], ["java.lang.String", "org.eclipse.jetty.util.LeakDetector$LeakInfo.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.LeakDetector", "org.eclipse.jetty.util.LeakDetector()", "public org.eclipse.jetty.util.LeakDetector()"], ["boolean", "org.eclipse.jetty.util.LeakDetector.acquired(T)", "public boolean acquired(T)"], ["boolean", "org.eclipse.jetty.util.LeakDetector.released(T)", "public boolean released(T)"], ["java.lang.String", "org.eclipse.jetty.util.LeakDetector.id(T)", "public java.lang.String id(T)"], ["void", "org.eclipse.jetty.util.LeakDetector.run()", "public void run()"], ["org.eclipse.jetty.util.Loader", "org.eclipse.jetty.util.Loader()", "public org.eclipse.jetty.util.Loader()"], ["java.net.URL", "org.eclipse.jetty.util.Loader.getResource(java.lang.Class<?>, java.lang.String)", "public static java.net.URL getResource(java.lang.Class<?>, java.lang.String)"], ["java.lang.Class", "org.eclipse.jetty.util.Loader.loadClass(java.lang.Class, java.lang.String)", "public static java.lang.Class loadClass(java.lang.Class, java.lang.String) throws java.lang.ClassNotFoundException"], ["java.util.ResourceBundle", "org.eclipse.jetty.util.Loader.getResourceBundle(java.lang.Class<?>, java.lang.String, boolean, java.util.Locale)", "public static java.util.ResourceBundle getResourceBundle(java.lang.Class<?>, java.lang.String, boolean, java.util.Locale) throws java.util.MissingResourceException"], ["java.lang.String", "org.eclipse.jetty.util.Loader.getClassPath(java.lang.ClassLoader)", "public static java.lang.String getClassPath(java.lang.ClassLoader) throws java.lang.Exception"], ["org.eclipse.jetty.util.log.AbstractLogger", "org.eclipse.jetty.util.log.AbstractLogger()", "public org.eclipse.jetty.util.log.AbstractLogger()"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.util.log.AbstractLogger.getLogger(java.lang.String)", "public final org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)"], ["void", "org.eclipse.jetty.util.log.AbstractLogger.debug(java.lang.String, long)", "public void debug(java.lang.String, long)"], ["org.eclipse.jetty.util.log.JavaUtilLog", "org.eclipse.jetty.util.log.JavaUtilLog()", "public org.eclipse.jetty.util.log.JavaUtilLog()"], ["org.eclipse.jetty.util.log.JavaUtilLog", "org.eclipse.jetty.util.log.JavaUtilLog(java.lang.String)", "public org.eclipse.jetty.util.log.JavaUtilLog(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.log.JavaUtilLog.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.warn(java.lang.String, java.lang.Object...)", "public void warn(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.warn(java.lang.Throwable)", "public void warn(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.info(java.lang.String, java.lang.Object...)", "public void info(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.info(java.lang.Throwable)", "public void info(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JavaUtilLog.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.setDebugEnabled(boolean)", "public void setDebugEnabled(boolean)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.debug(java.lang.String, java.lang.Object...)", "public void debug(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.debug(java.lang.String, long)", "public void debug(java.lang.String, long)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.debug(java.lang.Throwable)", "public void debug(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.JavaUtilLog.ignore(java.lang.Throwable)", "public void ignore(java.lang.Throwable)"], ["org.eclipse.jetty.util.log.JettyAwareLogger", "org.eclipse.jetty.util.log.JettyAwareLogger(org.slf4j.spi.LocationAwareLogger)", "public org.eclipse.jetty.util.log.JettyAwareLogger(org.slf4j.spi.LocationAwareLogger)"], ["java.lang.String", "org.eclipse.jetty.util.log.JettyAwareLogger.getName()", "public java.lang.String getName()"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(java.lang.String, java.lang.Object)", "public void trace(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(java.lang.String, java.lang.Object, java.lang.Object)", "public void trace(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(java.lang.String, java.lang.Object[])", "public void trace(java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isTraceEnabled(org.slf4j.Marker)", "public boolean isTraceEnabled(org.slf4j.Marker)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(org.slf4j.Marker, java.lang.String)", "public void trace(org.slf4j.Marker, java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(org.slf4j.Marker, java.lang.String, java.lang.Object)", "public void trace(org.slf4j.Marker, java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)", "public void trace(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(org.slf4j.Marker, java.lang.String, java.lang.Object[])", "public void trace(org.slf4j.Marker, java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.trace(org.slf4j.Marker, java.lang.String, java.lang.Throwable)", "public void trace(org.slf4j.Marker, java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(java.lang.String, java.lang.Object)", "public void debug(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(java.lang.String, java.lang.Object, java.lang.Object)", "public void debug(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(java.lang.String, java.lang.Object[])", "public void debug(java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isDebugEnabled(org.slf4j.Marker)", "public boolean isDebugEnabled(org.slf4j.Marker)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(org.slf4j.Marker, java.lang.String)", "public void debug(org.slf4j.Marker, java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(org.slf4j.Marker, java.lang.String, java.lang.Object)", "public void debug(org.slf4j.Marker, java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)", "public void debug(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(org.slf4j.Marker, java.lang.String, java.lang.Object[])", "public void debug(org.slf4j.Marker, java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.debug(org.slf4j.Marker, java.lang.String, java.lang.Throwable)", "public void debug(org.slf4j.Marker, java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(java.lang.String, java.lang.Object)", "public void info(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(java.lang.String, java.lang.Object, java.lang.Object)", "public void info(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(java.lang.String, java.lang.Object[])", "public void info(java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isInfoEnabled(org.slf4j.Marker)", "public boolean isInfoEnabled(org.slf4j.Marker)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(org.slf4j.Marker, java.lang.String)", "public void info(org.slf4j.Marker, java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(org.slf4j.Marker, java.lang.String, java.lang.Object)", "public void info(org.slf4j.Marker, java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)", "public void info(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(org.slf4j.Marker, java.lang.String, java.lang.Object[])", "public void info(org.slf4j.Marker, java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.info(org.slf4j.Marker, java.lang.String, java.lang.Throwable)", "public void info(org.slf4j.Marker, java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(java.lang.String, java.lang.Object)", "public void warn(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(java.lang.String, java.lang.Object[])", "public void warn(java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(java.lang.String, java.lang.Object, java.lang.Object)", "public void warn(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isWarnEnabled(org.slf4j.Marker)", "public boolean isWarnEnabled(org.slf4j.Marker)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(org.slf4j.Marker, java.lang.String)", "public void warn(org.slf4j.Marker, java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(org.slf4j.Marker, java.lang.String, java.lang.Object)", "public void warn(org.slf4j.Marker, java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)", "public void warn(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(org.slf4j.Marker, java.lang.String, java.lang.Object[])", "public void warn(org.slf4j.Marker, java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.warn(org.slf4j.Marker, java.lang.String, java.lang.Throwable)", "public void warn(org.slf4j.Marker, java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(java.lang.String, java.lang.Object)", "public void error(java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(java.lang.String, java.lang.Object, java.lang.Object)", "public void error(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(java.lang.String, java.lang.Object[])", "public void error(java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.JettyAwareLogger.isErrorEnabled(org.slf4j.Marker)", "public boolean isErrorEnabled(org.slf4j.Marker)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(org.slf4j.Marker, java.lang.String)", "public void error(org.slf4j.Marker, java.lang.String)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(org.slf4j.Marker, java.lang.String, java.lang.Object)", "public void error(org.slf4j.Marker, java.lang.String, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)", "public void error(org.slf4j.Marker, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(org.slf4j.Marker, java.lang.String, java.lang.Object[])", "public void error(org.slf4j.Marker, java.lang.String, java.lang.Object[])"], ["void", "org.eclipse.jetty.util.log.JettyAwareLogger.error(org.slf4j.Marker, java.lang.String, java.lang.Throwable)", "public void error(org.slf4j.Marker, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.util.log.JettyAwareLogger.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.eclipse.jetty.util.log.Log$1.run()", "public java.lang.Object run()"], ["org.eclipse.jetty.util.log.Log", "org.eclipse.jetty.util.log.Log()", "public org.eclipse.jetty.util.log.Log()"], ["void", "org.eclipse.jetty.util.log.Log.initialized()", "public static void initialized()"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.util.log.Log.getLog()", "public static org.eclipse.jetty.util.log.Logger getLog()"], ["void", "org.eclipse.jetty.util.log.Log.setLog(org.eclipse.jetty.util.log.Logger)", "public static void setLog(org.eclipse.jetty.util.log.Logger)"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.util.log.Log.getRootLogger()", "public static org.eclipse.jetty.util.log.Logger getRootLogger()"], ["void", "org.eclipse.jetty.util.log.Log.setLogToParent(java.lang.String)", "public static void setLogToParent(java.lang.String)"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.util.log.Log.getLogger(java.lang.Class<?>)", "public static org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class<?>)"], ["org.eclipse.jetty.util.log.Logger", "org.eclipse.jetty.util.log.Log.getLogger(java.lang.String)", "public static org.eclipse.jetty.util.log.Logger getLogger(java.lang.String)"], ["java.util.Map<java.lang.String, org.eclipse.jetty.util.log.Logger>", "org.eclipse.jetty.util.log.Log.getLoggers()", "public static java.util.Map<java.lang.String, org.eclipse.jetty.util.log.Logger> getLoggers()"], ["org.eclipse.jetty.util.log.LoggerLog", "org.eclipse.jetty.util.log.LoggerLog(java.lang.Object)", "public org.eclipse.jetty.util.log.LoggerLog(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.util.log.LoggerLog.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.util.log.LoggerLog.warn(java.lang.String, java.lang.Object...)", "public void warn(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.warn(java.lang.Throwable)", "public void warn(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.info(java.lang.String, java.lang.Object...)", "public void info(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.info(java.lang.Throwable)", "public void info(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.LoggerLog.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.eclipse.jetty.util.log.LoggerLog.setDebugEnabled(boolean)", "public void setDebugEnabled(boolean)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.debug(java.lang.String, java.lang.Object...)", "public void debug(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.debug(java.lang.Throwable)", "public void debug(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.debug(java.lang.String, long)", "public void debug(java.lang.String, long)"], ["void", "org.eclipse.jetty.util.log.LoggerLog.ignore(java.lang.Throwable)", "public void ignore(java.lang.Throwable)"], ["org.eclipse.jetty.util.log.Slf4jLog", "org.eclipse.jetty.util.log.Slf4jLog()", "public org.eclipse.jetty.util.log.Slf4jLog() throws java.lang.Exception"], ["org.eclipse.jetty.util.log.Slf4jLog", "org.eclipse.jetty.util.log.Slf4jLog(java.lang.String)", "public org.eclipse.jetty.util.log.Slf4jLog(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.log.Slf4jLog.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.warn(java.lang.String, java.lang.Object...)", "public void warn(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.warn(java.lang.Throwable)", "public void warn(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.info(java.lang.String, java.lang.Object...)", "public void info(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.info(java.lang.Throwable)", "public void info(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.debug(java.lang.String, java.lang.Object...)", "public void debug(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.debug(java.lang.String, long)", "public void debug(java.lang.String, long)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.debug(java.lang.Throwable)", "public void debug(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.Slf4jLog.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.setDebugEnabled(boolean)", "public void setDebugEnabled(boolean)"], ["void", "org.eclipse.jetty.util.log.Slf4jLog.ignore(java.lang.Throwable)", "public void ignore(java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.util.log.Slf4jLog.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.log.StacklessLogging", "org.eclipse.jetty.util.log.StacklessLogging(java.lang.Class<?>...)", "public org.eclipse.jetty.util.log.StacklessLogging(java.lang.Class<?>...)"], ["void", "org.eclipse.jetty.util.log.StacklessLogging.close()", "public void close() throws java.lang.Exception"], ["org.eclipse.jetty.util.log.StdErrLog", "org.eclipse.jetty.util.log.StdErrLog.getLogger(java.lang.Class<?>)", "public static org.eclipse.jetty.util.log.StdErrLog getLogger(java.lang.Class<?>)"], ["org.eclipse.jetty.util.log.StdErrLog", "org.eclipse.jetty.util.log.StdErrLog()", "public org.eclipse.jetty.util.log.StdErrLog()"], ["org.eclipse.jetty.util.log.StdErrLog", "org.eclipse.jetty.util.log.StdErrLog(java.lang.String)", "public org.eclipse.jetty.util.log.StdErrLog(java.lang.String)"], ["org.eclipse.jetty.util.log.StdErrLog", "org.eclipse.jetty.util.log.StdErrLog(java.lang.String, java.util.Properties)", "public org.eclipse.jetty.util.log.StdErrLog(java.lang.String, java.util.Properties)"], ["int", "org.eclipse.jetty.util.log.StdErrLog.getLoggingLevel(java.util.Properties, java.lang.String)", "public static int getLoggingLevel(java.util.Properties, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.log.StdErrLog.getLoggingProperty(java.util.Properties, java.lang.String, java.lang.String)", "public static java.lang.String getLoggingProperty(java.util.Properties, java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.log.StdErrLog.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setPrintLongNames(boolean)", "public void setPrintLongNames(boolean)"], ["boolean", "org.eclipse.jetty.util.log.StdErrLog.isPrintLongNames()", "public boolean isPrintLongNames()"], ["boolean", "org.eclipse.jetty.util.log.StdErrLog.isHideStacks()", "public boolean isHideStacks()"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setHideStacks(boolean)", "public void setHideStacks(boolean)"], ["boolean", "org.eclipse.jetty.util.log.StdErrLog.isSource()", "public boolean isSource()"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setSource(boolean)", "public void setSource(boolean)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.warn(java.lang.String, java.lang.Object...)", "public void warn(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.warn(java.lang.Throwable)", "public void warn(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.info(java.lang.String, java.lang.Object...)", "public void info(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.info(java.lang.Throwable)", "public void info(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.eclipse.jetty.util.log.StdErrLog.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setDebugEnabled(boolean)", "public void setDebugEnabled(boolean)"], ["int", "org.eclipse.jetty.util.log.StdErrLog.getLevel()", "public int getLevel()"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setLevel(int)", "public void setLevel(int)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setStdErrStream(java.io.PrintStream)", "public void setStdErrStream(java.io.PrintStream)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String, java.lang.Object...)", "public void debug(java.lang.String, java.lang.Object...)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String, long)", "public void debug(java.lang.String, long)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.Throwable)", "public void debug(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.util.log.StdErrLog.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.util.log.StdErrLog.setProperties(java.util.Properties)", "public static void setProperties(java.util.Properties)"], ["void", "org.eclipse.jetty.util.log.StdErrLog.ignore(java.lang.Throwable)", "public void ignore(java.lang.Throwable)"], ["java.lang.String", "org.eclipse.jetty.util.MemoryUtils$1.run()", "public java.lang.String run()"], ["java.lang.Object", "org.eclipse.jetty.util.MemoryUtils$1.run()", "public java.lang.Object run()"], ["int", "org.eclipse.jetty.util.MemoryUtils.getCacheLineBytes()", "public static int getCacheLineBytes()"], ["int", "org.eclipse.jetty.util.MemoryUtils.getIntegersPerCacheLine()", "public static int getIntegersPerCacheLine()"], ["int", "org.eclipse.jetty.util.MemoryUtils.getLongsPerCacheLine()", "public static int getLongsPerCacheLine()"], ["org.eclipse.jetty.util.MultiException", "org.eclipse.jetty.util.MultiException()", "public org.eclipse.jetty.util.MultiException()"], ["void", "org.eclipse.jetty.util.MultiException.add(java.lang.Throwable)", "public void add(java.lang.Throwable)"], ["int", "org.eclipse.jetty.util.MultiException.size()", "public int size()"], ["java.util.List<java.lang.Throwable>", "org.eclipse.jetty.util.MultiException.getThrowables()", "public java.util.List<java.lang.Throwable> getThrowables()"], ["java.lang.Throwable", "org.eclipse.jetty.util.MultiException.getThrowable(int)", "public java.lang.Throwable getThrowable(int)"], ["void", "org.eclipse.jetty.util.MultiException.ifExceptionThrow()", "public void ifExceptionThrow() throws java.lang.Exception"], ["void", "org.eclipse.jetty.util.MultiException.ifExceptionThrowRuntime()", "public void ifExceptionThrowRuntime() throws java.lang.Error"], ["void", "org.eclipse.jetty.util.MultiException.ifExceptionThrowMulti()", "public void ifExceptionThrowMulti() throws org.eclipse.jetty.util.MultiException"], ["java.lang.String", "org.eclipse.jetty.util.MultiException.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.util.MultiMap$1.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.MultiMap", "org.eclipse.jetty.util.MultiMap()", "public org.eclipse.jetty.util.MultiMap()"], ["org.eclipse.jetty.util.MultiMap", "org.eclipse.jetty.util.MultiMap(java.util.Map<java.lang.String, java.util.List<V>>)", "public org.eclipse.jetty.util.MultiMap(java.util.Map<java.lang.String, java.util.List<V>>)"], ["org.eclipse.jetty.util.MultiMap", "org.eclipse.jetty.util.MultiMap(org.eclipse.jetty.util.MultiMap<V>)", "public org.eclipse.jetty.util.MultiMap(org.eclipse.jetty.util.MultiMap<V>)"], ["java.util.List<V>", "org.eclipse.jetty.util.MultiMap.getValues(java.lang.String)", "public java.util.List<V> getValues(java.lang.String)"], ["V", "org.eclipse.jetty.util.MultiMap.getValue(java.lang.String, int)", "public V getValue(java.lang.String, int)"], ["java.lang.String", "org.eclipse.jetty.util.MultiMap.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["java.util.List<V>", "org.eclipse.jetty.util.MultiMap.put(java.lang.String, V)", "public java.util.List<V> put(java.lang.String, V)"], ["void", "org.eclipse.jetty.util.MultiMap.putAllValues(java.util.Map<java.lang.String, V>)", "public void putAllValues(java.util.Map<java.lang.String, V>)"], ["java.util.List<V>", "org.eclipse.jetty.util.MultiMap.putValues(java.lang.String, java.util.List<V>)", "public java.util.List<V> putValues(java.lang.String, java.util.List<V>)"], ["java.util.List<V>", "org.eclipse.jetty.util.MultiMap.putValues(java.lang.String, V...)", "public final java.util.List<V> putValues(java.lang.String, V...)"], ["void", "org.eclipse.jetty.util.MultiMap.add(java.lang.String, V)", "public void add(java.lang.String, V)"], ["void", "org.eclipse.jetty.util.MultiMap.addValues(java.lang.String, java.util.List<V>)", "public void addValues(java.lang.String, java.util.List<V>)"], ["void", "org.eclipse.jetty.util.MultiMap.addValues(java.lang.String, V[])", "public void addValues(java.lang.String, V[])"], ["boolean", "org.eclipse.jetty.util.MultiMap.addAllValues(org.eclipse.jetty.util.MultiMap<V>)", "public boolean addAllValues(org.eclipse.jetty.util.MultiMap<V>)"], ["boolean", "org.eclipse.jetty.util.MultiMap.removeValue(java.lang.String, V)", "public boolean removeValue(java.lang.String, V)"], ["boolean", "org.eclipse.jetty.util.MultiMap.containsSimpleValue(V)", "public boolean containsSimpleValue(V)"], ["java.lang.String", "org.eclipse.jetty.util.MultiMap.toString()", "public java.lang.String toString()"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.eclipse.jetty.util.MultiMap.toStringArrayMap()", "public java.util.Map<java.lang.String, java.lang.String[]> toStringArrayMap()"], ["int", "org.eclipse.jetty.util.MultiPartInputStreamParser$1.read()", "public int read() throws java.io.IOException"], ["org.eclipse.jetty.util.MultiPartInputStreamParser$Base64InputStream", "org.eclipse.jetty.util.MultiPartInputStreamParser$Base64InputStream(org.eclipse.jetty.util.ReadLineInputStream)", "public org.eclipse.jetty.util.MultiPartInputStreamParser$Base64InputStream(org.eclipse.jetty.util.ReadLineInputStream)"], ["int", "org.eclipse.jetty.util.MultiPartInputStreamParser$Base64InputStream.read()", "public int read() throws java.io.IOException"], ["org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart(org.eclipse.jetty.util.MultiPartInputStreamParser, java.lang.String, java.lang.String)", "public org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart(org.eclipse.jetty.util.MultiPartInputStreamParser, java.lang.String, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getContentType()", "public java.lang.String getContentType()"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getHeader(java.lang.String)", "public java.lang.String getHeader(java.lang.String)"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getHeaderNames()", "public java.util.Collection<java.lang.String> getHeaderNames()"], ["java.util.Collection<java.lang.String>", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getHeaders(java.lang.String)", "public java.util.Collection<java.lang.String> getHeaders(java.lang.String)"], ["java.io.InputStream", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getSubmittedFileName()", "public java.lang.String getSubmittedFileName()"], ["byte[]", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getBytes()", "public byte[] getBytes()"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getName()", "public java.lang.String getName()"], ["long", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getSize()", "public long getSize()"], ["void", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.write(java.lang.String)", "public void write(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.delete()", "public void delete() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.cleanUp()", "public void cleanUp() throws java.io.IOException"], ["java.io.File", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getFile()", "public java.io.File getFile()"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartInputStreamParser$MultiPart.getContentDispositionFilename()", "public java.lang.String getContentDispositionFilename()"], ["org.eclipse.jetty.util.MultiPartInputStreamParser", "org.eclipse.jetty.util.MultiPartInputStreamParser(java.io.InputStream, java.lang.String, javax.servlet.MultipartConfigElement, java.io.File)", "public org.eclipse.jetty.util.MultiPartInputStreamParser(java.io.InputStream, java.lang.String, javax.servlet.MultipartConfigElement, java.io.File)"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.util.MultiPartInputStreamParser.getParsedParts()", "public java.util.Collection<javax.servlet.http.Part> getParsedParts()"], ["void", "org.eclipse.jetty.util.MultiPartInputStreamParser.deleteParts()", "public void deleteParts() throws org.eclipse.jetty.util.MultiException"], ["java.util.Collection<javax.servlet.http.Part>", "org.eclipse.jetty.util.MultiPartInputStreamParser.getParts()", "public java.util.Collection<javax.servlet.http.Part> getParts() throws java.io.IOException, javax.servlet.ServletException"], ["javax.servlet.http.Part", "org.eclipse.jetty.util.MultiPartInputStreamParser.getPart(java.lang.String)", "public javax.servlet.http.Part getPart(java.lang.String) throws java.io.IOException, javax.servlet.ServletException"], ["void", "org.eclipse.jetty.util.MultiPartInputStreamParser.setDeleteOnExit(boolean)", "public void setDeleteOnExit(boolean)"], ["boolean", "org.eclipse.jetty.util.MultiPartInputStreamParser.isDeleteOnExit()", "public boolean isDeleteOnExit()"], ["org.eclipse.jetty.util.MultiPartOutputStream", "org.eclipse.jetty.util.MultiPartOutputStream(java.io.OutputStream)", "public org.eclipse.jetty.util.MultiPartOutputStream(java.io.OutputStream) throws java.io.IOException"], ["org.eclipse.jetty.util.MultiPartOutputStream", "org.eclipse.jetty.util.MultiPartOutputStream(java.io.OutputStream, java.lang.String)", "public org.eclipse.jetty.util.MultiPartOutputStream(java.io.OutputStream, java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartOutputStream.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartOutputStream.getBoundary()", "public java.lang.String getBoundary()"], ["java.io.OutputStream", "org.eclipse.jetty.util.MultiPartOutputStream.getOut()", "public java.io.OutputStream getOut()"], ["void", "org.eclipse.jetty.util.MultiPartOutputStream.startPart(java.lang.String)", "public void startPart(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartOutputStream.startPart(java.lang.String, java.lang.String[])", "public void startPart(java.lang.String, java.lang.String[]) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.util.MultiPartWriter", "org.eclipse.jetty.util.MultiPartWriter(java.io.Writer)", "public org.eclipse.jetty.util.MultiPartWriter(java.io.Writer) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartWriter.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.MultiPartWriter.getBoundary()", "public java.lang.String getBoundary()"], ["void", "org.eclipse.jetty.util.MultiPartWriter.startPart(java.lang.String)", "public void startPart(java.lang.String) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartWriter.endPart()", "public void endPart() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.MultiPartWriter.startPart(java.lang.String, java.lang.String[])", "public void startPart(java.lang.String, java.lang.String[]) throws java.io.IOException"], ["org.eclipse.jetty.util.PatternMatcher", "org.eclipse.jetty.util.PatternMatcher()", "public org.eclipse.jetty.util.PatternMatcher()"], ["void", "org.eclipse.jetty.util.PatternMatcher.match(java.util.regex.Pattern, java.net.URI[], boolean)", "public void match(java.util.regex.Pattern, java.net.URI[], boolean) throws java.lang.Exception"], ["void", "org.eclipse.jetty.util.PatternMatcher.matchPatterns(java.util.regex.Pattern, java.net.URI[], boolean)", "public void matchPatterns(java.util.regex.Pattern, java.net.URI[], boolean) throws java.lang.Exception"], ["org.eclipse.jetty.util.preventers.AbstractLeakPreventer", "org.eclipse.jetty.util.preventers.AbstractLeakPreventer()", "public org.eclipse.jetty.util.preventers.AbstractLeakPreventer()"], ["org.eclipse.jetty.util.preventers.AppContextLeakPreventer", "org.eclipse.jetty.util.preventers.AppContextLeakPreventer()", "public org.eclipse.jetty.util.preventers.AppContextLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.AppContextLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.AWTLeakPreventer", "org.eclipse.jetty.util.preventers.AWTLeakPreventer()", "public org.eclipse.jetty.util.preventers.AWTLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.AWTLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.DOMLeakPreventer", "org.eclipse.jetty.util.preventers.DOMLeakPreventer()", "public org.eclipse.jetty.util.preventers.DOMLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.DOMLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.DriverManagerLeakPreventer", "org.eclipse.jetty.util.preventers.DriverManagerLeakPreventer()", "public org.eclipse.jetty.util.preventers.DriverManagerLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.DriverManagerLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.GCThreadLeakPreventer", "org.eclipse.jetty.util.preventers.GCThreadLeakPreventer()", "public org.eclipse.jetty.util.preventers.GCThreadLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.GCThreadLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.Java2DLeakPreventer", "org.eclipse.jetty.util.preventers.Java2DLeakPreventer()", "public org.eclipse.jetty.util.preventers.Java2DLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.Java2DLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.LDAPLeakPreventer", "org.eclipse.jetty.util.preventers.LDAPLeakPreventer()", "public org.eclipse.jetty.util.preventers.LDAPLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.LDAPLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.LoginConfigurationLeakPreventer", "org.eclipse.jetty.util.preventers.LoginConfigurationLeakPreventer()", "public org.eclipse.jetty.util.preventers.LoginConfigurationLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.LoginConfigurationLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.preventers.SecurityProviderLeakPreventer", "org.eclipse.jetty.util.preventers.SecurityProviderLeakPreventer()", "public org.eclipse.jetty.util.preventers.SecurityProviderLeakPreventer()"], ["void", "org.eclipse.jetty.util.preventers.SecurityProviderLeakPreventer.prevent(java.lang.ClassLoader)", "public void prevent(java.lang.ClassLoader)"], ["org.eclipse.jetty.util.Promise$Adapter", "org.eclipse.jetty.util.Promise$Adapter()", "public org.eclipse.jetty.util.Promise$Adapter()"], ["void", "org.eclipse.jetty.util.Promise$Adapter.succeeded(C)", "public void succeeded(C)"], ["void", "org.eclipse.jetty.util.Promise$Adapter.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["org.eclipse.jetty.util.QuotedStringTokenizer", "org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean, boolean)", "public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean, boolean)"], ["org.eclipse.jetty.util.QuotedStringTokenizer", "org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean)", "public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String, boolean)"], ["org.eclipse.jetty.util.QuotedStringTokenizer", "org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String)", "public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String, java.lang.String)"], ["org.eclipse.jetty.util.QuotedStringTokenizer", "org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String)", "public org.eclipse.jetty.util.QuotedStringTokenizer(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.QuotedStringTokenizer.hasMoreTokens()", "public boolean hasMoreTokens()"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.nextToken()", "public java.lang.String nextToken() throws java.util.NoSuchElementException"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.nextToken(java.lang.String)", "public java.lang.String nextToken(java.lang.String) throws java.util.NoSuchElementException"], ["boolean", "org.eclipse.jetty.util.QuotedStringTokenizer.hasMoreElements()", "public boolean hasMoreElements()"], ["java.lang.Object", "org.eclipse.jetty.util.QuotedStringTokenizer.nextElement()", "public java.lang.Object nextElement() throws java.util.NoSuchElementException"], ["int", "org.eclipse.jetty.util.QuotedStringTokenizer.countTokens()", "public int countTokens()"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.quoteIfNeeded(java.lang.String, java.lang.String)", "public static java.lang.String quoteIfNeeded(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.quote(java.lang.String)", "public static java.lang.String quote(java.lang.String)"], ["void", "org.eclipse.jetty.util.QuotedStringTokenizer.quoteOnly(java.lang.Appendable, java.lang.String)", "public static void quoteOnly(java.lang.Appendable, java.lang.String)"], ["void", "org.eclipse.jetty.util.QuotedStringTokenizer.quote(java.lang.Appendable, java.lang.String)", "public static void quote(java.lang.Appendable, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.unquoteOnly(java.lang.String)", "public static java.lang.String unquoteOnly(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.unquoteOnly(java.lang.String, boolean)", "public static java.lang.String unquoteOnly(java.lang.String, boolean)"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.unquote(java.lang.String)", "public static java.lang.String unquote(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.QuotedStringTokenizer.unquote(java.lang.String, boolean)", "public static java.lang.String unquote(java.lang.String, boolean)"], ["boolean", "org.eclipse.jetty.util.QuotedStringTokenizer.isQuoted(java.lang.String)", "public static boolean isQuoted(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.QuotedStringTokenizer.getDouble()", "public boolean getDouble()"], ["void", "org.eclipse.jetty.util.QuotedStringTokenizer.setDouble(boolean)", "public void setDouble(boolean)"], ["boolean", "org.eclipse.jetty.util.QuotedStringTokenizer.getSingle()", "public boolean getSingle()"], ["void", "org.eclipse.jetty.util.QuotedStringTokenizer.setSingle(boolean)", "public void setSingle(boolean)"], ["org.eclipse.jetty.util.ReadLineInputStream", "org.eclipse.jetty.util.ReadLineInputStream(java.io.InputStream)", "public org.eclipse.jetty.util.ReadLineInputStream(java.io.InputStream)"], ["org.eclipse.jetty.util.ReadLineInputStream", "org.eclipse.jetty.util.ReadLineInputStream(java.io.InputStream, int)", "public org.eclipse.jetty.util.ReadLineInputStream(java.io.InputStream, int)"], ["java.lang.String", "org.eclipse.jetty.util.ReadLineInputStream.readLine()", "public java.lang.String readLine() throws java.io.IOException"], ["synchronized", "org.eclipse.jetty.util.ReadLineInputStream.int read()", "public synchronized int read() throws java.io.IOException"], ["synchronized", "org.eclipse.jetty.util.ReadLineInputStream.int read(byte[], int, int)", "public synchronized int read(byte[], int, int) throws java.io.IOException"], ["org.eclipse.jetty.util.RegexSet", "org.eclipse.jetty.util.RegexSet()", "public org.eclipse.jetty.util.RegexSet()"], ["java.util.Iterator<java.lang.String>", "org.eclipse.jetty.util.RegexSet.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["int", "org.eclipse.jetty.util.RegexSet.size()", "public int size()"], ["boolean", "org.eclipse.jetty.util.RegexSet.add(java.lang.String)", "public boolean add(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.RegexSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.RegexSet.isEmpty()", "public boolean isEmpty()"], ["void", "org.eclipse.jetty.util.RegexSet.clear()", "public void clear()"], ["boolean", "org.eclipse.jetty.util.RegexSet.test(java.lang.String)", "public boolean test(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.RegexSet.matches(java.lang.String)", "public boolean matches(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.RegexSet.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.RegexSet.test(java.lang.Object)", "public boolean test(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.resource.BadResource.exists()", "public boolean exists()"], ["long", "org.eclipse.jetty.util.resource.BadResource.lastModified()", "public long lastModified()"], ["boolean", "org.eclipse.jetty.util.resource.BadResource.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.BadResource.length()", "public long length()"], ["java.io.File", "org.eclipse.jetty.util.resource.BadResource.getFile()", "public java.io.File getFile()"], ["java.io.InputStream", "org.eclipse.jetty.util.resource.BadResource.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.resource.BadResource.delete()", "public boolean delete() throws java.lang.SecurityException"], ["boolean", "org.eclipse.jetty.util.resource.BadResource.renameTo(org.eclipse.jetty.util.resource.Resource)", "public boolean renameTo(org.eclipse.jetty.util.resource.Resource) throws java.lang.SecurityException"], ["java.lang.String[]", "org.eclipse.jetty.util.resource.BadResource.list()", "public java.lang.String[] list()"], ["void", "org.eclipse.jetty.util.resource.BadResource.copyTo(java.io.File)", "public void copyTo(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.BadResource.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.util.resource.EmptyResource.isContainedIn(org.eclipse.jetty.util.resource.Resource)", "public boolean isContainedIn(org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["void", "org.eclipse.jetty.util.resource.EmptyResource.close()", "public void close()"], ["boolean", "org.eclipse.jetty.util.resource.EmptyResource.exists()", "public boolean exists()"], ["boolean", "org.eclipse.jetty.util.resource.EmptyResource.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.EmptyResource.lastModified()", "public long lastModified()"], ["long", "org.eclipse.jetty.util.resource.EmptyResource.length()", "public long length()"], ["java.net.URL", "org.eclipse.jetty.util.resource.EmptyResource.getURL()", "public java.net.URL getURL()"], ["java.io.File", "org.eclipse.jetty.util.resource.EmptyResource.getFile()", "public java.io.File getFile() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.EmptyResource.getName()", "public java.lang.String getName()"], ["java.io.InputStream", "org.eclipse.jetty.util.resource.EmptyResource.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.util.resource.EmptyResource.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.resource.EmptyResource.delete()", "public boolean delete() throws java.lang.SecurityException"], ["boolean", "org.eclipse.jetty.util.resource.EmptyResource.renameTo(org.eclipse.jetty.util.resource.Resource)", "public boolean renameTo(org.eclipse.jetty.util.resource.Resource) throws java.lang.SecurityException"], ["java.lang.String[]", "org.eclipse.jetty.util.resource.EmptyResource.list()", "public java.lang.String[] list()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.EmptyResource.addPath(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource addPath(java.lang.String) throws java.io.IOException, java.net.MalformedURLException"], ["org.eclipse.jetty.util.resource.FileResource", "org.eclipse.jetty.util.resource.FileResource(java.net.URL)", "public org.eclipse.jetty.util.resource.FileResource(java.net.URL) throws java.io.IOException, java.net.URISyntaxException"], ["org.eclipse.jetty.util.resource.FileResource", "org.eclipse.jetty.util.resource.FileResource(java.net.URI)", "public org.eclipse.jetty.util.resource.FileResource(java.net.URI)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.FileResource.addPath(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource addPath(java.lang.String) throws java.io.IOException, java.net.MalformedURLException"], ["java.net.URI", "org.eclipse.jetty.util.resource.FileResource.getAlias()", "public java.net.URI getAlias()"], ["boolean", "org.eclipse.jetty.util.resource.FileResource.exists()", "public boolean exists()"], ["long", "org.eclipse.jetty.util.resource.FileResource.lastModified()", "public long lastModified()"], ["boolean", "org.eclipse.jetty.util.resource.FileResource.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.FileResource.length()", "public long length()"], ["java.lang.String", "org.eclipse.jetty.util.resource.FileResource.getName()", "public java.lang.String getName()"], ["java.io.File", "org.eclipse.jetty.util.resource.FileResource.getFile()", "public java.io.File getFile()"], ["java.io.InputStream", "org.eclipse.jetty.util.resource.FileResource.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.util.resource.FileResource.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.resource.FileResource.delete()", "public boolean delete() throws java.lang.SecurityException"], ["boolean", "org.eclipse.jetty.util.resource.FileResource.renameTo(org.eclipse.jetty.util.resource.Resource)", "public boolean renameTo(org.eclipse.jetty.util.resource.Resource) throws java.lang.SecurityException"], ["java.lang.String[]", "org.eclipse.jetty.util.resource.FileResource.list()", "public java.lang.String[] list()"], ["boolean", "org.eclipse.jetty.util.resource.FileResource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.eclipse.jetty.util.resource.FileResource.hashCode()", "public int hashCode()"], ["void", "org.eclipse.jetty.util.resource.FileResource.copyTo(java.io.File)", "public void copyTo(java.io.File) throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.resource.FileResource.isContainedIn(org.eclipse.jetty.util.resource.Resource)", "public boolean isContainedIn(org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["void", "org.eclipse.jetty.util.resource.FileResource.close()", "public void close()"], ["java.net.URL", "org.eclipse.jetty.util.resource.FileResource.getURL()", "public java.net.URL getURL()"], ["java.net.URI", "org.eclipse.jetty.util.resource.FileResource.getURI()", "public java.net.URI getURI()"], ["java.lang.String", "org.eclipse.jetty.util.resource.FileResource.toString()", "public java.lang.String toString()"], ["synchronized", "org.eclipse.jetty.util.resource.JarFileResource.void close()", "public synchronized void close()"], ["boolean", "org.eclipse.jetty.util.resource.JarFileResource.exists()", "public boolean exists()"], ["boolean", "org.eclipse.jetty.util.resource.JarFileResource.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.JarFileResource.lastModified()", "public long lastModified()"], ["synchronized", "org.eclipse.jetty.util.resource.JarFileResource.java.lang.String[] list()", "public synchronized java.lang.String[] list()"], ["long", "org.eclipse.jetty.util.resource.JarFileResource.length()", "public long length()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.JarFileResource.getNonCachingResource(org.eclipse.jetty.util.resource.Resource)", "public static org.eclipse.jetty.util.resource.Resource getNonCachingResource(org.eclipse.jetty.util.resource.Resource)"], ["boolean", "org.eclipse.jetty.util.resource.JarFileResource.isContainedIn(org.eclipse.jetty.util.resource.Resource)", "public boolean isContainedIn(org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["void", "org.eclipse.jetty.util.resource.JarResource$1.close()", "public void close() throws java.io.IOException"], ["synchronized", "org.eclipse.jetty.util.resource.JarResource.void close()", "public synchronized void close()"], ["boolean", "org.eclipse.jetty.util.resource.JarResource.exists()", "public boolean exists()"], ["java.io.File", "org.eclipse.jetty.util.resource.JarResource.getFile()", "public java.io.File getFile() throws java.io.IOException"], ["java.io.InputStream", "org.eclipse.jetty.util.resource.JarResource.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.resource.JarResource.copyTo(java.io.File)", "public void copyTo(java.io.File) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.JarResource.newJarResource(org.eclipse.jetty.util.resource.Resource)", "public static org.eclipse.jetty.util.resource.Resource newJarResource(org.eclipse.jetty.util.resource.Resource) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.PathResource", "org.eclipse.jetty.util.resource.PathResource(java.io.File)", "public org.eclipse.jetty.util.resource.PathResource(java.io.File)"], ["org.eclipse.jetty.util.resource.PathResource", "org.eclipse.jetty.util.resource.PathResource(java.nio.file.Path)", "public org.eclipse.jetty.util.resource.PathResource(java.nio.file.Path)"], ["org.eclipse.jetty.util.resource.PathResource", "org.eclipse.jetty.util.resource.PathResource(java.net.URI)", "public org.eclipse.jetty.util.resource.PathResource(java.net.URI) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.PathResource", "org.eclipse.jetty.util.resource.PathResource(java.net.URL)", "public org.eclipse.jetty.util.resource.PathResource(java.net.URL) throws java.io.IOException, java.net.URISyntaxException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.PathResource.addPath(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource addPath(java.lang.String) throws java.io.IOException, java.net.MalformedURLException"], ["void", "org.eclipse.jetty.util.resource.PathResource.close()", "public void close()"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.delete()", "public boolean delete() throws java.lang.SecurityException"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.exists()", "public boolean exists()"], ["java.io.File", "org.eclipse.jetty.util.resource.PathResource.getFile()", "public java.io.File getFile() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.getFollowLinks()", "public boolean getFollowLinks()"], ["java.io.InputStream", "org.eclipse.jetty.util.resource.PathResource.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.PathResource.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.eclipse.jetty.util.resource.PathResource.toString()", "public java.lang.String toString()"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.util.resource.PathResource.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["java.net.URI", "org.eclipse.jetty.util.resource.PathResource.getURI()", "public java.net.URI getURI()"], ["java.net.URL", "org.eclipse.jetty.util.resource.PathResource.getURL()", "public java.net.URL getURL()"], ["int", "org.eclipse.jetty.util.resource.PathResource.hashCode()", "public int hashCode()"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.isContainedIn(org.eclipse.jetty.util.resource.Resource)", "public boolean isContainedIn(org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.PathResource.lastModified()", "public long lastModified()"], ["long", "org.eclipse.jetty.util.resource.PathResource.length()", "public long length()"], ["java.net.URI", "org.eclipse.jetty.util.resource.PathResource.getAlias()", "public java.net.URI getAlias()"], ["java.lang.String[]", "org.eclipse.jetty.util.resource.PathResource.list()", "public java.lang.String[] list()"], ["boolean", "org.eclipse.jetty.util.resource.PathResource.renameTo(org.eclipse.jetty.util.resource.Resource)", "public boolean renameTo(org.eclipse.jetty.util.resource.Resource) throws java.lang.SecurityException"], ["void", "org.eclipse.jetty.util.resource.PathResource.setFollowLinks(boolean)", "public void setFollowLinks(boolean)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource()", "public org.eclipse.jetty.util.resource.Resource()"], ["void", "org.eclipse.jetty.util.resource.Resource.setDefaultUseCaches(boolean)", "public static void setDefaultUseCaches(boolean)"], ["boolean", "org.eclipse.jetty.util.resource.Resource.getDefaultUseCaches()", "public static boolean getDefaultUseCaches()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newResource(java.net.URI)", "public static org.eclipse.jetty.util.resource.Resource newResource(java.net.URI) throws java.net.MalformedURLException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newResource(java.net.URL)", "public static org.eclipse.jetty.util.resource.Resource newResource(java.net.URL)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newResource(java.lang.String)", "public static org.eclipse.jetty.util.resource.Resource newResource(java.lang.String) throws java.net.MalformedURLException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newResource(java.lang.String, boolean)", "public static org.eclipse.jetty.util.resource.Resource newResource(java.lang.String, boolean) throws java.net.MalformedURLException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newResource(java.io.File)", "public static org.eclipse.jetty.util.resource.Resource newResource(java.io.File)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newSystemResource(java.lang.String)", "public static org.eclipse.jetty.util.resource.Resource newSystemResource(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newClassPathResource(java.lang.String)", "public static org.eclipse.jetty.util.resource.Resource newClassPathResource(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.newClassPathResource(java.lang.String, boolean, boolean)", "public static org.eclipse.jetty.util.resource.Resource newClassPathResource(java.lang.String, boolean, boolean)"], ["boolean", "org.eclipse.jetty.util.resource.Resource.isContainedIn(org.eclipse.jetty.util.resource.Resource, org.eclipse.jetty.util.resource.Resource)", "public static boolean isContainedIn(org.eclipse.jetty.util.resource.Resource, org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["void", "org.eclipse.jetty.util.resource.Resource.release()", "public final void release()"], ["java.net.URI", "org.eclipse.jetty.util.resource.Resource.getURI()", "public java.net.URI getURI()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.Resource.getResource(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource getResource(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.resource.Resource.encode(java.lang.String)", "public java.lang.String encode(java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.util.resource.Resource.getAssociate()", "public java.lang.Object getAssociate()"], ["void", "org.eclipse.jetty.util.resource.Resource.setAssociate(java.lang.Object)", "public void setAssociate(java.lang.Object)"], ["java.net.URI", "org.eclipse.jetty.util.resource.Resource.getAlias()", "public java.net.URI getAlias()"], ["java.lang.String", "org.eclipse.jetty.util.resource.Resource.getListHTML(java.lang.String, boolean)", "public java.lang.String getListHTML(java.lang.String, boolean) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.resource.Resource.writeTo(java.io.OutputStream, long, long)", "public void writeTo(java.io.OutputStream, long, long) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.resource.Resource.copyTo(java.io.File)", "public void copyTo(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.Resource.getWeakETag()", "public java.lang.String getWeakETag()"], ["java.util.Collection<org.eclipse.jetty.util.resource.Resource>", "org.eclipse.jetty.util.resource.Resource.getAllResources()", "public java.util.Collection<org.eclipse.jetty.util.resource.Resource> getAllResources()"], ["java.net.URL", "org.eclipse.jetty.util.resource.Resource.toURL(java.io.File)", "public static java.net.URL toURL(java.io.File) throws java.net.MalformedURLException"], ["org.eclipse.jetty.util.resource.ResourceCollection", "org.eclipse.jetty.util.resource.ResourceCollection()", "public org.eclipse.jetty.util.resource.ResourceCollection()"], ["org.eclipse.jetty.util.resource.ResourceCollection", "org.eclipse.jetty.util.resource.ResourceCollection(org.eclipse.jetty.util.resource.Resource...)", "public org.eclipse.jetty.util.resource.ResourceCollection(org.eclipse.jetty.util.resource.Resource...)"], ["org.eclipse.jetty.util.resource.ResourceCollection", "org.eclipse.jetty.util.resource.ResourceCollection(java.lang.String[])", "public org.eclipse.jetty.util.resource.ResourceCollection(java.lang.String[])"], ["org.eclipse.jetty.util.resource.ResourceCollection", "org.eclipse.jetty.util.resource.ResourceCollection(java.lang.String)", "public org.eclipse.jetty.util.resource.ResourceCollection(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource[]", "org.eclipse.jetty.util.resource.ResourceCollection.getResources()", "public org.eclipse.jetty.util.resource.Resource[] getResources()"], ["void", "org.eclipse.jetty.util.resource.ResourceCollection.setResources(org.eclipse.jetty.util.resource.Resource[])", "public void setResources(org.eclipse.jetty.util.resource.Resource[])"], ["void", "org.eclipse.jetty.util.resource.ResourceCollection.setResourcesAsCSV(java.lang.String)", "public void setResourcesAsCSV(java.lang.String)"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.ResourceCollection.addPath(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource addPath(java.lang.String) throws java.io.IOException, java.net.MalformedURLException"], ["boolean", "org.eclipse.jetty.util.resource.ResourceCollection.delete()", "public boolean delete() throws java.lang.SecurityException"], ["boolean", "org.eclipse.jetty.util.resource.ResourceCollection.exists()", "public boolean exists()"], ["java.io.File", "org.eclipse.jetty.util.resource.ResourceCollection.getFile()", "public java.io.File getFile() throws java.io.IOException"], ["java.io.InputStream", "org.eclipse.jetty.util.resource.ResourceCollection.getInputStream()", "public java.io.InputStream getInputStream() throws java.io.IOException"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.util.resource.ResourceCollection.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.ResourceCollection.getName()", "public java.lang.String getName()"], ["java.net.URL", "org.eclipse.jetty.util.resource.ResourceCollection.getURL()", "public java.net.URL getURL()"], ["boolean", "org.eclipse.jetty.util.resource.ResourceCollection.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.ResourceCollection.lastModified()", "public long lastModified()"], ["long", "org.eclipse.jetty.util.resource.ResourceCollection.length()", "public long length()"], ["java.lang.String[]", "org.eclipse.jetty.util.resource.ResourceCollection.list()", "public java.lang.String[] list()"], ["void", "org.eclipse.jetty.util.resource.ResourceCollection.close()", "public void close()"], ["boolean", "org.eclipse.jetty.util.resource.ResourceCollection.renameTo(org.eclipse.jetty.util.resource.Resource)", "public boolean renameTo(org.eclipse.jetty.util.resource.Resource) throws java.lang.SecurityException"], ["void", "org.eclipse.jetty.util.resource.ResourceCollection.copyTo(java.io.File)", "public void copyTo(java.io.File) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.ResourceCollection.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.util.resource.ResourceCollection.isContainedIn(org.eclipse.jetty.util.resource.Resource)", "public boolean isContainedIn(org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["synchronized", "org.eclipse.jetty.util.resource.URLResource.void close()", "public synchronized void close()"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.exists()", "public boolean exists()"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.isDirectory()", "public boolean isDirectory()"], ["long", "org.eclipse.jetty.util.resource.URLResource.lastModified()", "public long lastModified()"], ["long", "org.eclipse.jetty.util.resource.URLResource.length()", "public long length()"], ["java.net.URL", "org.eclipse.jetty.util.resource.URLResource.getURL()", "public java.net.URL getURL()"], ["java.io.File", "org.eclipse.jetty.util.resource.URLResource.getFile()", "public java.io.File getFile() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.resource.URLResource.getName()", "public java.lang.String getName()"], ["synchronized", "org.eclipse.jetty.util.resource.URLResource.java.io.InputStream getInputStream()", "public synchronized java.io.InputStream getInputStream() throws java.io.IOException"], ["java.nio.channels.ReadableByteChannel", "org.eclipse.jetty.util.resource.URLResource.getReadableByteChannel()", "public java.nio.channels.ReadableByteChannel getReadableByteChannel() throws java.io.IOException"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.delete()", "public boolean delete() throws java.lang.SecurityException"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.renameTo(org.eclipse.jetty.util.resource.Resource)", "public boolean renameTo(org.eclipse.jetty.util.resource.Resource) throws java.lang.SecurityException"], ["java.lang.String[]", "org.eclipse.jetty.util.resource.URLResource.list()", "public java.lang.String[] list()"], ["org.eclipse.jetty.util.resource.Resource", "org.eclipse.jetty.util.resource.URLResource.addPath(java.lang.String)", "public org.eclipse.jetty.util.resource.Resource addPath(java.lang.String) throws java.io.IOException, java.net.MalformedURLException"], ["java.lang.String", "org.eclipse.jetty.util.resource.URLResource.toString()", "public java.lang.String toString()"], ["int", "org.eclipse.jetty.util.resource.URLResource.hashCode()", "public int hashCode()"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.getUseCaches()", "public boolean getUseCaches()"], ["boolean", "org.eclipse.jetty.util.resource.URLResource.isContainedIn(org.eclipse.jetty.util.resource.Resource)", "public boolean isContainedIn(org.eclipse.jetty.util.resource.Resource) throws java.net.MalformedURLException"], ["void", "org.eclipse.jetty.util.RolloverFileOutputStream$RollTask.run()", "public void run()"], ["org.eclipse.jetty.util.RolloverFileOutputStream", "org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String)", "public org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.util.RolloverFileOutputStream", "org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean)", "public org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean) throws java.io.IOException"], ["org.eclipse.jetty.util.RolloverFileOutputStream", "org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean, int)", "public org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean, int) throws java.io.IOException"], ["org.eclipse.jetty.util.RolloverFileOutputStream", "org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean, int, java.util.TimeZone)", "public org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean, int, java.util.TimeZone) throws java.io.IOException"], ["org.eclipse.jetty.util.RolloverFileOutputStream", "org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean, int, java.util.TimeZone, java.lang.String, java.lang.String)", "public org.eclipse.jetty.util.RolloverFileOutputStream(java.lang.String, boolean, int, java.util.TimeZone, java.lang.String, java.lang.String) throws java.io.IOException"], ["java.util.Calendar", "org.eclipse.jetty.util.RolloverFileOutputStream.toMidnight(java.util.Calendar)", "public static java.util.Calendar toMidnight(java.util.Calendar)"], ["java.lang.String", "org.eclipse.jetty.util.RolloverFileOutputStream.getFilename()", "public java.lang.String getFilename()"], ["java.lang.String", "org.eclipse.jetty.util.RolloverFileOutputStream.getDatedFilename()", "public java.lang.String getDatedFilename()"], ["int", "org.eclipse.jetty.util.RolloverFileOutputStream.getRetainDays()", "public int getRetainDays()"], ["void", "org.eclipse.jetty.util.RolloverFileOutputStream.write(byte[])", "public void write(byte[]) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.RolloverFileOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.RolloverFileOutputStream.close()", "public void close() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.Scanner$1.run()", "public void run()"], ["org.eclipse.jetty.util.Scanner$Notification[]", "org.eclipse.jetty.util.Scanner$Notification.values()", "public static org.eclipse.jetty.util.Scanner$Notification[] values()"], ["org.eclipse.jetty.util.Scanner$Notification", "org.eclipse.jetty.util.Scanner$Notification.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.Scanner$Notification valueOf(java.lang.String)"], ["org.eclipse.jetty.util.Scanner$TimeNSize", "org.eclipse.jetty.util.Scanner$TimeNSize(long, long)", "public org.eclipse.jetty.util.Scanner$TimeNSize(long, long)"], ["int", "org.eclipse.jetty.util.Scanner$TimeNSize.hashCode()", "public int hashCode()"], ["boolean", "org.eclipse.jetty.util.Scanner$TimeNSize.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.util.Scanner$TimeNSize.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.Scanner", "org.eclipse.jetty.util.Scanner()", "public org.eclipse.jetty.util.Scanner()"], ["synchronized", "org.eclipse.jetty.util.Scanner.int getScanInterval()", "public synchronized int getScanInterval()"], ["synchronized", "org.eclipse.jetty.util.Scanner.void setScanInterval(int)", "public synchronized void setScanInterval(int)"], ["void", "org.eclipse.jetty.util.Scanner.setScanDirs(java.util.List<java.io.File>)", "public void setScanDirs(java.util.List<java.io.File>)"], ["synchronized", "org.eclipse.jetty.util.Scanner.void addScanDir(java.io.File)", "public synchronized void addScanDir(java.io.File)"], ["java.util.List<java.io.File>", "org.eclipse.jetty.util.Scanner.getScanDirs()", "public java.util.List<java.io.File> getScanDirs()"], ["void", "org.eclipse.jetty.util.Scanner.setRecursive(boolean)", "public void setRecursive(boolean)"], ["boolean", "org.eclipse.jetty.util.Scanner.getRecursive()", "public boolean getRecursive()"], ["int", "org.eclipse.jetty.util.Scanner.getScanDepth()", "public int getScanDepth()"], ["void", "org.eclipse.jetty.util.Scanner.setScanDepth(int)", "public void setScanDepth(int)"], ["void", "org.eclipse.jetty.util.Scanner.setFilenameFilter(java.io.FilenameFilter)", "public void setFilenameFilter(java.io.FilenameFilter)"], ["java.io.FilenameFilter", "org.eclipse.jetty.util.Scanner.getFilenameFilter()", "public java.io.FilenameFilter getFilenameFilter()"], ["void", "org.eclipse.jetty.util.Scanner.setReportExistingFilesOnStartup(boolean)", "public void setReportExistingFilesOnStartup(boolean)"], ["boolean", "org.eclipse.jetty.util.Scanner.getReportExistingFilesOnStartup()", "public boolean getReportExistingFilesOnStartup()"], ["void", "org.eclipse.jetty.util.Scanner.setReportDirs(boolean)", "public void setReportDirs(boolean)"], ["boolean", "org.eclipse.jetty.util.Scanner.getReportDirs()", "public boolean getReportDirs()"], ["synchronized", "org.eclipse.jetty.util.Scanner.void addListener(org.eclipse.jetty.util.Scanner$Listener)", "public synchronized void addListener(org.eclipse.jetty.util.Scanner$Listener)"], ["synchronized", "org.eclipse.jetty.util.Scanner.void removeListener(org.eclipse.jetty.util.Scanner$Listener)", "public synchronized void removeListener(org.eclipse.jetty.util.Scanner$Listener)"], ["synchronized", "org.eclipse.jetty.util.Scanner.void doStart()", "public synchronized void doStart()"], ["java.util.TimerTask", "org.eclipse.jetty.util.Scanner.newTimerTask()", "public java.util.TimerTask newTimerTask()"], ["java.util.Timer", "org.eclipse.jetty.util.Scanner.newTimer()", "public java.util.Timer newTimer()"], ["void", "org.eclipse.jetty.util.Scanner.schedule()", "public void schedule()"], ["synchronized", "org.eclipse.jetty.util.Scanner.void doStop()", "public synchronized void doStop()"], ["boolean", "org.eclipse.jetty.util.Scanner.exists(java.lang.String)", "public boolean exists(java.lang.String)"], ["synchronized", "org.eclipse.jetty.util.Scanner.void scan()", "public synchronized void scan()"], ["synchronized", "org.eclipse.jetty.util.Scanner.void scanFiles()", "public synchronized void scanFiles()"], ["synchronized", "org.eclipse.jetty.util.Scanner.void reportDifferences(java.util.Map<java.lang.String, org.eclipse.jetty.util.Scanner$TimeNSize>, java.util.Map<java.lang.String, org.eclipse.jetty.util.Scanner$TimeNSize>)", "public synchronized void reportDifferences(java.util.Map<java.lang.String, org.eclipse.jetty.util.Scanner$TimeNSize>, java.util.Map<java.lang.String, org.eclipse.jetty.util.Scanner$TimeNSize>)"], ["org.eclipse.jetty.util.security.CertificateUtils", "org.eclipse.jetty.util.security.CertificateUtils()", "public org.eclipse.jetty.util.security.CertificateUtils()"], ["java.security.KeyStore", "org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(java.io.InputStream, java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public static java.security.KeyStore getKeyStore(java.io.InputStream, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception"], ["java.util.Collection<? extends java.security.cert.CRL>", "org.eclipse.jetty.util.security.CertificateUtils.loadCRL(java.lang.String)", "public static java.util.Collection<? extends java.security.cert.CRL> loadCRL(java.lang.String) throws java.lang.Exception"], ["org.eclipse.jetty.util.security.CertificateValidator", "org.eclipse.jetty.util.security.CertificateValidator(java.security.KeyStore, java.util.Collection<? extends java.security.cert.CRL>)", "public org.eclipse.jetty.util.security.CertificateValidator(java.security.KeyStore, java.util.Collection<? extends java.security.cert.CRL>)"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.validate(java.security.KeyStore)", "public void validate(java.security.KeyStore) throws java.security.cert.CertificateException"], ["java.lang.String", "org.eclipse.jetty.util.security.CertificateValidator.validate(java.security.KeyStore, java.lang.String)", "public java.lang.String validate(java.security.KeyStore, java.lang.String) throws java.security.cert.CertificateException"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.validate(java.security.KeyStore, java.security.cert.Certificate)", "public void validate(java.security.KeyStore, java.security.cert.Certificate) throws java.security.cert.CertificateException"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.validate(java.security.cert.Certificate[])", "public void validate(java.security.cert.Certificate[]) throws java.security.cert.CertificateException"], ["java.security.KeyStore", "org.eclipse.jetty.util.security.CertificateValidator.getTrustStore()", "public java.security.KeyStore getTrustStore()"], ["java.util.Collection<? extends java.security.cert.CRL>", "org.eclipse.jetty.util.security.CertificateValidator.getCrls()", "public java.util.Collection<? extends java.security.cert.CRL> getCrls()"], ["int", "org.eclipse.jetty.util.security.CertificateValidator.getMaxCertPathLength()", "public int getMaxCertPathLength()"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.setMaxCertPathLength(int)", "public void setMaxCertPathLength(int)"], ["boolean", "org.eclipse.jetty.util.security.CertificateValidator.isEnableCRLDP()", "public boolean isEnableCRLDP()"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.setEnableCRLDP(boolean)", "public void setEnableCRLDP(boolean)"], ["boolean", "org.eclipse.jetty.util.security.CertificateValidator.isEnableOCSP()", "public boolean isEnableOCSP()"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.setEnableOCSP(boolean)", "public void setEnableOCSP(boolean)"], ["java.lang.String", "org.eclipse.jetty.util.security.CertificateValidator.getOcspResponderURL()", "public java.lang.String getOcspResponderURL()"], ["void", "org.eclipse.jetty.util.security.CertificateValidator.setOcspResponderURL(java.lang.String)", "public void setOcspResponderURL(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.security.Constraint.validateMethod(java.lang.String)", "public static boolean validateMethod(java.lang.String)"], ["org.eclipse.jetty.util.security.Constraint", "org.eclipse.jetty.util.security.Constraint()", "public org.eclipse.jetty.util.security.Constraint()"], ["org.eclipse.jetty.util.security.Constraint", "org.eclipse.jetty.util.security.Constraint(java.lang.String, java.lang.String)", "public org.eclipse.jetty.util.security.Constraint(java.lang.String, java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.util.security.Constraint.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.eclipse.jetty.util.security.Constraint.setName(java.lang.String)", "public void setName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.security.Constraint.getName()", "public java.lang.String getName()"], ["void", "org.eclipse.jetty.util.security.Constraint.setRoles(java.lang.String[])", "public void setRoles(java.lang.String[])"], ["boolean", "org.eclipse.jetty.util.security.Constraint.isAnyRole()", "public boolean isAnyRole()"], ["boolean", "org.eclipse.jetty.util.security.Constraint.isAnyAuth()", "public boolean isAnyAuth()"], ["java.lang.String[]", "org.eclipse.jetty.util.security.Constraint.getRoles()", "public java.lang.String[] getRoles()"], ["boolean", "org.eclipse.jetty.util.security.Constraint.hasRole(java.lang.String)", "public boolean hasRole(java.lang.String)"], ["void", "org.eclipse.jetty.util.security.Constraint.setAuthenticate(boolean)", "public void setAuthenticate(boolean)"], ["boolean", "org.eclipse.jetty.util.security.Constraint.getAuthenticate()", "public boolean getAuthenticate()"], ["boolean", "org.eclipse.jetty.util.security.Constraint.isForbidden()", "public boolean isForbidden()"], ["void", "org.eclipse.jetty.util.security.Constraint.setDataConstraint(int)", "public void setDataConstraint(int)"], ["int", "org.eclipse.jetty.util.security.Constraint.getDataConstraint()", "public int getDataConstraint()"], ["boolean", "org.eclipse.jetty.util.security.Constraint.hasDataConstraint()", "public boolean hasDataConstraint()"], ["java.lang.String", "org.eclipse.jetty.util.security.Constraint.toString()", "public java.lang.String toString()"], ["boolean", "org.eclipse.jetty.util.security.Credential$Crypt.check(java.lang.Object)", "public boolean check(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.util.security.Credential$Crypt.crypt(java.lang.String, java.lang.String)", "public static java.lang.String crypt(java.lang.String, java.lang.String)"], ["byte[]", "org.eclipse.jetty.util.security.Credential$MD5.getDigest()", "public byte[] getDigest()"], ["boolean", "org.eclipse.jetty.util.security.Credential$MD5.check(java.lang.Object)", "public boolean check(java.lang.Object)"], ["java.lang.String", "org.eclipse.jetty.util.security.Credential$MD5.digest(java.lang.String)", "public static java.lang.String digest(java.lang.String)"], ["org.eclipse.jetty.util.security.Credential", "org.eclipse.jetty.util.security.Credential()", "public org.eclipse.jetty.util.security.Credential()"], ["org.eclipse.jetty.util.security.Credential", "org.eclipse.jetty.util.security.Credential.getCredential(java.lang.String)", "public static org.eclipse.jetty.util.security.Credential getCredential(java.lang.String)"], ["org.eclipse.jetty.util.security.Password", "org.eclipse.jetty.util.security.Password(java.lang.String)", "public org.eclipse.jetty.util.security.Password(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.security.Password.toString()", "public java.lang.String toString()"], ["java.lang.String", "org.eclipse.jetty.util.security.Password.toStarString()", "public java.lang.String toStarString()"], ["boolean", "org.eclipse.jetty.util.security.Password.check(java.lang.Object)", "public boolean check(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.security.Password.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.eclipse.jetty.util.security.Password.hashCode()", "public int hashCode()"], ["java.lang.String", "org.eclipse.jetty.util.security.Password.obfuscate(java.lang.String)", "public static java.lang.String obfuscate(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.security.Password.deobfuscate(java.lang.String)", "public static java.lang.String deobfuscate(java.lang.String)"], ["org.eclipse.jetty.util.security.Password", "org.eclipse.jetty.util.security.Password.getPassword(java.lang.String, java.lang.String, java.lang.String)", "public static org.eclipse.jetty.util.security.Password getPassword(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.util.security.Password.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["java.lang.String", "org.eclipse.jetty.util.security.UnixCrypt.crypt(java.lang.String, java.lang.String)", "public static java.lang.String crypt(java.lang.String, java.lang.String)"], ["void", "org.eclipse.jetty.util.security.UnixCrypt.main(java.lang.String[])", "public static void main(java.lang.String[])"], ["void", "org.eclipse.jetty.util.SharedBlockingCallback$Blocker.succeeded()", "public void succeeded()"], ["void", "org.eclipse.jetty.util.SharedBlockingCallback$Blocker.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "org.eclipse.jetty.util.SharedBlockingCallback$Blocker.block()", "public void block() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.SharedBlockingCallback$Blocker.close()", "public void close() throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.SharedBlockingCallback$Blocker.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.SharedBlockingCallback", "org.eclipse.jetty.util.SharedBlockingCallback()", "public org.eclipse.jetty.util.SharedBlockingCallback()"], ["org.eclipse.jetty.util.SharedBlockingCallback$Blocker", "org.eclipse.jetty.util.SharedBlockingCallback.acquire()", "public org.eclipse.jetty.util.SharedBlockingCallback$Blocker acquire() throws java.io.IOException"], ["void", "org.eclipse.jetty.util.SocketAddressResolver$Async$1$1.run()", "public void run()"], ["void", "org.eclipse.jetty.util.SocketAddressResolver$Async$1.run()", "public void run()"], ["org.eclipse.jetty.util.SocketAddressResolver$Async", "org.eclipse.jetty.util.SocketAddressResolver$Async(java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, long)", "public org.eclipse.jetty.util.SocketAddressResolver$Async(java.util.concurrent.Executor, org.eclipse.jetty.util.thread.Scheduler, long)"], ["java.util.concurrent.Executor", "org.eclipse.jetty.util.SocketAddressResolver$Async.getExecutor()", "public java.util.concurrent.Executor getExecutor()"], ["org.eclipse.jetty.util.thread.Scheduler", "org.eclipse.jetty.util.SocketAddressResolver$Async.getScheduler()", "public org.eclipse.jetty.util.thread.Scheduler getScheduler()"], ["long", "org.eclipse.jetty.util.SocketAddressResolver$Async.getTimeout()", "public long getTimeout()"], ["void", "org.eclipse.jetty.util.SocketAddressResolver$Async.resolve(java.lang.String, int, org.eclipse.jetty.util.Promise<java.net.SocketAddress>)", "public void resolve(java.lang.String, int, org.eclipse.jetty.util.Promise<java.net.SocketAddress>)"], ["org.eclipse.jetty.util.SocketAddressResolver$Sync", "org.eclipse.jetty.util.SocketAddressResolver$Sync()", "public org.eclipse.jetty.util.SocketAddressResolver$Sync()"], ["void", "org.eclipse.jetty.util.SocketAddressResolver$Sync.resolve(java.lang.String, int, org.eclipse.jetty.util.Promise<java.net.SocketAddress>)", "public void resolve(java.lang.String, int, org.eclipse.jetty.util.Promise<java.net.SocketAddress>)"], ["org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager(java.lang.String, javax.net.ssl.X509KeyManager)", "public org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager(java.lang.String, javax.net.ssl.X509KeyManager) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)", "public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)", "public java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.getClientAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[])"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.getServerAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[])"], ["java.security.cert.X509Certificate[]", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.getCertificateChain(java.lang.String)", "public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)"], ["java.security.PrivateKey", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.getPrivateKey(java.lang.String)", "public java.security.PrivateKey getPrivateKey(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)", "public java.lang.String chooseEngineServerAlias(java.lang.String, java.security.Principal[], javax.net.ssl.SSLEngine)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager.chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine)", "public java.lang.String chooseEngineClientAlias(java.lang.String[], java.security.Principal[], javax.net.ssl.SSLEngine)"], ["org.eclipse.jetty.util.ssl.AliasedX509KeyManager", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager(java.lang.String, javax.net.ssl.X509KeyManager)", "public org.eclipse.jetty.util.ssl.AliasedX509KeyManager(java.lang.String, javax.net.ssl.X509KeyManager) throws java.lang.Exception"], ["java.lang.String", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager.chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)", "public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager.chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)", "public java.lang.String chooseServerAlias(java.lang.String, java.security.Principal[], java.net.Socket)"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager.getClientAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getClientAliases(java.lang.String, java.security.Principal[])"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager.getServerAliases(java.lang.String, java.security.Principal[])", "public java.lang.String[] getServerAliases(java.lang.String, java.security.Principal[])"], ["java.security.cert.X509Certificate[]", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager.getCertificateChain(java.lang.String)", "public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)"], ["java.security.PrivateKey", "org.eclipse.jetty.util.ssl.AliasedX509KeyManager.getPrivateKey(java.lang.String)", "public java.security.PrivateKey getPrivateKey(java.lang.String)"], ["java.security.cert.X509Certificate[]", "org.eclipse.jetty.util.ssl.SslContextFactory$1.getAcceptedIssuers()", "public java.security.cert.X509Certificate[] getAcceptedIssuers()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory$1.checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)", "public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory$1.checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)", "public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)"], ["org.eclipse.jetty.util.ssl.SslContextFactory", "org.eclipse.jetty.util.ssl.SslContextFactory()", "public org.eclipse.jetty.util.ssl.SslContextFactory()"], ["org.eclipse.jetty.util.ssl.SslContextFactory", "org.eclipse.jetty.util.ssl.SslContextFactory(boolean)", "public org.eclipse.jetty.util.ssl.SslContextFactory(boolean)"], ["org.eclipse.jetty.util.ssl.SslContextFactory", "org.eclipse.jetty.util.ssl.SslContextFactory(java.lang.String)", "public org.eclipse.jetty.util.ssl.SslContextFactory(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.SslContextFactory.getExcludeProtocols()", "public java.lang.String[] getExcludeProtocols()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setExcludeProtocols(java.lang.String...)", "public void setExcludeProtocols(java.lang.String...)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.addExcludeProtocols(java.lang.String...)", "public void addExcludeProtocols(java.lang.String...)"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.SslContextFactory.getIncludeProtocols()", "public java.lang.String[] getIncludeProtocols()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setIncludeProtocols(java.lang.String...)", "public void setIncludeProtocols(java.lang.String...)"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.SslContextFactory.getExcludeCipherSuites()", "public java.lang.String[] getExcludeCipherSuites()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setExcludeCipherSuites(java.lang.String...)", "public void setExcludeCipherSuites(java.lang.String...)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.addExcludeCipherSuites(java.lang.String...)", "public void addExcludeCipherSuites(java.lang.String...)"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.SslContextFactory.getIncludeCipherSuites()", "public java.lang.String[] getIncludeCipherSuites()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setIncludeCipherSuites(java.lang.String...)", "public void setIncludeCipherSuites(java.lang.String...)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getKeyStorePath()", "public java.lang.String getKeyStorePath()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyStorePath(java.lang.String)", "public void setKeyStorePath(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getKeyStoreProvider()", "public java.lang.String getKeyStoreProvider()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyStoreProvider(java.lang.String)", "public void setKeyStoreProvider(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getKeyStoreType()", "public java.lang.String getKeyStoreType()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyStoreType(java.lang.String)", "public void setKeyStoreType(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getCertAlias()", "public java.lang.String getCertAlias()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setCertAlias(java.lang.String)", "public void setCertAlias(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getTrustStore()", "public java.lang.String getTrustStore()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustStorePath(java.lang.String)", "public void setTrustStorePath(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getTrustStoreProvider()", "public java.lang.String getTrustStoreProvider()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustStoreProvider(java.lang.String)", "public void setTrustStoreProvider(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getTrustStoreType()", "public java.lang.String getTrustStoreType()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustStoreType(java.lang.String)", "public void setTrustStoreType(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.getNeedClientAuth()", "public boolean getNeedClientAuth()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setNeedClientAuth(boolean)", "public void setNeedClientAuth(boolean)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.getWantClientAuth()", "public boolean getWantClientAuth()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setWantClientAuth(boolean)", "public void setWantClientAuth(boolean)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isValidateCerts()", "public boolean isValidateCerts()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setValidateCerts(boolean)", "public void setValidateCerts(boolean)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isValidatePeerCerts()", "public boolean isValidatePeerCerts()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setValidatePeerCerts(boolean)", "public void setValidatePeerCerts(boolean)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyStorePassword(java.lang.String)", "public void setKeyStorePassword(java.lang.String)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyManagerPassword(java.lang.String)", "public void setKeyManagerPassword(java.lang.String)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustStorePassword(java.lang.String)", "public void setTrustStorePassword(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getProvider()", "public java.lang.String getProvider()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setProvider(java.lang.String)", "public void setProvider(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getProtocol()", "public java.lang.String getProtocol()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setProtocol(java.lang.String)", "public void setProtocol(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getSecureRandomAlgorithm()", "public java.lang.String getSecureRandomAlgorithm()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setSecureRandomAlgorithm(java.lang.String)", "public void setSecureRandomAlgorithm(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getSslKeyManagerFactoryAlgorithm()", "public java.lang.String getSslKeyManagerFactoryAlgorithm()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setSslKeyManagerFactoryAlgorithm(java.lang.String)", "public void setSslKeyManagerFactoryAlgorithm(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getTrustManagerFactoryAlgorithm()", "public java.lang.String getTrustManagerFactoryAlgorithm()"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isTrustAll()", "public boolean isTrustAll()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustAll(boolean)", "public void setTrustAll(boolean)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustManagerFactoryAlgorithm(java.lang.String)", "public void setTrustManagerFactoryAlgorithm(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isRenegotiationAllowed()", "public boolean isRenegotiationAllowed()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setRenegotiationAllowed(boolean)", "public void setRenegotiationAllowed(boolean)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getCrlPath()", "public java.lang.String getCrlPath()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setCrlPath(java.lang.String)", "public void setCrlPath(java.lang.String)"], ["int", "org.eclipse.jetty.util.ssl.SslContextFactory.getMaxCertPathLength()", "public int getMaxCertPathLength()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setMaxCertPathLength(int)", "public void setMaxCertPathLength(int)"], ["javax.net.ssl.SSLContext", "org.eclipse.jetty.util.ssl.SslContextFactory.getSslContext()", "public javax.net.ssl.SSLContext getSslContext()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setSslContext(javax.net.ssl.SSLContext)", "public void setSslContext(javax.net.ssl.SSLContext)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setEndpointIdentificationAlgorithm(java.lang.String)", "public void setEndpointIdentificationAlgorithm(java.lang.String)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.checkKeyStore()", "public void checkKeyStore()"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.SslContextFactory.selectProtocols(java.lang.String[], java.lang.String[])", "public java.lang.String[] selectProtocols(java.lang.String[], java.lang.String[])"], ["java.lang.String[]", "org.eclipse.jetty.util.ssl.SslContextFactory.selectCipherSuites(java.lang.String[], java.lang.String[])", "public java.lang.String[] selectCipherSuites(java.lang.String[], java.lang.String[])"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isEnableCRLDP()", "public boolean isEnableCRLDP()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setEnableCRLDP(boolean)", "public void setEnableCRLDP(boolean)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isEnableOCSP()", "public boolean isEnableOCSP()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setEnableOCSP(boolean)", "public void setEnableOCSP(boolean)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.getOcspResponderURL()", "public java.lang.String getOcspResponderURL()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setOcspResponderURL(java.lang.String)", "public void setOcspResponderURL(java.lang.String)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyStore(java.security.KeyStore)", "public void setKeyStore(java.security.KeyStore)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustStore(java.security.KeyStore)", "public void setTrustStore(java.security.KeyStore)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setKeyStoreResource(org.eclipse.jetty.util.resource.Resource)", "public void setKeyStoreResource(org.eclipse.jetty.util.resource.Resource)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setTrustStoreResource(org.eclipse.jetty.util.resource.Resource)", "public void setTrustStoreResource(org.eclipse.jetty.util.resource.Resource)"], ["boolean", "org.eclipse.jetty.util.ssl.SslContextFactory.isSessionCachingEnabled()", "public boolean isSessionCachingEnabled()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setSessionCachingEnabled(boolean)", "public void setSessionCachingEnabled(boolean)"], ["int", "org.eclipse.jetty.util.ssl.SslContextFactory.getSslSessionCacheSize()", "public int getSslSessionCacheSize()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setSslSessionCacheSize(int)", "public void setSslSessionCacheSize(int)"], ["int", "org.eclipse.jetty.util.ssl.SslContextFactory.getSslSessionTimeout()", "public int getSslSessionTimeout()"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.setSslSessionTimeout(int)", "public void setSslSessionTimeout(int)"], ["javax.net.ssl.SSLServerSocket", "org.eclipse.jetty.util.ssl.SslContextFactory.newSslServerSocket(java.lang.String, int, int)", "public javax.net.ssl.SSLServerSocket newSslServerSocket(java.lang.String, int, int) throws java.io.IOException"], ["javax.net.ssl.SSLSocket", "org.eclipse.jetty.util.ssl.SslContextFactory.newSslSocket()", "public javax.net.ssl.SSLSocket newSslSocket() throws java.io.IOException"], ["javax.net.ssl.SSLEngine", "org.eclipse.jetty.util.ssl.SslContextFactory.newSSLEngine()", "public javax.net.ssl.SSLEngine newSSLEngine()"], ["javax.net.ssl.SSLEngine", "org.eclipse.jetty.util.ssl.SslContextFactory.newSSLEngine(java.lang.String, int)", "public javax.net.ssl.SSLEngine newSSLEngine(java.lang.String, int)"], ["javax.net.ssl.SSLEngine", "org.eclipse.jetty.util.ssl.SslContextFactory.newSSLEngine(java.net.InetSocketAddress)", "public javax.net.ssl.SSLEngine newSSLEngine(java.net.InetSocketAddress)"], ["void", "org.eclipse.jetty.util.ssl.SslContextFactory.customize(javax.net.ssl.SSLEngine)", "public void customize(javax.net.ssl.SSLEngine)"], ["java.security.cert.X509Certificate[]", "org.eclipse.jetty.util.ssl.SslContextFactory.getCertChain(javax.net.ssl.SSLSession)", "public static java.security.cert.X509Certificate[] getCertChain(javax.net.ssl.SSLSession)"], ["int", "org.eclipse.jetty.util.ssl.SslContextFactory.deduceKeyLength(java.lang.String)", "public static int deduceKeyLength(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslContextFactory.toString()", "public java.lang.String toString()"], ["int", "org.eclipse.jetty.util.ssl.SslSelectionDump$1.compare(java.lang.String, java.lang.String)", "public int compare(java.lang.String, java.lang.String)"], ["int", "org.eclipse.jetty.util.ssl.SslSelectionDump$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["org.eclipse.jetty.util.ssl.SslSelectionDump$CaptionedList", "org.eclipse.jetty.util.ssl.SslSelectionDump$CaptionedList(java.lang.String)", "public org.eclipse.jetty.util.ssl.SslSelectionDump$CaptionedList(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslSelectionDump$CaptionedList.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.util.ssl.SslSelectionDump$CaptionedList.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.util.ssl.SslSelectionDump", "org.eclipse.jetty.util.ssl.SslSelectionDump(java.lang.String, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[])", "public org.eclipse.jetty.util.ssl.SslSelectionDump(java.lang.String, java.lang.String[], java.lang.String[], java.lang.String[], java.lang.String[])"], ["java.lang.String", "org.eclipse.jetty.util.ssl.SslSelectionDump.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.util.ssl.SslSelectionDump.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.util.statistic.CounterStatistic", "org.eclipse.jetty.util.statistic.CounterStatistic()", "public org.eclipse.jetty.util.statistic.CounterStatistic()"], ["void", "org.eclipse.jetty.util.statistic.CounterStatistic.reset()", "public void reset()"], ["void", "org.eclipse.jetty.util.statistic.CounterStatistic.reset(long)", "public void reset(long)"], ["long", "org.eclipse.jetty.util.statistic.CounterStatistic.add(long)", "public long add(long)"], ["long", "org.eclipse.jetty.util.statistic.CounterStatistic.increment()", "public long increment()"], ["long", "org.eclipse.jetty.util.statistic.CounterStatistic.decrement()", "public long decrement()"], ["long", "org.eclipse.jetty.util.statistic.CounterStatistic.getMax()", "public long getMax()"], ["long", "org.eclipse.jetty.util.statistic.CounterStatistic.getCurrent()", "public long getCurrent()"], ["long", "org.eclipse.jetty.util.statistic.CounterStatistic.getTotal()", "public long getTotal()"], ["java.lang.String", "org.eclipse.jetty.util.statistic.CounterStatistic.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.statistic.SampleStatistic", "org.eclipse.jetty.util.statistic.SampleStatistic()", "public org.eclipse.jetty.util.statistic.SampleStatistic()"], ["void", "org.eclipse.jetty.util.statistic.SampleStatistic.reset()", "public void reset()"], ["void", "org.eclipse.jetty.util.statistic.SampleStatistic.set(long)", "public void set(long)"], ["long", "org.eclipse.jetty.util.statistic.SampleStatistic.getMax()", "public long getMax()"], ["long", "org.eclipse.jetty.util.statistic.SampleStatistic.getTotal()", "public long getTotal()"], ["long", "org.eclipse.jetty.util.statistic.SampleStatistic.getCount()", "public long getCount()"], ["double", "org.eclipse.jetty.util.statistic.SampleStatistic.getMean()", "public double getMean()"], ["double", "org.eclipse.jetty.util.statistic.SampleStatistic.getVariance()", "public double getVariance()"], ["double", "org.eclipse.jetty.util.statistic.SampleStatistic.getStdDev()", "public double getStdDev()"], ["java.lang.String", "org.eclipse.jetty.util.statistic.SampleStatistic.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.StringUtil$CsvSplitState[]", "org.eclipse.jetty.util.StringUtil$CsvSplitState.values()", "public static org.eclipse.jetty.util.StringUtil$CsvSplitState[] values()"], ["org.eclipse.jetty.util.StringUtil$CsvSplitState", "org.eclipse.jetty.util.StringUtil$CsvSplitState.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.StringUtil$CsvSplitState valueOf(java.lang.String)"], ["org.eclipse.jetty.util.StringUtil", "org.eclipse.jetty.util.StringUtil()", "public org.eclipse.jetty.util.StringUtil()"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.normalizeCharset(java.lang.String)", "public static java.lang.String normalizeCharset(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.normalizeCharset(java.lang.String, int, int)", "public static java.lang.String normalizeCharset(java.lang.String, int, int)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.asciiToLowerCase(java.lang.String)", "public static java.lang.String asciiToLowerCase(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.StringUtil.startsWithIgnoreCase(java.lang.String, java.lang.String)", "public static boolean startsWithIgnoreCase(java.lang.String, java.lang.String)"], ["boolean", "org.eclipse.jetty.util.StringUtil.endsWithIgnoreCase(java.lang.String, java.lang.String)", "public static boolean endsWithIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.eclipse.jetty.util.StringUtil.indexFrom(java.lang.String, java.lang.String)", "public static int indexFrom(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.replace(java.lang.String, java.lang.String, java.lang.String)", "public static java.lang.String replace(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.unquote(java.lang.String)", "public static java.lang.String unquote(java.lang.String)"], ["void", "org.eclipse.jetty.util.StringUtil.append(java.lang.StringBuilder, java.lang.String, int, int)", "public static void append(java.lang.StringBuilder, java.lang.String, int, int)"], ["void", "org.eclipse.jetty.util.StringUtil.append(java.lang.StringBuilder, byte, int)", "public static void append(java.lang.StringBuilder, byte, int)"], ["void", "org.eclipse.jetty.util.StringUtil.append2digits(java.lang.StringBuffer, int)", "public static void append2digits(java.lang.StringBuffer, int)"], ["void", "org.eclipse.jetty.util.StringUtil.append2digits(java.lang.StringBuilder, int)", "public static void append2digits(java.lang.StringBuilder, int)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.nonNull(java.lang.String)", "public static java.lang.String nonNull(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.StringUtil.equals(java.lang.String, char[], int, int)", "public static boolean equals(java.lang.String, char[], int, int)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.toUTF8String(byte[], int, int)", "public static java.lang.String toUTF8String(byte[], int, int)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.toString(byte[], int, int, java.lang.String)", "public static java.lang.String toString(byte[], int, int, java.lang.String)"], ["int", "org.eclipse.jetty.util.StringUtil.indexOfControlChars(java.lang.String)", "public static int indexOfControlChars(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.StringUtil.isBlank(java.lang.String)", "public static boolean isBlank(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.StringUtil.isNotBlank(java.lang.String)", "public static boolean isNotBlank(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.StringUtil.isUTF8(java.lang.String)", "public static boolean isUTF8(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.printable(java.lang.String)", "public static java.lang.String printable(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.printable(byte[])", "public static java.lang.String printable(byte[])"], ["byte[]", "org.eclipse.jetty.util.StringUtil.getBytes(java.lang.String)", "public static byte[] getBytes(java.lang.String)"], ["byte[]", "org.eclipse.jetty.util.StringUtil.getUtf8Bytes(java.lang.String)", "public static byte[] getUtf8Bytes(java.lang.String)"], ["byte[]", "org.eclipse.jetty.util.StringUtil.getBytes(java.lang.String, java.lang.String)", "public static byte[] getBytes(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.sidBytesToString(byte[])", "public static java.lang.String sidBytesToString(byte[])"], ["byte[]", "org.eclipse.jetty.util.StringUtil.sidStringToBytes(java.lang.String)", "public static byte[] sidStringToBytes(java.lang.String)"], ["int", "org.eclipse.jetty.util.StringUtil.toInt(java.lang.String, int)", "public static int toInt(java.lang.String, int)"], ["long", "org.eclipse.jetty.util.StringUtil.toLong(java.lang.String)", "public static long toLong(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.truncate(java.lang.String, int)", "public static java.lang.String truncate(java.lang.String, int)"], ["java.lang.String[]", "org.eclipse.jetty.util.StringUtil.arrayFromString(java.lang.String)", "public static java.lang.String[] arrayFromString(java.lang.String)"], ["java.lang.String[]", "org.eclipse.jetty.util.StringUtil.csvSplit(java.lang.String)", "public static java.lang.String[] csvSplit(java.lang.String)"], ["java.lang.String[]", "org.eclipse.jetty.util.StringUtil.csvSplit(java.lang.String, int, int)", "public static java.lang.String[] csvSplit(java.lang.String, int, int)"], ["java.util.List<java.lang.String>", "org.eclipse.jetty.util.StringUtil.csvSplit(java.util.List<java.lang.String>, java.lang.String, int, int)", "public static java.util.List<java.lang.String> csvSplit(java.util.List<java.lang.String>, java.lang.String, int, int)"], ["java.lang.String", "org.eclipse.jetty.util.StringUtil.sanitizeXmlString(java.lang.String)", "public static java.lang.String sanitizeXmlString(java.lang.String)"], ["org.eclipse.jetty.util.thread.ExecutorThreadPool", "org.eclipse.jetty.util.thread.ExecutorThreadPool(java.util.concurrent.ExecutorService)", "public org.eclipse.jetty.util.thread.ExecutorThreadPool(java.util.concurrent.ExecutorService)"], ["org.eclipse.jetty.util.thread.ExecutorThreadPool", "org.eclipse.jetty.util.thread.ExecutorThreadPool()", "public org.eclipse.jetty.util.thread.ExecutorThreadPool()"], ["org.eclipse.jetty.util.thread.ExecutorThreadPool", "org.eclipse.jetty.util.thread.ExecutorThreadPool(int)", "public org.eclipse.jetty.util.thread.ExecutorThreadPool(int)"], ["org.eclipse.jetty.util.thread.ExecutorThreadPool", "org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, long)", "public org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, long)"], ["org.eclipse.jetty.util.thread.ExecutorThreadPool", "org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, long, java.util.concurrent.TimeUnit)", "public org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, long, java.util.concurrent.TimeUnit)"], ["org.eclipse.jetty.util.thread.ExecutorThreadPool", "org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "public org.eclipse.jetty.util.thread.ExecutorThreadPool(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue<java.lang.Runnable>)"], ["void", "org.eclipse.jetty.util.thread.ExecutorThreadPool.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["boolean", "org.eclipse.jetty.util.thread.ExecutorThreadPool.dispatch(java.lang.Runnable)", "public boolean dispatch(java.lang.Runnable)"], ["int", "org.eclipse.jetty.util.thread.ExecutorThreadPool.getIdleThreads()", "public int getIdleThreads()"], ["int", "org.eclipse.jetty.util.thread.ExecutorThreadPool.getThreads()", "public int getThreads()"], ["boolean", "org.eclipse.jetty.util.thread.ExecutorThreadPool.isLowOnThreads()", "public boolean isLowOnThreads()"], ["void", "org.eclipse.jetty.util.thread.ExecutorThreadPool.join()", "public void join() throws java.lang.InterruptedException"], ["boolean", "org.eclipse.jetty.util.thread.NonBlockingThread.isNonBlockingThread()", "public static boolean isNonBlockingThread()"], ["org.eclipse.jetty.util.thread.NonBlockingThread", "org.eclipse.jetty.util.thread.NonBlockingThread(java.lang.Runnable)", "public org.eclipse.jetty.util.thread.NonBlockingThread(java.lang.Runnable)"], ["void", "org.eclipse.jetty.util.thread.NonBlockingThread.run()", "public void run()"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool$1.run()", "public void run()"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool$2.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.thread.QueuedThreadPool$2.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool$3.run()", "public void run()"], ["org.eclipse.jetty.util.thread.QueuedThreadPool", "org.eclipse.jetty.util.thread.QueuedThreadPool()", "public org.eclipse.jetty.util.thread.QueuedThreadPool()"], ["org.eclipse.jetty.util.thread.QueuedThreadPool", "org.eclipse.jetty.util.thread.QueuedThreadPool(int)", "public org.eclipse.jetty.util.thread.QueuedThreadPool(int)"], ["org.eclipse.jetty.util.thread.QueuedThreadPool", "org.eclipse.jetty.util.thread.QueuedThreadPool(int, int)", "public org.eclipse.jetty.util.thread.QueuedThreadPool(int, int)"], ["org.eclipse.jetty.util.thread.QueuedThreadPool", "org.eclipse.jetty.util.thread.QueuedThreadPool(int, int, int)", "public org.eclipse.jetty.util.thread.QueuedThreadPool(int, int, int)"], ["org.eclipse.jetty.util.thread.QueuedThreadPool", "org.eclipse.jetty.util.thread.QueuedThreadPool(int, int, int, java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "public org.eclipse.jetty.util.thread.QueuedThreadPool(int, int, int, java.util.concurrent.BlockingQueue<java.lang.Runnable>)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setDaemon(boolean)", "public void setDaemon(boolean)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setIdleTimeout(int)", "public void setIdleTimeout(int)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setMaxThreads(int)", "public void setMaxThreads(int)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setMinThreads(int)", "public void setMinThreads(int)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setName(java.lang.String)", "public void setName(java.lang.String)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setThreadsPriority(int)", "public void setThreadsPriority(int)"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getIdleTimeout()", "public int getIdleTimeout()"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getMaxThreads()", "public int getMaxThreads()"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getMinThreads()", "public int getMinThreads()"], ["java.lang.String", "org.eclipse.jetty.util.thread.QueuedThreadPool.getName()", "public java.lang.String getName()"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getThreadsPriority()", "public int getThreadsPriority()"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getQueueSize()", "public int getQueueSize()"], ["boolean", "org.eclipse.jetty.util.thread.QueuedThreadPool.isDaemon()", "public boolean isDaemon()"], ["boolean", "org.eclipse.jetty.util.thread.QueuedThreadPool.isDetailedDump()", "public boolean isDetailedDump()"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setDetailedDump(boolean)", "public void setDetailedDump(boolean)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.execute(java.lang.Runnable)", "public void execute(java.lang.Runnable)"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.join()", "public void join() throws java.lang.InterruptedException"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getThreads()", "public int getThreads()"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getIdleThreads()", "public int getIdleThreads()"], ["int", "org.eclipse.jetty.util.thread.QueuedThreadPool.getBusyThreads()", "public int getBusyThreads()"], ["boolean", "org.eclipse.jetty.util.thread.QueuedThreadPool.isLowOnThreads()", "public boolean isLowOnThreads()"], ["java.lang.String", "org.eclipse.jetty.util.thread.QueuedThreadPool.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.thread.QueuedThreadPool.toString()", "public java.lang.String toString()"], ["void", "org.eclipse.jetty.util.thread.QueuedThreadPool.setQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>)", "public void setQueue(java.util.concurrent.BlockingQueue<java.lang.Runnable>)"], ["boolean", "org.eclipse.jetty.util.thread.QueuedThreadPool.interruptThread(long)", "public boolean interruptThread(long)"], ["java.lang.String", "org.eclipse.jetty.util.thread.QueuedThreadPool.dumpThread(long)", "public java.lang.String dumpThread(long)"], ["java.lang.Thread", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$1.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["boolean", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$2.cancel()", "public boolean cancel()"], ["org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask(java.util.concurrent.ScheduledFuture<?>)", "public org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask(java.util.concurrent.ScheduledFuture<?>)"], ["boolean", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask.cancel()", "public boolean cancel()"], ["org.eclipse.jetty.util.thread.ScheduledExecutorScheduler", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler()", "public org.eclipse.jetty.util.thread.ScheduledExecutorScheduler()"], ["org.eclipse.jetty.util.thread.ScheduledExecutorScheduler", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler(java.lang.String, boolean)", "public org.eclipse.jetty.util.thread.ScheduledExecutorScheduler(java.lang.String, boolean)"], ["org.eclipse.jetty.util.thread.ScheduledExecutorScheduler", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler(java.lang.String, boolean, java.lang.ClassLoader)", "public org.eclipse.jetty.util.thread.ScheduledExecutorScheduler(java.lang.String, boolean, java.lang.ClassLoader)"], ["org.eclipse.jetty.util.thread.Scheduler$Task", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public org.eclipse.jetty.util.thread.Scheduler$Task schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.dump()", "public java.lang.String dump()"], ["void", "org.eclipse.jetty.util.thread.ScheduledExecutorScheduler.dump(java.lang.Appendable, java.lang.String)", "public void dump(java.lang.Appendable, java.lang.String) throws java.io.IOException"], ["org.eclipse.jetty.util.thread.ShutdownThread", "org.eclipse.jetty.util.thread.ShutdownThread.getInstance()", "public static org.eclipse.jetty.util.thread.ShutdownThread getInstance()"], ["synchronized", "org.eclipse.jetty.util.thread.ShutdownThread.void register(org.eclipse.jetty.util.component.LifeCycle...)", "public static synchronized void register(org.eclipse.jetty.util.component.LifeCycle...)"], ["synchronized", "org.eclipse.jetty.util.thread.ShutdownThread.void register(int, org.eclipse.jetty.util.component.LifeCycle...)", "public static synchronized void register(int, org.eclipse.jetty.util.component.LifeCycle...)"], ["synchronized", "org.eclipse.jetty.util.thread.ShutdownThread.void deregister(org.eclipse.jetty.util.component.LifeCycle)", "public static synchronized void deregister(org.eclipse.jetty.util.component.LifeCycle)"], ["synchronized", "org.eclipse.jetty.util.thread.ShutdownThread.boolean isRegistered(org.eclipse.jetty.util.component.LifeCycle)", "public static synchronized boolean isRegistered(org.eclipse.jetty.util.component.LifeCycle)"], ["void", "org.eclipse.jetty.util.thread.ShutdownThread.run()", "public void run()"], ["org.eclipse.jetty.util.thread.SpinLock$Lock", "org.eclipse.jetty.util.thread.SpinLock$Lock(org.eclipse.jetty.util.thread.SpinLock)", "public org.eclipse.jetty.util.thread.SpinLock$Lock(org.eclipse.jetty.util.thread.SpinLock)"], ["void", "org.eclipse.jetty.util.thread.SpinLock$Lock.close()", "public void close()"], ["org.eclipse.jetty.util.thread.SpinLock", "org.eclipse.jetty.util.thread.SpinLock()", "public org.eclipse.jetty.util.thread.SpinLock()"], ["org.eclipse.jetty.util.thread.SpinLock$Lock", "org.eclipse.jetty.util.thread.SpinLock.lock()", "public org.eclipse.jetty.util.thread.SpinLock$Lock lock()"], ["boolean", "org.eclipse.jetty.util.thread.SpinLock.isLocked()", "public boolean isLocked()"], ["boolean", "org.eclipse.jetty.util.thread.SpinLock.isLockedThread()", "public boolean isLockedThread()"], ["org.eclipse.jetty.util.thread.Sweeper", "org.eclipse.jetty.util.thread.Sweeper(org.eclipse.jetty.util.thread.Scheduler, long)", "public org.eclipse.jetty.util.thread.Sweeper(org.eclipse.jetty.util.thread.Scheduler, long)"], ["int", "org.eclipse.jetty.util.thread.Sweeper.getSize()", "public int getSize()"], ["boolean", "org.eclipse.jetty.util.thread.Sweeper.offer(org.eclipse.jetty.util.thread.Sweeper$Sweepable)", "public boolean offer(org.eclipse.jetty.util.thread.Sweeper$Sweepable)"], ["boolean", "org.eclipse.jetty.util.thread.Sweeper.remove(org.eclipse.jetty.util.thread.Sweeper$Sweepable)", "public boolean remove(org.eclipse.jetty.util.thread.Sweeper$Sweepable)"], ["void", "org.eclipse.jetty.util.thread.Sweeper.run()", "public void run()"], ["void", "org.eclipse.jetty.util.thread.TimerScheduler$SimpleTask.run()", "public void run()"], ["java.lang.String", "org.eclipse.jetty.util.thread.TimerScheduler$SimpleTask.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.thread.TimerScheduler", "org.eclipse.jetty.util.thread.TimerScheduler()", "public org.eclipse.jetty.util.thread.TimerScheduler()"], ["org.eclipse.jetty.util.thread.TimerScheduler", "org.eclipse.jetty.util.thread.TimerScheduler(java.lang.String, boolean)", "public org.eclipse.jetty.util.thread.TimerScheduler(java.lang.String, boolean)"], ["org.eclipse.jetty.util.thread.Scheduler$Task", "org.eclipse.jetty.util.thread.TimerScheduler.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)", "public org.eclipse.jetty.util.thread.Scheduler$Task schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["void", "org.eclipse.jetty.util.thread.TimerScheduler.run()", "public void run()"], ["org.eclipse.jetty.util.TreeTrie", "org.eclipse.jetty.util.TreeTrie()", "public org.eclipse.jetty.util.TreeTrie()"], ["boolean", "org.eclipse.jetty.util.TreeTrie.put(java.lang.String, V)", "public boolean put(java.lang.String, V)"], ["V", "org.eclipse.jetty.util.TreeTrie.get(java.lang.String, int, int)", "public V get(java.lang.String, int, int)"], ["V", "org.eclipse.jetty.util.TreeTrie.get(java.nio.ByteBuffer, int, int)", "public V get(java.nio.ByteBuffer, int, int)"], ["V", "org.eclipse.jetty.util.TreeTrie.getBest(byte[], int, int)", "public V getBest(byte[], int, int)"], ["V", "org.eclipse.jetty.util.TreeTrie.getBest(java.lang.String, int, int)", "public V getBest(java.lang.String, int, int)"], ["V", "org.eclipse.jetty.util.TreeTrie.getBest(java.nio.ByteBuffer, int, int)", "public V getBest(java.nio.ByteBuffer, int, int)"], ["java.lang.String", "org.eclipse.jetty.util.TreeTrie.toString()", "public java.lang.String toString()"], ["java.util.Set<java.lang.String>", "org.eclipse.jetty.util.TreeTrie.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "org.eclipse.jetty.util.TreeTrie.isFull()", "public boolean isFull()"], ["org.eclipse.jetty.util.TypeUtil", "org.eclipse.jetty.util.TypeUtil()", "public org.eclipse.jetty.util.TypeUtil()"], ["<T> java.util.List<T>", "org.eclipse.jetty.util.TypeUtil.asList(T[])", "public static <T> java.util.List<T> asList(T[])"], ["java.lang.Class<?>", "org.eclipse.jetty.util.TypeUtil.fromName(java.lang.String)", "public static java.lang.Class<?> fromName(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.TypeUtil.toName(java.lang.Class<?>)", "public static java.lang.String toName(java.lang.Class<?>)"], ["java.lang.Object", "org.eclipse.jetty.util.TypeUtil.valueOf(java.lang.Class<?>, java.lang.String)", "public static java.lang.Object valueOf(java.lang.Class<?>, java.lang.String)"], ["java.lang.Object", "org.eclipse.jetty.util.TypeUtil.valueOf(java.lang.String, java.lang.String)", "public static java.lang.Object valueOf(java.lang.String, java.lang.String)"], ["int", "org.eclipse.jetty.util.TypeUtil.parseInt(java.lang.String, int, int, int)", "public static int parseInt(java.lang.String, int, int, int) throws java.lang.NumberFormatException"], ["int", "org.eclipse.jetty.util.TypeUtil.parseInt(byte[], int, int, int)", "public static int parseInt(byte[], int, int, int) throws java.lang.NumberFormatException"], ["byte[]", "org.eclipse.jetty.util.TypeUtil.parseBytes(java.lang.String, int)", "public static byte[] parseBytes(java.lang.String, int)"], ["java.lang.String", "org.eclipse.jetty.util.TypeUtil.toString(byte[], int)", "public static java.lang.String toString(byte[], int)"], ["byte", "org.eclipse.jetty.util.TypeUtil.convertHexDigit(byte)", "public static byte convertHexDigit(byte)"], ["int", "org.eclipse.jetty.util.TypeUtil.convertHexDigit(int)", "public static int convertHexDigit(int)"], ["void", "org.eclipse.jetty.util.TypeUtil.toHex(byte, java.lang.Appendable)", "public static void toHex(byte, java.lang.Appendable)"], ["void", "org.eclipse.jetty.util.TypeUtil.toHex(int, java.lang.Appendable)", "public static void toHex(int, java.lang.Appendable) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.TypeUtil.toHex(long, java.lang.Appendable)", "public static void toHex(long, java.lang.Appendable) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.TypeUtil.toHexString(byte)", "public static java.lang.String toHexString(byte)"], ["java.lang.String", "org.eclipse.jetty.util.TypeUtil.toHexString(byte[])", "public static java.lang.String toHexString(byte[])"], ["java.lang.String", "org.eclipse.jetty.util.TypeUtil.toHexString(byte[], int, int)", "public static java.lang.String toHexString(byte[], int, int)"], ["byte[]", "org.eclipse.jetty.util.TypeUtil.fromHexString(java.lang.String)", "public static byte[] fromHexString(java.lang.String)"], ["void", "org.eclipse.jetty.util.TypeUtil.dump(java.lang.Class<?>)", "public static void dump(java.lang.Class<?>)"], ["void", "org.eclipse.jetty.util.TypeUtil.dump(java.lang.ClassLoader)", "public static void dump(java.lang.ClassLoader)"], ["java.lang.Object", "org.eclipse.jetty.util.TypeUtil.call(java.lang.Class<?>, java.lang.String, java.lang.Object, java.lang.Object[])", "public static java.lang.Object call(java.lang.Class<?>, java.lang.String, java.lang.Object, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException"], ["java.lang.Object", "org.eclipse.jetty.util.TypeUtil.construct(java.lang.Class<?>, java.lang.Object[])", "public static java.lang.Object construct(java.lang.Class<?>, java.lang.Object[]) throws java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException"], ["java.lang.Object", "org.eclipse.jetty.util.TypeUtil.construct(java.lang.Class<?>, java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>)", "public static java.lang.Object construct(java.lang.Class<?>, java.lang.Object[], java.util.Map<java.lang.String, java.lang.Object>) throws java.lang.reflect.InvocationTargetException, java.lang.NoSuchMethodException"], ["boolean", "org.eclipse.jetty.util.TypeUtil.isTrue(java.lang.Object)", "public static boolean isTrue(java.lang.Object)"], ["boolean", "org.eclipse.jetty.util.TypeUtil.isFalse(java.lang.Object)", "public static boolean isFalse(java.lang.Object)"], ["org.eclipse.jetty.util.Uptime$DefaultImpl", "org.eclipse.jetty.util.Uptime$DefaultImpl()", "public org.eclipse.jetty.util.Uptime$DefaultImpl()"], ["long", "org.eclipse.jetty.util.Uptime$DefaultImpl.getUptime()", "public long getUptime()"], ["org.eclipse.jetty.util.Uptime", "org.eclipse.jetty.util.Uptime.getInstance()", "public static org.eclipse.jetty.util.Uptime getInstance()"], ["org.eclipse.jetty.util.Uptime$Impl", "org.eclipse.jetty.util.Uptime.getImpl()", "public org.eclipse.jetty.util.Uptime$Impl getImpl()"], ["void", "org.eclipse.jetty.util.Uptime.setImpl(org.eclipse.jetty.util.Uptime$Impl)", "public void setImpl(org.eclipse.jetty.util.Uptime$Impl)"], ["long", "org.eclipse.jetty.util.Uptime.getUptime()", "public static long getUptime()"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.encodePath(java.lang.String)", "public static java.lang.String encodePath(java.lang.String)"], ["java.lang.StringBuilder", "org.eclipse.jetty.util.URIUtil.encodePath(java.lang.StringBuilder, java.lang.String)", "public static java.lang.StringBuilder encodePath(java.lang.StringBuilder, java.lang.String)"], ["java.lang.StringBuilder", "org.eclipse.jetty.util.URIUtil.encodeString(java.lang.StringBuilder, java.lang.String, java.lang.String)", "public static java.lang.StringBuilder encodeString(java.lang.StringBuilder, java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.decodePath(java.lang.String)", "public static java.lang.String decodePath(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.decodePath(byte[], int, int)", "public static java.lang.String decodePath(byte[], int, int)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.addPaths(java.lang.String, java.lang.String)", "public static java.lang.String addPaths(java.lang.String, java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.parentPath(java.lang.String)", "public static java.lang.String parentPath(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.canonicalPath(java.lang.String)", "public static java.lang.String canonicalPath(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.compactPath(java.lang.String)", "public static java.lang.String compactPath(java.lang.String)"], ["boolean", "org.eclipse.jetty.util.URIUtil.hasScheme(java.lang.String)", "public static boolean hasScheme(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.URIUtil.newURI(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)", "public static java.lang.String newURI(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String)"], ["java.lang.StringBuilder", "org.eclipse.jetty.util.URIUtil.newURIBuilder(java.lang.String, java.lang.String, int)", "public static java.lang.StringBuilder newURIBuilder(java.lang.String, java.lang.String, int)"], ["void", "org.eclipse.jetty.util.URIUtil.appendSchemeHostPort(java.lang.StringBuilder, java.lang.String, java.lang.String, int)", "public static void appendSchemeHostPort(java.lang.StringBuilder, java.lang.String, java.lang.String, int)"], ["void", "org.eclipse.jetty.util.URIUtil.appendSchemeHostPort(java.lang.StringBuffer, java.lang.String, java.lang.String, int)", "public static void appendSchemeHostPort(java.lang.StringBuffer, java.lang.String, java.lang.String, int)"], ["boolean", "org.eclipse.jetty.util.URIUtil.equalsIgnoreEncodings(java.lang.String, java.lang.String)", "public static boolean equalsIgnoreEncodings(java.lang.String, java.lang.String)"], ["org.eclipse.jetty.util.UrlEncoded", "org.eclipse.jetty.util.UrlEncoded(org.eclipse.jetty.util.UrlEncoded)", "public org.eclipse.jetty.util.UrlEncoded(org.eclipse.jetty.util.UrlEncoded)"], ["org.eclipse.jetty.util.UrlEncoded", "org.eclipse.jetty.util.UrlEncoded()", "public org.eclipse.jetty.util.UrlEncoded()"], ["org.eclipse.jetty.util.UrlEncoded", "org.eclipse.jetty.util.UrlEncoded(java.lang.String)", "public org.eclipse.jetty.util.UrlEncoded(java.lang.String)"], ["void", "org.eclipse.jetty.util.UrlEncoded.decode(java.lang.String)", "public void decode(java.lang.String)"], ["void", "org.eclipse.jetty.util.UrlEncoded.decode(java.lang.String, java.nio.charset.Charset)", "public void decode(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.eclipse.jetty.util.UrlEncoded.encode()", "public java.lang.String encode()"], ["java.lang.String", "org.eclipse.jetty.util.UrlEncoded.encode(java.nio.charset.Charset)", "public java.lang.String encode(java.nio.charset.Charset)"], ["synchronized", "org.eclipse.jetty.util.UrlEncoded.java.lang.String encode(java.nio.charset.Charset, boolean)", "public synchronized java.lang.String encode(java.nio.charset.Charset, boolean)"], ["java.lang.String", "org.eclipse.jetty.util.UrlEncoded.encode(org.eclipse.jetty.util.MultiMap<java.lang.String>, java.nio.charset.Charset, boolean)", "public static java.lang.String encode(org.eclipse.jetty.util.MultiMap<java.lang.String>, java.nio.charset.Charset, boolean)"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeTo(java.lang.String, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.lang.String, int)", "public static void decodeTo(java.lang.String, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.lang.String, int)"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeTo(java.lang.String, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.nio.charset.Charset, int)", "public static void decodeTo(java.lang.String, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.nio.charset.Charset, int)"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeUtf8To(byte[], int, int, org.eclipse.jetty.util.MultiMap<java.lang.String>)", "public static void decodeUtf8To(byte[], int, int, org.eclipse.jetty.util.MultiMap<java.lang.String>)"], ["void", "org.eclipse.jetty.util.UrlEncoded.decode88591To(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, int, int)", "public static void decode88591To(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeUtf8To(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, int, int)", "public static void decodeUtf8To(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeUtf16To(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, int, int)", "public static void decodeUtf16To(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeTo(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.lang.String, int, int)", "public static void decodeTo(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.lang.String, int, int) throws java.io.IOException"], ["void", "org.eclipse.jetty.util.UrlEncoded.decodeTo(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.nio.charset.Charset, int, int)", "public static void decodeTo(java.io.InputStream, org.eclipse.jetty.util.MultiMap<java.lang.String>, java.nio.charset.Charset, int, int) throws java.io.IOException"], ["java.lang.String", "org.eclipse.jetty.util.UrlEncoded.decodeString(java.lang.String, int, int, java.nio.charset.Charset)", "public static java.lang.String decodeString(java.lang.String, int, int, java.nio.charset.Charset)"], ["java.lang.String", "org.eclipse.jetty.util.UrlEncoded.encodeString(java.lang.String)", "public static java.lang.String encodeString(java.lang.String)"], ["java.lang.String", "org.eclipse.jetty.util.UrlEncoded.encodeString(java.lang.String, java.nio.charset.Charset)", "public static java.lang.String encodeString(java.lang.String, java.nio.charset.Charset)"], ["java.lang.Object", "org.eclipse.jetty.util.UrlEncoded.clone()", "public java.lang.Object clone()"], ["org.eclipse.jetty.util.Utf8Appendable$NotUtf8Exception", "org.eclipse.jetty.util.Utf8Appendable$NotUtf8Exception(java.lang.String)", "public org.eclipse.jetty.util.Utf8Appendable$NotUtf8Exception(java.lang.String)"], ["org.eclipse.jetty.util.Utf8Appendable", "org.eclipse.jetty.util.Utf8Appendable(java.lang.Appendable)", "public org.eclipse.jetty.util.Utf8Appendable(java.lang.Appendable)"], ["void", "org.eclipse.jetty.util.Utf8Appendable.append(byte)", "public void append(byte)"], ["void", "org.eclipse.jetty.util.Utf8Appendable.append(java.nio.ByteBuffer)", "public void append(java.nio.ByteBuffer)"], ["void", "org.eclipse.jetty.util.Utf8Appendable.append(byte[], int, int)", "public void append(byte[], int, int)"], ["boolean", "org.eclipse.jetty.util.Utf8Appendable.append(byte[], int, int, int)", "public boolean append(byte[], int, int, int)"], ["boolean", "org.eclipse.jetty.util.Utf8Appendable.isUtf8SequenceComplete()", "public boolean isUtf8SequenceComplete()"], ["java.lang.String", "org.eclipse.jetty.util.Utf8Appendable.toReplacedString()", "public java.lang.String toReplacedString()"], ["org.eclipse.jetty.util.Utf8LineParser$State[]", "org.eclipse.jetty.util.Utf8LineParser$State.values()", "public static org.eclipse.jetty.util.Utf8LineParser$State[] values()"], ["org.eclipse.jetty.util.Utf8LineParser$State", "org.eclipse.jetty.util.Utf8LineParser$State.valueOf(java.lang.String)", "public static org.eclipse.jetty.util.Utf8LineParser$State valueOf(java.lang.String)"], ["org.eclipse.jetty.util.Utf8LineParser", "org.eclipse.jetty.util.Utf8LineParser()", "public org.eclipse.jetty.util.Utf8LineParser()"], ["java.lang.String", "org.eclipse.jetty.util.Utf8LineParser.parse(java.nio.ByteBuffer)", "public java.lang.String parse(java.nio.ByteBuffer)"], ["org.eclipse.jetty.util.Utf8StringBuffer", "org.eclipse.jetty.util.Utf8StringBuffer()", "public org.eclipse.jetty.util.Utf8StringBuffer()"], ["org.eclipse.jetty.util.Utf8StringBuffer", "org.eclipse.jetty.util.Utf8StringBuffer(int)", "public org.eclipse.jetty.util.Utf8StringBuffer(int)"], ["int", "org.eclipse.jetty.util.Utf8StringBuffer.length()", "public int length()"], ["void", "org.eclipse.jetty.util.Utf8StringBuffer.reset()", "public void reset()"], ["java.lang.StringBuffer", "org.eclipse.jetty.util.Utf8StringBuffer.getStringBuffer()", "public java.lang.StringBuffer getStringBuffer()"], ["java.lang.String", "org.eclipse.jetty.util.Utf8StringBuffer.toString()", "public java.lang.String toString()"], ["org.eclipse.jetty.util.Utf8StringBuilder", "org.eclipse.jetty.util.Utf8StringBuilder()", "public org.eclipse.jetty.util.Utf8StringBuilder()"], ["org.eclipse.jetty.util.Utf8StringBuilder", "org.eclipse.jetty.util.Utf8StringBuilder(int)", "public org.eclipse.jetty.util.Utf8StringBuilder(int)"], ["int", "org.eclipse.jetty.util.Utf8StringBuilder.length()", "public int length()"], ["void", "org.eclipse.jetty.util.Utf8StringBuilder.reset()", "public void reset()"], ["java.lang.StringBuilder", "org.eclipse.jetty.util.Utf8StringBuilder.getStringBuilder()", "public java.lang.StringBuilder getStringBuilder()"], ["java.lang.String", "org.eclipse.jetty.util.Utf8StringBuilder.toString()", "public java.lang.String toString()"]]}