{"mongo-java-driver-3.11.0.jar": [["boolean", "com.mongodb.CursorType$2.isTailable()", "public boolean isTailable()"], ["com.mongodb.MongoSocketOpenException", "com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoSocketOpenException", "com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketOpenException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoSocketReadException", "com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoSocketReadException", "com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketReadException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.ServerCursor", "com.mongodb.ServerCursor(long, com.mongodb.ServerAddress)", "public com.mongodb.ServerCursor(long, com.mongodb.ServerAddress)"], ["long", "com.mongodb.ServerCursor.getId()", "public long getId()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerCursor.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["boolean", "com.mongodb.ServerCursor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ServerCursor.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.ServerCursor.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoServerException", "com.mongodb.MongoServerException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoServerException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoServerException", "com.mongodb.MongoServerException(int, java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoServerException(int, java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.MongoServerException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClientSettings.getDefaultCodecRegistry()", "public static org.bson.codecs.configuration.CodecRegistry getDefaultCodecRegistry()"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings.builder()", "public static com.mongodb.MongoClientSettings$Builder builder()"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings.builder(com.mongodb.MongoClientSettings)", "public static com.mongodb.MongoClientSettings$Builder builder(com.mongodb.MongoClientSettings)"], ["com.mongodb.ReadPreference", "com.mongodb.MongoClientSettings.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoClientSettings.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoClientSettings.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.MongoClientSettings.getRetryWrites()", "public boolean getRetryWrites()"], ["boolean", "com.mongodb.MongoClientSettings.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.ReadConcern", "com.mongodb.MongoClientSettings.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClientSettings.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.connection.StreamFactoryFactory", "com.mongodb.MongoClientSettings.getStreamFactoryFactory()", "public com.mongodb.connection.StreamFactoryFactory getStreamFactoryFactory()"], ["java.util.List<com.mongodb.event.CommandListener>", "com.mongodb.MongoClientSettings.getCommandListeners()", "public java.util.List<com.mongodb.event.CommandListener> getCommandListeners()"], ["java.lang.String", "com.mongodb.MongoClientSettings.getApplicationName()", "public java.lang.String getApplicationName()"], ["java.util.List<com.mongodb.MongoCompressor>", "com.mongodb.MongoClientSettings.getCompressorList()", "public java.util.List<com.mongodb.MongoCompressor> getCompressorList()"], ["com.mongodb.AutoEncryptionSettings", "com.mongodb.MongoClientSettings.getAutoEncryptionSettings()", "public com.mongodb.AutoEncryptionSettings getAutoEncryptionSettings()"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.MongoClientSettings.getClusterSettings()", "public com.mongodb.connection.ClusterSettings getClusterSettings()"], ["com.mongodb.connection.SslSettings", "com.mongodb.MongoClientSettings.getSslSettings()", "public com.mongodb.connection.SslSettings getSslSettings()"], ["com.mongodb.connection.SocketSettings", "com.mongodb.MongoClientSettings.getSocketSettings()", "public com.mongodb.connection.SocketSettings getSocketSettings()"], ["com.mongodb.connection.SocketSettings", "com.mongodb.MongoClientSettings.getHeartbeatSocketSettings()", "public com.mongodb.connection.SocketSettings getHeartbeatSocketSettings()"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.MongoClientSettings.getConnectionPoolSettings()", "public com.mongodb.connection.ConnectionPoolSettings getConnectionPoolSettings()"], ["com.mongodb.connection.ServerSettings", "com.mongodb.MongoClientSettings.getServerSettings()", "public com.mongodb.connection.ServerSettings getServerSettings()"], ["com.mongodb.LazyDBDecoder", "com.mongodb.LazyDBDecoder()", "public com.mongodb.LazyDBDecoder()"], ["com.mongodb.DBCallback", "com.mongodb.LazyDBDecoder.getDBCallback(com.mongodb.DBCollection)", "public com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.readObject(java.io.InputStream)", "public com.mongodb.DBObject readObject(java.io.InputStream) throws java.io.IOException"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.decode(java.io.InputStream, com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(java.io.InputStream, com.mongodb.DBCollection) throws java.io.IOException"], ["com.mongodb.DBObject", "com.mongodb.LazyDBDecoder.decode(byte[], com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(byte[], com.mongodb.DBCollection)"], ["org.bson.BSONObject", "com.mongodb.LazyDBDecoder.readObject(java.io.InputStream)", "public org.bson.BSONObject readObject(java.io.InputStream) throws java.io.IOException"], ["java.lang.String", "com.mongodb.TaggableReadPreference$NearestReadPreference.getName()", "public java.lang.String getName()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.TaggableReadPreference$NearestReadPreference.chooseForReplicaSet(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> chooseForReplicaSet(com.mongodb.connection.ClusterDescription)"], ["com.mongodb.Bytes", "com.mongodb.Bytes()", "public com.mongodb.Bytes()"], ["byte", "com.mongodb.Bytes.getType(java.lang.Object)", "public static byte getType(java.lang.Object)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec()", "public com.mongodb.DBObjectCodec()"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)", "public com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["com.mongodb.DBObjectCodec", "com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, com.mongodb.DBObjectFactory)", "public com.mongodb.DBObjectCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, com.mongodb.DBObjectFactory)"], ["void", "com.mongodb.DBObjectCodec.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["com.mongodb.DBObject", "com.mongodb.DBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBObject decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.DBObjectCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["boolean", "com.mongodb.DBObjectCodec.documentHasId(com.mongodb.DBObject)", "public boolean documentHasId(com.mongodb.DBObject)"], ["org.bson.BsonValue", "com.mongodb.DBObjectCodec.getDocumentId(com.mongodb.DBObject)", "public org.bson.BsonValue getDocumentId(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBObjectCodec.generateIdIfAbsentFromDocument(com.mongodb.DBObject)", "public com.mongodb.DBObject generateIdIfAbsentFromDocument(com.mongodb.DBObject)"], ["org.bson.BsonValue", "com.mongodb.DBObjectCodec.getDocumentId(java.lang.Object)", "public org.bson.BsonValue getDocumentId(java.lang.Object)"], ["boolean", "com.mongodb.DBObjectCodec.documentHasId(java.lang.Object)", "public boolean documentHasId(java.lang.Object)"], ["java.lang.Object", "com.mongodb.DBObjectCodec.generateIdIfAbsentFromDocument(java.lang.Object)", "public java.lang.Object generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "com.mongodb.DBObjectCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.DBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.WriteError", "com.mongodb.WriteError(int, java.lang.String, org.bson.BsonDocument)", "public com.mongodb.WriteError(int, java.lang.String, org.bson.BsonDocument)"], ["com.mongodb.WriteError", "com.mongodb.WriteError(com.mongodb.WriteError)", "public com.mongodb.WriteError(com.mongodb.WriteError)"], ["com.mongodb.ErrorCategory", "com.mongodb.WriteError.getCategory()", "public com.mongodb.ErrorCategory getCategory()"], ["int", "com.mongodb.WriteError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.WriteError.getMessage()", "public java.lang.String getMessage()"], ["org.bson.BsonDocument", "com.mongodb.WriteError.getDetails()", "public org.bson.BsonDocument getDetails()"], ["boolean", "com.mongodb.WriteError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteError.toString()", "public java.lang.String toString()"], ["com.mongodb.BSONTimestampCodec", "com.mongodb.BSONTimestampCodec()", "public com.mongodb.BSONTimestampCodec()"], ["void", "com.mongodb.BSONTimestampCodec.encode(org.bson.BsonWriter, org.bson.types.BSONTimestamp, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.BSONTimestamp, org.bson.codecs.EncoderContext)"], ["org.bson.types.BSONTimestamp", "com.mongodb.BSONTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.BSONTimestamp decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.BSONTimestamp>", "com.mongodb.BSONTimestampCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.BSONTimestamp> getEncoderClass()"], ["void", "com.mongodb.BSONTimestampCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.BSONTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Boolean", "com.mongodb.AggregationOptions.getAllowDiskUse()", "public java.lang.Boolean getAllowDiskUse()"], ["java.lang.Integer", "com.mongodb.AggregationOptions.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.AggregationOptions$OutputMode", "com.mongodb.AggregationOptions.getOutputMode()", "public com.mongodb.AggregationOptions$OutputMode getOutputMode()"], ["long", "com.mongodb.AggregationOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.AggregationOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.Collation", "com.mongodb.AggregationOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["java.lang.String", "com.mongodb.AggregationOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions.builder()", "public static com.mongodb.AggregationOptions$Builder builder()"], ["java.lang.Object", "com.mongodb.DBCollection$1.apply(org.bson.BsonValue)", "public java.lang.Object apply(org.bson.BsonValue)"], ["java.lang.Object", "com.mongodb.DBCollection$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.MongoSecurityException", "com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoSecurityException", "com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String)", "public com.mongodb.MongoSecurityException(com.mongodb.MongoCredential, java.lang.String)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoSecurityException.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult()", "public com.mongodb.WriteConcernResult()"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult.acknowledged(int, boolean, org.bson.BsonValue)", "public static com.mongodb.WriteConcernResult acknowledged(int, boolean, org.bson.BsonValue)"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernResult.unacknowledged()", "public static com.mongodb.WriteConcernResult unacknowledged()"], ["com.mongodb.BulkWriteUpsert", "com.mongodb.BulkWriteUpsert(int, java.lang.Object)", "public com.mongodb.BulkWriteUpsert(int, java.lang.Object)"], ["int", "com.mongodb.BulkWriteUpsert.getIndex()", "public int getIndex()"], ["java.lang.Object", "com.mongodb.BulkWriteUpsert.getId()", "public java.lang.Object getId()"], ["boolean", "com.mongodb.BulkWriteUpsert.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteUpsert.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.BulkWriteUpsert.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.DBEncoderFactoryAdapter.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.DBEncoderFactoryAdapter.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["void", "com.mongodb.DBEncoderFactoryAdapter.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["com.mongodb.internal.dns.DefaultDnsResolver", "com.mongodb.internal.dns.DefaultDnsResolver()", "public com.mongodb.internal.dns.DefaultDnsResolver()"], ["java.util.List<java.lang.String>", "com.mongodb.internal.dns.DefaultDnsResolver.resolveHostFromSrvRecords(java.lang.String)", "public java.util.List<java.lang.String> resolveHostFromSrvRecords(java.lang.String)"], ["java.lang.String", "com.mongodb.internal.dns.DefaultDnsResolver.resolveAdditionalQueryParametersFromTxtRecords(java.lang.String)", "public java.lang.String resolveAdditionalQueryParametersFromTxtRecords(java.lang.String)"], ["com.mongodb.internal.management.jmx.JMXMBeanServer", "com.mongodb.internal.management.jmx.JMXMBeanServer()", "public com.mongodb.internal.management.jmx.JMXMBeanServer()"], ["void", "com.mongodb.internal.management.jmx.JMXMBeanServer.registerMBean(java.lang.Object, java.lang.String)", "public void registerMBean(java.lang.Object, java.lang.String)"], ["void", "com.mongodb.internal.management.jmx.JMXMBeanServer.unregisterMBean(java.lang.String)", "public void unregisterMBean(java.lang.String)"], ["com.mongodb.crypt.capi.MongoCryptOptions", "com.mongodb.internal.capi.MongoCryptOptionsHelper.createMongoCryptOptions(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>, java.util.Map<java.lang.String, org.bson.BsonDocument>)", "public static com.mongodb.crypt.capi.MongoCryptOptions createMongoCryptOptions(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>, java.util.Map<java.lang.String, org.bson.BsonDocument>)"], ["java.util.List<java.lang.String>", "com.mongodb.internal.capi.MongoCryptOptionsHelper.createMongocryptdSpawnArgs(java.util.Map<java.lang.String, java.lang.Object>)", "public static java.util.List<java.lang.String> createMongocryptdSpawnArgs(java.util.Map<java.lang.String, java.lang.Object>)"], ["com.mongodb.internal.validator.NoOpFieldNameValidator", "com.mongodb.internal.validator.NoOpFieldNameValidator()", "public com.mongodb.internal.validator.NoOpFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.NoOpFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.NoOpFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.UpdateFieldNameValidator", "com.mongodb.internal.validator.UpdateFieldNameValidator()", "public com.mongodb.internal.validator.UpdateFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.UpdateFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.UpdateFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.MappedFieldNameValidator", "com.mongodb.internal.validator.MappedFieldNameValidator(org.bson.FieldNameValidator, java.util.Map<java.lang.String, org.bson.FieldNameValidator>)", "public com.mongodb.internal.validator.MappedFieldNameValidator(org.bson.FieldNameValidator, java.util.Map<java.lang.String, org.bson.FieldNameValidator>)"], ["boolean", "com.mongodb.internal.validator.MappedFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.MappedFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator()", "public com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator()"], ["boolean", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "com.mongodb.internal.validator.CollectibleDocumentFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["com.mongodb.event.ClusterListener", "com.mongodb.internal.event.EventListenerHelper.getClusterListener(com.mongodb.connection.ClusterSettings)", "public static com.mongodb.event.ClusterListener getClusterListener(com.mongodb.connection.ClusterSettings)"], ["com.mongodb.event.CommandListener", "com.mongodb.internal.event.EventListenerHelper.getCommandListener(java.util.List<com.mongodb.event.CommandListener>)", "public static com.mongodb.event.CommandListener getCommandListener(java.util.List<com.mongodb.event.CommandListener>)"], ["com.mongodb.event.ConnectionPoolListener", "com.mongodb.internal.event.EventListenerHelper.getConnectionPoolListener(com.mongodb.connection.ConnectionPoolSettings)", "public static com.mongodb.event.ConnectionPoolListener getConnectionPoolListener(com.mongodb.connection.ConnectionPoolSettings)"], ["com.mongodb.event.ServerMonitorListener", "com.mongodb.internal.event.EventListenerHelper.getServerMonitorListener(com.mongodb.connection.ServerSettings)", "public static com.mongodb.event.ServerMonitorListener getServerMonitorListener(com.mongodb.connection.ServerSettings)"], ["com.mongodb.event.ServerListener", "com.mongodb.internal.event.EventListenerHelper.createServerListener(com.mongodb.connection.ServerSettings, com.mongodb.event.ServerListener)", "public static com.mongodb.event.ServerListener createServerListener(com.mongodb.connection.ServerSettings, com.mongodb.event.ServerListener)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionAdded(com.mongodb.event.ConnectionAddedEvent)", "public void connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.internal.event.ConnectionPoolListenerMulticaster.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["void", "com.mongodb.internal.event.CommandListenerMulticaster.commandStarted(com.mongodb.event.CommandStartedEvent)", "public void commandStarted(com.mongodb.event.CommandStartedEvent)"], ["void", "com.mongodb.internal.event.CommandListenerMulticaster.commandSucceeded(com.mongodb.event.CommandSucceededEvent)", "public void commandSucceeded(com.mongodb.event.CommandSucceededEvent)"], ["void", "com.mongodb.internal.event.CommandListenerMulticaster.commandFailed(com.mongodb.event.CommandFailedEvent)", "public void commandFailed(com.mongodb.event.CommandFailedEvent)"], ["void", "com.mongodb.internal.event.ServerListenerMulticaster.serverOpening(com.mongodb.event.ServerOpeningEvent)", "public void serverOpening(com.mongodb.event.ServerOpeningEvent)"], ["void", "com.mongodb.internal.event.ServerListenerMulticaster.serverClosed(com.mongodb.event.ServerClosedEvent)", "public void serverClosed(com.mongodb.event.ServerClosedEvent)"], ["void", "com.mongodb.internal.event.ServerListenerMulticaster.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)", "public void serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["void", "com.mongodb.internal.event.ClusterListenerMulticaster.clusterOpening(com.mongodb.event.ClusterOpeningEvent)", "public void clusterOpening(com.mongodb.event.ClusterOpeningEvent)"], ["void", "com.mongodb.internal.event.ClusterListenerMulticaster.clusterClosed(com.mongodb.event.ClusterClosedEvent)", "public void clusterClosed(com.mongodb.event.ClusterClosedEvent)"], ["void", "com.mongodb.internal.event.ClusterListenerMulticaster.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)", "public void clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["void", "com.mongodb.internal.event.ServerMonitorListenerMulticaster.serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)", "public void serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)"], ["void", "com.mongodb.internal.event.ServerMonitorListenerMulticaster.serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)", "public void serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)"], ["void", "com.mongodb.internal.event.ServerMonitorListenerMulticaster.serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)", "public void serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)"], ["com.mongodb.internal.thread.DaemonThreadFactory", "com.mongodb.internal.thread.DaemonThreadFactory(java.lang.String)", "public com.mongodb.internal.thread.DaemonThreadFactory(java.lang.String)"], ["java.lang.Thread", "com.mongodb.internal.thread.DaemonThreadFactory.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["com.mongodb.internal.binding.AbstractReferenceCounted", "com.mongodb.internal.binding.AbstractReferenceCounted()", "public com.mongodb.internal.binding.AbstractReferenceCounted()"], ["int", "com.mongodb.internal.binding.AbstractReferenceCounted.getCount()", "public int getCount()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.internal.binding.AbstractReferenceCounted.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.internal.binding.AbstractReferenceCounted.release()", "public void release()"], ["java.util.List<java.lang.String>", "com.mongodb.internal.operation.IndexHelper.getIndexNames(java.util.List<com.mongodb.client.model.IndexModel>, org.bson.codecs.configuration.CodecRegistry)", "public static java.util.List<java.lang.String> getIndexNames(java.util.List<com.mongodb.client.model.IndexModel>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.String", "com.mongodb.internal.operation.IndexHelper.generateIndexName(org.bson.BsonDocument)", "public static java.lang.String generateIndexName(org.bson.BsonDocument)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.internal.operation.AsyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)", "public com.mongodb.internal.operation.AsyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)", "public com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.WriteConcern)", "public com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.WriteConcern)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadConcern, com.mongodb.WriteConcern)", "public com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadConcern, com.mongodb.WriteConcern)"], ["com.mongodb.internal.operation.AsyncOperations", "com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadConcern, com.mongodb.WriteConcern, boolean, boolean)", "public com.mongodb.internal.operation.AsyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadConcern, com.mongodb.WriteConcern, boolean, boolean)"], ["com.mongodb.operation.AsyncReadOperation<java.lang.Long>", "com.mongodb.internal.operation.AsyncOperations.count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions, com.mongodb.internal.client.model.CountStrategy)", "public com.mongodb.operation.AsyncReadOperation<java.lang.Long> count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions, com.mongodb.internal.client.model.CountStrategy)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.findFirst(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> findFirst(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.find(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> find(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.find(com.mongodb.MongoNamespace, org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> find(com.mongodb.MongoNamespace, org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>, long, com.mongodb.client.model.Collation)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>, long, com.mongodb.client.model.Collation)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, long, long, java.lang.Integer, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.AggregationLevel)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, long, long, java.lang.Integer, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.AggregationLevel)"], ["com.mongodb.operation.AsyncWriteOperation<java.lang.Void>", "com.mongodb.internal.operation.AsyncOperations.aggregateToCollection(java.util.List<? extends org.bson.conversions.Bson>, long, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, com.mongodb.client.model.AggregationLevel)", "public com.mongodb.operation.AsyncWriteOperation<java.lang.Void> aggregateToCollection(java.util.List<? extends org.bson.conversions.Bson>, long, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, com.mongodb.client.model.AggregationLevel)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.operation.MapReduceStatistics>", "com.mongodb.internal.operation.AsyncOperations.mapReduceToCollection(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.MapReduceAction, boolean, boolean, java.lang.Boolean, com.mongodb.client.model.Collation)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.operation.MapReduceStatistics> mapReduceToCollection(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.MapReduceAction, boolean, boolean, java.lang.Boolean, com.mongodb.client.model.Collation)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.operation.MapReduceAsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.mapReduce(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.Collation)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.operation.MapReduceAsyncBatchCursor<TResult>> mapReduce(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.Collation)"], ["com.mongodb.operation.AsyncWriteOperation<TDocument>", "com.mongodb.internal.operation.AsyncOperations.findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)", "public com.mongodb.operation.AsyncWriteOperation<TDocument> findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["com.mongodb.operation.AsyncWriteOperation<TDocument>", "com.mongodb.internal.operation.AsyncOperations.findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)", "public com.mongodb.operation.AsyncWriteOperation<TDocument> findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["com.mongodb.operation.AsyncWriteOperation<TDocument>", "com.mongodb.internal.operation.AsyncOperations.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)", "public com.mongodb.operation.AsyncWriteOperation<TDocument> findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["com.mongodb.operation.AsyncWriteOperation<TDocument>", "com.mongodb.internal.operation.AsyncOperations.findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)", "public com.mongodb.operation.AsyncWriteOperation<TDocument> findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.AsyncOperations.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)", "public com.mongodb.operation.AsyncWriteOperation<com.mongodb.bulk.BulkWriteResult> bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["com.mongodb.operation.AsyncWriteOperation<java.lang.Void>", "com.mongodb.internal.operation.AsyncOperations.dropCollection()", "public com.mongodb.operation.AsyncWriteOperation<java.lang.Void> dropCollection()"], ["com.mongodb.operation.AsyncWriteOperation<java.lang.Void>", "com.mongodb.internal.operation.AsyncOperations.renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)", "public com.mongodb.operation.AsyncWriteOperation<java.lang.Void> renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["com.mongodb.operation.AsyncWriteOperation<java.lang.Void>", "com.mongodb.internal.operation.AsyncOperations.createIndexes(java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)", "public com.mongodb.operation.AsyncWriteOperation<java.lang.Void> createIndexes(java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)"], ["com.mongodb.operation.AsyncWriteOperation<java.lang.Void>", "com.mongodb.internal.operation.AsyncOperations.dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)", "public com.mongodb.operation.AsyncWriteOperation<java.lang.Void> dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)"], ["com.mongodb.operation.AsyncWriteOperation<java.lang.Void>", "com.mongodb.internal.operation.AsyncOperations.dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)", "public com.mongodb.operation.AsyncWriteOperation<java.lang.Void> dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.listCollections(java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, boolean, java.lang.Integer, long)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> listCollections(java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, boolean, java.lang.Integer, long)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.listDatabases(java.lang.Class<TResult>, org.bson.conversions.Bson, java.lang.Boolean, long)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> listDatabases(java.lang.Class<TResult>, org.bson.conversions.Bson, java.lang.Boolean, long)"], ["<TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>>", "com.mongodb.internal.operation.AsyncOperations.listIndexes(java.lang.Class<TResult>, java.lang.Integer, long)", "public <TResult> com.mongodb.operation.AsyncReadOperation<com.mongodb.async.AsyncBatchCursor<TResult>> listIndexes(java.lang.Class<TResult>, java.lang.Integer, long)"], ["com.mongodb.internal.operation.SyncOperations", "com.mongodb.internal.operation.SyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.internal.operation.SyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.internal.operation.SyncOperations", "com.mongodb.internal.operation.SyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)", "public com.mongodb.internal.operation.SyncOperations(java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)"], ["com.mongodb.internal.operation.SyncOperations", "com.mongodb.internal.operation.SyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.internal.operation.SyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.internal.operation.SyncOperations", "com.mongodb.internal.operation.SyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)", "public com.mongodb.internal.operation.SyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, boolean)"], ["com.mongodb.internal.operation.SyncOperations", "com.mongodb.internal.operation.SyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadConcern, com.mongodb.WriteConcern, boolean, boolean)", "public com.mongodb.internal.operation.SyncOperations(com.mongodb.MongoNamespace, java.lang.Class<TDocument>, com.mongodb.ReadPreference, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadConcern, com.mongodb.WriteConcern, boolean, boolean)"], ["com.mongodb.operation.ReadOperation<java.lang.Long>", "com.mongodb.internal.operation.SyncOperations.count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions, com.mongodb.internal.client.model.CountStrategy)", "public com.mongodb.operation.ReadOperation<java.lang.Long> count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions, com.mongodb.internal.client.model.CountStrategy)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.findFirst(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> findFirst(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.find(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> find(org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.find(com.mongodb.MongoNamespace, org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> find(com.mongodb.MongoNamespace, org.bson.conversions.Bson, java.lang.Class<TResult>, com.mongodb.client.model.FindOptions)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>, long, com.mongodb.client.model.Collation)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>, long, com.mongodb.client.model.Collation)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, long, long, java.lang.Integer, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.AggregationLevel)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, long, long, java.lang.Integer, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.AggregationLevel)"], ["com.mongodb.operation.WriteOperation<java.lang.Void>", "com.mongodb.internal.operation.SyncOperations.aggregateToCollection(java.util.List<? extends org.bson.conversions.Bson>, long, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, com.mongodb.client.model.AggregationLevel)", "public com.mongodb.operation.WriteOperation<java.lang.Void> aggregateToCollection(java.util.List<? extends org.bson.conversions.Bson>, long, java.lang.Boolean, java.lang.Boolean, com.mongodb.client.model.Collation, org.bson.conversions.Bson, java.lang.String, com.mongodb.client.model.AggregationLevel)"], ["com.mongodb.operation.WriteOperation<com.mongodb.operation.MapReduceStatistics>", "com.mongodb.internal.operation.SyncOperations.mapReduceToCollection(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.MapReduceAction, boolean, boolean, java.lang.Boolean, com.mongodb.client.model.Collation)", "public com.mongodb.operation.WriteOperation<com.mongodb.operation.MapReduceStatistics> mapReduceToCollection(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.MapReduceAction, boolean, boolean, java.lang.Boolean, com.mongodb.client.model.Collation)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.MapReduceBatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.mapReduce(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.Collation)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.MapReduceBatchCursor<TResult>> mapReduce(java.lang.String, java.lang.String, java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, int, long, boolean, org.bson.conversions.Bson, org.bson.conversions.Bson, boolean, com.mongodb.client.model.Collation)"], ["com.mongodb.operation.WriteOperation<TDocument>", "com.mongodb.internal.operation.SyncOperations.findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)", "public com.mongodb.operation.WriteOperation<TDocument> findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["com.mongodb.operation.WriteOperation<TDocument>", "com.mongodb.internal.operation.SyncOperations.findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)", "public com.mongodb.operation.WriteOperation<TDocument> findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["com.mongodb.operation.WriteOperation<TDocument>", "com.mongodb.internal.operation.SyncOperations.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)", "public com.mongodb.operation.WriteOperation<TDocument> findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["com.mongodb.operation.WriteOperation<TDocument>", "com.mongodb.internal.operation.SyncOperations.findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)", "public com.mongodb.operation.WriteOperation<TDocument> findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult>", "com.mongodb.internal.operation.SyncOperations.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)", "public com.mongodb.operation.WriteOperation<com.mongodb.bulk.BulkWriteResult> bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["com.mongodb.operation.WriteOperation<java.lang.Void>", "com.mongodb.internal.operation.SyncOperations.dropCollection()", "public com.mongodb.operation.WriteOperation<java.lang.Void> dropCollection()"], ["com.mongodb.operation.WriteOperation<java.lang.Void>", "com.mongodb.internal.operation.SyncOperations.renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)", "public com.mongodb.operation.WriteOperation<java.lang.Void> renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["com.mongodb.operation.WriteOperation<java.lang.Void>", "com.mongodb.internal.operation.SyncOperations.createIndexes(java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)", "public com.mongodb.operation.WriteOperation<java.lang.Void> createIndexes(java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)"], ["com.mongodb.operation.WriteOperation<java.lang.Void>", "com.mongodb.internal.operation.SyncOperations.dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)", "public com.mongodb.operation.WriteOperation<java.lang.Void> dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)"], ["com.mongodb.operation.WriteOperation<java.lang.Void>", "com.mongodb.internal.operation.SyncOperations.dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)", "public com.mongodb.operation.WriteOperation<java.lang.Void> dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.listCollections(java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, boolean, java.lang.Integer, long)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> listCollections(java.lang.String, java.lang.Class<TResult>, org.bson.conversions.Bson, boolean, java.lang.Integer, long)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.listDatabases(java.lang.Class<TResult>, org.bson.conversions.Bson, java.lang.Boolean, long)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> listDatabases(java.lang.Class<TResult>, org.bson.conversions.Bson, java.lang.Boolean, long)"], ["<TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.internal.operation.SyncOperations.listIndexes(java.lang.Class<TResult>, java.lang.Integer, long)", "public <TResult> com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> listIndexes(java.lang.Class<TResult>, java.lang.Integer, long)"], ["void", "com.mongodb.internal.operation.WriteConcernHelper.appendWriteConcernToCommand(com.mongodb.WriteConcern, org.bson.BsonDocument, com.mongodb.connection.ConnectionDescription)", "public static void appendWriteConcernToCommand(com.mongodb.WriteConcern, org.bson.BsonDocument, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.internal.operation.WriteConcernHelper.throwOnWriteConcernError(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public static void throwOnWriteConcernError(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["void", "com.mongodb.internal.operation.WriteConcernHelper.throwOnSpecialException(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public static void throwOnSpecialException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["boolean", "com.mongodb.internal.operation.WriteConcernHelper.hasWriteConcernError(org.bson.BsonDocument)", "public static boolean hasWriteConcernError(org.bson.BsonDocument)"], ["com.mongodb.MongoWriteConcernException", "com.mongodb.internal.operation.WriteConcernHelper.createWriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public static com.mongodb.MongoWriteConcernException createWriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.internal.operation.WriteConcernHelper.createWriteConcernError(org.bson.BsonDocument)", "public static com.mongodb.bulk.WriteConcernError createWriteConcernError(org.bson.BsonDocument)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsAtLeastVersionThreeDotZero(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsAtLeastVersionThreeDotZero(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsAtLeastVersionThreeDotTwo(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsAtLeastVersionThreeDotTwo(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsAtLeastVersionThreeDotFour(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsAtLeastVersionThreeDotFour(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsAtLeastVersionThreeDotSix(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsAtLeastVersionThreeDotSix(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsAtLeastVersionFourDotZero(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsAtLeastVersionFourDotZero(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsAtLeastVersionFourDotTwo(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsAtLeastVersionFourDotTwo(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsLessThanVersionThreeDotZero(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsLessThanVersionThreeDotZero(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsLessThanVersionThreeDotTwo(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsLessThanVersionThreeDotTwo(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsLessThanVersionThreeDotFour(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsLessThanVersionThreeDotFour(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsLessThanVersionThreeDotSix(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsLessThanVersionThreeDotSix(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsLessThanVersionFourDotZero(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsLessThanVersionFourDotZero(com.mongodb.connection.ConnectionDescription)"], ["boolean", "com.mongodb.internal.operation.ServerVersionHelper.serverIsLessThanVersionFourDotTwo(com.mongodb.connection.ConnectionDescription)", "public static boolean serverIsLessThanVersionFourDotTwo(com.mongodb.connection.ConnectionDescription)"], ["<T> T", "com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor.execute(com.mongodb.internal.connection.LegacyProtocol<T>, com.mongodb.internal.connection.InternalConnection)", "public <T> T execute(com.mongodb.internal.connection.LegacyProtocol<T>, com.mongodb.internal.connection.InternalConnection)"], ["<T> void", "com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor.executeAsync(com.mongodb.internal.connection.LegacyProtocol<T>, com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)", "public <T> void executeAsync(com.mongodb.internal.connection.LegacyProtocol<T>, com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)"], ["<T> T", "com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor.execute(com.mongodb.internal.connection.CommandProtocol<T>, com.mongodb.internal.connection.InternalConnection, com.mongodb.session.SessionContext)", "public <T> T execute(com.mongodb.internal.connection.CommandProtocol<T>, com.mongodb.internal.connection.InternalConnection, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor.executeAsync(com.mongodb.internal.connection.CommandProtocol<T>, com.mongodb.internal.connection.InternalConnection, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)", "public <T> void executeAsync(com.mongodb.internal.connection.CommandProtocol<T>, com.mongodb.internal.connection.InternalConnection, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["void", "com.mongodb.internal.connection.NativeAuthenticator$1$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.NativeAuthenticator$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.PlainAuthenticator$1.handle(javax.security.auth.callback.Callback[])", "public void handle(javax.security.auth.callback.Callback[]) throws java.io.IOException, javax.security.auth.callback.UnsupportedCallbackException"], ["com.mongodb.internal.connection.DnsMultiServerCluster", "com.mongodb.internal.connection.DnsMultiServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.internal.connection.ClusterableServerFactory, com.mongodb.internal.connection.DnsSrvRecordMonitorFactory)", "public com.mongodb.internal.connection.DnsMultiServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.internal.connection.ClusterableServerFactory, com.mongodb.internal.connection.DnsSrvRecordMonitorFactory)"], ["void", "com.mongodb.internal.connection.DnsMultiServerCluster.close()", "public void close()"], ["java.lang.String", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$6.find(org.bson.BsonReader)", "public java.lang.String find(org.bson.BsonReader)"], ["java.lang.String", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$6.notFound()", "public java.lang.String notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$6.notFound()", "public java.lang.Object notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$6.find(org.bson.BsonReader)", "public java.lang.Object find(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$2$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(org.bson.ByteBuf, java.lang.Throwable)", "public void onResult(org.bson.ByteBuf, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.NoOpSessionContext", "com.mongodb.internal.connection.NoOpSessionContext()", "public com.mongodb.internal.connection.NoOpSessionContext()"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.hasSession()", "public boolean hasSession()"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.isImplicitSession()", "public boolean isImplicitSession()"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.NoOpSessionContext.getSessionId()", "public org.bson.BsonDocument getSessionId()"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.isCausallyConsistent()", "public boolean isCausallyConsistent()"], ["long", "com.mongodb.internal.connection.NoOpSessionContext.getTransactionNumber()", "public long getTransactionNumber()"], ["long", "com.mongodb.internal.connection.NoOpSessionContext.advanceTransactionNumber()", "public long advanceTransactionNumber()"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.notifyMessageSent()", "public boolean notifyMessageSent()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.connection.NoOpSessionContext.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["void", "com.mongodb.internal.connection.NoOpSessionContext.advanceOperationTime(org.bson.BsonTimestamp)", "public void advanceOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.NoOpSessionContext.getClusterTime()", "public org.bson.BsonDocument getClusterTime()"], ["void", "com.mongodb.internal.connection.NoOpSessionContext.advanceClusterTime(org.bson.BsonDocument)", "public void advanceClusterTime(org.bson.BsonDocument)"], ["boolean", "com.mongodb.internal.connection.NoOpSessionContext.hasActiveTransaction()", "public boolean hasActiveTransaction()"], ["com.mongodb.ReadConcern", "com.mongodb.internal.connection.NoOpSessionContext.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["void", "com.mongodb.internal.connection.NoOpSessionContext.setRecoveryToken(org.bson.BsonDocument)", "public void setRecoveryToken(org.bson.BsonDocument)"], ["void", "com.mongodb.internal.connection.NoOpSessionContext.unpinServerAddress()", "public void unpinServerAddress()"], ["com.mongodb.MongoException", "com.mongodb.internal.connection.ProtocolHelper.createSpecialException(org.bson.BsonDocument, com.mongodb.ServerAddress, java.lang.String)", "public static com.mongodb.MongoException createSpecialException(org.bson.BsonDocument, com.mongodb.ServerAddress, java.lang.String)"], ["java.lang.String", "com.mongodb.internal.connection.ScramShaAuthenticator$2.generate(com.mongodb.MongoCredential)", "public java.lang.String generate(com.mongodb.MongoCredential)"], ["void", "com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$1.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["com.mongodb.connection.QueryResult<T>", "com.mongodb.internal.connection.GetMoreProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.connection.QueryResult<T> execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.GetMoreProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["void", "com.mongodb.internal.connection.GetMoreProtocol.setCommandListener(com.mongodb.event.CommandListener)", "public void setCommandListener(com.mongodb.event.CommandListener)"], ["java.lang.Object", "com.mongodb.internal.connection.GetMoreProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.ReadConcernHelper.getReadConcernDocument(com.mongodb.session.SessionContext)", "public static org.bson.BsonDocument getReadConcernDocument(com.mongodb.session.SessionContext)"], ["com.mongodb.internal.connection.ServerMonitor", "com.mongodb.internal.connection.DefaultServerMonitorFactory.create(com.mongodb.internal.connection.ChangeListener<com.mongodb.connection.ServerDescription>)", "public com.mongodb.internal.connection.ServerMonitor create(com.mongodb.internal.connection.ChangeListener<com.mongodb.connection.ServerDescription>)"], ["void", "com.mongodb.internal.connection.WriteProtocol$UnacknowledgedWriteResultCallback.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.WriteProtocol$UnacknowledgedWriteResultCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$1.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$1.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["com.mongodb.ServerAddress", "com.mongodb.internal.connection.ServerAddressHelper.createServerAddress(java.lang.String)", "public static com.mongodb.ServerAddress createServerAddress(java.lang.String)"], ["com.mongodb.ServerAddress", "com.mongodb.internal.connection.ServerAddressHelper.createServerAddress(java.lang.String, int)", "public static com.mongodb.ServerAddress createServerAddress(java.lang.String, int)"], ["void", "com.mongodb.internal.connection.SslHelper.enableHostNameVerification(javax.net.ssl.SSLParameters)", "public static void enableHostNameVerification(javax.net.ssl.SSLParameters)"], ["void", "com.mongodb.internal.connection.SslHelper.enableSni(java.lang.String, javax.net.ssl.SSLParameters)", "public static void enableSni(java.lang.String, javax.net.ssl.SSLParameters)"], ["void", "com.mongodb.internal.connection.DefaultAuthenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultAuthenticator$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$1.find(org.bson.BsonReader)", "public java.lang.Boolean find(org.bson.BsonReader)"], ["java.lang.Boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$1.notFound()", "public java.lang.Boolean notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$1.notFound()", "public java.lang.Object notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$1.find(org.bson.BsonReader)", "public java.lang.Object find(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.AbstractMultiServerCluster$DefaultServerStateListener.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)", "public void serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["int", "com.mongodb.internal.connection.RequestMessage.getCurrentGlobalId()", "public static int getCurrentGlobalId()"], ["int", "com.mongodb.internal.connection.RequestMessage.getId()", "public int getId()"], ["com.mongodb.internal.connection.OpCode", "com.mongodb.internal.connection.RequestMessage.getOpCode()", "public com.mongodb.internal.connection.OpCode getOpCode()"], ["com.mongodb.internal.connection.MessageSettings", "com.mongodb.internal.connection.RequestMessage.getSettings()", "public com.mongodb.internal.connection.MessageSettings getSettings()"], ["void", "com.mongodb.internal.connection.RequestMessage.encode(org.bson.io.BsonOutput, com.mongodb.session.SessionContext)", "public void encode(org.bson.io.BsonOutput, com.mongodb.session.SessionContext)"], ["com.mongodb.internal.connection.RequestMessage$EncodingMetadata", "com.mongodb.internal.connection.RequestMessage.getEncodingMetadata()", "public com.mongodb.internal.connection.RequestMessage$EncodingMetadata getEncodingMetadata()"], ["java.lang.String", "com.mongodb.internal.connection.GSSAPIAuthenticator.getMechanismName()", "public java.lang.String getMechanismName()"], ["void", "com.mongodb.internal.connection.DnsMultiServerCluster$1.initialize(java.util.Collection<com.mongodb.ServerAddress>)", "public void initialize(java.util.Collection<com.mongodb.ServerAddress>)"], ["void", "com.mongodb.internal.connection.DnsMultiServerCluster$1.initialize(com.mongodb.MongoException)", "public void initialize(com.mongodb.MongoException)"], ["com.mongodb.connection.ClusterType", "com.mongodb.internal.connection.DnsMultiServerCluster$1.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["int", "com.mongodb.internal.connection.RequestMessage$EncodingMetadata.getFirstDocumentPosition()", "public int getFirstDocumentPosition()"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.DeleteProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.DeleteProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.internal.connection.DeleteProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["com.mongodb.internal.connection.AsynchronousSocketChannelStream", "com.mongodb.internal.connection.AsynchronousSocketChannelStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.BufferProvider, java.nio.channels.AsynchronousChannelGroup)", "public com.mongodb.internal.connection.AsynchronousSocketChannelStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.BufferProvider, java.nio.channels.AsynchronousChannelGroup)"], ["void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["java.nio.channels.AsynchronousChannelGroup", "com.mongodb.internal.connection.AsynchronousSocketChannelStream.getGroup()", "public java.nio.channels.AsynchronousChannelGroup getGroup()"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$2.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultDnsSrvRecordMonitor.start()", "public void start()"], ["void", "com.mongodb.internal.connection.DefaultDnsSrvRecordMonitor.close()", "public void close()"], ["java.lang.String", "com.mongodb.internal.connection.ScramShaAuthenticator$DefaultRandomStringGenerator.generate(int)", "public java.lang.String generate(int)"], ["com.mongodb.internal.connection.MultiServerCluster", "com.mongodb.internal.connection.MultiServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.internal.connection.ClusterableServerFactory)", "public com.mongodb.internal.connection.MultiServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.internal.connection.ClusterableServerFactory)"], ["boolean", "com.mongodb.internal.connection.ScramShaAuthenticator$CacheKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.internal.connection.ScramShaAuthenticator$CacheKey.hashCode()", "public int hashCode()"], ["com.mongodb.internal.connection.DefaultDnsSrvRecordMonitorFactory", "com.mongodb.internal.connection.DefaultDnsSrvRecordMonitorFactory(com.mongodb.connection.ClusterId, com.mongodb.connection.ServerSettings)", "public com.mongodb.internal.connection.DefaultDnsSrvRecordMonitorFactory(com.mongodb.connection.ClusterId, com.mongodb.connection.ServerSettings)"], ["com.mongodb.internal.connection.DnsSrvRecordMonitor", "com.mongodb.internal.connection.DefaultDnsSrvRecordMonitorFactory.create(java.lang.String, com.mongodb.internal.connection.DnsSrvRecordInitializer)", "public com.mongodb.internal.connection.DnsSrvRecordMonitor create(java.lang.String, com.mongodb.internal.connection.DnsSrvRecordInitializer)"], ["com.mongodb.internal.connection.ReadConcernAwareNoOpSessionContext", "com.mongodb.internal.connection.ReadConcernAwareNoOpSessionContext(com.mongodb.ReadConcern)", "public com.mongodb.internal.connection.ReadConcernAwareNoOpSessionContext(com.mongodb.ReadConcern)"], ["com.mongodb.ReadConcern", "com.mongodb.internal.connection.ReadConcernAwareNoOpSessionContext.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.connection.Connection", "com.mongodb.internal.connection.DefaultServer.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["void", "com.mongodb.internal.connection.DefaultServer.getConnectionAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)", "public void getConnectionAsync(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.internal.connection.DefaultServer.getDescription()", "public com.mongodb.connection.ServerDescription getDescription()"], ["void", "com.mongodb.internal.connection.DefaultServer.invalidate()", "public void invalidate()"], ["void", "com.mongodb.internal.connection.DefaultServer.invalidate(java.lang.Throwable)", "public void invalidate(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultServer.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.DefaultServer.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.internal.connection.DefaultServer.connect()", "public void connect()"], ["void", "com.mongodb.internal.connection.DefaultServer$1.onResult(com.mongodb.internal.connection.InternalConnection, java.lang.Throwable)", "public void onResult(com.mongodb.internal.connection.InternalConnection, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultServer$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$4.onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$4.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["int", "com.mongodb.internal.connection.ReplyHeader.getMessageLength()", "public int getMessageLength()"], ["int", "com.mongodb.internal.connection.ReplyHeader.getRequestId()", "public int getRequestId()"], ["int", "com.mongodb.internal.connection.ReplyHeader.getResponseTo()", "public int getResponseTo()"], ["int", "com.mongodb.internal.connection.ReplyHeader.getResponseFlags()", "public int getResponseFlags()"], ["long", "com.mongodb.internal.connection.ReplyHeader.getCursorId()", "public long getCursorId()"], ["int", "com.mongodb.internal.connection.ReplyHeader.getStartingFrom()", "public int getStartingFrom()"], ["int", "com.mongodb.internal.connection.ReplyHeader.getNumberReturned()", "public int getNumberReturned()"], ["boolean", "com.mongodb.internal.connection.ReplyHeader.isCursorNotFound()", "public boolean isCursorNotFound()"], ["boolean", "com.mongodb.internal.connection.ReplyHeader.isQueryFailure()", "public boolean isQueryFailure()"], ["java.lang.String", "com.mongodb.internal.connection.ScramShaAuthenticator$1.generate(com.mongodb.MongoCredential)", "public java.lang.String generate(com.mongodb.MongoCredential)"], ["com.mongodb.internal.connection.OpCode[]", "com.mongodb.internal.connection.OpCode.values()", "public static com.mongodb.internal.connection.OpCode[] values()"], ["com.mongodb.internal.connection.OpCode", "com.mongodb.internal.connection.OpCode.valueOf(java.lang.String)", "public static com.mongodb.internal.connection.OpCode valueOf(java.lang.String)"], ["int", "com.mongodb.internal.connection.OpCode.getValue()", "public int getValue()"], ["long", "com.mongodb.internal.connection.GetMoreMessage.getCursorId()", "public long getCursorId()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.internal.connection.DescriptionHelper.createServerDescription(com.mongodb.ServerAddress, org.bson.BsonDocument, com.mongodb.connection.ServerVersion, long)", "public static com.mongodb.connection.ServerDescription createServerDescription(com.mongodb.ServerAddress, org.bson.BsonDocument, com.mongodb.connection.ServerVersion, long)"], ["com.mongodb.internal.connection.AsynchronousChannelStream", "com.mongodb.internal.connection.AsynchronousChannelStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.BufferProvider)", "public com.mongodb.internal.connection.AsynchronousChannelStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.BufferProvider)"], ["com.mongodb.ServerAddress", "com.mongodb.internal.connection.AsynchronousChannelStream.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.connection.SocketSettings", "com.mongodb.internal.connection.AsynchronousChannelStream.getSettings()", "public com.mongodb.connection.SocketSettings getSettings()"], ["com.mongodb.connection.BufferProvider", "com.mongodb.internal.connection.AsynchronousChannelStream.getBufferProvider()", "public com.mongodb.connection.BufferProvider getBufferProvider()"], ["com.mongodb.internal.connection.ExtendedAsynchronousByteChannel", "com.mongodb.internal.connection.AsynchronousChannelStream.getChannel()", "public com.mongodb.internal.connection.ExtendedAsynchronousByteChannel getChannel()"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream.open()", "public void open() throws java.io.IOException"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.AsynchronousChannelStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["com.mongodb.ServerAddress", "com.mongodb.internal.connection.AsynchronousChannelStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.AsynchronousChannelStream.isClosed()", "public boolean isClosed()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.AsynchronousChannelStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["int", "com.mongodb.internal.connection.CompressedHeader.getOriginalOpcode()", "public int getOriginalOpcode()"], ["int", "com.mongodb.internal.connection.CompressedHeader.getUncompressedSize()", "public int getUncompressedSize()"], ["byte", "com.mongodb.internal.connection.CompressedHeader.getCompressorId()", "public byte getCompressorId()"], ["int", "com.mongodb.internal.connection.CompressedHeader.getCompressedSize()", "public int getCompressedSize()"], ["com.mongodb.internal.connection.MessageHeader", "com.mongodb.internal.connection.CompressedHeader.getMessageHeader()", "public com.mongodb.internal.connection.MessageHeader getMessageHeader()"], ["java.lang.String", "com.mongodb.internal.connection.ByteBufBsonDocument.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "com.mongodb.internal.connection.ByteBufBsonDocument.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["org.bson.BsonReader", "com.mongodb.internal.connection.ByteBufBsonDocument.asBsonReader()", "public org.bson.BsonReader asBsonReader()"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.ByteBufBsonDocument.clone()", "public org.bson.BsonDocument clone()"], ["java.lang.Object", "com.mongodb.internal.connection.ByteBufBsonDocument.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.mongodb.internal.connection.RequestMessage$EncodingMetadata", "com.mongodb.internal.connection.CommandMessage.getEncodingMetadata()", "public com.mongodb.internal.connection.RequestMessage$EncodingMetadata getEncodingMetadata()"], ["void", "com.mongodb.internal.connection.CommandMessage.encode(org.bson.io.BsonOutput, com.mongodb.session.SessionContext)", "public void encode(org.bson.io.BsonOutput, com.mongodb.session.SessionContext)"], ["com.mongodb.internal.connection.MessageSettings", "com.mongodb.internal.connection.CommandMessage.getSettings()", "public com.mongodb.internal.connection.MessageSettings getSettings()"], ["com.mongodb.internal.connection.OpCode", "com.mongodb.internal.connection.CommandMessage.getOpCode()", "public com.mongodb.internal.connection.OpCode getOpCode()"], ["int", "com.mongodb.internal.connection.CommandMessage.getId()", "public int getId()"], ["void", "com.mongodb.internal.connection.DefaultDnsSrvRecordMonitor$DnsSrvRecordMonitorRunnable.run()", "public void run()"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$2.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["synchronized", "com.mongodb.internal.connection.DefaultServerMonitor$ServerMonitorRunnable.void run()", "public synchronized void run()"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$1$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InsertProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InsertProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.MongoWriteConcernWithResponseException", "com.mongodb.internal.connection.MongoWriteConcernWithResponseException(com.mongodb.MongoException, java.lang.Object)", "public com.mongodb.internal.connection.MongoWriteConcernWithResponseException(com.mongodb.MongoException, java.lang.Object)"], ["com.mongodb.MongoException", "com.mongodb.internal.connection.MongoWriteConcernWithResponseException.getCause()", "public com.mongodb.MongoException getCause()"], ["java.lang.Object", "com.mongodb.internal.connection.MongoWriteConcernWithResponseException.getResponse()", "public java.lang.Object getResponse()"], ["java.lang.Throwable", "com.mongodb.internal.connection.MongoWriteConcernWithResponseException.getCause()", "public java.lang.Throwable getCause()"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$3.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.NoOpCommandEventSender.sendStartedEvent()", "public void sendStartedEvent()"], ["void", "com.mongodb.internal.connection.NoOpCommandEventSender.sendFailedEvent(java.lang.Throwable)", "public void sendFailedEvent(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.NoOpCommandEventSender.sendSucceededEvent(com.mongodb.internal.connection.ResponseBuffers)", "public void sendSucceededEvent(com.mongodb.internal.connection.ResponseBuffers)"], ["void", "com.mongodb.internal.connection.NoOpCommandEventSender.sendSucceededEventForOneWayCommand()", "public void sendSucceededEventForOneWayCommand()"], ["com.mongodb.internal.connection.DefaultServerConnection", "com.mongodb.internal.connection.DefaultServerConnection(com.mongodb.internal.connection.InternalConnection, com.mongodb.internal.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.internal.connection.DefaultServerConnection(com.mongodb.internal.connection.InternalConnection, com.mongodb.internal.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.internal.connection.DefaultServerConnection", "com.mongodb.internal.connection.DefaultServerConnection.retain()", "public com.mongodb.internal.connection.DefaultServerConnection retain()"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.release()", "public void release()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.internal.connection.DefaultServerConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.DefaultServerConnection.insert(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest)", "public com.mongodb.WriteConcernResult insert(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.insertAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void insertAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.DefaultServerConnection.update(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest)", "public com.mongodb.WriteConcernResult update(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.updateAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void updateAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.DefaultServerConnection.delete(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest)", "public com.mongodb.WriteConcernResult delete(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.deleteAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void deleteAsync(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["<T> T", "com.mongodb.internal.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)", "public <T> T command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)"], ["<T> T", "com.mongodb.internal.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)", "public <T> T command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> T", "com.mongodb.internal.connection.DefaultServerConnection.command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator)", "public <T> T command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator)"], ["<T> void", "com.mongodb.internal.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<T>)", "public <T> void commandAsync(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<T>)"], ["<T> void", "com.mongodb.internal.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)", "public <T> void commandAsync(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["<T> void", "com.mongodb.internal.connection.DefaultServerConnection.commandAsync(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator, com.mongodb.async.SingleResultCallback<T>)", "public <T> void commandAsync(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator, com.mongodb.async.SingleResultCallback<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.internal.connection.DefaultServerConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.internal.connection.DefaultServerConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.internal.connection.DefaultServerConnection.queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public <T> void queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["<T> void", "com.mongodb.internal.connection.DefaultServerConnection.queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public <T> void queryAsync(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.internal.connection.DefaultServerConnection.getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)"], ["<T> void", "com.mongodb.internal.connection.DefaultServerConnection.getMoreAsync(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public <T> void getMoreAsync(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.killCursor(java.util.List<java.lang.Long>)", "public void killCursor(java.util.List<java.lang.Long>)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.killCursor(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>)", "public void killCursor(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.killCursorAsync(java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void killCursorAsync(java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.DefaultServerConnection.killCursorAsync(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void killCursorAsync(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.internal.connection.DefaultServerConnection.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["int", "com.mongodb.internal.connection.DefaultServerConnection.getCount()", "public int getCount()"], ["com.mongodb.connection.Connection", "com.mongodb.internal.connection.DefaultServerConnection.retain()", "public com.mongodb.connection.Connection retain()"], ["com.mongodb.connection.AsyncConnection", "com.mongodb.internal.connection.DefaultServerConnection.retain()", "public com.mongodb.connection.AsyncConnection retain()"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$1.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["T", "com.mongodb.internal.connection.CommandProtocolImpl.execute(com.mongodb.internal.connection.InternalConnection)", "public T execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.CommandProtocolImpl.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.internal.connection.CommandProtocolImpl<T>", "com.mongodb.internal.connection.CommandProtocolImpl.sessionContext(com.mongodb.session.SessionContext)", "public com.mongodb.internal.connection.CommandProtocolImpl<T> sessionContext(com.mongodb.session.SessionContext)"], ["com.mongodb.internal.connection.CommandProtocol", "com.mongodb.internal.connection.CommandProtocolImpl.sessionContext(com.mongodb.session.SessionContext)", "public com.mongodb.internal.connection.CommandProtocol sessionContext(com.mongodb.session.SessionContext)"], ["java.lang.Boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$3.find(org.bson.BsonReader)", "public java.lang.Boolean find(org.bson.BsonReader)"], ["java.lang.Boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$3.notFound()", "public java.lang.Boolean notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$3.notFound()", "public java.lang.Object notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$3.find(org.bson.BsonReader)", "public java.lang.Object find(org.bson.BsonReader)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap$RangeBased.add(int, int)", "public com.mongodb.internal.connection.IndexMap add(int, int)"], ["int", "com.mongodb.internal.connection.IndexMap$RangeBased.map(int)", "public int map(int)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$2.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.internal.connection.DecimalFormatHelper.format(java.lang.String, double)", "public static java.lang.String format(java.lang.String, double)"], ["void", "com.mongodb.internal.connection.SaslAuthenticator.authenticate(com.mongodb.internal.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)", "public void authenticate(com.mongodb.internal.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeStartDocument()", "public void writeStartDocument()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeEndDocument()", "public void writeEndDocument()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeStartArray(java.lang.String)", "public void writeStartArray(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeStartArray()", "public void writeStartArray()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeEndArray()", "public void writeEndArray()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeBinaryData(java.lang.String, org.bson.BsonBinary)", "public void writeBinaryData(java.lang.String, org.bson.BsonBinary)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeBinaryData(org.bson.BsonBinary)", "public void writeBinaryData(org.bson.BsonBinary)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeBoolean(java.lang.String, boolean)", "public void writeBoolean(java.lang.String, boolean)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDateTime(java.lang.String, long)", "public void writeDateTime(java.lang.String, long)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDateTime(long)", "public void writeDateTime(long)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDBPointer(java.lang.String, org.bson.BsonDbPointer)", "public void writeDBPointer(java.lang.String, org.bson.BsonDbPointer)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDBPointer(org.bson.BsonDbPointer)", "public void writeDBPointer(org.bson.BsonDbPointer)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDouble(java.lang.String, double)", "public void writeDouble(java.lang.String, double)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDouble(double)", "public void writeDouble(double)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeInt32(java.lang.String, int)", "public void writeInt32(java.lang.String, int)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeInt32(int)", "public void writeInt32(int)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeInt64(java.lang.String, long)", "public void writeInt64(java.lang.String, long)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeInt64(long)", "public void writeInt64(long)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDecimal128(org.bson.types.Decimal128)", "public void writeDecimal128(org.bson.types.Decimal128)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeDecimal128(java.lang.String, org.bson.types.Decimal128)", "public void writeDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeJavaScript(java.lang.String, java.lang.String)", "public void writeJavaScript(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeJavaScript(java.lang.String)", "public void writeJavaScript(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeJavaScriptWithScope(java.lang.String, java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeJavaScriptWithScope(java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeMaxKey(java.lang.String)", "public void writeMaxKey(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeMaxKey()", "public void writeMaxKey()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeMinKey(java.lang.String)", "public void writeMinKey(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeMinKey()", "public void writeMinKey()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeName(java.lang.String)", "public void writeName(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeNull(java.lang.String)", "public void writeNull(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeNull()", "public void writeNull()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeObjectId(java.lang.String, org.bson.types.ObjectId)", "public void writeObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeObjectId(org.bson.types.ObjectId)", "public void writeObjectId(org.bson.types.ObjectId)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)", "public void writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeRegularExpression(org.bson.BsonRegularExpression)", "public void writeRegularExpression(org.bson.BsonRegularExpression)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeString(java.lang.String, java.lang.String)", "public void writeString(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeSymbol(java.lang.String, java.lang.String)", "public void writeSymbol(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeSymbol(java.lang.String)", "public void writeSymbol(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeTimestamp(java.lang.String, org.bson.BsonTimestamp)", "public void writeTimestamp(java.lang.String, org.bson.BsonTimestamp)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeTimestamp(org.bson.BsonTimestamp)", "public void writeTimestamp(org.bson.BsonTimestamp)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeUndefined(java.lang.String)", "public void writeUndefined(java.lang.String)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.writeUndefined()", "public void writeUndefined()"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.BsonWriterDecorator.flush()", "public void flush()"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.open()", "public void open()"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.UsageTrackingInternalConnection.opened()", "public boolean opened()"], ["boolean", "com.mongodb.internal.connection.UsageTrackingInternalConnection.isClosed()", "public boolean isClosed()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.UsageTrackingInternalConnection.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)", "public void sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["<T> T", "com.mongodb.internal.connection.UsageTrackingInternalConnection.sendAndReceive(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)", "public <T> T sendAndReceive(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.sendAndReceiveAsync(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)", "public <T> void sendAndReceiveAsync(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.internal.connection.ResponseBuffers", "com.mongodb.internal.connection.UsageTrackingInternalConnection.receiveMessage(int)", "public com.mongodb.internal.connection.ResponseBuffers receiveMessage(int)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>)", "public void receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.internal.connection.UsageTrackingInternalConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings.builder()", "public static com.mongodb.internal.connection.MessageSettings$Builder builder()"], ["int", "com.mongodb.internal.connection.MessageSettings.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["int", "com.mongodb.internal.connection.MessageSettings.getMaxMessageSize()", "public int getMaxMessageSize()"], ["int", "com.mongodb.internal.connection.MessageSettings.getMaxBatchCount()", "public int getMaxBatchCount()"], ["int", "com.mongodb.internal.connection.MessageSettings.getMaxWireVersion()", "public int getMaxWireVersion()"], ["com.mongodb.connection.ServerType", "com.mongodb.internal.connection.MessageSettings.getServerType()", "public com.mongodb.connection.ServerType getServerType()"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.UpdateProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.UpdateProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.internal.connection.UpdateProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$3.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$3.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$3.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["void", "com.mongodb.internal.connection.NativeAuthenticator.authenticate(com.mongodb.internal.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)", "public void authenticate(com.mongodb.internal.connection.InternalConnection, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.internal.connection.WriteProtocol.setCommandListener(com.mongodb.event.CommandListener)", "public void setCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.WriteProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.WriteProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.internal.connection.WriteProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.start()", "public void start()"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$CompoundAuthenticator.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Integer", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$2.find(org.bson.BsonReader)", "public java.lang.Integer find(org.bson.BsonReader)"], ["java.lang.Integer", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$2.notFound()", "public java.lang.Integer notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$2.notFound()", "public java.lang.Object notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$2.find(org.bson.BsonReader)", "public java.lang.Object find(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$3.onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["synchronized", "com.mongodb.internal.connection.DefaultConnectionPool$3.void run()", "public synchronized void run()"], ["com.mongodb.internal.connection.ElementExtendingBsonWriter", "com.mongodb.internal.connection.ElementExtendingBsonWriter(org.bson.BsonBinaryWriter, java.util.List<org.bson.BsonElement>)", "public com.mongodb.internal.connection.ElementExtendingBsonWriter(org.bson.BsonBinaryWriter, java.util.List<org.bson.BsonElement>)"], ["void", "com.mongodb.internal.connection.ElementExtendingBsonWriter.writeEndDocument()", "public void writeEndDocument()"], ["void", "com.mongodb.internal.connection.ElementExtendingBsonWriter.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.ElementExtendingBsonWriter.writeStartDocument()", "public void writeStartDocument()"], ["void", "com.mongodb.internal.connection.ElementExtendingBsonWriter.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["com.mongodb.internal.connection.ClusterClockAdvancingSessionContext", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext(com.mongodb.session.SessionContext, com.mongodb.internal.connection.ClusterClock)", "public com.mongodb.internal.connection.ClusterClockAdvancingSessionContext(com.mongodb.session.SessionContext, com.mongodb.internal.connection.ClusterClock)"], ["boolean", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.hasSession()", "public boolean hasSession()"], ["boolean", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.isImplicitSession()", "public boolean isImplicitSession()"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.getSessionId()", "public org.bson.BsonDocument getSessionId()"], ["boolean", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.isCausallyConsistent()", "public boolean isCausallyConsistent()"], ["long", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.getTransactionNumber()", "public long getTransactionNumber()"], ["long", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.advanceTransactionNumber()", "public long advanceTransactionNumber()"], ["boolean", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.notifyMessageSent()", "public boolean notifyMessageSent()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["void", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.advanceOperationTime(org.bson.BsonTimestamp)", "public void advanceOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.getClusterTime()", "public org.bson.BsonDocument getClusterTime()"], ["void", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.advanceClusterTime(org.bson.BsonDocument)", "public void advanceClusterTime(org.bson.BsonDocument)"], ["boolean", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.hasActiveTransaction()", "public boolean hasActiveTransaction()"], ["com.mongodb.ReadConcern", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["void", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.setRecoveryToken(org.bson.BsonDocument)", "public void setRecoveryToken(org.bson.BsonDocument)"], ["void", "com.mongodb.internal.connection.ClusterClockAdvancingSessionContext.unpinServerAddress()", "public void unpinServerAddress()"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$PooledByteBufNIO.release()", "public void release()"], ["int", "com.mongodb.internal.connection.MessageHeader.getMessageLength()", "public int getMessageLength()"], ["int", "com.mongodb.internal.connection.MessageHeader.getRequestId()", "public int getRequestId()"], ["int", "com.mongodb.internal.connection.MessageHeader.getResponseTo()", "public int getResponseTo()"], ["int", "com.mongodb.internal.connection.MessageHeader.getOpCode()", "public int getOpCode()"], ["void", "com.mongodb.internal.connection.FutureAsyncCompletionHandler.completed(T)", "public void completed(T)"], ["void", "com.mongodb.internal.connection.FutureAsyncCompletionHandler.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.FutureAsyncCompletionHandler.getOpen()", "public void getOpen() throws java.io.IOException"], ["void", "com.mongodb.internal.connection.FutureAsyncCompletionHandler.getWrite()", "public void getWrite() throws java.io.IOException"], ["T", "com.mongodb.internal.connection.FutureAsyncCompletionHandler.getRead()", "public T getRead() throws java.io.IOException"], ["int", "com.mongodb.internal.connection.AbstractReferenceCounted.getCount()", "public int getCount()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.internal.connection.AbstractReferenceCounted.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.internal.connection.AbstractReferenceCounted.release()", "public void release()"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(org.bson.ByteBuf, java.lang.Throwable)", "public void onResult(org.bson.ByteBuf, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$MessageHeaderCallback$MessageCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.SaslAuthenticator$Continuator.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.SaslAuthenticator$Continuator.start()", "public void start()"], ["void", "com.mongodb.internal.connection.SaslAuthenticator$Continuator.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$2.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$2.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$2.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["void", "com.mongodb.internal.connection.UpdateProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.UpdateProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.ClusterClock", "com.mongodb.internal.connection.ClusterClock()", "public com.mongodb.internal.connection.ClusterClock()"], ["synchronized", "com.mongodb.internal.connection.ClusterClock.org.bson.BsonDocument getCurrent()", "public synchronized org.bson.BsonDocument getCurrent()"], ["synchronized", "com.mongodb.internal.connection.ClusterClock.org.bson.BsonTimestamp getClusterTime()", "public synchronized org.bson.BsonTimestamp getClusterTime()"], ["synchronized", "com.mongodb.internal.connection.ClusterClock.void advance(org.bson.BsonDocument)", "public synchronized void advance(org.bson.BsonDocument)"], ["synchronized", "com.mongodb.internal.connection.ClusterClock.org.bson.BsonDocument greaterOf(org.bson.BsonDocument)", "public synchronized org.bson.BsonDocument greaterOf(org.bson.BsonDocument)"], ["org.bson.BsonValue", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$5.find(org.bson.BsonReader)", "public org.bson.BsonValue find(org.bson.BsonReader)"], ["org.bson.BsonValue", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$5.notFound()", "public org.bson.BsonValue notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$5.notFound()", "public java.lang.Object notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$5.find(org.bson.BsonReader)", "public java.lang.Object find(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$1.completed(java.lang.Void)", "public void completed(java.lang.Void)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$1.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$1.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["com.mongodb.internal.connection.InternalStreamConnection", "com.mongodb.internal.connection.InternalStreamConnection(com.mongodb.connection.ServerId, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCompressor>, com.mongodb.event.CommandListener, com.mongodb.internal.connection.InternalConnectionInitializer)", "public com.mongodb.internal.connection.InternalStreamConnection(com.mongodb.connection.ServerId, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCompressor>, com.mongodb.event.CommandListener, com.mongodb.internal.connection.InternalConnectionInitializer)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.internal.connection.InternalStreamConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["void", "com.mongodb.internal.connection.InternalStreamConnection.open()", "public void open()"], ["void", "com.mongodb.internal.connection.InternalStreamConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.InternalStreamConnection.opened()", "public boolean opened()"], ["boolean", "com.mongodb.internal.connection.InternalStreamConnection.isClosed()", "public boolean isClosed()"], ["<T> T", "com.mongodb.internal.connection.InternalStreamConnection.sendAndReceive(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)", "public <T> T sendAndReceive(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.internal.connection.InternalStreamConnection.sendAndReceiveAsync(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)", "public <T> void sendAndReceiveAsync(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)", "public void sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["com.mongodb.internal.connection.ResponseBuffers", "com.mongodb.internal.connection.InternalStreamConnection.receiveMessage(int)", "public com.mongodb.internal.connection.ResponseBuffers receiveMessage(int)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>)", "public void receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.InternalStreamConnection.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.internal.connection.CommandProtocolImpl$1.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.QueryProtocol.setCommandListener(com.mongodb.event.CommandListener)", "public void setCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.event.CommandListener", "com.mongodb.internal.connection.QueryProtocol.getCommandListener()", "public com.mongodb.event.CommandListener getCommandListener()"], ["boolean", "com.mongodb.internal.connection.QueryProtocol.isTailableCursor()", "public boolean isTailableCursor()"], ["com.mongodb.internal.connection.QueryProtocol<T>", "com.mongodb.internal.connection.QueryProtocol.tailableCursor(boolean)", "public com.mongodb.internal.connection.QueryProtocol<T> tailableCursor(boolean)"], ["boolean", "com.mongodb.internal.connection.QueryProtocol.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.internal.connection.QueryProtocol<T>", "com.mongodb.internal.connection.QueryProtocol.slaveOk(boolean)", "public com.mongodb.internal.connection.QueryProtocol<T> slaveOk(boolean)"], ["boolean", "com.mongodb.internal.connection.QueryProtocol.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.internal.connection.QueryProtocol<T>", "com.mongodb.internal.connection.QueryProtocol.oplogReplay(boolean)", "public com.mongodb.internal.connection.QueryProtocol<T> oplogReplay(boolean)"], ["boolean", "com.mongodb.internal.connection.QueryProtocol.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.internal.connection.QueryProtocol<T>", "com.mongodb.internal.connection.QueryProtocol.noCursorTimeout(boolean)", "public com.mongodb.internal.connection.QueryProtocol<T> noCursorTimeout(boolean)"], ["boolean", "com.mongodb.internal.connection.QueryProtocol.isAwaitData()", "public boolean isAwaitData()"], ["com.mongodb.internal.connection.QueryProtocol<T>", "com.mongodb.internal.connection.QueryProtocol.awaitData(boolean)", "public com.mongodb.internal.connection.QueryProtocol<T> awaitData(boolean)"], ["boolean", "com.mongodb.internal.connection.QueryProtocol.isPartial()", "public boolean isPartial()"], ["com.mongodb.internal.connection.QueryProtocol<T>", "com.mongodb.internal.connection.QueryProtocol.partial(boolean)", "public com.mongodb.internal.connection.QueryProtocol<T> partial(boolean)"], ["com.mongodb.connection.QueryResult<T>", "com.mongodb.internal.connection.QueryProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.connection.QueryResult<T> execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.QueryProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.QueryResult<T>>)"], ["java.lang.Object", "com.mongodb.internal.connection.QueryProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.NativeAuthenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.NativeAuthenticator$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.ReplyMessage", "com.mongodb.internal.connection.ReplyMessage(com.mongodb.internal.connection.ResponseBuffers, org.bson.codecs.Decoder<T>, long)", "public com.mongodb.internal.connection.ReplyMessage(com.mongodb.internal.connection.ResponseBuffers, org.bson.codecs.Decoder<T>, long)"], ["com.mongodb.internal.connection.ReplyHeader", "com.mongodb.internal.connection.ReplyMessage.getReplyHeader()", "public com.mongodb.internal.connection.ReplyHeader getReplyHeader()"], ["java.util.List<T>", "com.mongodb.internal.connection.ReplyMessage.getDocuments()", "public java.util.List<T> getDocuments()"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.open()", "public void open()"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void openAsync(com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.opened()", "public boolean opened()"], ["boolean", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.isClosed()", "public boolean isClosed()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.sendMessage(java.util.List<org.bson.ByteBuf>, int)", "public void sendMessage(java.util.List<org.bson.ByteBuf>, int)"], ["<T> T", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.sendAndReceive(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)", "public <T> T sendAndReceive(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.sendAndReceiveAsync(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)", "public <T> void sendAndReceiveAsync(com.mongodb.internal.connection.CommandMessage, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.internal.connection.ResponseBuffers", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.receiveMessage(int)", "public com.mongodb.internal.connection.ResponseBuffers receiveMessage(int)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void sendMessageAsync(java.util.List<org.bson.ByteBuf>, int, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>)", "public void receiveMessageAsync(int, com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.ResponseBuffers>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["void", "com.mongodb.internal.connection.ResponseCallback.onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.ResponseCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.UnixSocketChannelStream", "com.mongodb.internal.connection.UnixSocketChannelStream(com.mongodb.UnixServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, com.mongodb.connection.BufferProvider)", "public com.mongodb.internal.connection.UnixSocketChannelStream(com.mongodb.UnixServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.internal.connection.DefaultServerMonitor.start()", "public void start()"], ["void", "com.mongodb.internal.connection.DefaultServerMonitor.connect()", "public void connect()"], ["void", "com.mongodb.internal.connection.DefaultServerMonitor.close()", "public void close()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool", "com.mongodb.internal.connection.PowerOfTwoBufferPool()", "public com.mongodb.internal.connection.PowerOfTwoBufferPool()"], ["com.mongodb.internal.connection.PowerOfTwoBufferPool", "com.mongodb.internal.connection.PowerOfTwoBufferPool(int)", "public com.mongodb.internal.connection.PowerOfTwoBufferPool(int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.PowerOfTwoBufferPool.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.internal.connection.LevelCountingBsonWriter.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["void", "com.mongodb.internal.connection.LevelCountingBsonWriter.writeStartDocument()", "public void writeStartDocument()"], ["void", "com.mongodb.internal.connection.LevelCountingBsonWriter.writeEndDocument()", "public void writeEndDocument()"], ["void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$OpenCompletionHandler.completed(java.lang.Void, java.lang.Object)", "public void completed(java.lang.Void, java.lang.Object)"], ["void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$OpenCompletionHandler.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$OpenCompletionHandler.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["com.mongodb.internal.connection.ReplyHeader", "com.mongodb.internal.connection.ResponseBuffers.getReplyHeader()", "public com.mongodb.internal.connection.ReplyHeader getReplyHeader()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.ResponseBuffers.getBodyByteBuffer()", "public org.bson.ByteBuf getBodyByteBuffer()"], ["void", "com.mongodb.internal.connection.ResponseBuffers.reset()", "public void reset()"], ["void", "com.mongodb.internal.connection.ResponseBuffers.close()", "public void close()"], ["void", "com.mongodb.internal.connection.AbstractMultiServerCluster.close()", "public void close()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.internal.connection.AbstractMultiServerCluster.getCurrentDescription()", "public com.mongodb.connection.ClusterDescription getCurrentDescription()"], ["boolean", "com.mongodb.internal.connection.AbstractMultiServerCluster.isClosed()", "public boolean isClosed()"], ["com.mongodb.internal.connection.ClusterableServerFactory", "com.mongodb.internal.connection.AbstractMultiServerCluster.getServerFactory()", "public com.mongodb.internal.connection.ClusterableServerFactory getServerFactory()"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.internal.connection.AbstractMultiServerCluster.getSettings()", "public com.mongodb.connection.ClusterSettings getSettings()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.internal.connection.AbstractMultiServerCluster.getDescription()", "public com.mongodb.connection.ClusterDescription getDescription()"], ["void", "com.mongodb.internal.connection.AbstractMultiServerCluster.selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback)", "public void selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback)"], ["com.mongodb.connection.Server", "com.mongodb.internal.connection.AbstractMultiServerCluster.selectServer(com.mongodb.selector.ServerSelector)", "public com.mongodb.connection.Server selectServer(com.mongodb.selector.ServerSelector)"], ["org.bson.BsonTimestamp", "com.mongodb.internal.connection.AbstractMultiServerCluster.getClusterTime()", "public org.bson.BsonTimestamp getClusterTime()"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$1.onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.tlschannel.NeedsWriteException", "com.mongodb.internal.connection.tlschannel.NeedsWriteException()", "public com.mongodb.internal.connection.tlschannel.NeedsWriteException()"], ["T", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder.withRunTasks(boolean)", "public T withRunTasks(boolean)"], ["T", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder.withPlainBufferAllocator(com.mongodb.internal.connection.tlschannel.BufferAllocator)", "public T withPlainBufferAllocator(com.mongodb.internal.connection.tlschannel.BufferAllocator)"], ["T", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder.withEncryptedBufferAllocator(com.mongodb.internal.connection.tlschannel.BufferAllocator)", "public T withEncryptedBufferAllocator(com.mongodb.internal.connection.tlschannel.BufferAllocator)"], ["T", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder.withSessionInitCallback(java.util.function.Consumer<javax.net.ssl.SSLSession>)", "public T withSessionInitCallback(java.util.function.Consumer<javax.net.ssl.SSLSession>)"], ["T", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder.withReleaseBuffers(boolean)", "public T withReleaseBuffers(boolean)"], ["T", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder.withWaitForCloseConfirmation(boolean)", "public T withWaitForCloseConfirmation(boolean)"], ["javax.net.ssl.SSLEngine", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder$1.get()", "public javax.net.ssl.SSLEngine get()"], ["java.lang.Object", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder$1.get()", "public java.lang.Object get()"], ["com.mongodb.internal.connection.tlschannel.TrackingAllocator", "com.mongodb.internal.connection.tlschannel.TrackingAllocator(com.mongodb.internal.connection.tlschannel.BufferAllocator)", "public com.mongodb.internal.connection.tlschannel.TrackingAllocator(com.mongodb.internal.connection.tlschannel.BufferAllocator)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.allocate(int)", "public org.bson.ByteBuf allocate(int)"], ["void", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.free(org.bson.ByteBuf)", "public void free(org.bson.ByteBuf)"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.bytesAllocated()", "public long bytesAllocated()"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.bytesDeallocated()", "public long bytesDeallocated()"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.currentAllocation()", "public long currentAllocation()"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.maxAllocation()", "public long maxAllocation()"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.buffersAllocated()", "public long buffersAllocated()"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator.buffersDeallocated()", "public long buffersDeallocated()"], ["long", "com.mongodb.internal.connection.tlschannel.TrackingAllocator$1.applyAsLong(long, long)", "public long applyAsLong(long, long)"], ["javax.net.ssl.SSLEngine", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder$2.get()", "public javax.net.ssl.SSLEngine get()"], ["java.lang.Object", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder$2.get()", "public java.lang.Object get()"], ["void", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder$1.accept(javax.net.ssl.SSLSession)", "public void accept(javax.net.ssl.SSLSession)"], ["void", "com.mongodb.internal.connection.tlschannel.TlsChannelBuilder$1.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException", "com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException()", "public com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException()"], ["java.lang.Throwable", "com.mongodb.internal.connection.tlschannel.TlsChannelFlowControlException.fillInStackTrace()", "public java.lang.Throwable fillInStackTrace()"], ["com.mongodb.internal.connection.tlschannel.util.Util", "com.mongodb.internal.connection.tlschannel.util.Util()", "public com.mongodb.internal.connection.tlschannel.util.Util()"], ["void", "com.mongodb.internal.connection.tlschannel.util.Util.assertTrue(boolean)", "public static void assertTrue(boolean)"], ["java.lang.String", "com.mongodb.internal.connection.tlschannel.util.Util.resultToString(javax.net.ssl.SSLEngineResult)", "public static java.lang.String resultToString(javax.net.ssl.SSLEngineResult)"], ["com.mongodb.internal.connection.tlschannel.util.TlsChannelCallbackException", "com.mongodb.internal.connection.tlschannel.util.TlsChannelCallbackException(java.lang.String, java.lang.Throwable)", "public com.mongodb.internal.connection.tlschannel.util.TlsChannelCallbackException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.newBuilder(java.nio.channels.ByteChannel, javax.net.ssl.SSLEngine)", "public static com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder newBuilder(java.nio.channels.ByteChannel, javax.net.ssl.SSLEngine)"], ["com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.newBuilder(java.nio.channels.ByteChannel, javax.net.ssl.SSLContext)", "public static com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder newBuilder(java.nio.channels.ByteChannel, javax.net.ssl.SSLContext)"], ["java.nio.channels.ByteChannel", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.getUnderlying()", "public java.nio.channels.ByteChannel getUnderlying()"], ["javax.net.ssl.SSLEngine", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.getSslEngine()", "public javax.net.ssl.SSLEngine getSslEngine()"], ["java.util.function.Consumer<javax.net.ssl.SSLSession>", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.getSessionInitCallback()", "public java.util.function.Consumer<javax.net.ssl.SSLSession> getSessionInitCallback()"], ["com.mongodb.internal.connection.tlschannel.TrackingAllocator", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.getPlainBufferAllocator()", "public com.mongodb.internal.connection.tlschannel.TrackingAllocator getPlainBufferAllocator()"], ["com.mongodb.internal.connection.tlschannel.TrackingAllocator", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.getEncryptedBufferAllocator()", "public com.mongodb.internal.connection.tlschannel.TrackingAllocator getEncryptedBufferAllocator()"], ["boolean", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.getRunTasks()", "public boolean getRunTasks()"], ["long", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.read(java.nio.ByteBuffer[], int, int)", "public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException"], ["long", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.read(java.nio.ByteBuffer[])", "public long read(java.nio.ByteBuffer[]) throws java.io.IOException"], ["int", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.read(java.nio.ByteBuffer)", "public int read(java.nio.ByteBuffer) throws java.io.IOException"], ["long", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.write(java.nio.ByteBuffer[], int, int)", "public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException"], ["long", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.write(java.nio.ByteBuffer[])", "public long write(java.nio.ByteBuffer[]) throws java.io.IOException"], ["int", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.write(java.nio.ByteBuffer)", "public int write(java.nio.ByteBuffer) throws java.io.IOException"], ["void", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.renegotiate()", "public void renegotiate() throws java.io.IOException"], ["void", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.handshake()", "public void handshake() throws java.io.IOException"], ["void", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.close()", "public void close() throws java.io.IOException"], ["boolean", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.isOpen()", "public boolean isOpen()"], ["boolean", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.shutdown()", "public boolean shutdown() throws java.io.IOException"], ["boolean", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.shutdownReceived()", "public boolean shutdownReceived()"], ["boolean", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel.shutdownSent()", "public boolean shutdownSent()"], ["com.mongodb.internal.connection.tlschannel.NeedsTaskException", "com.mongodb.internal.connection.tlschannel.NeedsTaskException(java.lang.Runnable)", "public com.mongodb.internal.connection.tlschannel.NeedsTaskException(java.lang.Runnable)"], ["java.lang.Runnable", "com.mongodb.internal.connection.tlschannel.NeedsTaskException.getTask()", "public java.lang.Runnable getTask()"], ["com.mongodb.internal.connection.tlschannel.ClientTlsChannel", "com.mongodb.internal.connection.tlschannel.ClientTlsChannel$Builder.build()", "public com.mongodb.internal.connection.tlschannel.ClientTlsChannel build()"], ["com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$EofException", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$EofException()", "public com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$EofException()"], ["java.lang.Throwable", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$EofException.fillInStackTrace()", "public java.lang.Throwable fillInStackTrace()"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet(java.nio.ByteBuffer[], int, int)", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet(java.nio.ByteBuffer[], int, int)"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet(java.nio.ByteBuffer[])", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet(java.nio.ByteBuffer[])"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet(java.nio.ByteBuffer)", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet(java.nio.ByteBuffer)"], ["long", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.remaining()", "public long remaining()"], ["int", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.putRemaining(java.nio.ByteBuffer)", "public int putRemaining(java.nio.ByteBuffer)"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.put(java.nio.ByteBuffer, int)", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet put(java.nio.ByteBuffer, int)"], ["int", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.getRemaining(java.nio.ByteBuffer)", "public int getRemaining(java.nio.ByteBuffer)"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.get(java.nio.ByteBuffer, int)", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet get(java.nio.ByteBuffer, int)"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.hasRemaining()", "public boolean hasRemaining()"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.String", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet.toString()", "public java.lang.String toString()"], ["com.mongodb.internal.connection.tlschannel.impl.BufferHolder", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder(java.lang.String, com.mongodb.internal.connection.tlschannel.BufferAllocator, int, int, boolean, boolean)", "public com.mongodb.internal.connection.tlschannel.impl.BufferHolder(java.lang.String, com.mongodb.internal.connection.tlschannel.BufferAllocator, int, int, boolean, boolean)"], ["void", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.prepare()", "public void prepare()"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.release()", "public boolean release()"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.dispose()", "public boolean dispose()"], ["void", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.resize(int)", "public void resize(int)"], ["void", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.enlarge()", "public void enlarge()"], ["void", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.zeroRemaining()", "public void zeroRemaining()"], ["void", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.zero()", "public void zero()"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.BufferHolder.nullOrEmpty()", "public boolean nullOrEmpty()"], ["com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel, javax.net.ssl.SSLEngine, java.util.Optional<com.mongodb.internal.connection.tlschannel.impl.BufferHolder>, java.util.function.Consumer<javax.net.ssl.SSLSession>, boolean, com.mongodb.internal.connection.tlschannel.TrackingAllocator, com.mongodb.internal.connection.tlschannel.TrackingAllocator, boolean, boolean)", "public com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel, javax.net.ssl.SSLEngine, java.util.Optional<com.mongodb.internal.connection.tlschannel.impl.BufferHolder>, java.util.function.Consumer<javax.net.ssl.SSLSession>, boolean, com.mongodb.internal.connection.tlschannel.TrackingAllocator, com.mongodb.internal.connection.tlschannel.TrackingAllocator, boolean, boolean)"], ["java.util.function.Consumer<javax.net.ssl.SSLSession>", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.getSessionInitCallback()", "public java.util.function.Consumer<javax.net.ssl.SSLSession> getSessionInitCallback()"], ["com.mongodb.internal.connection.tlschannel.TrackingAllocator", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.getPlainBufferAllocator()", "public com.mongodb.internal.connection.tlschannel.TrackingAllocator getPlainBufferAllocator()"], ["com.mongodb.internal.connection.tlschannel.TrackingAllocator", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.getEncryptedBufferAllocator()", "public com.mongodb.internal.connection.tlschannel.TrackingAllocator getEncryptedBufferAllocator()"], ["long", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.read(com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet)", "public long read(com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet) throws java.io.IOException"], ["int", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.readFromChannel(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)", "public static int readFromChannel(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) throws java.io.IOException, com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$EofException"], ["long", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.write(com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet)", "public long write(com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet) throws java.io.IOException"], ["void", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.renegotiate()", "public void renegotiate() throws java.io.IOException"], ["void", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.handshake()", "public void handshake() throws java.io.IOException"], ["void", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.close()", "public void close() throws java.io.IOException"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.shutdown()", "public boolean shutdown() throws java.io.IOException"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.isOpen()", "public boolean isOpen()"], ["void", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.checkReadBuffer(com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet)", "public static void checkReadBuffer(com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet)"], ["javax.net.ssl.SSLEngine", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.engine()", "public javax.net.ssl.SSLEngine engine()"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.getRunTasks()", "public boolean getRunTasks()"], ["int", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.read(java.nio.ByteBuffer)", "public int read(java.nio.ByteBuffer) throws java.io.IOException"], ["int", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.write(java.nio.ByteBuffer)", "public int write(java.nio.ByteBuffer) throws java.io.IOException"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.shutdownReceived()", "public boolean shutdownReceived()"], ["boolean", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.shutdownSent()", "public boolean shutdownSent()"], ["java.nio.channels.ReadableByteChannel", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.plainReadableChannel()", "public java.nio.channels.ReadableByteChannel plainReadableChannel()"], ["java.nio.channels.WritableByteChannel", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl.plainWritableChannel()", "public java.nio.channels.WritableByteChannel plainWritableChannel()"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferUtil", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferUtil()", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferUtil()"], ["void", "com.mongodb.internal.connection.tlschannel.impl.ByteBufferUtil.copy(java.nio.ByteBuffer, java.nio.ByteBuffer, int)", "public static void copy(java.nio.ByteBuffer, java.nio.ByteBuffer, int)"], ["com.mongodb.internal.connection.tlschannel.impl.BufferHolder", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$1.get()", "public com.mongodb.internal.connection.tlschannel.impl.BufferHolder get()"], ["java.lang.Object", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$1.get()", "public java.lang.Object get()"], ["com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$2.get()", "public com.mongodb.internal.connection.tlschannel.impl.ByteBufferSet get()"], ["java.lang.Object", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$2.get()", "public java.lang.Object get()"], ["javax.net.ssl.SSLEngineResult$HandshakeStatus", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$3.get()", "public javax.net.ssl.SSLEngineResult$HandshakeStatus get()"], ["java.lang.Object", "com.mongodb.internal.connection.tlschannel.impl.TlsChannelImpl$3.get()", "public java.lang.Object get()"], ["com.mongodb.internal.connection.tlschannel.NeedsReadException", "com.mongodb.internal.connection.tlschannel.NeedsReadException()", "public com.mongodb.internal.connection.tlschannel.NeedsReadException()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$18.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$2.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$2.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$9.accept(long)", "public void accept(long)"], ["int", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$11.applyAsInt(int, int)", "public int applyAsInt(int, int)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$10$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$2$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$13$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$14$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$16.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$16.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$8.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$8.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel(com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup, com.mongodb.internal.connection.tlschannel.TlsChannel, java.nio.channels.SocketChannel)", "public com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel(com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup, com.mongodb.internal.connection.tlschannel.TlsChannel, java.nio.channels.SocketChannel) throws java.nio.channels.ClosedChannelException, java.lang.IllegalArgumentException"], ["<A> void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.read(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)", "public <A> void read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)"], ["java.util.concurrent.Future<java.lang.Integer>", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.read(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> read(java.nio.ByteBuffer)"], ["<A> void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.write(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)", "public <A> void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)"], ["java.util.concurrent.Future<java.lang.Integer>", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.write(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> write(java.nio.ByteBuffer)"], ["boolean", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.isOpen()", "public boolean isOpen()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel.close()", "public void close() throws java.io.IOException"], ["java.lang.Thread", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$1.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$15.accept(long)", "public void accept(long)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$6.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$6.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$9$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$5.accept(long)", "public void accept(long)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$11$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$17.run()", "public void run()"], ["boolean", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$FutureReadResult.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$6$1.run()", "public void run()"], ["int", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$9.applyAsInt(int, int)", "public int applyAsInt(int, int)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$10.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$10.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$11.accept(long)", "public void accept(long)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$7.accept(long)", "public void accept(long)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$4.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$4.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$12.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$12.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$6.run()", "public void run()"], ["boolean", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$FutureWriteResult.cancel(boolean)", "public boolean cancel(boolean)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$2.run()", "public void run()"], ["int", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$10.applyAsInt(int, int)", "public int applyAsInt(int, int)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$13.accept(long)", "public void accept(long)"], ["com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown[]", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown.values()", "public static com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown[] values()"], ["com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown.valueOf(java.lang.String)", "public static com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$Shutdown valueOf(java.lang.String)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$1.accept(long)", "public void accept(long)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$14.accept(java.lang.Throwable)", "public void accept(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$14.accept(java.lang.Object)", "public void accept(java.lang.Object)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$7.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$3.accept(long)", "public void accept(long)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$4$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$RegisteredSocket.close()", "public void close()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$12$1.run()", "public void run()"], ["int", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$8.applyAsInt(int, int)", "public int applyAsInt(int, int)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$5$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$5.run()", "public void run()"], ["java.lang.Thread", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$3.newThread(java.lang.Runnable)", "public java.lang.Thread newThread(java.lang.Runnable)"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup$4.run()", "public void run()"], ["com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup(int)", "public com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup(int)"], ["com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup()", "public com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup()"], ["boolean", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.isShutdown()", "public boolean isShutdown()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.shutdown()", "public void shutdown()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.shutdownNow()", "public void shutdownNow()"], ["boolean", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.isTerminated()", "public boolean isTerminated()"], ["boolean", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.awaitTermination(long, java.util.concurrent.TimeUnit)", "public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getStartedReadCount()", "public long getStartedReadCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getStartedWriteCount()", "public long getStartedWriteCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getSuccessfulReadCount()", "public long getSuccessfulReadCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getSuccessfulWriteCount()", "public long getSuccessfulWriteCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getFailedReadCount()", "public long getFailedReadCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getFailedWriteCount()", "public long getFailedWriteCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getCancelledReadCount()", "public long getCancelledReadCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getCancelledWriteCount()", "public long getCancelledWriteCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getCurrentReadCount()", "public long getCurrentReadCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getCurrentWriteCount()", "public long getCurrentWriteCount()"], ["long", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup.getCurrentRegistrationCount()", "public long getCurrentRegistrationCount()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$1$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannel$3$1.run()", "public void run()"], ["com.mongodb.internal.connection.tlschannel.WouldBlockException", "com.mongodb.internal.connection.tlschannel.WouldBlockException()", "public com.mongodb.internal.connection.tlschannel.WouldBlockException()"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$PooledConnection$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.CommandHelper.executeCommand(java.lang.String, org.bson.BsonDocument, com.mongodb.internal.connection.ClusterClock, com.mongodb.internal.connection.InternalConnection)", "public static org.bson.BsonDocument executeCommand(java.lang.String, org.bson.BsonDocument, com.mongodb.internal.connection.ClusterClock, com.mongodb.internal.connection.InternalConnection)"], ["com.mongodb.internal.connection.ConcurrentPool", "com.mongodb.internal.connection.ConcurrentPool(int, com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T>)", "public com.mongodb.internal.connection.ConcurrentPool(int, com.mongodb.internal.connection.ConcurrentPool$ItemFactory<T>)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.release(T)", "public void release(T)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.release(T, boolean)", "public void release(T, boolean)"], ["T", "com.mongodb.internal.connection.ConcurrentPool.get()", "public T get()"], ["T", "com.mongodb.internal.connection.ConcurrentPool.get(long, java.util.concurrent.TimeUnit)", "public T get(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.prune()", "public void prune()"], ["void", "com.mongodb.internal.connection.ConcurrentPool.ensureMinSize(int, boolean)", "public void ensureMinSize(int, boolean)"], ["void", "com.mongodb.internal.connection.ConcurrentPool.close()", "public void close()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getMaxSize()", "public int getMaxSize()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getInUseCount()", "public int getInUseCount()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getAvailableCount()", "public int getAvailableCount()"], ["int", "com.mongodb.internal.connection.ConcurrentPool.getCount()", "public int getCount()"], ["java.lang.String", "com.mongodb.internal.connection.ConcurrentPool.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$AsyncWritableByteChannelAdapter$WriteCompletionHandler.completed(java.lang.Integer, java.lang.Object)", "public void completed(java.lang.Integer, java.lang.Object)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$AsyncWritableByteChannelAdapter$WriteCompletionHandler.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$AsyncWritableByteChannelAdapter$WriteCompletionHandler.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["com.mongodb.internal.connection.SocketStream", "com.mongodb.internal.connection.SocketStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory, com.mongodb.connection.BufferProvider)", "public com.mongodb.internal.connection.SocketStream(com.mongodb.ServerAddress, com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory, com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.internal.connection.SocketStream.open()", "public void open()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.SocketStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.internal.connection.SocketStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.SocketStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["void", "com.mongodb.internal.connection.SocketStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.SocketStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.SocketStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.internal.connection.SocketStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.internal.connection.SocketStream.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.SocketStream.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$4.onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)", "public void onResult(com.mongodb.internal.connection.ResponseBuffers, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$4.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$2.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.WriteConcernResult", "com.mongodb.internal.connection.InsertProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.WriteConcernResult execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.InsertProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.internal.connection.InsertProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["com.mongodb.internal.connection.FieldTrackingBsonWriter", "com.mongodb.internal.connection.FieldTrackingBsonWriter(org.bson.BsonWriter)", "public com.mongodb.internal.connection.FieldTrackingBsonWriter(org.bson.BsonWriter)"], ["boolean", "com.mongodb.internal.connection.FieldTrackingBsonWriter.hasWrittenField()", "public boolean hasWrittenField()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeStartDocument()", "public void writeStartDocument()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeStartArray(java.lang.String)", "public void writeStartArray(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeStartArray()", "public void writeStartArray()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeBinaryData(java.lang.String, org.bson.BsonBinary)", "public void writeBinaryData(java.lang.String, org.bson.BsonBinary)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeBinaryData(org.bson.BsonBinary)", "public void writeBinaryData(org.bson.BsonBinary)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeBoolean(java.lang.String, boolean)", "public void writeBoolean(java.lang.String, boolean)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDateTime(java.lang.String, long)", "public void writeDateTime(java.lang.String, long)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDateTime(long)", "public void writeDateTime(long)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDBPointer(java.lang.String, org.bson.BsonDbPointer)", "public void writeDBPointer(java.lang.String, org.bson.BsonDbPointer)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDBPointer(org.bson.BsonDbPointer)", "public void writeDBPointer(org.bson.BsonDbPointer)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDouble(java.lang.String, double)", "public void writeDouble(java.lang.String, double)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDouble(double)", "public void writeDouble(double)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeInt32(java.lang.String, int)", "public void writeInt32(java.lang.String, int)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeInt32(int)", "public void writeInt32(int)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeInt64(java.lang.String, long)", "public void writeInt64(java.lang.String, long)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeInt64(long)", "public void writeInt64(long)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDecimal128(org.bson.types.Decimal128)", "public void writeDecimal128(org.bson.types.Decimal128)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeDecimal128(java.lang.String, org.bson.types.Decimal128)", "public void writeDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeJavaScript(java.lang.String, java.lang.String)", "public void writeJavaScript(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeJavaScript(java.lang.String)", "public void writeJavaScript(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeJavaScriptWithScope(java.lang.String, java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeJavaScriptWithScope(java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeMaxKey(java.lang.String)", "public void writeMaxKey(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeMaxKey()", "public void writeMaxKey()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeMinKey(java.lang.String)", "public void writeMinKey(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeMinKey()", "public void writeMinKey()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeNull(java.lang.String)", "public void writeNull(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeNull()", "public void writeNull()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeObjectId(java.lang.String, org.bson.types.ObjectId)", "public void writeObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeObjectId(org.bson.types.ObjectId)", "public void writeObjectId(org.bson.types.ObjectId)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)", "public void writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeRegularExpression(org.bson.BsonRegularExpression)", "public void writeRegularExpression(org.bson.BsonRegularExpression)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeString(java.lang.String, java.lang.String)", "public void writeString(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeSymbol(java.lang.String, java.lang.String)", "public void writeSymbol(java.lang.String, java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeSymbol(java.lang.String)", "public void writeSymbol(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeTimestamp(java.lang.String, org.bson.BsonTimestamp)", "public void writeTimestamp(java.lang.String, org.bson.BsonTimestamp)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeTimestamp(org.bson.BsonTimestamp)", "public void writeTimestamp(org.bson.BsonTimestamp)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeUndefined(java.lang.String)", "public void writeUndefined(java.lang.String)"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.writeUndefined()", "public void writeUndefined()"], ["void", "com.mongodb.internal.connection.FieldTrackingBsonWriter.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$5.completed(org.bson.ByteBuf)", "public void completed(org.bson.ByteBuf)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$5.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$5.completed(java.lang.Object)", "public void completed(java.lang.Object)"], ["java.lang.String", "com.mongodb.internal.connection.ZlibCompressor.getName()", "public java.lang.String getName()"], ["byte", "com.mongodb.internal.connection.ZlibCompressor.getId()", "public byte getId()"], ["com.mongodb.internal.connection.ConcurrentPool$Prune[]", "com.mongodb.internal.connection.ConcurrentPool$Prune.values()", "public static com.mongodb.internal.connection.ConcurrentPool$Prune[] values()"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.ConcurrentPool$Prune.valueOf(java.lang.String)", "public static com.mongodb.internal.connection.ConcurrentPool$Prune valueOf(java.lang.String)"], ["void", "com.mongodb.internal.connection.LoggingCommandEventSender.sendStartedEvent()", "public void sendStartedEvent()"], ["void", "com.mongodb.internal.connection.LoggingCommandEventSender.sendFailedEvent(java.lang.Throwable)", "public void sendFailedEvent(java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.LoggingCommandEventSender.sendSucceededEvent(com.mongodb.internal.connection.ResponseBuffers)", "public void sendSucceededEvent(com.mongodb.internal.connection.ResponseBuffers)"], ["void", "com.mongodb.internal.connection.LoggingCommandEventSender.sendSucceededEventForOneWayCommand()", "public void sendSucceededEventForOneWayCommand()"], ["void", "com.mongodb.internal.connection.BaseCluster$WaitQueueHandler.run()", "public void run()"], ["java.lang.String", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.getMechanismName()", "public java.lang.String getMechanismName()"], ["boolean", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.hasInitialResponse()", "public boolean hasInitialResponse()"], ["byte[]", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.evaluateChallenge(byte[])", "public byte[] evaluateChallenge(byte[]) throws javax.security.sasl.SaslException"], ["boolean", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.isComplete()", "public boolean isComplete()"], ["byte[]", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.unwrap(byte[], int, int)", "public byte[] unwrap(byte[], int, int)"], ["byte[]", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.wrap(byte[], int, int)", "public byte[] wrap(byte[], int, int)"], ["java.lang.Object", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.getNegotiatedProperty(java.lang.String)", "public java.lang.Object getNegotiatedProperty(java.lang.String)"], ["void", "com.mongodb.internal.connection.ScramShaAuthenticator$ScramShaSaslClient.dispose()", "public void dispose()"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque", "com.mongodb.internal.connection.ConcurrentLinkedDeque()", "public com.mongodb.internal.connection.ConcurrentLinkedDeque()"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque", "com.mongodb.internal.connection.ConcurrentLinkedDeque(java.util.Collection<? extends E>)", "public com.mongodb.internal.connection.ConcurrentLinkedDeque(java.util.Collection<? extends E>)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addFirst(E)", "public void addFirst(E)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addLast(E)", "public void addLast(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offerFirst(E)", "public boolean offerFirst(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offerLast(E)", "public boolean offerLast(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peekFirst()", "public E peekFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peekLast()", "public E peekLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.getFirst()", "public E getFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.getLast()", "public E getLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pollFirst()", "public E pollFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pollLast()", "public E pollLast()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeFirst()", "public E removeFirst()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeLast()", "public E removeLast()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.offer(E)", "public boolean offer(E)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.add(E)", "public boolean add(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.poll()", "public E poll()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.remove()", "public E remove()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.peek()", "public E peek()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.element()", "public E element()"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.push(E)", "public void push(E)"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque.pop()", "public E pop()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeFirstOccurrence(java.lang.Object)", "public boolean removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.removeLastOccurrence(java.lang.Object)", "public boolean removeLastOccurrence(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.isEmpty()", "public boolean isEmpty()"], ["int", "com.mongodb.internal.connection.ConcurrentLinkedDeque.size()", "public int size()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque.addAll(java.util.Collection<? extends E>)", "public boolean addAll(java.util.Collection<? extends E>)"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque.clear()", "public void clear()"], ["java.lang.Object[]", "com.mongodb.internal.connection.ConcurrentLinkedDeque.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.mongodb.internal.connection.ConcurrentLinkedDeque.toArray(T[])", "public <T> T[] toArray(T[])"], ["com.mongodb.internal.connection.ConcurrentLinkedDeque$RemovalReportingIterator<E>", "com.mongodb.internal.connection.ConcurrentLinkedDeque.iterator()", "public com.mongodb.internal.connection.ConcurrentLinkedDeque$RemovalReportingIterator<E> iterator()"], ["java.util.Iterator<E>", "com.mongodb.internal.connection.ConcurrentLinkedDeque.descendingIterator()", "public java.util.Iterator<E> descendingIterator()"], ["java.util.Iterator", "com.mongodb.internal.connection.ConcurrentLinkedDeque.iterator()", "public java.util.Iterator iterator()"], ["java.lang.Void", "com.mongodb.internal.connection.KillCursorProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Void execute(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.KillCursorProtocol.executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["void", "com.mongodb.internal.connection.KillCursorProtocol.setCommandListener(com.mongodb.event.CommandListener)", "public void setCommandListener(com.mongodb.event.CommandListener)"], ["java.lang.Object", "com.mongodb.internal.connection.KillCursorProtocol.execute(com.mongodb.internal.connection.InternalConnection)", "public java.lang.Object execute(com.mongodb.internal.connection.InternalConnection)"], ["com.mongodb.connection.Connection", "com.mongodb.internal.connection.DefaultConnectionFactory.create(com.mongodb.internal.connection.InternalConnection, com.mongodb.internal.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.Connection create(com.mongodb.internal.connection.InternalConnection, com.mongodb.internal.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.AsyncConnection", "com.mongodb.internal.connection.DefaultConnectionFactory.createAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.internal.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.AsyncConnection createAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.internal.connection.ProtocolExecutor, com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.internal.connection.SplittablePayloadBsonWriter", "com.mongodb.internal.connection.SplittablePayloadBsonWriter(org.bson.BsonBinaryWriter, org.bson.io.BsonOutput, com.mongodb.internal.connection.MessageSettings, com.mongodb.connection.SplittablePayload)", "public com.mongodb.internal.connection.SplittablePayloadBsonWriter(org.bson.BsonBinaryWriter, org.bson.io.BsonOutput, com.mongodb.internal.connection.MessageSettings, com.mongodb.connection.SplittablePayload)"], ["com.mongodb.internal.connection.SplittablePayloadBsonWriter", "com.mongodb.internal.connection.SplittablePayloadBsonWriter(org.bson.BsonBinaryWriter, org.bson.io.BsonOutput, int, com.mongodb.internal.connection.MessageSettings, com.mongodb.connection.SplittablePayload)", "public com.mongodb.internal.connection.SplittablePayloadBsonWriter(org.bson.BsonBinaryWriter, org.bson.io.BsonOutput, int, com.mongodb.internal.connection.MessageSettings, com.mongodb.connection.SplittablePayload)"], ["void", "com.mongodb.internal.connection.SplittablePayloadBsonWriter.writeStartDocument()", "public void writeStartDocument()"], ["void", "com.mongodb.internal.connection.SplittablePayloadBsonWriter.writeEndDocument()", "public void writeEndDocument()"], ["void", "com.mongodb.internal.connection.SplittablePayloadBsonWriter.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["java.lang.Void", "com.mongodb.internal.connection.SaslAuthenticator$2.run()", "public java.lang.Void run()"], ["java.lang.Object", "com.mongodb.internal.connection.SaslAuthenticator$2.run()", "public java.lang.Object run()"], ["void", "com.mongodb.internal.connection.Time.makeTimeConstant()", "public static void makeTimeConstant()"], ["void", "com.mongodb.internal.connection.Time.makeTimeMove()", "public static void makeTimeMove()"], ["long", "com.mongodb.internal.connection.Time.nanoTime()", "public static long nanoTime()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.order(java.nio.ByteOrder)", "public org.bson.ByteBuf order(java.nio.ByteOrder)"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.capacity()", "public int capacity()"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.remaining()", "public int remaining()"], ["boolean", "com.mongodb.internal.connection.CompositeByteBuf.hasRemaining()", "public boolean hasRemaining()"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.position()", "public int position()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.position(int)", "public org.bson.ByteBuf position(int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.clear()", "public org.bson.ByteBuf clear()"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.limit()", "public int limit()"], ["byte", "com.mongodb.internal.connection.CompositeByteBuf.get()", "public byte get()"], ["byte", "com.mongodb.internal.connection.CompositeByteBuf.get(int)", "public byte get(int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.get(byte[])", "public org.bson.ByteBuf get(byte[])"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.get(int, byte[])", "public org.bson.ByteBuf get(int, byte[])"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.get(byte[], int, int)", "public org.bson.ByteBuf get(byte[], int, int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.get(int, byte[], int, int)", "public org.bson.ByteBuf get(int, byte[], int, int)"], ["long", "com.mongodb.internal.connection.CompositeByteBuf.getLong()", "public long getLong()"], ["long", "com.mongodb.internal.connection.CompositeByteBuf.getLong(int)", "public long getLong(int)"], ["double", "com.mongodb.internal.connection.CompositeByteBuf.getDouble()", "public double getDouble()"], ["double", "com.mongodb.internal.connection.CompositeByteBuf.getDouble(int)", "public double getDouble(int)"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.getInt()", "public int getInt()"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.getInt(int)", "public int getInt(int)"], ["byte[]", "com.mongodb.internal.connection.CompositeByteBuf.array()", "public byte[] array()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.limit(int)", "public org.bson.ByteBuf limit(int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.put(int, byte)", "public org.bson.ByteBuf put(int, byte)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.put(byte[], int, int)", "public org.bson.ByteBuf put(byte[], int, int)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.put(byte)", "public org.bson.ByteBuf put(byte)"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.flip()", "public org.bson.ByteBuf flip()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.asReadOnly()", "public org.bson.ByteBuf asReadOnly()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.duplicate()", "public org.bson.ByteBuf duplicate()"], ["java.nio.ByteBuffer", "com.mongodb.internal.connection.CompositeByteBuf.asNIO()", "public java.nio.ByteBuffer asNIO()"], ["int", "com.mongodb.internal.connection.CompositeByteBuf.getReferenceCount()", "public int getReferenceCount()"], ["org.bson.ByteBuf", "com.mongodb.internal.connection.CompositeByteBuf.retain()", "public org.bson.ByteBuf retain()"], ["void", "com.mongodb.internal.connection.CompositeByteBuf.release()", "public void release()"], ["com.mongodb.internal.connection.SingleServerCluster", "com.mongodb.internal.connection.SingleServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.internal.connection.ClusterableServerFactory)", "public com.mongodb.internal.connection.SingleServerCluster(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.internal.connection.ClusterableServerFactory)"], ["void", "com.mongodb.internal.connection.SingleServerCluster.close()", "public void close()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.internal.connection.SingleServerCluster.getCurrentDescription()", "public com.mongodb.connection.ClusterDescription getCurrentDescription()"], ["boolean", "com.mongodb.internal.connection.SingleServerCluster.isClosed()", "public boolean isClosed()"], ["com.mongodb.internal.connection.ClusterableServerFactory", "com.mongodb.internal.connection.SingleServerCluster.getServerFactory()", "public com.mongodb.internal.connection.ClusterableServerFactory getServerFactory()"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.internal.connection.SingleServerCluster.getSettings()", "public com.mongodb.connection.ClusterSettings getSettings()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.internal.connection.SingleServerCluster.getDescription()", "public com.mongodb.connection.ClusterDescription getDescription()"], ["void", "com.mongodb.internal.connection.SingleServerCluster.selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback)", "public void selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback)"], ["com.mongodb.connection.Server", "com.mongodb.internal.connection.SingleServerCluster.selectServer(com.mongodb.selector.ServerSelector)", "public com.mongodb.connection.Server selectServer(com.mongodb.selector.ServerSelector)"], ["org.bson.BsonTimestamp", "com.mongodb.internal.connection.SingleServerCluster.getClusterTime()", "public org.bson.BsonTimestamp getClusterTime()"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.ClientMetadataHelper.createClientMetadataDocument(java.lang.String, com.mongodb.MongoDriverInformation)", "public static org.bson.BsonDocument createClientMetadataDocument(java.lang.String, com.mongodb.MongoDriverInformation)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap()", "public com.mongodb.internal.connection.IndexMap()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap.create()", "public static com.mongodb.internal.connection.IndexMap create()"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap.create(int, int)", "public static com.mongodb.internal.connection.IndexMap create(int, int)"], ["java.lang.Void", "com.mongodb.internal.connection.SaslAuthenticator$Continuator$1.run()", "public java.lang.Void run()"], ["java.lang.Object", "com.mongodb.internal.connection.SaslAuthenticator$Continuator$1.run()", "public java.lang.Object run()"], ["java.lang.String", "com.mongodb.internal.connection.ZstdCompressor.getName()", "public java.lang.String getName()"], ["byte", "com.mongodb.internal.connection.ZstdCompressor.getId()", "public byte getId()"], ["void", "com.mongodb.internal.connection.ZstdCompressor.compress(java.util.List<org.bson.ByteBuf>, org.bson.io.BsonOutput)", "public void compress(java.util.List<org.bson.ByteBuf>, org.bson.io.BsonOutput)"], ["void", "com.mongodb.internal.connection.Java8SniSslHelper.enableSni(java.lang.String, javax.net.ssl.SSLParameters)", "public void enableSni(java.lang.String, javax.net.ssl.SSLParameters)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$FutureAsyncCompletionHandler.completed(T)", "public void completed(T)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$FutureAsyncCompletionHandler.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["java.lang.String", "com.mongodb.internal.connection.ScramShaAuthenticator.getMechanismName()", "public java.lang.String getMechanismName()"], ["void", "com.mongodb.internal.connection.CommandHelper$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.CommandHelper$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.UsageTrackingInternalConnection", "com.mongodb.internal.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.create(boolean)", "public com.mongodb.internal.connection.UsageTrackingInternalConnection create(boolean)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.close(com.mongodb.internal.connection.UsageTrackingInternalConnection)", "public void close(com.mongodb.internal.connection.UsageTrackingInternalConnection)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.shouldPrune(com.mongodb.internal.connection.UsageTrackingInternalConnection)", "public com.mongodb.internal.connection.ConcurrentPool$Prune shouldPrune(com.mongodb.internal.connection.UsageTrackingInternalConnection)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.shouldPrune(java.lang.Object)", "public com.mongodb.internal.connection.ConcurrentPool$Prune shouldPrune(java.lang.Object)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.close(java.lang.Object)", "public void close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.connection.DefaultConnectionPool$UsageTrackingInternalConnectionItemFactory.create(boolean)", "public java.lang.Object create(boolean)"], ["void", "com.mongodb.internal.connection.DefaultServer$DefaultServerProtocolExecutor$2.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["com.mongodb.internal.connection.InternalConnection", "com.mongodb.internal.connection.InternalStreamConnectionFactory.create(com.mongodb.connection.ServerId)", "public com.mongodb.internal.connection.InternalConnection create(com.mongodb.connection.ServerId)"], ["java.lang.Void", "com.mongodb.internal.connection.SaslAuthenticator$1.run()", "public java.lang.Void run()"], ["java.lang.Object", "com.mongodb.internal.connection.SaslAuthenticator$1.run()", "public java.lang.Object run()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.hasNext()", "public boolean hasNext()"], ["E", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.next()", "public E next()"], ["void", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.remove()", "public void remove()"], ["boolean", "com.mongodb.internal.connection.ConcurrentLinkedDeque$CLDIterator.reportingRemove()", "public boolean reportingRemove()"], ["com.mongodb.internal.connection.DefaultClusterableServerFactory", "com.mongodb.internal.connection.DefaultClusterableServerFactory(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation, java.util.List<com.mongodb.MongoCompressor>)", "public com.mongodb.internal.connection.DefaultClusterableServerFactory(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation, java.util.List<com.mongodb.MongoCompressor>)"], ["com.mongodb.internal.connection.ClusterableServer", "com.mongodb.internal.connection.DefaultClusterableServerFactory.create(com.mongodb.ServerAddress, com.mongodb.event.ServerListener, com.mongodb.internal.connection.ClusterClock)", "public com.mongodb.internal.connection.ClusterableServer create(com.mongodb.ServerAddress, com.mongodb.event.ServerListener, com.mongodb.internal.connection.ClusterClock)"], ["com.mongodb.connection.ServerSettings", "com.mongodb.internal.connection.DefaultClusterableServerFactory.getSettings()", "public com.mongodb.connection.ServerSettings getSettings()"], ["void", "com.mongodb.internal.connection.X509Authenticator$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.X509Authenticator$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.SaslAuthenticator$2$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.SaslAuthenticator$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.internal.connection.IndexMap", "com.mongodb.internal.connection.IndexMap$HashBased.add(int, int)", "public com.mongodb.internal.connection.IndexMap add(int, int)"], ["int", "com.mongodb.internal.connection.IndexMap$HashBased.map(int)", "public int map(int)"], ["com.mongodb.internal.connection.InternalStreamConnectionInitializer", "com.mongodb.internal.connection.InternalStreamConnectionInitializer(java.util.List<com.mongodb.internal.connection.Authenticator>, org.bson.BsonDocument, java.util.List<com.mongodb.MongoCompressor>)", "public com.mongodb.internal.connection.InternalStreamConnectionInitializer(java.util.List<com.mongodb.internal.connection.Authenticator>, org.bson.BsonDocument, java.util.List<com.mongodb.MongoCompressor>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.internal.connection.InternalStreamConnectionInitializer.initialize(com.mongodb.internal.connection.InternalConnection)", "public com.mongodb.connection.ConnectionDescription initialize(com.mongodb.internal.connection.InternalConnection)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer.initializeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>)", "public void initializeAsync(com.mongodb.internal.connection.InternalConnection, com.mongodb.async.SingleResultCallback<com.mongodb.connection.ConnectionDescription>)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool.start()", "public void start()"], ["com.mongodb.internal.connection.InternalConnection", "com.mongodb.internal.connection.DefaultConnectionPool.get()", "public com.mongodb.internal.connection.InternalConnection get()"], ["com.mongodb.internal.connection.InternalConnection", "com.mongodb.internal.connection.DefaultConnectionPool.get(long, java.util.concurrent.TimeUnit)", "public com.mongodb.internal.connection.InternalConnection get(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool.getAsync(com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.InternalConnection>)", "public void getAsync(com.mongodb.async.SingleResultCallback<com.mongodb.internal.connection.InternalConnection>)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool.invalidate()", "public void invalidate()"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool.close()", "public void close()"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool.doMaintenance()", "public void doMaintenance()"], ["java.lang.Boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$4.find(org.bson.BsonReader)", "public java.lang.Boolean find(org.bson.BsonReader)"], ["java.lang.Boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$4.notFound()", "public java.lang.Boolean notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$4.notFound()", "public java.lang.Object notFound()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument$4.find(org.bson.BsonReader)", "public java.lang.Object find(org.bson.BsonReader)"], ["void", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.clear()", "public void clear()"], ["org.bson.BsonValue", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.append(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument append(java.lang.String, org.bson.BsonValue)"], ["void", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["org.bson.BsonValue", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.isEmpty()", "public boolean isEmpty()"], ["int", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.size()", "public int size()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["java.util.Collection<org.bson.BsonValue>", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.lang.String>", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["java.lang.String", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.getFirstKey()", "public java.lang.String getFirstKey()"], ["boolean", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.hashCode()", "public int hashCode()"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.connection.AbstractByteBufBsonDocument.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.UsageTrackingInternalConnection$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["<A> void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)", "public <A> void read(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)", "public <A> void write(java.nio.ByteBuffer[], int, int, long, java.util.concurrent.TimeUnit, A, java.nio.channels.CompletionHandler<java.lang.Long, ? super A>)"], ["<A> void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.read(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void read(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["java.util.concurrent.Future<java.lang.Integer>", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.read(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> read(java.nio.ByteBuffer)"], ["<A> void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.write(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)", "public <A> void write(java.nio.ByteBuffer, A, java.nio.channels.CompletionHandler<java.lang.Integer, ? super A>)"], ["java.util.concurrent.Future<java.lang.Integer>", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.write(java.nio.ByteBuffer)", "public java.util.concurrent.Future<java.lang.Integer> write(java.nio.ByteBuffer)"], ["boolean", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.isOpen()", "public boolean isOpen()"], ["void", "com.mongodb.internal.connection.AsynchronousSocketChannelStream$AsynchronousSocketChannelAdapter.close()", "public void close() throws java.io.IOException"], ["java.nio.ByteBuffer", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.create(boolean)", "public java.nio.ByteBuffer create(boolean)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.close(java.nio.ByteBuffer)", "public void close(java.nio.ByteBuffer)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.shouldPrune(java.nio.ByteBuffer)", "public com.mongodb.internal.connection.ConcurrentPool$Prune shouldPrune(java.nio.ByteBuffer)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.shouldPrune(java.lang.Object)", "public com.mongodb.internal.connection.ConcurrentPool$Prune shouldPrune(java.lang.Object)"], ["void", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.close(java.lang.Object)", "public void close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.connection.PowerOfTwoBufferPool$1.create(boolean)", "public java.lang.Object create(boolean)"], ["void", "com.mongodb.internal.connection.DefaultConnectionPool$1.run()", "public void run()"], ["void", "com.mongodb.internal.connection.SingleServerCluster$DefaultServerStateListener.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)", "public void serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$1$1.onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)", "public void onResult(com.mongodb.connection.ConnectionDescription, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnection$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$3.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.InternalStreamConnectionInitializer$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["boolean", "com.mongodb.internal.connection.BaseQueryMessage.isTailableCursor()", "public boolean isTailableCursor()"], ["com.mongodb.internal.connection.BaseQueryMessage", "com.mongodb.internal.connection.BaseQueryMessage.tailableCursor(boolean)", "public com.mongodb.internal.connection.BaseQueryMessage tailableCursor(boolean)"], ["boolean", "com.mongodb.internal.connection.BaseQueryMessage.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.internal.connection.BaseQueryMessage", "com.mongodb.internal.connection.BaseQueryMessage.slaveOk(boolean)", "public com.mongodb.internal.connection.BaseQueryMessage slaveOk(boolean)"], ["boolean", "com.mongodb.internal.connection.BaseQueryMessage.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.internal.connection.BaseQueryMessage", "com.mongodb.internal.connection.BaseQueryMessage.oplogReplay(boolean)", "public com.mongodb.internal.connection.BaseQueryMessage oplogReplay(boolean)"], ["boolean", "com.mongodb.internal.connection.BaseQueryMessage.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.internal.connection.BaseQueryMessage", "com.mongodb.internal.connection.BaseQueryMessage.noCursorTimeout(boolean)", "public com.mongodb.internal.connection.BaseQueryMessage noCursorTimeout(boolean)"], ["boolean", "com.mongodb.internal.connection.BaseQueryMessage.isAwaitData()", "public boolean isAwaitData()"], ["com.mongodb.internal.connection.BaseQueryMessage", "com.mongodb.internal.connection.BaseQueryMessage.awaitData(boolean)", "public com.mongodb.internal.connection.BaseQueryMessage awaitData(boolean)"], ["boolean", "com.mongodb.internal.connection.BaseQueryMessage.isPartial()", "public boolean isPartial()"], ["com.mongodb.internal.connection.BaseQueryMessage", "com.mongodb.internal.connection.BaseQueryMessage.partial(boolean)", "public com.mongodb.internal.connection.BaseQueryMessage partial(boolean)"], ["void", "com.mongodb.internal.connection.SendMessageCallback.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.SendMessageCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.util.List<com.mongodb.internal.connection.MongoCredentialWithCache>", "com.mongodb.internal.connection.MongoCredentialWithCache.wrapCredentialList(java.util.List<com.mongodb.MongoCredential>)", "public static java.util.List<com.mongodb.internal.connection.MongoCredentialWithCache> wrapCredentialList(java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.internal.connection.MongoCredentialWithCache", "com.mongodb.internal.connection.MongoCredentialWithCache(com.mongodb.MongoCredential)", "public com.mongodb.internal.connection.MongoCredentialWithCache(com.mongodb.MongoCredential)"], ["com.mongodb.internal.connection.MongoCredentialWithCache", "com.mongodb.internal.connection.MongoCredentialWithCache(com.mongodb.MongoCredential, com.mongodb.internal.connection.MongoCredentialWithCache$Cache)", "public com.mongodb.internal.connection.MongoCredentialWithCache(com.mongodb.MongoCredential, com.mongodb.internal.connection.MongoCredentialWithCache$Cache)"], ["com.mongodb.internal.connection.MongoCredentialWithCache", "com.mongodb.internal.connection.MongoCredentialWithCache.withMechanism(com.mongodb.AuthenticationMechanism)", "public com.mongodb.internal.connection.MongoCredentialWithCache withMechanism(com.mongodb.AuthenticationMechanism)"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.internal.connection.MongoCredentialWithCache.getAuthenticationMechanism()", "public com.mongodb.AuthenticationMechanism getAuthenticationMechanism()"], ["com.mongodb.MongoCredential", "com.mongodb.internal.connection.MongoCredentialWithCache.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["<T> T", "com.mongodb.internal.connection.MongoCredentialWithCache.getFromCache(java.lang.Object, java.lang.Class<T>)", "public <T> T getFromCache(java.lang.Object, java.lang.Class<T>)"], ["void", "com.mongodb.internal.connection.MongoCredentialWithCache.putInCache(java.lang.Object, java.lang.Object)", "public void putInCache(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.mongodb.internal.connection.SnappyCompressor.getName()", "public java.lang.String getName()"], ["byte", "com.mongodb.internal.connection.SnappyCompressor.getId()", "public byte getId()"], ["void", "com.mongodb.internal.connection.SnappyCompressor.compress(java.util.List<org.bson.ByteBuf>, org.bson.io.BsonOutput)", "public void compress(java.util.List<org.bson.ByteBuf>, org.bson.io.BsonOutput)"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings$Builder()", "public com.mongodb.internal.connection.MessageSettings$Builder()"], ["com.mongodb.internal.connection.MessageSettings", "com.mongodb.internal.connection.MessageSettings$Builder.build()", "public com.mongodb.internal.connection.MessageSettings build()"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings$Builder.maxDocumentSize(int)", "public com.mongodb.internal.connection.MessageSettings$Builder maxDocumentSize(int)"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings$Builder.maxMessageSize(int)", "public com.mongodb.internal.connection.MessageSettings$Builder maxMessageSize(int)"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings$Builder.maxBatchCount(int)", "public com.mongodb.internal.connection.MessageSettings$Builder maxBatchCount(int)"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings$Builder.maxWireVersion(int)", "public com.mongodb.internal.connection.MessageSettings$Builder maxWireVersion(int)"], ["com.mongodb.internal.connection.MessageSettings$Builder", "com.mongodb.internal.connection.MessageSettings$Builder.serverType(com.mongodb.connection.ServerType)", "public com.mongodb.internal.connection.MessageSettings$Builder serverType(com.mongodb.connection.ServerType)"], ["void", "com.mongodb.internal.connection.KillCursorProtocol$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.KillCursorProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.internal.connection.PlainAuthenticator.getMechanismName()", "public java.lang.String getMechanismName()"], ["void", "com.mongodb.internal.connection.DeleteProtocol$1.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.internal.connection.DeleteProtocol$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonTimestamp", "com.mongodb.internal.connection.BaseCluster.getClusterTime()", "public org.bson.BsonTimestamp getClusterTime()"], ["com.mongodb.connection.Server", "com.mongodb.internal.connection.BaseCluster.selectServer(com.mongodb.selector.ServerSelector)", "public com.mongodb.connection.Server selectServer(com.mongodb.selector.ServerSelector)"], ["void", "com.mongodb.internal.connection.BaseCluster.selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>)", "public void selectServerAsync(com.mongodb.selector.ServerSelector, com.mongodb.async.SingleResultCallback<com.mongodb.connection.Server>)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.internal.connection.BaseCluster.getDescription()", "public com.mongodb.connection.ClusterDescription getDescription()"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.internal.connection.BaseCluster.getSettings()", "public com.mongodb.connection.ClusterSettings getSettings()"], ["com.mongodb.internal.connection.ClusterableServerFactory", "com.mongodb.internal.connection.BaseCluster.getServerFactory()", "public com.mongodb.internal.connection.ClusterableServerFactory getServerFactory()"], ["void", "com.mongodb.internal.connection.BaseCluster.close()", "public void close()"], ["boolean", "com.mongodb.internal.connection.BaseCluster.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.internal.connection.BaseCluster.getCurrentDescription()", "public com.mongodb.connection.ClusterDescription getCurrentDescription()"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$BasicCompletionHandler.completed(java.lang.Integer, java.lang.Void)", "public void completed(java.lang.Integer, java.lang.Void)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$BasicCompletionHandler.failed(java.lang.Throwable, java.lang.Void)", "public void failed(java.lang.Throwable, java.lang.Void)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$BasicCompletionHandler.failed(java.lang.Throwable, java.lang.Object)", "public void failed(java.lang.Throwable, java.lang.Object)"], ["void", "com.mongodb.internal.connection.AsynchronousChannelStream$BasicCompletionHandler.completed(java.lang.Object, java.lang.Object)", "public void completed(java.lang.Object, java.lang.Object)"], ["int", "com.mongodb.internal.connection.Compressor$ByteBufInputStream.read(byte[], int, int)", "public int read(byte[], int, int)"], ["int", "com.mongodb.internal.connection.Compressor$ByteBufInputStream.read()", "public int read()"], ["T", "com.mongodb.internal.connection.ChangeEvent.getPreviousValue()", "public T getPreviousValue()"], ["T", "com.mongodb.internal.connection.ChangeEvent.getNewValue()", "public T getNewValue()"], ["boolean", "com.mongodb.internal.connection.ChangeEvent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.internal.connection.ChangeEvent.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.internal.connection.ChangeEvent.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.internal.connection.DefaultServer$DefaultServerStateListener.stateChanged(com.mongodb.internal.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)", "public void stateChanged(com.mongodb.internal.connection.ChangeEvent<com.mongodb.connection.ServerDescription>)"], ["java.lang.String", "com.mongodb.internal.authentication.NativeAuthenticationHelper.createAuthenticationHash(java.lang.String, char[])", "public static java.lang.String createAuthenticationHash(java.lang.String, char[])"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getAuthCommand(java.lang.String, char[], java.lang.String)", "public static org.bson.BsonDocument getAuthCommand(java.lang.String, char[], java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getAuthCommand(java.lang.String, java.lang.String, java.lang.String)", "public static org.bson.BsonDocument getAuthCommand(java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.internal.authentication.NativeAuthenticationHelper.getNonceCommand()", "public static org.bson.BsonDocument getNonceCommand()"], ["java.lang.String", "com.mongodb.internal.authentication.SaslPrep.saslPrepQuery(java.lang.String)", "public static java.lang.String saslPrepQuery(java.lang.String)"], ["java.lang.String", "com.mongodb.internal.authentication.SaslPrep.saslPrepStored(java.lang.String)", "public static java.lang.String saslPrepStored(java.lang.String)"], ["<T> com.mongodb.async.SingleResultCallback<T>", "com.mongodb.internal.async.ErrorHandlingResultCallback.errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>, com.mongodb.diagnostics.logging.Logger)", "public static <T> com.mongodb.async.SingleResultCallback<T> errorHandlingCallback(com.mongodb.async.SingleResultCallback<T>, com.mongodb.diagnostics.logging.Logger)"], ["void", "com.mongodb.internal.async.ErrorHandlingResultCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["com.mongodb.internal.HexUtils", "com.mongodb.internal.HexUtils()", "public com.mongodb.internal.HexUtils()"], ["java.lang.String", "com.mongodb.internal.HexUtils.toHex(byte[])", "public static java.lang.String toHex(byte[])"], ["java.lang.String", "com.mongodb.internal.HexUtils.hexMD5(byte[])", "public static java.lang.String hexMD5(byte[])"], ["java.lang.String", "com.mongodb.internal.HexUtils.hexMD5(java.nio.ByteBuffer, int, int)", "public static java.lang.String hexMD5(java.nio.ByteBuffer, int, int)"], ["com.mongodb.internal.client.model.CountStrategy[]", "com.mongodb.internal.client.model.CountStrategy.values()", "public static com.mongodb.internal.client.model.CountStrategy[] values()"], ["com.mongodb.internal.client.model.CountStrategy", "com.mongodb.internal.client.model.CountStrategy.valueOf(java.lang.String)", "public static com.mongodb.internal.client.model.CountStrategy valueOf(java.lang.String)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.internal.client.model.CountOptionsHelper.fromEstimatedDocumentCountOptions(com.mongodb.client.model.EstimatedDocumentCountOptions)", "public static com.mongodb.client.model.CountOptions fromEstimatedDocumentCountOptions(com.mongodb.client.model.EstimatedDocumentCountOptions)"], ["com.mongodb.internal.session.BaseClientSessionImpl", "com.mongodb.internal.session.BaseClientSessionImpl(com.mongodb.internal.session.ServerSessionPool, java.lang.Object, com.mongodb.ClientSessionOptions)", "public com.mongodb.internal.session.BaseClientSessionImpl(com.mongodb.internal.session.ServerSessionPool, java.lang.Object, com.mongodb.ClientSessionOptions)"], ["com.mongodb.ServerAddress", "com.mongodb.internal.session.BaseClientSessionImpl.getPinnedServerAddress()", "public com.mongodb.ServerAddress getPinnedServerAddress()"], ["void", "com.mongodb.internal.session.BaseClientSessionImpl.setPinnedServerAddress(com.mongodb.ServerAddress)", "public void setPinnedServerAddress(com.mongodb.ServerAddress)"], ["org.bson.BsonDocument", "com.mongodb.internal.session.BaseClientSessionImpl.getRecoveryToken()", "public org.bson.BsonDocument getRecoveryToken()"], ["void", "com.mongodb.internal.session.BaseClientSessionImpl.setRecoveryToken(org.bson.BsonDocument)", "public void setRecoveryToken(org.bson.BsonDocument)"], ["com.mongodb.ClientSessionOptions", "com.mongodb.internal.session.BaseClientSessionImpl.getOptions()", "public com.mongodb.ClientSessionOptions getOptions()"], ["boolean", "com.mongodb.internal.session.BaseClientSessionImpl.isCausallyConsistent()", "public boolean isCausallyConsistent()"], ["java.lang.Object", "com.mongodb.internal.session.BaseClientSessionImpl.getOriginator()", "public java.lang.Object getOriginator()"], ["org.bson.BsonDocument", "com.mongodb.internal.session.BaseClientSessionImpl.getClusterTime()", "public org.bson.BsonDocument getClusterTime()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.session.BaseClientSessionImpl.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["com.mongodb.session.ServerSession", "com.mongodb.internal.session.BaseClientSessionImpl.getServerSession()", "public com.mongodb.session.ServerSession getServerSession()"], ["void", "com.mongodb.internal.session.BaseClientSessionImpl.advanceOperationTime(org.bson.BsonTimestamp)", "public void advanceOperationTime(org.bson.BsonTimestamp)"], ["void", "com.mongodb.internal.session.BaseClientSessionImpl.advanceClusterTime(org.bson.BsonDocument)", "public void advanceClusterTime(org.bson.BsonDocument)"], ["void", "com.mongodb.internal.session.BaseClientSessionImpl.close()", "public void close()"], ["com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.create(boolean)", "public com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl create(boolean)"], ["void", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.close(com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl)", "public void close(com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.shouldPrune(com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl)", "public com.mongodb.internal.connection.ConcurrentPool$Prune shouldPrune(com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl)"], ["com.mongodb.internal.connection.ConcurrentPool$Prune", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.shouldPrune(java.lang.Object)", "public com.mongodb.internal.connection.ConcurrentPool$Prune shouldPrune(java.lang.Object)"], ["void", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.close(java.lang.Object)", "public void close(java.lang.Object)"], ["java.lang.Object", "com.mongodb.internal.session.ServerSessionPool$ServerSessionItemFactory.create(boolean)", "public java.lang.Object create(boolean)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.internal.session.ServerSessionPool$2.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["com.mongodb.internal.session.ServerSessionPool", "com.mongodb.internal.session.ServerSessionPool(com.mongodb.connection.Cluster)", "public com.mongodb.internal.session.ServerSessionPool(com.mongodb.connection.Cluster)"], ["com.mongodb.internal.session.ServerSessionPool", "com.mongodb.internal.session.ServerSessionPool(com.mongodb.connection.Cluster, com.mongodb.internal.session.ServerSessionPool$Clock)", "public com.mongodb.internal.session.ServerSessionPool(com.mongodb.connection.Cluster, com.mongodb.internal.session.ServerSessionPool$Clock)"], ["com.mongodb.session.ServerSession", "com.mongodb.internal.session.ServerSessionPool.get()", "public com.mongodb.session.ServerSession get()"], ["void", "com.mongodb.internal.session.ServerSessionPool.release(com.mongodb.session.ServerSession)", "public void release(com.mongodb.session.ServerSession)"], ["void", "com.mongodb.internal.session.ServerSessionPool.close()", "public void close()"], ["int", "com.mongodb.internal.session.ServerSessionPool.getInUseCount()", "public int getInUseCount()"], ["long", "com.mongodb.internal.session.ServerSessionPool$1.millis()", "public long millis()"], ["com.mongodb.internal.session.ClientSessionContext", "com.mongodb.internal.session.ClientSessionContext(com.mongodb.session.ClientSession)", "public com.mongodb.internal.session.ClientSessionContext(com.mongodb.session.ClientSession)"], ["com.mongodb.session.ClientSession", "com.mongodb.internal.session.ClientSessionContext.getClientSession()", "public com.mongodb.session.ClientSession getClientSession()"], ["boolean", "com.mongodb.internal.session.ClientSessionContext.hasSession()", "public boolean hasSession()"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ClientSessionContext.getSessionId()", "public org.bson.BsonDocument getSessionId()"], ["boolean", "com.mongodb.internal.session.ClientSessionContext.isCausallyConsistent()", "public boolean isCausallyConsistent()"], ["long", "com.mongodb.internal.session.ClientSessionContext.getTransactionNumber()", "public long getTransactionNumber()"], ["long", "com.mongodb.internal.session.ClientSessionContext.advanceTransactionNumber()", "public long advanceTransactionNumber()"], ["org.bson.BsonTimestamp", "com.mongodb.internal.session.ClientSessionContext.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["void", "com.mongodb.internal.session.ClientSessionContext.advanceOperationTime(org.bson.BsonTimestamp)", "public void advanceOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ClientSessionContext.getClusterTime()", "public org.bson.BsonDocument getClusterTime()"], ["void", "com.mongodb.internal.session.ClientSessionContext.advanceClusterTime(org.bson.BsonDocument)", "public void advanceClusterTime(org.bson.BsonDocument)"], ["void", "com.mongodb.internal.session.ClientSessionContext.setRecoveryToken(org.bson.BsonDocument)", "public void setRecoveryToken(org.bson.BsonDocument)"], ["void", "com.mongodb.internal.session.ClientSessionContext.unpinServerAddress()", "public void unpinServerAddress()"], ["long", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.getTransactionNumber()", "public long getTransactionNumber()"], ["org.bson.BsonDocument", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.getIdentifier()", "public org.bson.BsonDocument getIdentifier()"], ["long", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.advanceTransactionNumber()", "public long advanceTransactionNumber()"], ["boolean", "com.mongodb.internal.session.ServerSessionPool$ServerSessionImpl.isClosed()", "public boolean isClosed()"], ["com.mongodb.management.MBeanServer", "com.mongodb.management.MBeanServerFactory.getMBeanServer()", "public static com.mongodb.management.MBeanServer getMBeanServer()"], ["java.lang.String", "com.mongodb.management.ConnectionPoolStatistics.getHost()", "public java.lang.String getHost()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getPort()", "public int getPort()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getMinSize()", "public int getMinSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getMaxSize()", "public int getMaxSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getSize()", "public int getSize()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getCheckedOutCount()", "public int getCheckedOutCount()"], ["int", "com.mongodb.management.ConnectionPoolStatistics.getWaitQueueSize()", "public int getWaitQueueSize()"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionAdded(com.mongodb.event.ConnectionAddedEvent)", "public void connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.management.ConnectionPoolStatistics.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["com.mongodb.management.JMXConnectionPoolListener", "com.mongodb.management.JMXConnectionPoolListener()", "public com.mongodb.management.JMXConnectionPoolListener()"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionAdded(com.mongodb.event.ConnectionAddedEvent)", "public void connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.management.JMXConnectionPoolListener.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.management.NullMBeanServer", "com.mongodb.management.NullMBeanServer()", "public com.mongodb.management.NullMBeanServer()"], ["void", "com.mongodb.management.NullMBeanServer.unregisterMBean(java.lang.String)", "public void unregisterMBean(java.lang.String)"], ["void", "com.mongodb.management.NullMBeanServer.registerMBean(java.lang.Object, java.lang.String)", "public void registerMBean(java.lang.Object, java.lang.String)"], ["com.mongodb.bulk.BulkWriteUpsert", "com.mongodb.bulk.BulkWriteUpsert(int, org.bson.BsonValue)", "public com.mongodb.bulk.BulkWriteUpsert(int, org.bson.BsonValue)"], ["int", "com.mongodb.bulk.BulkWriteUpsert.getIndex()", "public int getIndex()"], ["org.bson.BsonValue", "com.mongodb.bulk.BulkWriteUpsert.getId()", "public org.bson.BsonValue getId()"], ["boolean", "com.mongodb.bulk.BulkWriteUpsert.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteUpsert.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteUpsert.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getDeletedCount()", "public int getDeletedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.bulk.BulkWriteResult$1.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.bulk.BulkWriteUpsert>", "com.mongodb.bulk.BulkWriteResult$1.getUpserts()", "public java.util.List<com.mongodb.bulk.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteResult$1.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteResult$1.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.BulkWriteError", "com.mongodb.bulk.BulkWriteError(int, java.lang.String, org.bson.BsonDocument, int)", "public com.mongodb.bulk.BulkWriteError(int, java.lang.String, org.bson.BsonDocument, int)"], ["int", "com.mongodb.bulk.BulkWriteError.getIndex()", "public int getIndex()"], ["boolean", "com.mongodb.bulk.BulkWriteError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteError.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.InsertRequest", "com.mongodb.bulk.InsertRequest(org.bson.BsonDocument)", "public com.mongodb.bulk.InsertRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.InsertRequest.getDocument()", "public org.bson.BsonDocument getDocument()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.InsertRequest.getType()", "public com.mongodb.bulk.WriteRequest$Type getType()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest(org.bson.BsonDocument, org.bson.BsonValue, com.mongodb.bulk.WriteRequest$Type)", "public com.mongodb.bulk.UpdateRequest(org.bson.BsonDocument, org.bson.BsonValue, com.mongodb.bulk.WriteRequest$Type)"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.UpdateRequest.getType()", "public com.mongodb.bulk.WriteRequest$Type getType()"], ["org.bson.BsonDocument", "com.mongodb.bulk.UpdateRequest.getFilter()", "public org.bson.BsonDocument getFilter()"], ["org.bson.BsonDocument", "com.mongodb.bulk.UpdateRequest.getUpdate()", "public org.bson.BsonDocument getUpdate()"], ["org.bson.BsonValue", "com.mongodb.bulk.UpdateRequest.getUpdateValue()", "public org.bson.BsonValue getUpdateValue()"], ["boolean", "com.mongodb.bulk.UpdateRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.multi(boolean)", "public com.mongodb.bulk.UpdateRequest multi(boolean)"], ["boolean", "com.mongodb.bulk.UpdateRequest.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.upsert(boolean)", "public com.mongodb.bulk.UpdateRequest upsert(boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.bulk.UpdateRequest.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.collation(com.mongodb.client.model.Collation)", "public com.mongodb.bulk.UpdateRequest collation(com.mongodb.client.model.Collation)"], ["com.mongodb.bulk.UpdateRequest", "com.mongodb.bulk.UpdateRequest.arrayFilters(java.util.List<org.bson.BsonDocument>)", "public com.mongodb.bulk.UpdateRequest arrayFilters(java.util.List<org.bson.BsonDocument>)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.bulk.UpdateRequest.getArrayFilters()", "public java.util.List<org.bson.BsonDocument> getArrayFilters()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult()", "public com.mongodb.bulk.BulkWriteResult()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)", "public static com.mongodb.bulk.BulkWriteResult acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)", "public static com.mongodb.bulk.BulkWriteResult acknowledged(com.mongodb.bulk.WriteRequest$Type, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.acknowledged(int, int, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)", "public static com.mongodb.bulk.BulkWriteResult acknowledged(int, int, int, java.lang.Integer, java.util.List<com.mongodb.bulk.BulkWriteUpsert>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.bulk.BulkWriteResult.unacknowledged()", "public static com.mongodb.bulk.BulkWriteResult unacknowledged()"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.bulk.WriteConcernError(int, java.lang.String, java.lang.String, org.bson.BsonDocument)", "public com.mongodb.bulk.WriteConcernError(int, java.lang.String, java.lang.String, org.bson.BsonDocument)"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.bulk.WriteConcernError(int, java.lang.String, org.bson.BsonDocument)", "public com.mongodb.bulk.WriteConcernError(int, java.lang.String, org.bson.BsonDocument)"], ["int", "com.mongodb.bulk.WriteConcernError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.getCodeName()", "public java.lang.String getCodeName()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.getMessage()", "public java.lang.String getMessage()"], ["org.bson.BsonDocument", "com.mongodb.bulk.WriteConcernError.getDetails()", "public org.bson.BsonDocument getDetails()"], ["boolean", "com.mongodb.bulk.WriteConcernError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.WriteConcernError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.WriteConcernError.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getKeys()", "public org.bson.BsonDocument getKeys()"], ["boolean", "com.mongodb.bulk.IndexRequest.isBackground()", "public boolean isBackground()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.background(boolean)", "public com.mongodb.bulk.IndexRequest background(boolean)"], ["boolean", "com.mongodb.bulk.IndexRequest.isUnique()", "public boolean isUnique()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.unique(boolean)", "public com.mongodb.bulk.IndexRequest unique(boolean)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getName()", "public java.lang.String getName()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.name(java.lang.String)", "public com.mongodb.bulk.IndexRequest name(java.lang.String)"], ["boolean", "com.mongodb.bulk.IndexRequest.isSparse()", "public boolean isSparse()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.sparse(boolean)", "public com.mongodb.bulk.IndexRequest sparse(boolean)"], ["java.lang.Long", "com.mongodb.bulk.IndexRequest.getExpireAfter(java.util.concurrent.TimeUnit)", "public java.lang.Long getExpireAfter(java.util.concurrent.TimeUnit)"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)", "public com.mongodb.bulk.IndexRequest expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getVersion()", "public java.lang.Integer getVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.version(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest version(java.lang.Integer)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getWeights()", "public org.bson.BsonDocument getWeights()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.weights(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest weights(org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getDefaultLanguage()", "public java.lang.String getDefaultLanguage()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.defaultLanguage(java.lang.String)", "public com.mongodb.bulk.IndexRequest defaultLanguage(java.lang.String)"], ["java.lang.String", "com.mongodb.bulk.IndexRequest.getLanguageOverride()", "public java.lang.String getLanguageOverride()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.languageOverride(java.lang.String)", "public com.mongodb.bulk.IndexRequest languageOverride(java.lang.String)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getTextVersion()", "public java.lang.Integer getTextVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.textVersion(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest textVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getSphereVersion()", "public java.lang.Integer getSphereVersion()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.sphereVersion(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest sphereVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.bulk.IndexRequest.getBits()", "public java.lang.Integer getBits()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.bits(java.lang.Integer)", "public com.mongodb.bulk.IndexRequest bits(java.lang.Integer)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getMin()", "public java.lang.Double getMin()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.min(java.lang.Double)", "public com.mongodb.bulk.IndexRequest min(java.lang.Double)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getMax()", "public java.lang.Double getMax()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.max(java.lang.Double)", "public com.mongodb.bulk.IndexRequest max(java.lang.Double)"], ["java.lang.Double", "com.mongodb.bulk.IndexRequest.getBucketSize()", "public java.lang.Double getBucketSize()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.bucketSize(java.lang.Double)", "public com.mongodb.bulk.IndexRequest bucketSize(java.lang.Double)"], ["boolean", "com.mongodb.bulk.IndexRequest.getDropDups()", "public boolean getDropDups()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.dropDups(boolean)", "public com.mongodb.bulk.IndexRequest dropDups(boolean)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getStorageEngine()", "public org.bson.BsonDocument getStorageEngine()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.storageEngine(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest storageEngine(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getPartialFilterExpression()", "public org.bson.BsonDocument getPartialFilterExpression()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.partialFilterExpression(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest partialFilterExpression(org.bson.BsonDocument)"], ["com.mongodb.client.model.Collation", "com.mongodb.bulk.IndexRequest.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.collation(com.mongodb.client.model.Collation)", "public com.mongodb.bulk.IndexRequest collation(com.mongodb.client.model.Collation)"], ["org.bson.BsonDocument", "com.mongodb.bulk.IndexRequest.getWildcardProjection()", "public org.bson.BsonDocument getWildcardProjection()"], ["com.mongodb.bulk.IndexRequest", "com.mongodb.bulk.IndexRequest.wildcardProjection(org.bson.BsonDocument)", "public com.mongodb.bulk.IndexRequest wildcardProjection(org.bson.BsonDocument)"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest(org.bson.BsonDocument)", "public com.mongodb.bulk.DeleteRequest(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.bulk.DeleteRequest.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest.multi(boolean)", "public com.mongodb.bulk.DeleteRequest multi(boolean)"], ["boolean", "com.mongodb.bulk.DeleteRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.client.model.Collation", "com.mongodb.bulk.DeleteRequest.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.bulk.DeleteRequest", "com.mongodb.bulk.DeleteRequest.collation(com.mongodb.client.model.Collation)", "public com.mongodb.bulk.DeleteRequest collation(com.mongodb.client.model.Collation)"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.DeleteRequest.getType()", "public com.mongodb.bulk.WriteRequest$Type getType()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getDeletedCount()", "public int getDeletedCount()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.bulk.BulkWriteResult$2.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.bulk.BulkWriteUpsert>", "com.mongodb.bulk.BulkWriteResult$2.getUpserts()", "public java.util.List<com.mongodb.bulk.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.bulk.BulkWriteResult$2.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.bulk.BulkWriteResult$2.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.bulk.BulkWriteResult$2.toString()", "public java.lang.String toString()"], ["com.mongodb.bulk.WriteRequest$Type[]", "com.mongodb.bulk.WriteRequest$Type.values()", "public static com.mongodb.bulk.WriteRequest$Type[] values()"], ["com.mongodb.bulk.WriteRequest$Type", "com.mongodb.bulk.WriteRequest$Type.valueOf(java.lang.String)", "public static com.mongodb.bulk.WriteRequest$Type valueOf(java.lang.String)"], ["com.mongodb.AggregationOptions$OutputMode[]", "com.mongodb.AggregationOptions$OutputMode.values()", "public static com.mongodb.AggregationOptions$OutputMode[] values()"], ["com.mongodb.AggregationOptions$OutputMode", "com.mongodb.AggregationOptions$OutputMode.valueOf(java.lang.String)", "public static com.mongodb.AggregationOptions$OutputMode valueOf(java.lang.String)"], ["com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.createSnappyCompressor()", "public static com.mongodb.MongoCompressor createSnappyCompressor()"], ["com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.createZlibCompressor()", "public static com.mongodb.MongoCompressor createZlibCompressor()"], ["com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.createZstdCompressor()", "public static com.mongodb.MongoCompressor createZstdCompressor()"], ["java.lang.String", "com.mongodb.MongoCompressor.getName()", "public java.lang.String getName()"], ["<T> T", "com.mongodb.MongoCompressor.getProperty(java.lang.String, T)", "public <T> T getProperty(java.lang.String, T)"], ["<T> T", "com.mongodb.MongoCompressor.getPropertyNonNull(java.lang.String, T)", "public <T> T getPropertyNonNull(java.lang.String, T)"], ["<T> com.mongodb.MongoCompressor", "com.mongodb.MongoCompressor.withProperty(java.lang.String, T)", "public <T> com.mongodb.MongoCompressor withProperty(java.lang.String, T)"], ["boolean", "com.mongodb.MongoCompressor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoCompressor.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoCompressor.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.Collation", "com.mongodb.BulkUpdateRequestBuilder.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkUpdateRequestBuilder.collation(com.mongodb.client.model.Collation)", "public com.mongodb.BulkUpdateRequestBuilder collation(com.mongodb.client.model.Collation)"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.BulkUpdateRequestBuilder.getArrayFilters()", "public java.util.List<? extends com.mongodb.DBObject> getArrayFilters()"], ["void", "com.mongodb.BulkUpdateRequestBuilder.replaceOne(com.mongodb.DBObject)", "public void replaceOne(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.update(com.mongodb.DBObject)", "public void update(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkUpdateRequestBuilder.updateOne(com.mongodb.DBObject)", "public void updateOne(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteError", "com.mongodb.BulkWriteError(int, java.lang.String, com.mongodb.DBObject, int)", "public com.mongodb.BulkWriteError(int, java.lang.String, com.mongodb.DBObject, int)"], ["int", "com.mongodb.BulkWriteError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.BulkWriteError.getMessage()", "public java.lang.String getMessage()"], ["com.mongodb.DBObject", "com.mongodb.BulkWriteError.getDetails()", "public com.mongodb.DBObject getDetails()"], ["int", "com.mongodb.BulkWriteError.getIndex()", "public int getIndex()"], ["boolean", "com.mongodb.BulkWriteError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.BulkWriteError.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoSocketReadTimeoutException", "com.mongodb.MongoSocketReadTimeoutException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketReadTimeoutException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress()", "public com.mongodb.ServerAddress()"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.lang.String)", "public com.mongodb.ServerAddress(java.lang.String)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetAddress)", "public com.mongodb.ServerAddress(java.net.InetAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetAddress, int)", "public com.mongodb.ServerAddress(java.net.InetAddress, int)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.net.InetSocketAddress)", "public com.mongodb.ServerAddress(java.net.InetSocketAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.ServerAddress(java.lang.String, int)", "public com.mongodb.ServerAddress(java.lang.String, int)"], ["boolean", "com.mongodb.ServerAddress.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ServerAddress.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.ServerAddress.getHost()", "public java.lang.String getHost()"], ["int", "com.mongodb.ServerAddress.getPort()", "public int getPort()"], ["java.net.InetSocketAddress", "com.mongodb.ServerAddress.getSocketAddress()", "public java.net.InetSocketAddress getSocketAddress()"], ["java.util.List<java.net.InetSocketAddress>", "com.mongodb.ServerAddress.getSocketAddresses()", "public java.util.List<java.net.InetSocketAddress> getSocketAddresses()"], ["java.lang.String", "com.mongodb.ServerAddress.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.ServerAddress.defaultHost()", "public static java.lang.String defaultHost()"], ["int", "com.mongodb.ServerAddress.defaultPort()", "public static int defaultPort()"], ["boolean", "com.mongodb.ServerAddress.sameHost(java.lang.String)", "public boolean sameHost(java.lang.String)"], ["com.mongodb.MongoSocketClosedException", "com.mongodb.MongoSocketClosedException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketClosedException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.MongoExecutionTimeoutException", "com.mongodb.MongoExecutionTimeoutException(int, java.lang.String)", "public com.mongodb.MongoExecutionTimeoutException(int, java.lang.String)"], ["com.mongodb.Mongo$Holder", "com.mongodb.Mongo$Holder()", "public com.mongodb.Mongo$Holder()"], ["com.mongodb.Mongo$Holder", "com.mongodb.Mongo$Holder.singleton()", "public static com.mongodb.Mongo$Holder singleton()"], ["com.mongodb.Mongo", "com.mongodb.Mongo$Holder.connect(com.mongodb.MongoURI)", "public com.mongodb.Mongo connect(com.mongodb.MongoURI)"], ["com.mongodb.Mongo", "com.mongodb.Mongo$Holder.connect(com.mongodb.MongoClientURI)", "public com.mongodb.Mongo connect(com.mongodb.MongoClientURI)"], ["com.mongodb.ClientEncryptionSettings$Builder", "com.mongodb.ClientEncryptionSettings$Builder.keyVaultMongoClientSettings(com.mongodb.MongoClientSettings)", "public com.mongodb.ClientEncryptionSettings$Builder keyVaultMongoClientSettings(com.mongodb.MongoClientSettings)"], ["com.mongodb.ClientEncryptionSettings$Builder", "com.mongodb.ClientEncryptionSettings$Builder.keyVaultNamespace(java.lang.String)", "public com.mongodb.ClientEncryptionSettings$Builder keyVaultNamespace(java.lang.String)"], ["com.mongodb.ClientEncryptionSettings$Builder", "com.mongodb.ClientEncryptionSettings$Builder.kmsProviders(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>)", "public com.mongodb.ClientEncryptionSettings$Builder kmsProviders(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>)"], ["com.mongodb.ClientEncryptionSettings", "com.mongodb.ClientEncryptionSettings$Builder.build()", "public com.mongodb.ClientEncryptionSettings build()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.isAcknowledged()", "public boolean isAcknowledged()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getRemovedCount()", "public int getRemovedCount()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.BulkWriteUpsert>", "com.mongodb.AcknowledgedBulkWriteResult.getUpserts()", "public java.util.List<com.mongodb.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.AcknowledgedBulkWriteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.AcknowledgedBulkWriteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.AcknowledgedBulkWriteResult.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.Mongo$1.apply(com.mongodb.DBObject)", "public java.lang.String apply(com.mongodb.DBObject)"], ["java.lang.Object", "com.mongodb.Mongo$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.MongoQueryException", "com.mongodb.MongoQueryException(com.mongodb.ServerAddress, int, java.lang.String)", "public com.mongodb.MongoQueryException(com.mongodb.ServerAddress, int, java.lang.String)"], ["com.mongodb.MongoQueryException", "com.mongodb.MongoQueryException(com.mongodb.MongoCommandException)", "public com.mongodb.MongoQueryException(com.mongodb.MongoCommandException)"], ["int", "com.mongodb.MongoQueryException.getErrorCode()", "public int getErrorCode()"], ["java.lang.String", "com.mongodb.MongoQueryException.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["com.mongodb.event.CommandEvent", "com.mongodb.event.CommandEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String)", "public com.mongodb.event.CommandEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String)"], ["int", "com.mongodb.event.CommandEvent.getRequestId()", "public int getRequestId()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.event.CommandEvent.getConnectionDescription()", "public com.mongodb.connection.ConnectionDescription getConnectionDescription()"], ["java.lang.String", "com.mongodb.event.CommandEvent.getCommandName()", "public java.lang.String getCommandName()"], ["com.mongodb.event.ConnectionOpenedEvent", "com.mongodb.event.ConnectionOpenedEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionOpenedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionOpenedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionOpenedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionPoolListenerAdapter", "com.mongodb.event.ConnectionPoolListenerAdapter()", "public com.mongodb.event.ConnectionPoolListenerAdapter()"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionAdded(com.mongodb.event.ConnectionAddedEvent)", "public void connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.event.ConnectionPoolListenerAdapter.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.event.ClusterOpeningEvent", "com.mongodb.event.ClusterOpeningEvent(com.mongodb.connection.ClusterId)", "public com.mongodb.event.ClusterOpeningEvent(com.mongodb.connection.ClusterId)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterOpeningEvent.getClusterId()", "public com.mongodb.connection.ClusterId getClusterId()"], ["java.lang.String", "com.mongodb.event.ClusterOpeningEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionPoolClosedEvent", "com.mongodb.event.ConnectionPoolClosedEvent(com.mongodb.connection.ServerId)", "public com.mongodb.event.ConnectionPoolClosedEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolClosedEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolClosedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.CommandListenerMulticaster", "com.mongodb.event.CommandListenerMulticaster(java.util.List<com.mongodb.event.CommandListener>)", "public com.mongodb.event.CommandListenerMulticaster(java.util.List<com.mongodb.event.CommandListener>)"], ["java.util.List<com.mongodb.event.CommandListener>", "com.mongodb.event.CommandListenerMulticaster.getCommandListeners()", "public java.util.List<com.mongodb.event.CommandListener> getCommandListeners()"], ["void", "com.mongodb.event.CommandListenerMulticaster.commandStarted(com.mongodb.event.CommandStartedEvent)", "public void commandStarted(com.mongodb.event.CommandStartedEvent)"], ["void", "com.mongodb.event.CommandListenerMulticaster.commandSucceeded(com.mongodb.event.CommandSucceededEvent)", "public void commandSucceeded(com.mongodb.event.CommandSucceededEvent)"], ["void", "com.mongodb.event.CommandListenerMulticaster.commandFailed(com.mongodb.event.CommandFailedEvent)", "public void commandFailed(com.mongodb.event.CommandFailedEvent)"], ["com.mongodb.event.ConnectionRemovedEvent$Reason[]", "com.mongodb.event.ConnectionRemovedEvent$Reason.values()", "public static com.mongodb.event.ConnectionRemovedEvent$Reason[] values()"], ["com.mongodb.event.ConnectionRemovedEvent$Reason", "com.mongodb.event.ConnectionRemovedEvent$Reason.valueOf(java.lang.String)", "public static com.mongodb.event.ConnectionRemovedEvent$Reason valueOf(java.lang.String)"], ["com.mongodb.event.ClusterEventMulticaster", "com.mongodb.event.ClusterEventMulticaster(java.util.List<com.mongodb.event.ClusterListener>)", "public com.mongodb.event.ClusterEventMulticaster(java.util.List<com.mongodb.event.ClusterListener>)"], ["java.util.List<com.mongodb.event.ClusterListener>", "com.mongodb.event.ClusterEventMulticaster.getClusterListeners()", "public java.util.List<com.mongodb.event.ClusterListener> getClusterListeners()"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterOpening(com.mongodb.event.ClusterOpeningEvent)", "public void clusterOpening(com.mongodb.event.ClusterOpeningEvent)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterClosed(com.mongodb.event.ClusterClosedEvent)", "public void clusterClosed(com.mongodb.event.ClusterClosedEvent)"], ["void", "com.mongodb.event.ClusterEventMulticaster.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)", "public void clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionCheckedOutEvent", "com.mongodb.event.ConnectionCheckedOutEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionCheckedOutEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionCheckedOutEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionCheckedOutEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionMessagesSentEvent", "com.mongodb.event.ConnectionMessagesSentEvent(com.mongodb.connection.ConnectionId, int, int)", "public com.mongodb.event.ConnectionMessagesSentEvent(com.mongodb.connection.ConnectionId, int, int)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionMessagesSentEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["int", "com.mongodb.event.ConnectionMessagesSentEvent.getRequestId()", "public int getRequestId()"], ["int", "com.mongodb.event.ConnectionMessagesSentEvent.getSize()", "public int getSize()"], ["java.lang.String", "com.mongodb.event.ConnectionMessagesSentEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionRemovedEvent", "com.mongodb.event.ConnectionRemovedEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionRemovedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.event.ConnectionRemovedEvent", "com.mongodb.event.ConnectionRemovedEvent(com.mongodb.connection.ConnectionId, com.mongodb.event.ConnectionRemovedEvent$Reason)", "public com.mongodb.event.ConnectionRemovedEvent(com.mongodb.connection.ConnectionId, com.mongodb.event.ConnectionRemovedEvent$Reason)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionRemovedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["com.mongodb.event.ConnectionRemovedEvent$Reason", "com.mongodb.event.ConnectionRemovedEvent.getReason()", "public com.mongodb.event.ConnectionRemovedEvent$Reason getReason()"], ["java.lang.String", "com.mongodb.event.ConnectionRemovedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ServerEventMulticaster", "com.mongodb.event.ServerEventMulticaster(java.util.List<com.mongodb.event.ServerListener>)", "public com.mongodb.event.ServerEventMulticaster(java.util.List<com.mongodb.event.ServerListener>)"], ["java.util.List<com.mongodb.event.ServerListener>", "com.mongodb.event.ServerEventMulticaster.getServerListeners()", "public java.util.List<com.mongodb.event.ServerListener> getServerListeners()"], ["void", "com.mongodb.event.ServerEventMulticaster.serverOpening(com.mongodb.event.ServerOpeningEvent)", "public void serverOpening(com.mongodb.event.ServerOpeningEvent)"], ["void", "com.mongodb.event.ServerEventMulticaster.serverClosed(com.mongodb.event.ServerClosedEvent)", "public void serverClosed(com.mongodb.event.ServerClosedEvent)"], ["void", "com.mongodb.event.ServerEventMulticaster.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)", "public void serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionPoolWaitQueueExitedEvent", "com.mongodb.event.ConnectionPoolWaitQueueExitedEvent(com.mongodb.connection.ServerId)", "public com.mongodb.event.ConnectionPoolWaitQueueExitedEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolWaitQueueExitedEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolWaitQueueExitedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.CommandFailedEvent", "com.mongodb.event.CommandFailedEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, long, java.lang.Throwable)", "public com.mongodb.event.CommandFailedEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, long, java.lang.Throwable)"], ["long", "com.mongodb.event.CommandFailedEvent.getElapsedTime(java.util.concurrent.TimeUnit)", "public long getElapsedTime(java.util.concurrent.TimeUnit)"], ["java.lang.Throwable", "com.mongodb.event.CommandFailedEvent.getThrowable()", "public java.lang.Throwable getThrowable()"], ["com.mongodb.event.ConnectionMessageReceivedEvent", "com.mongodb.event.ConnectionMessageReceivedEvent(com.mongodb.connection.ConnectionId, int, int)", "public com.mongodb.event.ConnectionMessageReceivedEvent(com.mongodb.connection.ConnectionId, int, int)"], ["int", "com.mongodb.event.ConnectionMessageReceivedEvent.getResponseTo()", "public int getResponseTo()"], ["int", "com.mongodb.event.ConnectionMessageReceivedEvent.getSize()", "public int getSize()"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionMessageReceivedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionMessageReceivedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ServerListenerAdapter", "com.mongodb.event.ServerListenerAdapter()", "public com.mongodb.event.ServerListenerAdapter()"], ["void", "com.mongodb.event.ServerListenerAdapter.serverOpening(com.mongodb.event.ServerOpeningEvent)", "public void serverOpening(com.mongodb.event.ServerOpeningEvent)"], ["void", "com.mongodb.event.ServerListenerAdapter.serverClosed(com.mongodb.event.ServerClosedEvent)", "public void serverClosed(com.mongodb.event.ServerClosedEvent)"], ["void", "com.mongodb.event.ServerListenerAdapter.serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)", "public void serverDescriptionChanged(com.mongodb.event.ServerDescriptionChangedEvent)"], ["com.mongodb.event.ConnectionPoolEventMulticaster", "com.mongodb.event.ConnectionPoolEventMulticaster()", "public com.mongodb.event.ConnectionPoolEventMulticaster()"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.add(com.mongodb.event.ConnectionPoolListener)", "public void add(com.mongodb.event.ConnectionPoolListener)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.remove(com.mongodb.event.ConnectionPoolListener)", "public void remove(com.mongodb.event.ConnectionPoolListener)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)", "public void connectionPoolOpened(com.mongodb.event.ConnectionPoolOpenedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)", "public void connectionPoolClosed(com.mongodb.event.ConnectionPoolClosedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)", "public void connectionCheckedOut(com.mongodb.event.ConnectionCheckedOutEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)", "public void connectionCheckedIn(com.mongodb.event.ConnectionCheckedInEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)", "public void waitQueueEntered(com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)", "public void waitQueueExited(com.mongodb.event.ConnectionPoolWaitQueueExitedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionAdded(com.mongodb.event.ConnectionAddedEvent)", "public void connectionAdded(com.mongodb.event.ConnectionAddedEvent)"], ["void", "com.mongodb.event.ConnectionPoolEventMulticaster.connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)", "public void connectionRemoved(com.mongodb.event.ConnectionRemovedEvent)"], ["com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent", "com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent(com.mongodb.connection.ServerId)", "public com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolWaitQueueEnteredEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ServerMonitorListenerAdapter", "com.mongodb.event.ServerMonitorListenerAdapter()", "public com.mongodb.event.ServerMonitorListenerAdapter()"], ["void", "com.mongodb.event.ServerMonitorListenerAdapter.serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)", "public void serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)"], ["void", "com.mongodb.event.ServerMonitorListenerAdapter.serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)", "public void serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)"], ["void", "com.mongodb.event.ServerMonitorListenerAdapter.serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)", "public void serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)"], ["com.mongodb.event.ClusterListenerAdapter", "com.mongodb.event.ClusterListenerAdapter()", "public com.mongodb.event.ClusterListenerAdapter()"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterOpening(com.mongodb.event.ClusterOpeningEvent)", "public void clusterOpening(com.mongodb.event.ClusterOpeningEvent)"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterClosed(com.mongodb.event.ClusterClosedEvent)", "public void clusterClosed(com.mongodb.event.ClusterClosedEvent)"], ["void", "com.mongodb.event.ClusterListenerAdapter.clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)", "public void clusterDescriptionChanged(com.mongodb.event.ClusterDescriptionChangedEvent)"], ["com.mongodb.event.CommandStartedEvent", "com.mongodb.event.CommandStartedEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, java.lang.String, org.bson.BsonDocument)", "public com.mongodb.event.CommandStartedEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, java.lang.String, org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.event.CommandStartedEvent.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["org.bson.BsonDocument", "com.mongodb.event.CommandStartedEvent.getCommand()", "public org.bson.BsonDocument getCommand()"], ["com.mongodb.event.ServerDescriptionChangedEvent", "com.mongodb.event.ServerDescriptionChangedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)", "public com.mongodb.event.ServerDescriptionChangedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ServerDescriptionChangedEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.event.ServerDescriptionChangedEvent.getNewDescription()", "public com.mongodb.connection.ServerDescription getNewDescription()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.event.ServerDescriptionChangedEvent.getPreviousDescription()", "public com.mongodb.connection.ServerDescription getPreviousDescription()"], ["java.lang.String", "com.mongodb.event.ServerDescriptionChangedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionCheckedInEvent", "com.mongodb.event.ConnectionCheckedInEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionCheckedInEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionCheckedInEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionCheckedInEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ClusterDescriptionChangedEvent", "com.mongodb.event.ClusterDescriptionChangedEvent(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterDescription, com.mongodb.connection.ClusterDescription)", "public com.mongodb.event.ClusterDescriptionChangedEvent(com.mongodb.connection.ClusterId, com.mongodb.connection.ClusterDescription, com.mongodb.connection.ClusterDescription)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterDescriptionChangedEvent.getClusterId()", "public com.mongodb.connection.ClusterId getClusterId()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.event.ClusterDescriptionChangedEvent.getNewDescription()", "public com.mongodb.connection.ClusterDescription getNewDescription()"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.event.ClusterDescriptionChangedEvent.getPreviousDescription()", "public com.mongodb.connection.ClusterDescription getPreviousDescription()"], ["java.lang.String", "com.mongodb.event.ClusterDescriptionChangedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.CommandEventMulticaster", "com.mongodb.event.CommandEventMulticaster(java.util.List<com.mongodb.event.CommandListener>)", "public com.mongodb.event.CommandEventMulticaster(java.util.List<com.mongodb.event.CommandListener>)"], ["java.util.List<com.mongodb.event.CommandListener>", "com.mongodb.event.CommandEventMulticaster.getCommandListeners()", "public java.util.List<com.mongodb.event.CommandListener> getCommandListeners()"], ["void", "com.mongodb.event.CommandEventMulticaster.commandStarted(com.mongodb.event.CommandStartedEvent)", "public void commandStarted(com.mongodb.event.CommandStartedEvent)"], ["void", "com.mongodb.event.CommandEventMulticaster.commandSucceeded(com.mongodb.event.CommandSucceededEvent)", "public void commandSucceeded(com.mongodb.event.CommandSucceededEvent)"], ["void", "com.mongodb.event.CommandEventMulticaster.commandFailed(com.mongodb.event.CommandFailedEvent)", "public void commandFailed(com.mongodb.event.CommandFailedEvent)"], ["com.mongodb.event.ServerHeartbeatFailedEvent", "com.mongodb.event.ServerHeartbeatFailedEvent(com.mongodb.connection.ConnectionId, long, java.lang.Throwable)", "public com.mongodb.event.ServerHeartbeatFailedEvent(com.mongodb.connection.ConnectionId, long, java.lang.Throwable)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ServerHeartbeatFailedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["long", "com.mongodb.event.ServerHeartbeatFailedEvent.getElapsedTime(java.util.concurrent.TimeUnit)", "public long getElapsedTime(java.util.concurrent.TimeUnit)"], ["java.lang.Throwable", "com.mongodb.event.ServerHeartbeatFailedEvent.getThrowable()", "public java.lang.Throwable getThrowable()"], ["java.lang.String", "com.mongodb.event.ServerHeartbeatFailedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionAddedEvent", "com.mongodb.event.ConnectionAddedEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionAddedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionAddedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionAddedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ServerClosedEvent", "com.mongodb.event.ServerClosedEvent(com.mongodb.connection.ServerId)", "public com.mongodb.event.ServerClosedEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ServerClosedEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["java.lang.String", "com.mongodb.event.ServerClosedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ClusterClosedEvent", "com.mongodb.event.ClusterClosedEvent(com.mongodb.connection.ClusterId)", "public com.mongodb.event.ClusterClosedEvent(com.mongodb.connection.ClusterId)"], ["com.mongodb.connection.ClusterId", "com.mongodb.event.ClusterClosedEvent.getClusterId()", "public com.mongodb.connection.ClusterId getClusterId()"], ["java.lang.String", "com.mongodb.event.ClusterClosedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.CommandSucceededEvent", "com.mongodb.event.CommandSucceededEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, org.bson.BsonDocument, long)", "public com.mongodb.event.CommandSucceededEvent(int, com.mongodb.connection.ConnectionDescription, java.lang.String, org.bson.BsonDocument, long)"], ["long", "com.mongodb.event.CommandSucceededEvent.getElapsedTime(java.util.concurrent.TimeUnit)", "public long getElapsedTime(java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.event.CommandSucceededEvent.getResponse()", "public org.bson.BsonDocument getResponse()"], ["com.mongodb.event.ServerHeartbeatSucceededEvent", "com.mongodb.event.ServerHeartbeatSucceededEvent(com.mongodb.connection.ConnectionId, org.bson.BsonDocument, long)", "public com.mongodb.event.ServerHeartbeatSucceededEvent(com.mongodb.connection.ConnectionId, org.bson.BsonDocument, long)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ServerHeartbeatSucceededEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["org.bson.BsonDocument", "com.mongodb.event.ServerHeartbeatSucceededEvent.getReply()", "public org.bson.BsonDocument getReply()"], ["long", "com.mongodb.event.ServerHeartbeatSucceededEvent.getElapsedTime(java.util.concurrent.TimeUnit)", "public long getElapsedTime(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.event.ServerHeartbeatSucceededEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionClosedEvent", "com.mongodb.event.ConnectionClosedEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ConnectionClosedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ConnectionClosedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ConnectionClosedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ConnectionPoolOpenedEvent", "com.mongodb.event.ConnectionPoolOpenedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ConnectionPoolSettings)", "public com.mongodb.event.ConnectionPoolOpenedEvent(com.mongodb.connection.ServerId, com.mongodb.connection.ConnectionPoolSettings)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ConnectionPoolOpenedEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.event.ConnectionPoolOpenedEvent.getSettings()", "public com.mongodb.connection.ConnectionPoolSettings getSettings()"], ["java.lang.String", "com.mongodb.event.ConnectionPoolOpenedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ServerMonitorEventMulticaster", "com.mongodb.event.ServerMonitorEventMulticaster(java.util.List<com.mongodb.event.ServerMonitorListener>)", "public com.mongodb.event.ServerMonitorEventMulticaster(java.util.List<com.mongodb.event.ServerMonitorListener>)"], ["java.util.List<com.mongodb.event.ServerMonitorListener>", "com.mongodb.event.ServerMonitorEventMulticaster.getServerMonitorListeners()", "public java.util.List<com.mongodb.event.ServerMonitorListener> getServerMonitorListeners()"], ["void", "com.mongodb.event.ServerMonitorEventMulticaster.serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)", "public void serverHearbeatStarted(com.mongodb.event.ServerHeartbeatStartedEvent)"], ["void", "com.mongodb.event.ServerMonitorEventMulticaster.serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)", "public void serverHeartbeatSucceeded(com.mongodb.event.ServerHeartbeatSucceededEvent)"], ["void", "com.mongodb.event.ServerMonitorEventMulticaster.serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)", "public void serverHeartbeatFailed(com.mongodb.event.ServerHeartbeatFailedEvent)"], ["com.mongodb.event.ServerOpeningEvent", "com.mongodb.event.ServerOpeningEvent(com.mongodb.connection.ServerId)", "public com.mongodb.event.ServerOpeningEvent(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ServerId", "com.mongodb.event.ServerOpeningEvent.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["java.lang.String", "com.mongodb.event.ServerOpeningEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.event.ServerHeartbeatStartedEvent", "com.mongodb.event.ServerHeartbeatStartedEvent(com.mongodb.connection.ConnectionId)", "public com.mongodb.event.ServerHeartbeatStartedEvent(com.mongodb.connection.ConnectionId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.event.ServerHeartbeatStartedEvent.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["java.lang.String", "com.mongodb.event.ServerHeartbeatStartedEvent.toString()", "public java.lang.String toString()"], ["com.mongodb.DBDecoder", "com.mongodb.LazyDBDecoder$1.create()", "public com.mongodb.DBDecoder create()"], ["boolean", "com.mongodb.ReadPreference$PrimaryReadPreference.isSlaveOk()", "public boolean isSlaveOk()"], ["java.lang.String", "com.mongodb.ReadPreference$PrimaryReadPreference.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.ReadPreference$PrimaryReadPreference.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ReadPreference$PrimaryReadPreference.hashCode()", "public int hashCode()"], ["org.bson.BsonDocument", "com.mongodb.ReadPreference$PrimaryReadPreference.toDocument()", "public org.bson.BsonDocument toDocument()"], ["java.lang.String", "com.mongodb.ReadPreference$PrimaryReadPreference.getName()", "public java.lang.String getName()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.isAcknowledged()", "public boolean isAcknowledged()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getInsertedCount()", "public int getInsertedCount()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getMatchedCount()", "public int getMatchedCount()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getRemovedCount()", "public int getRemovedCount()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.getModifiedCount()", "public int getModifiedCount()"], ["java.util.List<com.mongodb.BulkWriteUpsert>", "com.mongodb.UnacknowledgedBulkWriteResult.getUpserts()", "public java.util.List<com.mongodb.BulkWriteUpsert> getUpserts()"], ["boolean", "com.mongodb.UnacknowledgedBulkWriteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.UnacknowledgedBulkWriteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.UnacknowledgedBulkWriteResult.toString()", "public java.lang.String toString()"], ["com.mongodb.DefaultDBEncoder", "com.mongodb.DefaultDBEncoder()", "public com.mongodb.DefaultDBEncoder()"], ["int", "com.mongodb.DefaultDBEncoder.writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)", "public int writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)"], ["java.lang.String", "com.mongodb.DefaultDBEncoder.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.TaggableReadPreference.isSlaveOk()", "public boolean isSlaveOk()"], ["org.bson.BsonDocument", "com.mongodb.TaggableReadPreference.toDocument()", "public org.bson.BsonDocument toDocument()"], ["java.util.List<com.mongodb.TagSet>", "com.mongodb.TaggableReadPreference.getTagSetList()", "public java.util.List<com.mongodb.TagSet> getTagSetList()"], ["java.lang.Long", "com.mongodb.TaggableReadPreference.getMaxStaleness(java.util.concurrent.TimeUnit)", "public java.lang.Long getMaxStaleness(java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.TaggableReadPreference.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.TaggableReadPreference.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.TaggableReadPreference.hashCode()", "public int hashCode()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["void", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleServerBinding$SingleServerBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.binding.AsyncClusterBinding$1.onResult(com.mongodb.connection.Server, java.lang.Throwable)", "public void onResult(com.mongodb.connection.Server, java.lang.Throwable)"], ["void", "com.mongodb.binding.AsyncClusterBinding$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)", "public void getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.binding.AsyncConnectionSource", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.retain()", "public com.mongodb.binding.AsyncConnectionSource retain()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncSingleConnectionReadBinding$AsyncSingleConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.SingleConnectionReadBinding", "com.mongodb.binding.SingleConnectionReadBinding(com.mongodb.ReadPreference, com.mongodb.connection.ServerDescription, com.mongodb.connection.Connection)", "public com.mongodb.binding.SingleConnectionReadBinding(com.mongodb.ReadPreference, com.mongodb.connection.ServerDescription, com.mongodb.connection.Connection)"], ["com.mongodb.ReadPreference", "com.mongodb.binding.SingleConnectionReadBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleConnectionReadBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleConnectionReadBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.SingleConnectionReadBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["void", "com.mongodb.binding.SingleConnectionReadBinding.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleConnectionReadBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["void", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleConnectionReadBinding$SingleConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.AsyncSingleServerBinding", "com.mongodb.binding.AsyncSingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)", "public com.mongodb.binding.AsyncSingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)"], ["com.mongodb.binding.AsyncSingleServerBinding", "com.mongodb.binding.AsyncSingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)", "public com.mongodb.binding.AsyncSingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.binding.AsyncSingleServerBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["void", "com.mongodb.binding.AsyncSingleServerBinding.getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["void", "com.mongodb.binding.AsyncSingleServerBinding.getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncSingleServerBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.binding.AsyncSingleServerBinding", "com.mongodb.binding.AsyncSingleServerBinding.retain()", "public com.mongodb.binding.AsyncSingleServerBinding retain()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncSingleServerBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.AsyncReadWriteBinding", "com.mongodb.binding.AsyncSingleServerBinding.retain()", "public com.mongodb.binding.AsyncReadWriteBinding retain()"], ["com.mongodb.binding.AsyncReadBinding", "com.mongodb.binding.AsyncSingleServerBinding.retain()", "public com.mongodb.binding.AsyncReadBinding retain()"], ["com.mongodb.binding.AsyncWriteBinding", "com.mongodb.binding.AsyncSingleServerBinding.retain()", "public com.mongodb.binding.AsyncWriteBinding retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["void", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.ClusterBinding$ClusterBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.binding.AsyncSingleServerBinding$1.onResult(com.mongodb.connection.Server, java.lang.Throwable)", "public void onResult(com.mongodb.connection.Server, java.lang.Throwable)"], ["void", "com.mongodb.binding.AsyncSingleServerBinding$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.AsyncSingleServerBinding$AsyncSingleServerBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncSingleServerBinding$AsyncSingleServerBindingConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["void", "com.mongodb.binding.AsyncSingleServerBinding$AsyncSingleServerBindingConnectionSource.getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)", "public void getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.binding.AsyncConnectionSource", "com.mongodb.binding.AsyncSingleServerBinding$AsyncSingleServerBindingConnectionSource.retain()", "public com.mongodb.binding.AsyncConnectionSource retain()"], ["void", "com.mongodb.binding.AsyncSingleServerBinding$AsyncSingleServerBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncSingleServerBinding$AsyncSingleServerBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.AsyncSingleConnectionReadBinding", "com.mongodb.binding.AsyncSingleConnectionReadBinding(com.mongodb.ReadPreference, com.mongodb.connection.ServerDescription, com.mongodb.connection.AsyncConnection)", "public com.mongodb.binding.AsyncSingleConnectionReadBinding(com.mongodb.ReadPreference, com.mongodb.connection.ServerDescription, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.ReadPreference", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding.getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["com.mongodb.binding.AsyncReadBinding", "com.mongodb.binding.AsyncSingleConnectionReadBinding.retain()", "public com.mongodb.binding.AsyncReadBinding retain()"], ["void", "com.mongodb.binding.AsyncSingleConnectionReadBinding.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncSingleConnectionReadBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["void", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)", "public void getConnection(com.mongodb.async.SingleResultCallback<com.mongodb.connection.AsyncConnection>)"], ["com.mongodb.binding.AsyncConnectionSource", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.retain()", "public com.mongodb.binding.AsyncConnectionSource retain()"], ["void", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncClusterBinding$AsyncClusterBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.AsyncClusterBinding", "com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)", "public com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)"], ["com.mongodb.binding.AsyncClusterBinding", "com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference, com.mongodb.ReadConcern)", "public com.mongodb.binding.AsyncClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference, com.mongodb.ReadConcern)"], ["com.mongodb.binding.AsyncReadWriteBinding", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.AsyncReadWriteBinding retain()"], ["com.mongodb.connection.Cluster", "com.mongodb.binding.AsyncClusterBinding.getCluster()", "public com.mongodb.connection.Cluster getCluster()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.AsyncClusterBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.AsyncClusterBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["void", "com.mongodb.binding.AsyncClusterBinding.getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getReadConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["void", "com.mongodb.binding.AsyncClusterBinding.getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)", "public void getWriteConnectionSource(com.mongodb.async.SingleResultCallback<com.mongodb.binding.AsyncConnectionSource>)"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.AsyncReadBinding", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.AsyncReadBinding retain()"], ["com.mongodb.binding.AsyncWriteBinding", "com.mongodb.binding.AsyncClusterBinding.retain()", "public com.mongodb.binding.AsyncWriteBinding retain()"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)", "public com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress)"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)", "public com.mongodb.binding.SingleServerBinding(com.mongodb.connection.Cluster, com.mongodb.ServerAddress, com.mongodb.ReadPreference)"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding.getWriteConnectionSource()", "public com.mongodb.binding.ConnectionSource getWriteConnectionSource()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.SingleServerBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.SingleServerBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.SingleServerBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.binding.SingleServerBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.SingleServerBinding retain()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.ReadWriteBinding retain()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.binding.SingleServerBinding.retain()", "public com.mongodb.binding.WriteBinding retain()"], ["com.mongodb.binding.ClusterBinding", "com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)", "public com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference)"], ["com.mongodb.binding.ClusterBinding", "com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference, com.mongodb.ReadConcern)", "public com.mongodb.binding.ClusterBinding(com.mongodb.connection.Cluster, com.mongodb.ReadPreference, com.mongodb.ReadConcern)"], ["com.mongodb.connection.Cluster", "com.mongodb.binding.ClusterBinding.getCluster()", "public com.mongodb.connection.Cluster getCluster()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.ReadWriteBinding retain()"], ["com.mongodb.ReadPreference", "com.mongodb.binding.ClusterBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.binding.ClusterBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.binding.ClusterBinding.getWriteConnectionSource()", "public com.mongodb.binding.ConnectionSource getWriteConnectionSource()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.binding.ClusterBinding.retain()", "public com.mongodb.binding.WriteBinding retain()"], ["com.mongodb.DBObject", "com.mongodb.ReplaceRequest.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBObject", "com.mongodb.ReplaceRequest.getDocument()", "public com.mongodb.DBObject getDocument()"], ["boolean", "com.mongodb.ReplaceRequest.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.Collation", "com.mongodb.ReplaceRequest.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["boolean", "com.mongodb.CommandResult.ok()", "public boolean ok()"], ["java.lang.String", "com.mongodb.CommandResult.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["com.mongodb.MongoException", "com.mongodb.CommandResult.getException()", "public com.mongodb.MongoException getException()"], ["void", "com.mongodb.CommandResult.throwOnError()", "public void throwOnError()"], ["com.mongodb.DuplicateKeyException", "com.mongodb.DuplicateKeyException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)", "public com.mongodb.DuplicateKeyException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)"], ["com.mongodb.client.model.Collation", "com.mongodb.BulkWriteRequestBuilder.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.BulkWriteRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.collation(com.mongodb.client.model.Collation)", "public com.mongodb.BulkWriteRequestBuilder collation(com.mongodb.client.model.Collation)"], ["void", "com.mongodb.BulkWriteRequestBuilder.remove()", "public void remove()"], ["void", "com.mongodb.BulkWriteRequestBuilder.removeOne()", "public void removeOne()"], ["void", "com.mongodb.BulkWriteRequestBuilder.replaceOne(com.mongodb.DBObject)", "public void replaceOne(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkWriteRequestBuilder.update(com.mongodb.DBObject)", "public void update(com.mongodb.DBObject)"], ["void", "com.mongodb.BulkWriteRequestBuilder.updateOne(com.mongodb.DBObject)", "public void updateOne(com.mongodb.DBObject)"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.upsert()", "public com.mongodb.BulkUpdateRequestBuilder upsert()"], ["com.mongodb.BulkUpdateRequestBuilder", "com.mongodb.BulkWriteRequestBuilder.arrayFilters(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.BulkUpdateRequestBuilder arrayFilters(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBObjectCodecProvider", "com.mongodb.DBObjectCodecProvider()", "public com.mongodb.DBObjectCodecProvider()"], ["com.mongodb.DBObjectCodecProvider", "com.mongodb.DBObjectCodecProvider(org.bson.codecs.BsonTypeClassMap)", "public com.mongodb.DBObjectCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.DBObjectCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.DBObjectCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DBObjectCodecProvider.hashCode()", "public int hashCode()"], ["com.mongodb.MongoURI", "com.mongodb.MongoURI(java.lang.String)", "public com.mongodb.MongoURI(java.lang.String)"], ["com.mongodb.MongoURI", "com.mongodb.MongoURI(com.mongodb.MongoClientURI)", "public com.mongodb.MongoURI(com.mongodb.MongoClientURI)"], ["java.lang.String", "com.mongodb.MongoURI.getUsername()", "public java.lang.String getUsername()"], ["char[]", "com.mongodb.MongoURI.getPassword()", "public char[] getPassword()"], ["java.util.List<java.lang.String>", "com.mongodb.MongoURI.getHosts()", "public java.util.List<java.lang.String> getHosts()"], ["java.lang.String", "com.mongodb.MongoURI.getDatabase()", "public java.lang.String getDatabase()"], ["java.lang.String", "com.mongodb.MongoURI.getCollection()", "public java.lang.String getCollection()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoURI.getCredentials()", "public com.mongodb.MongoCredential getCredentials()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoURI.getOptions()", "public com.mongodb.MongoOptions getOptions()"], ["com.mongodb.Mongo", "com.mongodb.MongoURI.connect()", "public com.mongodb.Mongo connect()"], ["com.mongodb.DB", "com.mongodb.MongoURI.connectDB()", "public com.mongodb.DB connectDB()"], ["com.mongodb.DB", "com.mongodb.MongoURI.connectDB(com.mongodb.Mongo)", "public com.mongodb.DB connectDB(com.mongodb.Mongo)"], ["com.mongodb.DBCollection", "com.mongodb.MongoURI.connectCollection(com.mongodb.DB)", "public com.mongodb.DBCollection connectCollection(com.mongodb.DB)"], ["com.mongodb.DBCollection", "com.mongodb.MongoURI.connectCollection(com.mongodb.Mongo)", "public com.mongodb.DBCollection connectCollection(com.mongodb.Mongo)"], ["java.lang.String", "com.mongodb.MongoURI.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.ReplicaSetStatus.getName()", "public java.lang.String getName()"], ["com.mongodb.ServerAddress", "com.mongodb.ReplicaSetStatus.getMaster()", "public com.mongodb.ServerAddress getMaster()"], ["boolean", "com.mongodb.ReplicaSetStatus.isMaster(com.mongodb.ServerAddress)", "public boolean isMaster(com.mongodb.ServerAddress)"], ["int", "com.mongodb.ReplicaSetStatus.getMaxBsonObjectSize()", "public int getMaxBsonObjectSize()"], ["java.lang.String", "com.mongodb.ReplicaSetStatus.toString()", "public java.lang.String toString()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.DBObject>>", "com.mongodb.Mongo$2.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.DBObject>> asReadOperation()"], ["com.mongodb.selector.ServerAddressSelector", "com.mongodb.selector.ServerAddressSelector(com.mongodb.ServerAddress)", "public com.mongodb.selector.ServerAddressSelector(com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.selector.ServerAddressSelector.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.ServerAddressSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.ServerAddressSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.LatencyMinimizingServerSelector", "com.mongodb.selector.LatencyMinimizingServerSelector(long, java.util.concurrent.TimeUnit)", "public com.mongodb.selector.LatencyMinimizingServerSelector(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.selector.LatencyMinimizingServerSelector.getAcceptableLatencyDifference(java.util.concurrent.TimeUnit)", "public long getAcceptableLatencyDifference(java.util.concurrent.TimeUnit)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.LatencyMinimizingServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.LatencyMinimizingServerSelector.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.selector.LatencyMinimizingServerSelector.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.selector.LatencyMinimizingServerSelector.hashCode()", "public int hashCode()"], ["com.mongodb.selector.PrimaryServerSelector", "com.mongodb.selector.PrimaryServerSelector()", "public com.mongodb.selector.PrimaryServerSelector()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.PrimaryServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.PrimaryServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.CompositeServerSelector", "com.mongodb.selector.CompositeServerSelector(java.util.List<? extends com.mongodb.selector.ServerSelector>)", "public com.mongodb.selector.CompositeServerSelector(java.util.List<? extends com.mongodb.selector.ServerSelector>)"], ["java.util.List<com.mongodb.selector.ServerSelector>", "com.mongodb.selector.CompositeServerSelector.getServerSelectors()", "public java.util.List<com.mongodb.selector.ServerSelector> getServerSelectors()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.CompositeServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["boolean", "com.mongodb.selector.CompositeServerSelector.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.selector.CompositeServerSelector.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.selector.CompositeServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.ReadPreferenceServerSelector", "com.mongodb.selector.ReadPreferenceServerSelector(com.mongodb.ReadPreference)", "public com.mongodb.selector.ReadPreferenceServerSelector(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.selector.ReadPreferenceServerSelector.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.ReadPreferenceServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.ReadPreferenceServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.selector.WritableServerSelector", "com.mongodb.selector.WritableServerSelector()", "public com.mongodb.selector.WritableServerSelector()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.selector.WritableServerSelector.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["java.lang.String", "com.mongodb.selector.WritableServerSelector.toString()", "public java.lang.String toString()"], ["com.mongodb.DBDecoder", "com.mongodb.DefaultDBDecoder$1.create()", "public com.mongodb.DBDecoder create()"], ["com.mongodb.LazyDBObject", "com.mongodb.LazyDBObject(byte[], org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBObject(byte[], org.bson.LazyBSONCallback)"], ["com.mongodb.LazyDBObject", "com.mongodb.LazyDBObject(byte[], int, org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBObject(byte[], int, org.bson.LazyBSONCallback)"], ["void", "com.mongodb.LazyDBObject.markAsPartialObject()", "public void markAsPartialObject()"], ["boolean", "com.mongodb.LazyDBObject.isPartialObject()", "public boolean isPartialObject()"], ["java.lang.String", "com.mongodb.LazyDBObject.toString()", "public java.lang.String toString()"], ["com.mongodb.BasicDBList", "com.mongodb.BasicDBList()", "public com.mongodb.BasicDBList()"], ["boolean", "com.mongodb.BasicDBList.isPartialObject()", "public boolean isPartialObject()"], ["void", "com.mongodb.BasicDBList.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.Object", "com.mongodb.BasicDBList.copy()", "public java.lang.Object copy()"], ["com.mongodb.WriteResult", "com.mongodb.WriteResult.unacknowledged()", "public static com.mongodb.WriteResult unacknowledged()"], ["com.mongodb.WriteResult", "com.mongodb.WriteResult(int, boolean, java.lang.Object)", "public com.mongodb.WriteResult(int, boolean, java.lang.Object)"], ["boolean", "com.mongodb.WriteResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.WriteResult.getN()", "public int getN()"], ["java.lang.Object", "com.mongodb.WriteResult.getUpsertedId()", "public java.lang.Object getUpsertedId()"], ["boolean", "com.mongodb.WriteResult.isUpdateOfExisting()", "public boolean isUpdateOfExisting()"], ["java.lang.String", "com.mongodb.WriteResult.toString()", "public java.lang.String toString()"], ["com.mongodb.LazyDBList", "com.mongodb.LazyDBList(byte[], org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBList(byte[], org.bson.LazyBSONCallback)"], ["com.mongodb.LazyDBList", "com.mongodb.LazyDBList(byte[], int, org.bson.LazyBSONCallback)", "public com.mongodb.LazyDBList(byte[], int, org.bson.LazyBSONCallback)"], ["void", "com.mongodb.LazyDBList.markAsPartialObject()", "public void markAsPartialObject()"], ["boolean", "com.mongodb.LazyDBList.isPartialObject()", "public boolean isPartialObject()"], ["java.lang.String", "com.mongodb.LazyDBList.toString()", "public java.lang.String toString()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder()", "public com.mongodb.BasicDBObjectBuilder()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start()", "public static com.mongodb.BasicDBObjectBuilder start()"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start(java.lang.String, java.lang.Object)", "public static com.mongodb.BasicDBObjectBuilder start(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.start(java.util.Map)", "public static com.mongodb.BasicDBObjectBuilder start(java.util.Map)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.append(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObjectBuilder append(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.add(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObjectBuilder add(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.push(java.lang.String)", "public com.mongodb.BasicDBObjectBuilder push(java.lang.String)"], ["com.mongodb.BasicDBObjectBuilder", "com.mongodb.BasicDBObjectBuilder.pop()", "public com.mongodb.BasicDBObjectBuilder pop()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectBuilder.get()", "public com.mongodb.DBObject get()"], ["boolean", "com.mongodb.BasicDBObjectBuilder.isEmpty()", "public boolean isEmpty()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder()", "public com.mongodb.MongoClientOptions$Builder()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder(com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClientOptions$Builder(com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.description(java.lang.String)", "public com.mongodb.MongoClientOptions$Builder description(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.applicationName(java.lang.String)", "public com.mongodb.MongoClientOptions$Builder applicationName(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.compressorList(java.util.List<com.mongodb.MongoCompressor>)", "public com.mongodb.MongoClientOptions$Builder compressorList(java.util.List<com.mongodb.MongoCompressor>)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.minConnectionsPerHost(int)", "public com.mongodb.MongoClientOptions$Builder minConnectionsPerHost(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.connectionsPerHost(int)", "public com.mongodb.MongoClientOptions$Builder connectionsPerHost(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.threadsAllowedToBlockForConnectionMultiplier(int)", "public com.mongodb.MongoClientOptions$Builder threadsAllowedToBlockForConnectionMultiplier(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.serverSelectionTimeout(int)", "public com.mongodb.MongoClientOptions$Builder serverSelectionTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxWaitTime(int)", "public com.mongodb.MongoClientOptions$Builder maxWaitTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxConnectionIdleTime(int)", "public com.mongodb.MongoClientOptions$Builder maxConnectionIdleTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.maxConnectionLifeTime(int)", "public com.mongodb.MongoClientOptions$Builder maxConnectionLifeTime(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.connectTimeout(int)", "public com.mongodb.MongoClientOptions$Builder connectTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketTimeout(int)", "public com.mongodb.MongoClientOptions$Builder socketTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketKeepAlive(boolean)", "public com.mongodb.MongoClientOptions$Builder socketKeepAlive(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslEnabled(boolean)", "public com.mongodb.MongoClientOptions$Builder sslEnabled(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslInvalidHostNameAllowed(boolean)", "public com.mongodb.MongoClientOptions$Builder sslInvalidHostNameAllowed(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.sslContext(javax.net.ssl.SSLContext)", "public com.mongodb.MongoClientOptions$Builder sslContext(javax.net.ssl.SSLContext)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.MongoClientOptions$Builder readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.MongoClientOptions$Builder writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.retryWrites(boolean)", "public com.mongodb.MongoClientOptions$Builder retryWrites(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.retryReads(boolean)", "public com.mongodb.MongoClientOptions$Builder retryReads(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.readConcern(com.mongodb.ReadConcern)", "public com.mongodb.MongoClientOptions$Builder readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.codecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.MongoClientOptions$Builder codecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.serverSelector(com.mongodb.selector.ServerSelector)", "public com.mongodb.MongoClientOptions$Builder serverSelector(com.mongodb.selector.ServerSelector)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addCommandListener(com.mongodb.event.CommandListener)", "public com.mongodb.MongoClientOptions$Builder addCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addConnectionPoolListener(com.mongodb.event.ConnectionPoolListener)", "public com.mongodb.MongoClientOptions$Builder addConnectionPoolListener(com.mongodb.event.ConnectionPoolListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addClusterListener(com.mongodb.event.ClusterListener)", "public com.mongodb.MongoClientOptions$Builder addClusterListener(com.mongodb.event.ClusterListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addServerListener(com.mongodb.event.ServerListener)", "public com.mongodb.MongoClientOptions$Builder addServerListener(com.mongodb.event.ServerListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.addServerMonitorListener(com.mongodb.event.ServerMonitorListener)", "public com.mongodb.MongoClientOptions$Builder addServerMonitorListener(com.mongodb.event.ServerMonitorListener)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.socketFactory(javax.net.SocketFactory)", "public com.mongodb.MongoClientOptions$Builder socketFactory(javax.net.SocketFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.cursorFinalizerEnabled(boolean)", "public com.mongodb.MongoClientOptions$Builder cursorFinalizerEnabled(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.alwaysUseMBeans(boolean)", "public com.mongodb.MongoClientOptions$Builder alwaysUseMBeans(boolean)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.dbDecoderFactory(com.mongodb.DBDecoderFactory)", "public com.mongodb.MongoClientOptions$Builder dbDecoderFactory(com.mongodb.DBDecoderFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.dbEncoderFactory(com.mongodb.DBEncoderFactory)", "public com.mongodb.MongoClientOptions$Builder dbEncoderFactory(com.mongodb.DBEncoderFactory)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatFrequency(int)", "public com.mongodb.MongoClientOptions$Builder heartbeatFrequency(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.minHeartbeatFrequency(int)", "public com.mongodb.MongoClientOptions$Builder minHeartbeatFrequency(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatConnectTimeout(int)", "public com.mongodb.MongoClientOptions$Builder heartbeatConnectTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.heartbeatSocketTimeout(int)", "public com.mongodb.MongoClientOptions$Builder heartbeatSocketTimeout(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.localThreshold(int)", "public com.mongodb.MongoClientOptions$Builder localThreshold(int)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.requiredReplicaSetName(java.lang.String)", "public com.mongodb.MongoClientOptions$Builder requiredReplicaSetName(java.lang.String)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.autoEncryptionSettings(com.mongodb.AutoEncryptionSettings)", "public com.mongodb.MongoClientOptions$Builder autoEncryptionSettings(com.mongodb.AutoEncryptionSettings)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions$Builder.legacyDefaults()", "public com.mongodb.MongoClientOptions$Builder legacyDefaults()"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClientOptions$Builder.build()", "public com.mongodb.MongoClientOptions build()"], ["void", "com.mongodb.operation.CreateCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.ParallelCollectionScanOperation", "com.mongodb.operation.ParallelCollectionScanOperation(com.mongodb.MongoNamespace, int, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ParallelCollectionScanOperation(com.mongodb.MongoNamespace, int, org.bson.codecs.Decoder<T>)"], ["int", "com.mongodb.operation.ParallelCollectionScanOperation.getNumCursors()", "public int getNumCursors()"], ["int", "com.mongodb.operation.ParallelCollectionScanOperation.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.operation.ParallelCollectionScanOperation<T>", "com.mongodb.operation.ParallelCollectionScanOperation.batchSize(int)", "public com.mongodb.operation.ParallelCollectionScanOperation<T> batchSize(int)"], ["com.mongodb.operation.ParallelCollectionScanOperation<T>", "com.mongodb.operation.ParallelCollectionScanOperation.retryReads(boolean)", "public com.mongodb.operation.ParallelCollectionScanOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.ParallelCollectionScanOperation.getRetryReads()", "public boolean getRetryReads()"], ["java.util.List<com.mongodb.operation.BatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation.execute(com.mongodb.binding.ReadBinding)", "public java.util.List<com.mongodb.operation.BatchCursor<T>> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ParallelCollectionScanOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.util.List<com.mongodb.async.AsyncBatchCursor<T>>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.util.List<com.mongodb.async.AsyncBatchCursor<T>>>)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Boolean", "com.mongodb.operation.ChangeStreamBatchCursor$1.apply(com.mongodb.operation.AggregateResponseBatchCursor<org.bson.RawBsonDocument>)", "public java.lang.Boolean apply(com.mongodb.operation.AggregateResponseBatchCursor<org.bson.RawBsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListIndexesOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.FindOperation$2$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CountOperation$1$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.CountOperation$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CommitTransactionOperation", "com.mongodb.operation.CommitTransactionOperation(com.mongodb.WriteConcern)", "public com.mongodb.operation.CommitTransactionOperation(com.mongodb.WriteConcern)"], ["com.mongodb.operation.CommitTransactionOperation", "com.mongodb.operation.CommitTransactionOperation(com.mongodb.WriteConcern, boolean)", "public com.mongodb.operation.CommitTransactionOperation(com.mongodb.WriteConcern, boolean)"], ["com.mongodb.operation.CommitTransactionOperation", "com.mongodb.operation.CommitTransactionOperation.recoveryToken(org.bson.BsonDocument)", "public com.mongodb.operation.CommitTransactionOperation recoveryToken(org.bson.BsonDocument)"], ["com.mongodb.operation.CommitTransactionOperation", "com.mongodb.operation.CommitTransactionOperation.maxCommitTime(java.lang.Long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.CommitTransactionOperation maxCommitTime(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Long", "com.mongodb.operation.CommitTransactionOperation.getMaxCommitTime(java.util.concurrent.TimeUnit)", "public java.lang.Long getMaxCommitTime(java.util.concurrent.TimeUnit)"], ["java.lang.Void", "com.mongodb.operation.CommitTransactionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommitTransactionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CommitTransactionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation$4.apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)", "public com.mongodb.operation.MapReduceStatistics apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation$4.apply(java.lang.Object, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.operation.AggregateResponseBatchCursor<T>", "com.mongodb.operation.AggregateOperationImpl$2.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.AggregateResponseBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperationImpl$2.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.UserOperationHelper$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.UserOperationHelper$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$15.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation$3.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.bulk.BulkWriteResult call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$3.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)", "public com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean)", "public com.mongodb.operation.BaseWriteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.BaseWriteOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.BaseWriteOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.operation.BaseWriteOperation.isOrdered()", "public boolean isOrdered()"], ["java.lang.Boolean", "com.mongodb.operation.BaseWriteOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.operation.BaseWriteOperation", "com.mongodb.operation.BaseWriteOperation.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.operation.BaseWriteOperation bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.WriteConcernResult", "com.mongodb.operation.BaseWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public com.mongodb.WriteConcernResult execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.BaseWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.WriteConcernResult>)"], ["java.lang.Object", "com.mongodb.operation.BaseWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Void", "com.mongodb.operation.DropCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["boolean", "com.mongodb.operation.QueryBatchCursor.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "com.mongodb.operation.QueryBatchCursor.next()", "public java.util.List<T> next()"], ["void", "com.mongodb.operation.QueryBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.QueryBatchCursor.getBatchSize()", "public int getBatchSize()"], ["void", "com.mongodb.operation.QueryBatchCursor.remove()", "public void remove()"], ["void", "com.mongodb.operation.QueryBatchCursor.close()", "public void close()"], ["java.util.List<T>", "com.mongodb.operation.QueryBatchCursor.tryNext()", "public java.util.List<T> tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.QueryBatchCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.QueryBatchCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["org.bson.BsonDocument", "com.mongodb.operation.QueryBatchCursor.getPostBatchResumeToken()", "public org.bson.BsonDocument getPostBatchResumeToken()"], ["org.bson.BsonTimestamp", "com.mongodb.operation.QueryBatchCursor.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["boolean", "com.mongodb.operation.QueryBatchCursor.isFirstBatchEmpty()", "public boolean isFirstBatchEmpty()"], ["java.lang.Object", "com.mongodb.operation.QueryBatchCursor.next()", "public java.lang.Object next()"], ["org.bson.BsonDocument", "com.mongodb.operation.UserExistsOperation$4.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$2.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.CommitTransactionOperation$4.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["org.bson.BsonDocument", "com.mongodb.operation.CommitTransactionOperation$5.apply(org.bson.BsonDocument)", "public org.bson.BsonDocument apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.CommitTransactionOperation$5.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.CommandReadOperation", "com.mongodb.operation.CommandReadOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.CommandReadOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["T", "com.mongodb.operation.CommandReadOperation.execute(com.mongodb.binding.ReadBinding)", "public T execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CommandReadOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.CommandOperationHelper$4.apply(org.bson.BsonDocument)", "public org.bson.BsonDocument apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.operation.CommandOperationHelper$4.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "com.mongodb.operation.CreateUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DropUserOperation", "com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String)", "public com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String)"], ["com.mongodb.operation.DropUserOperation", "com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String, com.mongodb.WriteConcern)", "public com.mongodb.operation.DropUserOperation(java.lang.String, java.lang.String, com.mongodb.WriteConcern)"], ["java.lang.Void", "com.mongodb.operation.DropUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.UpdateOperation", "com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["com.mongodb.operation.UpdateOperation", "com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.UpdateRequest>)", "public com.mongodb.operation.UpdateOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.UpdateRequest>)"], ["java.util.List<com.mongodb.bulk.UpdateRequest>", "com.mongodb.operation.UpdateOperation.getUpdateRequests()", "public java.util.List<com.mongodb.bulk.UpdateRequest> getUpdateRequests()"], ["org.bson.BsonDocument", "com.mongodb.operation.AbortTransactionOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.getBatchSize()", "public int getBatchSize()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor.close()", "public void close()"], ["void", "com.mongodb.operation.CreateIndexesOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$ReferenceCountedReleasingWrappedCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["T", "com.mongodb.operation.CommandOperationHelper$5.call(com.mongodb.binding.ConnectionSource)", "public T call(com.mongodb.binding.ConnectionSource)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$4.onResult(java.util.List<org.bson.RawBsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.RawBsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$4.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$2.onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListIndexesOperation$4.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$4.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern)", "public com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern, boolean)", "public com.mongodb.operation.MixedBulkWriteOperation(com.mongodb.MongoNamespace, java.util.List<? extends com.mongodb.bulk.WriteRequest>, boolean, com.mongodb.WriteConcern, boolean)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MixedBulkWriteOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.MixedBulkWriteOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.operation.MixedBulkWriteOperation.isOrdered()", "public boolean isOrdered()"], ["java.util.List<? extends com.mongodb.bulk.WriteRequest>", "com.mongodb.operation.MixedBulkWriteOperation.getWriteRequests()", "public java.util.List<? extends com.mongodb.bulk.WriteRequest> getWriteRequests()"], ["java.lang.Boolean", "com.mongodb.operation.MixedBulkWriteOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.operation.MixedBulkWriteOperation", "com.mongodb.operation.MixedBulkWriteOperation.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.operation.MixedBulkWriteOperation bypassDocumentValidation(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.operation.MixedBulkWriteOperation.getRetryWrites()", "public java.lang.Boolean getRetryWrites()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public com.mongodb.bulk.BulkWriteResult execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.bulk.BulkWriteResult>)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation$2.call(com.mongodb.connection.Connection)", "public org.bson.BsonDocument call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation$2.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$4$1.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$4$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.close()", "public void close()"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncQueryBatchCursor.getBatchSize()", "public int getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncQueryBatchCursor.isClosed()", "public boolean isClosed()"], ["org.bson.BsonDocument", "com.mongodb.operation.AsyncQueryBatchCursor.getPostBatchResumeToken()", "public org.bson.BsonDocument getPostBatchResumeToken()"], ["org.bson.BsonTimestamp", "com.mongodb.operation.AsyncQueryBatchCursor.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["boolean", "com.mongodb.operation.AsyncQueryBatchCursor.isFirstBatchEmpty()", "public boolean isFirstBatchEmpty()"], ["void", "com.mongodb.operation.BulkWriteBatch$WriteRequestEncoder.encode(org.bson.BsonWriter, com.mongodb.bulk.WriteRequest, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.bulk.WriteRequest, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.bulk.WriteRequest>", "com.mongodb.operation.BulkWriteBatch$WriteRequestEncoder.getEncoderClass()", "public java.lang.Class<com.mongodb.bulk.WriteRequest> getEncoderClass()"], ["void", "com.mongodb.operation.BulkWriteBatch$WriteRequestEncoder.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Void", "com.mongodb.operation.CommandOperationHelper$1.apply(org.bson.BsonDocument, com.mongodb.connection.Connection)", "public java.lang.Void apply(org.bson.BsonDocument, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CommandOperationHelper$1.apply(java.lang.Object, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.DropIndexOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$3.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$2$1$1.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$2$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.FindOperation", "com.mongodb.operation.FindOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.FindOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.FindOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.FindOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> filter(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.FindOperation.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.batchSize(int)", "public com.mongodb.operation.FindOperation<T> batchSize(int)"], ["int", "com.mongodb.operation.FindOperation.getLimit()", "public int getLimit()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.limit(int)", "public com.mongodb.operation.FindOperation<T> limit(int)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getModifiers()", "public org.bson.BsonDocument getModifiers()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.modifiers(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> modifiers(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.operation.FindOperation.getMaxAwaitTime(java.util.concurrent.TimeUnit)", "public long getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindOperation<T> maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.operation.FindOperation.getSkip()", "public int getSkip()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.skip(int)", "public com.mongodb.operation.FindOperation<T> skip(int)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> sort(org.bson.BsonDocument)"], ["com.mongodb.CursorType", "com.mongodb.operation.FindOperation.getCursorType()", "public com.mongodb.CursorType getCursorType()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.cursorType(com.mongodb.CursorType)", "public com.mongodb.operation.FindOperation<T> cursorType(com.mongodb.CursorType)"], ["boolean", "com.mongodb.operation.FindOperation.isSlaveOk()", "public boolean isSlaveOk()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.slaveOk(boolean)", "public com.mongodb.operation.FindOperation<T> slaveOk(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.oplogReplay(boolean)", "public com.mongodb.operation.FindOperation<T> oplogReplay(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.noCursorTimeout(boolean)", "public com.mongodb.operation.FindOperation<T> noCursorTimeout(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isPartial()", "public boolean isPartial()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.partial(boolean)", "public com.mongodb.operation.FindOperation<T> partial(boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.FindOperation<T> collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.operation.FindOperation.getComment()", "public java.lang.String getComment()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.comment(java.lang.String)", "public com.mongodb.operation.FindOperation<T> comment(java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getHint()", "public org.bson.BsonDocument getHint()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.hint(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> hint(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getMax()", "public org.bson.BsonDocument getMax()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.max(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> max(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation.getMin()", "public org.bson.BsonDocument getMin()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.min(org.bson.BsonDocument)", "public com.mongodb.operation.FindOperation<T> min(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindOperation.getMaxScan()", "public long getMaxScan()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.maxScan(long)", "public com.mongodb.operation.FindOperation<T> maxScan(long)"], ["boolean", "com.mongodb.operation.FindOperation.isReturnKey()", "public boolean isReturnKey()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.returnKey(boolean)", "public com.mongodb.operation.FindOperation<T> returnKey(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isShowRecordId()", "public boolean isShowRecordId()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.showRecordId(boolean)", "public com.mongodb.operation.FindOperation<T> showRecordId(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.isSnapshot()", "public boolean isSnapshot()"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.snapshot(boolean)", "public com.mongodb.operation.FindOperation<T> snapshot(boolean)"], ["com.mongodb.operation.FindOperation<T>", "com.mongodb.operation.FindOperation.retryReads(boolean)", "public com.mongodb.operation.FindOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.FindOperation.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.FindOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.FindOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.FindOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.FindOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.FindOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$3.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.RenameCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.RenameCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation$3.apply(org.bson.BsonDocument, com.mongodb.connection.Connection)", "public com.mongodb.operation.MapReduceStatistics apply(org.bson.BsonDocument, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation$3.apply(java.lang.Object, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.Connection)"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation", "com.mongodb.operation.MapReduceWithInlineResultsOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getMapFunction()", "public org.bson.BsonJavaScript getMapFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getReduceFunction()", "public org.bson.BsonJavaScript getReduceFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getFinalizeFunction()", "public org.bson.BsonJavaScript getFinalizeFunction()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.finalizeFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> finalizeFunction(org.bson.BsonJavaScript)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getScope()", "public org.bson.BsonDocument getScope()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.scope(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> scope(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> sort(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getLimit()", "public int getLimit()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.limit(int)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> limit(int)"], ["boolean", "com.mongodb.operation.MapReduceWithInlineResultsOperation.isJsMode()", "public boolean isJsMode()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.jsMode(boolean)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> jsMode(boolean)"], ["boolean", "com.mongodb.operation.MapReduceWithInlineResultsOperation.isVerbose()", "public boolean isVerbose()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.verbose(boolean)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> verbose(boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> collation(com.mongodb.client.model.Collation)"], ["long", "com.mongodb.operation.MapReduceWithInlineResultsOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceWithInlineResultsOperation<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.MapReduceWithInlineResultsOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.MapReduceBatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.MapReduceWithInlineResultsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceAsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceAsyncBatchCursor<T>>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceWithInlineResultsOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$5.onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)", "public void onResult(com.mongodb.WriteConcernResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$5.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.ListIndexesOperation$5.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$5.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.operation.CommandWriteOperation", "com.mongodb.operation.CommandWriteOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.CommandWriteOperation(java.lang.String, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["T", "com.mongodb.operation.CommandWriteOperation.execute(com.mongodb.binding.WriteBinding)", "public T execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommandWriteOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.close()", "public void close()"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncChangeStreamBatchCursor.getBatchSize()", "public int getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncChangeStreamBatchCursor.isClosed()", "public boolean isClosed()"], ["org.bson.BsonDocument", "com.mongodb.operation.AsyncChangeStreamBatchCursor.getPostBatchResumeToken()", "public org.bson.BsonDocument getPostBatchResumeToken()"], ["org.bson.BsonTimestamp", "com.mongodb.operation.AsyncChangeStreamBatchCursor.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["boolean", "com.mongodb.operation.AsyncChangeStreamBatchCursor.isFirstBatchEmpty()", "public boolean isFirstBatchEmpty()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.operation.CommandResultCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.operation.CommandResultCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.operation.CommandResultCodecProvider.hashCode()", "public int hashCode()"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation$1.call(com.mongodb.connection.Connection)", "public com.mongodb.operation.MapReduceStatistics call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["T", "com.mongodb.operation.CommandOperationHelper$IdentityReadTransformer.apply(T, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public T apply(T, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$2.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["void", "com.mongodb.operation.CommandOperationHelper$8.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropIndexOperation$2$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropIndexOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.DistinctOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$2.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace)", "public com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace)"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace, com.mongodb.WriteConcern)", "public com.mongodb.operation.RenameCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.MongoNamespace, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.RenameCollectionOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.operation.RenameCollectionOperation.isDropTarget()", "public boolean isDropTarget()"], ["com.mongodb.operation.RenameCollectionOperation", "com.mongodb.operation.RenameCollectionOperation.dropTarget(boolean)", "public com.mongodb.operation.RenameCollectionOperation dropTarget(boolean)"], ["java.lang.Void", "com.mongodb.operation.RenameCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.RenameCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.RenameCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.FindOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.AggregateOperationImpl.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateOperationImpl.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperationImpl.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.CurrentOpOperation$1.call(com.mongodb.connection.Connection)", "public org.bson.BsonDocument call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CurrentOpOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace)", "public com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace, com.mongodb.internal.client.model.CountStrategy)", "public com.mongodb.operation.CountOperation(com.mongodb.MongoNamespace, com.mongodb.internal.client.model.CountStrategy)"], ["org.bson.BsonDocument", "com.mongodb.operation.CountOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.CountOperation filter(org.bson.BsonDocument)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.retryReads(boolean)", "public com.mongodb.operation.CountOperation retryReads(boolean)"], ["boolean", "com.mongodb.operation.CountOperation.getRetryReads()", "public boolean getRetryReads()"], ["org.bson.BsonValue", "com.mongodb.operation.CountOperation.getHint()", "public org.bson.BsonValue getHint()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.hint(org.bson.BsonValue)", "public com.mongodb.operation.CountOperation hint(org.bson.BsonValue)"], ["long", "com.mongodb.operation.CountOperation.getLimit()", "public long getLimit()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.limit(long)", "public com.mongodb.operation.CountOperation limit(long)"], ["long", "com.mongodb.operation.CountOperation.getSkip()", "public long getSkip()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.skip(long)", "public com.mongodb.operation.CountOperation skip(long)"], ["long", "com.mongodb.operation.CountOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.CountOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.CountOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.CountOperation", "com.mongodb.operation.CountOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.CountOperation collation(com.mongodb.client.model.Collation)"], ["java.lang.Long", "com.mongodb.operation.CountOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Long execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CountOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Long>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Long>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.CountOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.CountOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.CountOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.CommandOperationHelper$TransformingWriteResultCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListCollectionsOperation$5.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["java.util.List<com.mongodb.async.AsyncBatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.util.List<com.mongodb.async.AsyncBatchCursor<T>> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$2.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["void", "com.mongodb.operation.DropCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$10.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.CurrentOpOperation$2.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.OperationHelper$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.GroupOperation", "com.mongodb.operation.GroupOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.GroupOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonDocument, org.bson.codecs.Decoder<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.GroupOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.GroupOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getKey()", "public org.bson.BsonDocument getKey()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.key(org.bson.BsonDocument)", "public com.mongodb.operation.GroupOperation<T> key(org.bson.BsonDocument)"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getKeyFunction()", "public org.bson.BsonJavaScript getKeyFunction()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.keyFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.GroupOperation<T> keyFunction(org.bson.BsonJavaScript)"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getInitial()", "public org.bson.BsonDocument getInitial()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getReduceFunction()", "public org.bson.BsonJavaScript getReduceFunction()"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.GroupOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonJavaScript", "com.mongodb.operation.GroupOperation.getFinalizeFunction()", "public org.bson.BsonJavaScript getFinalizeFunction()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.finalizeFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.GroupOperation<T> finalizeFunction(org.bson.BsonJavaScript)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.GroupOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.GroupOperation<T> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.GroupOperation<T>", "com.mongodb.operation.GroupOperation.retryReads(boolean)", "public com.mongodb.operation.GroupOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.GroupOperation.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.GroupOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.GroupOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Void", "com.mongodb.operation.CreateIndexesOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateIndexesOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.FsyncUnlockOperation", "com.mongodb.operation.FsyncUnlockOperation()", "public com.mongodb.operation.FsyncUnlockOperation()"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.WriteBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.WriteBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.ReadBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Void", "com.mongodb.operation.CreateCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceStatistics(int, int, int, int)", "public com.mongodb.operation.MapReduceStatistics(int, int, int, int)"], ["int", "com.mongodb.operation.MapReduceStatistics.getInputCount()", "public int getInputCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getOutputCount()", "public int getOutputCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getEmitCount()", "public int getEmitCount()"], ["int", "com.mongodb.operation.MapReduceStatistics.getDuration()", "public int getDuration()"], ["com.mongodb.operation.MapReduceBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation$1.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.MapReduceBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$1.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.remove()", "public void remove()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.close()", "public void close()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.next()", "public java.util.List<T> next()"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getBatchSize()", "public int getBatchSize()"], ["java.util.List<T>", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.tryNext()", "public java.util.List<T> tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$ProjectingBatchCursor.next()", "public java.lang.Object next()"], ["java.lang.Void", "com.mongodb.operation.UpdateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UpdateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ChangeStreamOperation$2.onResult(com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<org.bson.RawBsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ChangeStreamOperation$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.AggregateOperationImpl$3.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.AggregateOperationImpl$3.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["void", "com.mongodb.operation.UpdateUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$6.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$6.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.DropDatabaseOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropDatabaseOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation$6.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.CommandOperationHelper$9.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$9.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String)", "public com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String)"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String, com.mongodb.WriteConcern)", "public com.mongodb.operation.CreateCollectionOperation(java.lang.String, java.lang.String, com.mongodb.WriteConcern)"], ["java.lang.String", "com.mongodb.operation.CreateCollectionOperation.getCollectionName()", "public java.lang.String getCollectionName()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.CreateCollectionOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.operation.CreateCollectionOperation.isAutoIndex()", "public boolean isAutoIndex()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.autoIndex(boolean)", "public com.mongodb.operation.CreateCollectionOperation autoIndex(boolean)"], ["long", "com.mongodb.operation.CreateCollectionOperation.getMaxDocuments()", "public long getMaxDocuments()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.maxDocuments(long)", "public com.mongodb.operation.CreateCollectionOperation maxDocuments(long)"], ["boolean", "com.mongodb.operation.CreateCollectionOperation.isCapped()", "public boolean isCapped()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.capped(boolean)", "public com.mongodb.operation.CreateCollectionOperation capped(boolean)"], ["long", "com.mongodb.operation.CreateCollectionOperation.getSizeInBytes()", "public long getSizeInBytes()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.sizeInBytes(long)", "public com.mongodb.operation.CreateCollectionOperation sizeInBytes(long)"], ["java.lang.Boolean", "com.mongodb.operation.CreateCollectionOperation.isUsePowerOf2Sizes()", "public java.lang.Boolean isUsePowerOf2Sizes()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.usePowerOf2Sizes(java.lang.Boolean)", "public com.mongodb.operation.CreateCollectionOperation usePowerOf2Sizes(java.lang.Boolean)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getStorageEngineOptions()", "public org.bson.BsonDocument getStorageEngineOptions()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.storageEngineOptions(org.bson.BsonDocument)", "public com.mongodb.operation.CreateCollectionOperation storageEngineOptions(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getIndexOptionDefaults()", "public org.bson.BsonDocument getIndexOptionDefaults()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.indexOptionDefaults(org.bson.BsonDocument)", "public com.mongodb.operation.CreateCollectionOperation indexOptionDefaults(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.CreateCollectionOperation.getValidator()", "public org.bson.BsonDocument getValidator()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.validator(org.bson.BsonDocument)", "public com.mongodb.operation.CreateCollectionOperation validator(org.bson.BsonDocument)"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.operation.CreateCollectionOperation.getValidationLevel()", "public com.mongodb.client.model.ValidationLevel getValidationLevel()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.validationLevel(com.mongodb.client.model.ValidationLevel)", "public com.mongodb.operation.CreateCollectionOperation validationLevel(com.mongodb.client.model.ValidationLevel)"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.operation.CreateCollectionOperation.getValidationAction()", "public com.mongodb.client.model.ValidationAction getValidationAction()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.validationAction(com.mongodb.client.model.ValidationAction)", "public com.mongodb.operation.CreateCollectionOperation validationAction(com.mongodb.client.model.ValidationAction)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.CreateCollectionOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.CreateCollectionOperation", "com.mongodb.operation.CreateCollectionOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.CreateCollectionOperation collation(com.mongodb.client.model.Collation)"], ["java.lang.Void", "com.mongodb.operation.CreateCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.close()", "public void close()"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void next(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)", "public void tryNext(com.mongodb.async.SingleResultCallback<java.util.List<T>>)"], ["void", "com.mongodb.operation.AsyncSingleBatchQueryCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.AsyncSingleBatchQueryCursor.getBatchSize()", "public int getBatchSize()"], ["boolean", "com.mongodb.operation.AsyncSingleBatchQueryCursor.isClosed()", "public boolean isClosed()"], ["void", "com.mongodb.operation.CommandOperationHelper$12.onResult(D, java.lang.Throwable)", "public void onResult(D, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$3.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Boolean apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$3.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.GroupOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$2.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.MixedBulkWriteOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.bulk.BulkWriteResult call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.MixedBulkWriteOperation$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Void", "com.mongodb.operation.CommandOperationHelper$2.apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)", "public java.lang.Void apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.CommandOperationHelper$2.apply(java.lang.Object, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.AsyncConnection)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback.onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.FindOperation$ExplainResultCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndReplaceOperation", "com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getReplacement()", "public org.bson.BsonDocument getReplacement()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindAndReplaceOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindAndReplaceOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndReplaceOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndReplaceOperation<T> sort(org.bson.BsonDocument)"], ["boolean", "com.mongodb.operation.FindAndReplaceOperation.isReturnOriginal()", "public boolean isReturnOriginal()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.returnOriginal(boolean)", "public com.mongodb.operation.FindAndReplaceOperation<T> returnOriginal(boolean)"], ["boolean", "com.mongodb.operation.FindAndReplaceOperation.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.upsert(boolean)", "public com.mongodb.operation.FindAndReplaceOperation<T> upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.operation.FindAndReplaceOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.operation.FindAndReplaceOperation<T> bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindAndReplaceOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.FindAndReplaceOperation<T>", "com.mongodb.operation.FindAndReplaceOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.FindAndReplaceOperation<T> collation(com.mongodb.client.model.Collation)"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>)", "public com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>, com.mongodb.WriteConcern)", "public com.mongodb.operation.CreateIndexesOperation(com.mongodb.MongoNamespace, java.util.List<com.mongodb.bulk.IndexRequest>, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.CreateIndexesOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["java.util.List<com.mongodb.bulk.IndexRequest>", "com.mongodb.operation.CreateIndexesOperation.getRequests()", "public java.util.List<com.mongodb.bulk.IndexRequest> getRequests()"], ["java.util.List<java.lang.String>", "com.mongodb.operation.CreateIndexesOperation.getIndexNames()", "public java.util.List<java.lang.String> getIndexNames()"], ["long", "com.mongodb.operation.CreateIndexesOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.CreateIndexesOperation", "com.mongodb.operation.CreateIndexesOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.CreateIndexesOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Void", "com.mongodb.operation.CreateIndexesOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateIndexesOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateIndexesOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.OperationHelper$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonValue", "com.mongodb.operation.ChangeStreamOperation$3.create()", "public org.bson.BsonValue create()"], ["java.lang.Void", "com.mongodb.operation.CreateViewOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateViewOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.InsertOperation", "com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["com.mongodb.operation.InsertOperation", "com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.InsertRequest>)", "public com.mongodb.operation.InsertOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.InsertRequest>)"], ["java.util.List<com.mongodb.bulk.InsertRequest>", "com.mongodb.operation.InsertOperation.getInsertRequests()", "public java.util.List<com.mongodb.bulk.InsertRequest> getInsertRequests()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation$4.execute(com.mongodb.binding.ReadBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$4.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String)", "public com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String, com.mongodb.WriteConcern)", "public com.mongodb.operation.MapReduceToCollectionOperation(com.mongodb.MongoNamespace, org.bson.BsonJavaScript, org.bson.BsonJavaScript, java.lang.String, com.mongodb.WriteConcern)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.MapReduceToCollectionOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getMapFunction()", "public org.bson.BsonJavaScript getMapFunction()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getReduceFunction()", "public org.bson.BsonJavaScript getReduceFunction()"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getCollectionName()", "public java.lang.String getCollectionName()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.MapReduceToCollectionOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["org.bson.BsonJavaScript", "com.mongodb.operation.MapReduceToCollectionOperation.getFinalizeFunction()", "public org.bson.BsonJavaScript getFinalizeFunction()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.finalizeFunction(org.bson.BsonJavaScript)", "public com.mongodb.operation.MapReduceToCollectionOperation finalizeFunction(org.bson.BsonJavaScript)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getScope()", "public org.bson.BsonDocument getScope()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.scope(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceToCollectionOperation scope(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceToCollectionOperation filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceToCollectionOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.MapReduceToCollectionOperation sort(org.bson.BsonDocument)"], ["int", "com.mongodb.operation.MapReduceToCollectionOperation.getLimit()", "public int getLimit()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.limit(int)", "public com.mongodb.operation.MapReduceToCollectionOperation limit(int)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isJsMode()", "public boolean isJsMode()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.jsMode(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation jsMode(boolean)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isVerbose()", "public boolean isVerbose()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.verbose(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation verbose(boolean)"], ["long", "com.mongodb.operation.MapReduceToCollectionOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.MapReduceToCollectionOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getAction()", "public java.lang.String getAction()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.action(java.lang.String)", "public com.mongodb.operation.MapReduceToCollectionOperation action(java.lang.String)"], ["java.lang.String", "com.mongodb.operation.MapReduceToCollectionOperation.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.databaseName(java.lang.String)", "public com.mongodb.operation.MapReduceToCollectionOperation databaseName(java.lang.String)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isSharded()", "public boolean isSharded()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.sharded(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation sharded(boolean)"], ["boolean", "com.mongodb.operation.MapReduceToCollectionOperation.isNonAtomic()", "public boolean isNonAtomic()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.nonAtomic(boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation nonAtomic(boolean)"], ["java.lang.Boolean", "com.mongodb.operation.MapReduceToCollectionOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.operation.MapReduceToCollectionOperation bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.MapReduceToCollectionOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.MapReduceToCollectionOperation", "com.mongodb.operation.MapReduceToCollectionOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.MapReduceToCollectionOperation collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public com.mongodb.operation.MapReduceStatistics execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.MapReduceToCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceStatistics>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<com.mongodb.operation.MapReduceStatistics>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceToCollectionOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.MapReduceToCollectionOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.Object", "com.mongodb.operation.MapReduceToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$1.apply(com.mongodb.async.AsyncAggregateResponseBatchCursor<org.bson.RawBsonDocument>, com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>)", "public void apply(com.mongodb.async.AsyncAggregateResponseBatchCursor<org.bson.RawBsonDocument>, com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Boolean apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$2.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$5.call(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.GroupOperation$3.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.GroupOperation$3.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["R", "com.mongodb.operation.CommandOperationHelper$13$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public R call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithSourceCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithSourceCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CreateUserOperation", "com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean)", "public com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean)"], ["com.mongodb.operation.CreateUserOperation", "com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean, com.mongodb.WriteConcern)", "public com.mongodb.operation.CreateUserOperation(com.mongodb.MongoCredential, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.MongoCredential", "com.mongodb.operation.CreateUserOperation.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["boolean", "com.mongodb.operation.CreateUserOperation.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.Void", "com.mongodb.operation.CreateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommitTransactionOperation$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommitTransactionOperation$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$3.onResult(java.util.List<org.bson.RawBsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.RawBsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$3.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.ChangeStreamOperation", "com.mongodb.operation.ChangeStreamOperation(com.mongodb.MongoNamespace, com.mongodb.client.model.changestream.FullDocument, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ChangeStreamOperation(com.mongodb.MongoNamespace, com.mongodb.client.model.changestream.FullDocument, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)"], ["com.mongodb.operation.ChangeStreamOperation", "com.mongodb.operation.ChangeStreamOperation(com.mongodb.MongoNamespace, com.mongodb.client.model.changestream.FullDocument, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>, com.mongodb.client.model.changestream.ChangeStreamLevel)", "public com.mongodb.operation.ChangeStreamOperation(com.mongodb.MongoNamespace, com.mongodb.client.model.changestream.FullDocument, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>, com.mongodb.client.model.changestream.ChangeStreamLevel)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.ChangeStreamOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.ChangeStreamOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["com.mongodb.client.model.changestream.FullDocument", "com.mongodb.operation.ChangeStreamOperation.getFullDocument()", "public com.mongodb.client.model.changestream.FullDocument getFullDocument()"], ["org.bson.BsonDocument", "com.mongodb.operation.ChangeStreamOperation.getResumeToken()", "public org.bson.BsonDocument getResumeToken()"], ["org.bson.BsonDocument", "com.mongodb.operation.ChangeStreamOperation.getResumeAfter()", "public org.bson.BsonDocument getResumeAfter()"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.resumeAfter(org.bson.BsonDocument)", "public com.mongodb.operation.ChangeStreamOperation<T> resumeAfter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.ChangeStreamOperation.getStartAfter()", "public org.bson.BsonDocument getStartAfter()"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.startAfter(org.bson.BsonDocument)", "public com.mongodb.operation.ChangeStreamOperation<T> startAfter(org.bson.BsonDocument)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.ChangeStreamOperation.getPipeline()", "public java.util.List<org.bson.BsonDocument> getPipeline()"], ["java.lang.Integer", "com.mongodb.operation.ChangeStreamOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.batchSize(java.lang.Integer)", "public com.mongodb.operation.ChangeStreamOperation<T> batchSize(java.lang.Integer)"], ["long", "com.mongodb.operation.ChangeStreamOperation.getMaxAwaitTime(java.util.concurrent.TimeUnit)", "public long getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ChangeStreamOperation<T> maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.ChangeStreamOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.ChangeStreamOperation<T> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.startAtOperationTime(org.bson.BsonTimestamp)", "public com.mongodb.operation.ChangeStreamOperation<T> startAtOperationTime(org.bson.BsonTimestamp)"], ["org.bson.BsonTimestamp", "com.mongodb.operation.ChangeStreamOperation.getStartAtOperationTime()", "public org.bson.BsonTimestamp getStartAtOperationTime()"], ["com.mongodb.operation.ChangeStreamOperation<T>", "com.mongodb.operation.ChangeStreamOperation.retryReads(boolean)", "public com.mongodb.operation.ChangeStreamOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.ChangeStreamOperation.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ChangeStreamOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ChangeStreamOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["void", "com.mongodb.operation.ChangeStreamOperation.setChangeStreamOptionsForResume(org.bson.BsonDocument, int)", "public void setChangeStreamOptionsForResume(org.bson.BsonDocument, int)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListIndexesOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DistinctOperation", "com.mongodb.operation.DistinctOperation(com.mongodb.MongoNamespace, java.lang.String, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.DistinctOperation(com.mongodb.MongoNamespace, java.lang.String, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.DistinctOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.DistinctOperation<T>", "com.mongodb.operation.DistinctOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.DistinctOperation<T> filter(org.bson.BsonDocument)"], ["com.mongodb.operation.DistinctOperation<T>", "com.mongodb.operation.DistinctOperation.retryReads(boolean)", "public com.mongodb.operation.DistinctOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.DistinctOperation.getRetryReads()", "public boolean getRetryReads()"], ["long", "com.mongodb.operation.DistinctOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.DistinctOperation<T>", "com.mongodb.operation.DistinctOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.DistinctOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.DistinctOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.DistinctOperation<T>", "com.mongodb.operation.DistinctOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.DistinctOperation<T> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.DistinctOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.DistinctOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["org.bson.BsonArray", "com.mongodb.operation.CommandResultArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonArray decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "com.mongodb.operation.CommandResultArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.operation.ListIndexesOperation", "com.mongodb.operation.ListIndexesOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ListIndexesOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["java.lang.Integer", "com.mongodb.operation.ListIndexesOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.ListIndexesOperation<T>", "com.mongodb.operation.ListIndexesOperation.batchSize(int)", "public com.mongodb.operation.ListIndexesOperation<T> batchSize(int)"], ["long", "com.mongodb.operation.ListIndexesOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListIndexesOperation<T>", "com.mongodb.operation.ListIndexesOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ListIndexesOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListIndexesOperation<T>", "com.mongodb.operation.ListIndexesOperation.retryReads(boolean)", "public com.mongodb.operation.ListIndexesOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.ListIndexesOperation.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListIndexesOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListIndexesOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$2.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$2.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.lang.Void", "com.mongodb.operation.ChangeStreamBatchCursor$4.call(com.mongodb.binding.ConnectionSource)", "public java.lang.Void call(com.mongodb.binding.ConnectionSource)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$4.call(com.mongodb.binding.ConnectionSource)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonValue", "com.mongodb.operation.AggregateOperationImpl$4.create()", "public org.bson.BsonValue create()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.ReadConcern)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.ReadConcern)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.ReadConcern, com.mongodb.WriteConcern)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.ReadConcern, com.mongodb.WriteConcern)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern, com.mongodb.client.model.AggregationLevel)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern, com.mongodb.client.model.AggregationLevel)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.model.AggregationLevel)", "public com.mongodb.operation.AggregateToCollectionOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.model.AggregationLevel)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.AggregateToCollectionOperation.getPipeline()", "public java.util.List<org.bson.BsonDocument> getPipeline()"], ["com.mongodb.ReadConcern", "com.mongodb.operation.AggregateToCollectionOperation.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.AggregateToCollectionOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["java.lang.Boolean", "com.mongodb.operation.AggregateToCollectionOperation.getAllowDiskUse()", "public java.lang.Boolean getAllowDiskUse()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.allowDiskUse(java.lang.Boolean)", "public com.mongodb.operation.AggregateToCollectionOperation allowDiskUse(java.lang.Boolean)"], ["long", "com.mongodb.operation.AggregateToCollectionOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateToCollectionOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.operation.AggregateToCollectionOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.operation.AggregateToCollectionOperation bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.AggregateToCollectionOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.AggregateToCollectionOperation collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.operation.AggregateToCollectionOperation.getComment()", "public java.lang.String getComment()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.comment(java.lang.String)", "public com.mongodb.operation.AggregateToCollectionOperation comment(java.lang.String)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateToCollectionOperation.getHint()", "public org.bson.BsonDocument getHint()"], ["com.mongodb.operation.AggregateToCollectionOperation", "com.mongodb.operation.AggregateToCollectionOperation.hint(org.bson.BsonDocument)", "public com.mongodb.operation.AggregateToCollectionOperation hint(org.bson.BsonDocument)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.AggregateToCollectionOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["java.lang.Void", "com.mongodb.operation.AggregateToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.AggregateToCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.AggregateToCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.OperationHelper$3.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["boolean", "com.mongodb.operation.ChangeStreamBatchCursor.hasNext()", "public boolean hasNext()"], ["java.util.List<T>", "com.mongodb.operation.ChangeStreamBatchCursor.next()", "public java.util.List<T> next()"], ["java.util.List<T>", "com.mongodb.operation.ChangeStreamBatchCursor.tryNext()", "public java.util.List<T> tryNext()"], ["void", "com.mongodb.operation.ChangeStreamBatchCursor.close()", "public void close()"], ["void", "com.mongodb.operation.ChangeStreamBatchCursor.setBatchSize(int)", "public void setBatchSize(int)"], ["int", "com.mongodb.operation.ChangeStreamBatchCursor.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.ServerCursor", "com.mongodb.operation.ChangeStreamBatchCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.operation.ChangeStreamBatchCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["void", "com.mongodb.operation.ChangeStreamBatchCursor.remove()", "public void remove()"], ["org.bson.BsonDocument", "com.mongodb.operation.ChangeStreamBatchCursor.getPostBatchResumeToken()", "public org.bson.BsonDocument getPostBatchResumeToken()"], ["org.bson.BsonTimestamp", "com.mongodb.operation.ChangeStreamBatchCursor.getOperationTime()", "public org.bson.BsonTimestamp getOperationTime()"], ["boolean", "com.mongodb.operation.ChangeStreamBatchCursor.isFirstBatchEmpty()", "public boolean isFirstBatchEmpty()"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor.next()", "public java.lang.Object next()"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$2.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonArray", "com.mongodb.operation.AggregateOperationImpl$5.create(com.mongodb.connection.ConnectionDescription, com.mongodb.session.SessionContext)", "public org.bson.BsonArray create(com.mongodb.connection.ConnectionDescription, com.mongodb.session.SessionContext)"], ["java.lang.Void", "com.mongodb.operation.CommandOperationHelper$3.apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)", "public java.lang.Void apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.CommandOperationHelper$3.apply(java.lang.Object, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.AsyncConnection)"], ["void", "com.mongodb.operation.BaseWriteOperation$1.onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)", "public void onResult(com.mongodb.bulk.BulkWriteResult, java.lang.Throwable)"], ["void", "com.mongodb.operation.BaseWriteOperation$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback$1$1.onResult(D, java.lang.Throwable)", "public void onResult(D, java.lang.Throwable)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation$3.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$3.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["T", "com.mongodb.operation.CommandOperationHelper$IdentityWriteTransformerAsync.apply(T, com.mongodb.connection.AsyncConnection)", "public T apply(T, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.operation.AbortTransactionOperation", "com.mongodb.operation.AbortTransactionOperation(com.mongodb.WriteConcern)", "public com.mongodb.operation.AbortTransactionOperation(com.mongodb.WriteConcern)"], ["com.mongodb.operation.AbortTransactionOperation", "com.mongodb.operation.AbortTransactionOperation.recoveryToken(org.bson.BsonDocument)", "public com.mongodb.operation.AbortTransactionOperation recoveryToken(org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>)"], ["com.mongodb.operation.FindAndDeleteOperation", "com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.FindAndDeleteOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndDeleteOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndDeleteOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindAndDeleteOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindAndDeleteOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndDeleteOperation<T> sort(org.bson.BsonDocument)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindAndDeleteOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.FindAndDeleteOperation<T>", "com.mongodb.operation.FindAndDeleteOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.FindAndDeleteOperation<T> collation(com.mongodb.client.model.Collation)"], ["void", "com.mongodb.operation.AggregateToCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$15$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropCollectionOperation$2$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.DropCollectionOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["com.mongodb.operation.CreateViewOperation", "com.mongodb.operation.CreateViewOperation(java.lang.String, java.lang.String, java.lang.String, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern)", "public com.mongodb.operation.CreateViewOperation(java.lang.String, java.lang.String, java.lang.String, java.util.List<org.bson.BsonDocument>, com.mongodb.WriteConcern)"], ["java.lang.String", "com.mongodb.operation.CreateViewOperation.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["java.lang.String", "com.mongodb.operation.CreateViewOperation.getViewName()", "public java.lang.String getViewName()"], ["java.lang.String", "com.mongodb.operation.CreateViewOperation.getViewOn()", "public java.lang.String getViewOn()"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.CreateViewOperation.getPipeline()", "public java.util.List<org.bson.BsonDocument> getPipeline()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.CreateViewOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.CreateViewOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.CreateViewOperation", "com.mongodb.operation.CreateViewOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.CreateViewOperation collation(com.mongodb.client.model.Collation)"], ["java.lang.Void", "com.mongodb.operation.CreateViewOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CreateViewOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.CreateViewOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["java.lang.Long", "com.mongodb.operation.CountOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Long apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CountOperation$2.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.CommandOperationHelper$11.onResult(D, java.lang.Throwable)", "public void onResult(D, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$CommandProtocolExecutingCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindOperation$4$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public org.bson.BsonDocument call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$4$1.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.util.List<T>", "com.mongodb.operation.ChangeStreamBatchCursor$2.apply(com.mongodb.operation.AggregateResponseBatchCursor<org.bson.RawBsonDocument>)", "public java.util.List<T> apply(com.mongodb.operation.AggregateResponseBatchCursor<org.bson.RawBsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$2.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.UpdateUserOperation", "com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean)", "public com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean)"], ["com.mongodb.operation.UpdateUserOperation", "com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean, com.mongodb.WriteConcern)", "public com.mongodb.operation.UpdateUserOperation(com.mongodb.MongoCredential, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.MongoCredential", "com.mongodb.operation.UpdateUserOperation.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["boolean", "com.mongodb.operation.UpdateUserOperation.isReadOnly()", "public boolean isReadOnly()"], ["java.lang.Void", "com.mongodb.operation.UpdateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.UpdateUserOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.UpdateUserOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.CommandOperationHelper$10$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["T", "com.mongodb.operation.CommandOperationHelper$IdentityTransformerAsync.apply(T, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public T apply(T, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["R", "com.mongodb.operation.CommandOperationHelper$13.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public R call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.OperationHelper$4.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$ConnectionReleasingWrappedCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["com.mongodb.async.SingleResultCallback<T>", "com.mongodb.operation.OperationHelper$ConnectionReleasingWrappedCallback.releaseConnectionAndGetWrapped()", "public com.mongodb.async.SingleResultCallback<T> releaseConnectionAndGetWrapped()"], ["com.mongodb.operation.DropDatabaseOperation", "com.mongodb.operation.DropDatabaseOperation(java.lang.String)", "public com.mongodb.operation.DropDatabaseOperation(java.lang.String)"], ["com.mongodb.operation.DropDatabaseOperation", "com.mongodb.operation.DropDatabaseOperation(java.lang.String, com.mongodb.WriteConcern)", "public com.mongodb.operation.DropDatabaseOperation(java.lang.String, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.DropDatabaseOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["java.lang.Void", "com.mongodb.operation.DropDatabaseOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropDatabaseOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropDatabaseOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.AggregateOperation", "com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>)"], ["com.mongodb.operation.AggregateOperation", "com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>, com.mongodb.client.model.AggregationLevel)", "public com.mongodb.operation.AggregateOperation(com.mongodb.MongoNamespace, java.util.List<org.bson.BsonDocument>, org.bson.codecs.Decoder<T>, com.mongodb.client.model.AggregationLevel)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.AggregateOperation.getPipeline()", "public java.util.List<org.bson.BsonDocument> getPipeline()"], ["java.lang.Boolean", "com.mongodb.operation.AggregateOperation.getAllowDiskUse()", "public java.lang.Boolean getAllowDiskUse()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.allowDiskUse(java.lang.Boolean)", "public com.mongodb.operation.AggregateOperation<T> allowDiskUse(java.lang.Boolean)"], ["java.lang.Integer", "com.mongodb.operation.AggregateOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.batchSize(java.lang.Integer)", "public com.mongodb.operation.AggregateOperation<T> batchSize(java.lang.Integer)"], ["long", "com.mongodb.operation.AggregateOperation.getMaxAwaitTime(java.util.concurrent.TimeUnit)", "public long getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateOperation<T> maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.operation.AggregateOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.operation.AggregateOperation.getUseCursor()", "public java.lang.Boolean getUseCursor()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.useCursor(java.lang.Boolean)", "public com.mongodb.operation.AggregateOperation<T> useCursor(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.AggregateOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.AggregateOperation<T> collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.operation.AggregateOperation.getComment()", "public java.lang.String getComment()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.comment(java.lang.String)", "public com.mongodb.operation.AggregateOperation<T> comment(java.lang.String)"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.retryReads(boolean)", "public com.mongodb.operation.AggregateOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.AggregateOperation.getRetryReads()", "public boolean getRetryReads()"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateOperation.getHint()", "public org.bson.BsonDocument getHint()"], ["org.bson.BsonValue", "com.mongodb.operation.AggregateOperation.getHintBsonValue()", "public org.bson.BsonValue getHintBsonValue()"], ["com.mongodb.operation.AggregateOperation<T>", "com.mongodb.operation.AggregateOperation.hint(org.bson.BsonValue)", "public com.mongodb.operation.AggregateOperation<T> hint(org.bson.BsonValue)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.AggregateOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["com.mongodb.operation.ReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.AggregateOperation.asExplainableOperation(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.ReadOperation<org.bson.BsonDocument> asExplainableOperation(com.mongodb.ExplainVerbosity)"], ["com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument>", "com.mongodb.operation.AggregateOperation.asExplainableOperationAsync(com.mongodb.ExplainVerbosity)", "public com.mongodb.operation.AsyncReadOperation<org.bson.BsonDocument> asExplainableOperationAsync(com.mongodb.ExplainVerbosity)"], ["java.lang.String", "com.mongodb.operation.AggregateOperation.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.mongodb.operation.AggregateOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$6.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$6.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation$1.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation$1.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.util.List<T>", "com.mongodb.operation.ChangeStreamBatchCursor$3.apply(com.mongodb.operation.AggregateResponseBatchCursor<org.bson.RawBsonDocument>)", "public java.util.List<T> apply(com.mongodb.operation.AggregateResponseBatchCursor<org.bson.RawBsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamBatchCursor$3.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.operation.UserExistsOperation", "com.mongodb.operation.UserExistsOperation(java.lang.String, java.lang.String)", "public com.mongodb.operation.UserExistsOperation(java.lang.String, java.lang.String)"], ["com.mongodb.operation.UserExistsOperation", "com.mongodb.operation.UserExistsOperation.retryReads(boolean)", "public com.mongodb.operation.UserExistsOperation retryReads(boolean)"], ["boolean", "com.mongodb.operation.UserExistsOperation.getRetryReads()", "public boolean getRetryReads()"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Boolean execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.UserExistsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Boolean>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<java.lang.Boolean>)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.allowDiskUse(java.lang.Boolean)", "public com.mongodb.operation.AggregateExplainOperation allowDiskUse(java.lang.Boolean)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.AggregateExplainOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.retryReads(boolean)", "public com.mongodb.operation.AggregateExplainOperation retryReads(boolean)"], ["boolean", "com.mongodb.operation.AggregateExplainOperation.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.AggregateExplainOperation collation(com.mongodb.client.model.Collation)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation.getHint()", "public org.bson.BsonDocument getHint()"], ["org.bson.BsonValue", "com.mongodb.operation.AggregateExplainOperation.getHintBsonValue()", "public org.bson.BsonValue getHintBsonValue()"], ["com.mongodb.operation.AggregateExplainOperation", "com.mongodb.operation.AggregateExplainOperation.hint(org.bson.BsonValue)", "public com.mongodb.operation.AggregateExplainOperation hint(org.bson.BsonValue)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation.execute(com.mongodb.binding.ReadBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AggregateExplainOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)"], ["java.lang.Object", "com.mongodb.operation.AggregateExplainOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$5$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$5$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback.onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)", "public void onResult(com.mongodb.connection.QueryResult<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$QueryResultSingleResultCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$7.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$7.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.MapReduceAsyncBatchCursor<T>", "com.mongodb.operation.MapReduceWithInlineResultsOperation$2.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.operation.MapReduceAsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.MapReduceWithInlineResultsOperation$2.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Void", "com.mongodb.operation.CreateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.CreateUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$1.onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<T>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListIndexesOperation$2$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateViewOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncChangeStreamBatchCursor$2.apply(com.mongodb.async.AsyncAggregateResponseBatchCursor<org.bson.RawBsonDocument>, com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>)", "public void apply(com.mongodb.async.AsyncAggregateResponseBatchCursor<org.bson.RawBsonDocument>, com.mongodb.async.SingleResultCallback<java.util.List<org.bson.RawBsonDocument>>)"], ["void", "com.mongodb.operation.FindOperation$5$1.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.ListCollectionsOperation", "com.mongodb.operation.ListCollectionsOperation(java.lang.String, org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ListCollectionsOperation(java.lang.String, org.bson.codecs.Decoder<T>)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListCollectionsOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["boolean", "com.mongodb.operation.ListCollectionsOperation.isNameOnly()", "public boolean isNameOnly()"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.ListCollectionsOperation<T> filter(org.bson.BsonDocument)"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.nameOnly(boolean)", "public com.mongodb.operation.ListCollectionsOperation<T> nameOnly(boolean)"], ["java.lang.Integer", "com.mongodb.operation.ListCollectionsOperation.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.batchSize(int)", "public com.mongodb.operation.ListCollectionsOperation<T> batchSize(int)"], ["long", "com.mongodb.operation.ListCollectionsOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ListCollectionsOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListCollectionsOperation<T>", "com.mongodb.operation.ListCollectionsOperation.retryReads(boolean)", "public com.mongodb.operation.ListCollectionsOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.ListCollectionsOperation.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListCollectionsOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.FindOperation$1.call(com.mongodb.binding.ConnectionSource)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$1.call(com.mongodb.binding.ConnectionSource)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource)"], ["void", "com.mongodb.operation.RenameCollectionOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.DropCollectionOperation", "com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace)", "public com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace)"], ["com.mongodb.operation.DropCollectionOperation", "com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern)", "public com.mongodb.operation.DropCollectionOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.DropCollectionOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["java.lang.Void", "com.mongodb.operation.DropCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropCollectionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropCollectionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceInlineResultsAsyncCursor.getStatistics()", "public com.mongodb.operation.MapReduceStatistics getStatistics()"], ["void", "com.mongodb.operation.AggregateToCollectionOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$14.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$14.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["T", "com.mongodb.operation.FindAndModifyHelper$1.apply(org.bson.BsonDocument, com.mongodb.connection.Connection)", "public T apply(org.bson.BsonDocument, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FindAndModifyHelper$1.apply(java.lang.Object, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.Connection)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation$1.call(com.mongodb.binding.ConnectionSource)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$1.call(com.mongodb.binding.ConnectionSource)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListDatabasesOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["java.lang.Long", "com.mongodb.operation.CountOperation$3.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Long apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.CountOperation$3.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["void", "com.mongodb.operation.CreateCollectionOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.CountOperation$4.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["T", "com.mongodb.operation.BaseFindAndModifyOperation.execute(com.mongodb.binding.WriteBinding)", "public T execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.BaseFindAndModifyOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<T>)"], ["com.mongodb.MongoNamespace", "com.mongodb.operation.BaseFindAndModifyOperation.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.BaseFindAndModifyOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["org.bson.codecs.Decoder<T>", "com.mongodb.operation.BaseFindAndModifyOperation.getDecoder()", "public org.bson.codecs.Decoder<T> getDecoder()"], ["boolean", "com.mongodb.operation.BaseFindAndModifyOperation.isRetryWrites()", "public boolean isRetryWrites()"], ["java.lang.Void", "com.mongodb.operation.AggregateToCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.AggregateToCollectionOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.GroupOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.CommandOperationHelper$14$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.CommandOperationHelper$14$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.ChangeStreamOperation$2$1.call(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["java.lang.Boolean", "com.mongodb.operation.UserExistsOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Boolean call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.UserExistsOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["T", "com.mongodb.operation.CommandOperationHelper$IdentityWriteTransformer.apply(T, com.mongodb.connection.Connection)", "public T apply(T, com.mongodb.connection.Connection)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.CommandReadOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["com.mongodb.operation.BulkWriteBatch", "com.mongodb.operation.BulkWriteBatch.createBulkWriteBatch(com.mongodb.MongoNamespace, com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription, boolean, com.mongodb.WriteConcern, java.lang.Boolean, boolean, java.util.List<? extends com.mongodb.bulk.WriteRequest>, com.mongodb.session.SessionContext)", "public static com.mongodb.operation.BulkWriteBatch createBulkWriteBatch(com.mongodb.MongoNamespace, com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription, boolean, com.mongodb.WriteConcern, java.lang.Boolean, boolean, java.util.List<? extends com.mongodb.bulk.WriteRequest>, com.mongodb.session.SessionContext)"], ["void", "com.mongodb.operation.BulkWriteBatch.addResult(org.bson.BsonDocument)", "public void addResult(org.bson.BsonDocument)"], ["boolean", "com.mongodb.operation.BulkWriteBatch.getRetryWrites()", "public boolean getRetryWrites()"], ["org.bson.BsonDocument", "com.mongodb.operation.BulkWriteBatch.getCommand()", "public org.bson.BsonDocument getCommand()"], ["com.mongodb.connection.SplittablePayload", "com.mongodb.operation.BulkWriteBatch.getPayload()", "public com.mongodb.connection.SplittablePayload getPayload()"], ["org.bson.codecs.Decoder<org.bson.BsonDocument>", "com.mongodb.operation.BulkWriteBatch.getDecoder()", "public org.bson.codecs.Decoder<org.bson.BsonDocument> getDecoder()"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.operation.BulkWriteBatch.getResult()", "public com.mongodb.bulk.BulkWriteResult getResult()"], ["boolean", "com.mongodb.operation.BulkWriteBatch.hasErrors()", "public boolean hasErrors()"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.operation.BulkWriteBatch.getError()", "public com.mongodb.MongoBulkWriteException getError()"], ["boolean", "com.mongodb.operation.BulkWriteBatch.shouldProcessBatch()", "public boolean shouldProcessBatch()"], ["boolean", "com.mongodb.operation.BulkWriteBatch.hasAnotherBatch()", "public boolean hasAnotherBatch()"], ["com.mongodb.operation.BulkWriteBatch", "com.mongodb.operation.BulkWriteBatch.getNextBatch()", "public com.mongodb.operation.BulkWriteBatch getNextBatch()"], ["org.bson.FieldNameValidator", "com.mongodb.operation.BulkWriteBatch.getFieldNameValidator()", "public org.bson.FieldNameValidator getFieldNameValidator()"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["com.mongodb.operation.FindAndUpdateOperation", "com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.operation.FindAndUpdateOperation(com.mongodb.MongoNamespace, com.mongodb.WriteConcern, boolean, org.bson.codecs.Decoder<T>, java.util.List<? extends org.bson.conversions.Bson>)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getUpdate()", "public org.bson.BsonDocument getUpdate()"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.operation.FindAndUpdateOperation.getUpdatePipeline()", "public java.util.List<? extends org.bson.conversions.Bson> getUpdatePipeline()"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getProjection()", "public org.bson.BsonDocument getProjection()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.projection(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation<T> projection(org.bson.BsonDocument)"], ["long", "com.mongodb.operation.FindAndUpdateOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.FindAndUpdateOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndUpdateOperation.getSort()", "public org.bson.BsonDocument getSort()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.sort(org.bson.BsonDocument)", "public com.mongodb.operation.FindAndUpdateOperation<T> sort(org.bson.BsonDocument)"], ["boolean", "com.mongodb.operation.FindAndUpdateOperation.isReturnOriginal()", "public boolean isReturnOriginal()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.returnOriginal(boolean)", "public com.mongodb.operation.FindAndUpdateOperation<T> returnOriginal(boolean)"], ["boolean", "com.mongodb.operation.FindAndUpdateOperation.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.upsert(boolean)", "public com.mongodb.operation.FindAndUpdateOperation<T> upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.operation.FindAndUpdateOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.operation.FindAndUpdateOperation<T> bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.operation.FindAndUpdateOperation.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.collation(com.mongodb.client.model.Collation)", "public com.mongodb.operation.FindAndUpdateOperation<T> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.FindAndUpdateOperation<T>", "com.mongodb.operation.FindAndUpdateOperation.arrayFilters(java.util.List<org.bson.BsonDocument>)", "public com.mongodb.operation.FindAndUpdateOperation<T> arrayFilters(java.util.List<org.bson.BsonDocument>)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.operation.FindAndUpdateOperation.getArrayFilters()", "public java.util.List<org.bson.BsonDocument> getArrayFilters()"], ["T", "com.mongodb.operation.FindAndModifyHelper$2.apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)", "public T apply(org.bson.BsonDocument, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.FindAndModifyHelper$2.apply(java.lang.Object, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.connection.AsyncConnection)"], ["com.mongodb.operation.DeleteOperation", "com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["com.mongodb.operation.DeleteOperation", "com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.DeleteRequest>)", "public com.mongodb.operation.DeleteOperation(com.mongodb.MongoNamespace, boolean, com.mongodb.WriteConcern, boolean, java.util.List<com.mongodb.bulk.DeleteRequest>)"], ["java.util.List<com.mongodb.bulk.DeleteRequest>", "com.mongodb.operation.DeleteOperation.getDeleteRequests()", "public java.util.List<com.mongodb.bulk.DeleteRequest> getDeleteRequests()"], ["void", "com.mongodb.operation.DropDatabaseOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListIndexesOperation$1.call(com.mongodb.binding.ConnectionSource)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource)"], ["java.lang.Object", "com.mongodb.operation.ListIndexesOperation$1.call(com.mongodb.binding.ConnectionSource)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListCollectionsOperation$4.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ListCollectionsOperation$4.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["T", "com.mongodb.operation.CommandOperationHelper$6.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public T call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.CommitTransactionOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.DistinctOperation$1.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.BatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DistinctOperation$1.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.operation.AggregateResponseBatchCursor<T>", "com.mongodb.operation.FindOperation$7.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public com.mongodb.operation.AggregateResponseBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$7.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String)", "public com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument)", "public com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String, com.mongodb.WriteConcern)", "public com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, java.lang.String, com.mongodb.WriteConcern)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument, com.mongodb.WriteConcern)", "public com.mongodb.operation.DropIndexOperation(com.mongodb.MongoNamespace, org.bson.BsonDocument, com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.operation.DropIndexOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["long", "com.mongodb.operation.DropIndexOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.DropIndexOperation", "com.mongodb.operation.DropIndexOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.DropIndexOperation maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.Void", "com.mongodb.operation.DropIndexOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropIndexOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.DropIndexOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["org.bson.BsonDocument", "com.mongodb.operation.ParallelCollectionScanOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.CommandOperationHelper$TransformingReadResultCallback.onResult(T, java.lang.Throwable)", "public void onResult(T, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$1.onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void onResult(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback.onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)", "public void onResult(com.mongodb.binding.AsyncConnectionSource, java.lang.Throwable)"], ["void", "com.mongodb.operation.OperationHelper$AsyncCallableWithConnectionAndSourceCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["java.util.List<T>", "com.mongodb.operation.BsonArrayWrapper.getWrappedArray()", "public java.util.List<T> getWrappedArray()"], ["java.util.List<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.getValues()", "public java.util.List<org.bson.BsonValue> getValues()"], ["int", "com.mongodb.operation.BsonArrayWrapper.size()", "public int size()"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.iterator()", "public java.util.Iterator<org.bson.BsonValue> iterator()"], ["java.lang.Object[]", "com.mongodb.operation.BsonArrayWrapper.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.mongodb.operation.BsonArrayWrapper.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.add(org.bson.BsonValue)", "public boolean add(org.bson.BsonValue)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.addAll(java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.mongodb.operation.BsonArrayWrapper.clear()", "public void clear()"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.get(int)", "public org.bson.BsonValue get(int)"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.set(int, org.bson.BsonValue)", "public org.bson.BsonValue set(int, org.bson.BsonValue)"], ["void", "com.mongodb.operation.BsonArrayWrapper.add(int, org.bson.BsonValue)", "public void add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "com.mongodb.operation.BsonArrayWrapper.remove(int)", "public org.bson.BsonValue remove(int)"], ["int", "com.mongodb.operation.BsonArrayWrapper.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.mongodb.operation.BsonArrayWrapper.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.listIterator()", "public java.util.ListIterator<org.bson.BsonValue> listIterator()"], ["java.util.ListIterator<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.listIterator(int)", "public java.util.ListIterator<org.bson.BsonValue> listIterator(int)"], ["java.util.List<org.bson.BsonValue>", "com.mongodb.operation.BsonArrayWrapper.subList(int, int)", "public java.util.List<org.bson.BsonValue> subList(int, int)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.operation.BsonArrayWrapper.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.operation.BsonArrayWrapper.toString()", "public java.lang.String toString()"], ["org.bson.BsonArray", "com.mongodb.operation.BsonArrayWrapper.clone()", "public org.bson.BsonArray clone()"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.remove(int)", "public java.lang.Object remove(int)"], ["void", "com.mongodb.operation.BsonArrayWrapper.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.get(int)", "public java.lang.Object get(int)"], ["boolean", "com.mongodb.operation.BsonArrayWrapper.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.lang.Object", "com.mongodb.operation.BsonArrayWrapper.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$CommandResultSingleResultCallback.onResult(org.bson.BsonDocument, java.lang.Throwable)", "public void onResult(org.bson.BsonDocument, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$CommandResultSingleResultCallback.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.ListDatabasesOperation", "com.mongodb.operation.ListDatabasesOperation(org.bson.codecs.Decoder<T>)", "public com.mongodb.operation.ListDatabasesOperation(org.bson.codecs.Decoder<T>)"], ["long", "com.mongodb.operation.ListDatabasesOperation.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListDatabasesOperation<T>", "com.mongodb.operation.ListDatabasesOperation.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.operation.ListDatabasesOperation<T> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.operation.ListDatabasesOperation<T>", "com.mongodb.operation.ListDatabasesOperation.filter(org.bson.BsonDocument)", "public com.mongodb.operation.ListDatabasesOperation<T> filter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.operation.ListDatabasesOperation.getFilter()", "public org.bson.BsonDocument getFilter()"], ["com.mongodb.operation.ListDatabasesOperation<T>", "com.mongodb.operation.ListDatabasesOperation.nameOnly(java.lang.Boolean)", "public com.mongodb.operation.ListDatabasesOperation<T> nameOnly(java.lang.Boolean)"], ["com.mongodb.operation.ListDatabasesOperation<T>", "com.mongodb.operation.ListDatabasesOperation.retryReads(boolean)", "public com.mongodb.operation.ListDatabasesOperation<T> retryReads(boolean)"], ["boolean", "com.mongodb.operation.ListDatabasesOperation.getRetryReads()", "public boolean getRetryReads()"], ["java.lang.Boolean", "com.mongodb.operation.ListDatabasesOperation.getNameOnly()", "public java.lang.Boolean getNameOnly()"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ListDatabasesOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<T> execute(com.mongodb.binding.ReadBinding)"], ["void", "com.mongodb.operation.ListDatabasesOperation.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<com.mongodb.async.AsyncBatchCursor<T>>)"], ["java.lang.Object", "com.mongodb.operation.ListDatabasesOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.async.AsyncBatchCursor<T>", "com.mongodb.operation.FindOperation$8.apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public com.mongodb.async.AsyncBatchCursor<T> apply(org.bson.BsonDocument, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["java.lang.Object", "com.mongodb.operation.FindOperation$8.apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateExplainOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["org.bson.BsonDocument", "com.mongodb.operation.AggregateOperationImpl$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["java.lang.Void", "com.mongodb.operation.DropUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropUserOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.DistinctOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.OperationHelper$5.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["T", "com.mongodb.operation.CommandOperationHelper$7.call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public T call(com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.TransactionOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.FindOperation$5.executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)", "public void executeAsync(com.mongodb.binding.AsyncReadBinding, com.mongodb.async.SingleResultCallback<org.bson.BsonDocument>)"], ["java.lang.Void", "com.mongodb.operation.DropIndexOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Void call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.DropIndexOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["com.mongodb.operation.BatchCursor<T>", "com.mongodb.operation.ChangeStreamOperation$1.call(com.mongodb.binding.ConnectionSource)", "public com.mongodb.operation.BatchCursor<T> call(com.mongodb.binding.ConnectionSource)"], ["java.lang.Object", "com.mongodb.operation.ChangeStreamOperation$1.call(com.mongodb.binding.ConnectionSource)", "public java.lang.Object call(com.mongodb.binding.ConnectionSource)"], ["java.util.List<com.mongodb.operation.BatchCursor<T>>", "com.mongodb.operation.ParallelCollectionScanOperation$1.apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.util.List<com.mongodb.operation.BatchCursor<T>> apply(org.bson.BsonDocument, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.ParallelCollectionScanOperation$1.apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)", "public java.lang.Object apply(java.lang.Object, com.mongodb.binding.ConnectionSource, com.mongodb.connection.Connection)"], ["org.bson.BsonDocument", "com.mongodb.operation.FsyncUnlockOperation$1.call(com.mongodb.connection.Connection)", "public org.bson.BsonDocument call(com.mongodb.connection.Connection)"], ["java.lang.Object", "com.mongodb.operation.FsyncUnlockOperation$1.call(com.mongodb.connection.Connection)", "public java.lang.Object call(com.mongodb.connection.Connection)"], ["org.bson.BsonArray", "com.mongodb.operation.ChangeStreamOperation$4.create(com.mongodb.connection.ConnectionDescription, com.mongodb.session.SessionContext)", "public org.bson.BsonArray create(com.mongodb.connection.ConnectionDescription, com.mongodb.session.SessionContext)"], ["org.bson.BsonDocument", "com.mongodb.operation.CommitTransactionOperation$2.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1$1.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.CreateIndexesOperation$2$1$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.CurrentOpOperation", "com.mongodb.operation.CurrentOpOperation()", "public com.mongodb.operation.CurrentOpOperation()"], ["org.bson.BsonDocument", "com.mongodb.operation.CurrentOpOperation.execute(com.mongodb.binding.ReadBinding)", "public org.bson.BsonDocument execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.operation.CurrentOpOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.operation.MapReduceStatistics", "com.mongodb.operation.MapReduceInlineResultsCursor.getStatistics()", "public com.mongodb.operation.MapReduceStatistics getStatistics()"], ["com.mongodb.WriteConcern", "com.mongodb.operation.TransactionOperation.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["java.lang.Void", "com.mongodb.operation.TransactionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Void execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.TransactionOperation.executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)", "public void executeAsync(com.mongodb.binding.AsyncWriteBinding, com.mongodb.async.SingleResultCallback<java.lang.Void>)"], ["java.lang.Object", "com.mongodb.operation.TransactionOperation.execute(com.mongodb.binding.WriteBinding)", "public java.lang.Object execute(com.mongodb.binding.WriteBinding)"], ["void", "com.mongodb.operation.DropUserOperation$2.call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$4.onResult(java.lang.Void, java.lang.Throwable)", "public void onResult(java.lang.Void, java.lang.Throwable)"], ["void", "com.mongodb.operation.AsyncQueryBatchCursor$4.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["org.bson.BsonDocument", "com.mongodb.operation.FindAndDeleteOperation$1.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$1.onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(java.util.List<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.ListCollectionsOperation$ProjectingAsyncBatchCursor$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["com.mongodb.operation.OrderBy[]", "com.mongodb.operation.OrderBy.values()", "public static com.mongodb.operation.OrderBy[] values()"], ["com.mongodb.operation.OrderBy", "com.mongodb.operation.OrderBy.valueOf(java.lang.String)", "public static com.mongodb.operation.OrderBy valueOf(java.lang.String)"], ["int", "com.mongodb.operation.OrderBy.getIntRepresentation()", "public int getIntRepresentation()"], ["com.mongodb.operation.OrderBy", "com.mongodb.operation.OrderBy.fromInt(int)", "public static com.mongodb.operation.OrderBy fromInt(int)"], ["org.bson.BsonDocument", "com.mongodb.operation.MapReduceWithInlineResultsOperation$3.create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)", "public org.bson.BsonDocument create(com.mongodb.connection.ServerDescription, com.mongodb.connection.ConnectionDescription)"], ["void", "com.mongodb.operation.CountOperation$1.onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)", "public void onResult(com.mongodb.async.AsyncBatchCursor<org.bson.BsonDocument>, java.lang.Throwable)"], ["void", "com.mongodb.operation.CountOperation$1.onResult(java.lang.Object, java.lang.Throwable)", "public void onResult(java.lang.Object, java.lang.Throwable)"], ["void", "com.mongodb.operation.MixedBulkWriteOperation$4.call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)", "public void call(com.mongodb.binding.AsyncConnectionSource, com.mongodb.connection.AsyncConnection, java.lang.Throwable)"], ["com.mongodb.DBObject", "com.mongodb.InsertRequest.getDocument()", "public com.mongodb.DBObject getDocument()"], ["com.mongodb.Mongo", "com.mongodb.Mongo()", "public com.mongodb.Mongo()"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String)", "public com.mongodb.Mongo(java.lang.String)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(java.lang.String, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.lang.String, int)", "public com.mongodb.Mongo(java.lang.String, int)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress)", "public com.mongodb.Mongo(com.mongodb.ServerAddress)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress)", "public com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(com.mongodb.ServerAddress, com.mongodb.ServerAddress, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>)", "public com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoOptions)", "public com.mongodb.Mongo(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoOptions)"], ["com.mongodb.Mongo", "com.mongodb.Mongo(com.mongodb.MongoURI)", "public com.mongodb.Mongo(com.mongodb.MongoURI)"], ["void", "com.mongodb.Mongo.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.WriteConcern", "com.mongodb.Mongo.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.Mongo.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["void", "com.mongodb.Mongo.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.Mongo.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.Mongo.getAllAddress()", "public java.util.List<com.mongodb.ServerAddress> getAllAddress()"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.Mongo.getServerAddressList()", "public java.util.List<com.mongodb.ServerAddress> getServerAddressList()"], ["com.mongodb.ServerAddress", "com.mongodb.Mongo.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["com.mongodb.MongoOptions", "com.mongodb.Mongo.getMongoOptions()", "public com.mongodb.MongoOptions getMongoOptions()"], ["com.mongodb.ReplicaSetStatus", "com.mongodb.Mongo.getReplicaSetStatus()", "public com.mongodb.ReplicaSetStatus getReplicaSetStatus()"], ["java.util.List<java.lang.String>", "com.mongodb.Mongo.getDatabaseNames()", "public java.util.List<java.lang.String> getDatabaseNames()"], ["com.mongodb.DB", "com.mongodb.Mongo.getDB(java.lang.String)", "public com.mongodb.DB getDB(java.lang.String)"], ["java.util.Collection<com.mongodb.DB>", "com.mongodb.Mongo.getUsedDatabases()", "public java.util.Collection<com.mongodb.DB> getUsedDatabases()"], ["void", "com.mongodb.Mongo.dropDatabase(java.lang.String)", "public void dropDatabase(java.lang.String)"], ["void", "com.mongodb.Mongo.close()", "public void close()"], ["void", "com.mongodb.Mongo.slaveOk()", "public void slaveOk()"], ["void", "com.mongodb.Mongo.setOptions(int)", "public void setOptions(int)"], ["void", "com.mongodb.Mongo.resetOptions()", "public void resetOptions()"], ["void", "com.mongodb.Mongo.addOption(int)", "public void addOption(int)"], ["int", "com.mongodb.Mongo.getOptions()", "public int getOptions()"], ["com.mongodb.CommandResult", "com.mongodb.Mongo.fsync(boolean)", "public com.mongodb.CommandResult fsync(boolean)"], ["com.mongodb.CommandResult", "com.mongodb.Mongo.fsyncAndLock()", "public com.mongodb.CommandResult fsyncAndLock()"], ["com.mongodb.DBObject", "com.mongodb.Mongo.unlock()", "public com.mongodb.DBObject unlock()"], ["boolean", "com.mongodb.Mongo.isLocked()", "public boolean isLocked()"], ["java.lang.String", "com.mongodb.Mongo.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.Mongo.getMaxBsonObjectSize()", "public int getMaxBsonObjectSize()"], ["java.lang.String", "com.mongodb.Mongo.getConnectPoint()", "public java.lang.String getConnectPoint()"], ["com.mongodb.DBRefCodec", "com.mongodb.DBRefCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.DBRefCodec(org.bson.codecs.configuration.CodecRegistry)"], ["void", "com.mongodb.DBRefCodec.encode(org.bson.BsonWriter, com.mongodb.DBRef, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBRef, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBRef>", "com.mongodb.DBRefCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.DBRef> getEncoderClass()"], ["com.mongodb.DBRef", "com.mongodb.DBRefCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBRef decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.DBRefCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.DBRefCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.MongoIncompatibleDriverException", "com.mongodb.MongoIncompatibleDriverException(java.lang.String, com.mongodb.connection.ClusterDescription)", "public com.mongodb.MongoIncompatibleDriverException(java.lang.String, com.mongodb.connection.ClusterDescription)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.MongoIncompatibleDriverException.getClusterDescription()", "public com.mongodb.connection.ClusterDescription getClusterDescription()"], ["int", "com.mongodb.TagSet$1.compare(com.mongodb.Tag, com.mongodb.Tag)", "public int compare(com.mongodb.Tag, com.mongodb.Tag)"], ["int", "com.mongodb.TagSet$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions.builder()", "public static com.mongodb.ParallelScanOptions$Builder builder()"], ["int", "com.mongodb.ParallelScanOptions.getNumCursors()", "public int getNumCursors()"], ["int", "com.mongodb.ParallelScanOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.ReadPreference", "com.mongodb.ParallelScanOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.lang.String", "com.mongodb.diagnostics.logging.JULLogger.getName()", "public java.lang.String getName()"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.JULLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "com.mongodb.diagnostics.logging.JULLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["void", "com.mongodb.diagnostics.logging.JULLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)", "public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "com.mongodb.diagnostics.logging.SLF4JLogger.getName()", "public java.lang.String getName()"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "com.mongodb.diagnostics.logging.SLF4JLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "com.mongodb.diagnostics.logging.SLF4JLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["com.mongodb.diagnostics.logging.Logger", "com.mongodb.diagnostics.logging.Loggers.getLogger(java.lang.String)", "public static com.mongodb.diagnostics.logging.Logger getLogger(java.lang.String)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$PrimaryPreferredReadPreference.getName()", "public java.lang.String getName()"], ["com.mongodb.ReflectionDBObject", "com.mongodb.ReflectionDBObject()", "public com.mongodb.ReflectionDBObject()"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["java.util.Set<java.lang.String>", "com.mongodb.ReflectionDBObject.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.ReflectionDBObject.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "com.mongodb.ReflectionDBObject.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["void", "com.mongodb.ReflectionDBObject.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["void", "com.mongodb.ReflectionDBObject.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.get_id()", "public java.lang.Object get_id()"], ["void", "com.mongodb.ReflectionDBObject.set_id(java.lang.Object)", "public void set_id(java.lang.Object)"], ["boolean", "com.mongodb.ReflectionDBObject.isPartialObject()", "public boolean isPartialObject()"], ["java.util.Map", "com.mongodb.ReflectionDBObject.toMap()", "public java.util.Map toMap()"], ["void", "com.mongodb.ReflectionDBObject.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.Object", "com.mongodb.ReflectionDBObject.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["com.mongodb.ReflectionDBObject$JavaWrapper", "com.mongodb.ReflectionDBObject.getWrapperIfReflectionObject(java.lang.Class)", "public static com.mongodb.ReflectionDBObject$JavaWrapper getWrapperIfReflectionObject(java.lang.Class)"], ["com.mongodb.ReflectionDBObject$JavaWrapper", "com.mongodb.ReflectionDBObject.getWrapper(java.lang.Class)", "public static com.mongodb.ReflectionDBObject$JavaWrapper getWrapper(java.lang.Class)"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings.builder()", "public static com.mongodb.AutoEncryptionSettings$Builder builder()"], ["com.mongodb.MongoClientSettings", "com.mongodb.AutoEncryptionSettings.getKeyVaultMongoClientSettings()", "public com.mongodb.MongoClientSettings getKeyVaultMongoClientSettings()"], ["java.lang.String", "com.mongodb.AutoEncryptionSettings.getKeyVaultNamespace()", "public java.lang.String getKeyVaultNamespace()"], ["java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>", "com.mongodb.AutoEncryptionSettings.getKmsProviders()", "public java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> getKmsProviders()"], ["java.util.Map<java.lang.String, org.bson.BsonDocument>", "com.mongodb.AutoEncryptionSettings.getSchemaMap()", "public java.util.Map<java.lang.String, org.bson.BsonDocument> getSchemaMap()"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.mongodb.AutoEncryptionSettings.getExtraOptions()", "public java.util.Map<java.lang.String, java.lang.Object> getExtraOptions()"], ["boolean", "com.mongodb.AutoEncryptionSettings.isBypassAutoEncryption()", "public boolean isBypassAutoEncryption()"], ["boolean", "com.mongodb.WriteConcernResult$1.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.WriteConcernResult$1.getCount()", "public int getCount()"], ["boolean", "com.mongodb.WriteConcernResult$1.isUpdateOfExisting()", "public boolean isUpdateOfExisting()"], ["org.bson.BsonValue", "com.mongodb.WriteConcernResult$1.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.WriteConcernResult$1.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernResult$1.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernResult$1.toString()", "public java.lang.String toString()"], ["com.mongodb.DBEncoder", "com.mongodb.DefaultDBEncoder$1.create()", "public com.mongodb.DBEncoder create()"], ["void", "com.mongodb.MongoNamespace.checkDatabaseNameValidity(java.lang.String)", "public static void checkDatabaseNameValidity(java.lang.String)"], ["void", "com.mongodb.MongoNamespace.checkCollectionNameValidity(java.lang.String)", "public static void checkCollectionNameValidity(java.lang.String)"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoNamespace(java.lang.String)", "public com.mongodb.MongoNamespace(java.lang.String)"], ["com.mongodb.MongoNamespace", "com.mongodb.MongoNamespace(java.lang.String, java.lang.String)", "public com.mongodb.MongoNamespace(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.MongoNamespace.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["java.lang.String", "com.mongodb.MongoNamespace.getCollectionName()", "public java.lang.String getCollectionName()"], ["java.lang.String", "com.mongodb.MongoNamespace.getFullName()", "public java.lang.String getFullName()"], ["boolean", "com.mongodb.MongoNamespace.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "com.mongodb.MongoNamespace.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.MongoNamespace.hashCode()", "public int hashCode()"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.parse(java.lang.String)", "public static com.mongodb.BasicDBObject parse(java.lang.String)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.parse(java.lang.String, org.bson.codecs.Decoder<com.mongodb.BasicDBObject>)", "public static com.mongodb.BasicDBObject parse(java.lang.String, org.bson.codecs.Decoder<com.mongodb.BasicDBObject>)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject()", "public com.mongodb.BasicDBObject()"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(int)", "public com.mongodb.BasicDBObject(int)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObject(java.lang.String, java.lang.Object)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject(java.util.Map)", "public com.mongodb.BasicDBObject(java.util.Map)"], ["com.mongodb.BasicDBObject", "com.mongodb.BasicDBObject.append(java.lang.String, java.lang.Object)", "public com.mongodb.BasicDBObject append(java.lang.String, java.lang.Object)"], ["boolean", "com.mongodb.BasicDBObject.isPartialObject()", "public boolean isPartialObject()"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson(org.bson.codecs.Encoder<com.mongodb.BasicDBObject>)", "public java.lang.String toJson(org.bson.codecs.Encoder<com.mongodb.BasicDBObject>)"], ["java.lang.String", "com.mongodb.BasicDBObject.toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<com.mongodb.BasicDBObject>)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<com.mongodb.BasicDBObject>)"], ["boolean", "com.mongodb.BasicDBObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BasicDBObject.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.BasicDBObject.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.BasicDBObject.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.Object", "com.mongodb.BasicDBObject.copy()", "public java.lang.Object copy()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.BasicDBObject.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BasicBSONObject", "com.mongodb.BasicDBObject.append(java.lang.String, java.lang.Object)", "public org.bson.BasicBSONObject append(java.lang.String, java.lang.Object)"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions()", "public com.mongodb.MongoOptions()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions(com.mongodb.MongoClientOptions)", "public com.mongodb.MongoOptions(com.mongodb.MongoClientOptions)"], ["void", "com.mongodb.MongoOptions.reset()", "public void reset()"], ["com.mongodb.MongoOptions", "com.mongodb.MongoOptions.copy()", "public com.mongodb.MongoOptions copy()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["void", "com.mongodb.MongoOptions.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["synchronized", "com.mongodb.MongoOptions.javax.net.SocketFactory getSocketFactory()", "public synchronized javax.net.SocketFactory getSocketFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketFactory(javax.net.SocketFactory)", "public synchronized void setSocketFactory(javax.net.SocketFactory)"], ["synchronized", "com.mongodb.MongoOptions.java.lang.String getDescription()", "public synchronized java.lang.String getDescription()"], ["synchronized", "com.mongodb.MongoOptions.void setDescription(java.lang.String)", "public synchronized void setDescription(java.lang.String)"], ["synchronized", "com.mongodb.MongoOptions.int getConnectionsPerHost()", "public synchronized int getConnectionsPerHost()"], ["synchronized", "com.mongodb.MongoOptions.void setConnectionsPerHost(int)", "public synchronized void setConnectionsPerHost(int)"], ["synchronized", "com.mongodb.MongoOptions.int getThreadsAllowedToBlockForConnectionMultiplier()", "public synchronized int getThreadsAllowedToBlockForConnectionMultiplier()"], ["synchronized", "com.mongodb.MongoOptions.void setThreadsAllowedToBlockForConnectionMultiplier(int)", "public synchronized void setThreadsAllowedToBlockForConnectionMultiplier(int)"], ["synchronized", "com.mongodb.MongoOptions.int getMaxWaitTime()", "public synchronized int getMaxWaitTime()"], ["synchronized", "com.mongodb.MongoOptions.void setMaxWaitTime(int)", "public synchronized void setMaxWaitTime(int)"], ["synchronized", "com.mongodb.MongoOptions.int getConnectTimeout()", "public synchronized int getConnectTimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setConnectTimeout(int)", "public synchronized void setConnectTimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.int getSocketTimeout()", "public synchronized int getSocketTimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketTimeout(int)", "public synchronized void setSocketTimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.boolean isSocketKeepAlive()", "public synchronized boolean isSocketKeepAlive()"], ["synchronized", "com.mongodb.MongoOptions.void setSocketKeepAlive(boolean)", "public synchronized void setSocketKeepAlive(boolean)"], ["synchronized", "com.mongodb.MongoOptions.com.mongodb.DBDecoderFactory getDbDecoderFactory()", "public synchronized com.mongodb.DBDecoderFactory getDbDecoderFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setDbDecoderFactory(com.mongodb.DBDecoderFactory)", "public synchronized void setDbDecoderFactory(com.mongodb.DBDecoderFactory)"], ["synchronized", "com.mongodb.MongoOptions.com.mongodb.DBEncoderFactory getDbEncoderFactory()", "public synchronized com.mongodb.DBEncoderFactory getDbEncoderFactory()"], ["synchronized", "com.mongodb.MongoOptions.void setDbEncoderFactory(com.mongodb.DBEncoderFactory)", "public synchronized void setDbEncoderFactory(com.mongodb.DBEncoderFactory)"], ["synchronized", "com.mongodb.MongoOptions.boolean isSafe()", "public synchronized boolean isSafe()"], ["synchronized", "com.mongodb.MongoOptions.void setSafe(boolean)", "public synchronized void setSafe(boolean)"], ["synchronized", "com.mongodb.MongoOptions.int getW()", "public synchronized int getW()"], ["synchronized", "com.mongodb.MongoOptions.void setW(int)", "public synchronized void setW(int)"], ["synchronized", "com.mongodb.MongoOptions.int getWtimeout()", "public synchronized int getWtimeout()"], ["synchronized", "com.mongodb.MongoOptions.void setWtimeout(int)", "public synchronized void setWtimeout(int)"], ["synchronized", "com.mongodb.MongoOptions.boolean isFsync()", "public synchronized boolean isFsync()"], ["synchronized", "com.mongodb.MongoOptions.void setFsync(boolean)", "public synchronized void setFsync(boolean)"], ["synchronized", "com.mongodb.MongoOptions.boolean isJ()", "public synchronized boolean isJ()"], ["synchronized", "com.mongodb.MongoOptions.void setJ(boolean)", "public synchronized void setJ(boolean)"], ["com.mongodb.ReadPreference", "com.mongodb.MongoOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["void", "com.mongodb.MongoOptions.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["boolean", "com.mongodb.MongoOptions.isCursorFinalizerEnabled()", "public boolean isCursorFinalizerEnabled()"], ["void", "com.mongodb.MongoOptions.setCursorFinalizerEnabled(boolean)", "public void setCursorFinalizerEnabled(boolean)"], ["boolean", "com.mongodb.MongoOptions.isAlwaysUseMBeans()", "public boolean isAlwaysUseMBeans()"], ["void", "com.mongodb.MongoOptions.setAlwaysUseMBeans(boolean)", "public void setAlwaysUseMBeans(boolean)"], ["java.lang.String", "com.mongodb.MongoOptions.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["boolean", "com.mongodb.MongoOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.ReadConcern", "com.mongodb.ReadConcern(com.mongodb.ReadConcernLevel)", "public com.mongodb.ReadConcern(com.mongodb.ReadConcernLevel)"], ["com.mongodb.ReadConcernLevel", "com.mongodb.ReadConcern.getLevel()", "public com.mongodb.ReadConcernLevel getLevel()"], ["boolean", "com.mongodb.ReadConcern.isServerDefault()", "public boolean isServerDefault()"], ["org.bson.BsonDocument", "com.mongodb.ReadConcern.asDocument()", "public org.bson.BsonDocument asDocument()"], ["boolean", "com.mongodb.ReadConcern.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ReadConcern.hashCode()", "public int hashCode()"], ["com.mongodb.MongoCommandException", "com.mongodb.MongoCommandException(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public com.mongodb.MongoCommandException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["int", "com.mongodb.MongoCommandException.getErrorCode()", "public int getErrorCode()"], ["java.lang.String", "com.mongodb.MongoCommandException.getErrorCodeName()", "public java.lang.String getErrorCodeName()"], ["java.lang.String", "com.mongodb.MongoCommandException.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["org.bson.BsonDocument", "com.mongodb.MongoCommandException.getResponse()", "public org.bson.BsonDocument getResponse()"], ["com.mongodb.AuthenticationMechanism[]", "com.mongodb.AuthenticationMechanism.values()", "public static com.mongodb.AuthenticationMechanism[] values()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.AuthenticationMechanism.valueOf(java.lang.String)", "public static com.mongodb.AuthenticationMechanism valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.AuthenticationMechanism.getMechanismName()", "public java.lang.String getMechanismName()"], ["java.lang.String", "com.mongodb.AuthenticationMechanism.toString()", "public java.lang.String toString()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.AuthenticationMechanism.fromMechanismName(java.lang.String)", "public static com.mongodb.AuthenticationMechanism fromMechanismName(java.lang.String)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.batchSize(java.lang.Integer)", "public com.mongodb.AggregationOptions$Builder batchSize(java.lang.Integer)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.allowDiskUse(java.lang.Boolean)", "public com.mongodb.AggregationOptions$Builder allowDiskUse(java.lang.Boolean)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.outputMode(com.mongodb.AggregationOptions$OutputMode)", "public com.mongodb.AggregationOptions$Builder outputMode(com.mongodb.AggregationOptions$OutputMode)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.AggregationOptions$Builder maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.AggregationOptions$Builder bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.AggregationOptions$Builder", "com.mongodb.AggregationOptions$Builder.collation(com.mongodb.client.model.Collation)", "public com.mongodb.AggregationOptions$Builder collation(com.mongodb.client.model.Collation)"], ["com.mongodb.AggregationOptions", "com.mongodb.AggregationOptions$Builder.build()", "public com.mongodb.AggregationOptions build()"], ["com.mongodb.ClientSessionOptions$Builder", "com.mongodb.ClientSessionOptions$Builder.causallyConsistent(boolean)", "public com.mongodb.ClientSessionOptions$Builder causallyConsistent(boolean)"], ["com.mongodb.ClientSessionOptions$Builder", "com.mongodb.ClientSessionOptions$Builder.defaultTransactionOptions(com.mongodb.TransactionOptions)", "public com.mongodb.ClientSessionOptions$Builder defaultTransactionOptions(com.mongodb.TransactionOptions)"], ["com.mongodb.ClientSessionOptions", "com.mongodb.ClientSessionOptions$Builder.build()", "public com.mongodb.ClientSessionOptions build()"], ["com.mongodb.MongoConfigurationException", "com.mongodb.MongoConfigurationException(java.lang.String)", "public com.mongodb.MongoConfigurationException(java.lang.String)"], ["com.mongodb.MongoConfigurationException", "com.mongodb.MongoConfigurationException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoConfigurationException(java.lang.String, java.lang.Throwable)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.ReadPreference.choose(com.mongodb.connection.ClusterDescription)", "public final java.util.List<com.mongodb.connection.ServerDescription> choose(com.mongodb.connection.ClusterDescription)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primary()", "public static com.mongodb.ReadPreference primary()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primaryPreferred()", "public static com.mongodb.ReadPreference primaryPreferred()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondary()", "public static com.mongodb.ReadPreference secondary()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondaryPreferred()", "public static com.mongodb.ReadPreference secondaryPreferred()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.nearest()", "public static com.mongodb.ReadPreference nearest()"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.primaryPreferred(long, java.util.concurrent.TimeUnit)", "public static com.mongodb.ReadPreference primaryPreferred(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondary(long, java.util.concurrent.TimeUnit)", "public static com.mongodb.ReadPreference secondary(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(long, java.util.concurrent.TimeUnit)", "public static com.mongodb.ReadPreference secondaryPreferred(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.nearest(long, java.util.concurrent.TimeUnit)", "public static com.mongodb.ReadPreference nearest(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference primaryPreferred(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference secondary(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference secondaryPreferred(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(com.mongodb.TagSet)", "public static com.mongodb.TaggableReadPreference nearest(com.mongodb.TagSet)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference primaryPreferred(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference secondary(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference secondaryPreferred(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference nearest(com.mongodb.TagSet, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference primaryPreferred(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference secondary(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference secondaryPreferred(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference nearest(java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.primaryPreferred(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference primaryPreferred(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondary(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference secondary(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.secondaryPreferred(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference secondaryPreferred(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.nearest(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference nearest(java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String)", "public static com.mongodb.ReadPreference valueOf(java.lang.String)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>)", "public static com.mongodb.TaggableReadPreference valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>)"], ["com.mongodb.TaggableReadPreference", "com.mongodb.ReadPreference.valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)", "public static com.mongodb.TaggableReadPreference valueOf(java.lang.String, java.util.List<com.mongodb.TagSet>, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.MongoDriverInformation$Builder", "com.mongodb.MongoDriverInformation.builder()", "public static com.mongodb.MongoDriverInformation$Builder builder()"], ["com.mongodb.MongoDriverInformation$Builder", "com.mongodb.MongoDriverInformation.builder(com.mongodb.MongoDriverInformation)", "public static com.mongodb.MongoDriverInformation$Builder builder(com.mongodb.MongoDriverInformation)"], ["java.util.List<java.lang.String>", "com.mongodb.MongoDriverInformation.getDriverNames()", "public java.util.List<java.lang.String> getDriverNames()"], ["java.util.List<java.lang.String>", "com.mongodb.MongoDriverInformation.getDriverVersions()", "public java.util.List<java.lang.String> getDriverVersions()"], ["java.util.List<java.lang.String>", "com.mongodb.MongoDriverInformation.getDriverPlatforms()", "public java.util.List<java.lang.String> getDriverPlatforms()"], ["com.mongodb.CursorType[]", "com.mongodb.CursorType.values()", "public static com.mongodb.CursorType[] values()"], ["com.mongodb.CursorType", "com.mongodb.CursorType.valueOf(java.lang.String)", "public static com.mongodb.CursorType valueOf(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.CompoundDBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBObject decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.CompoundDBObjectCodec.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.CompoundDBObjectCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["org.bson.codecs.Encoder<com.mongodb.DBObject>", "com.mongodb.CompoundDBObjectCodec.getEncoder()", "public org.bson.codecs.Encoder<com.mongodb.DBObject> getEncoder()"], ["org.bson.codecs.Decoder<com.mongodb.DBObject>", "com.mongodb.CompoundDBObjectCodec.getDecoder()", "public org.bson.codecs.Decoder<com.mongodb.DBObject> getDecoder()"], ["void", "com.mongodb.CompoundDBObjectCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.CompoundDBObjectCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions.builder()", "public static com.mongodb.MongoClientOptions$Builder builder()"], ["com.mongodb.MongoClientOptions$Builder", "com.mongodb.MongoClientOptions.builder(com.mongodb.MongoClientOptions)", "public static com.mongodb.MongoClientOptions$Builder builder(com.mongodb.MongoClientOptions)"], ["java.lang.String", "com.mongodb.MongoClientOptions.getDescription()", "public java.lang.String getDescription()"], ["java.lang.String", "com.mongodb.MongoClientOptions.getApplicationName()", "public java.lang.String getApplicationName()"], ["java.util.List<com.mongodb.MongoCompressor>", "com.mongodb.MongoClientOptions.getCompressorList()", "public java.util.List<com.mongodb.MongoCompressor> getCompressorList()"], ["int", "com.mongodb.MongoClientOptions.getConnectionsPerHost()", "public int getConnectionsPerHost()"], ["int", "com.mongodb.MongoClientOptions.getMinConnectionsPerHost()", "public int getMinConnectionsPerHost()"], ["int", "com.mongodb.MongoClientOptions.getThreadsAllowedToBlockForConnectionMultiplier()", "public int getThreadsAllowedToBlockForConnectionMultiplier()"], ["int", "com.mongodb.MongoClientOptions.getServerSelectionTimeout()", "public int getServerSelectionTimeout()"], ["int", "com.mongodb.MongoClientOptions.getMaxWaitTime()", "public int getMaxWaitTime()"], ["int", "com.mongodb.MongoClientOptions.getMaxConnectionIdleTime()", "public int getMaxConnectionIdleTime()"], ["int", "com.mongodb.MongoClientOptions.getMaxConnectionLifeTime()", "public int getMaxConnectionLifeTime()"], ["int", "com.mongodb.MongoClientOptions.getConnectTimeout()", "public int getConnectTimeout()"], ["int", "com.mongodb.MongoClientOptions.getSocketTimeout()", "public int getSocketTimeout()"], ["boolean", "com.mongodb.MongoClientOptions.isSocketKeepAlive()", "public boolean isSocketKeepAlive()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatFrequency()", "public int getHeartbeatFrequency()"], ["int", "com.mongodb.MongoClientOptions.getMinHeartbeatFrequency()", "public int getMinHeartbeatFrequency()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatConnectTimeout()", "public int getHeartbeatConnectTimeout()"], ["int", "com.mongodb.MongoClientOptions.getHeartbeatSocketTimeout()", "public int getHeartbeatSocketTimeout()"], ["int", "com.mongodb.MongoClientOptions.getLocalThreshold()", "public int getLocalThreshold()"], ["java.lang.String", "com.mongodb.MongoClientOptions.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["boolean", "com.mongodb.MongoClientOptions.isSslEnabled()", "public boolean isSslEnabled()"], ["boolean", "com.mongodb.MongoClientOptions.isSslInvalidHostNameAllowed()", "public boolean isSslInvalidHostNameAllowed()"], ["javax.net.ssl.SSLContext", "com.mongodb.MongoClientOptions.getSslContext()", "public javax.net.ssl.SSLContext getSslContext()"], ["com.mongodb.ReadPreference", "com.mongodb.MongoClientOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.MongoClientOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.MongoClientOptions.getRetryWrites()", "public boolean getRetryWrites()"], ["boolean", "com.mongodb.MongoClientOptions.getRetryReads()", "public boolean getRetryReads()"], ["com.mongodb.ReadConcern", "com.mongodb.MongoClientOptions.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClientOptions.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.selector.ServerSelector", "com.mongodb.MongoClientOptions.getServerSelector()", "public com.mongodb.selector.ServerSelector getServerSelector()"], ["java.util.List<com.mongodb.event.ClusterListener>", "com.mongodb.MongoClientOptions.getClusterListeners()", "public java.util.List<com.mongodb.event.ClusterListener> getClusterListeners()"], ["java.util.List<com.mongodb.event.CommandListener>", "com.mongodb.MongoClientOptions.getCommandListeners()", "public java.util.List<com.mongodb.event.CommandListener> getCommandListeners()"], ["java.util.List<com.mongodb.event.ConnectionPoolListener>", "com.mongodb.MongoClientOptions.getConnectionPoolListeners()", "public java.util.List<com.mongodb.event.ConnectionPoolListener> getConnectionPoolListeners()"], ["java.util.List<com.mongodb.event.ServerListener>", "com.mongodb.MongoClientOptions.getServerListeners()", "public java.util.List<com.mongodb.event.ServerListener> getServerListeners()"], ["java.util.List<com.mongodb.event.ServerMonitorListener>", "com.mongodb.MongoClientOptions.getServerMonitorListeners()", "public java.util.List<com.mongodb.event.ServerMonitorListener> getServerMonitorListeners()"], ["com.mongodb.DBDecoderFactory", "com.mongodb.MongoClientOptions.getDbDecoderFactory()", "public com.mongodb.DBDecoderFactory getDbDecoderFactory()"], ["com.mongodb.DBEncoderFactory", "com.mongodb.MongoClientOptions.getDbEncoderFactory()", "public com.mongodb.DBEncoderFactory getDbEncoderFactory()"], ["boolean", "com.mongodb.MongoClientOptions.isAlwaysUseMBeans()", "public boolean isAlwaysUseMBeans()"], ["javax.net.SocketFactory", "com.mongodb.MongoClientOptions.getSocketFactory()", "public javax.net.SocketFactory getSocketFactory()"], ["boolean", "com.mongodb.MongoClientOptions.isCursorFinalizerEnabled()", "public boolean isCursorFinalizerEnabled()"], ["com.mongodb.AutoEncryptionSettings", "com.mongodb.MongoClientOptions.getAutoEncryptionSettings()", "public com.mongodb.AutoEncryptionSettings getAutoEncryptionSettings()"], ["boolean", "com.mongodb.MongoClientOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoClientOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoClientOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoTimeoutException", "com.mongodb.MongoTimeoutException(java.lang.String)", "public com.mongodb.MongoTimeoutException(java.lang.String)"], ["java.lang.String", "com.mongodb.TaggableReadPreference$SecondaryPreferredReadPreference.getName()", "public java.lang.String getName()"], ["com.mongodb.util.Util", "com.mongodb.util.Util()", "public com.mongodb.util.Util()"], ["java.lang.String", "com.mongodb.util.Util.toHex(byte[])", "public static java.lang.String toHex(byte[])"], ["java.lang.String", "com.mongodb.util.Util.hexMD5(byte[])", "public static java.lang.String hexMD5(byte[])"], ["java.lang.String", "com.mongodb.util.Util.hexMD5(java.nio.ByteBuffer, int, int)", "public static java.lang.String hexMD5(java.nio.ByteBuffer, int, int)"], ["void", "com.mongodb.util.JSONSerializers$LegacyDateSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MinKeySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$LegacyBinarySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DateSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$UndefinedSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.Object", "com.mongodb.util.JSONParser.parse()", "public java.lang.Object parse()"], ["java.lang.Object", "com.mongodb.util.JSONParser.parseObject()", "public java.lang.Object parseObject()"], ["void", "com.mongodb.util.JSONParser.read(char)", "public void read(char)"], ["char", "com.mongodb.util.JSONParser.read()", "public char read()"], ["void", "com.mongodb.util.JSONParser.readHex()", "public void readHex()"], ["boolean", "com.mongodb.util.JSONParser.check(char)", "public boolean check(char)"], ["void", "com.mongodb.util.JSONParser.skipWS()", "public void skipWS()"], ["char", "com.mongodb.util.JSONParser.get()", "public char get()"], ["java.lang.String", "com.mongodb.util.JSONParser.parseString(boolean)", "public java.lang.String parseString(boolean)"], ["java.lang.Number", "com.mongodb.util.JSONParser.parseNumber()", "public java.lang.Number parseNumber()"], ["void", "com.mongodb.util.JSONParser.parseFraction()", "public void parseFraction()"], ["void", "com.mongodb.util.JSONParser.parseExponent()", "public void parseExponent()"], ["java.lang.Object", "com.mongodb.util.JSONParser.parseArray()", "public java.lang.Object parseArray()"], ["void", "com.mongodb.util.ClassMapBasedObjectSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$BinarySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$PatternSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$CodeWScopeSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$DBObjectSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.String", "com.mongodb.util.AbstractObjectSerializer.serialize(java.lang.Object)", "public java.lang.String serialize(java.lang.Object)"], ["void", "com.mongodb.util.JSONSerializers$StringSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ObjectArraySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ObjectIdSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$IterableSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$CodeSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.JSON", "com.mongodb.util.JSON()", "public com.mongodb.util.JSON()"], ["java.lang.String", "com.mongodb.util.JSON.serialize(java.lang.Object)", "public static java.lang.String serialize(java.lang.Object)"], ["void", "com.mongodb.util.JSON.serialize(java.lang.Object, java.lang.StringBuilder)", "public static void serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.Object", "com.mongodb.util.JSON.parse(java.lang.String)", "public static java.lang.Object parse(java.lang.String)"], ["java.lang.Object", "com.mongodb.util.JSON.parse(java.lang.String, org.bson.BSONCallback)", "public static java.lang.Object parse(java.lang.String, org.bson.BSONCallback)"], ["void", "com.mongodb.util.JSONSerializers$ToStringSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$ByteArraySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["java.lang.String", "com.mongodb.util.JSONParseException.getMessage()", "public java.lang.String getMessage()"], ["com.mongodb.util.JSONParseException", "com.mongodb.util.JSONParseException(java.lang.String, int)", "public com.mongodb.util.JSONParseException(java.lang.String, int)"], ["com.mongodb.util.JSONParseException", "com.mongodb.util.JSONParseException(java.lang.String, int, java.lang.Throwable)", "public com.mongodb.util.JSONParseException(java.lang.String, int, java.lang.Throwable)"], ["void", "com.mongodb.util.JSONSerializers$LegacyBSONTimestampSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$Decimal128Serializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$UuidSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.JSONCallback", "com.mongodb.util.JSONCallback()", "public com.mongodb.util.JSONCallback()"], ["org.bson.BSONObject", "com.mongodb.util.JSONCallback.create()", "public org.bson.BSONObject create()"], ["void", "com.mongodb.util.JSONCallback.arrayStart(java.lang.String)", "public void arrayStart(java.lang.String)"], ["void", "com.mongodb.util.JSONCallback.objectStart(java.lang.String)", "public void objectStart(java.lang.String)"], ["java.lang.Object", "com.mongodb.util.JSONCallback.objectDone()", "public java.lang.Object objectDone()"], ["void", "com.mongodb.util.JSONSerializers$MapSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$SymbolSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$MaxKeySerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.util.ObjectSerializer", "com.mongodb.util.JSONSerializers.getLegacy()", "public static com.mongodb.util.ObjectSerializer getLegacy()"], ["com.mongodb.util.ObjectSerializer", "com.mongodb.util.JSONSerializers.getStrict()", "public static com.mongodb.util.ObjectSerializer getStrict()"], ["void", "com.mongodb.util.JSONSerializers$DBRefBaseSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["void", "com.mongodb.util.JSONSerializers$BSONTimestampSerializer.serialize(java.lang.Object, java.lang.StringBuilder)", "public void serialize(java.lang.Object, java.lang.StringBuilder)"], ["com.mongodb.ClientEncryptionSettings$Builder", "com.mongodb.ClientEncryptionSettings.builder()", "public static com.mongodb.ClientEncryptionSettings$Builder builder()"], ["com.mongodb.MongoClientSettings", "com.mongodb.ClientEncryptionSettings.getKeyVaultMongoClientSettings()", "public com.mongodb.MongoClientSettings getKeyVaultMongoClientSettings()"], ["java.lang.String", "com.mongodb.ClientEncryptionSettings.getKeyVaultNamespace()", "public java.lang.String getKeyVaultNamespace()"], ["java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>", "com.mongodb.ClientEncryptionSettings.getKmsProviders()", "public java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> getKmsProviders()"], ["com.mongodb.MongoWriteConcernException", "com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)", "public com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)"], ["com.mongodb.MongoWriteConcernException", "com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.WriteConcernResult, com.mongodb.ServerAddress)", "public com.mongodb.MongoWriteConcernException(com.mongodb.bulk.WriteConcernError, com.mongodb.WriteConcernResult, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.MongoWriteConcernException.getWriteConcernError()", "public com.mongodb.bulk.WriteConcernError getWriteConcernError()"], ["com.mongodb.WriteConcernResult", "com.mongodb.MongoWriteConcernException.getWriteResult()", "public com.mongodb.WriteConcernResult getWriteResult()"], ["java.lang.Iterable<com.mongodb.DBObject>", "com.mongodb.MapReduceOutput.results()", "public java.lang.Iterable<com.mongodb.DBObject> results()"], ["void", "com.mongodb.MapReduceOutput.drop()", "public void drop()"], ["com.mongodb.DBCollection", "com.mongodb.MapReduceOutput.getOutputCollection()", "public com.mongodb.DBCollection getOutputCollection()"], ["com.mongodb.DBObject", "com.mongodb.MapReduceOutput.getCommand()", "public com.mongodb.DBObject getCommand()"], ["java.lang.String", "com.mongodb.MapReduceOutput.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.MapReduceOutput.getCollectionName()", "public final java.lang.String getCollectionName()"], ["java.lang.String", "com.mongodb.MapReduceOutput.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["int", "com.mongodb.MapReduceOutput.getDuration()", "public int getDuration()"], ["int", "com.mongodb.MapReduceOutput.getInputCount()", "public int getInputCount()"], ["int", "com.mongodb.MapReduceOutput.getOutputCount()", "public int getOutputCount()"], ["int", "com.mongodb.MapReduceOutput.getEmitCount()", "public int getEmitCount()"], ["com.mongodb.DBObject", "com.mongodb.DBCollectionObjectFactory.getInstance()", "public com.mongodb.DBObject getInstance()"], ["com.mongodb.DBObject", "com.mongodb.DBCollectionObjectFactory.getInstance(java.util.List<java.lang.String>)", "public com.mongodb.DBObject getInstance(java.util.List<java.lang.String>)"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory.update(java.lang.Class<? extends com.mongodb.DBObject>)", "public com.mongodb.DBCollectionObjectFactory update(java.lang.Class<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBCollectionObjectFactory", "com.mongodb.DBCollectionObjectFactory.update(java.lang.Class<? extends com.mongodb.DBObject>, java.util.List<java.lang.String>)", "public com.mongodb.DBCollectionObjectFactory update(java.lang.Class<? extends com.mongodb.DBObject>, java.util.List<java.lang.String>)"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern$Majority()", "public com.mongodb.WriteConcern$Majority()"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern$Majority(int, boolean, boolean)", "public com.mongodb.WriteConcern$Majority(int, boolean, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern()", "public com.mongodb.WriteConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int)", "public com.mongodb.WriteConcern(int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(java.lang.String)", "public com.mongodb.WriteConcern(java.lang.String)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int)", "public com.mongodb.WriteConcern(int, int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(boolean)", "public com.mongodb.WriteConcern(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int, boolean)", "public com.mongodb.WriteConcern(int, int, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(int, int, boolean, boolean)", "public com.mongodb.WriteConcern(int, int, boolean, boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern(java.lang.String, int, boolean, boolean)", "public com.mongodb.WriteConcern(java.lang.String, int, boolean, boolean)"], ["java.lang.Object", "com.mongodb.WriteConcern.getWObject()", "public java.lang.Object getWObject()"], ["int", "com.mongodb.WriteConcern.getW()", "public int getW()"], ["java.lang.String", "com.mongodb.WriteConcern.getWString()", "public java.lang.String getWString()"], ["java.lang.Integer", "com.mongodb.WriteConcern.getWTimeout(java.util.concurrent.TimeUnit)", "public java.lang.Integer getWTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.WriteConcern.getWtimeout()", "public int getWtimeout()"], ["java.lang.Boolean", "com.mongodb.WriteConcern.getJournal()", "public java.lang.Boolean getJournal()"], ["boolean", "com.mongodb.WriteConcern.getJ()", "public boolean getJ()"], ["boolean", "com.mongodb.WriteConcern.getFsync()", "public boolean getFsync()"], ["boolean", "com.mongodb.WriteConcern.fsync()", "public boolean fsync()"], ["boolean", "com.mongodb.WriteConcern.callGetLastError()", "public boolean callGetLastError()"], ["boolean", "com.mongodb.WriteConcern.isServerDefault()", "public boolean isServerDefault()"], ["org.bson.BsonDocument", "com.mongodb.WriteConcern.asDocument()", "public org.bson.BsonDocument asDocument()"], ["boolean", "com.mongodb.WriteConcern.isAcknowledged()", "public boolean isAcknowledged()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.valueOf(java.lang.String)", "public static com.mongodb.WriteConcern valueOf(java.lang.String)"], ["boolean", "com.mongodb.WriteConcern.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcern.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcern.toString()", "public java.lang.String toString()"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withW(int)", "public com.mongodb.WriteConcern withW(int)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withW(java.lang.String)", "public com.mongodb.WriteConcern withW(java.lang.String)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withFsync(boolean)", "public com.mongodb.WriteConcern withFsync(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withJournal(java.lang.Boolean)", "public com.mongodb.WriteConcern withJournal(java.lang.Boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withJ(boolean)", "public com.mongodb.WriteConcern withJ(boolean)"], ["com.mongodb.WriteConcern", "com.mongodb.WriteConcern.withWTimeout(long, java.util.concurrent.TimeUnit)", "public com.mongodb.WriteConcern withWTimeout(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.WriteConcern$Majority", "com.mongodb.WriteConcern.majorityWriteConcern(int, boolean, boolean)", "public static com.mongodb.WriteConcern$Majority majorityWriteConcern(int, boolean, boolean)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder()", "public com.mongodb.QueryBuilder()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.start()", "public static com.mongodb.QueryBuilder start()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.start(java.lang.String)", "public static com.mongodb.QueryBuilder start(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.put(java.lang.String)", "public com.mongodb.QueryBuilder put(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.and(java.lang.String)", "public com.mongodb.QueryBuilder and(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.greaterThan(java.lang.Object)", "public com.mongodb.QueryBuilder greaterThan(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.greaterThanEquals(java.lang.Object)", "public com.mongodb.QueryBuilder greaterThanEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.lessThan(java.lang.Object)", "public com.mongodb.QueryBuilder lessThan(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.lessThanEquals(java.lang.Object)", "public com.mongodb.QueryBuilder lessThanEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.is(java.lang.Object)", "public com.mongodb.QueryBuilder is(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.notEquals(java.lang.Object)", "public com.mongodb.QueryBuilder notEquals(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.in(java.lang.Object)", "public com.mongodb.QueryBuilder in(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.notIn(java.lang.Object)", "public com.mongodb.QueryBuilder notIn(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.mod(java.lang.Object)", "public com.mongodb.QueryBuilder mod(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.all(java.lang.Object)", "public com.mongodb.QueryBuilder all(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.size(java.lang.Object)", "public com.mongodb.QueryBuilder size(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.exists(java.lang.Object)", "public com.mongodb.QueryBuilder exists(java.lang.Object)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.regex(java.util.regex.Pattern)", "public com.mongodb.QueryBuilder regex(java.util.regex.Pattern)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.elemMatch(com.mongodb.DBObject)", "public com.mongodb.QueryBuilder elemMatch(com.mongodb.DBObject)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinCenter(double, double, double)", "public com.mongodb.QueryBuilder withinCenter(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.near(double, double)", "public com.mongodb.QueryBuilder near(double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.near(double, double, double)", "public com.mongodb.QueryBuilder near(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.nearSphere(double, double)", "public com.mongodb.QueryBuilder nearSphere(double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.nearSphere(double, double, double)", "public com.mongodb.QueryBuilder nearSphere(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinCenterSphere(double, double, double)", "public com.mongodb.QueryBuilder withinCenterSphere(double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinBox(double, double, double, double)", "public com.mongodb.QueryBuilder withinBox(double, double, double, double)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.withinPolygon(java.util.List<java.lang.Double[]>)", "public com.mongodb.QueryBuilder withinPolygon(java.util.List<java.lang.Double[]>)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.text(java.lang.String)", "public com.mongodb.QueryBuilder text(java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.text(java.lang.String, java.lang.String)", "public com.mongodb.QueryBuilder text(java.lang.String, java.lang.String)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.not()", "public com.mongodb.QueryBuilder not()"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.or(com.mongodb.DBObject...)", "public com.mongodb.QueryBuilder or(com.mongodb.DBObject...)"], ["com.mongodb.QueryBuilder", "com.mongodb.QueryBuilder.and(com.mongodb.DBObject...)", "public com.mongodb.QueryBuilder and(com.mongodb.DBObject...)"], ["com.mongodb.DBObject", "com.mongodb.QueryBuilder.get()", "public com.mongodb.DBObject get()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.DBObject>>", "com.mongodb.DBCollection$3.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.DBObject>> asReadOperation()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<org.bson.BsonValue>>", "com.mongodb.DBCollection$2.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<org.bson.BsonValue>> asReadOperation()"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoClient$2.getDatabase(java.lang.String)", "public com.mongodb.client.MongoDatabase getDatabase(java.lang.String)"], ["void", "com.mongodb.MongoClient$2.close()", "public void close()"], ["com.mongodb.MongoWriteException", "com.mongodb.MongoWriteException(com.mongodb.WriteError, com.mongodb.ServerAddress)", "public com.mongodb.MongoWriteException(com.mongodb.WriteError, com.mongodb.ServerAddress)"], ["com.mongodb.WriteError", "com.mongodb.MongoWriteException.getError()", "public com.mongodb.WriteError getError()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.DBObject>>", "com.mongodb.DB$2.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.DBObject>> asReadOperation()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.MongoClient.getDefaultCodecRegistry()", "public static org.bson.codecs.configuration.CodecRegistry getDefaultCodecRegistry()"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient()", "public com.mongodb.MongoClient()"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String)", "public com.mongodb.MongoClient(java.lang.String)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.lang.String, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.lang.String, int)", "public com.mongodb.MongoClient(java.lang.String, int)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.MongoClientURI)", "public com.mongodb.MongoClient(com.mongodb.MongoClientURI)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.MongoClientURI, com.mongodb.MongoDriverInformation)", "public com.mongodb.MongoClient(com.mongodb.MongoClientURI, com.mongodb.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)", "public com.mongodb.MongoClient(com.mongodb.ServerAddress, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, java.util.List<com.mongodb.MongoCredential>, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)"], ["com.mongodb.MongoClient", "com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)", "public com.mongodb.MongoClient(java.util.List<com.mongodb.ServerAddress>, com.mongodb.MongoCredential, com.mongodb.MongoClientOptions, com.mongodb.MongoDriverInformation)"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClient.getMongoClientOptions()", "public com.mongodb.MongoClientOptions getMongoClientOptions()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoClient.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["java.util.List<com.mongodb.MongoCredential>", "com.mongodb.MongoClient.getCredentialsList()", "public java.util.List<com.mongodb.MongoCredential> getCredentialsList()"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.MongoClient.listDatabaseNames()", "public com.mongodb.client.MongoIterable<java.lang.String> listDatabaseNames()"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.MongoClient.listDatabaseNames(com.mongodb.client.ClientSession)", "public com.mongodb.client.MongoIterable<java.lang.String> listDatabaseNames(com.mongodb.client.ClientSession)"], ["com.mongodb.client.ListDatabasesIterable<org.bson.Document>", "com.mongodb.MongoClient.listDatabases()", "public com.mongodb.client.ListDatabasesIterable<org.bson.Document> listDatabases()"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.MongoClient.listDatabases(java.lang.Class<T>)", "public <T> com.mongodb.client.ListDatabasesIterable<T> listDatabases(java.lang.Class<T>)"], ["com.mongodb.client.ListDatabasesIterable<org.bson.Document>", "com.mongodb.MongoClient.listDatabases(com.mongodb.client.ClientSession)", "public com.mongodb.client.ListDatabasesIterable<org.bson.Document> listDatabases(com.mongodb.client.ClientSession)"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.MongoClient.listDatabases(com.mongodb.client.ClientSession, java.lang.Class<T>)", "public <T> com.mongodb.client.ListDatabasesIterable<T> listDatabases(com.mongodb.client.ClientSession, java.lang.Class<T>)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.MongoClient.getDatabase(java.lang.String)", "public com.mongodb.client.MongoDatabase getDatabase(java.lang.String)"], ["com.mongodb.client.ClientSession", "com.mongodb.MongoClient.startSession()", "public com.mongodb.client.ClientSession startSession()"], ["com.mongodb.client.ClientSession", "com.mongodb.MongoClient.startSession(com.mongodb.ClientSessionOptions)", "public com.mongodb.client.ClientSession startSession(com.mongodb.ClientSessionOptions)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.MongoClient.watch()", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch()"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoClient.watch(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.MongoClient.watch(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoClient.watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.MongoClient.watch(com.mongodb.client.ClientSession)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoClient.watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.MongoClient.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.MongoClient.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["void", "com.mongodb.MongoClient.close()", "public void close()"], ["com.mongodb.DBRefCodecProvider", "com.mongodb.DBRefCodecProvider()", "public com.mongodb.DBRefCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.DBRefCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.DBRefCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DBRefCodecProvider.hashCode()", "public int hashCode()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder()", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder.group(java.nio.channels.AsynchronousChannelGroup)", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder group(java.nio.channels.AsynchronousChannelGroup)"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder.build()", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory build()"], ["boolean", "com.mongodb.connection.ClusterDescription$3.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$7.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ClusterId()", "public com.mongodb.connection.ClusterId()"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ClusterId(java.lang.String)", "public com.mongodb.connection.ClusterId(java.lang.String)"], ["java.lang.String", "com.mongodb.connection.ClusterId.getValue()", "public java.lang.String getValue()"], ["java.lang.String", "com.mongodb.connection.ClusterId.getDescription()", "public java.lang.String getDescription()"], ["boolean", "com.mongodb.connection.ClusterId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterId.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterId.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$5.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder()", "public com.mongodb.connection.ServerDescription$Builder()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.address(com.mongodb.ServerAddress)", "public com.mongodb.connection.ServerDescription$Builder address(com.mongodb.ServerAddress)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.canonicalAddress(java.lang.String)", "public com.mongodb.connection.ServerDescription$Builder canonicalAddress(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.type(com.mongodb.connection.ServerType)", "public com.mongodb.connection.ServerDescription$Builder type(com.mongodb.connection.ServerType)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.hosts(java.util.Set<java.lang.String>)", "public com.mongodb.connection.ServerDescription$Builder hosts(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.passives(java.util.Set<java.lang.String>)", "public com.mongodb.connection.ServerDescription$Builder passives(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.arbiters(java.util.Set<java.lang.String>)", "public com.mongodb.connection.ServerDescription$Builder arbiters(java.util.Set<java.lang.String>)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.primary(java.lang.String)", "public com.mongodb.connection.ServerDescription$Builder primary(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.maxDocumentSize(int)", "public com.mongodb.connection.ServerDescription$Builder maxDocumentSize(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.tagSet(com.mongodb.TagSet)", "public com.mongodb.connection.ServerDescription$Builder tagSet(com.mongodb.TagSet)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.roundTripTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ServerDescription$Builder roundTripTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.setName(java.lang.String)", "public com.mongodb.connection.ServerDescription$Builder setName(java.lang.String)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.ok(boolean)", "public com.mongodb.connection.ServerDescription$Builder ok(boolean)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.state(com.mongodb.connection.ServerConnectionState)", "public com.mongodb.connection.ServerDescription$Builder state(com.mongodb.connection.ServerConnectionState)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.version(com.mongodb.connection.ServerVersion)", "public com.mongodb.connection.ServerDescription$Builder version(com.mongodb.connection.ServerVersion)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.minWireVersion(int)", "public com.mongodb.connection.ServerDescription$Builder minWireVersion(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.maxWireVersion(int)", "public com.mongodb.connection.ServerDescription$Builder maxWireVersion(int)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.electionId(org.bson.types.ObjectId)", "public com.mongodb.connection.ServerDescription$Builder electionId(org.bson.types.ObjectId)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.setVersion(java.lang.Integer)", "public com.mongodb.connection.ServerDescription$Builder setVersion(java.lang.Integer)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.lastWriteDate(java.util.Date)", "public com.mongodb.connection.ServerDescription$Builder lastWriteDate(java.util.Date)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.lastUpdateTimeNanos(long)", "public com.mongodb.connection.ServerDescription$Builder lastUpdateTimeNanos(long)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.logicalSessionTimeoutMinutes(java.lang.Integer)", "public com.mongodb.connection.ServerDescription$Builder logicalSessionTimeoutMinutes(java.lang.Integer)"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription$Builder.exception(java.lang.Throwable)", "public com.mongodb.connection.ServerDescription$Builder exception(java.lang.Throwable)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ServerDescription$Builder.build()", "public com.mongodb.connection.ServerDescription build()"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.applySettings(com.mongodb.connection.ClusterSettings)", "public com.mongodb.connection.ClusterSettings$Builder applySettings(com.mongodb.connection.ClusterSettings)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.description(java.lang.String)", "public com.mongodb.connection.ClusterSettings$Builder description(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.srvHost(java.lang.String)", "public com.mongodb.connection.ClusterSettings$Builder srvHost(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.hosts(java.util.List<com.mongodb.ServerAddress>)", "public com.mongodb.connection.ClusterSettings$Builder hosts(java.util.List<com.mongodb.ServerAddress>)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.mode(com.mongodb.connection.ClusterConnectionMode)", "public com.mongodb.connection.ClusterSettings$Builder mode(com.mongodb.connection.ClusterConnectionMode)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.requiredReplicaSetName(java.lang.String)", "public com.mongodb.connection.ClusterSettings$Builder requiredReplicaSetName(java.lang.String)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.requiredClusterType(com.mongodb.connection.ClusterType)", "public com.mongodb.connection.ClusterSettings$Builder requiredClusterType(com.mongodb.connection.ClusterType)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.localThreshold(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ClusterSettings$Builder localThreshold(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.serverSelector(com.mongodb.selector.ServerSelector)", "public com.mongodb.connection.ClusterSettings$Builder serverSelector(com.mongodb.selector.ServerSelector)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.serverSelectionTimeout(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ClusterSettings$Builder serverSelectionTimeout(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.maxWaitQueueSize(int)", "public com.mongodb.connection.ClusterSettings$Builder maxWaitQueueSize(int)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.addClusterListener(com.mongodb.event.ClusterListener)", "public com.mongodb.connection.ClusterSettings$Builder addClusterListener(com.mongodb.event.ClusterListener)"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.ClusterSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.ClusterSettings$Builder.build()", "public com.mongodb.connection.ClusterSettings build()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, java.nio.channels.AsynchronousChannelGroup)", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, java.nio.channels.AsynchronousChannelGroup)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.AsynchronousSocketChannelStreamFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["boolean", "com.mongodb.connection.ClusterDescription$5.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings.builder()", "public static com.mongodb.connection.SslSettings$Builder builder()"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings.builder(com.mongodb.connection.SslSettings)", "public static com.mongodb.connection.SslSettings$Builder builder(com.mongodb.connection.SslSettings)"], ["boolean", "com.mongodb.connection.SslSettings.isEnabled()", "public boolean isEnabled()"], ["boolean", "com.mongodb.connection.SslSettings.isInvalidHostNameAllowed()", "public boolean isInvalidHostNameAllowed()"], ["javax.net.ssl.SSLContext", "com.mongodb.connection.SslSettings.getContext()", "public javax.net.ssl.SSLContext getContext()"], ["boolean", "com.mongodb.connection.SslSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.SslSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.SslSettings.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.connection.ClusterDescription$2.compare(com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)", "public int compare(com.mongodb.connection.ServerDescription, com.mongodb.connection.ServerDescription)"], ["int", "com.mongodb.connection.ClusterDescription$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.SplittablePayload$Type[]", "com.mongodb.connection.SplittablePayload$Type.values()", "public static com.mongodb.connection.SplittablePayload$Type[] values()"], ["com.mongodb.connection.SplittablePayload$Type", "com.mongodb.connection.SplittablePayload$Type.valueOf(java.lang.String)", "public static com.mongodb.connection.SplittablePayload$Type valueOf(java.lang.String)"], ["boolean", "com.mongodb.connection.ClusterDescription$6.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings.builder()", "public static com.mongodb.connection.ConnectionPoolSettings$Builder builder()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings.builder(com.mongodb.connection.ConnectionPoolSettings)", "public static com.mongodb.connection.ConnectionPoolSettings$Builder builder(com.mongodb.connection.ConnectionPoolSettings)"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMaxSize()", "public int getMaxSize()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMinSize()", "public int getMinSize()"], ["int", "com.mongodb.connection.ConnectionPoolSettings.getMaxWaitQueueSize()", "public int getMaxWaitQueueSize()"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxWaitTime(java.util.concurrent.TimeUnit)", "public long getMaxWaitTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxConnectionLifeTime(java.util.concurrent.TimeUnit)", "public long getMaxConnectionLifeTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaxConnectionIdleTime(java.util.concurrent.TimeUnit)", "public long getMaxConnectionIdleTime(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaintenanceInitialDelay(java.util.concurrent.TimeUnit)", "public long getMaintenanceInitialDelay(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ConnectionPoolSettings.getMaintenanceFrequency(java.util.concurrent.TimeUnit)", "public long getMaintenanceFrequency(java.util.concurrent.TimeUnit)"], ["java.util.List<com.mongodb.event.ConnectionPoolListener>", "com.mongodb.connection.ConnectionPoolSettings.getConnectionPoolListeners()", "public java.util.List<com.mongodb.event.ConnectionPoolListener> getConnectionPoolListeners()"], ["boolean", "com.mongodb.connection.ConnectionPoolSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionPoolSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionPoolSettings.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$1.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.BulkWriteBatchCombiner", "com.mongodb.connection.BulkWriteBatchCombiner(com.mongodb.ServerAddress, boolean, com.mongodb.WriteConcern)", "public com.mongodb.connection.BulkWriteBatchCombiner(com.mongodb.ServerAddress, boolean, com.mongodb.WriteConcern)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addResult(com.mongodb.bulk.BulkWriteResult, com.mongodb.internal.connection.IndexMap)", "public void addResult(com.mongodb.bulk.BulkWriteResult, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addErrorResult(com.mongodb.MongoBulkWriteException, com.mongodb.internal.connection.IndexMap)", "public void addErrorResult(com.mongodb.MongoBulkWriteException, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addWriteErrorResult(com.mongodb.bulk.BulkWriteError, com.mongodb.internal.connection.IndexMap)", "public void addWriteErrorResult(com.mongodb.bulk.BulkWriteError, com.mongodb.internal.connection.IndexMap)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addWriteConcernErrorResult(com.mongodb.bulk.WriteConcernError)", "public void addWriteConcernErrorResult(com.mongodb.bulk.WriteConcernError)"], ["void", "com.mongodb.connection.BulkWriteBatchCombiner.addErrorResult(java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.internal.connection.IndexMap)", "public void addErrorResult(java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.internal.connection.IndexMap)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.connection.BulkWriteBatchCombiner.getResult()", "public com.mongodb.bulk.BulkWriteResult getResult()"], ["boolean", "com.mongodb.connection.BulkWriteBatchCombiner.shouldStopSendingMoreBatches()", "public boolean shouldStopSendingMoreBatches()"], ["boolean", "com.mongodb.connection.BulkWriteBatchCombiner.hasErrors()", "public boolean hasErrors()"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.connection.BulkWriteBatchCombiner.getError()", "public com.mongodb.MongoBulkWriteException getError()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings.builder()", "public static com.mongodb.connection.ServerSettings$Builder builder()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings.builder(com.mongodb.connection.ServerSettings)", "public static com.mongodb.connection.ServerSettings$Builder builder(com.mongodb.connection.ServerSettings)"], ["long", "com.mongodb.connection.ServerSettings.getHeartbeatFrequency(java.util.concurrent.TimeUnit)", "public long getHeartbeatFrequency(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ServerSettings.getMinHeartbeatFrequency(java.util.concurrent.TimeUnit)", "public long getMinHeartbeatFrequency(java.util.concurrent.TimeUnit)"], ["java.util.List<com.mongodb.event.ServerListener>", "com.mongodb.connection.ServerSettings.getServerListeners()", "public java.util.List<com.mongodb.event.ServerListener> getServerListeners()"], ["java.util.List<com.mongodb.event.ServerMonitorListener>", "com.mongodb.connection.ServerSettings.getServerMonitorListeners()", "public java.util.List<com.mongodb.event.ServerMonitorListener> getServerMonitorListeners()"], ["boolean", "com.mongodb.connection.ServerSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerSettings.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterConnectionMode[]", "com.mongodb.connection.ClusterConnectionMode.values()", "public static com.mongodb.connection.ClusterConnectionMode[] values()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterConnectionMode.valueOf(java.lang.String)", "public static com.mongodb.connection.ClusterConnectionMode valueOf(java.lang.String)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>)", "public com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings)", "public com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, java.util.List<com.mongodb.connection.ServerDescription>, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, com.mongodb.MongoException, java.util.List<com.mongodb.connection.ServerDescription>, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings)", "public com.mongodb.connection.ClusterDescription(com.mongodb.connection.ClusterConnectionMode, com.mongodb.connection.ClusterType, com.mongodb.MongoException, java.util.List<com.mongodb.connection.ServerDescription>, com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings)"], ["com.mongodb.connection.ClusterSettings", "com.mongodb.connection.ClusterDescription.getClusterSettings()", "public com.mongodb.connection.ClusterSettings getClusterSettings()"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.ClusterDescription.getServerSettings()", "public com.mongodb.connection.ServerSettings getServerSettings()"], ["boolean", "com.mongodb.connection.ClusterDescription.isCompatibleWithDriver()", "public boolean isCompatibleWithDriver()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.findServerIncompatiblyOlderThanDriver()", "public com.mongodb.connection.ServerDescription findServerIncompatiblyOlderThanDriver()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.findServerIncompatiblyNewerThanDriver()", "public com.mongodb.connection.ServerDescription findServerIncompatiblyNewerThanDriver()"], ["boolean", "com.mongodb.connection.ClusterDescription.hasReadableServer(com.mongodb.ReadPreference)", "public boolean hasReadableServer(com.mongodb.ReadPreference)"], ["boolean", "com.mongodb.connection.ClusterDescription.hasWritableServer()", "public boolean hasWritableServer()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterDescription.getConnectionMode()", "public com.mongodb.connection.ClusterConnectionMode getConnectionMode()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterDescription.getType()", "public com.mongodb.connection.ClusterType getType()"], ["com.mongodb.MongoException", "com.mongodb.connection.ClusterDescription.getSrvResolutionException()", "public com.mongodb.MongoException getSrvResolutionException()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getServerDescriptions()", "public java.util.List<com.mongodb.connection.ServerDescription> getServerDescriptions()"], ["java.lang.Integer", "com.mongodb.connection.ClusterDescription.getLogicalSessionTimeoutMinutes()", "public java.lang.Integer getLogicalSessionTimeoutMinutes()"], ["java.util.Set<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAll()", "public java.util.Set<com.mongodb.connection.ServerDescription> getAll()"], ["com.mongodb.connection.ServerDescription", "com.mongodb.connection.ClusterDescription.getByServerAddress(com.mongodb.ServerAddress)", "public com.mongodb.connection.ServerDescription getByServerAddress(com.mongodb.ServerAddress)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getPrimaries()", "public java.util.List<com.mongodb.connection.ServerDescription> getPrimaries()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getSecondaries()", "public java.util.List<com.mongodb.connection.ServerDescription> getSecondaries()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getSecondaries(com.mongodb.TagSet)", "public java.util.List<com.mongodb.connection.ServerDescription> getSecondaries(com.mongodb.TagSet)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAny()", "public java.util.List<com.mongodb.connection.ServerDescription> getAny()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAnyPrimaryOrSecondary()", "public java.util.List<com.mongodb.connection.ServerDescription> getAnyPrimaryOrSecondary()"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.connection.ClusterDescription.getAnyPrimaryOrSecondary(com.mongodb.TagSet)", "public java.util.List<com.mongodb.connection.ServerDescription> getAnyPrimaryOrSecondary(com.mongodb.TagSet)"], ["boolean", "com.mongodb.connection.ClusterDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterDescription.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.connection.ClusterDescription.getShortDescription()", "public java.lang.String getShortDescription()"], ["com.mongodb.connection.TlsChannelStreamFactoryFactory", "com.mongodb.connection.TlsChannelStreamFactoryFactory()", "public com.mongodb.connection.TlsChannelStreamFactoryFactory()"], ["com.mongodb.connection.TlsChannelStreamFactoryFactory", "com.mongodb.connection.TlsChannelStreamFactoryFactory(com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup)", "public com.mongodb.connection.TlsChannelStreamFactoryFactory(com.mongodb.internal.connection.tlschannel.async.AsynchronousTlsChannelGroup)"], ["com.mongodb.connection.StreamFactory", "com.mongodb.connection.TlsChannelStreamFactoryFactory.create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.StreamFactory create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["void", "com.mongodb.connection.TlsChannelStreamFactoryFactory.close()", "public void close()"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$2.compare(com.mongodb.bulk.BulkWriteError, com.mongodb.bulk.BulkWriteError)", "public int compare(com.mongodb.bulk.BulkWriteError, com.mongodb.bulk.BulkWriteError)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$2.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.applySettings(com.mongodb.connection.SocketSettings)", "public com.mongodb.connection.SocketSettings$Builder applySettings(com.mongodb.connection.SocketSettings)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.connectTimeout(int, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.SocketSettings$Builder connectTimeout(int, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.readTimeout(int, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.SocketSettings$Builder readTimeout(int, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.keepAlive(boolean)", "public com.mongodb.connection.SocketSettings$Builder keepAlive(boolean)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.receiveBufferSize(int)", "public com.mongodb.connection.SocketSettings$Builder receiveBufferSize(int)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.sendBufferSize(int)", "public com.mongodb.connection.SocketSettings$Builder sendBufferSize(int)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.SocketSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.SocketSettings", "com.mongodb.connection.SocketSettings$Builder.build()", "public com.mongodb.connection.SocketSettings build()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.applySettings(com.mongodb.connection.ConnectionPoolSettings)", "public com.mongodb.connection.ConnectionPoolSettings$Builder applySettings(com.mongodb.connection.ConnectionPoolSettings)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxSize(int)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.minSize(int)", "public com.mongodb.connection.ConnectionPoolSettings$Builder minSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxWaitQueueSize(int)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxWaitQueueSize(int)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxWaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxWaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxConnectionLifeTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxConnectionLifeTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maxConnectionIdleTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maxConnectionIdleTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maintenanceInitialDelay(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maintenanceInitialDelay(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.maintenanceFrequency(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ConnectionPoolSettings$Builder maintenanceFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.addConnectionPoolListener(com.mongodb.event.ConnectionPoolListener)", "public com.mongodb.connection.ConnectionPoolSettings$Builder addConnectionPoolListener(com.mongodb.event.ConnectionPoolListener)"], ["com.mongodb.connection.ConnectionPoolSettings", "com.mongodb.connection.ConnectionPoolSettings$Builder.build()", "public com.mongodb.connection.ConnectionPoolSettings build()"], ["com.mongodb.connection.ConnectionPoolSettings$Builder", "com.mongodb.connection.ConnectionPoolSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.ConnectionPoolSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$3.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["void", "com.mongodb.connection.TlsChannelStreamFactoryFactory$TlsChannelStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream$OpenChannelFutureListener.operationComplete(io.netty.channel.ChannelFuture)", "public void operationComplete(io.netty.channel.ChannelFuture)"], ["void", "com.mongodb.connection.netty.NettyStream$OpenChannelFutureListener.operationComplete(io.netty.util.concurrent.Future)", "public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception"], ["int", "com.mongodb.connection.netty.NettyByteBuf.capacity()", "public int capacity()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(int, byte)", "public org.bson.ByteBuf put(int, byte)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.remaining()", "public int remaining()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(byte[], int, int)", "public org.bson.ByteBuf put(byte[], int, int)"], ["boolean", "com.mongodb.connection.netty.NettyByteBuf.hasRemaining()", "public boolean hasRemaining()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.put(byte)", "public org.bson.ByteBuf put(byte)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.flip()", "public org.bson.ByteBuf flip()"], ["byte[]", "com.mongodb.connection.netty.NettyByteBuf.array()", "public byte[] array()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.limit()", "public int limit()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.position(int)", "public org.bson.ByteBuf position(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.clear()", "public org.bson.ByteBuf clear()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.order(java.nio.ByteOrder)", "public org.bson.ByteBuf order(java.nio.ByteOrder)"], ["byte", "com.mongodb.connection.netty.NettyByteBuf.get()", "public byte get()"], ["byte", "com.mongodb.connection.netty.NettyByteBuf.get(int)", "public byte get(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(byte[])", "public org.bson.ByteBuf get(byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(int, byte[])", "public org.bson.ByteBuf get(int, byte[])"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(byte[], int, int)", "public org.bson.ByteBuf get(byte[], int, int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.get(int, byte[], int, int)", "public org.bson.ByteBuf get(int, byte[], int, int)"], ["long", "com.mongodb.connection.netty.NettyByteBuf.getLong()", "public long getLong()"], ["long", "com.mongodb.connection.netty.NettyByteBuf.getLong(int)", "public long getLong(int)"], ["double", "com.mongodb.connection.netty.NettyByteBuf.getDouble()", "public double getDouble()"], ["double", "com.mongodb.connection.netty.NettyByteBuf.getDouble(int)", "public double getDouble(int)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getInt()", "public int getInt()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getInt(int)", "public int getInt(int)"], ["int", "com.mongodb.connection.netty.NettyByteBuf.position()", "public int position()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.limit(int)", "public org.bson.ByteBuf limit(int)"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.asReadOnly()", "public org.bson.ByteBuf asReadOnly()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.duplicate()", "public org.bson.ByteBuf duplicate()"], ["java.nio.ByteBuffer", "com.mongodb.connection.netty.NettyByteBuf.asNIO()", "public java.nio.ByteBuffer asNIO()"], ["int", "com.mongodb.connection.netty.NettyByteBuf.getReferenceCount()", "public int getReferenceCount()"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyByteBuf.retain()", "public org.bson.ByteBuf retain()"], ["void", "com.mongodb.connection.netty.NettyByteBuf.release()", "public void release()"], ["void", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.completed(T)", "public void completed(T)"], ["void", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.failed(java.lang.Throwable)", "public void failed(java.lang.Throwable)"], ["T", "com.mongodb.connection.netty.NettyStream$FutureAsyncCompletionHandler.get()", "public T get() throws java.io.IOException"], ["void", "com.mongodb.connection.netty.NettyStream$InboundBufferHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)", "public void exceptionCaught(io.netty.channel.ChannelHandlerContext, java.lang.Throwable)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, java.lang.Class<? extends io.netty.channel.socket.SocketChannel>, io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, java.lang.Class<? extends io.netty.channel.socket.SocketChannel>, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup)", "public com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, io.netty.channel.EventLoopGroup)"], ["com.mongodb.connection.netty.NettyStreamFactory", "com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.netty.NettyStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.netty.NettyStreamFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["void", "com.mongodb.connection.netty.NettyStream$4.run()", "public void run()"], ["void", "com.mongodb.connection.netty.NettyStream$1.initChannel(io.netty.channel.socket.SocketChannel)", "public void initChannel(io.netty.channel.socket.SocketChannel)"], ["void", "com.mongodb.connection.netty.NettyStream$1.initChannel(io.netty.channel.Channel)", "public void initChannel(io.netty.channel.Channel) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$OpenChannelFutureListener$1.operationComplete(io.netty.channel.ChannelFuture)", "public void operationComplete(io.netty.channel.ChannelFuture)"], ["void", "com.mongodb.connection.netty.NettyStream$OpenChannelFutureListener$1.operationComplete(io.netty.util.concurrent.Future)", "public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyStream.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["void", "com.mongodb.connection.netty.NettyStream.open()", "public void open() throws java.io.IOException"], ["void", "com.mongodb.connection.netty.NettyStream.openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void openAsync(com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream.write(java.util.List<org.bson.ByteBuf>)", "public void write(java.util.List<org.bson.ByteBuf>) throws java.io.IOException"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyStream.read(int)", "public org.bson.ByteBuf read(int) throws java.io.IOException"], ["void", "com.mongodb.connection.netty.NettyStream.writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)", "public void writeAsync(java.util.List<org.bson.ByteBuf>, com.mongodb.connection.AsyncCompletionHandler<java.lang.Void>)"], ["void", "com.mongodb.connection.netty.NettyStream.readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)", "public void readAsync(int, com.mongodb.connection.AsyncCompletionHandler<org.bson.ByteBuf>)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.netty.NettyStream.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["void", "com.mongodb.connection.netty.NettyStream.close()", "public void close()"], ["boolean", "com.mongodb.connection.netty.NettyStream.isClosed()", "public boolean isClosed()"], ["com.mongodb.connection.SocketSettings", "com.mongodb.connection.netty.NettyStream.getSettings()", "public com.mongodb.connection.SocketSettings getSettings()"], ["com.mongodb.connection.SslSettings", "com.mongodb.connection.netty.NettyStream.getSslSettings()", "public com.mongodb.connection.SslSettings getSslSettings()"], ["io.netty.channel.EventLoopGroup", "com.mongodb.connection.netty.NettyStream.getWorkerGroup()", "public io.netty.channel.EventLoopGroup getWorkerGroup()"], ["java.lang.Class<? extends io.netty.channel.socket.SocketChannel>", "com.mongodb.connection.netty.NettyStream.getSocketChannelClass()", "public java.lang.Class<? extends io.netty.channel.socket.SocketChannel> getSocketChannelClass()"], ["io.netty.buffer.ByteBufAllocator", "com.mongodb.connection.netty.NettyStream.getAllocator()", "public io.netty.buffer.ByteBufAllocator getAllocator()"], ["void", "com.mongodb.connection.netty.ReadTimeoutHandler$ReadTimeoutTask.run()", "public void run()"], ["void", "com.mongodb.connection.netty.NettyStream$2.operationComplete(io.netty.channel.ChannelFuture)", "public void operationComplete(io.netty.channel.ChannelFuture) throws java.lang.Exception"], ["void", "com.mongodb.connection.netty.NettyStream$2.operationComplete(io.netty.util.concurrent.Future)", "public void operationComplete(io.netty.util.concurrent.Future) throws java.lang.Exception"], ["org.bson.ByteBuf", "com.mongodb.connection.netty.NettyBufferProvider.getBuffer(int)", "public org.bson.ByteBuf getBuffer(int)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.allocator(io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder allocator(io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.socketChannelClass(java.lang.Class<? extends io.netty.channel.socket.SocketChannel>)", "public com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder socketChannelClass(java.lang.Class<? extends io.netty.channel.socket.SocketChannel>)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.eventLoopGroup(io.netty.channel.EventLoopGroup)", "public com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder eventLoopGroup(io.netty.channel.EventLoopGroup)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder.build()", "public com.mongodb.connection.netty.NettyStreamFactoryFactory build()"], ["void", "com.mongodb.connection.netty.NettyStream$3.run()", "public void run()"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory()", "public com.mongodb.connection.netty.NettyStreamFactoryFactory()"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory(io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)", "public com.mongodb.connection.netty.NettyStreamFactoryFactory(io.netty.channel.EventLoopGroup, io.netty.buffer.ByteBufAllocator)"], ["com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder", "com.mongodb.connection.netty.NettyStreamFactoryFactory.builder()", "public static com.mongodb.connection.netty.NettyStreamFactoryFactory$Builder builder()"], ["com.mongodb.connection.StreamFactory", "com.mongodb.connection.netty.NettyStreamFactoryFactory.create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.StreamFactory create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["java.lang.String", "com.mongodb.connection.netty.NettyStreamFactoryFactory.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.connection.TlsChannelStreamFactoryFactory$SelectorMonitor$1.run()", "public void run()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$6.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.SocketStreamFactory", "com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.SocketStreamFactory", "com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory)", "public com.mongodb.connection.SocketStreamFactory(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings, javax.net.SocketFactory)"], ["com.mongodb.connection.Stream", "com.mongodb.connection.SocketStreamFactory.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$1.compare(com.mongodb.bulk.BulkWriteUpsert, com.mongodb.bulk.BulkWriteUpsert)", "public int compare(com.mongodb.bulk.BulkWriteUpsert, com.mongodb.bulk.BulkWriteUpsert)"], ["int", "com.mongodb.connection.BulkWriteBatchCombiner$1.compare(java.lang.Object, java.lang.Object)", "public int compare(java.lang.Object, java.lang.Object)"], ["com.mongodb.connection.DefaultClusterFactory", "com.mongodb.connection.DefaultClusterFactory()", "public com.mongodb.connection.DefaultClusterFactory()"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener)", "public com.mongodb.connection.Cluster create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener, com.mongodb.event.CommandListener)", "public com.mongodb.connection.Cluster create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener, com.mongodb.event.CommandListener)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation)", "public com.mongodb.connection.Cluster create(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.ClusterListener, com.mongodb.event.ConnectionPoolListener, com.mongodb.event.ConnectionListener, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.createCluster(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation)", "public com.mongodb.connection.Cluster createCluster(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation)"], ["com.mongodb.connection.Cluster", "com.mongodb.connection.DefaultClusterFactory.createCluster(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation, java.util.List<com.mongodb.MongoCompressor>)", "public com.mongodb.connection.Cluster createCluster(com.mongodb.connection.ClusterSettings, com.mongodb.connection.ServerSettings, com.mongodb.connection.ConnectionPoolSettings, com.mongodb.connection.StreamFactory, com.mongodb.connection.StreamFactory, java.util.List<com.mongodb.MongoCredential>, com.mongodb.event.CommandListener, java.lang.String, com.mongodb.MongoDriverInformation, java.util.List<com.mongodb.MongoCompressor>)"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory()", "public com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory()"], ["com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.builder()", "public static com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory$Builder builder()"], ["com.mongodb.connection.StreamFactory", "com.mongodb.connection.AsynchronousSocketChannelStreamFactoryFactory.create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)", "public com.mongodb.connection.StreamFactory create(com.mongodb.connection.SocketSettings, com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.ServerId", "com.mongodb.connection.ServerId(com.mongodb.connection.ClusterId, com.mongodb.ServerAddress)", "public com.mongodb.connection.ServerId(com.mongodb.connection.ClusterId, com.mongodb.ServerAddress)"], ["com.mongodb.connection.ClusterId", "com.mongodb.connection.ServerId.getClusterId()", "public com.mongodb.connection.ClusterId getClusterId()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ServerId.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["boolean", "com.mongodb.connection.ServerId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerId.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerId.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterType[]", "com.mongodb.connection.ClusterType.values()", "public static com.mongodb.connection.ClusterType[] values()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterType.valueOf(java.lang.String)", "public static com.mongodb.connection.ClusterType valueOf(java.lang.String)"], ["void", "com.mongodb.connection.TlsChannelStreamFactoryFactory$SelectorMonitor.close()", "public void close()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ServerId)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, int, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, com.mongodb.connection.ServerVersion, int, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, int, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)", "public com.mongodb.connection.ConnectionDescription(com.mongodb.connection.ConnectionId, int, com.mongodb.connection.ServerType, int, int, int, java.util.List<java.lang.String>)"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.connection.ConnectionDescription.withConnectionId(com.mongodb.connection.ConnectionId)", "public com.mongodb.connection.ConnectionDescription withConnectionId(com.mongodb.connection.ConnectionId)"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ConnectionDescription.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.connection.ConnectionId", "com.mongodb.connection.ConnectionDescription.getConnectionId()", "public com.mongodb.connection.ConnectionId getConnectionId()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ConnectionDescription.getServerVersion()", "public com.mongodb.connection.ServerVersion getServerVersion()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxWireVersion()", "public int getMaxWireVersion()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ConnectionDescription.getServerType()", "public com.mongodb.connection.ServerType getServerType()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxBatchCount()", "public int getMaxBatchCount()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getMaxMessageSize()", "public int getMaxMessageSize()"], ["java.util.List<java.lang.String>", "com.mongodb.connection.ConnectionDescription.getCompressors()", "public java.util.List<java.lang.String> getCompressors()"], ["int", "com.mongodb.connection.ConnectionDescription.getDefaultMaxMessageSize()", "public static int getDefaultMaxMessageSize()"], ["int", "com.mongodb.connection.ConnectionDescription.getDefaultMaxWriteBatchSize()", "public static int getDefaultMaxWriteBatchSize()"], ["boolean", "com.mongodb.connection.ConnectionDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionDescription.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings.builder()", "public static com.mongodb.connection.ClusterSettings$Builder builder()"], ["com.mongodb.connection.ClusterSettings$Builder", "com.mongodb.connection.ClusterSettings.builder(com.mongodb.connection.ClusterSettings)", "public static com.mongodb.connection.ClusterSettings$Builder builder(com.mongodb.connection.ClusterSettings)"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getDescription()", "public java.lang.String getDescription()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getSrvHost()", "public java.lang.String getSrvHost()"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.connection.ClusterSettings.getHosts()", "public java.util.List<com.mongodb.ServerAddress> getHosts()"], ["com.mongodb.connection.ClusterConnectionMode", "com.mongodb.connection.ClusterSettings.getMode()", "public com.mongodb.connection.ClusterConnectionMode getMode()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ClusterSettings.getRequiredClusterType()", "public com.mongodb.connection.ClusterType getRequiredClusterType()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["com.mongodb.selector.ServerSelector", "com.mongodb.connection.ClusterSettings.getServerSelector()", "public com.mongodb.selector.ServerSelector getServerSelector()"], ["long", "com.mongodb.connection.ClusterSettings.getServerSelectionTimeout(java.util.concurrent.TimeUnit)", "public long getServerSelectionTimeout(java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.connection.ClusterSettings.getLocalThreshold(java.util.concurrent.TimeUnit)", "public long getLocalThreshold(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.connection.ClusterSettings.getMaxWaitQueueSize()", "public int getMaxWaitQueueSize()"], ["java.util.List<com.mongodb.event.ClusterListener>", "com.mongodb.connection.ClusterSettings.getClusterListeners()", "public java.util.List<com.mongodb.event.ClusterListener> getClusterListeners()"], ["boolean", "com.mongodb.connection.ClusterSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ClusterSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.connection.ClusterSettings.getShortDescription()", "public java.lang.String getShortDescription()"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.applySettings(com.mongodb.connection.ServerSettings)", "public com.mongodb.connection.ServerSettings$Builder applySettings(com.mongodb.connection.ServerSettings)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.heartbeatFrequency(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ServerSettings$Builder heartbeatFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.minHeartbeatFrequency(long, java.util.concurrent.TimeUnit)", "public com.mongodb.connection.ServerSettings$Builder minHeartbeatFrequency(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.addServerListener(com.mongodb.event.ServerListener)", "public com.mongodb.connection.ServerSettings$Builder addServerListener(com.mongodb.event.ServerListener)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.addServerMonitorListener(com.mongodb.event.ServerMonitorListener)", "public com.mongodb.connection.ServerSettings$Builder addServerMonitorListener(com.mongodb.event.ServerMonitorListener)"], ["com.mongodb.connection.ServerSettings$Builder", "com.mongodb.connection.ServerSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.ServerSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.ServerSettings", "com.mongodb.connection.ServerSettings$Builder.build()", "public com.mongodb.connection.ServerSettings build()"], ["com.mongodb.connection.ServerDescription$Builder", "com.mongodb.connection.ServerDescription.builder()", "public static com.mongodb.connection.ServerDescription$Builder builder()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getCanonicalAddress()", "public java.lang.String getCanonicalAddress()"], ["java.lang.Integer", "com.mongodb.connection.ServerDescription.getLogicalSessionTimeoutMinutes()", "public java.lang.Integer getLogicalSessionTimeoutMinutes()"], ["boolean", "com.mongodb.connection.ServerDescription.isCompatibleWithDriver()", "public boolean isCompatibleWithDriver()"], ["boolean", "com.mongodb.connection.ServerDescription.isIncompatiblyNewerThanDriver()", "public boolean isIncompatiblyNewerThanDriver()"], ["boolean", "com.mongodb.connection.ServerDescription.isIncompatiblyOlderThanDriver()", "public boolean isIncompatiblyOlderThanDriver()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMaxDocumentSize()", "public static int getDefaultMaxDocumentSize()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMinWireVersion()", "public static int getDefaultMinWireVersion()"], ["int", "com.mongodb.connection.ServerDescription.getDefaultMaxWireVersion()", "public static int getDefaultMaxWireVersion()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.ServerDescription.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["boolean", "com.mongodb.connection.ServerDescription.isReplicaSetMember()", "public boolean isReplicaSetMember()"], ["boolean", "com.mongodb.connection.ServerDescription.isShardRouter()", "public boolean isShardRouter()"], ["boolean", "com.mongodb.connection.ServerDescription.isStandAlone()", "public boolean isStandAlone()"], ["boolean", "com.mongodb.connection.ServerDescription.isPrimary()", "public boolean isPrimary()"], ["boolean", "com.mongodb.connection.ServerDescription.isSecondary()", "public boolean isSecondary()"], ["java.util.Set<java.lang.String>", "com.mongodb.connection.ServerDescription.getHosts()", "public java.util.Set<java.lang.String> getHosts()"], ["java.util.Set<java.lang.String>", "com.mongodb.connection.ServerDescription.getPassives()", "public java.util.Set<java.lang.String> getPassives()"], ["java.util.Set<java.lang.String>", "com.mongodb.connection.ServerDescription.getArbiters()", "public java.util.Set<java.lang.String> getArbiters()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getPrimary()", "public java.lang.String getPrimary()"], ["int", "com.mongodb.connection.ServerDescription.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["com.mongodb.TagSet", "com.mongodb.connection.ServerDescription.getTagSet()", "public com.mongodb.TagSet getTagSet()"], ["int", "com.mongodb.connection.ServerDescription.getMinWireVersion()", "public int getMinWireVersion()"], ["int", "com.mongodb.connection.ServerDescription.getMaxWireVersion()", "public int getMaxWireVersion()"], ["org.bson.types.ObjectId", "com.mongodb.connection.ServerDescription.getElectionId()", "public org.bson.types.ObjectId getElectionId()"], ["java.lang.Integer", "com.mongodb.connection.ServerDescription.getSetVersion()", "public java.lang.Integer getSetVersion()"], ["java.util.Date", "com.mongodb.connection.ServerDescription.getLastWriteDate()", "public java.util.Date getLastWriteDate()"], ["long", "com.mongodb.connection.ServerDescription.getLastUpdateTime(java.util.concurrent.TimeUnit)", "public long getLastUpdateTime(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.ServerDescription.hasTags(com.mongodb.TagSet)", "public boolean hasTags(com.mongodb.TagSet)"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getSetName()", "public java.lang.String getSetName()"], ["boolean", "com.mongodb.connection.ServerDescription.isOk()", "public boolean isOk()"], ["com.mongodb.connection.ServerConnectionState", "com.mongodb.connection.ServerDescription.getState()", "public com.mongodb.connection.ServerConnectionState getState()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ServerDescription.getType()", "public com.mongodb.connection.ServerType getType()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerDescription.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerDescription.getVersion()", "public com.mongodb.connection.ServerVersion getVersion()"], ["long", "com.mongodb.connection.ServerDescription.getRoundTripTimeNanos()", "public long getRoundTripTimeNanos()"], ["java.lang.Throwable", "com.mongodb.connection.ServerDescription.getException()", "public java.lang.Throwable getException()"], ["boolean", "com.mongodb.connection.ServerDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.connection.ServerDescription.getShortDescription()", "public java.lang.String getShortDescription()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$8.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ByteBufferBsonOutput", "com.mongodb.connection.ByteBufferBsonOutput(com.mongodb.connection.BufferProvider)", "public com.mongodb.connection.ByteBufferBsonOutput(com.mongodb.connection.BufferProvider)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.writeByte(int)", "public void writeByte(int)"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.getPosition()", "public int getPosition()"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.getSize()", "public int getSize()"], ["java.util.List<org.bson.ByteBuf>", "com.mongodb.connection.ByteBufferBsonOutput.getByteBuffers()", "public java.util.List<org.bson.ByteBuf> getByteBuffers()"], ["int", "com.mongodb.connection.ByteBufferBsonOutput.pipe(java.io.OutputStream)", "public int pipe(java.io.OutputStream) throws java.io.IOException"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.truncateToPosition(int)", "public void truncateToPosition(int)"], ["void", "com.mongodb.connection.ByteBufferBsonOutput.close()", "public void close()"], ["com.mongodb.connection.ServerConnectionState[]", "com.mongodb.connection.ServerConnectionState.values()", "public static com.mongodb.connection.ServerConnectionState[] values()"], ["com.mongodb.connection.ServerConnectionState", "com.mongodb.connection.ServerConnectionState.valueOf(java.lang.String)", "public static com.mongodb.connection.ServerConnectionState valueOf(java.lang.String)"], ["com.mongodb.connection.QueryResult", "com.mongodb.connection.QueryResult(com.mongodb.MongoNamespace, java.util.List<T>, long, com.mongodb.ServerAddress)", "public com.mongodb.connection.QueryResult(com.mongodb.MongoNamespace, java.util.List<T>, long, com.mongodb.ServerAddress)"], ["com.mongodb.MongoNamespace", "com.mongodb.connection.QueryResult.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["com.mongodb.ServerCursor", "com.mongodb.connection.QueryResult.getCursor()", "public com.mongodb.ServerCursor getCursor()"], ["java.util.List<T>", "com.mongodb.connection.QueryResult.getResults()", "public java.util.List<T> getResults()"], ["com.mongodb.ServerAddress", "com.mongodb.connection.QueryResult.getAddress()", "public com.mongodb.ServerAddress getAddress()"], ["com.mongodb.connection.Stream", "com.mongodb.connection.TlsChannelStreamFactoryFactory$1.create(com.mongodb.ServerAddress)", "public com.mongodb.connection.Stream create(com.mongodb.ServerAddress)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$7.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["boolean", "com.mongodb.connection.ClusterDescription$4.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings.builder()", "public static com.mongodb.connection.SocketSettings$Builder builder()"], ["com.mongodb.connection.SocketSettings$Builder", "com.mongodb.connection.SocketSettings.builder(com.mongodb.connection.SocketSettings)", "public static com.mongodb.connection.SocketSettings$Builder builder(com.mongodb.connection.SocketSettings)"], ["int", "com.mongodb.connection.SocketSettings.getConnectTimeout(java.util.concurrent.TimeUnit)", "public int getConnectTimeout(java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.connection.SocketSettings.getReadTimeout(java.util.concurrent.TimeUnit)", "public int getReadTimeout(java.util.concurrent.TimeUnit)"], ["boolean", "com.mongodb.connection.SocketSettings.isKeepAlive()", "public boolean isKeepAlive()"], ["int", "com.mongodb.connection.SocketSettings.getReceiveBufferSize()", "public int getReceiveBufferSize()"], ["int", "com.mongodb.connection.SocketSettings.getSendBufferSize()", "public int getSendBufferSize()"], ["boolean", "com.mongodb.connection.SocketSettings.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.SocketSettings.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.SocketSettings.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ConnectionId", "com.mongodb.connection.ConnectionId(com.mongodb.connection.ServerId)", "public com.mongodb.connection.ConnectionId(com.mongodb.connection.ServerId)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.connection.ConnectionId(com.mongodb.connection.ServerId, int, java.lang.Integer)", "public com.mongodb.connection.ConnectionId(com.mongodb.connection.ServerId, int, java.lang.Integer)"], ["com.mongodb.connection.ConnectionId", "com.mongodb.connection.ConnectionId.withServerValue(int)", "public com.mongodb.connection.ConnectionId withServerValue(int)"], ["com.mongodb.connection.ServerId", "com.mongodb.connection.ConnectionId.getServerId()", "public com.mongodb.connection.ServerId getServerId()"], ["int", "com.mongodb.connection.ConnectionId.getLocalValue()", "public int getLocalValue()"], ["java.lang.Integer", "com.mongodb.connection.ConnectionId.getServerValue()", "public java.lang.Integer getServerValue()"], ["boolean", "com.mongodb.connection.ConnectionId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ConnectionId.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ConnectionId.toString()", "public java.lang.String toString()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion()", "public com.mongodb.connection.ServerVersion()"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion(java.util.List<java.lang.Integer>)", "public com.mongodb.connection.ServerVersion(java.util.List<java.lang.Integer>)"], ["com.mongodb.connection.ServerVersion", "com.mongodb.connection.ServerVersion(int, int)", "public com.mongodb.connection.ServerVersion(int, int)"], ["java.util.List<java.lang.Integer>", "com.mongodb.connection.ServerVersion.getVersionList()", "public java.util.List<java.lang.Integer> getVersionList()"], ["int", "com.mongodb.connection.ServerVersion.compareTo(com.mongodb.connection.ServerVersion)", "public int compareTo(com.mongodb.connection.ServerVersion)"], ["boolean", "com.mongodb.connection.ServerVersion.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.connection.ServerVersion.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.connection.ServerVersion.toString()", "public java.lang.String toString()"], ["int", "com.mongodb.connection.ServerVersion.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$4.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["org.bson.ByteBuf", "com.mongodb.connection.TlsChannelStreamFactoryFactory$TlsChannelStream$BufferProviderAllocator.allocate(int)", "public org.bson.ByteBuf allocate(int)"], ["void", "com.mongodb.connection.TlsChannelStreamFactoryFactory$TlsChannelStream$BufferProviderAllocator.free(org.bson.ByteBuf)", "public void free(org.bson.ByteBuf)"], ["com.mongodb.connection.SplittablePayload", "com.mongodb.connection.SplittablePayload(com.mongodb.connection.SplittablePayload$Type, java.util.List<org.bson.BsonDocument>)", "public com.mongodb.connection.SplittablePayload(com.mongodb.connection.SplittablePayload$Type, java.util.List<org.bson.BsonDocument>)"], ["com.mongodb.connection.SplittablePayload$Type", "com.mongodb.connection.SplittablePayload.getPayloadType()", "public com.mongodb.connection.SplittablePayload$Type getPayloadType()"], ["java.lang.String", "com.mongodb.connection.SplittablePayload.getPayloadName()", "public java.lang.String getPayloadName()"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.connection.SplittablePayload.getPayload()", "public java.util.List<org.bson.BsonDocument> getPayload()"], ["int", "com.mongodb.connection.SplittablePayload.getPosition()", "public int getPosition()"], ["void", "com.mongodb.connection.SplittablePayload.setPosition(int)", "public void setPosition(int)"], ["boolean", "com.mongodb.connection.SplittablePayload.hasAnotherSplit()", "public boolean hasAnotherSplit()"], ["com.mongodb.connection.SplittablePayload", "com.mongodb.connection.SplittablePayload.getNextSplit()", "public com.mongodb.connection.SplittablePayload getNextSplit()"], ["boolean", "com.mongodb.connection.SplittablePayload.isEmpty()", "public boolean isEmpty()"], ["com.mongodb.connection.ClusterType", "com.mongodb.connection.ServerType$2.getClusterType()", "public com.mongodb.connection.ClusterType getClusterType()"], ["com.mongodb.connection.ServerType[]", "com.mongodb.connection.ServerType.values()", "public static com.mongodb.connection.ServerType[] values()"], ["com.mongodb.connection.ServerType", "com.mongodb.connection.ServerType.valueOf(java.lang.String)", "public static com.mongodb.connection.ServerType valueOf(java.lang.String)"], ["boolean", "com.mongodb.connection.ClusterDescription$1.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["boolean", "com.mongodb.connection.ClusterDescription$8.apply(com.mongodb.connection.ServerDescription)", "public boolean apply(com.mongodb.connection.ServerDescription)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.applySettings(com.mongodb.connection.SslSettings)", "public com.mongodb.connection.SslSettings$Builder applySettings(com.mongodb.connection.SslSettings)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.enabled(boolean)", "public com.mongodb.connection.SslSettings$Builder enabled(boolean)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.invalidHostNameAllowed(boolean)", "public com.mongodb.connection.SslSettings$Builder invalidHostNameAllowed(boolean)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.context(javax.net.ssl.SSLContext)", "public com.mongodb.connection.SslSettings$Builder context(javax.net.ssl.SSLContext)"], ["com.mongodb.connection.SslSettings$Builder", "com.mongodb.connection.SslSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.connection.SslSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.connection.SslSettings", "com.mongodb.connection.SslSettings$Builder.build()", "public com.mongodb.connection.SslSettings build()"], ["void", "com.mongodb.connection.TlsChannelStreamFactoryFactory$TlsChannelStream$1.run()", "public void run()"], ["com.mongodb.DBObject", "com.mongodb.UpdateRequest.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBObject", "com.mongodb.UpdateRequest.getUpdate()", "public com.mongodb.DBObject getUpdate()"], ["boolean", "com.mongodb.UpdateRequest.isUpsert()", "public boolean isUpsert()"], ["boolean", "com.mongodb.UpdateRequest.isMulti()", "public boolean isMulti()"], ["com.mongodb.client.model.Collation", "com.mongodb.UpdateRequest.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.UpdateRequest.getArrayFilters()", "public java.util.List<? extends com.mongodb.DBObject> getArrayFilters()"], ["java.lang.String", "com.mongodb.TaggableReadPreference$SecondaryReadPreference.getName()", "public java.lang.String getName()"], ["com.mongodb.MongoException", "com.mongodb.MongoException.fromThrowable(java.lang.Throwable)", "public static com.mongodb.MongoException fromThrowable(java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException.fromThrowableNonNull(java.lang.Throwable)", "public static com.mongodb.MongoException fromThrowableNonNull(java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(java.lang.String)", "public com.mongodb.MongoException(java.lang.String)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(int, java.lang.String)", "public com.mongodb.MongoException(int, java.lang.String)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoException", "com.mongodb.MongoException(int, java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoException(int, java.lang.String, java.lang.Throwable)"], ["int", "com.mongodb.MongoException.getCode()", "public int getCode()"], ["void", "com.mongodb.MongoException.addLabel(java.lang.String)", "public void addLabel(java.lang.String)"], ["void", "com.mongodb.MongoException.removeLabel(java.lang.String)", "public void removeLabel(java.lang.String)"], ["java.util.Set<java.lang.String>", "com.mongodb.MongoException.getErrorLabels()", "public java.util.Set<java.lang.String> getErrorLabels()"], ["boolean", "com.mongodb.MongoException.hasErrorLabel(java.lang.String)", "public boolean hasErrorLabel(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBObjects.toDBObject(org.bson.BsonDocument)", "public static com.mongodb.DBObject toDBObject(org.bson.BsonDocument)"], ["boolean", "com.mongodb.WriteConcernResult$2.wasAcknowledged()", "public boolean wasAcknowledged()"], ["int", "com.mongodb.WriteConcernResult$2.getCount()", "public int getCount()"], ["boolean", "com.mongodb.WriteConcernResult$2.isUpdateOfExisting()", "public boolean isUpdateOfExisting()"], ["org.bson.BsonValue", "com.mongodb.WriteConcernResult$2.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.WriteConcernResult$2.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernResult$2.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernResult$2.toString()", "public java.lang.String toString()"], ["com.mongodb.ErrorCategory[]", "com.mongodb.ErrorCategory.values()", "public static com.mongodb.ErrorCategory[] values()"], ["com.mongodb.ErrorCategory", "com.mongodb.ErrorCategory.valueOf(java.lang.String)", "public static com.mongodb.ErrorCategory valueOf(java.lang.String)"], ["com.mongodb.ErrorCategory", "com.mongodb.ErrorCategory.fromErrorCode(int)", "public static com.mongodb.ErrorCategory fromErrorCode(int)"], ["com.mongodb.MongoInterruptedException", "com.mongodb.MongoInterruptedException(java.lang.String, java.lang.Exception)", "public com.mongodb.MongoInterruptedException(java.lang.String, java.lang.Exception)"], ["com.mongodb.DBCursor$IteratorOrArray[]", "com.mongodb.DBCursor$IteratorOrArray.values()", "public static com.mongodb.DBCursor$IteratorOrArray[] values()"], ["com.mongodb.DBCursor$IteratorOrArray", "com.mongodb.DBCursor$IteratorOrArray.valueOf(java.lang.String)", "public static com.mongodb.DBCursor$IteratorOrArray valueOf(java.lang.String)"], ["void", "com.mongodb.DBEncoderAdapter.encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.DBObject, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.DBObject>", "com.mongodb.DBEncoderAdapter.getEncoderClass()", "public java.lang.Class<com.mongodb.DBObject> getEncoderClass()"], ["void", "com.mongodb.DBEncoderAdapter.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["com.mongodb.MongoDriverInformation$Builder", "com.mongodb.MongoDriverInformation$Builder.driverName(java.lang.String)", "public com.mongodb.MongoDriverInformation$Builder driverName(java.lang.String)"], ["com.mongodb.MongoDriverInformation$Builder", "com.mongodb.MongoDriverInformation$Builder.driverVersion(java.lang.String)", "public com.mongodb.MongoDriverInformation$Builder driverVersion(java.lang.String)"], ["com.mongodb.MongoDriverInformation$Builder", "com.mongodb.MongoDriverInformation$Builder.driverPlatform(java.lang.String)", "public com.mongodb.MongoDriverInformation$Builder driverPlatform(java.lang.String)"], ["com.mongodb.MongoDriverInformation", "com.mongodb.MongoDriverInformation$Builder.build()", "public com.mongodb.MongoDriverInformation build()"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject...)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject...)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.WriteConcern, com.mongodb.DBObject...)", "public com.mongodb.WriteResult insert(com.mongodb.WriteConcern, com.mongodb.DBObject...)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject[], com.mongodb.WriteConcern)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject[], com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(com.mongodb.DBObject[], com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult insert(com.mongodb.DBObject[], com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.InsertOptions)", "public com.mongodb.WriteResult insert(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.InsertOptions)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.save(com.mongodb.DBObject)", "public com.mongodb.WriteResult save(com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.save(com.mongodb.DBObject, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult save(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, java.lang.Boolean, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern, java.lang.Boolean, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, boolean, boolean)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.updateMulti(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.WriteResult updateMulti(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.update(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.client.model.DBCollectionUpdateOptions)", "public com.mongodb.WriteResult update(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.client.model.DBCollectionUpdateOptions)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.WriteConcern)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject, com.mongodb.WriteConcern)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.WriteConcern, com.mongodb.DBEncoder)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject, com.mongodb.WriteConcern, com.mongodb.DBEncoder)"], ["com.mongodb.WriteResult", "com.mongodb.DBCollection.remove(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionRemoveOptions)", "public com.mongodb.WriteResult remove(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionRemoveOptions)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject, int, int, int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject, int, int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject)", "public com.mongodb.DBCursor find(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find()", "public com.mongodb.DBCursor find()"], ["com.mongodb.DBCursor", "com.mongodb.DBCollection.find(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindOptions)", "public com.mongodb.DBCursor find(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindOptions)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne()", "public com.mongodb.DBObject findOne()"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(java.lang.Object)", "public com.mongodb.DBObject findOne(java.lang.Object)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(java.lang.Object, com.mongodb.DBObject)", "public com.mongodb.DBObject findOne(java.lang.Object, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findOne(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindOptions)", "public com.mongodb.DBObject findOne(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindOptions)"], ["long", "com.mongodb.DBCollection.count()", "public long count()"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject)", "public long count(com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject, com.mongodb.ReadPreference)", "public long count(com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.count(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionCountOptions)", "public long count(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionCountOptions)"], ["long", "com.mongodb.DBCollection.getCount()", "public long getCount()"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.ReadPreference)", "public long getCount(com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject)", "public long getCount(com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long, com.mongodb.ReadPreference)", "public long getCount(com.mongodb.DBObject, com.mongodb.DBObject, long, long, com.mongodb.ReadPreference)"], ["long", "com.mongodb.DBCollection.getCount(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionCountOptions)", "public long getCount(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionCountOptions)"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.rename(java.lang.String)", "public com.mongodb.DBCollection rename(java.lang.String)"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.rename(java.lang.String, boolean)", "public com.mongodb.DBCollection rename(java.lang.String, boolean)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String)", "public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)", "public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.ReadPreference)", "public com.mongodb.DBObject group(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.ReadPreference)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.GroupCommand)", "public com.mongodb.DBObject group(com.mongodb.GroupCommand)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.group(com.mongodb.GroupCommand, com.mongodb.ReadPreference)", "public com.mongodb.DBObject group(com.mongodb.GroupCommand, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String)", "public java.util.List distinct(java.lang.String)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.ReadPreference)", "public java.util.List distinct(java.lang.String, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.DBObject)", "public java.util.List distinct(java.lang.String, com.mongodb.DBObject)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public java.util.List distinct(java.lang.String, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["java.util.List", "com.mongodb.DBCollection.distinct(java.lang.String, com.mongodb.client.model.DBCollectionDistinctOptions)", "public java.util.List distinct(java.lang.String, com.mongodb.client.model.DBCollectionDistinctOptions)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.DBObject)", "public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.DBObject)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)", "public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.MapReduceOutput mapReduce(java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.MapReduceOutput", "com.mongodb.DBCollection.mapReduce(com.mongodb.MapReduceCommand)", "public com.mongodb.MapReduceOutput mapReduce(com.mongodb.MapReduceCommand)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(com.mongodb.DBObject, com.mongodb.DBObject...)", "public com.mongodb.AggregationOutput aggregate(com.mongodb.DBObject, com.mongodb.DBObject...)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.AggregationOutput aggregate(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.AggregationOutput", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.ReadPreference)", "public com.mongodb.AggregationOutput aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.ReadPreference)"], ["com.mongodb.Cursor", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)", "public com.mongodb.Cursor aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)"], ["com.mongodb.Cursor", "com.mongodb.DBCollection.aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions, com.mongodb.ReadPreference)", "public com.mongodb.Cursor aggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions, com.mongodb.ReadPreference)"], ["com.mongodb.CommandResult", "com.mongodb.DBCollection.explainAggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)", "public com.mongodb.CommandResult explainAggregate(java.util.List<? extends com.mongodb.DBObject>, com.mongodb.AggregationOptions)"], ["java.util.List<com.mongodb.Cursor>", "com.mongodb.DBCollection.parallelScan(com.mongodb.ParallelScanOptions)", "public java.util.List<com.mongodb.Cursor> parallelScan(com.mongodb.ParallelScanOptions)"], ["java.lang.String", "com.mongodb.DBCollection.getName()", "public java.lang.String getName()"], ["java.lang.String", "com.mongodb.DBCollection.getFullName()", "public java.lang.String getFullName()"], ["com.mongodb.DBCollection", "com.mongodb.DBCollection.getCollection(java.lang.String)", "public com.mongodb.DBCollection getCollection(java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(java.lang.String)", "public void createIndex(java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, java.lang.String)", "public void createIndex(com.mongodb.DBObject, java.lang.String)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, java.lang.String, boolean)", "public void createIndex(com.mongodb.DBObject, java.lang.String, boolean)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject)", "public void createIndex(com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.createIndex(com.mongodb.DBObject, com.mongodb.DBObject)", "public void createIndex(com.mongodb.DBObject, com.mongodb.DBObject)"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCollection.getHintFields()", "public java.util.List<com.mongodb.DBObject> getHintFields()"], ["void", "com.mongodb.DBCollection.setHintFields(java.util.List<? extends com.mongodb.DBObject>)", "public void setHintFields(java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndRemove(com.mongodb.DBObject)", "public com.mongodb.DBObject findAndRemove(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, com.mongodb.WriteConcern)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit, com.mongodb.WriteConcern)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, long, java.util.concurrent.TimeUnit, com.mongodb.WriteConcern)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, boolean, long, java.util.concurrent.TimeUnit)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, boolean, long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, boolean, long, java.util.concurrent.TimeUnit, com.mongodb.WriteConcern)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, boolean, com.mongodb.DBObject, boolean, boolean, boolean, long, java.util.concurrent.TimeUnit, com.mongodb.WriteConcern)"], ["com.mongodb.DBObject", "com.mongodb.DBCollection.findAndModify(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindAndModifyOptions)", "public com.mongodb.DBObject findAndModify(com.mongodb.DBObject, com.mongodb.client.model.DBCollectionFindAndModifyOptions)"], ["com.mongodb.DB", "com.mongodb.DBCollection.getDB()", "public com.mongodb.DB getDB()"], ["com.mongodb.WriteConcern", "com.mongodb.DBCollection.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["void", "com.mongodb.DBCollection.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.ReadPreference", "com.mongodb.DBCollection.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["void", "com.mongodb.DBCollection.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["void", "com.mongodb.DBCollection.setReadConcern(com.mongodb.ReadConcern)", "public void setReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.ReadConcern", "com.mongodb.DBCollection.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["void", "com.mongodb.DBCollection.slaveOk()", "public void slaveOk()"], ["void", "com.mongodb.DBCollection.addOption(int)", "public void addOption(int)"], ["void", "com.mongodb.DBCollection.resetOptions()", "public void resetOptions()"], ["int", "com.mongodb.DBCollection.getOptions()", "public int getOptions()"], ["void", "com.mongodb.DBCollection.setOptions(int)", "public void setOptions(int)"], ["void", "com.mongodb.DBCollection.drop()", "public void drop()"], ["synchronized", "com.mongodb.DBCollection.com.mongodb.DBDecoderFactory getDBDecoderFactory()", "public synchronized com.mongodb.DBDecoderFactory getDBDecoderFactory()"], ["synchronized", "com.mongodb.DBCollection.void setDBDecoderFactory(com.mongodb.DBDecoderFactory)", "public synchronized void setDBDecoderFactory(com.mongodb.DBDecoderFactory)"], ["synchronized", "com.mongodb.DBCollection.com.mongodb.DBEncoderFactory getDBEncoderFactory()", "public synchronized com.mongodb.DBEncoderFactory getDBEncoderFactory()"], ["synchronized", "com.mongodb.DBCollection.void setDBEncoderFactory(com.mongodb.DBEncoderFactory)", "public synchronized void setDBEncoderFactory(com.mongodb.DBEncoderFactory)"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCollection.getIndexInfo()", "public java.util.List<com.mongodb.DBObject> getIndexInfo()"], ["void", "com.mongodb.DBCollection.dropIndex(com.mongodb.DBObject)", "public void dropIndex(com.mongodb.DBObject)"], ["void", "com.mongodb.DBCollection.dropIndex(java.lang.String)", "public void dropIndex(java.lang.String)"], ["void", "com.mongodb.DBCollection.dropIndexes()", "public void dropIndexes()"], ["void", "com.mongodb.DBCollection.dropIndexes(java.lang.String)", "public void dropIndexes(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DBCollection.getStats()", "public com.mongodb.CommandResult getStats()"], ["boolean", "com.mongodb.DBCollection.isCapped()", "public boolean isCapped()"], ["java.lang.Class", "com.mongodb.DBCollection.getObjectClass()", "public java.lang.Class getObjectClass()"], ["void", "com.mongodb.DBCollection.setObjectClass(java.lang.Class<? extends com.mongodb.DBObject>)", "public void setObjectClass(java.lang.Class<? extends com.mongodb.DBObject>)"], ["void", "com.mongodb.DBCollection.setInternalClass(java.lang.String, java.lang.Class<? extends com.mongodb.DBObject>)", "public void setInternalClass(java.lang.String, java.lang.Class<? extends com.mongodb.DBObject>)"], ["java.lang.String", "com.mongodb.DBCollection.toString()", "public java.lang.String toString()"], ["com.mongodb.BulkWriteOperation", "com.mongodb.DBCollection.initializeOrderedBulkOperation()", "public com.mongodb.BulkWriteOperation initializeOrderedBulkOperation()"], ["com.mongodb.BulkWriteOperation", "com.mongodb.DBCollection.initializeUnorderedBulkOperation()", "public com.mongodb.BulkWriteOperation initializeUnorderedBulkOperation()"], ["boolean", "com.mongodb.BulkWriteOperation.isOrdered()", "public boolean isOrdered()"], ["java.lang.Boolean", "com.mongodb.BulkWriteOperation.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["void", "com.mongodb.BulkWriteOperation.setBypassDocumentValidation(java.lang.Boolean)", "public void setBypassDocumentValidation(java.lang.Boolean)"], ["void", "com.mongodb.BulkWriteOperation.insert(com.mongodb.DBObject)", "public void insert(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteRequestBuilder", "com.mongodb.BulkWriteOperation.find(com.mongodb.DBObject)", "public com.mongodb.BulkWriteRequestBuilder find(com.mongodb.DBObject)"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteOperation.execute()", "public com.mongodb.BulkWriteResult execute()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteOperation.execute(com.mongodb.WriteConcern)", "public com.mongodb.BulkWriteResult execute(com.mongodb.WriteConcern)"], ["boolean", "com.mongodb.CursorType$3.isTailable()", "public boolean isTailable()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference, boolean)", "public com.mongodb.DBCursor(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.ReadPreference, boolean)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.copy()", "public com.mongodb.DBCursor copy()"], ["boolean", "com.mongodb.DBCursor.hasNext()", "public boolean hasNext()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.next()", "public com.mongodb.DBObject next()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.tryNext()", "public com.mongodb.DBObject tryNext()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.curr()", "public com.mongodb.DBObject curr()"], ["void", "com.mongodb.DBCursor.remove()", "public void remove()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.addOption(int)", "public com.mongodb.DBCursor addOption(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setOptions(int)", "public com.mongodb.DBCursor setOptions(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.resetOptions()", "public com.mongodb.DBCursor resetOptions()"], ["int", "com.mongodb.DBCursor.getOptions()", "public int getOptions()"], ["int", "com.mongodb.DBCursor.getLimit()", "public int getLimit()"], ["int", "com.mongodb.DBCursor.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.addSpecial(java.lang.String, java.lang.Object)", "public com.mongodb.DBCursor addSpecial(java.lang.String, java.lang.Object)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.comment(java.lang.String)", "public com.mongodb.DBCursor comment(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.maxScan(int)", "public com.mongodb.DBCursor maxScan(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.max(com.mongodb.DBObject)", "public com.mongodb.DBCursor max(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.min(com.mongodb.DBObject)", "public com.mongodb.DBCursor min(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.returnKey()", "public com.mongodb.DBCursor returnKey()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.showDiskLoc()", "public com.mongodb.DBCursor showDiskLoc()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.hint(com.mongodb.DBObject)", "public com.mongodb.DBCursor hint(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.hint(java.lang.String)", "public com.mongodb.DBCursor hint(java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.DBCursor maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.snapshot()", "public com.mongodb.DBCursor snapshot()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.explain()", "public com.mongodb.DBObject explain()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.cursorType(com.mongodb.CursorType)", "public com.mongodb.DBCursor cursorType(com.mongodb.CursorType)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.oplogReplay(boolean)", "public com.mongodb.DBCursor oplogReplay(boolean)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.noCursorTimeout(boolean)", "public com.mongodb.DBCursor noCursorTimeout(boolean)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.partial(boolean)", "public com.mongodb.DBCursor partial(boolean)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.sort(com.mongodb.DBObject)", "public com.mongodb.DBCursor sort(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.limit(int)", "public com.mongodb.DBCursor limit(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.batchSize(int)", "public com.mongodb.DBCursor batchSize(int)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.skip(int)", "public com.mongodb.DBCursor skip(int)"], ["long", "com.mongodb.DBCursor.getCursorId()", "public long getCursorId()"], ["int", "com.mongodb.DBCursor.numSeen()", "public int numSeen()"], ["void", "com.mongodb.DBCursor.close()", "public void close()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.slaveOk()", "public com.mongodb.DBCursor slaveOk()"], ["java.util.Iterator<com.mongodb.DBObject>", "com.mongodb.DBCursor.iterator()", "public java.util.Iterator<com.mongodb.DBObject> iterator()"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCursor.toArray()", "public java.util.List<com.mongodb.DBObject> toArray()"], ["java.util.List<com.mongodb.DBObject>", "com.mongodb.DBCursor.toArray(int)", "public java.util.List<com.mongodb.DBObject> toArray(int)"], ["int", "com.mongodb.DBCursor.count()", "public int count()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.one()", "public com.mongodb.DBObject one()"], ["int", "com.mongodb.DBCursor.length()", "public int length()"], ["int", "com.mongodb.DBCursor.itcount()", "public int itcount()"], ["int", "com.mongodb.DBCursor.size()", "public int size()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.getKeysWanted()", "public com.mongodb.DBObject getKeysWanted()"], ["com.mongodb.DBObject", "com.mongodb.DBCursor.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBCollection", "com.mongodb.DBCursor.getCollection()", "public com.mongodb.DBCollection getCollection()"], ["com.mongodb.ServerAddress", "com.mongodb.DBCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.DBCursor setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.DBCursor.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.client.model.Collation", "com.mongodb.DBCursor.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setCollation(com.mongodb.client.model.Collation)", "public com.mongodb.DBCursor setCollation(com.mongodb.client.model.Collation)"], ["com.mongodb.DBCursor", "com.mongodb.DBCursor.setDecoderFactory(com.mongodb.DBDecoderFactory)", "public com.mongodb.DBCursor setDecoderFactory(com.mongodb.DBDecoderFactory)"], ["com.mongodb.DBDecoderFactory", "com.mongodb.DBCursor.getDecoderFactory()", "public com.mongodb.DBDecoderFactory getDecoderFactory()"], ["java.lang.String", "com.mongodb.DBCursor.toString()", "public java.lang.String toString()"], ["java.lang.Object", "com.mongodb.DBCursor.next()", "public java.lang.Object next()"], ["<T> T", "com.mongodb.assertions.Assertions.notNull(java.lang.String, T)", "public static <T> T notNull(java.lang.String, T)"], ["<T> T", "com.mongodb.assertions.Assertions.notNull(java.lang.String, T, com.mongodb.async.SingleResultCallback<?>)", "public static <T> T notNull(java.lang.String, T, com.mongodb.async.SingleResultCallback<?>)"], ["void", "com.mongodb.assertions.Assertions.isTrue(java.lang.String, boolean)", "public static void isTrue(java.lang.String, boolean)"], ["void", "com.mongodb.assertions.Assertions.isTrue(java.lang.String, boolean, com.mongodb.async.SingleResultCallback<?>)", "public static void isTrue(java.lang.String, boolean, com.mongodb.async.SingleResultCallback<?>)"], ["void", "com.mongodb.assertions.Assertions.isTrueArgument(java.lang.String, boolean)", "public static void isTrueArgument(java.lang.String, boolean)"], ["com.mongodb.MongoCursorNotFoundException", "com.mongodb.MongoCursorNotFoundException(long, com.mongodb.ServerAddress)", "public com.mongodb.MongoCursorNotFoundException(long, com.mongodb.ServerAddress)"], ["long", "com.mongodb.MongoCursorNotFoundException.getCursorId()", "public long getCursorId()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoCursorNotFoundException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createCredential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createScramSha1Credential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createScramSha1Credential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createScramSha256Credential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createScramSha256Credential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoCRCredential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createMongoCRCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoX509Credential(java.lang.String)", "public static com.mongodb.MongoCredential createMongoX509Credential(java.lang.String)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createMongoX509Credential()", "public static com.mongodb.MongoCredential createMongoX509Credential()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createPlainCredential(java.lang.String, java.lang.String, char[])", "public static com.mongodb.MongoCredential createPlainCredential(java.lang.String, java.lang.String, char[])"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.createGSSAPICredential(java.lang.String)", "public static com.mongodb.MongoCredential createGSSAPICredential(java.lang.String)"], ["<T> com.mongodb.MongoCredential", "com.mongodb.MongoCredential.withMechanismProperty(java.lang.String, T)", "public <T> com.mongodb.MongoCredential withMechanismProperty(java.lang.String, T)"], ["com.mongodb.MongoCredential", "com.mongodb.MongoCredential.withMechanism(com.mongodb.AuthenticationMechanism)", "public com.mongodb.MongoCredential withMechanism(com.mongodb.AuthenticationMechanism)"], ["java.lang.String", "com.mongodb.MongoCredential.getMechanism()", "public java.lang.String getMechanism()"], ["com.mongodb.AuthenticationMechanism", "com.mongodb.MongoCredential.getAuthenticationMechanism()", "public com.mongodb.AuthenticationMechanism getAuthenticationMechanism()"], ["java.lang.String", "com.mongodb.MongoCredential.getUserName()", "public java.lang.String getUserName()"], ["java.lang.String", "com.mongodb.MongoCredential.getSource()", "public java.lang.String getSource()"], ["char[]", "com.mongodb.MongoCredential.getPassword()", "public char[] getPassword()"], ["<T> T", "com.mongodb.MongoCredential.getMechanismProperty(java.lang.String, T)", "public <T> T getMechanismProperty(java.lang.String, T)"], ["boolean", "com.mongodb.MongoCredential.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoCredential.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoCredential.toString()", "public java.lang.String toString()"], ["java.lang.Iterable<com.mongodb.DBObject>", "com.mongodb.AggregationOutput.results()", "public java.lang.Iterable<com.mongodb.DBObject> results()"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteException.getWriteResult()", "public com.mongodb.BulkWriteResult getWriteResult()"], ["java.util.List<com.mongodb.BulkWriteError>", "com.mongodb.BulkWriteException.getWriteErrors()", "public java.util.List<com.mongodb.BulkWriteError> getWriteErrors()"], ["com.mongodb.WriteConcernError", "com.mongodb.BulkWriteException.getWriteConcernError()", "public com.mongodb.WriteConcernError getWriteConcernError()"], ["boolean", "com.mongodb.BulkWriteException.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.BulkWriteException.hashCode()", "public int hashCode()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder()", "public com.mongodb.ParallelScanOptions$Builder()"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.numCursors(int)", "public com.mongodb.ParallelScanOptions$Builder numCursors(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.batchSize(int)", "public com.mongodb.ParallelScanOptions$Builder batchSize(int)"], ["com.mongodb.ParallelScanOptions$Builder", "com.mongodb.ParallelScanOptions$Builder.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.ParallelScanOptions$Builder readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ParallelScanOptions", "com.mongodb.ParallelScanOptions$Builder.build()", "public com.mongodb.ParallelScanOptions build()"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applyConnectionString(com.mongodb.ConnectionString)", "public com.mongodb.MongoClientSettings$Builder applyConnectionString(com.mongodb.ConnectionString)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applyToClusterSettings(com.mongodb.Block<com.mongodb.connection.ClusterSettings$Builder>)", "public com.mongodb.MongoClientSettings$Builder applyToClusterSettings(com.mongodb.Block<com.mongodb.connection.ClusterSettings$Builder>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applyToSocketSettings(com.mongodb.Block<com.mongodb.connection.SocketSettings$Builder>)", "public com.mongodb.MongoClientSettings$Builder applyToSocketSettings(com.mongodb.Block<com.mongodb.connection.SocketSettings$Builder>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applyToConnectionPoolSettings(com.mongodb.Block<com.mongodb.connection.ConnectionPoolSettings$Builder>)", "public com.mongodb.MongoClientSettings$Builder applyToConnectionPoolSettings(com.mongodb.Block<com.mongodb.connection.ConnectionPoolSettings$Builder>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applyToServerSettings(com.mongodb.Block<com.mongodb.connection.ServerSettings$Builder>)", "public com.mongodb.MongoClientSettings$Builder applyToServerSettings(com.mongodb.Block<com.mongodb.connection.ServerSettings$Builder>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applyToSslSettings(com.mongodb.Block<com.mongodb.connection.SslSettings$Builder>)", "public com.mongodb.MongoClientSettings$Builder applyToSslSettings(com.mongodb.Block<com.mongodb.connection.SslSettings$Builder>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.MongoClientSettings$Builder readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.MongoClientSettings$Builder writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.retryWrites(boolean)", "public com.mongodb.MongoClientSettings$Builder retryWrites(boolean)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.retryReads(boolean)", "public com.mongodb.MongoClientSettings$Builder retryReads(boolean)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.readConcern(com.mongodb.ReadConcern)", "public com.mongodb.MongoClientSettings$Builder readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.credential(com.mongodb.MongoCredential)", "public com.mongodb.MongoClientSettings$Builder credential(com.mongodb.MongoCredential)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.codecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.MongoClientSettings$Builder codecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.streamFactoryFactory(com.mongodb.connection.StreamFactoryFactory)", "public com.mongodb.MongoClientSettings$Builder streamFactoryFactory(com.mongodb.connection.StreamFactoryFactory)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.addCommandListener(com.mongodb.event.CommandListener)", "public com.mongodb.MongoClientSettings$Builder addCommandListener(com.mongodb.event.CommandListener)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.commandListenerList(java.util.List<com.mongodb.event.CommandListener>)", "public com.mongodb.MongoClientSettings$Builder commandListenerList(java.util.List<com.mongodb.event.CommandListener>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.applicationName(java.lang.String)", "public com.mongodb.MongoClientSettings$Builder applicationName(java.lang.String)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.compressorList(java.util.List<com.mongodb.MongoCompressor>)", "public com.mongodb.MongoClientSettings$Builder compressorList(java.util.List<com.mongodb.MongoCompressor>)"], ["com.mongodb.MongoClientSettings$Builder", "com.mongodb.MongoClientSettings$Builder.autoEncryptionSettings(com.mongodb.AutoEncryptionSettings)", "public com.mongodb.MongoClientSettings$Builder autoEncryptionSettings(com.mongodb.AutoEncryptionSettings)"], ["com.mongodb.MongoClientSettings", "com.mongodb.MongoClientSettings$Builder.build()", "public com.mongodb.MongoClientSettings build()"], ["com.mongodb.MongoNotPrimaryException", "com.mongodb.MongoNotPrimaryException(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public com.mongodb.MongoNotPrimaryException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["com.mongodb.MongoNotPrimaryException", "com.mongodb.MongoNotPrimaryException(com.mongodb.ServerAddress)", "public com.mongodb.MongoNotPrimaryException(com.mongodb.ServerAddress)"], ["com.mongodb.MongoSocketWriteException", "com.mongodb.MongoSocketWriteException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)", "public com.mongodb.MongoSocketWriteException(java.lang.String, com.mongodb.ServerAddress, java.lang.Throwable)"], ["com.mongodb.MongoClientURI", "com.mongodb.MongoClientURI(java.lang.String)", "public com.mongodb.MongoClientURI(java.lang.String)"], ["com.mongodb.MongoClientURI", "com.mongodb.MongoClientURI(java.lang.String, com.mongodb.MongoClientOptions$Builder)", "public com.mongodb.MongoClientURI(java.lang.String, com.mongodb.MongoClientOptions$Builder)"], ["java.lang.String", "com.mongodb.MongoClientURI.getUsername()", "public java.lang.String getUsername()"], ["char[]", "com.mongodb.MongoClientURI.getPassword()", "public char[] getPassword()"], ["java.util.List<java.lang.String>", "com.mongodb.MongoClientURI.getHosts()", "public java.util.List<java.lang.String> getHosts()"], ["java.lang.String", "com.mongodb.MongoClientURI.getDatabase()", "public java.lang.String getDatabase()"], ["java.lang.String", "com.mongodb.MongoClientURI.getCollection()", "public java.lang.String getCollection()"], ["java.lang.String", "com.mongodb.MongoClientURI.getURI()", "public java.lang.String getURI()"], ["com.mongodb.MongoCredential", "com.mongodb.MongoClientURI.getCredentials()", "public com.mongodb.MongoCredential getCredentials()"], ["com.mongodb.MongoClientOptions", "com.mongodb.MongoClientURI.getOptions()", "public com.mongodb.MongoClientOptions getOptions()"], ["boolean", "com.mongodb.MongoClientURI.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoClientURI.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.MongoClientURI.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoSocketException", "com.mongodb.MongoSocketException(java.lang.String, com.mongodb.ServerAddress)", "public com.mongodb.MongoSocketException(java.lang.String, com.mongodb.ServerAddress)"], ["com.mongodb.ServerAddress", "com.mongodb.MongoSocketException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.DB", "com.mongodb.DB(com.mongodb.Mongo, java.lang.String)", "public com.mongodb.DB(com.mongodb.Mongo, java.lang.String)"], ["com.mongodb.Mongo", "com.mongodb.DB.getMongo()", "public com.mongodb.Mongo getMongo()"], ["com.mongodb.MongoClient", "com.mongodb.DB.getMongoClient()", "public com.mongodb.MongoClient getMongoClient()"], ["void", "com.mongodb.DB.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["void", "com.mongodb.DB.setWriteConcern(com.mongodb.WriteConcern)", "public void setWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.ReadPreference", "com.mongodb.DB.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.DB.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["void", "com.mongodb.DB.setReadConcern(com.mongodb.ReadConcern)", "public void setReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.ReadConcern", "com.mongodb.DB.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.DBCollection", "com.mongodb.DB.getCollection(java.lang.String)", "public com.mongodb.DBCollection getCollection(java.lang.String)"], ["void", "com.mongodb.DB.dropDatabase()", "public void dropDatabase()"], ["com.mongodb.DBCollection", "com.mongodb.DB.getCollectionFromString(java.lang.String)", "public com.mongodb.DBCollection getCollectionFromString(java.lang.String)"], ["java.lang.String", "com.mongodb.DB.getName()", "public java.lang.String getName()"], ["java.util.Set<java.lang.String>", "com.mongodb.DB.getCollectionNames()", "public java.util.Set<java.lang.String> getCollectionNames()"], ["com.mongodb.DBCollection", "com.mongodb.DB.createCollection(java.lang.String, com.mongodb.DBObject)", "public com.mongodb.DBCollection createCollection(java.lang.String, com.mongodb.DBObject)"], ["com.mongodb.DBCollection", "com.mongodb.DB.createView(java.lang.String, java.lang.String, java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.DBCollection createView(java.lang.String, java.lang.String, java.util.List<? extends com.mongodb.DBObject>)"], ["com.mongodb.DBCollection", "com.mongodb.DB.createView(java.lang.String, java.lang.String, java.util.List<? extends com.mongodb.DBObject>, com.mongodb.client.model.DBCreateViewOptions)", "public com.mongodb.DBCollection createView(java.lang.String, java.lang.String, java.util.List<? extends com.mongodb.DBObject>, com.mongodb.client.model.DBCreateViewOptions)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(java.lang.String)", "public com.mongodb.CommandResult command(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject)", "public com.mongodb.CommandResult command(com.mongodb.DBObject)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.DBEncoder)", "public com.mongodb.CommandResult command(com.mongodb.DBObject, com.mongodb.DBEncoder)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.ReadPreference, com.mongodb.DBEncoder)", "public com.mongodb.CommandResult command(com.mongodb.DBObject, com.mongodb.ReadPreference, com.mongodb.DBEncoder)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(com.mongodb.DBObject, com.mongodb.ReadPreference)", "public com.mongodb.CommandResult command(com.mongodb.DBObject, com.mongodb.ReadPreference)"], ["com.mongodb.CommandResult", "com.mongodb.DB.command(java.lang.String, com.mongodb.ReadPreference)", "public com.mongodb.CommandResult command(java.lang.String, com.mongodb.ReadPreference)"], ["com.mongodb.DB", "com.mongodb.DB.getSisterDB(java.lang.String)", "public com.mongodb.DB getSisterDB(java.lang.String)"], ["boolean", "com.mongodb.DB.collectionExists(java.lang.String)", "public boolean collectionExists(java.lang.String)"], ["com.mongodb.CommandResult", "com.mongodb.DB.doEval(java.lang.String, java.lang.Object...)", "public com.mongodb.CommandResult doEval(java.lang.String, java.lang.Object...)"], ["java.lang.Object", "com.mongodb.DB.eval(java.lang.String, java.lang.Object...)", "public java.lang.Object eval(java.lang.String, java.lang.Object...)"], ["com.mongodb.CommandResult", "com.mongodb.DB.getStats()", "public com.mongodb.CommandResult getStats()"], ["com.mongodb.WriteResult", "com.mongodb.DB.addUser(java.lang.String, char[])", "public com.mongodb.WriteResult addUser(java.lang.String, char[])"], ["com.mongodb.WriteResult", "com.mongodb.DB.addUser(java.lang.String, char[], boolean)", "public com.mongodb.WriteResult addUser(java.lang.String, char[], boolean)"], ["com.mongodb.WriteResult", "com.mongodb.DB.removeUser(java.lang.String)", "public com.mongodb.WriteResult removeUser(java.lang.String)"], ["void", "com.mongodb.DB.slaveOk()", "public void slaveOk()"], ["void", "com.mongodb.DB.addOption(int)", "public void addOption(int)"], ["void", "com.mongodb.DB.setOptions(int)", "public void setOptions(int)"], ["void", "com.mongodb.DB.resetOptions()", "public void resetOptions()"], ["int", "com.mongodb.DB.getOptions()", "public int getOptions()"], ["java.lang.String", "com.mongodb.DB.toString()", "public java.lang.String toString()"], ["com.mongodb.LazyDBEncoder", "com.mongodb.LazyDBEncoder()", "public com.mongodb.LazyDBEncoder()"], ["int", "com.mongodb.LazyDBEncoder.writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)", "public int writeObject(org.bson.io.OutputBuffer, org.bson.BSONObject)"], ["boolean", "com.mongodb.CursorType$1.isTailable()", "public boolean isTailable()"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFSDBFile()", "public com.mongodb.gridfs.GridFSDBFile()"], ["java.io.InputStream", "com.mongodb.gridfs.GridFSDBFile.getInputStream()", "public java.io.InputStream getInputStream()"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.lang.String)", "public long writeTo(java.lang.String) throws java.io.IOException"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.io.File)", "public long writeTo(java.io.File) throws java.io.IOException"], ["long", "com.mongodb.gridfs.GridFSDBFile.writeTo(java.io.OutputStream)", "public long writeTo(java.io.OutputStream) throws java.io.IOException"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.available()", "public int available()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read()", "public int read()"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read(byte[])", "public int read(byte[])"], ["int", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.read(byte[], int, int)", "public int read(byte[], int, int)"], ["long", "com.mongodb.gridfs.GridFSDBFile$GridFSInputStream.skip(long)", "public long skip(long) throws java.io.IOException"], ["com.mongodb.gridfs.CLI", "com.mongodb.gridfs.CLI()", "public com.mongodb.gridfs.CLI()"], ["void", "com.mongodb.gridfs.CLI.main(java.lang.String[])", "public static void main(java.lang.String[]) throws java.lang.Exception"], ["void", "com.mongodb.gridfs.GridFSInputFile.setId(java.lang.Object)", "public void setId(java.lang.Object)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setFilename(java.lang.String)", "public void setFilename(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setContentType(java.lang.String)", "public void setContentType(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile.setChunkSize(long)", "public void setChunkSize(long)"], ["void", "com.mongodb.gridfs.GridFSInputFile.save()", "public void save()"], ["void", "com.mongodb.gridfs.GridFSInputFile.save(long)", "public void save(long)"], ["int", "com.mongodb.gridfs.GridFSInputFile.saveChunks()", "public int saveChunks() throws java.io.IOException"], ["int", "com.mongodb.gridfs.GridFSInputFile.saveChunks(long)", "public int saveChunks(long) throws java.io.IOException"], ["java.io.OutputStream", "com.mongodb.gridfs.GridFSInputFile.getOutputStream()", "public java.io.OutputStream getOutputStream()"], ["com.mongodb.gridfs.GridFSFile", "com.mongodb.gridfs.GridFSFile()", "public com.mongodb.gridfs.GridFSFile()"], ["void", "com.mongodb.gridfs.GridFSFile.save()", "public void save()"], ["void", "com.mongodb.gridfs.GridFSFile.validate()", "public void validate()"], ["int", "com.mongodb.gridfs.GridFSFile.numChunks()", "public int numChunks()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.getId()", "public java.lang.Object getId()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getFilename()", "public java.lang.String getFilename()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getContentType()", "public java.lang.String getContentType()"], ["long", "com.mongodb.gridfs.GridFSFile.getLength()", "public long getLength()"], ["long", "com.mongodb.gridfs.GridFSFile.getChunkSize()", "public long getChunkSize()"], ["java.util.Date", "com.mongodb.gridfs.GridFSFile.getUploadDate()", "public java.util.Date getUploadDate()"], ["java.util.List<java.lang.String>", "com.mongodb.gridfs.GridFSFile.getAliases()", "public java.util.List<java.lang.String> getAliases()"], ["com.mongodb.DBObject", "com.mongodb.gridfs.GridFSFile.getMetaData()", "public com.mongodb.DBObject getMetaData()"], ["void", "com.mongodb.gridfs.GridFSFile.setMetaData(com.mongodb.DBObject)", "public void setMetaData(com.mongodb.DBObject)"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.getMD5()", "public java.lang.String getMD5()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "com.mongodb.gridfs.GridFSFile.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.util.Set<java.lang.String>", "com.mongodb.gridfs.GridFSFile.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.gridfs.GridFSFile.isPartialObject()", "public boolean isPartialObject()"], ["void", "com.mongodb.gridfs.GridFSFile.markAsPartialObject()", "public void markAsPartialObject()"], ["java.lang.String", "com.mongodb.gridfs.GridFSFile.toString()", "public java.lang.String toString()"], ["void", "com.mongodb.gridfs.GridFSFile.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["void", "com.mongodb.gridfs.GridFSFile.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.util.Map<?, ?>", "com.mongodb.gridfs.GridFSFile.toMap()", "public java.util.Map<?, ?> toMap()"], ["java.lang.Object", "com.mongodb.gridfs.GridFSFile.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.write(int)", "public void write(int) throws java.io.IOException"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.write(byte[], int, int)", "public void write(byte[], int, int) throws java.io.IOException"], ["void", "com.mongodb.gridfs.GridFSInputFile$GridFSOutputStream.close()", "public void close()"], ["com.mongodb.gridfs.GridFS", "com.mongodb.gridfs.GridFS(com.mongodb.DB)", "public com.mongodb.gridfs.GridFS(com.mongodb.DB)"], ["com.mongodb.gridfs.GridFS", "com.mongodb.gridfs.GridFS(com.mongodb.DB, java.lang.String)", "public com.mongodb.gridfs.GridFS(com.mongodb.DB, java.lang.String)"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList()", "public com.mongodb.DBCursor getFileList()"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList(com.mongodb.DBObject)", "public com.mongodb.DBCursor getFileList(com.mongodb.DBObject)"], ["com.mongodb.DBCursor", "com.mongodb.gridfs.GridFS.getFileList(com.mongodb.DBObject, com.mongodb.DBObject)", "public com.mongodb.DBCursor getFileList(com.mongodb.DBObject, com.mongodb.DBObject)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.find(org.bson.types.ObjectId)", "public com.mongodb.gridfs.GridFSDBFile find(org.bson.types.ObjectId)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(org.bson.types.ObjectId)", "public com.mongodb.gridfs.GridFSDBFile findOne(org.bson.types.ObjectId)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(java.lang.String)", "public com.mongodb.gridfs.GridFSDBFile findOne(java.lang.String)"], ["com.mongodb.gridfs.GridFSDBFile", "com.mongodb.gridfs.GridFS.findOne(com.mongodb.DBObject)", "public com.mongodb.gridfs.GridFSDBFile findOne(com.mongodb.DBObject)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(java.lang.String)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(java.lang.String)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(java.lang.String, com.mongodb.DBObject)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(java.lang.String, com.mongodb.DBObject)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(com.mongodb.DBObject)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(com.mongodb.DBObject)"], ["java.util.List<com.mongodb.gridfs.GridFSDBFile>", "com.mongodb.gridfs.GridFS.find(com.mongodb.DBObject, com.mongodb.DBObject)", "public java.util.List<com.mongodb.gridfs.GridFSDBFile> find(com.mongodb.DBObject, com.mongodb.DBObject)"], ["void", "com.mongodb.gridfs.GridFS.remove(org.bson.types.ObjectId)", "public void remove(org.bson.types.ObjectId)"], ["void", "com.mongodb.gridfs.GridFS.remove(java.lang.String)", "public void remove(java.lang.String)"], ["void", "com.mongodb.gridfs.GridFS.remove(com.mongodb.DBObject)", "public void remove(com.mongodb.DBObject)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(byte[])", "public com.mongodb.gridfs.GridFSInputFile createFile(byte[])"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.File)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.File) throws java.io.IOException"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, boolean)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream, boolean)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, java.lang.String)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream, java.lang.String)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.io.InputStream, java.lang.String, boolean)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.io.InputStream, java.lang.String, boolean)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile(java.lang.String)", "public com.mongodb.gridfs.GridFSInputFile createFile(java.lang.String)"], ["com.mongodb.gridfs.GridFSInputFile", "com.mongodb.gridfs.GridFS.createFile()", "public com.mongodb.gridfs.GridFSInputFile createFile()"], ["java.lang.String", "com.mongodb.gridfs.GridFS.getBucketName()", "public java.lang.String getBucketName()"], ["com.mongodb.DB", "com.mongodb.gridfs.GridFS.getDB()", "public com.mongodb.DB getDB()"], ["java.lang.Boolean", "com.mongodb.ClientSessionOptions.isCausallyConsistent()", "public java.lang.Boolean isCausallyConsistent()"], ["com.mongodb.TransactionOptions", "com.mongodb.ClientSessionOptions.getDefaultTransactionOptions()", "public com.mongodb.TransactionOptions getDefaultTransactionOptions()"], ["boolean", "com.mongodb.ClientSessionOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ClientSessionOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.ClientSessionOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.ClientSessionOptions$Builder", "com.mongodb.ClientSessionOptions.builder()", "public static com.mongodb.ClientSessionOptions$Builder builder()"], ["com.mongodb.ClientSessionOptions$Builder", "com.mongodb.ClientSessionOptions.builder(com.mongodb.ClientSessionOptions)", "public static com.mongodb.ClientSessionOptions$Builder builder(com.mongodb.ClientSessionOptions)"], ["com.mongodb.DefaultDBCallback", "com.mongodb.DefaultDBCallback(com.mongodb.DBCollection)", "public com.mongodb.DefaultDBCallback(com.mongodb.DBCollection)"], ["org.bson.BSONObject", "com.mongodb.DefaultDBCallback.create()", "public org.bson.BSONObject create()"], ["org.bson.BSONObject", "com.mongodb.DefaultDBCallback.create(boolean, java.util.List<java.lang.String>)", "public org.bson.BSONObject create(boolean, java.util.List<java.lang.String>)"], ["void", "com.mongodb.DefaultDBCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)", "public void gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["java.lang.Object", "com.mongodb.DefaultDBCallback.objectDone()", "public java.lang.Object objectDone()"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)", "public com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.client.model.Collation)", "public com.mongodb.GroupCommand(com.mongodb.DBCollection, com.mongodb.DBObject, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.client.model.Collation)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, java.lang.String, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)", "public com.mongodb.GroupCommand(com.mongodb.DBCollection, java.lang.String, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String)"], ["com.mongodb.GroupCommand", "com.mongodb.GroupCommand(com.mongodb.DBCollection, java.lang.String, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.client.model.Collation)", "public com.mongodb.GroupCommand(com.mongodb.DBCollection, java.lang.String, com.mongodb.DBObject, com.mongodb.DBObject, java.lang.String, java.lang.String, com.mongodb.client.model.Collation)"], ["com.mongodb.DBObject", "com.mongodb.GroupCommand.toDBObject()", "public com.mongodb.DBObject toDBObject()"], ["com.mongodb.ConnectionString", "com.mongodb.ConnectionString(java.lang.String)", "public com.mongodb.ConnectionString(java.lang.String)"], ["java.lang.String", "com.mongodb.ConnectionString.getUsername()", "public java.lang.String getUsername()"], ["char[]", "com.mongodb.ConnectionString.getPassword()", "public char[] getPassword()"], ["boolean", "com.mongodb.ConnectionString.isSrvProtocol()", "public boolean isSrvProtocol()"], ["java.util.List<java.lang.String>", "com.mongodb.ConnectionString.getHosts()", "public java.util.List<java.lang.String> getHosts()"], ["java.lang.String", "com.mongodb.ConnectionString.getDatabase()", "public java.lang.String getDatabase()"], ["java.lang.String", "com.mongodb.ConnectionString.getCollection()", "public java.lang.String getCollection()"], ["java.lang.String", "com.mongodb.ConnectionString.getURI()", "public java.lang.String getURI()"], ["java.lang.String", "com.mongodb.ConnectionString.getConnectionString()", "public java.lang.String getConnectionString()"], ["java.util.List<com.mongodb.MongoCredential>", "com.mongodb.ConnectionString.getCredentialList()", "public java.util.List<com.mongodb.MongoCredential> getCredentialList()"], ["com.mongodb.MongoCredential", "com.mongodb.ConnectionString.getCredential()", "public com.mongodb.MongoCredential getCredential()"], ["com.mongodb.ReadPreference", "com.mongodb.ConnectionString.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.ReadConcern", "com.mongodb.ConnectionString.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.ConnectionString.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.ConnectionString.getRetryWrites()", "public boolean getRetryWrites()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getRetryWritesValue()", "public java.lang.Boolean getRetryWritesValue()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getRetryReads()", "public java.lang.Boolean getRetryReads()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMinConnectionPoolSize()", "public java.lang.Integer getMinConnectionPoolSize()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionPoolSize()", "public java.lang.Integer getMaxConnectionPoolSize()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getThreadsAllowedToBlockForConnectionMultiplier()", "public java.lang.Integer getThreadsAllowedToBlockForConnectionMultiplier()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxWaitTime()", "public java.lang.Integer getMaxWaitTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionIdleTime()", "public java.lang.Integer getMaxConnectionIdleTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getMaxConnectionLifeTime()", "public java.lang.Integer getMaxConnectionLifeTime()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getConnectTimeout()", "public java.lang.Integer getConnectTimeout()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getSocketTimeout()", "public java.lang.Integer getSocketTimeout()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getSslEnabled()", "public java.lang.Boolean getSslEnabled()"], ["java.lang.String", "com.mongodb.ConnectionString.getStreamType()", "public java.lang.String getStreamType()"], ["java.lang.Boolean", "com.mongodb.ConnectionString.getSslInvalidHostnameAllowed()", "public java.lang.Boolean getSslInvalidHostnameAllowed()"], ["java.lang.String", "com.mongodb.ConnectionString.getRequiredReplicaSetName()", "public java.lang.String getRequiredReplicaSetName()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getServerSelectionTimeout()", "public java.lang.Integer getServerSelectionTimeout()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getLocalThreshold()", "public java.lang.Integer getLocalThreshold()"], ["java.lang.Integer", "com.mongodb.ConnectionString.getHeartbeatFrequency()", "public java.lang.Integer getHeartbeatFrequency()"], ["java.lang.String", "com.mongodb.ConnectionString.getApplicationName()", "public java.lang.String getApplicationName()"], ["java.util.List<com.mongodb.MongoCompressor>", "com.mongodb.ConnectionString.getCompressorList()", "public java.util.List<com.mongodb.MongoCompressor> getCompressorList()"], ["java.lang.String", "com.mongodb.ConnectionString.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.ConnectionString.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.ConnectionString.hashCode()", "public int hashCode()"], ["com.mongodb.DBObject", "com.mongodb.RemoveRequest.getQuery()", "public com.mongodb.DBObject getQuery()"], ["boolean", "com.mongodb.RemoveRequest.isMulti()", "public boolean isMulti()"], ["java.lang.String", "com.mongodb.MongoClient$1.apply(org.bson.BsonDocument)", "public java.lang.String apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.MongoClient$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.TransactionOptions$Builder", "com.mongodb.TransactionOptions$Builder.readConcern(com.mongodb.ReadConcern)", "public com.mongodb.TransactionOptions$Builder readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.TransactionOptions$Builder", "com.mongodb.TransactionOptions$Builder.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.TransactionOptions$Builder writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.TransactionOptions$Builder", "com.mongodb.TransactionOptions$Builder.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.TransactionOptions$Builder readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.TransactionOptions$Builder", "com.mongodb.TransactionOptions$Builder.maxCommitTime(java.lang.Long, java.util.concurrent.TimeUnit)", "public com.mongodb.TransactionOptions$Builder maxCommitTime(java.lang.Long, java.util.concurrent.TimeUnit)"], ["com.mongodb.TransactionOptions", "com.mongodb.TransactionOptions$Builder.build()", "public com.mongodb.TransactionOptions build()"], ["com.mongodb.Tag", "com.mongodb.Tag(java.lang.String, java.lang.String)", "public com.mongodb.Tag(java.lang.String, java.lang.String)"], ["java.lang.String", "com.mongodb.Tag.getName()", "public java.lang.String getName()"], ["java.lang.String", "com.mongodb.Tag.getValue()", "public java.lang.String getValue()"], ["boolean", "com.mongodb.Tag.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.Tag.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.Tag.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoWaitQueueFullException", "com.mongodb.MongoWaitQueueFullException(java.lang.String)", "public com.mongodb.MongoWaitQueueFullException(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectFactory.getInstance()", "public com.mongodb.DBObject getInstance()"], ["com.mongodb.DBObject", "com.mongodb.BasicDBObjectFactory.getInstance(java.util.List<java.lang.String>)", "public com.mongodb.DBObject getInstance(java.util.List<java.lang.String>)"], ["com.mongodb.UnixServerAddress", "com.mongodb.UnixServerAddress(java.lang.String)", "public com.mongodb.UnixServerAddress(java.lang.String)"], ["java.net.InetSocketAddress", "com.mongodb.UnixServerAddress.getSocketAddress()", "public java.net.InetSocketAddress getSocketAddress()"], ["java.net.SocketAddress", "com.mongodb.UnixServerAddress.getUnixSocketAddress()", "public java.net.SocketAddress getUnixSocketAddress()"], ["java.lang.String", "com.mongodb.UnixServerAddress.toString()", "public java.lang.String toString()"], ["com.mongodb.ReadConcernLevel[]", "com.mongodb.ReadConcernLevel.values()", "public static com.mongodb.ReadConcernLevel[] values()"], ["com.mongodb.ReadConcernLevel", "com.mongodb.ReadConcernLevel.valueOf(java.lang.String)", "public static com.mongodb.ReadConcernLevel valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.ReadConcernLevel.getValue()", "public java.lang.String getValue()"], ["com.mongodb.ReadConcernLevel", "com.mongodb.ReadConcernLevel.fromString(java.lang.String)", "public static com.mongodb.ReadConcernLevel fromString(java.lang.String)"], ["void", "com.mongodb.Mongo$3.run()", "public void run()"], ["com.mongodb.MapReduceCommand", "com.mongodb.MapReduceCommand(com.mongodb.DBCollection, java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)", "public com.mongodb.MapReduceCommand(com.mongodb.DBCollection, java.lang.String, java.lang.String, java.lang.String, com.mongodb.MapReduceCommand$OutputType, com.mongodb.DBObject)"], ["void", "com.mongodb.MapReduceCommand.setVerbose(java.lang.Boolean)", "public void setVerbose(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.isVerbose()", "public java.lang.Boolean isVerbose()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getInput()", "public java.lang.String getInput()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getMap()", "public java.lang.String getMap()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getReduce()", "public java.lang.String getReduce()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getOutputTarget()", "public java.lang.String getOutputTarget()"], ["com.mongodb.MapReduceCommand$OutputType", "com.mongodb.MapReduceCommand.getOutputType()", "public com.mongodb.MapReduceCommand$OutputType getOutputType()"], ["java.lang.String", "com.mongodb.MapReduceCommand.getFinalize()", "public java.lang.String getFinalize()"], ["void", "com.mongodb.MapReduceCommand.setFinalize(java.lang.String)", "public void setFinalize(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.getQuery()", "public com.mongodb.DBObject getQuery()"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.getSort()", "public com.mongodb.DBObject getSort()"], ["void", "com.mongodb.MapReduceCommand.setSort(com.mongodb.DBObject)", "public void setSort(com.mongodb.DBObject)"], ["int", "com.mongodb.MapReduceCommand.getLimit()", "public int getLimit()"], ["void", "com.mongodb.MapReduceCommand.setLimit(int)", "public void setLimit(int)"], ["long", "com.mongodb.MapReduceCommand.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.MapReduceCommand.setMaxTime(long, java.util.concurrent.TimeUnit)", "public void setMaxTime(long, java.util.concurrent.TimeUnit)"], ["java.util.Map<java.lang.String, java.lang.Object>", "com.mongodb.MapReduceCommand.getScope()", "public java.util.Map<java.lang.String, java.lang.Object> getScope()"], ["void", "com.mongodb.MapReduceCommand.setScope(java.util.Map<java.lang.String, java.lang.Object>)", "public void setScope(java.util.Map<java.lang.String, java.lang.Object>)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.getJsMode()", "public java.lang.Boolean getJsMode()"], ["void", "com.mongodb.MapReduceCommand.setJsMode(java.lang.Boolean)", "public void setJsMode(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.MapReduceCommand.getOutputDB()", "public java.lang.String getOutputDB()"], ["void", "com.mongodb.MapReduceCommand.setOutputDB(java.lang.String)", "public void setOutputDB(java.lang.String)"], ["java.lang.Boolean", "com.mongodb.MapReduceCommand.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["void", "com.mongodb.MapReduceCommand.setBypassDocumentValidation(java.lang.Boolean)", "public void setBypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.DBObject", "com.mongodb.MapReduceCommand.toDBObject()", "public com.mongodb.DBObject toDBObject()"], ["void", "com.mongodb.MapReduceCommand.setReadPreference(com.mongodb.ReadPreference)", "public void setReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadPreference", "com.mongodb.MapReduceCommand.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.client.model.Collation", "com.mongodb.MapReduceCommand.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["void", "com.mongodb.MapReduceCommand.setCollation(com.mongodb.client.model.Collation)", "public void setCollation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.MapReduceCommand.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoClientException", "com.mongodb.MongoClientException(java.lang.String)", "public com.mongodb.MongoClientException(java.lang.String)"], ["com.mongodb.MongoClientException", "com.mongodb.MongoClientException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoClientException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.BulkWriteResult", "com.mongodb.BulkWriteResult()", "public com.mongodb.BulkWriteResult()"], ["com.mongodb.ReadConcern", "com.mongodb.TransactionOptions.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.WriteConcern", "com.mongodb.TransactionOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.ReadPreference", "com.mongodb.TransactionOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["java.lang.Long", "com.mongodb.TransactionOptions.getMaxCommitTime(java.util.concurrent.TimeUnit)", "public java.lang.Long getMaxCommitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.TransactionOptions$Builder", "com.mongodb.TransactionOptions.builder()", "public static com.mongodb.TransactionOptions$Builder builder()"], ["com.mongodb.TransactionOptions", "com.mongodb.TransactionOptions.merge(com.mongodb.TransactionOptions, com.mongodb.TransactionOptions)", "public static com.mongodb.TransactionOptions merge(com.mongodb.TransactionOptions, com.mongodb.TransactionOptions)"], ["boolean", "com.mongodb.TransactionOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.TransactionOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.TransactionOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.DefaultDBDecoder", "com.mongodb.DefaultDBDecoder()", "public com.mongodb.DefaultDBDecoder()"], ["com.mongodb.DBCallback", "com.mongodb.DefaultDBDecoder.getDBCallback(com.mongodb.DBCollection)", "public com.mongodb.DBCallback getDBCallback(com.mongodb.DBCollection)"], ["com.mongodb.DBObject", "com.mongodb.DefaultDBDecoder.decode(java.io.InputStream, com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(java.io.InputStream, com.mongodb.DBCollection) throws java.io.IOException"], ["com.mongodb.DBObject", "com.mongodb.DefaultDBDecoder.decode(byte[], com.mongodb.DBCollection)", "public com.mongodb.DBObject decode(byte[], com.mongodb.DBCollection)"], ["java.lang.String", "com.mongodb.DefaultDBDecoder.toString()", "public java.lang.String toString()"], ["long", "com.mongodb.MongoCursorAdapter.getCursorId()", "public long getCursorId()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoCursorAdapter.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["void", "com.mongodb.MongoCursorAdapter.close()", "public void close()"], ["boolean", "com.mongodb.MongoCursorAdapter.hasNext()", "public boolean hasNext()"], ["com.mongodb.DBObject", "com.mongodb.MongoCursorAdapter.next()", "public com.mongodb.DBObject next()"], ["void", "com.mongodb.MongoCursorAdapter.remove()", "public void remove()"], ["java.lang.Object", "com.mongodb.MongoCursorAdapter.next()", "public java.lang.Object next()"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings$Builder.keyVaultMongoClientSettings(com.mongodb.MongoClientSettings)", "public com.mongodb.AutoEncryptionSettings$Builder keyVaultMongoClientSettings(com.mongodb.MongoClientSettings)"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings$Builder.keyVaultNamespace(java.lang.String)", "public com.mongodb.AutoEncryptionSettings$Builder keyVaultNamespace(java.lang.String)"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings$Builder.kmsProviders(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>)", "public com.mongodb.AutoEncryptionSettings$Builder kmsProviders(java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>)"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings$Builder.schemaMap(java.util.Map<java.lang.String, org.bson.BsonDocument>)", "public com.mongodb.AutoEncryptionSettings$Builder schemaMap(java.util.Map<java.lang.String, org.bson.BsonDocument>)"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings$Builder.extraOptions(java.util.Map<java.lang.String, java.lang.Object>)", "public com.mongodb.AutoEncryptionSettings$Builder extraOptions(java.util.Map<java.lang.String, java.lang.Object>)"], ["com.mongodb.AutoEncryptionSettings$Builder", "com.mongodb.AutoEncryptionSettings$Builder.bypassAutoEncryption(boolean)", "public com.mongodb.AutoEncryptionSettings$Builder bypassAutoEncryption(boolean)"], ["com.mongodb.AutoEncryptionSettings", "com.mongodb.AutoEncryptionSettings$Builder.build()", "public com.mongodb.AutoEncryptionSettings build()"], ["com.mongodb.operation.BatchCursor<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl$WrappedMapReduceReadOperation.execute(com.mongodb.binding.ReadBinding)", "public com.mongodb.operation.BatchCursor<TResult> execute(com.mongodb.binding.ReadBinding)"], ["java.lang.Object", "com.mongodb.client.internal.MapReduceIterableImpl$WrappedMapReduceReadOperation.execute(com.mongodb.binding.ReadBinding)", "public java.lang.Object execute(com.mongodb.binding.ReadBinding)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["int", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.getCount()", "public int getCount()"], ["void", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.client.internal.ClientSessionBinding$SessionBindingConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.client.internal.MongoIterableImpl$1.apply(TResult)", "public void apply(TResult)"], ["void", "com.mongodb.client.internal.Java8FindIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.ListCollectionsIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.ListCollectionsIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.ListCollectionsIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ListCollectionsIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.ListCollectionsIterableImpl.batchSize(int)", "public com.mongodb.client.ListCollectionsIterable<TResult> batchSize(int)"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.ListCollectionsIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.ListCollectionsIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["com.mongodb.client.internal.ClientSessionBinding", "com.mongodb.client.internal.ClientSessionBinding(com.mongodb.client.ClientSession, boolean, com.mongodb.internal.binding.ClusterAwareReadWriteBinding)", "public com.mongodb.client.internal.ClientSessionBinding(com.mongodb.client.ClientSession, boolean, com.mongodb.internal.binding.ClusterAwareReadWriteBinding)"], ["com.mongodb.ReadPreference", "com.mongodb.client.internal.ClientSessionBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["int", "com.mongodb.client.internal.ClientSessionBinding.getCount()", "public int getCount()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.client.internal.ClientSessionBinding.retain()", "public com.mongodb.binding.ReadWriteBinding retain()"], ["void", "com.mongodb.client.internal.ClientSessionBinding.release()", "public void release()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.client.internal.ClientSessionBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.client.internal.ClientSessionBinding.getWriteConnectionSource()", "public com.mongodb.binding.ConnectionSource getWriteConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.client.internal.ClientSessionBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.client.internal.ClientSessionBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.client.internal.ClientSessionBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.client.internal.ClientSessionBinding.retain()", "public com.mongodb.binding.WriteBinding retain()"], ["com.mongodb.client.internal.ClientSessionImpl$TransactionState[]", "com.mongodb.client.internal.ClientSessionImpl$TransactionState.values()", "public static com.mongodb.client.internal.ClientSessionImpl$TransactionState[] values()"], ["com.mongodb.client.internal.ClientSessionImpl$TransactionState", "com.mongodb.client.internal.ClientSessionImpl$TransactionState.valueOf(java.lang.String)", "public static com.mongodb.client.internal.ClientSessionImpl$TransactionState valueOf(java.lang.String)"], ["void", "com.mongodb.client.internal.MappingIterable$2.apply(V)", "public void apply(V)"], ["boolean", "com.mongodb.client.internal.ClientSessionImpl.hasActiveTransaction()", "public boolean hasActiveTransaction()"], ["boolean", "com.mongodb.client.internal.ClientSessionImpl.notifyMessageSent()", "public boolean notifyMessageSent()"], ["com.mongodb.TransactionOptions", "com.mongodb.client.internal.ClientSessionImpl.getTransactionOptions()", "public com.mongodb.TransactionOptions getTransactionOptions()"], ["void", "com.mongodb.client.internal.ClientSessionImpl.startTransaction()", "public void startTransaction()"], ["void", "com.mongodb.client.internal.ClientSessionImpl.startTransaction(com.mongodb.TransactionOptions)", "public void startTransaction(com.mongodb.TransactionOptions)"], ["void", "com.mongodb.client.internal.ClientSessionImpl.commitTransaction()", "public void commitTransaction()"], ["void", "com.mongodb.client.internal.ClientSessionImpl.abortTransaction()", "public void abortTransaction()"], ["<T> T", "com.mongodb.client.internal.ClientSessionImpl.withTransaction(com.mongodb.client.TransactionBody<T>)", "public <T> T withTransaction(com.mongodb.client.TransactionBody<T>)"], ["<T> T", "com.mongodb.client.internal.ClientSessionImpl.withTransaction(com.mongodb.client.TransactionBody<T>, com.mongodb.TransactionOptions)", "public <T> T withTransaction(com.mongodb.client.TransactionBody<T>, com.mongodb.TransactionOptions)"], ["void", "com.mongodb.client.internal.ClientSessionImpl.close()", "public void close()"], ["boolean", "com.mongodb.client.internal.ClientSessionBinding$SyncClientSessionContext.isImplicitSession()", "public boolean isImplicitSession()"], ["boolean", "com.mongodb.client.internal.ClientSessionBinding$SyncClientSessionContext.notifyMessageSent()", "public boolean notifyMessageSent()"], ["boolean", "com.mongodb.client.internal.ClientSessionBinding$SyncClientSessionContext.hasActiveTransaction()", "public boolean hasActiveTransaction()"], ["com.mongodb.ReadConcern", "com.mongodb.client.internal.ClientSessionBinding$SyncClientSessionContext.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.client.MongoCursor<TDocument>", "com.mongodb.client.internal.ChangeStreamIterableImpl$1.iterator()", "public com.mongodb.client.MongoCursor<TDocument> iterator()"], ["com.mongodb.client.MongoChangeStreamCursor<TDocument>", "com.mongodb.client.internal.ChangeStreamIterableImpl$1.cursor()", "public com.mongodb.client.MongoChangeStreamCursor<TDocument> cursor()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TDocument>>", "com.mongodb.client.internal.ChangeStreamIterableImpl$1.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TDocument>> asReadOperation()"], ["com.mongodb.client.MongoCursor", "com.mongodb.client.internal.ChangeStreamIterableImpl$1.cursor()", "public com.mongodb.client.MongoCursor cursor()"], ["java.util.Iterator", "com.mongodb.client.internal.ChangeStreamIterableImpl$1.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.client.MongoDatabase", "com.mongodb.client.internal.SimpleMongoClients$1.getDatabase(java.lang.String)", "public com.mongodb.client.MongoDatabase getDatabase(java.lang.String)"], ["void", "com.mongodb.client.internal.SimpleMongoClients$1.close()", "public void close()"], ["long", "com.mongodb.client.internal.ClientSessionClock.now()", "public long now()"], ["void", "com.mongodb.client.internal.ClientSessionClock.setTime(long)", "public void setTime(long)"], ["void", "com.mongodb.client.internal.MongoMappingCursor.close()", "public void close()"], ["boolean", "com.mongodb.client.internal.MongoMappingCursor.hasNext()", "public boolean hasNext()"], ["U", "com.mongodb.client.internal.MongoMappingCursor.next()", "public U next()"], ["U", "com.mongodb.client.internal.MongoMappingCursor.tryNext()", "public U tryNext()"], ["void", "com.mongodb.client.internal.MongoMappingCursor.remove()", "public void remove()"], ["com.mongodb.ServerCursor", "com.mongodb.client.internal.MongoMappingCursor.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.client.internal.MongoMappingCursor.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["com.mongodb.client.internal.MongoClientDelegate", "com.mongodb.client.internal.MongoClientDelegate(com.mongodb.connection.Cluster, java.util.List<com.mongodb.MongoCredential>, java.lang.Object, com.mongodb.client.internal.Crypt)", "public com.mongodb.client.internal.MongoClientDelegate(com.mongodb.connection.Cluster, java.util.List<com.mongodb.MongoCredential>, java.lang.Object, com.mongodb.client.internal.Crypt)"], ["com.mongodb.client.internal.OperationExecutor", "com.mongodb.client.internal.MongoClientDelegate.getOperationExecutor()", "public com.mongodb.client.internal.OperationExecutor getOperationExecutor()"], ["com.mongodb.client.ClientSession", "com.mongodb.client.internal.MongoClientDelegate.createClientSession(com.mongodb.ClientSessionOptions, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.ReadPreference)", "public com.mongodb.client.ClientSession createClientSession(com.mongodb.ClientSessionOptions, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.ReadPreference)"], ["java.util.List<com.mongodb.ServerAddress>", "com.mongodb.client.internal.MongoClientDelegate.getServerAddressList()", "public java.util.List<com.mongodb.ServerAddress> getServerAddressList()"], ["void", "com.mongodb.client.internal.MongoClientDelegate.close()", "public void close()"], ["com.mongodb.connection.Cluster", "com.mongodb.client.internal.MongoClientDelegate.getCluster()", "public com.mongodb.connection.Cluster getCluster()"], ["com.mongodb.internal.session.ServerSessionPool", "com.mongodb.client.internal.MongoClientDelegate.getServerSessionPool()", "public com.mongodb.internal.session.ServerSessionPool getServerSessionPool()"], ["<TDocument, TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.findOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, org.bson.conversions.Bson, boolean)", "public <TDocument, TResult> com.mongodb.client.FindIterable<TResult> findOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, org.bson.conversions.Bson, boolean)"], ["<TDocument, TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.aggregateOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)", "public <TDocument, TResult> com.mongodb.client.AggregateIterable<TResult> aggregateOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)"], ["<TDocument, TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.aggregateOf(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)", "public <TDocument, TResult> com.mongodb.client.AggregateIterable<TResult> aggregateOf(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.changeStreamOf(com.mongodb.client.ClientSession, java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> changeStreamOf(com.mongodb.client.ClientSession, java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.changeStreamOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> changeStreamOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)"], ["<TDocument, TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.distinctOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, org.bson.conversions.Bson, boolean)", "public <TDocument, TResult> com.mongodb.client.DistinctIterable<TResult> distinctOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, org.bson.conversions.Bson, boolean)"], ["<TResult> com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.listDatabasesOf(com.mongodb.client.ClientSession, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public <TResult> com.mongodb.client.ListDatabasesIterable<TResult> listDatabasesOf(com.mongodb.client.ClientSession, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.listCollectionsOf(com.mongodb.client.ClientSession, java.lang.String, boolean, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public <TResult> com.mongodb.client.ListCollectionsIterable<TResult> listCollectionsOf(com.mongodb.client.ClientSession, java.lang.String, boolean, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.listIndexesOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public <TResult> com.mongodb.client.ListIndexesIterable<TResult> listIndexesOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TDocument, TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.FallbackMongoIterableFactory.mapReduceOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, java.lang.String)", "public <TDocument, TResult> com.mongodb.client.MapReduceIterable<TResult> mapReduceOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, java.lang.String)"], ["void", "com.mongodb.client.internal.Java8ListCollectionsIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["java.lang.String", "com.mongodb.client.internal.MongoDatabaseImpl$1.apply(org.bson.BsonDocument)", "public java.lang.String apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.client.internal.MongoDatabaseImpl$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.ReadPreference", "com.mongodb.client.internal.CryptBinding.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.client.internal.CryptBinding.getReadConnectionSource()", "public com.mongodb.binding.ConnectionSource getReadConnectionSource()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.client.internal.CryptBinding.getWriteConnectionSource()", "public com.mongodb.binding.ConnectionSource getWriteConnectionSource()"], ["com.mongodb.session.SessionContext", "com.mongodb.client.internal.CryptBinding.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["int", "com.mongodb.client.internal.CryptBinding.getCount()", "public int getCount()"], ["com.mongodb.binding.ReadWriteBinding", "com.mongodb.client.internal.CryptBinding.retain()", "public com.mongodb.binding.ReadWriteBinding retain()"], ["void", "com.mongodb.client.internal.CryptBinding.release()", "public void release()"], ["com.mongodb.connection.Cluster", "com.mongodb.client.internal.CryptBinding.getCluster()", "public com.mongodb.connection.Cluster getCluster()"], ["com.mongodb.binding.ReadBinding", "com.mongodb.client.internal.CryptBinding.retain()", "public com.mongodb.binding.ReadBinding retain()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.client.internal.CryptBinding.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.binding.WriteBinding", "com.mongodb.client.internal.CryptBinding.retain()", "public com.mongodb.binding.WriteBinding retain()"], ["com.mongodb.client.internal.Crypt", "com.mongodb.client.internal.Crypts.createCrypt(com.mongodb.client.internal.SimpleMongoClient, com.mongodb.AutoEncryptionSettings)", "public static com.mongodb.client.internal.Crypt createCrypt(com.mongodb.client.internal.SimpleMongoClient, com.mongodb.AutoEncryptionSettings)"], ["org.bson.BsonDocument", "com.mongodb.client.internal.CollectionInfoRetriever.filter(java.lang.String, org.bson.BsonDocument)", "public org.bson.BsonDocument filter(java.lang.String, org.bson.BsonDocument)"], ["void", "com.mongodb.client.internal.Java8DistinctIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["<TDocument, TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.MongoIterables.findOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, org.bson.conversions.Bson, boolean)", "public static <TDocument, TResult> com.mongodb.client.FindIterable<TResult> findOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, org.bson.conversions.Bson, boolean)"], ["<TDocument, TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.MongoIterables.aggregateOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)", "public static <TDocument, TResult> com.mongodb.client.AggregateIterable<TResult> aggregateOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)"], ["<TDocument, TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.MongoIterables.aggregateOf(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)", "public static <TDocument, TResult> com.mongodb.client.AggregateIterable<TResult> aggregateOf(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoIterables.changeStreamOf(com.mongodb.client.ClientSession, java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)", "public static <TResult> com.mongodb.client.ChangeStreamIterable<TResult> changeStreamOf(com.mongodb.client.ClientSession, java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoIterables.changeStreamOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)", "public static <TResult> com.mongodb.client.ChangeStreamIterable<TResult> changeStreamOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)"], ["<TDocument, TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.MongoIterables.distinctOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, org.bson.conversions.Bson, boolean)", "public static <TDocument, TResult> com.mongodb.client.DistinctIterable<TResult> distinctOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, org.bson.conversions.Bson, boolean)"], ["<TResult> com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.client.internal.MongoIterables.listDatabasesOf(com.mongodb.client.ClientSession, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public static <TResult> com.mongodb.client.ListDatabasesIterable<TResult> listDatabasesOf(com.mongodb.client.ClientSession, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.MongoIterables.listCollectionsOf(com.mongodb.client.ClientSession, java.lang.String, boolean, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public static <TResult> com.mongodb.client.ListCollectionsIterable<TResult> listCollectionsOf(com.mongodb.client.ClientSession, java.lang.String, boolean, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.MongoIterables.listIndexesOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public static <TResult> com.mongodb.client.ListIndexesIterable<TResult> listIndexesOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TDocument, TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MongoIterables.mapReduceOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, java.lang.String)", "public static <TDocument, TResult> com.mongodb.client.MapReduceIterable<TResult> mapReduceOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, java.lang.String)"], ["java.io.InputStream", "com.mongodb.client.internal.KeyManagementService.stream(java.lang.String, java.nio.ByteBuffer)", "public java.io.InputStream stream(java.lang.String, java.nio.ByteBuffer)"], ["int", "com.mongodb.client.internal.KeyManagementService.getPort()", "public int getPort()"], ["com.mongodb.client.internal.MongoBatchCursorAdapter", "com.mongodb.client.internal.MongoBatchCursorAdapter(com.mongodb.operation.BatchCursor<T>)", "public com.mongodb.client.internal.MongoBatchCursorAdapter(com.mongodb.operation.BatchCursor<T>)"], ["void", "com.mongodb.client.internal.MongoBatchCursorAdapter.remove()", "public void remove()"], ["void", "com.mongodb.client.internal.MongoBatchCursorAdapter.close()", "public void close()"], ["boolean", "com.mongodb.client.internal.MongoBatchCursorAdapter.hasNext()", "public boolean hasNext()"], ["T", "com.mongodb.client.internal.MongoBatchCursorAdapter.next()", "public T next()"], ["T", "com.mongodb.client.internal.MongoBatchCursorAdapter.tryNext()", "public T tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.client.internal.MongoBatchCursorAdapter.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.client.internal.MongoBatchCursorAdapter.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["<T> T", "com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference, com.mongodb.ReadConcern)", "public <T> T execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference, com.mongodb.ReadConcern)"], ["<T> T", "com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(com.mongodb.operation.WriteOperation<T>, com.mongodb.ReadConcern)", "public <T> T execute(com.mongodb.operation.WriteOperation<T>, com.mongodb.ReadConcern)"], ["<T> T", "com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.ClientSession)", "public <T> T execute(com.mongodb.operation.ReadOperation<T>, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.ClientSession)"], ["<T> T", "com.mongodb.client.internal.MongoClientDelegate$DelegateOperationExecutor.execute(com.mongodb.operation.WriteOperation<T>, com.mongodb.ReadConcern, com.mongodb.client.ClientSession)", "public <T> T execute(com.mongodb.operation.WriteOperation<T>, com.mongodb.ReadConcern, com.mongodb.client.ClientSession)"], ["com.mongodb.client.internal.MongoDatabaseImpl", "com.mongodb.client.internal.MongoDatabaseImpl(java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.WriteConcern, boolean, boolean, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor)", "public com.mongodb.client.internal.MongoDatabaseImpl(java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.WriteConcern, boolean, boolean, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor)"], ["java.lang.String", "com.mongodb.client.internal.MongoDatabaseImpl.getName()", "public java.lang.String getName()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.client.internal.MongoDatabaseImpl.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.ReadPreference", "com.mongodb.client.internal.MongoDatabaseImpl.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.client.internal.MongoDatabaseImpl.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.client.internal.MongoDatabaseImpl.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.client.MongoDatabase", "com.mongodb.client.internal.MongoDatabaseImpl.withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.MongoDatabase withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.client.internal.MongoDatabaseImpl.withReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.MongoDatabase withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.client.internal.MongoDatabaseImpl.withWriteConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.MongoDatabase withWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.client.internal.MongoDatabaseImpl.withReadConcern(com.mongodb.ReadConcern)", "public com.mongodb.client.MongoDatabase withReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.MongoCollection<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.getCollection(java.lang.String)", "public com.mongodb.client.MongoCollection<org.bson.Document> getCollection(java.lang.String)"], ["<TDocument> com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.client.internal.MongoDatabaseImpl.getCollection(java.lang.String, java.lang.Class<TDocument>)", "public <TDocument> com.mongodb.client.MongoCollection<TDocument> getCollection(java.lang.String, java.lang.Class<TDocument>)"], ["org.bson.Document", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson)", "public org.bson.Document runCommand(org.bson.conversions.Bson)"], ["org.bson.Document", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference)", "public org.bson.Document runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference)"], ["<TResult> TResult", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> TResult runCommand(org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> TResult", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)", "public <TResult> TResult runCommand(org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)"], ["org.bson.Document", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public org.bson.Document runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["org.bson.Document", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.ReadPreference)", "public org.bson.Document runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.ReadPreference)"], ["<TResult> TResult", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> TResult runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> TResult", "com.mongodb.client.internal.MongoDatabaseImpl.runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)", "public <TResult> TResult runCommand(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.ReadPreference, java.lang.Class<TResult>)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.drop()", "public void drop()"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.drop(com.mongodb.client.ClientSession)", "public void drop(com.mongodb.client.ClientSession)"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.client.internal.MongoDatabaseImpl.listCollectionNames()", "public com.mongodb.client.MongoIterable<java.lang.String> listCollectionNames()"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.client.internal.MongoDatabaseImpl.listCollectionNames(com.mongodb.client.ClientSession)", "public com.mongodb.client.MongoIterable<java.lang.String> listCollectionNames(com.mongodb.client.ClientSession)"], ["com.mongodb.client.ListCollectionsIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.listCollections()", "public com.mongodb.client.ListCollectionsIterable<org.bson.Document> listCollections()"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.listCollections(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ListCollectionsIterable<TResult> listCollections(java.lang.Class<TResult>)"], ["com.mongodb.client.ListCollectionsIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.listCollections(com.mongodb.client.ClientSession)", "public com.mongodb.client.ListCollectionsIterable<org.bson.Document> listCollections(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.listCollections(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ListCollectionsIterable<TResult> listCollections(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createCollection(java.lang.String)", "public void createCollection(java.lang.String)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createCollection(java.lang.String, com.mongodb.client.model.CreateCollectionOptions)", "public void createCollection(java.lang.String, com.mongodb.client.model.CreateCollectionOptions)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createCollection(com.mongodb.client.ClientSession, java.lang.String)", "public void createCollection(com.mongodb.client.ClientSession, java.lang.String)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createCollection(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.model.CreateCollectionOptions)", "public void createCollection(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.model.CreateCollectionOptions)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createView(java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)", "public void createView(java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createView(java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.CreateViewOptions)", "public void createView(java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.CreateViewOptions)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createView(com.mongodb.client.ClientSession, java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)", "public void createView(com.mongodb.client.ClientSession, java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)"], ["void", "com.mongodb.client.internal.MongoDatabaseImpl.createView(com.mongodb.client.ClientSession, java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.CreateViewOptions)", "public void createView(com.mongodb.client.ClientSession, java.lang.String, java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.CreateViewOptions)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.watch()", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch()"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(com.mongodb.client.ClientSession)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.AggregateIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.AggregateIterable<org.bson.Document> aggregate(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.AggregateIterable<TResult> aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.AggregateIterable<org.bson.Document>", "com.mongodb.client.internal.MongoDatabaseImpl.aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.AggregateIterable<org.bson.Document> aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.MongoDatabaseImpl.aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.AggregateIterable<TResult> aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.connection.ServerDescription", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.getServerDescription()", "public com.mongodb.connection.ServerDescription getServerDescription()"], ["com.mongodb.session.SessionContext", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.getSessionContext()", "public com.mongodb.session.SessionContext getSessionContext()"], ["com.mongodb.connection.Connection", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.getConnection()", "public com.mongodb.connection.Connection getConnection()"], ["int", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.getCount()", "public int getCount()"], ["com.mongodb.binding.ConnectionSource", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.retain()", "public com.mongodb.binding.ConnectionSource retain()"], ["void", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.release()", "public void release()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.client.internal.CryptBinding$CryptConnectionSource.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["void", "com.mongodb.client.internal.Java8ListIndexesIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.ListIndexesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ListIndexesIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.ListIndexesIterableImpl.batchSize(int)", "public com.mongodb.client.ListIndexesIterable<TResult> batchSize(int)"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.ListIndexesIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.ListIndexesIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["org.bson.RawBsonDocument", "com.mongodb.client.internal.Crypt.encrypt(java.lang.String, org.bson.RawBsonDocument)", "public org.bson.RawBsonDocument encrypt(java.lang.String, org.bson.RawBsonDocument)"], ["void", "com.mongodb.client.internal.Crypt.close()", "public void close()"], ["void", "com.mongodb.client.internal.Java8AggregateIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["java.util.List<com.mongodb.connection.ServerDescription>", "com.mongodb.client.internal.MongoClientDelegate$1.select(com.mongodb.connection.ClusterDescription)", "public java.util.List<com.mongodb.connection.ServerDescription> select(com.mongodb.connection.ClusterDescription)"], ["<TDocument, TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.findOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, org.bson.conversions.Bson, boolean)", "public <TDocument, TResult> com.mongodb.client.FindIterable<TResult> findOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, org.bson.conversions.Bson, boolean)"], ["<TDocument, TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.aggregateOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)", "public <TDocument, TResult> com.mongodb.client.AggregateIterable<TResult> aggregateOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)"], ["<TDocument, TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.aggregateOf(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)", "public <TDocument, TResult> com.mongodb.client.AggregateIterable<TResult> aggregateOf(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.AggregationLevel, boolean)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.changeStreamOf(com.mongodb.client.ClientSession, java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> changeStreamOf(com.mongodb.client.ClientSession, java.lang.String, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.changeStreamOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> changeStreamOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>, com.mongodb.client.model.changestream.ChangeStreamLevel, boolean)"], ["<TDocument, TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.distinctOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, org.bson.conversions.Bson, boolean)", "public <TDocument, TResult> com.mongodb.client.DistinctIterable<TResult> distinctOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, org.bson.conversions.Bson, boolean)"], ["<TResult> com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.listDatabasesOf(com.mongodb.client.ClientSession, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public <TResult> com.mongodb.client.ListDatabasesIterable<TResult> listDatabasesOf(com.mongodb.client.ClientSession, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TResult> com.mongodb.client.ListCollectionsIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.listCollectionsOf(com.mongodb.client.ClientSession, java.lang.String, boolean, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public <TResult> com.mongodb.client.ListCollectionsIterable<TResult> listCollectionsOf(com.mongodb.client.ClientSession, java.lang.String, boolean, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.listIndexesOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)", "public <TResult> com.mongodb.client.ListIndexesIterable<TResult> listIndexesOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.client.internal.OperationExecutor, boolean)"], ["<TDocument, TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.Java8MongoIterableFactory.mapReduceOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, java.lang.String)", "public <TDocument, TResult> com.mongodb.client.MapReduceIterable<TResult> mapReduceOf(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, java.lang.Class<TDocument>, java.lang.Class<TResult>, org.bson.codecs.configuration.CodecRegistry, com.mongodb.ReadPreference, com.mongodb.ReadConcern, com.mongodb.WriteConcern, com.mongodb.client.internal.OperationExecutor, java.lang.String, java.lang.String)"], ["java.util.List<org.bson.BsonDocument>", "com.mongodb.client.internal.KeyRetriever.find(org.bson.BsonDocument)", "public java.util.List<org.bson.BsonDocument> find(org.bson.BsonDocument)"], ["void", "com.mongodb.client.internal.KeyRetriever.close()", "public void close()"], ["void", "com.mongodb.client.internal.MapReduceIterableImpl.toCollection()", "public void toCollection()"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.collectionName(java.lang.String)", "public com.mongodb.client.MapReduceIterable<TResult> collectionName(java.lang.String)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.finalizeFunction(java.lang.String)", "public com.mongodb.client.MapReduceIterable<TResult> finalizeFunction(java.lang.String)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.scope(org.bson.conversions.Bson)", "public com.mongodb.client.MapReduceIterable<TResult> scope(org.bson.conversions.Bson)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.sort(org.bson.conversions.Bson)", "public com.mongodb.client.MapReduceIterable<TResult> sort(org.bson.conversions.Bson)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.MapReduceIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.limit(int)", "public com.mongodb.client.MapReduceIterable<TResult> limit(int)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.jsMode(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> jsMode(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.verbose(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> verbose(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.MapReduceIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.action(com.mongodb.client.model.MapReduceAction)", "public com.mongodb.client.MapReduceIterable<TResult> action(com.mongodb.client.model.MapReduceAction)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.databaseName(java.lang.String)", "public com.mongodb.client.MapReduceIterable<TResult> databaseName(java.lang.String)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.sharded(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> sharded(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.nonAtomic(boolean)", "public com.mongodb.client.MapReduceIterable<TResult> nonAtomic(boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.batchSize(int)", "public com.mongodb.client.MapReduceIterable<TResult> batchSize(int)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.MapReduceIterable<TResult> bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MapReduceIterableImpl.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.MapReduceIterable<TResult> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.MapReduceIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.MapReduceIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["void", "com.mongodb.client.internal.Java8MapReduceIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["com.mongodb.client.internal.ClientEncryptionImpl", "com.mongodb.client.internal.ClientEncryptionImpl(com.mongodb.ClientEncryptionSettings)", "public com.mongodb.client.internal.ClientEncryptionImpl(com.mongodb.ClientEncryptionSettings)"], ["org.bson.BsonBinary", "com.mongodb.client.internal.ClientEncryptionImpl.createDataKey(java.lang.String)", "public org.bson.BsonBinary createDataKey(java.lang.String)"], ["org.bson.BsonBinary", "com.mongodb.client.internal.ClientEncryptionImpl.createDataKey(java.lang.String, com.mongodb.client.model.vault.DataKeyOptions)", "public org.bson.BsonBinary createDataKey(java.lang.String, com.mongodb.client.model.vault.DataKeyOptions)"], ["org.bson.BsonBinary", "com.mongodb.client.internal.ClientEncryptionImpl.encrypt(org.bson.BsonValue, com.mongodb.client.model.vault.EncryptOptions)", "public org.bson.BsonBinary encrypt(org.bson.BsonValue, com.mongodb.client.model.vault.EncryptOptions)"], ["org.bson.BsonValue", "com.mongodb.client.internal.ClientEncryptionImpl.decrypt(org.bson.BsonBinary)", "public org.bson.BsonValue decrypt(org.bson.BsonBinary)"], ["void", "com.mongodb.client.internal.ClientEncryptionImpl.close()", "public void close()"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.DistinctIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.DistinctIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.DistinctIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.DistinctIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.DistinctIterableImpl.batchSize(int)", "public com.mongodb.client.DistinctIterable<TResult> batchSize(int)"], ["com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.DistinctIterableImpl.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.DistinctIterable<TResult> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.DistinctIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.DistinctIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.fullDocument(com.mongodb.client.model.changestream.FullDocument)", "public com.mongodb.client.ChangeStreamIterable<TResult> fullDocument(com.mongodb.client.model.changestream.FullDocument)"], ["com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.resumeAfter(org.bson.BsonDocument)", "public com.mongodb.client.ChangeStreamIterable<TResult> resumeAfter(org.bson.BsonDocument)"], ["com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.batchSize(int)", "public com.mongodb.client.ChangeStreamIterable<TResult> batchSize(int)"], ["com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ChangeStreamIterable<TResult> maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.ChangeStreamIterable<TResult> collation(com.mongodb.client.model.Collation)"], ["<TDocument> com.mongodb.client.MongoIterable<TDocument>", "com.mongodb.client.internal.ChangeStreamIterableImpl.withDocumentClass(java.lang.Class<TDocument>)", "public <TDocument> com.mongodb.client.MongoIterable<TDocument> withDocumentClass(java.lang.Class<TDocument>)"], ["com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.startAtOperationTime(org.bson.BsonTimestamp)", "public com.mongodb.client.ChangeStreamIterable<TResult> startAtOperationTime(org.bson.BsonTimestamp)"], ["com.mongodb.client.internal.ChangeStreamIterableImpl<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.startAfter(org.bson.BsonDocument)", "public com.mongodb.client.internal.ChangeStreamIterableImpl<TResult> startAfter(org.bson.BsonDocument)"], ["com.mongodb.client.MongoCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>", "com.mongodb.client.internal.ChangeStreamIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>> iterator()"], ["com.mongodb.client.MongoChangeStreamCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>", "com.mongodb.client.internal.ChangeStreamIterableImpl.cursor()", "public com.mongodb.client.MongoChangeStreamCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>> cursor()"], ["com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>", "com.mongodb.client.internal.ChangeStreamIterableImpl.first()", "public com.mongodb.client.model.changestream.ChangeStreamDocument<TResult> first()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>>", "com.mongodb.client.internal.ChangeStreamIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>> asReadOperation()"], ["java.lang.Object", "com.mongodb.client.internal.ChangeStreamIterableImpl.first()", "public java.lang.Object first()"], ["com.mongodb.client.MongoCursor", "com.mongodb.client.internal.ChangeStreamIterableImpl.cursor()", "public com.mongodb.client.MongoCursor cursor()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.ChangeStreamIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.client.internal.ChangeStreamIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.client.ChangeStreamIterable", "com.mongodb.client.internal.ChangeStreamIterableImpl.startAfter(org.bson.BsonDocument)", "public com.mongodb.client.ChangeStreamIterable startAfter(org.bson.BsonDocument)"], ["void", "com.mongodb.client.internal.CommandMarker$1.apply(com.mongodb.connection.ClusterSettings$Builder)", "public void apply(com.mongodb.connection.ClusterSettings$Builder)"], ["void", "com.mongodb.client.internal.CommandMarker$1.apply(java.lang.Object)", "public void apply(java.lang.Object)"], ["com.mongodb.client.internal.ListDatabasesIterableImpl<TResult>", "com.mongodb.client.internal.ListDatabasesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.internal.ListDatabasesIterableImpl<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.client.internal.ListDatabasesIterableImpl.batchSize(int)", "public com.mongodb.client.ListDatabasesIterable<TResult> batchSize(int)"], ["com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.client.internal.ListDatabasesIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.ListDatabasesIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.ListDatabasesIterable<TResult>", "com.mongodb.client.internal.ListDatabasesIterableImpl.nameOnly(java.lang.Boolean)", "public com.mongodb.client.ListDatabasesIterable<TResult> nameOnly(java.lang.Boolean)"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.ListDatabasesIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.ListDatabasesIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["com.mongodb.client.ListDatabasesIterable", "com.mongodb.client.internal.ListDatabasesIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.ListDatabasesIterable maxTime(long, java.util.concurrent.TimeUnit)"], ["void", "com.mongodb.client.internal.Java8ChangeStreamIterableImpl.forEach(java.util.function.Consumer<? super com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>)", "public void forEach(java.util.function.Consumer<? super com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> filter(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.limit(int)", "public com.mongodb.client.FindIterable<TResult> limit(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.skip(int)", "public com.mongodb.client.FindIterable<TResult> skip(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.FindIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.FindIterable<TResult> maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.batchSize(int)", "public com.mongodb.client.FindIterable<TResult> batchSize(int)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.FindIterable<TResult> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.modifiers(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> modifiers(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.projection(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> projection(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.sort(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> sort(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.noCursorTimeout(boolean)", "public com.mongodb.client.FindIterable<TResult> noCursorTimeout(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.oplogReplay(boolean)", "public com.mongodb.client.FindIterable<TResult> oplogReplay(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.partial(boolean)", "public com.mongodb.client.FindIterable<TResult> partial(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.cursorType(com.mongodb.CursorType)", "public com.mongodb.client.FindIterable<TResult> cursorType(com.mongodb.CursorType)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.comment(java.lang.String)", "public com.mongodb.client.FindIterable<TResult> comment(java.lang.String)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.hint(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> hint(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.max(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> max(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.min(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TResult> min(org.bson.conversions.Bson)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.maxScan(long)", "public com.mongodb.client.FindIterable<TResult> maxScan(long)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.returnKey(boolean)", "public com.mongodb.client.FindIterable<TResult> returnKey(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.showRecordId(boolean)", "public com.mongodb.client.FindIterable<TResult> showRecordId(boolean)"], ["com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.FindIterableImpl.snapshot(boolean)", "public com.mongodb.client.FindIterable<TResult> snapshot(boolean)"], ["TResult", "com.mongodb.client.internal.FindIterableImpl.first()", "public TResult first()"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.FindIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.FindIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["int", "com.mongodb.client.internal.CryptConnection.getCount()", "public int getCount()"], ["com.mongodb.client.internal.CryptConnection", "com.mongodb.client.internal.CryptConnection.retain()", "public com.mongodb.client.internal.CryptConnection retain()"], ["void", "com.mongodb.client.internal.CryptConnection.release()", "public void release()"], ["com.mongodb.connection.ConnectionDescription", "com.mongodb.client.internal.CryptConnection.getDescription()", "public com.mongodb.connection.ConnectionDescription getDescription()"], ["<T> T", "com.mongodb.client.internal.CryptConnection.command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator)", "public <T> T command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext, boolean, com.mongodb.connection.SplittablePayload, org.bson.FieldNameValidator)"], ["<T> T", "com.mongodb.client.internal.CryptConnection.command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)", "public <T> T command(java.lang.String, org.bson.BsonDocument, org.bson.FieldNameValidator, com.mongodb.ReadPreference, org.bson.codecs.Decoder<T>, com.mongodb.session.SessionContext)"], ["<T> T", "com.mongodb.client.internal.CryptConnection.command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)", "public <T> T command(java.lang.String, org.bson.BsonDocument, boolean, org.bson.FieldNameValidator, org.bson.codecs.Decoder<T>)"], ["com.mongodb.WriteConcernResult", "com.mongodb.client.internal.CryptConnection.insert(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest)", "public com.mongodb.WriteConcernResult insert(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.InsertRequest)"], ["com.mongodb.WriteConcernResult", "com.mongodb.client.internal.CryptConnection.update(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest)", "public com.mongodb.WriteConcernResult update(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.UpdateRequest)"], ["com.mongodb.WriteConcernResult", "com.mongodb.client.internal.CryptConnection.delete(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest)", "public com.mongodb.WriteConcernResult delete(com.mongodb.MongoNamespace, boolean, com.mongodb.bulk.DeleteRequest)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.client.internal.CryptConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.client.internal.CryptConnection.query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> query(com.mongodb.MongoNamespace, org.bson.BsonDocument, org.bson.BsonDocument, int, int, int, boolean, boolean, boolean, boolean, boolean, boolean, org.bson.codecs.Decoder<T>)"], ["<T> com.mongodb.connection.QueryResult<T>", "com.mongodb.client.internal.CryptConnection.getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)", "public <T> com.mongodb.connection.QueryResult<T> getMore(com.mongodb.MongoNamespace, long, int, org.bson.codecs.Decoder<T>)"], ["void", "com.mongodb.client.internal.CryptConnection.killCursor(java.util.List<java.lang.Long>)", "public void killCursor(java.util.List<java.lang.Long>)"], ["void", "com.mongodb.client.internal.CryptConnection.killCursor(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>)", "public void killCursor(com.mongodb.MongoNamespace, java.util.List<java.lang.Long>)"], ["com.mongodb.connection.Connection", "com.mongodb.client.internal.CryptConnection.retain()", "public com.mongodb.connection.Connection retain()"], ["com.mongodb.binding.ReferenceCounted", "com.mongodb.client.internal.CryptConnection.retain()", "public com.mongodb.binding.ReferenceCounted retain()"], ["com.mongodb.MongoNamespace", "com.mongodb.client.internal.MongoCollectionImpl.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["java.lang.Class<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.getDocumentClass()", "public java.lang.Class<TDocument> getDocumentClass()"], ["org.bson.codecs.configuration.CodecRegistry", "com.mongodb.client.internal.MongoCollectionImpl.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["com.mongodb.ReadPreference", "com.mongodb.client.internal.MongoCollectionImpl.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.client.internal.MongoCollectionImpl.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.client.internal.MongoCollectionImpl.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["<NewTDocument> com.mongodb.client.MongoCollection<NewTDocument>", "com.mongodb.client.internal.MongoCollectionImpl.withDocumentClass(java.lang.Class<NewTDocument>)", "public <NewTDocument> com.mongodb.client.MongoCollection<NewTDocument> withDocumentClass(java.lang.Class<NewTDocument>)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.MongoCollection<TDocument> withCodecRegistry(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.withReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.MongoCollection<TDocument> withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.withWriteConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.MongoCollection<TDocument> withWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.MongoCollection<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.withReadConcern(com.mongodb.ReadConcern)", "public com.mongodb.client.MongoCollection<TDocument> withReadConcern(com.mongodb.ReadConcern)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.count()", "public long count()"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.count(org.bson.conversions.Bson)", "public long count(org.bson.conversions.Bson)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)", "public long count(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.count(com.mongodb.client.ClientSession)", "public long count(com.mongodb.client.ClientSession)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.count(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public long count(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.count(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)", "public long count(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.countDocuments()", "public long countDocuments()"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.countDocuments(org.bson.conversions.Bson)", "public long countDocuments(org.bson.conversions.Bson)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.countDocuments(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)", "public long countDocuments(org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.countDocuments(com.mongodb.client.ClientSession)", "public long countDocuments(com.mongodb.client.ClientSession)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.countDocuments(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public long countDocuments(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.countDocuments(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)", "public long countDocuments(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.CountOptions)"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.estimatedDocumentCount()", "public long estimatedDocumentCount()"], ["long", "com.mongodb.client.internal.MongoCollectionImpl.estimatedDocumentCount(com.mongodb.client.model.EstimatedDocumentCountOptions)", "public long estimatedDocumentCount(com.mongodb.client.model.EstimatedDocumentCountOptions)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.distinct(java.lang.String, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.DistinctIterable<TResult> distinct(java.lang.String, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.DistinctIterable<TResult> distinct(java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.distinct(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.DistinctIterable<TResult> distinct(com.mongodb.client.ClientSession, java.lang.String, java.lang.Class<TResult>)"], ["<TResult> com.mongodb.client.DistinctIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.distinct(com.mongodb.client.ClientSession, java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.DistinctIterable<TResult> distinct(com.mongodb.client.ClientSession, java.lang.String, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["com.mongodb.client.FindIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.find()", "public com.mongodb.client.FindIterable<TDocument> find()"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.find(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.FindIterable<TResult> find(java.lang.Class<TResult>)"], ["com.mongodb.client.FindIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.find(org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TDocument> find(org.bson.conversions.Bson)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.find(org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.FindIterable<TResult> find(org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["com.mongodb.client.FindIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.find(com.mongodb.client.ClientSession)", "public com.mongodb.client.FindIterable<TDocument> find(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.find(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.FindIterable<TResult> find(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["com.mongodb.client.FindIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.find(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public com.mongodb.client.FindIterable<TDocument> find(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["<TResult> com.mongodb.client.FindIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.find(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.FindIterable<TResult> find(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.lang.Class<TResult>)"], ["com.mongodb.client.AggregateIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.AggregateIterable<TDocument> aggregate(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.AggregateIterable<TResult> aggregate(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.AggregateIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.AggregateIterable<TDocument> aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.AggregateIterable<TResult> aggregate(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.watch()", "public com.mongodb.client.ChangeStreamIterable<TDocument> watch()"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.watch(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.watch(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<TDocument> watch(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.watch(com.mongodb.client.ClientSession)", "public com.mongodb.client.ChangeStreamIterable<TDocument> watch(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<TDocument> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.MapReduceIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.mapReduce(java.lang.String, java.lang.String)", "public com.mongodb.client.MapReduceIterable<TDocument> mapReduce(java.lang.String, java.lang.String)"], ["<TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.mapReduce(java.lang.String, java.lang.String, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.MapReduceIterable<TResult> mapReduce(java.lang.String, java.lang.String, java.lang.Class<TResult>)"], ["com.mongodb.client.MapReduceIterable<TDocument>", "com.mongodb.client.internal.MongoCollectionImpl.mapReduce(com.mongodb.client.ClientSession, java.lang.String, java.lang.String)", "public com.mongodb.client.MapReduceIterable<TDocument> mapReduce(com.mongodb.client.ClientSession, java.lang.String, java.lang.String)"], ["<TResult> com.mongodb.client.MapReduceIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.mapReduce(com.mongodb.client.ClientSession, java.lang.String, java.lang.String, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.MapReduceIterable<TResult> mapReduce(com.mongodb.client.ClientSession, java.lang.String, java.lang.String, java.lang.Class<TResult>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.client.internal.MongoCollectionImpl.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)", "public com.mongodb.bulk.BulkWriteResult bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.client.internal.MongoCollectionImpl.bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)", "public com.mongodb.bulk.BulkWriteResult bulkWrite(java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.client.internal.MongoCollectionImpl.bulkWrite(com.mongodb.client.ClientSession, java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)", "public com.mongodb.bulk.BulkWriteResult bulkWrite(com.mongodb.client.ClientSession, java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.client.internal.MongoCollectionImpl.bulkWrite(com.mongodb.client.ClientSession, java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)", "public com.mongodb.bulk.BulkWriteResult bulkWrite(com.mongodb.client.ClientSession, java.util.List<? extends com.mongodb.client.model.WriteModel<? extends TDocument>>, com.mongodb.client.model.BulkWriteOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertOne(TDocument)", "public void insertOne(TDocument)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)", "public void insertOne(TDocument, com.mongodb.client.model.InsertOneOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertOne(com.mongodb.client.ClientSession, TDocument)", "public void insertOne(com.mongodb.client.ClientSession, TDocument)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertOne(com.mongodb.client.ClientSession, TDocument, com.mongodb.client.model.InsertOneOptions)", "public void insertOne(com.mongodb.client.ClientSession, TDocument, com.mongodb.client.model.InsertOneOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertMany(java.util.List<? extends TDocument>)", "public void insertMany(java.util.List<? extends TDocument>)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)", "public void insertMany(java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertMany(com.mongodb.client.ClientSession, java.util.List<? extends TDocument>)", "public void insertMany(com.mongodb.client.ClientSession, java.util.List<? extends TDocument>)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.insertMany(com.mongodb.client.ClientSession, java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)", "public void insertMany(com.mongodb.client.ClientSession, java.util.List<? extends TDocument>, com.mongodb.client.model.InsertManyOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteOne(org.bson.conversions.Bson)", "public com.mongodb.client.result.DeleteResult deleteOne(org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.client.result.DeleteResult deleteOne(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public com.mongodb.client.result.DeleteResult deleteOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.client.result.DeleteResult deleteOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteMany(org.bson.conversions.Bson)", "public com.mongodb.client.result.DeleteResult deleteMany(org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.client.result.DeleteResult deleteMany(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public com.mongodb.client.result.DeleteResult deleteMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.internal.MongoCollectionImpl.deleteMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.client.result.DeleteResult deleteMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument)", "public com.mongodb.client.result.UpdateResult replaceOne(org.bson.conversions.Bson, TDocument)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)", "public com.mongodb.client.result.UpdateResult replaceOne(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.replaceOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument)", "public com.mongodb.client.result.UpdateResult replaceOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.replaceOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult replaceOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.replaceOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)", "public com.mongodb.client.result.UpdateResult replaceOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.ReplaceOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.result.UpdateResult updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateOne(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.result.UpdateResult updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.result.UpdateResult updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateOne(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.result.UpdateResult updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateOne(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.result.UpdateResult updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateMany(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.result.UpdateResult updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.result.UpdateResult updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateMany(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.result.UpdateResult updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.internal.MongoCollectionImpl.updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.result.UpdateResult updateMany(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndDelete(org.bson.conversions.Bson)", "public TDocument findOneAndDelete(org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)", "public TDocument findOneAndDelete(org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndDelete(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public TDocument findOneAndDelete(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndDelete(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)", "public TDocument findOneAndDelete(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndDeleteOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndReplace(org.bson.conversions.Bson, TDocument)", "public TDocument findOneAndReplace(org.bson.conversions.Bson, TDocument)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)", "public TDocument findOneAndReplace(org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndReplace(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument)", "public TDocument findOneAndReplace(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndReplace(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)", "public TDocument findOneAndReplace(com.mongodb.client.ClientSession, org.bson.conversions.Bson, TDocument, com.mongodb.client.model.FindOneAndReplaceOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public TDocument findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)", "public TDocument findOneAndUpdate(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)", "public TDocument findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)", "public TDocument findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public TDocument findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)", "public TDocument findOneAndUpdate(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public TDocument findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["TDocument", "com.mongodb.client.internal.MongoCollectionImpl.findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)", "public TDocument findOneAndUpdate(com.mongodb.client.ClientSession, org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.FindOneAndUpdateOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.drop()", "public void drop()"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.drop(com.mongodb.client.ClientSession)", "public void drop(com.mongodb.client.ClientSession)"], ["java.lang.String", "com.mongodb.client.internal.MongoCollectionImpl.createIndex(org.bson.conversions.Bson)", "public java.lang.String createIndex(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.internal.MongoCollectionImpl.createIndex(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)", "public java.lang.String createIndex(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["java.lang.String", "com.mongodb.client.internal.MongoCollectionImpl.createIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public java.lang.String createIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.internal.MongoCollectionImpl.createIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)", "public java.lang.String createIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["java.util.List<java.lang.String>", "com.mongodb.client.internal.MongoCollectionImpl.createIndexes(java.util.List<com.mongodb.client.model.IndexModel>)", "public java.util.List<java.lang.String> createIndexes(java.util.List<com.mongodb.client.model.IndexModel>)"], ["java.util.List<java.lang.String>", "com.mongodb.client.internal.MongoCollectionImpl.createIndexes(java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)", "public java.util.List<java.lang.String> createIndexes(java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)"], ["java.util.List<java.lang.String>", "com.mongodb.client.internal.MongoCollectionImpl.createIndexes(com.mongodb.client.ClientSession, java.util.List<com.mongodb.client.model.IndexModel>)", "public java.util.List<java.lang.String> createIndexes(com.mongodb.client.ClientSession, java.util.List<com.mongodb.client.model.IndexModel>)"], ["java.util.List<java.lang.String>", "com.mongodb.client.internal.MongoCollectionImpl.createIndexes(com.mongodb.client.ClientSession, java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)", "public java.util.List<java.lang.String> createIndexes(com.mongodb.client.ClientSession, java.util.List<com.mongodb.client.model.IndexModel>, com.mongodb.client.model.CreateIndexOptions)"], ["com.mongodb.client.ListIndexesIterable<org.bson.Document>", "com.mongodb.client.internal.MongoCollectionImpl.listIndexes()", "public com.mongodb.client.ListIndexesIterable<org.bson.Document> listIndexes()"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.listIndexes(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ListIndexesIterable<TResult> listIndexes(java.lang.Class<TResult>)"], ["com.mongodb.client.ListIndexesIterable<org.bson.Document>", "com.mongodb.client.internal.MongoCollectionImpl.listIndexes(com.mongodb.client.ClientSession)", "public com.mongodb.client.ListIndexesIterable<org.bson.Document> listIndexes(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.ListIndexesIterable<TResult>", "com.mongodb.client.internal.MongoCollectionImpl.listIndexes(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ListIndexesIterable<TResult> listIndexes(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(java.lang.String)", "public void dropIndex(java.lang.String)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)", "public void dropIndex(java.lang.String, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(org.bson.conversions.Bson)", "public void dropIndex(org.bson.conversions.Bson)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)", "public void dropIndex(org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(com.mongodb.client.ClientSession, java.lang.String)", "public void dropIndex(com.mongodb.client.ClientSession, java.lang.String)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public void dropIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.model.DropIndexOptions)", "public void dropIndex(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)", "public void dropIndex(com.mongodb.client.ClientSession, org.bson.conversions.Bson, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndexes()", "public void dropIndexes()"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndexes(com.mongodb.client.ClientSession)", "public void dropIndexes(com.mongodb.client.ClientSession)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndexes(com.mongodb.client.model.DropIndexOptions)", "public void dropIndexes(com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.dropIndexes(com.mongodb.client.ClientSession, com.mongodb.client.model.DropIndexOptions)", "public void dropIndexes(com.mongodb.client.ClientSession, com.mongodb.client.model.DropIndexOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.renameCollection(com.mongodb.MongoNamespace)", "public void renameCollection(com.mongodb.MongoNamespace)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)", "public void renameCollection(com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.renameCollection(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace)", "public void renameCollection(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace)"], ["void", "com.mongodb.client.internal.MongoCollectionImpl.renameCollection(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)", "public void renameCollection(com.mongodb.client.ClientSession, com.mongodb.MongoNamespace, com.mongodb.client.model.RenameCollectionOptions)"], ["com.mongodb.client.internal.MongoIterableImpl", "com.mongodb.client.internal.MongoIterableImpl(com.mongodb.client.ClientSession, com.mongodb.client.internal.OperationExecutor, com.mongodb.ReadConcern, com.mongodb.ReadPreference, boolean)", "public com.mongodb.client.internal.MongoIterableImpl(com.mongodb.client.ClientSession, com.mongodb.client.internal.OperationExecutor, com.mongodb.ReadConcern, com.mongodb.ReadPreference, boolean)"], ["java.lang.Integer", "com.mongodb.client.internal.MongoIterableImpl.getBatchSize()", "public java.lang.Integer getBatchSize()"], ["com.mongodb.client.MongoIterable<TResult>", "com.mongodb.client.internal.MongoIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable<TResult> batchSize(int)"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.client.internal.MongoIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<TResult> iterator()"], ["com.mongodb.client.MongoCursor<TResult>", "com.mongodb.client.internal.MongoIterableImpl.cursor()", "public com.mongodb.client.MongoCursor<TResult> cursor()"], ["TResult", "com.mongodb.client.internal.MongoIterableImpl.first()", "public TResult first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.client.internal.MongoIterableImpl.map(com.mongodb.Function<TResult, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<TResult, U>)"], ["void", "com.mongodb.client.internal.MongoIterableImpl.forEach(com.mongodb.Block<? super TResult>)", "public void forEach(com.mongodb.Block<? super TResult>)"], ["<A extends java.util.Collection<? super TResult>> A", "com.mongodb.client.internal.MongoIterableImpl.into(A)", "public <A extends java.util.Collection<? super TResult>> A into(A)"], ["java.util.Iterator", "com.mongodb.client.internal.MongoIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["java.lang.String", "com.mongodb.client.internal.MongoClientImpl$1.apply(org.bson.BsonDocument)", "public java.lang.String apply(org.bson.BsonDocument)"], ["java.lang.Object", "com.mongodb.client.internal.MongoClientImpl$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["void", "com.mongodb.client.internal.MappingIterable$1.apply(U)", "public void apply(U)"], ["com.mongodb.client.internal.MongoClientImpl", "com.mongodb.client.internal.MongoClientImpl(com.mongodb.MongoClientSettings, com.mongodb.MongoDriverInformation)", "public com.mongodb.client.internal.MongoClientImpl(com.mongodb.MongoClientSettings, com.mongodb.MongoDriverInformation)"], ["com.mongodb.client.internal.MongoClientImpl", "com.mongodb.client.internal.MongoClientImpl(com.mongodb.connection.Cluster, com.mongodb.MongoClientSettings, com.mongodb.client.internal.OperationExecutor)", "public com.mongodb.client.internal.MongoClientImpl(com.mongodb.connection.Cluster, com.mongodb.MongoClientSettings, com.mongodb.client.internal.OperationExecutor)"], ["com.mongodb.client.MongoDatabase", "com.mongodb.client.internal.MongoClientImpl.getDatabase(java.lang.String)", "public com.mongodb.client.MongoDatabase getDatabase(java.lang.String)"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.client.internal.MongoClientImpl.listDatabaseNames()", "public com.mongodb.client.MongoIterable<java.lang.String> listDatabaseNames()"], ["com.mongodb.client.MongoIterable<java.lang.String>", "com.mongodb.client.internal.MongoClientImpl.listDatabaseNames(com.mongodb.client.ClientSession)", "public com.mongodb.client.MongoIterable<java.lang.String> listDatabaseNames(com.mongodb.client.ClientSession)"], ["com.mongodb.client.ListDatabasesIterable<org.bson.Document>", "com.mongodb.client.internal.MongoClientImpl.listDatabases()", "public com.mongodb.client.ListDatabasesIterable<org.bson.Document> listDatabases()"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.client.internal.MongoClientImpl.listDatabases(java.lang.Class<T>)", "public <T> com.mongodb.client.ListDatabasesIterable<T> listDatabases(java.lang.Class<T>)"], ["com.mongodb.client.ListDatabasesIterable<org.bson.Document>", "com.mongodb.client.internal.MongoClientImpl.listDatabases(com.mongodb.client.ClientSession)", "public com.mongodb.client.ListDatabasesIterable<org.bson.Document> listDatabases(com.mongodb.client.ClientSession)"], ["<T> com.mongodb.client.ListDatabasesIterable<T>", "com.mongodb.client.internal.MongoClientImpl.listDatabases(com.mongodb.client.ClientSession, java.lang.Class<T>)", "public <T> com.mongodb.client.ListDatabasesIterable<T> listDatabases(com.mongodb.client.ClientSession, java.lang.Class<T>)"], ["com.mongodb.client.ClientSession", "com.mongodb.client.internal.MongoClientImpl.startSession()", "public com.mongodb.client.ClientSession startSession()"], ["com.mongodb.client.ClientSession", "com.mongodb.client.internal.MongoClientImpl.startSession(com.mongodb.ClientSessionOptions)", "public com.mongodb.client.ClientSession startSession(com.mongodb.ClientSessionOptions)"], ["void", "com.mongodb.client.internal.MongoClientImpl.close()", "public void close()"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoClientImpl.watch()", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch()"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoClientImpl.watch(java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoClientImpl.watch(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoClientImpl.watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoClientImpl.watch(com.mongodb.client.ClientSession)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(com.mongodb.client.ClientSession)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoClientImpl.watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.lang.Class<TResult>)"], ["com.mongodb.client.ChangeStreamIterable<org.bson.Document>", "com.mongodb.client.internal.MongoClientImpl.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.ChangeStreamIterable<org.bson.Document> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>)"], ["<TResult> com.mongodb.client.ChangeStreamIterable<TResult>", "com.mongodb.client.internal.MongoClientImpl.watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)", "public <TResult> com.mongodb.client.ChangeStreamIterable<TResult> watch(com.mongodb.client.ClientSession, java.util.List<? extends org.bson.conversions.Bson>, java.lang.Class<TResult>)"], ["com.mongodb.connection.ClusterDescription", "com.mongodb.client.internal.MongoClientImpl.getClusterDescription()", "public com.mongodb.connection.ClusterDescription getClusterDescription()"], ["com.mongodb.connection.Cluster", "com.mongodb.client.internal.MongoClientImpl.getCluster()", "public com.mongodb.connection.Cluster getCluster()"], ["com.mongodb.client.internal.MongoChangeStreamCursorImpl", "com.mongodb.client.internal.MongoChangeStreamCursorImpl(com.mongodb.operation.BatchCursor<org.bson.RawBsonDocument>, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)", "public com.mongodb.client.internal.MongoChangeStreamCursorImpl(com.mongodb.operation.BatchCursor<org.bson.RawBsonDocument>, org.bson.codecs.Decoder<T>, org.bson.BsonDocument)"], ["void", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.remove()", "public void remove()"], ["void", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.close()", "public void close()"], ["boolean", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.hasNext()", "public boolean hasNext()"], ["T", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.next()", "public T next()"], ["T", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.tryNext()", "public T tryNext()"], ["com.mongodb.ServerCursor", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.getServerCursor()", "public com.mongodb.ServerCursor getServerCursor()"], ["com.mongodb.ServerAddress", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["org.bson.BsonDocument", "com.mongodb.client.internal.MongoChangeStreamCursorImpl.getResumeToken()", "public org.bson.BsonDocument getResumeToken()"], ["void", "com.mongodb.client.internal.CommandMarker.close()", "public void close()"], ["void", "com.mongodb.client.internal.Java8ListDatabasesIterableImpl.forEach(java.util.function.Consumer<? super TResult>)", "public void forEach(java.util.function.Consumer<? super TResult>)"], ["com.mongodb.client.MongoCursor<V>", "com.mongodb.client.internal.MappingIterable.iterator()", "public com.mongodb.client.MongoCursor<V> iterator()"], ["com.mongodb.client.MongoCursor<V>", "com.mongodb.client.internal.MappingIterable.cursor()", "public com.mongodb.client.MongoCursor<V> cursor()"], ["V", "com.mongodb.client.internal.MappingIterable.first()", "public V first()"], ["void", "com.mongodb.client.internal.MappingIterable.forEach(com.mongodb.Block<? super V>)", "public void forEach(com.mongodb.Block<? super V>)"], ["<A extends java.util.Collection<? super V>> A", "com.mongodb.client.internal.MappingIterable.into(A)", "public <A extends java.util.Collection<? super V>> A into(A)"], ["com.mongodb.client.internal.MappingIterable<U, V>", "com.mongodb.client.internal.MappingIterable.batchSize(int)", "public com.mongodb.client.internal.MappingIterable<U, V> batchSize(int)"], ["<W> com.mongodb.client.MongoIterable<W>", "com.mongodb.client.internal.MappingIterable.map(com.mongodb.Function<V, W>)", "public <W> com.mongodb.client.MongoIterable<W> map(com.mongodb.Function<V, W>)"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.MappingIterable.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.util.Iterator", "com.mongodb.client.internal.MappingIterable.iterator()", "public java.util.Iterator iterator()"], ["void", "com.mongodb.client.internal.AggregateIterableImpl.toCollection()", "public void toCollection()"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.allowDiskUse(java.lang.Boolean)", "public com.mongodb.client.AggregateIterable<TResult> allowDiskUse(java.lang.Boolean)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.batchSize(int)", "public com.mongodb.client.AggregateIterable<TResult> batchSize(int)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.AggregateIterable<TResult> maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.useCursor(java.lang.Boolean)", "public com.mongodb.client.AggregateIterable<TResult> useCursor(java.lang.Boolean)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.AggregateIterable<TResult> maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.AggregateIterable<TResult> bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.AggregateIterable<TResult> collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.comment(java.lang.String)", "public com.mongodb.client.AggregateIterable<TResult> comment(java.lang.String)"], ["com.mongodb.client.AggregateIterable<TResult>", "com.mongodb.client.internal.AggregateIterableImpl.hint(org.bson.conversions.Bson)", "public com.mongodb.client.AggregateIterable<TResult> hint(org.bson.conversions.Bson)"], ["com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>>", "com.mongodb.client.internal.AggregateIterableImpl.asReadOperation()", "public com.mongodb.operation.ReadOperation<com.mongodb.operation.BatchCursor<TResult>> asReadOperation()"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.internal.AggregateIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["com.mongodb.client.MongoClientFactory", "com.mongodb.client.MongoClientFactory()", "public com.mongodb.client.MongoClientFactory()"], ["java.lang.Object", "com.mongodb.client.MongoClientFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)"], ["com.mongodb.client.MongoClient", "com.mongodb.client.MongoClients.create()", "public static com.mongodb.client.MongoClient create()"], ["com.mongodb.client.MongoClient", "com.mongodb.client.MongoClients.create(com.mongodb.MongoClientSettings)", "public static com.mongodb.client.MongoClient create(com.mongodb.MongoClientSettings)"], ["com.mongodb.client.MongoClient", "com.mongodb.client.MongoClients.create(java.lang.String)", "public static com.mongodb.client.MongoClient create(java.lang.String)"], ["com.mongodb.client.MongoClient", "com.mongodb.client.MongoClients.create(com.mongodb.ConnectionString)", "public static com.mongodb.client.MongoClient create(com.mongodb.ConnectionString)"], ["com.mongodb.client.MongoClient", "com.mongodb.client.MongoClients.create(com.mongodb.ConnectionString, com.mongodb.MongoDriverInformation)", "public static com.mongodb.client.MongoClient create(com.mongodb.ConnectionString, com.mongodb.MongoDriverInformation)"], ["com.mongodb.client.MongoClient", "com.mongodb.client.MongoClients.create(com.mongodb.MongoClientSettings, com.mongodb.MongoDriverInformation)", "public static com.mongodb.client.MongoClient create(com.mongodb.MongoClientSettings, com.mongodb.MongoDriverInformation)"], ["com.mongodb.client.jndi.MongoClientFactory", "com.mongodb.client.jndi.MongoClientFactory()", "public com.mongodb.client.jndi.MongoClientFactory()"], ["java.lang.Object", "com.mongodb.client.jndi.MongoClientFactory.getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>)", "public java.lang.Object getObjectInstance(java.lang.Object, javax.naming.Name, javax.naming.Context, java.util.Hashtable<?, ?>) throws java.lang.Exception"], ["com.mongodb.client.vault.ClientEncryption", "com.mongodb.client.vault.ClientEncryptions.create(com.mongodb.ClientEncryptionSettings)", "public static com.mongodb.client.vault.ClientEncryption create(com.mongodb.ClientEncryptionSettings)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult()", "public com.mongodb.client.result.DeleteResult()"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult.acknowledged(long)", "public static com.mongodb.client.result.DeleteResult acknowledged(long)"], ["com.mongodb.client.result.DeleteResult", "com.mongodb.client.result.DeleteResult.unacknowledged()", "public static com.mongodb.client.result.DeleteResult unacknowledged()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getMatchedCount()", "public long getMatchedCount()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["long", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getModifiedCount()", "public long getModifiedCount()"], ["org.bson.BsonValue", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.UpdateResult$UnacknowledgedUpdateResult.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getMatchedCount()", "public long getMatchedCount()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.isModifiedCountAvailable()", "public boolean isModifiedCountAvailable()"], ["long", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getModifiedCount()", "public long getModifiedCount()"], ["org.bson.BsonValue", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.getUpsertedId()", "public org.bson.BsonValue getUpsertedId()"], ["boolean", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.UpdateResult$AcknowledgedUpdateResult.toString()", "public java.lang.String toString()"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult()", "public com.mongodb.client.result.UpdateResult()"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult.acknowledged(long, java.lang.Long, org.bson.BsonValue)", "public static com.mongodb.client.result.UpdateResult acknowledged(long, java.lang.Long, org.bson.BsonValue)"], ["com.mongodb.client.result.UpdateResult", "com.mongodb.client.result.UpdateResult.unacknowledged()", "public static com.mongodb.client.result.UpdateResult unacknowledged()"], ["boolean", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.getDeletedCount()", "public long getDeletedCount()"], ["boolean", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.DeleteResult$UnacknowledgedDeleteResult.toString()", "public java.lang.String toString()"], ["boolean", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.wasAcknowledged()", "public boolean wasAcknowledged()"], ["long", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.getDeletedCount()", "public long getDeletedCount()"], ["boolean", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.result.DeleteResult$AcknowledgedDeleteResult.toString()", "public java.lang.String toString()"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBuckets.create(com.mongodb.client.MongoDatabase)", "public static com.mongodb.client.gridfs.GridFSBucket create(com.mongodb.client.MongoDatabase)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBuckets.create(com.mongodb.client.MongoDatabase, java.lang.String)", "public static com.mongodb.client.gridfs.GridFSBucket create(com.mongodb.client.MongoDatabase, java.lang.String)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.getFileId()", "public org.bson.types.ObjectId getFileId()"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.getObjectId()", "public org.bson.types.ObjectId getObjectId()"], ["org.bson.BsonValue", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.getId()", "public org.bson.BsonValue getId()"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.abort()", "public void abort()"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.write(int)", "public void write(int)"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.write(byte[])", "public void write(byte[])"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "com.mongodb.client.gridfs.GridFSUploadStreamImpl.close()", "public void close()"], ["java.lang.String", "com.mongodb.client.gridfs.GridFSBucketImpl.getBucketName()", "public java.lang.String getBucketName()"], ["int", "com.mongodb.client.gridfs.GridFSBucketImpl.getChunkSizeBytes()", "public int getChunkSizeBytes()"], ["com.mongodb.ReadPreference", "com.mongodb.client.gridfs.GridFSBucketImpl.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.WriteConcern", "com.mongodb.client.gridfs.GridFSBucketImpl.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.ReadConcern", "com.mongodb.client.gridfs.GridFSBucketImpl.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["boolean", "com.mongodb.client.gridfs.GridFSBucketImpl.getDisableMD5()", "public boolean getDisableMD5()"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withChunkSizeBytes(int)", "public com.mongodb.client.gridfs.GridFSBucket withChunkSizeBytes(int)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withReadPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.gridfs.GridFSBucket withReadPreference(com.mongodb.ReadPreference)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withWriteConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.gridfs.GridFSBucket withWriteConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withReadConcern(com.mongodb.ReadConcern)", "public com.mongodb.client.gridfs.GridFSBucket withReadConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.gridfs.GridFSBucket", "com.mongodb.client.gridfs.GridFSBucketImpl.withDisableMD5(boolean)", "public com.mongodb.client.gridfs.GridFSBucket withDisableMD5(boolean)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(java.lang.String)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(org.bson.BsonValue, java.lang.String)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(org.bson.BsonValue, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(org.bson.BsonValue, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(org.bson.BsonValue, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.client.ClientSession, java.lang.String)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(com.mongodb.client.ClientSession, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.client.ClientSession, org.bson.types.ObjectId, java.lang.String)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(com.mongodb.client.ClientSession, org.bson.types.ObjectId, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openUploadStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public com.mongodb.client.gridfs.GridFSUploadStream openUploadStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(java.lang.String, java.io.InputStream)", "public org.bson.types.ObjectId uploadFromStream(java.lang.String, java.io.InputStream)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public org.bson.types.ObjectId uploadFromStream(java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(org.bson.BsonValue, java.lang.String, java.io.InputStream)", "public void uploadFromStream(org.bson.BsonValue, java.lang.String, java.io.InputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(org.bson.BsonValue, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public void uploadFromStream(org.bson.BsonValue, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.client.ClientSession, java.lang.String, java.io.InputStream)", "public org.bson.types.ObjectId uploadFromStream(com.mongodb.client.ClientSession, java.lang.String, java.io.InputStream)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.client.ClientSession, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public org.bson.types.ObjectId uploadFromStream(com.mongodb.client.ClientSession, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String, java.io.InputStream)", "public void uploadFromStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String, java.io.InputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.uploadFromStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)", "public void uploadFromStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String, java.io.InputStream, com.mongodb.client.gridfs.model.GridFSUploadOptions)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(org.bson.types.ObjectId)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(org.bson.types.ObjectId)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(org.bson.BsonValue)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(org.bson.BsonValue)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(java.lang.String)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(java.lang.String)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadOptions)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.client.ClientSession, org.bson.types.ObjectId)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(com.mongodb.client.ClientSession, org.bson.types.ObjectId)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.client.ClientSession, org.bson.BsonValue)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(com.mongodb.client.ClientSession, org.bson.BsonValue)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.client.ClientSession, java.lang.String)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(com.mongodb.client.ClientSession, java.lang.String)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStream(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadOptions)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStream(com.mongodb.client.ClientSession, java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(org.bson.types.ObjectId, java.io.OutputStream)", "public void downloadToStream(org.bson.types.ObjectId, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(org.bson.BsonValue, java.io.OutputStream)", "public void downloadToStream(org.bson.BsonValue, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(java.lang.String, java.io.OutputStream)", "public void downloadToStream(java.lang.String, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadOptions)", "public void downloadToStream(java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.client.ClientSession, org.bson.types.ObjectId, java.io.OutputStream)", "public void downloadToStream(com.mongodb.client.ClientSession, org.bson.types.ObjectId, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.io.OutputStream)", "public void downloadToStream(com.mongodb.client.ClientSession, org.bson.BsonValue, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.client.ClientSession, java.lang.String, java.io.OutputStream)", "public void downloadToStream(com.mongodb.client.ClientSession, java.lang.String, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStream(com.mongodb.client.ClientSession, java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadOptions)", "public void downloadToStream(com.mongodb.client.ClientSession, java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadOptions)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find()", "public com.mongodb.client.gridfs.GridFSFindIterable find()"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find(org.bson.conversions.Bson)", "public com.mongodb.client.gridfs.GridFSFindIterable find(org.bson.conversions.Bson)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find(com.mongodb.client.ClientSession)", "public com.mongodb.client.gridfs.GridFSFindIterable find(com.mongodb.client.ClientSession)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSBucketImpl.find(com.mongodb.client.ClientSession, org.bson.conversions.Bson)", "public com.mongodb.client.gridfs.GridFSFindIterable find(com.mongodb.client.ClientSession, org.bson.conversions.Bson)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(org.bson.types.ObjectId)", "public void delete(org.bson.types.ObjectId)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(org.bson.BsonValue)", "public void delete(org.bson.BsonValue)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(com.mongodb.client.ClientSession, org.bson.types.ObjectId)", "public void delete(com.mongodb.client.ClientSession, org.bson.types.ObjectId)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.delete(com.mongodb.client.ClientSession, org.bson.BsonValue)", "public void delete(com.mongodb.client.ClientSession, org.bson.BsonValue)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(org.bson.types.ObjectId, java.lang.String)", "public void rename(org.bson.types.ObjectId, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(org.bson.BsonValue, java.lang.String)", "public void rename(org.bson.BsonValue, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(com.mongodb.client.ClientSession, org.bson.types.ObjectId, java.lang.String)", "public void rename(com.mongodb.client.ClientSession, org.bson.types.ObjectId, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.rename(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String)", "public void rename(com.mongodb.client.ClientSession, org.bson.BsonValue, java.lang.String)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.drop()", "public void drop()"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.drop(com.mongodb.client.ClientSession)", "public void drop(com.mongodb.client.ClientSession)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStreamByName(java.lang.String)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStreamByName(java.lang.String)"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSBucketImpl.openDownloadStreamByName(java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions)", "public com.mongodb.client.gridfs.GridFSDownloadStream openDownloadStreamByName(java.lang.String, com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStreamByName(java.lang.String, java.io.OutputStream)", "public void downloadToStreamByName(java.lang.String, java.io.OutputStream)"], ["void", "com.mongodb.client.gridfs.GridFSBucketImpl.downloadToStreamByName(java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions)", "public void downloadToStreamByName(java.lang.String, java.io.OutputStream, com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.getGridFSFile()", "public com.mongodb.client.gridfs.model.GridFSFile getGridFSFile()"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.batchSize(int)", "public com.mongodb.client.gridfs.GridFSDownloadStream batchSize(int)"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.read()", "public int read()"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.read(byte[])", "public int read(byte[])"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.read(byte[], int, int)", "public int read(byte[], int, int)"], ["long", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.skip(long)", "public long skip(long)"], ["int", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.available()", "public int available()"], ["void", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.mark()", "public void mark()"], ["synchronized", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.void mark(int)", "public synchronized void mark(int)"], ["synchronized", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.void reset()", "public synchronized void reset()"], ["boolean", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.markSupported()", "public boolean markSupported()"], ["void", "com.mongodb.client.gridfs.GridFSDownloadStreamImpl.close()", "public void close()"], ["com.mongodb.client.gridfs.GridFSDownloadStream", "com.mongodb.client.gridfs.GridFSDownloadStream()", "public com.mongodb.client.gridfs.GridFSDownloadStream()"], ["com.mongodb.client.gridfs.codecs.GridFSFileCodec", "com.mongodb.client.gridfs.codecs.GridFSFileCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.gridfs.codecs.GridFSFileCodec(org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.gridfs.model.GridFSFile decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.encode(org.bson.BsonWriter, com.mongodb.client.gridfs.model.GridFSFile, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.gridfs.model.GridFSFile, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.client.gridfs.model.GridFSFile>", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.client.gridfs.model.GridFSFile> getEncoderClass()"], ["void", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.gridfs.codecs.GridFSFileCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider", "com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider()", "public com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.client.gridfs.codecs.GridFSFileCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.gridfs.GridFSUploadStream", "com.mongodb.client.gridfs.GridFSUploadStream()", "public com.mongodb.client.gridfs.GridFSUploadStream()"], ["void", "com.mongodb.client.gridfs.GridFSUploadStream.flush()", "public void flush()"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.sort(org.bson.conversions.Bson)", "public com.mongodb.client.gridfs.GridFSFindIterable sort(org.bson.conversions.Bson)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.skip(int)", "public com.mongodb.client.gridfs.GridFSFindIterable skip(int)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.limit(int)", "public com.mongodb.client.gridfs.GridFSFindIterable limit(int)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.filter(org.bson.conversions.Bson)", "public com.mongodb.client.gridfs.GridFSFindIterable filter(org.bson.conversions.Bson)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.gridfs.GridFSFindIterable maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.batchSize(int)", "public com.mongodb.client.gridfs.GridFSFindIterable batchSize(int)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.gridfs.GridFSFindIterable collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.gridfs.GridFSFindIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.noCursorTimeout(boolean)", "public com.mongodb.client.gridfs.GridFSFindIterable noCursorTimeout(boolean)"], ["com.mongodb.client.MongoCursor<com.mongodb.client.gridfs.model.GridFSFile>", "com.mongodb.client.gridfs.GridFSFindIterableImpl.iterator()", "public com.mongodb.client.MongoCursor<com.mongodb.client.gridfs.model.GridFSFile> iterator()"], ["com.mongodb.client.MongoCursor<com.mongodb.client.gridfs.model.GridFSFile>", "com.mongodb.client.gridfs.GridFSFindIterableImpl.cursor()", "public com.mongodb.client.MongoCursor<com.mongodb.client.gridfs.model.GridFSFile> cursor()"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.GridFSFindIterableImpl.first()", "public com.mongodb.client.gridfs.model.GridFSFile first()"], ["<U> com.mongodb.client.MongoIterable<U>", "com.mongodb.client.gridfs.GridFSFindIterableImpl.map(com.mongodb.Function<com.mongodb.client.gridfs.model.GridFSFile, U>)", "public <U> com.mongodb.client.MongoIterable<U> map(com.mongodb.Function<com.mongodb.client.gridfs.model.GridFSFile, U>)"], ["void", "com.mongodb.client.gridfs.GridFSFindIterableImpl.forEach(com.mongodb.Block<? super com.mongodb.client.gridfs.model.GridFSFile>)", "public void forEach(com.mongodb.Block<? super com.mongodb.client.gridfs.model.GridFSFile>)"], ["<A extends java.util.Collection<? super com.mongodb.client.gridfs.model.GridFSFile>> A", "com.mongodb.client.gridfs.GridFSFindIterableImpl.into(A)", "public <A extends java.util.Collection<? super com.mongodb.client.gridfs.model.GridFSFile>> A into(A)"], ["com.mongodb.client.MongoIterable", "com.mongodb.client.gridfs.GridFSFindIterableImpl.batchSize(int)", "public com.mongodb.client.MongoIterable batchSize(int)"], ["java.lang.Object", "com.mongodb.client.gridfs.GridFSFindIterableImpl.first()", "public java.lang.Object first()"], ["java.util.Iterator", "com.mongodb.client.gridfs.GridFSFindIterableImpl.iterator()", "public java.util.Iterator iterator()"], ["com.mongodb.client.gridfs.model.GridFSDownloadOptions", "com.mongodb.client.gridfs.model.GridFSDownloadOptions()", "public com.mongodb.client.gridfs.model.GridFSDownloadOptions()"], ["com.mongodb.client.gridfs.model.GridFSDownloadOptions", "com.mongodb.client.gridfs.model.GridFSDownloadOptions.revision(int)", "public com.mongodb.client.gridfs.model.GridFSDownloadOptions revision(int)"], ["int", "com.mongodb.client.gridfs.model.GridFSDownloadOptions.getRevision()", "public int getRevision()"], ["com.mongodb.client.gridfs.model.GridFSUploadOptions", "com.mongodb.client.gridfs.model.GridFSUploadOptions()", "public com.mongodb.client.gridfs.model.GridFSUploadOptions()"], ["java.lang.Integer", "com.mongodb.client.gridfs.model.GridFSUploadOptions.getChunkSizeBytes()", "public java.lang.Integer getChunkSizeBytes()"], ["com.mongodb.client.gridfs.model.GridFSUploadOptions", "com.mongodb.client.gridfs.model.GridFSUploadOptions.chunkSizeBytes(java.lang.Integer)", "public com.mongodb.client.gridfs.model.GridFSUploadOptions chunkSizeBytes(java.lang.Integer)"], ["org.bson.Document", "com.mongodb.client.gridfs.model.GridFSUploadOptions.getMetadata()", "public org.bson.Document getMetadata()"], ["com.mongodb.client.gridfs.model.GridFSUploadOptions", "com.mongodb.client.gridfs.model.GridFSUploadOptions.metadata(org.bson.Document)", "public com.mongodb.client.gridfs.model.GridFSUploadOptions metadata(org.bson.Document)"], ["com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions", "com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions()", "public com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions()"], ["com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions", "com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions.revision(int)", "public com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions revision(int)"], ["int", "com.mongodb.client.gridfs.model.GridFSDownloadByNameOptions.getRevision()", "public int getRevision()"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.model.GridFSFile(org.bson.BsonValue, java.lang.String, long, int, java.util.Date, java.lang.String, org.bson.Document)", "public com.mongodb.client.gridfs.model.GridFSFile(org.bson.BsonValue, java.lang.String, long, int, java.util.Date, java.lang.String, org.bson.Document)"], ["com.mongodb.client.gridfs.model.GridFSFile", "com.mongodb.client.gridfs.model.GridFSFile(org.bson.BsonValue, java.lang.String, long, int, java.util.Date, java.lang.String, org.bson.Document, org.bson.Document)", "public com.mongodb.client.gridfs.model.GridFSFile(org.bson.BsonValue, java.lang.String, long, int, java.util.Date, java.lang.String, org.bson.Document, org.bson.Document)"], ["org.bson.types.ObjectId", "com.mongodb.client.gridfs.model.GridFSFile.getObjectId()", "public org.bson.types.ObjectId getObjectId()"], ["org.bson.BsonValue", "com.mongodb.client.gridfs.model.GridFSFile.getId()", "public org.bson.BsonValue getId()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.getFilename()", "public java.lang.String getFilename()"], ["long", "com.mongodb.client.gridfs.model.GridFSFile.getLength()", "public long getLength()"], ["int", "com.mongodb.client.gridfs.model.GridFSFile.getChunkSize()", "public int getChunkSize()"], ["java.util.Date", "com.mongodb.client.gridfs.model.GridFSFile.getUploadDate()", "public java.util.Date getUploadDate()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.getMD5()", "public java.lang.String getMD5()"], ["org.bson.Document", "com.mongodb.client.gridfs.model.GridFSFile.getMetadata()", "public org.bson.Document getMetadata()"], ["org.bson.Document", "com.mongodb.client.gridfs.model.GridFSFile.getExtraElements()", "public org.bson.Document getExtraElements()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.getContentType()", "public java.lang.String getContentType()"], ["java.util.List<java.lang.String>", "com.mongodb.client.gridfs.model.GridFSFile.getAliases()", "public java.util.List<java.lang.String> getAliases()"], ["boolean", "com.mongodb.client.gridfs.model.GridFSFile.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.gridfs.model.GridFSFile.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.gridfs.model.GridFSFile.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.ReturnDocument[]", "com.mongodb.client.model.ReturnDocument.values()", "public static com.mongodb.client.model.ReturnDocument[] values()"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.ReturnDocument.valueOf(java.lang.String)", "public static com.mongodb.client.model.ReturnDocument valueOf(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$SimplePipelineStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$SimplePipelineStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$SimplePipelineStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$SimplePipelineStage.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$AndFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$AndFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$AndFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$AndFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.RenameCollectionOptions", "com.mongodb.client.model.RenameCollectionOptions()", "public com.mongodb.client.model.RenameCollectionOptions()"], ["boolean", "com.mongodb.client.model.RenameCollectionOptions.isDropTarget()", "public boolean isDropTarget()"], ["com.mongodb.client.model.RenameCollectionOptions", "com.mongodb.client.model.RenameCollectionOptions.dropTarget(boolean)", "public com.mongodb.client.model.RenameCollectionOptions dropTarget(boolean)"], ["java.lang.String", "com.mongodb.client.model.RenameCollectionOptions.toString()", "public java.lang.String toString()"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Projections.computed(java.lang.String, TExpression)", "public static <TExpression> org.bson.conversions.Bson computed(java.lang.String, TExpression)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.include(java.lang.String...)", "public static org.bson.conversions.Bson include(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.include(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson include(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.exclude(java.lang.String...)", "public static org.bson.conversions.Bson exclude(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.exclude(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson exclude(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.excludeId()", "public static org.bson.conversions.Bson excludeId()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.elemMatch(java.lang.String)", "public static org.bson.conversions.Bson elemMatch(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.elemMatch(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson elemMatch(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.metaTextScore(java.lang.String)", "public static org.bson.conversions.Bson metaTextScore(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.slice(java.lang.String, int)", "public static org.bson.conversions.Bson slice(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.slice(java.lang.String, int, int)", "public static org.bson.conversions.Bson slice(java.lang.String, int, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.fields(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson fields(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Projections.fields(java.util.List<? extends org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson fields(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$AddFieldsStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$AddFieldsStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$AddFieldsStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$AddFieldsStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.CollationMaxVariable[]", "com.mongodb.client.model.CollationMaxVariable.values()", "public static com.mongodb.client.model.CollationMaxVariable[] values()"], ["com.mongodb.client.model.CollationMaxVariable", "com.mongodb.client.model.CollationMaxVariable.valueOf(java.lang.String)", "public static com.mongodb.client.model.CollationMaxVariable valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.CollationMaxVariable.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.CollationMaxVariable", "com.mongodb.client.model.CollationMaxVariable.fromString(java.lang.String)", "public static com.mongodb.client.model.CollationMaxVariable fromString(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$FacetStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$FacetStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$FacetStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$FacetStage.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$GeometryOperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$GeometryOperatorFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$GeometryOperatorFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$GeometryOperatorFilter.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$NotFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$NotFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$NotFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$NotFilter.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteOptions()", "public com.mongodb.client.model.DeleteOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DeleteOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DeleteOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.DeleteOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$GroupStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$GroupStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$GroupStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$GroupStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.Facet", "com.mongodb.client.model.Facet(java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.model.Facet(java.lang.String, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.Facet", "com.mongodb.client.model.Facet(java.lang.String, org.bson.conversions.Bson...)", "public com.mongodb.client.model.Facet(java.lang.String, org.bson.conversions.Bson...)"], ["java.lang.String", "com.mongodb.client.model.Facet.getName()", "public java.lang.String getName()"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.Facet.getPipeline()", "public java.util.List<? extends org.bson.conversions.Bson> getPipeline()"], ["boolean", "com.mongodb.client.model.Facet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Facet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Facet.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions()", "public com.mongodb.client.model.DBCollectionRemoveOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionRemoveOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCollectionRemoveOptions collation(com.mongodb.client.model.Collation)"], ["com.mongodb.WriteConcern", "com.mongodb.client.model.DBCollectionRemoveOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.model.DBCollectionRemoveOptions writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.DBEncoder", "com.mongodb.client.model.DBCollectionRemoveOptions.getEncoder()", "public com.mongodb.DBEncoder getEncoder()"], ["com.mongodb.client.model.DBCollectionRemoveOptions", "com.mongodb.client.model.DBCollectionRemoveOptions.encoder(com.mongodb.DBEncoder)", "public com.mongodb.client.model.DBCollectionRemoveOptions encoder(com.mongodb.DBEncoder)"], ["com.mongodb.client.model.Filters$OrNorFilter$Operator[]", "com.mongodb.client.model.Filters$OrNorFilter$Operator.values()", "public static com.mongodb.client.model.Filters$OrNorFilter$Operator[] values()"], ["com.mongodb.client.model.Filters$OrNorFilter$Operator", "com.mongodb.client.model.Filters$OrNorFilter$Operator.valueOf(java.lang.String)", "public static com.mongodb.client.model.Filters$OrNorFilter$Operator valueOf(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$WithEachUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Updates$WithEachUpdate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Updates$WithEachUpdate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Updates$WithEachUpdate.toString()", "public java.lang.String toString()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.combine(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson combine(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.combine(java.util.List<? extends org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson combine(java.util.List<? extends org.bson.conversions.Bson>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.set(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson set(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.unset(java.lang.String)", "public static org.bson.conversions.Bson unset(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.setOnInsert(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson setOnInsert(org.bson.conversions.Bson)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.setOnInsert(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson setOnInsert(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.rename(java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson rename(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.inc(java.lang.String, java.lang.Number)", "public static org.bson.conversions.Bson inc(java.lang.String, java.lang.Number)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.mul(java.lang.String, java.lang.Number)", "public static org.bson.conversions.Bson mul(java.lang.String, java.lang.Number)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.min(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson min(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.max(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson max(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.currentDate(java.lang.String)", "public static org.bson.conversions.Bson currentDate(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.currentTimestamp(java.lang.String)", "public static org.bson.conversions.Bson currentTimestamp(java.lang.String)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.addToSet(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson addToSet(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.addEachToSet(java.lang.String, java.util.List<TItem>)", "public static <TItem> org.bson.conversions.Bson addEachToSet(java.lang.String, java.util.List<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.push(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson push(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pushEach(java.lang.String, java.util.List<TItem>)", "public static <TItem> org.bson.conversions.Bson pushEach(java.lang.String, java.util.List<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pushEach(java.lang.String, java.util.List<TItem>, com.mongodb.client.model.PushOptions)", "public static <TItem> org.bson.conversions.Bson pushEach(java.lang.String, java.util.List<TItem>, com.mongodb.client.model.PushOptions)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pull(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson pull(java.lang.String, TItem)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pullByFilter(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson pullByFilter(org.bson.conversions.Bson)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Updates.pullAll(java.lang.String, java.util.List<TItem>)", "public static <TItem> org.bson.conversions.Bson pullAll(java.lang.String, java.util.List<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.popFirst(java.lang.String)", "public static org.bson.conversions.Bson popFirst(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.popLast(java.lang.String)", "public static org.bson.conversions.Bson popLast(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseAnd(java.lang.String, int)", "public static org.bson.conversions.Bson bitwiseAnd(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseAnd(java.lang.String, long)", "public static org.bson.conversions.Bson bitwiseAnd(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseOr(java.lang.String, int)", "public static org.bson.conversions.Bson bitwiseOr(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseOr(java.lang.String, long)", "public static org.bson.conversions.Bson bitwiseOr(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseXor(java.lang.String, int)", "public static org.bson.conversions.Bson bitwiseXor(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Updates.bitwiseXor(java.lang.String, long)", "public static org.bson.conversions.Bson bitwiseXor(java.lang.String, long)"], ["boolean", "com.mongodb.client.model.Updates$PushUpdate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Updates$PushUpdate.hashCode()", "public int hashCode()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$SimpleEncodingFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$SimpleEncodingFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$SimpleEncodingFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$SimpleEncodingFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions()", "public com.mongodb.client.model.IndexOptions()"], ["boolean", "com.mongodb.client.model.IndexOptions.isBackground()", "public boolean isBackground()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.background(boolean)", "public com.mongodb.client.model.IndexOptions background(boolean)"], ["boolean", "com.mongodb.client.model.IndexOptions.isUnique()", "public boolean isUnique()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.unique(boolean)", "public com.mongodb.client.model.IndexOptions unique(boolean)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getName()", "public java.lang.String getName()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.name(java.lang.String)", "public com.mongodb.client.model.IndexOptions name(java.lang.String)"], ["boolean", "com.mongodb.client.model.IndexOptions.isSparse()", "public boolean isSparse()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.sparse(boolean)", "public com.mongodb.client.model.IndexOptions sparse(boolean)"], ["java.lang.Long", "com.mongodb.client.model.IndexOptions.getExpireAfter(java.util.concurrent.TimeUnit)", "public java.lang.Long getExpireAfter(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.IndexOptions expireAfter(java.lang.Long, java.util.concurrent.TimeUnit)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getVersion()", "public java.lang.Integer getVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.version(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions version(java.lang.Integer)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getWeights()", "public org.bson.conversions.Bson getWeights()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.weights(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptions weights(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getDefaultLanguage()", "public java.lang.String getDefaultLanguage()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.defaultLanguage(java.lang.String)", "public com.mongodb.client.model.IndexOptions defaultLanguage(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.getLanguageOverride()", "public java.lang.String getLanguageOverride()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.languageOverride(java.lang.String)", "public com.mongodb.client.model.IndexOptions languageOverride(java.lang.String)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getTextVersion()", "public java.lang.Integer getTextVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.textVersion(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions textVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getSphereVersion()", "public java.lang.Integer getSphereVersion()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.sphereVersion(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions sphereVersion(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.IndexOptions.getBits()", "public java.lang.Integer getBits()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.bits(java.lang.Integer)", "public com.mongodb.client.model.IndexOptions bits(java.lang.Integer)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getMin()", "public java.lang.Double getMin()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.min(java.lang.Double)", "public com.mongodb.client.model.IndexOptions min(java.lang.Double)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getMax()", "public java.lang.Double getMax()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.max(java.lang.Double)", "public com.mongodb.client.model.IndexOptions max(java.lang.Double)"], ["java.lang.Double", "com.mongodb.client.model.IndexOptions.getBucketSize()", "public java.lang.Double getBucketSize()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.bucketSize(java.lang.Double)", "public com.mongodb.client.model.IndexOptions bucketSize(java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getStorageEngine()", "public org.bson.conversions.Bson getStorageEngine()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.storageEngine(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptions storageEngine(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getPartialFilterExpression()", "public org.bson.conversions.Bson getPartialFilterExpression()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.partialFilterExpression(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptions partialFilterExpression(org.bson.conversions.Bson)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.IndexOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.IndexOptions collation(com.mongodb.client.model.Collation)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptions.getWildcardProjection()", "public org.bson.conversions.Bson getWildcardProjection()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexOptions.wildcardProjection(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptions wildcardProjection(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.IndexOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$BucketStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$BucketStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$BucketStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$BucketStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.ValidationLevel[]", "com.mongodb.client.model.ValidationLevel.values()", "public static com.mongodb.client.model.ValidationLevel[] values()"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.client.model.ValidationLevel.valueOf(java.lang.String)", "public static com.mongodb.client.model.ValidationLevel valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.ValidationLevel.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.client.model.ValidationLevel.fromString(java.lang.String)", "public static com.mongodb.client.model.ValidationLevel fromString(java.lang.String)"], ["com.mongodb.client.model.IndexOptionDefaults", "com.mongodb.client.model.IndexOptionDefaults()", "public com.mongodb.client.model.IndexOptionDefaults()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexOptionDefaults.getStorageEngine()", "public org.bson.conversions.Bson getStorageEngine()"], ["com.mongodb.client.model.IndexOptionDefaults", "com.mongodb.client.model.IndexOptionDefaults.storageEngine(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexOptionDefaults storageEngine(org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.IndexOptionDefaults.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.CollationCaseFirst[]", "com.mongodb.client.model.CollationCaseFirst.values()", "public static com.mongodb.client.model.CollationCaseFirst[] values()"], ["com.mongodb.client.model.CollationCaseFirst", "com.mongodb.client.model.CollationCaseFirst.valueOf(java.lang.String)", "public static com.mongodb.client.model.CollationCaseFirst valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.CollationCaseFirst.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.CollationCaseFirst", "com.mongodb.client.model.CollationCaseFirst.fromString(java.lang.String)", "public static com.mongodb.client.model.CollationCaseFirst fromString(java.lang.String)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.SimpleExpression.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.SimpleExpression.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.SimpleExpression.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.SimpleExpression.toString()", "public java.lang.String toString()"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.eq(TItem)", "public static <TItem> org.bson.conversions.Bson eq(TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.eq(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson eq(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.ne(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson ne(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.gt(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson gt(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.lt(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson lt(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.gte(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson gte(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.lte(java.lang.String, TItem)", "public static <TItem> org.bson.conversions.Bson lte(java.lang.String, TItem)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.in(java.lang.String, TItem...)", "public static <TItem> org.bson.conversions.Bson in(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.in(java.lang.String, java.lang.Iterable<TItem>)", "public static <TItem> org.bson.conversions.Bson in(java.lang.String, java.lang.Iterable<TItem>)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nin(java.lang.String, TItem...)", "public static <TItem> org.bson.conversions.Bson nin(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nin(java.lang.String, java.lang.Iterable<TItem>)", "public static <TItem> org.bson.conversions.Bson nin(java.lang.String, java.lang.Iterable<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.and(java.lang.Iterable<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson and(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.and(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson and(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.or(java.lang.Iterable<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson or(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.or(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson or(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.not(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson not(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nor(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson nor(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nor(java.lang.Iterable<org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson nor(java.lang.Iterable<org.bson.conversions.Bson>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.exists(java.lang.String)", "public static org.bson.conversions.Bson exists(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.exists(java.lang.String, boolean)", "public static org.bson.conversions.Bson exists(java.lang.String, boolean)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.type(java.lang.String, org.bson.BsonType)", "public static org.bson.conversions.Bson type(java.lang.String, org.bson.BsonType)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.type(java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson type(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.mod(java.lang.String, long, long)", "public static org.bson.conversions.Bson mod(java.lang.String, long, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson regex(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson regex(java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.regex(java.lang.String, java.util.regex.Pattern)", "public static org.bson.conversions.Bson regex(java.lang.String, java.util.regex.Pattern)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String)", "public static org.bson.conversions.Bson text(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson text(java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.text(java.lang.String, com.mongodb.client.model.TextSearchOptions)", "public static org.bson.conversions.Bson text(java.lang.String, com.mongodb.client.model.TextSearchOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.where(java.lang.String)", "public static org.bson.conversions.Bson where(java.lang.String)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.expr(TExpression)", "public static <TExpression> org.bson.conversions.Bson expr(TExpression)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.all(java.lang.String, TItem...)", "public static <TItem> org.bson.conversions.Bson all(java.lang.String, TItem...)"], ["<TItem> org.bson.conversions.Bson", "com.mongodb.client.model.Filters.all(java.lang.String, java.lang.Iterable<TItem>)", "public static <TItem> org.bson.conversions.Bson all(java.lang.String, java.lang.Iterable<TItem>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.elemMatch(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson elemMatch(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.size(java.lang.String, int)", "public static org.bson.conversions.Bson size(java.lang.String, int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAllClear(java.lang.String, long)", "public static org.bson.conversions.Bson bitsAllClear(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAllSet(java.lang.String, long)", "public static org.bson.conversions.Bson bitsAllSet(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAnyClear(java.lang.String, long)", "public static org.bson.conversions.Bson bitsAnyClear(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.bitsAnySet(java.lang.String, long)", "public static org.bson.conversions.Bson bitsAnySet(java.lang.String, long)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithin(java.lang.String, com.mongodb.client.model.geojson.Geometry)", "public static org.bson.conversions.Bson geoWithin(java.lang.String, com.mongodb.client.model.geojson.Geometry)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithin(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson geoWithin(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinBox(java.lang.String, double, double, double, double)", "public static org.bson.conversions.Bson geoWithinBox(java.lang.String, double, double, double, double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinPolygon(java.lang.String, java.util.List<java.util.List<java.lang.Double>>)", "public static org.bson.conversions.Bson geoWithinPolygon(java.lang.String, java.util.List<java.util.List<java.lang.Double>>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinCenter(java.lang.String, double, double, double)", "public static org.bson.conversions.Bson geoWithinCenter(java.lang.String, double, double, double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoWithinCenterSphere(java.lang.String, double, double, double)", "public static org.bson.conversions.Bson geoWithinCenterSphere(java.lang.String, double, double, double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoIntersects(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson geoIntersects(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.geoIntersects(java.lang.String, com.mongodb.client.model.geojson.Geometry)", "public static org.bson.conversions.Bson geoIntersects(java.lang.String, com.mongodb.client.model.geojson.Geometry)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.near(java.lang.String, com.mongodb.client.model.geojson.Point, java.lang.Double, java.lang.Double)", "public static org.bson.conversions.Bson near(java.lang.String, com.mongodb.client.model.geojson.Point, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.near(java.lang.String, org.bson.conversions.Bson, java.lang.Double, java.lang.Double)", "public static org.bson.conversions.Bson near(java.lang.String, org.bson.conversions.Bson, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.near(java.lang.String, double, double, java.lang.Double, java.lang.Double)", "public static org.bson.conversions.Bson near(java.lang.String, double, double, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nearSphere(java.lang.String, com.mongodb.client.model.geojson.Point, java.lang.Double, java.lang.Double)", "public static org.bson.conversions.Bson nearSphere(java.lang.String, com.mongodb.client.model.geojson.Point, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nearSphere(java.lang.String, org.bson.conversions.Bson, java.lang.Double, java.lang.Double)", "public static org.bson.conversions.Bson nearSphere(java.lang.String, org.bson.conversions.Bson, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.nearSphere(java.lang.String, double, double, java.lang.Double, java.lang.Double)", "public static org.bson.conversions.Bson nearSphere(java.lang.String, double, double, java.lang.Double, java.lang.Double)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Filters.jsonSchema(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson jsonSchema(org.bson.conversions.Bson)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Indexes$CompoundIndex.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Indexes$CompoundIndex.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Indexes$CompoundIndex.hashCode()", "public int hashCode()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$CompositeUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Updates$CompositeUpdate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Updates$CompositeUpdate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Updates$CompositeUpdate.toString()", "public java.lang.String toString()"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.sum(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField sum(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.avg(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField avg(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.first(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField first(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.last(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField last(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.max(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField max(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.min(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField min(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.push(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField push(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.addToSet(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField addToSet(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.stdDevPop(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField stdDevPop(java.lang.String, TExpression)"], ["<TExpression> com.mongodb.client.model.BsonField", "com.mongodb.client.model.Accumulators.stdDevSamp(java.lang.String, TExpression)", "public static <TExpression> com.mongodb.client.model.BsonField stdDevSamp(java.lang.String, TExpression)"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions()", "public com.mongodb.client.model.CreateCollectionOptions()"], ["boolean", "com.mongodb.client.model.CreateCollectionOptions.isAutoIndex()", "public boolean isAutoIndex()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.autoIndex(boolean)", "public com.mongodb.client.model.CreateCollectionOptions autoIndex(boolean)"], ["long", "com.mongodb.client.model.CreateCollectionOptions.getMaxDocuments()", "public long getMaxDocuments()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.maxDocuments(long)", "public com.mongodb.client.model.CreateCollectionOptions maxDocuments(long)"], ["boolean", "com.mongodb.client.model.CreateCollectionOptions.isCapped()", "public boolean isCapped()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.capped(boolean)", "public com.mongodb.client.model.CreateCollectionOptions capped(boolean)"], ["long", "com.mongodb.client.model.CreateCollectionOptions.getSizeInBytes()", "public long getSizeInBytes()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.sizeInBytes(long)", "public com.mongodb.client.model.CreateCollectionOptions sizeInBytes(long)"], ["java.lang.Boolean", "com.mongodb.client.model.CreateCollectionOptions.isUsePowerOf2Sizes()", "public java.lang.Boolean isUsePowerOf2Sizes()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.usePowerOf2Sizes(java.lang.Boolean)", "public com.mongodb.client.model.CreateCollectionOptions usePowerOf2Sizes(java.lang.Boolean)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.CreateCollectionOptions.getStorageEngineOptions()", "public org.bson.conversions.Bson getStorageEngineOptions()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.storageEngineOptions(org.bson.conversions.Bson)", "public com.mongodb.client.model.CreateCollectionOptions storageEngineOptions(org.bson.conversions.Bson)"], ["com.mongodb.client.model.IndexOptionDefaults", "com.mongodb.client.model.CreateCollectionOptions.getIndexOptionDefaults()", "public com.mongodb.client.model.IndexOptionDefaults getIndexOptionDefaults()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.indexOptionDefaults(com.mongodb.client.model.IndexOptionDefaults)", "public com.mongodb.client.model.CreateCollectionOptions indexOptionDefaults(com.mongodb.client.model.IndexOptionDefaults)"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.CreateCollectionOptions.getValidationOptions()", "public com.mongodb.client.model.ValidationOptions getValidationOptions()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.validationOptions(com.mongodb.client.model.ValidationOptions)", "public com.mongodb.client.model.CreateCollectionOptions validationOptions(com.mongodb.client.model.ValidationOptions)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.CreateCollectionOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.CreateCollectionOptions", "com.mongodb.client.model.CreateCollectionOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.CreateCollectionOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.CreateCollectionOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.UpdateOneModel", "com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.UpdateOneModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateOneModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateOneModel.getUpdate()", "public org.bson.conversions.Bson getUpdate()"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.UpdateOneModel.getUpdatePipeline()", "public java.util.List<? extends org.bson.conversions.Bson> getUpdatePipeline()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOneModel.getOptions()", "public com.mongodb.client.model.UpdateOptions getOptions()"], ["java.lang.String", "com.mongodb.client.model.UpdateOneModel.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions()", "public com.mongodb.client.model.TextSearchOptions()"], ["java.lang.String", "com.mongodb.client.model.TextSearchOptions.getLanguage()", "public java.lang.String getLanguage()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions.language(java.lang.String)", "public com.mongodb.client.model.TextSearchOptions language(java.lang.String)"], ["java.lang.Boolean", "com.mongodb.client.model.TextSearchOptions.getCaseSensitive()", "public java.lang.Boolean getCaseSensitive()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions.caseSensitive(java.lang.Boolean)", "public com.mongodb.client.model.TextSearchOptions caseSensitive(java.lang.Boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.TextSearchOptions.getDiacriticSensitive()", "public java.lang.Boolean getDiacriticSensitive()"], ["com.mongodb.client.model.TextSearchOptions", "com.mongodb.client.model.TextSearchOptions.diacriticSensitive(java.lang.Boolean)", "public com.mongodb.client.model.TextSearchOptions diacriticSensitive(java.lang.Boolean)"], ["boolean", "com.mongodb.client.model.TextSearchOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.TextSearchOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.TextSearchOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$PullAllUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Updates$PullAllUpdate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Updates$PullAllUpdate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Updates$PullAllUpdate.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.MergeOptions$WhenMatched[]", "com.mongodb.client.model.MergeOptions$WhenMatched.values()", "public static com.mongodb.client.model.MergeOptions$WhenMatched[] values()"], ["com.mongodb.client.model.MergeOptions$WhenMatched", "com.mongodb.client.model.MergeOptions$WhenMatched.valueOf(java.lang.String)", "public static com.mongodb.client.model.MergeOptions$WhenMatched valueOf(java.lang.String)"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions()", "public com.mongodb.client.model.FindOneAndDeleteOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndDeleteOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndDeleteOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndDeleteOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndDeleteOptions sort(org.bson.conversions.Bson)"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOneAndDeleteOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndDeleteOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOneAndDeleteOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.FindOneAndDeleteOptions", "com.mongodb.client.model.FindOneAndDeleteOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.FindOneAndDeleteOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.FindOneAndDeleteOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.BsonField", "com.mongodb.client.model.BsonField(java.lang.String, org.bson.conversions.Bson)", "public com.mongodb.client.model.BsonField(java.lang.String, org.bson.conversions.Bson)"], ["java.lang.String", "com.mongodb.client.model.BsonField.getName()", "public java.lang.String getName()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.BsonField.getValue()", "public org.bson.conversions.Bson getValue()"], ["boolean", "com.mongodb.client.model.BsonField.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.BsonField.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.BsonField.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.UnwindOptions", "com.mongodb.client.model.UnwindOptions()", "public com.mongodb.client.model.UnwindOptions()"], ["java.lang.Boolean", "com.mongodb.client.model.UnwindOptions.isPreserveNullAndEmptyArrays()", "public java.lang.Boolean isPreserveNullAndEmptyArrays()"], ["com.mongodb.client.model.UnwindOptions", "com.mongodb.client.model.UnwindOptions.preserveNullAndEmptyArrays(java.lang.Boolean)", "public com.mongodb.client.model.UnwindOptions preserveNullAndEmptyArrays(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.client.model.UnwindOptions.getIncludeArrayIndex()", "public java.lang.String getIncludeArrayIndex()"], ["com.mongodb.client.model.UnwindOptions", "com.mongodb.client.model.UnwindOptions.includeArrayIndex(java.lang.String)", "public com.mongodb.client.model.UnwindOptions includeArrayIndex(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.UnwindOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.MergeOptions$WhenNotMatched[]", "com.mongodb.client.model.MergeOptions$WhenNotMatched.values()", "public static com.mongodb.client.model.MergeOptions$WhenNotMatched[] values()"], ["com.mongodb.client.model.MergeOptions$WhenNotMatched", "com.mongodb.client.model.MergeOptions$WhenNotMatched.valueOf(java.lang.String)", "public static com.mongodb.client.model.MergeOptions$WhenNotMatched valueOf(java.lang.String)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions()", "public com.mongodb.client.model.FindOptions()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions(com.mongodb.client.model.FindOptions)", "public com.mongodb.client.model.FindOptions(com.mongodb.client.model.FindOptions)"], ["int", "com.mongodb.client.model.FindOptions.getLimit()", "public int getLimit()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.limit(int)", "public com.mongodb.client.model.FindOptions limit(int)"], ["int", "com.mongodb.client.model.FindOptions.getSkip()", "public int getSkip()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.skip(int)", "public com.mongodb.client.model.FindOptions skip(int)"], ["long", "com.mongodb.client.model.FindOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOptions.getMaxAwaitTime(java.util.concurrent.TimeUnit)", "public long getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOptions maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.client.model.FindOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.batchSize(int)", "public com.mongodb.client.model.FindOptions batchSize(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getModifiers()", "public org.bson.conversions.Bson getModifiers()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.modifiers(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions modifiers(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOptions.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.noCursorTimeout(boolean)", "public com.mongodb.client.model.FindOptions noCursorTimeout(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.oplogReplay(boolean)", "public com.mongodb.client.model.FindOptions oplogReplay(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isPartial()", "public boolean isPartial()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.partial(boolean)", "public com.mongodb.client.model.FindOptions partial(boolean)"], ["com.mongodb.CursorType", "com.mongodb.client.model.FindOptions.getCursorType()", "public com.mongodb.CursorType getCursorType()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.cursorType(com.mongodb.CursorType)", "public com.mongodb.client.model.FindOptions cursorType(com.mongodb.CursorType)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.FindOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.FindOptions.getComment()", "public java.lang.String getComment()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.comment(java.lang.String)", "public com.mongodb.client.model.FindOptions comment(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getHint()", "public org.bson.conversions.Bson getHint()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.hint(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions hint(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getMax()", "public org.bson.conversions.Bson getMax()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.max(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions max(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOptions.getMin()", "public org.bson.conversions.Bson getMin()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.min(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOptions min(org.bson.conversions.Bson)"], ["long", "com.mongodb.client.model.FindOptions.getMaxScan()", "public long getMaxScan()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.maxScan(long)", "public com.mongodb.client.model.FindOptions maxScan(long)"], ["boolean", "com.mongodb.client.model.FindOptions.isReturnKey()", "public boolean isReturnKey()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.returnKey(boolean)", "public com.mongodb.client.model.FindOptions returnKey(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isShowRecordId()", "public boolean isShowRecordId()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.showRecordId(boolean)", "public com.mongodb.client.model.FindOptions showRecordId(boolean)"], ["boolean", "com.mongodb.client.model.FindOptions.isSnapshot()", "public boolean isSnapshot()"], ["com.mongodb.client.model.FindOptions", "com.mongodb.client.model.FindOptions.snapshot(boolean)", "public com.mongodb.client.model.FindOptions snapshot(boolean)"], ["java.lang.String", "com.mongodb.client.model.FindOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions()", "public com.mongodb.client.model.DBCollectionDistinctOptions()"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionDistinctOptions.getFilter()", "public com.mongodb.DBObject getFilter()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.filter(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionDistinctOptions filter(com.mongodb.DBObject)"], ["com.mongodb.ReadPreference", "com.mongodb.client.model.DBCollectionDistinctOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.model.DBCollectionDistinctOptions readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadConcern", "com.mongodb.client.model.DBCollectionDistinctOptions.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.readConcern(com.mongodb.ReadConcern)", "public com.mongodb.client.model.DBCollectionDistinctOptions readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionDistinctOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCollectionDistinctOptions", "com.mongodb.client.model.DBCollectionDistinctOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCollectionDistinctOptions collation(com.mongodb.client.model.Collation)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$BucketAutoStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$BucketAutoStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$BucketAutoStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$BucketAutoStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.AggregationLevel[]", "com.mongodb.client.model.AggregationLevel.values()", "public static com.mongodb.client.model.AggregationLevel[] values()"], ["com.mongodb.client.model.AggregationLevel", "com.mongodb.client.model.AggregationLevel.valueOf(java.lang.String)", "public static com.mongodb.client.model.AggregationLevel valueOf(java.lang.String)"], ["com.mongodb.client.model.Field", "com.mongodb.client.model.Field(java.lang.String, TExpression)", "public com.mongodb.client.model.Field(java.lang.String, TExpression)"], ["java.lang.String", "com.mongodb.client.model.Field.getName()", "public java.lang.String getName()"], ["TExpression", "com.mongodb.client.model.Field.getValue()", "public TExpression getValue()"], ["boolean", "com.mongodb.client.model.Field.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Field.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Field.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.CollationStrength[]", "com.mongodb.client.model.CollationStrength.values()", "public static com.mongodb.client.model.CollationStrength[] values()"], ["com.mongodb.client.model.CollationStrength", "com.mongodb.client.model.CollationStrength.valueOf(java.lang.String)", "public static com.mongodb.client.model.CollationStrength valueOf(java.lang.String)"], ["int", "com.mongodb.client.model.CollationStrength.getIntRepresentation()", "public int getIntRepresentation()"], ["com.mongodb.client.model.CollationStrength", "com.mongodb.client.model.CollationStrength.fromInt(int)", "public static com.mongodb.client.model.CollationStrength fromInt(int)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions()", "public com.mongodb.client.model.FindOneAndUpdateOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndUpdateOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndUpdateOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndUpdateOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndUpdateOptions sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOneAndUpdateOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.upsert(boolean)", "public com.mongodb.client.model.FindOneAndUpdateOptions upsert(boolean)"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.FindOneAndUpdateOptions.getReturnDocument()", "public com.mongodb.client.model.ReturnDocument getReturnDocument()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.returnDocument(com.mongodb.client.model.ReturnDocument)", "public com.mongodb.client.model.FindOneAndUpdateOptions returnDocument(com.mongodb.client.model.ReturnDocument)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOneAndUpdateOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndUpdateOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.client.model.FindOneAndUpdateOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.FindOneAndUpdateOptions bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOneAndUpdateOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.FindOneAndUpdateOptions collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.FindOneAndUpdateOptions", "com.mongodb.client.model.FindOneAndUpdateOptions.arrayFilters(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.model.FindOneAndUpdateOptions arrayFilters(java.util.List<? extends org.bson.conversions.Bson>)"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.FindOneAndUpdateOptions.getArrayFilters()", "public java.util.List<? extends org.bson.conversions.Bson> getArrayFilters()"], ["java.lang.String", "com.mongodb.client.model.FindOneAndUpdateOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Sorts$CompoundSort.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Sorts$CompoundSort.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Sorts$CompoundSort.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Sorts$CompoundSort.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions()", "public com.mongodb.client.model.DBCollectionFindOptions()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.copy()", "public com.mongodb.client.model.DBCollectionFindOptions copy()"], ["int", "com.mongodb.client.model.DBCollectionFindOptions.getLimit()", "public int getLimit()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.limit(int)", "public com.mongodb.client.model.DBCollectionFindOptions limit(int)"], ["int", "com.mongodb.client.model.DBCollectionFindOptions.getSkip()", "public int getSkip()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.skip(int)", "public com.mongodb.client.model.DBCollectionFindOptions skip(int)"], ["long", "com.mongodb.client.model.DBCollectionFindOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.DBCollectionFindOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.DBCollectionFindOptions.getMaxAwaitTime(java.util.concurrent.TimeUnit)", "public long getMaxAwaitTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.maxAwaitTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.DBCollectionFindOptions maxAwaitTime(long, java.util.concurrent.TimeUnit)"], ["int", "com.mongodb.client.model.DBCollectionFindOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.batchSize(int)", "public com.mongodb.client.model.DBCollectionFindOptions batchSize(int)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getModifiers()", "public com.mongodb.DBObject getModifiers()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.modifiers(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindOptions modifiers(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getProjection()", "public com.mongodb.DBObject getProjection()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.projection(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindOptions projection(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getSort()", "public com.mongodb.DBObject getSort()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.sort(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindOptions sort(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isNoCursorTimeout()", "public boolean isNoCursorTimeout()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.noCursorTimeout(boolean)", "public com.mongodb.client.model.DBCollectionFindOptions noCursorTimeout(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isOplogReplay()", "public boolean isOplogReplay()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.oplogReplay(boolean)", "public com.mongodb.client.model.DBCollectionFindOptions oplogReplay(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isPartial()", "public boolean isPartial()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.partial(boolean)", "public com.mongodb.client.model.DBCollectionFindOptions partial(boolean)"], ["com.mongodb.CursorType", "com.mongodb.client.model.DBCollectionFindOptions.getCursorType()", "public com.mongodb.CursorType getCursorType()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.cursorType(com.mongodb.CursorType)", "public com.mongodb.client.model.DBCollectionFindOptions cursorType(com.mongodb.CursorType)"], ["com.mongodb.ReadPreference", "com.mongodb.client.model.DBCollectionFindOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.model.DBCollectionFindOptions readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadConcern", "com.mongodb.client.model.DBCollectionFindOptions.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.readConcern(com.mongodb.ReadConcern)", "public com.mongodb.client.model.DBCollectionFindOptions readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionFindOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCollectionFindOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.DBCollectionFindOptions.getComment()", "public java.lang.String getComment()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.comment(java.lang.String)", "public com.mongodb.client.model.DBCollectionFindOptions comment(java.lang.String)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getHint()", "public com.mongodb.DBObject getHint()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.hint(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindOptions hint(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getMax()", "public com.mongodb.DBObject getMax()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.max(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindOptions max(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindOptions.getMin()", "public com.mongodb.DBObject getMin()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.min(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindOptions min(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isReturnKey()", "public boolean isReturnKey()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.returnKey(boolean)", "public com.mongodb.client.model.DBCollectionFindOptions returnKey(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindOptions.isShowRecordId()", "public boolean isShowRecordId()"], ["com.mongodb.client.model.DBCollectionFindOptions", "com.mongodb.client.model.DBCollectionFindOptions.showRecordId(boolean)", "public com.mongodb.client.model.DBCollectionFindOptions showRecordId(boolean)"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions()", "public com.mongodb.client.model.GraphLookupOptions()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions.depthField(java.lang.String)", "public com.mongodb.client.model.GraphLookupOptions depthField(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.GraphLookupOptions.getDepthField()", "public java.lang.String getDepthField()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions.maxDepth(java.lang.Integer)", "public com.mongodb.client.model.GraphLookupOptions maxDepth(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.GraphLookupOptions.getMaxDepth()", "public java.lang.Integer getMaxDepth()"], ["com.mongodb.client.model.GraphLookupOptions", "com.mongodb.client.model.GraphLookupOptions.restrictSearchWithMatch(org.bson.conversions.Bson)", "public com.mongodb.client.model.GraphLookupOptions restrictSearchWithMatch(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.GraphLookupOptions.getRestrictSearchWithMatch()", "public org.bson.conversions.Bson getRestrictSearchWithMatch()"], ["boolean", "com.mongodb.client.model.GraphLookupOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.GraphLookupOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.GraphLookupOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.EstimatedDocumentCountOptions", "com.mongodb.client.model.EstimatedDocumentCountOptions()", "public com.mongodb.client.model.EstimatedDocumentCountOptions()"], ["long", "com.mongodb.client.model.EstimatedDocumentCountOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.EstimatedDocumentCountOptions", "com.mongodb.client.model.EstimatedDocumentCountOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.EstimatedDocumentCountOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.client.model.EstimatedDocumentCountOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions()", "public com.mongodb.client.model.CountOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.CountOptions.getHint()", "public org.bson.conversions.Bson getHint()"], ["java.lang.String", "com.mongodb.client.model.CountOptions.getHintString()", "public java.lang.String getHintString()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.hint(org.bson.conversions.Bson)", "public com.mongodb.client.model.CountOptions hint(org.bson.conversions.Bson)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.hintString(java.lang.String)", "public com.mongodb.client.model.CountOptions hintString(java.lang.String)"], ["int", "com.mongodb.client.model.CountOptions.getLimit()", "public int getLimit()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.limit(int)", "public com.mongodb.client.model.CountOptions limit(int)"], ["int", "com.mongodb.client.model.CountOptions.getSkip()", "public int getSkip()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.skip(int)", "public com.mongodb.client.model.CountOptions skip(int)"], ["long", "com.mongodb.client.model.CountOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.CountOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.CountOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.CountOptions", "com.mongodb.client.model.CountOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.CountOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.CountOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.MapReduceAction[]", "com.mongodb.client.model.MapReduceAction.values()", "public static com.mongodb.client.model.MapReduceAction[] values()"], ["com.mongodb.client.model.MapReduceAction", "com.mongodb.client.model.MapReduceAction.valueOf(java.lang.String)", "public static com.mongodb.client.model.MapReduceAction valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.MapReduceAction.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions()", "public com.mongodb.client.model.DBCollectionCountOptions()"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionCountOptions.getHint()", "public com.mongodb.DBObject getHint()"], ["java.lang.String", "com.mongodb.client.model.DBCollectionCountOptions.getHintString()", "public java.lang.String getHintString()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.hint(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionCountOptions hint(com.mongodb.DBObject)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.hintString(java.lang.String)", "public com.mongodb.client.model.DBCollectionCountOptions hintString(java.lang.String)"], ["int", "com.mongodb.client.model.DBCollectionCountOptions.getLimit()", "public int getLimit()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.limit(int)", "public com.mongodb.client.model.DBCollectionCountOptions limit(int)"], ["int", "com.mongodb.client.model.DBCollectionCountOptions.getSkip()", "public int getSkip()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.skip(int)", "public com.mongodb.client.model.DBCollectionCountOptions skip(int)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.limit(long)", "public com.mongodb.client.model.DBCollectionCountOptions limit(long)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.skip(long)", "public com.mongodb.client.model.DBCollectionCountOptions skip(long)"], ["long", "com.mongodb.client.model.DBCollectionCountOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.DBCollectionCountOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.ReadPreference", "com.mongodb.client.model.DBCollectionCountOptions.getReadPreference()", "public com.mongodb.ReadPreference getReadPreference()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.readPreference(com.mongodb.ReadPreference)", "public com.mongodb.client.model.DBCollectionCountOptions readPreference(com.mongodb.ReadPreference)"], ["com.mongodb.ReadConcern", "com.mongodb.client.model.DBCollectionCountOptions.getReadConcern()", "public com.mongodb.ReadConcern getReadConcern()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.readConcern(com.mongodb.ReadConcern)", "public com.mongodb.client.model.DBCollectionCountOptions readConcern(com.mongodb.ReadConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionCountOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCollectionCountOptions", "com.mongodb.client.model.DBCollectionCountOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCollectionCountOptions collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions()", "public com.mongodb.client.model.InsertManyOptions()"], ["boolean", "com.mongodb.client.model.InsertManyOptions.isOrdered()", "public boolean isOrdered()"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions.ordered(boolean)", "public com.mongodb.client.model.InsertManyOptions ordered(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.InsertManyOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.InsertManyOptions", "com.mongodb.client.model.InsertManyOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.InsertManyOptions bypassDocumentValidation(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.client.model.InsertManyOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.CreateViewOptions", "com.mongodb.client.model.CreateViewOptions()", "public com.mongodb.client.model.CreateViewOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.CreateViewOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.CreateViewOptions", "com.mongodb.client.model.CreateViewOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.CreateViewOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.CreateViewOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T)", "public com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T)"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.model.ReplaceOneModel", "com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.ReplaceOptions)", "public com.mongodb.client.model.ReplaceOneModel(org.bson.conversions.Bson, T, com.mongodb.client.model.ReplaceOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.ReplaceOneModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["T", "com.mongodb.client.model.ReplaceOneModel.getReplacement()", "public T getReplacement()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.ReplaceOneModel.getOptions()", "public com.mongodb.client.model.UpdateOptions getOptions()"], ["com.mongodb.client.model.ReplaceOptions", "com.mongodb.client.model.ReplaceOneModel.getReplaceOptions()", "public com.mongodb.client.model.ReplaceOptions getReplaceOptions()"], ["java.lang.String", "com.mongodb.client.model.ReplaceOneModel.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.IndexModel", "com.mongodb.client.model.IndexModel(org.bson.conversions.Bson)", "public com.mongodb.client.model.IndexModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.IndexModel", "com.mongodb.client.model.IndexModel(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)", "public com.mongodb.client.model.IndexModel(org.bson.conversions.Bson, com.mongodb.client.model.IndexOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.IndexModel.getKeys()", "public org.bson.conversions.Bson getKeys()"], ["com.mongodb.client.model.IndexOptions", "com.mongodb.client.model.IndexModel.getOptions()", "public com.mongodb.client.model.IndexOptions getOptions()"], ["java.lang.String", "com.mongodb.client.model.IndexModel.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$SimpleBsonKeyValue.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Updates$SimpleBsonKeyValue.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Updates$SimpleBsonKeyValue.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Updates$SimpleBsonKeyValue.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions()", "public com.mongodb.client.model.ValidationOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.ValidationOptions.getValidator()", "public org.bson.conversions.Bson getValidator()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions.validator(org.bson.conversions.Bson)", "public com.mongodb.client.model.ValidationOptions validator(org.bson.conversions.Bson)"], ["com.mongodb.client.model.ValidationLevel", "com.mongodb.client.model.ValidationOptions.getValidationLevel()", "public com.mongodb.client.model.ValidationLevel getValidationLevel()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions.validationLevel(com.mongodb.client.model.ValidationLevel)", "public com.mongodb.client.model.ValidationOptions validationLevel(com.mongodb.client.model.ValidationLevel)"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.client.model.ValidationOptions.getValidationAction()", "public com.mongodb.client.model.ValidationAction getValidationAction()"], ["com.mongodb.client.model.ValidationOptions", "com.mongodb.client.model.ValidationOptions.validationAction(com.mongodb.client.model.ValidationAction)", "public com.mongodb.client.model.ValidationOptions validationAction(com.mongodb.client.model.ValidationAction)"], ["java.lang.String", "com.mongodb.client.model.ValidationOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.BucketGranularity[]", "com.mongodb.client.model.BucketGranularity.values()", "public static com.mongodb.client.model.BucketGranularity[] values()"], ["com.mongodb.client.model.BucketGranularity", "com.mongodb.client.model.BucketGranularity.valueOf(java.lang.String)", "public static com.mongodb.client.model.BucketGranularity valueOf(java.lang.String)"], ["com.mongodb.client.model.BucketGranularity", "com.mongodb.client.model.BucketGranularity.fromString(java.lang.String)", "public static com.mongodb.client.model.BucketGranularity fromString(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.BucketGranularity.getValue()", "public java.lang.String getValue()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$SimpleUpdate.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Updates$SimpleUpdate.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Updates$SimpleUpdate.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Updates$SimpleUpdate.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$TextFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$TextFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$TextFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$TextFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.InsertOneModel", "com.mongodb.client.model.InsertOneModel(T)", "public com.mongodb.client.model.InsertOneModel(T)"], ["T", "com.mongodb.client.model.InsertOneModel.getDocument()", "public T getDocument()"], ["java.lang.String", "com.mongodb.client.model.InsertOneModel.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$MergeStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$MergeStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$MergeStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$MergeStage.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$LookupStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$LookupStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$LookupStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$LookupStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions()", "public com.mongodb.client.model.BulkWriteOptions()"], ["boolean", "com.mongodb.client.model.BulkWriteOptions.isOrdered()", "public boolean isOrdered()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions.ordered(boolean)", "public com.mongodb.client.model.BulkWriteOptions ordered(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.BulkWriteOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.BulkWriteOptions", "com.mongodb.client.model.BulkWriteOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.BulkWriteOptions bypassDocumentValidation(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.client.model.BulkWriteOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$SimpleFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$SimpleFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$SimpleFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$SimpleFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions()", "public com.mongodb.client.model.BucketOptions()"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions.defaultBucket(java.lang.Object)", "public com.mongodb.client.model.BucketOptions defaultBucket(java.lang.Object)"], ["java.lang.Object", "com.mongodb.client.model.BucketOptions.getDefaultBucket()", "public java.lang.Object getDefaultBucket()"], ["java.util.List<com.mongodb.client.model.BsonField>", "com.mongodb.client.model.BucketOptions.getOutput()", "public java.util.List<com.mongodb.client.model.BsonField> getOutput()"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions.output(com.mongodb.client.model.BsonField...)", "public com.mongodb.client.model.BucketOptions output(com.mongodb.client.model.BsonField...)"], ["com.mongodb.client.model.BucketOptions", "com.mongodb.client.model.BucketOptions.output(java.util.List<com.mongodb.client.model.BsonField>)", "public com.mongodb.client.model.BucketOptions output(java.util.List<com.mongodb.client.model.BsonField>)"], ["boolean", "com.mongodb.client.model.BucketOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.BucketOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.BucketOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Updates$1.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.Variable", "com.mongodb.client.model.Variable(java.lang.String, TExpression)", "public com.mongodb.client.model.Variable(java.lang.String, TExpression)"], ["java.lang.String", "com.mongodb.client.model.Variable.getName()", "public java.lang.String getName()"], ["TExpression", "com.mongodb.client.model.Variable.getValue()", "public TExpression getValue()"], ["boolean", "com.mongodb.client.model.Variable.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Variable.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Variable.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DropIndexOptions", "com.mongodb.client.model.DropIndexOptions()", "public com.mongodb.client.model.DropIndexOptions()"], ["long", "com.mongodb.client.model.DropIndexOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DropIndexOptions", "com.mongodb.client.model.DropIndexOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.DropIndexOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.client.model.DropIndexOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$OperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$OperatorFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$OperatorFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$OperatorFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DeleteOneModel", "com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson)", "public com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.DeleteOneModel", "com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.client.model.DeleteOneModel(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.DeleteOneModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteOneModel.getOptions()", "public com.mongodb.client.model.DeleteOptions getOptions()"], ["java.lang.String", "com.mongodb.client.model.DeleteOneModel.toString()", "public java.lang.String toString()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.addFields(com.mongodb.client.model.Field<?>...)", "public static org.bson.conversions.Bson addFields(com.mongodb.client.model.Field<?>...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.addFields(java.util.List<com.mongodb.client.model.Field<?>>)", "public static org.bson.conversions.Bson addFields(java.util.List<com.mongodb.client.model.Field<?>>)"], ["<TExpression, Boundary> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucket(TExpression, java.util.List<Boundary>)", "public static <TExpression, Boundary> org.bson.conversions.Bson bucket(TExpression, java.util.List<Boundary>)"], ["<TExpression, TBoundary> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucket(TExpression, java.util.List<TBoundary>, com.mongodb.client.model.BucketOptions)", "public static <TExpression, TBoundary> org.bson.conversions.Bson bucket(TExpression, java.util.List<TBoundary>, com.mongodb.client.model.BucketOptions)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucketAuto(TExpression, int)", "public static <TExpression> org.bson.conversions.Bson bucketAuto(TExpression, int)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.bucketAuto(TExpression, int, com.mongodb.client.model.BucketAutoOptions)", "public static <TExpression> org.bson.conversions.Bson bucketAuto(TExpression, int, com.mongodb.client.model.BucketAutoOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.count()", "public static org.bson.conversions.Bson count()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.count(java.lang.String)", "public static org.bson.conversions.Bson count(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.match(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson match(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.project(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson project(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.sort(org.bson.conversions.Bson)", "public static org.bson.conversions.Bson sort(org.bson.conversions.Bson)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.sortByCount(TExpression)", "public static <TExpression> org.bson.conversions.Bson sortByCount(TExpression)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.skip(int)", "public static org.bson.conversions.Bson skip(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.limit(int)", "public static org.bson.conversions.Bson limit(int)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.lookup(java.lang.String, java.lang.String, java.lang.String, java.lang.String)", "public static org.bson.conversions.Bson lookup(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.lookup(java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, java.lang.String)", "public static org.bson.conversions.Bson lookup(java.lang.String, java.util.List<? extends org.bson.conversions.Bson>, java.lang.String)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.lookup(java.lang.String, java.util.List<com.mongodb.client.model.Variable<TExpression>>, java.util.List<? extends org.bson.conversions.Bson>, java.lang.String)", "public static <TExpression> org.bson.conversions.Bson lookup(java.lang.String, java.util.List<com.mongodb.client.model.Variable<TExpression>>, java.util.List<? extends org.bson.conversions.Bson>, java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.facet(java.util.List<com.mongodb.client.model.Facet>)", "public static org.bson.conversions.Bson facet(java.util.List<com.mongodb.client.model.Facet>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.facet(com.mongodb.client.model.Facet...)", "public static org.bson.conversions.Bson facet(com.mongodb.client.model.Facet...)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.graphLookup(java.lang.String, TExpression, java.lang.String, java.lang.String, java.lang.String)", "public static <TExpression> org.bson.conversions.Bson graphLookup(java.lang.String, TExpression, java.lang.String, java.lang.String, java.lang.String)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.graphLookup(java.lang.String, TExpression, java.lang.String, java.lang.String, java.lang.String, com.mongodb.client.model.GraphLookupOptions)", "public static <TExpression> org.bson.conversions.Bson graphLookup(java.lang.String, TExpression, java.lang.String, java.lang.String, java.lang.String, com.mongodb.client.model.GraphLookupOptions)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.group(TExpression, com.mongodb.client.model.BsonField...)", "public static <TExpression> org.bson.conversions.Bson group(TExpression, com.mongodb.client.model.BsonField...)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.group(TExpression, java.util.List<com.mongodb.client.model.BsonField>)", "public static <TExpression> org.bson.conversions.Bson group(TExpression, java.util.List<com.mongodb.client.model.BsonField>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.unwind(java.lang.String)", "public static org.bson.conversions.Bson unwind(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.unwind(java.lang.String, com.mongodb.client.model.UnwindOptions)", "public static org.bson.conversions.Bson unwind(java.lang.String, com.mongodb.client.model.UnwindOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.out(java.lang.String)", "public static org.bson.conversions.Bson out(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.merge(java.lang.String)", "public static org.bson.conversions.Bson merge(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.merge(com.mongodb.MongoNamespace)", "public static org.bson.conversions.Bson merge(com.mongodb.MongoNamespace)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.merge(java.lang.String, com.mongodb.client.model.MergeOptions)", "public static org.bson.conversions.Bson merge(java.lang.String, com.mongodb.client.model.MergeOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.merge(com.mongodb.MongoNamespace, com.mongodb.client.model.MergeOptions)", "public static org.bson.conversions.Bson merge(com.mongodb.MongoNamespace, com.mongodb.client.model.MergeOptions)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.replaceRoot(TExpression)", "public static <TExpression> org.bson.conversions.Bson replaceRoot(TExpression)"], ["<TExpression> org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.replaceWith(TExpression)", "public static <TExpression> org.bson.conversions.Bson replaceWith(TExpression)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Aggregates.sample(int)", "public static org.bson.conversions.Bson sample(int)"], ["com.mongodb.client.model.CreateIndexOptions", "com.mongodb.client.model.CreateIndexOptions()", "public com.mongodb.client.model.CreateIndexOptions()"], ["long", "com.mongodb.client.model.CreateIndexOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.CreateIndexOptions", "com.mongodb.client.model.CreateIndexOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.CreateIndexOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.mongodb.client.model.CreateIndexOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions()", "public com.mongodb.client.model.PushOptions()"], ["java.lang.Integer", "com.mongodb.client.model.PushOptions.getPosition()", "public java.lang.Integer getPosition()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.position(java.lang.Integer)", "public com.mongodb.client.model.PushOptions position(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.PushOptions.getSlice()", "public java.lang.Integer getSlice()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.slice(java.lang.Integer)", "public com.mongodb.client.model.PushOptions slice(java.lang.Integer)"], ["java.lang.Integer", "com.mongodb.client.model.PushOptions.getSort()", "public java.lang.Integer getSort()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.sort(java.lang.Integer)", "public com.mongodb.client.model.PushOptions sort(java.lang.Integer)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.PushOptions.getSortDocument()", "public org.bson.conversions.Bson getSortDocument()"], ["com.mongodb.client.model.PushOptions", "com.mongodb.client.model.PushOptions.sortDocument(org.bson.conversions.Bson)", "public com.mongodb.client.model.PushOptions sortDocument(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.PushOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.PushOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.PushOptions.toString()", "public java.lang.String toString()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.ascending(java.lang.String...)", "public static org.bson.conversions.Bson ascending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.ascending(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson ascending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.descending(java.lang.String...)", "public static org.bson.conversions.Bson descending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.descending(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson descending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.metaTextScore(java.lang.String)", "public static org.bson.conversions.Bson metaTextScore(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.orderBy(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson orderBy(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Sorts.orderBy(java.util.List<? extends org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson orderBy(java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions()", "public com.mongodb.client.model.DBCollectionUpdateOptions()"], ["boolean", "com.mongodb.client.model.DBCollectionUpdateOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.upsert(boolean)", "public com.mongodb.client.model.DBCollectionUpdateOptions upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.DBCollectionUpdateOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.DBCollectionUpdateOptions bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.multi(boolean)", "public com.mongodb.client.model.DBCollectionUpdateOptions multi(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionUpdateOptions.isMulti()", "public boolean isMulti()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionUpdateOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCollectionUpdateOptions collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.arrayFilters(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.client.model.DBCollectionUpdateOptions arrayFilters(java.util.List<? extends com.mongodb.DBObject>)"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.client.model.DBCollectionUpdateOptions.getArrayFilters()", "public java.util.List<? extends com.mongodb.DBObject> getArrayFilters()"], ["com.mongodb.WriteConcern", "com.mongodb.client.model.DBCollectionUpdateOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.model.DBCollectionUpdateOptions writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.DBEncoder", "com.mongodb.client.model.DBCollectionUpdateOptions.getEncoder()", "public com.mongodb.DBEncoder getEncoder()"], ["com.mongodb.client.model.DBCollectionUpdateOptions", "com.mongodb.client.model.DBCollectionUpdateOptions.encoder(com.mongodb.DBEncoder)", "public com.mongodb.client.model.DBCollectionUpdateOptions encoder(com.mongodb.DBEncoder)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$SortByCountStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$SortByCountStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$SortByCountStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$SortByCountStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DBCreateViewOptions", "com.mongodb.client.model.DBCreateViewOptions()", "public com.mongodb.client.model.DBCreateViewOptions()"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCreateViewOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCreateViewOptions", "com.mongodb.client.model.DBCreateViewOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCreateViewOptions collation(com.mongodb.client.model.Collation)"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Projections$ElemMatchFilterProjection.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Projections$ElemMatchFilterProjection.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Projections$ElemMatchFilterProjection.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Projections$ElemMatchFilterProjection.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.vault.EncryptOptions", "com.mongodb.client.model.vault.EncryptOptions(java.lang.String)", "public com.mongodb.client.model.vault.EncryptOptions(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.vault.EncryptOptions.getAlgorithm()", "public java.lang.String getAlgorithm()"], ["org.bson.BsonBinary", "com.mongodb.client.model.vault.EncryptOptions.getKeyId()", "public org.bson.BsonBinary getKeyId()"], ["java.lang.String", "com.mongodb.client.model.vault.EncryptOptions.getKeyAltName()", "public java.lang.String getKeyAltName()"], ["com.mongodb.client.model.vault.EncryptOptions", "com.mongodb.client.model.vault.EncryptOptions.keyId(org.bson.BsonBinary)", "public com.mongodb.client.model.vault.EncryptOptions keyId(org.bson.BsonBinary)"], ["com.mongodb.client.model.vault.EncryptOptions", "com.mongodb.client.model.vault.EncryptOptions.keyAltName(java.lang.String)", "public com.mongodb.client.model.vault.EncryptOptions keyAltName(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.vault.EncryptOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.vault.DataKeyOptions", "com.mongodb.client.model.vault.DataKeyOptions()", "public com.mongodb.client.model.vault.DataKeyOptions()"], ["com.mongodb.client.model.vault.DataKeyOptions", "com.mongodb.client.model.vault.DataKeyOptions.keyAltNames(java.util.List<java.lang.String>)", "public com.mongodb.client.model.vault.DataKeyOptions keyAltNames(java.util.List<java.lang.String>)"], ["com.mongodb.client.model.vault.DataKeyOptions", "com.mongodb.client.model.vault.DataKeyOptions.masterKey(org.bson.BsonDocument)", "public com.mongodb.client.model.vault.DataKeyOptions masterKey(org.bson.BsonDocument)"], ["java.util.List<java.lang.String>", "com.mongodb.client.model.vault.DataKeyOptions.getKeyAltNames()", "public java.util.List<java.lang.String> getKeyAltNames()"], ["org.bson.BsonDocument", "com.mongodb.client.model.vault.DataKeyOptions.getMasterKey()", "public org.bson.BsonDocument getMasterKey()"], ["java.lang.String", "com.mongodb.client.model.vault.DataKeyOptions.toString()", "public java.lang.String toString()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.ascending(java.lang.String...)", "public static org.bson.conversions.Bson ascending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.ascending(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson ascending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.descending(java.lang.String...)", "public static org.bson.conversions.Bson descending(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.descending(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson descending(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geo2dsphere(java.lang.String...)", "public static org.bson.conversions.Bson geo2dsphere(java.lang.String...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geo2dsphere(java.util.List<java.lang.String>)", "public static org.bson.conversions.Bson geo2dsphere(java.util.List<java.lang.String>)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geo2d(java.lang.String)", "public static org.bson.conversions.Bson geo2d(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.geoHaystack(java.lang.String, org.bson.conversions.Bson)", "public static org.bson.conversions.Bson geoHaystack(java.lang.String, org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.text(java.lang.String)", "public static org.bson.conversions.Bson text(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.text()", "public static org.bson.conversions.Bson text()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.hashed(java.lang.String)", "public static org.bson.conversions.Bson hashed(java.lang.String)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.compoundIndex(org.bson.conversions.Bson...)", "public static org.bson.conversions.Bson compoundIndex(org.bson.conversions.Bson...)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.Indexes.compoundIndex(java.util.List<? extends org.bson.conversions.Bson>)", "public static org.bson.conversions.Bson compoundIndex(java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.locale(java.lang.String)", "public com.mongodb.client.model.Collation$Builder locale(java.lang.String)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.caseLevel(java.lang.Boolean)", "public com.mongodb.client.model.Collation$Builder caseLevel(java.lang.Boolean)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationCaseFirst(com.mongodb.client.model.CollationCaseFirst)", "public com.mongodb.client.model.Collation$Builder collationCaseFirst(com.mongodb.client.model.CollationCaseFirst)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationStrength(com.mongodb.client.model.CollationStrength)", "public com.mongodb.client.model.Collation$Builder collationStrength(com.mongodb.client.model.CollationStrength)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.numericOrdering(java.lang.Boolean)", "public com.mongodb.client.model.Collation$Builder numericOrdering(java.lang.Boolean)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationAlternate(com.mongodb.client.model.CollationAlternate)", "public com.mongodb.client.model.Collation$Builder collationAlternate(com.mongodb.client.model.CollationAlternate)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.collationMaxVariable(com.mongodb.client.model.CollationMaxVariable)", "public com.mongodb.client.model.Collation$Builder collationMaxVariable(com.mongodb.client.model.CollationMaxVariable)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.normalization(java.lang.Boolean)", "public com.mongodb.client.model.Collation$Builder normalization(java.lang.Boolean)"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation$Builder.backwards(java.lang.Boolean)", "public com.mongodb.client.model.Collation$Builder backwards(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.Collation$Builder.build()", "public com.mongodb.client.model.Collation build()"], ["com.mongodb.client.model.CollationAlternate[]", "com.mongodb.client.model.CollationAlternate.values()", "public static com.mongodb.client.model.CollationAlternate[] values()"], ["com.mongodb.client.model.CollationAlternate", "com.mongodb.client.model.CollationAlternate.valueOf(java.lang.String)", "public static com.mongodb.client.model.CollationAlternate valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.CollationAlternate.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.CollationAlternate", "com.mongodb.client.model.CollationAlternate.fromString(java.lang.String)", "public static com.mongodb.client.model.CollationAlternate fromString(java.lang.String)"], ["com.mongodb.client.model.geojson.MultiPoint", "com.mongodb.client.model.geojson.MultiPoint(java.util.List<com.mongodb.client.model.geojson.Position>)", "public com.mongodb.client.model.geojson.MultiPoint(java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.MultiPoint", "com.mongodb.client.model.geojson.MultiPoint(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.Position>)", "public com.mongodb.client.model.geojson.MultiPoint(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.MultiPoint.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["java.util.List<com.mongodb.client.model.geojson.Position>", "com.mongodb.client.model.geojson.MultiPoint.getCoordinates()", "public java.util.List<com.mongodb.client.model.geojson.Position> getCoordinates()"], ["boolean", "com.mongodb.client.model.geojson.MultiPoint.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.MultiPoint.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.MultiPoint.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.GeometryCollection", "com.mongodb.client.model.geojson.GeometryCollection(java.util.List<? extends com.mongodb.client.model.geojson.Geometry>)", "public com.mongodb.client.model.geojson.GeometryCollection(java.util.List<? extends com.mongodb.client.model.geojson.Geometry>)"], ["com.mongodb.client.model.geojson.GeometryCollection", "com.mongodb.client.model.geojson.GeometryCollection(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<? extends com.mongodb.client.model.geojson.Geometry>)", "public com.mongodb.client.model.geojson.GeometryCollection(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<? extends com.mongodb.client.model.geojson.Geometry>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.GeometryCollection.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["java.util.List<? extends com.mongodb.client.model.geojson.Geometry>", "com.mongodb.client.model.geojson.GeometryCollection.getGeometries()", "public java.util.List<? extends com.mongodb.client.model.geojson.Geometry> getGeometries()"], ["boolean", "com.mongodb.client.model.geojson.GeometryCollection.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.GeometryCollection.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.GeometryCollection.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.Polygon", "com.mongodb.client.model.geojson.Polygon(java.util.List<com.mongodb.client.model.geojson.Position>, java.util.List<com.mongodb.client.model.geojson.Position>...)", "public com.mongodb.client.model.geojson.Polygon(java.util.List<com.mongodb.client.model.geojson.Position>, java.util.List<com.mongodb.client.model.geojson.Position>...)"], ["com.mongodb.client.model.geojson.Polygon", "com.mongodb.client.model.geojson.Polygon(com.mongodb.client.model.geojson.PolygonCoordinates)", "public com.mongodb.client.model.geojson.Polygon(com.mongodb.client.model.geojson.PolygonCoordinates)"], ["com.mongodb.client.model.geojson.Polygon", "com.mongodb.client.model.geojson.Polygon(com.mongodb.client.model.geojson.CoordinateReferenceSystem, com.mongodb.client.model.geojson.PolygonCoordinates)", "public com.mongodb.client.model.geojson.Polygon(com.mongodb.client.model.geojson.CoordinateReferenceSystem, com.mongodb.client.model.geojson.PolygonCoordinates)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.Polygon.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["com.mongodb.client.model.geojson.PolygonCoordinates", "com.mongodb.client.model.geojson.Polygon.getCoordinates()", "public com.mongodb.client.model.geojson.PolygonCoordinates getCoordinates()"], ["java.util.List<com.mongodb.client.model.geojson.Position>", "com.mongodb.client.model.geojson.Polygon.getExterior()", "public java.util.List<com.mongodb.client.model.geojson.Position> getExterior()"], ["java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>", "com.mongodb.client.model.geojson.Polygon.getHoles()", "public java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>> getHoles()"], ["boolean", "com.mongodb.client.model.geojson.Polygon.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Polygon.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.Polygon.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystemType[]", "com.mongodb.client.model.geojson.CoordinateReferenceSystemType.values()", "public static com.mongodb.client.model.geojson.CoordinateReferenceSystemType[] values()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystemType", "com.mongodb.client.model.geojson.CoordinateReferenceSystemType.valueOf(java.lang.String)", "public static com.mongodb.client.model.geojson.CoordinateReferenceSystemType valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.geojson.CoordinateReferenceSystemType.getTypeName()", "public java.lang.String getTypeName()"], ["com.mongodb.client.model.geojson.MultiLineString", "com.mongodb.client.model.geojson.MultiLineString(java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>)", "public com.mongodb.client.model.geojson.MultiLineString(java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>)"], ["com.mongodb.client.model.geojson.MultiLineString", "com.mongodb.client.model.geojson.MultiLineString(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>)", "public com.mongodb.client.model.geojson.MultiLineString(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.MultiLineString.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>", "com.mongodb.client.model.geojson.MultiLineString.getCoordinates()", "public java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>> getCoordinates()"], ["boolean", "com.mongodb.client.model.geojson.MultiLineString.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.MultiLineString.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.MultiLineString.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.Point", "com.mongodb.client.model.geojson.Point(com.mongodb.client.model.geojson.Position)", "public com.mongodb.client.model.geojson.Point(com.mongodb.client.model.geojson.Position)"], ["com.mongodb.client.model.geojson.Point", "com.mongodb.client.model.geojson.Point(com.mongodb.client.model.geojson.CoordinateReferenceSystem, com.mongodb.client.model.geojson.Position)", "public com.mongodb.client.model.geojson.Point(com.mongodb.client.model.geojson.CoordinateReferenceSystem, com.mongodb.client.model.geojson.Position)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.Point.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Point.getCoordinates()", "public com.mongodb.client.model.geojson.Position getCoordinates()"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Point.getPosition()", "public com.mongodb.client.model.geojson.Position getPosition()"], ["boolean", "com.mongodb.client.model.geojson.Point.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Point.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.Point.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider", "com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider()", "public com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "com.mongodb.client.model.geojson.codecs.GeoJsonCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec()", "public com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec()"], ["void", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem>", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem> getEncoderClass()"], ["com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.geojson.codecs.NamedCoordinateReferenceSystemCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.geojson.codecs.MultiPointCodec", "com.mongodb.client.model.geojson.codecs.MultiPointCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.MultiPointCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.MultiPointCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.MultiPointCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.MultiPointCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.PointCodec", "com.mongodb.client.model.geojson.codecs.PointCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.PointCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.PointCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.PointCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.PointCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<T>", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["void", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.geojson.codecs.AbstractGeometryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec", "com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.GeometryCollectionCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.LineStringCodec", "com.mongodb.client.model.geojson.codecs.LineStringCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.LineStringCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.LineStringCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.LineStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.LineStringCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.PolygonCodec", "com.mongodb.client.model.geojson.codecs.PolygonCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.PolygonCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.PolygonCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.PolygonCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.PolygonCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.GeometryCodec", "com.mongodb.client.model.geojson.codecs.GeometryCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.GeometryCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.GeometryCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.GeometryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.GeometryCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.MultiPolygonCodec", "com.mongodb.client.model.geojson.codecs.MultiPolygonCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.MultiPolygonCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.MultiPolygonCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.MultiPolygonCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.MultiPolygonCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.codecs.MultiLineStringCodec", "com.mongodb.client.model.geojson.codecs.MultiLineStringCodec(org.bson.codecs.configuration.CodecRegistry)", "public com.mongodb.client.model.geojson.codecs.MultiLineStringCodec(org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class", "com.mongodb.client.model.geojson.codecs.MultiLineStringCodec.getEncoderClass()", "public java.lang.Class getEncoderClass()"], ["com.mongodb.client.model.geojson.Geometry", "com.mongodb.client.model.geojson.codecs.MultiLineStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.geojson.Geometry decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.geojson.codecs.MultiLineStringCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.geojson.Geometry, org.bson.codecs.EncoderContext)"], ["com.mongodb.client.model.geojson.LineString", "com.mongodb.client.model.geojson.LineString(java.util.List<com.mongodb.client.model.geojson.Position>)", "public com.mongodb.client.model.geojson.LineString(java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.LineString", "com.mongodb.client.model.geojson.LineString(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.Position>)", "public com.mongodb.client.model.geojson.LineString(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.Position>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.LineString.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["java.util.List<com.mongodb.client.model.geojson.Position>", "com.mongodb.client.model.geojson.LineString.getCoordinates()", "public java.util.List<com.mongodb.client.model.geojson.Position> getCoordinates()"], ["boolean", "com.mongodb.client.model.geojson.LineString.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.LineString.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.LineString.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.MultiPolygon", "com.mongodb.client.model.geojson.MultiPolygon(java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>)", "public com.mongodb.client.model.geojson.MultiPolygon(java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>)"], ["com.mongodb.client.model.geojson.MultiPolygon", "com.mongodb.client.model.geojson.MultiPolygon(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>)", "public com.mongodb.client.model.geojson.MultiPolygon(com.mongodb.client.model.geojson.CoordinateReferenceSystem, java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>)"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.MultiPolygon.getType()", "public com.mongodb.client.model.geojson.GeoJsonObjectType getType()"], ["java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates>", "com.mongodb.client.model.geojson.MultiPolygon.getCoordinates()", "public java.util.List<com.mongodb.client.model.geojson.PolygonCoordinates> getCoordinates()"], ["boolean", "com.mongodb.client.model.geojson.MultiPolygon.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.MultiPolygon.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.MultiPolygon.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystem", "com.mongodb.client.model.geojson.CoordinateReferenceSystem()", "public com.mongodb.client.model.geojson.CoordinateReferenceSystem()"], ["com.mongodb.client.model.geojson.PolygonCoordinates", "com.mongodb.client.model.geojson.PolygonCoordinates(java.util.List<com.mongodb.client.model.geojson.Position>, java.util.List<com.mongodb.client.model.geojson.Position>...)", "public com.mongodb.client.model.geojson.PolygonCoordinates(java.util.List<com.mongodb.client.model.geojson.Position>, java.util.List<com.mongodb.client.model.geojson.Position>...)"], ["java.util.List<com.mongodb.client.model.geojson.Position>", "com.mongodb.client.model.geojson.PolygonCoordinates.getExterior()", "public java.util.List<com.mongodb.client.model.geojson.Position> getExterior()"], ["java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>>", "com.mongodb.client.model.geojson.PolygonCoordinates.getHoles()", "public java.util.List<java.util.List<com.mongodb.client.model.geojson.Position>> getHoles()"], ["boolean", "com.mongodb.client.model.geojson.PolygonCoordinates.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.PolygonCoordinates.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.PolygonCoordinates.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.client.model.geojson.Geometry.toJson()", "public java.lang.String toJson()"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystem", "com.mongodb.client.model.geojson.Geometry.getCoordinateReferenceSystem()", "public com.mongodb.client.model.geojson.CoordinateReferenceSystem getCoordinateReferenceSystem()"], ["boolean", "com.mongodb.client.model.geojson.Geometry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Geometry.hashCode()", "public int hashCode()"], ["com.mongodb.client.model.geojson.GeoJsonObjectType[]", "com.mongodb.client.model.geojson.GeoJsonObjectType.values()", "public static com.mongodb.client.model.geojson.GeoJsonObjectType[] values()"], ["com.mongodb.client.model.geojson.GeoJsonObjectType", "com.mongodb.client.model.geojson.GeoJsonObjectType.valueOf(java.lang.String)", "public static com.mongodb.client.model.geojson.GeoJsonObjectType valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.geojson.GeoJsonObjectType.getTypeName()", "public java.lang.String getTypeName()"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Position(java.util.List<java.lang.Double>)", "public com.mongodb.client.model.geojson.Position(java.util.List<java.lang.Double>)"], ["com.mongodb.client.model.geojson.Position", "com.mongodb.client.model.geojson.Position(double, double, double...)", "public com.mongodb.client.model.geojson.Position(double, double, double...)"], ["java.util.List<java.lang.Double>", "com.mongodb.client.model.geojson.Position.getValues()", "public java.util.List<java.lang.Double> getValues()"], ["boolean", "com.mongodb.client.model.geojson.Position.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.Position.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.Position.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem(java.lang.String)", "public com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem(java.lang.String)"], ["com.mongodb.client.model.geojson.CoordinateReferenceSystemType", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.getType()", "public com.mongodb.client.model.geojson.CoordinateReferenceSystemType getType()"], ["java.lang.String", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.getName()", "public java.lang.String getName()"], ["boolean", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.geojson.NamedCoordinateReferenceSystem.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.ParallelCollectionScanOptions", "com.mongodb.client.model.ParallelCollectionScanOptions()", "public com.mongodb.client.model.ParallelCollectionScanOptions()"], ["int", "com.mongodb.client.model.ParallelCollectionScanOptions.getBatchSize()", "public int getBatchSize()"], ["com.mongodb.client.model.ParallelCollectionScanOptions", "com.mongodb.client.model.ParallelCollectionScanOptions.batchSize(int)", "public com.mongodb.client.model.ParallelCollectionScanOptions batchSize(int)"], ["com.mongodb.client.model.InsertOneOptions", "com.mongodb.client.model.InsertOneOptions()", "public com.mongodb.client.model.InsertOneOptions()"], ["java.lang.Boolean", "com.mongodb.client.model.InsertOneOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.InsertOneOptions", "com.mongodb.client.model.InsertOneOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.InsertOneOptions bypassDocumentValidation(java.lang.Boolean)"], ["java.lang.String", "com.mongodb.client.model.InsertOneOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$GraphLookupStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$GraphLookupStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$GraphLookupStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$GraphLookupStage.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.ValidationAction[]", "com.mongodb.client.model.ValidationAction.values()", "public static com.mongodb.client.model.ValidationAction[] values()"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.client.model.ValidationAction.valueOf(java.lang.String)", "public static com.mongodb.client.model.ValidationAction valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.ValidationAction.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.ValidationAction", "com.mongodb.client.model.ValidationAction.fromString(java.lang.String)", "public static com.mongodb.client.model.ValidationAction fromString(java.lang.String)"], ["com.mongodb.client.model.DeleteManyModel", "com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson)", "public com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson)"], ["com.mongodb.client.model.DeleteManyModel", "com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)", "public com.mongodb.client.model.DeleteManyModel(org.bson.conversions.Bson, com.mongodb.client.model.DeleteOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.DeleteManyModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["com.mongodb.client.model.DeleteOptions", "com.mongodb.client.model.DeleteManyModel.getOptions()", "public com.mongodb.client.model.DeleteOptions getOptions()"], ["java.lang.String", "com.mongodb.client.model.DeleteManyModel.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.changestream.UpdateDescription", "com.mongodb.client.model.changestream.UpdateDescription(java.util.List<java.lang.String>, org.bson.BsonDocument)", "public com.mongodb.client.model.changestream.UpdateDescription(java.util.List<java.lang.String>, org.bson.BsonDocument)"], ["java.util.List<java.lang.String>", "com.mongodb.client.model.changestream.UpdateDescription.getRemovedFields()", "public java.util.List<java.lang.String> getRemovedFields()"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.UpdateDescription.getUpdatedFields()", "public org.bson.BsonDocument getUpdatedFields()"], ["boolean", "com.mongodb.client.model.changestream.UpdateDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.changestream.UpdateDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.changestream.UpdateDescription.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.changestream.ChangeStreamDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, com.mongodb.MongoNamespace, TDocument, org.bson.BsonDocument, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)", "public com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, com.mongodb.MongoNamespace, TDocument, org.bson.BsonDocument, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)"], ["com.mongodb.client.model.changestream.ChangeStreamDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, com.mongodb.MongoNamespace, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)", "public com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, com.mongodb.MongoNamespace, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)"], ["com.mongodb.client.model.changestream.ChangeStreamDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, org.bson.BsonDocument, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)", "public com.mongodb.client.model.changestream.ChangeStreamDocument(org.bson.BsonDocument, org.bson.BsonDocument, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.OperationType, com.mongodb.client.model.changestream.UpdateDescription)"], ["com.mongodb.client.model.changestream.ChangeStreamDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument(com.mongodb.client.model.changestream.OperationType, org.bson.BsonDocument, org.bson.BsonDocument, org.bson.BsonDocument, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.UpdateDescription)", "public com.mongodb.client.model.changestream.ChangeStreamDocument(com.mongodb.client.model.changestream.OperationType, org.bson.BsonDocument, org.bson.BsonDocument, org.bson.BsonDocument, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.UpdateDescription)"], ["com.mongodb.client.model.changestream.ChangeStreamDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument(com.mongodb.client.model.changestream.OperationType, org.bson.BsonDocument, org.bson.BsonDocument, org.bson.BsonDocument, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.UpdateDescription, org.bson.BsonInt64, org.bson.BsonDocument)", "public com.mongodb.client.model.changestream.ChangeStreamDocument(com.mongodb.client.model.changestream.OperationType, org.bson.BsonDocument, org.bson.BsonDocument, org.bson.BsonDocument, TDocument, org.bson.BsonDocument, org.bson.BsonTimestamp, com.mongodb.client.model.changestream.UpdateDescription, org.bson.BsonInt64, org.bson.BsonDocument)"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getResumeToken()", "public org.bson.BsonDocument getResumeToken()"], ["com.mongodb.MongoNamespace", "com.mongodb.client.model.changestream.ChangeStreamDocument.getNamespace()", "public com.mongodb.MongoNamespace getNamespace()"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getNamespaceDocument()", "public org.bson.BsonDocument getNamespaceDocument()"], ["com.mongodb.MongoNamespace", "com.mongodb.client.model.changestream.ChangeStreamDocument.getDestinationNamespace()", "public com.mongodb.MongoNamespace getDestinationNamespace()"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getDestinationNamespaceDocument()", "public org.bson.BsonDocument getDestinationNamespaceDocument()"], ["java.lang.String", "com.mongodb.client.model.changestream.ChangeStreamDocument.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["TDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getFullDocument()", "public TDocument getFullDocument()"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getDocumentKey()", "public org.bson.BsonDocument getDocumentKey()"], ["org.bson.BsonTimestamp", "com.mongodb.client.model.changestream.ChangeStreamDocument.getClusterTime()", "public org.bson.BsonTimestamp getClusterTime()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.ChangeStreamDocument.getOperationType()", "public com.mongodb.client.model.changestream.OperationType getOperationType()"], ["com.mongodb.client.model.changestream.UpdateDescription", "com.mongodb.client.model.changestream.ChangeStreamDocument.getUpdateDescription()", "public com.mongodb.client.model.changestream.UpdateDescription getUpdateDescription()"], ["org.bson.BsonInt64", "com.mongodb.client.model.changestream.ChangeStreamDocument.getTxnNumber()", "public org.bson.BsonInt64 getTxnNumber()"], ["org.bson.BsonDocument", "com.mongodb.client.model.changestream.ChangeStreamDocument.getLsid()", "public org.bson.BsonDocument getLsid()"], ["<TFullDocument> org.bson.codecs.Codec<com.mongodb.client.model.changestream.ChangeStreamDocument<TFullDocument>>", "com.mongodb.client.model.changestream.ChangeStreamDocument.createCodec(java.lang.Class<TFullDocument>, org.bson.codecs.configuration.CodecRegistry)", "public static <TFullDocument> org.bson.codecs.Codec<com.mongodb.client.model.changestream.ChangeStreamDocument<TFullDocument>> createCodec(java.lang.Class<TFullDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.changestream.ChangeStreamDocument.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.changestream.ChangeStreamDocument.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.changestream.ChangeStreamDocument.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.OperationTypeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.changestream.OperationType decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.changestream.OperationTypeCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.changestream.OperationType, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.changestream.OperationType, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.client.model.changestream.OperationType>", "com.mongodb.client.model.changestream.OperationTypeCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.client.model.changestream.OperationType> getEncoderClass()"], ["void", "com.mongodb.client.model.changestream.OperationTypeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.changestream.OperationTypeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.changestream.FullDocument[]", "com.mongodb.client.model.changestream.FullDocument.values()", "public static com.mongodb.client.model.changestream.FullDocument[] values()"], ["com.mongodb.client.model.changestream.FullDocument", "com.mongodb.client.model.changestream.FullDocument.valueOf(java.lang.String)", "public static com.mongodb.client.model.changestream.FullDocument valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.changestream.FullDocument.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.changestream.FullDocument", "com.mongodb.client.model.changestream.FullDocument.fromString(java.lang.String)", "public static com.mongodb.client.model.changestream.FullDocument fromString(java.lang.String)"], ["com.mongodb.client.model.changestream.ChangeStreamLevel[]", "com.mongodb.client.model.changestream.ChangeStreamLevel.values()", "public static com.mongodb.client.model.changestream.ChangeStreamLevel[] values()"], ["com.mongodb.client.model.changestream.ChangeStreamLevel", "com.mongodb.client.model.changestream.ChangeStreamLevel.valueOf(java.lang.String)", "public static com.mongodb.client.model.changestream.ChangeStreamLevel valueOf(java.lang.String)"], ["com.mongodb.client.model.changestream.OperationType[]", "com.mongodb.client.model.changestream.OperationType.values()", "public static com.mongodb.client.model.changestream.OperationType[] values()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.OperationType.valueOf(java.lang.String)", "public static com.mongodb.client.model.changestream.OperationType valueOf(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.changestream.OperationType.getValue()", "public java.lang.String getValue()"], ["com.mongodb.client.model.changestream.OperationType", "com.mongodb.client.model.changestream.OperationType.fromString(java.lang.String)", "public static com.mongodb.client.model.changestream.OperationType fromString(java.lang.String)"], ["java.lang.String", "com.mongodb.client.model.changestream.OperationType.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.client.model.changestream.ChangeStreamDocument<TResult> decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.encode(org.bson.BsonWriter, com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>, org.bson.codecs.EncoderContext)"], ["java.lang.Class<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>>", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.getEncoderClass()", "public java.lang.Class<com.mongodb.client.model.changestream.ChangeStreamDocument<TResult>> getEncoderClass()"], ["void", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "com.mongodb.client.model.changestream.ChangeStreamDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["com.mongodb.client.model.ReplaceOptions", "com.mongodb.client.model.ReplaceOptions()", "public com.mongodb.client.model.ReplaceOptions()"], ["com.mongodb.client.model.ReplaceOptions", "com.mongodb.client.model.ReplaceOptions.createReplaceOptions(com.mongodb.client.model.UpdateOptions)", "public static com.mongodb.client.model.ReplaceOptions createReplaceOptions(com.mongodb.client.model.UpdateOptions)"], ["boolean", "com.mongodb.client.model.ReplaceOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.ReplaceOptions", "com.mongodb.client.model.ReplaceOptions.upsert(boolean)", "public com.mongodb.client.model.ReplaceOptions upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.ReplaceOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.ReplaceOptions", "com.mongodb.client.model.ReplaceOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.ReplaceOptions bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.ReplaceOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.ReplaceOptions", "com.mongodb.client.model.ReplaceOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.ReplaceOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.ReplaceOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation.builder()", "public static com.mongodb.client.model.Collation$Builder builder()"], ["com.mongodb.client.model.Collation$Builder", "com.mongodb.client.model.Collation.builder(com.mongodb.client.model.Collation)", "public static com.mongodb.client.model.Collation$Builder builder(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.Collation.getLocale()", "public java.lang.String getLocale()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getCaseLevel()", "public java.lang.Boolean getCaseLevel()"], ["com.mongodb.client.model.CollationCaseFirst", "com.mongodb.client.model.Collation.getCaseFirst()", "public com.mongodb.client.model.CollationCaseFirst getCaseFirst()"], ["com.mongodb.client.model.CollationStrength", "com.mongodb.client.model.Collation.getStrength()", "public com.mongodb.client.model.CollationStrength getStrength()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getNumericOrdering()", "public java.lang.Boolean getNumericOrdering()"], ["com.mongodb.client.model.CollationAlternate", "com.mongodb.client.model.Collation.getAlternate()", "public com.mongodb.client.model.CollationAlternate getAlternate()"], ["com.mongodb.client.model.CollationMaxVariable", "com.mongodb.client.model.Collation.getMaxVariable()", "public com.mongodb.client.model.CollationMaxVariable getMaxVariable()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getNormalization()", "public java.lang.Boolean getNormalization()"], ["java.lang.Boolean", "com.mongodb.client.model.Collation.getBackwards()", "public java.lang.Boolean getBackwards()"], ["org.bson.BsonDocument", "com.mongodb.client.model.Collation.asDocument()", "public org.bson.BsonDocument asDocument()"], ["boolean", "com.mongodb.client.model.Collation.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Collation.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Collation.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Projections$FieldsProjection.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Projections$FieldsProjection.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Projections$FieldsProjection.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Projections$FieldsProjection.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions()", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions()"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getProjection()", "public com.mongodb.DBObject getProjection()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.projection(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions projection(com.mongodb.DBObject)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getSort()", "public com.mongodb.DBObject getSort()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.sort(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions sort(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.isRemove()", "public boolean isRemove()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.remove(boolean)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions remove(boolean)"], ["com.mongodb.DBObject", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getUpdate()", "public com.mongodb.DBObject getUpdate()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.update(com.mongodb.DBObject)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions update(com.mongodb.DBObject)"], ["boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.upsert(boolean)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions upsert(boolean)"], ["boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.returnNew()", "public boolean returnNew()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.returnNew(boolean)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions returnNew(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions bypassDocumentValidation(java.lang.Boolean)"], ["long", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["com.mongodb.WriteConcern", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.DBCollectionFindAndModifyOptions", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.arrayFilters(java.util.List<? extends com.mongodb.DBObject>)", "public com.mongodb.client.model.DBCollectionFindAndModifyOptions arrayFilters(java.util.List<? extends com.mongodb.DBObject>)"], ["java.util.List<? extends com.mongodb.DBObject>", "com.mongodb.client.model.DBCollectionFindAndModifyOptions.getArrayFilters()", "public java.util.List<? extends com.mongodb.DBObject> getArrayFilters()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$OrNorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$OrNorFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$OrNorFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$OrNorFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions()", "public com.mongodb.client.model.FindOneAndReplaceOptions()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndReplaceOptions.getProjection()", "public org.bson.conversions.Bson getProjection()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.projection(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndReplaceOptions projection(org.bson.conversions.Bson)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.FindOneAndReplaceOptions.getSort()", "public org.bson.conversions.Bson getSort()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.sort(org.bson.conversions.Bson)", "public com.mongodb.client.model.FindOneAndReplaceOptions sort(org.bson.conversions.Bson)"], ["boolean", "com.mongodb.client.model.FindOneAndReplaceOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.upsert(boolean)", "public com.mongodb.client.model.FindOneAndReplaceOptions upsert(boolean)"], ["com.mongodb.client.model.ReturnDocument", "com.mongodb.client.model.FindOneAndReplaceOptions.getReturnDocument()", "public com.mongodb.client.model.ReturnDocument getReturnDocument()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.returnDocument(com.mongodb.client.model.ReturnDocument)", "public com.mongodb.client.model.FindOneAndReplaceOptions returnDocument(com.mongodb.client.model.ReturnDocument)"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.maxTime(long, java.util.concurrent.TimeUnit)", "public com.mongodb.client.model.FindOneAndReplaceOptions maxTime(long, java.util.concurrent.TimeUnit)"], ["long", "com.mongodb.client.model.FindOneAndReplaceOptions.getMaxTime(java.util.concurrent.TimeUnit)", "public long getMaxTime(java.util.concurrent.TimeUnit)"], ["java.lang.Boolean", "com.mongodb.client.model.FindOneAndReplaceOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.FindOneAndReplaceOptions bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.FindOneAndReplaceOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.FindOneAndReplaceOptions", "com.mongodb.client.model.FindOneAndReplaceOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.FindOneAndReplaceOptions collation(com.mongodb.client.model.Collation)"], ["java.lang.String", "com.mongodb.client.model.FindOneAndReplaceOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions()", "public com.mongodb.client.model.MergeOptions()"], ["java.util.List<java.lang.String>", "com.mongodb.client.model.MergeOptions.getUniqueIdentifier()", "public java.util.List<java.lang.String> getUniqueIdentifier()"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions.uniqueIdentifier(java.lang.String)", "public com.mongodb.client.model.MergeOptions uniqueIdentifier(java.lang.String)"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions.uniqueIdentifier(java.util.List<java.lang.String>)", "public com.mongodb.client.model.MergeOptions uniqueIdentifier(java.util.List<java.lang.String>)"], ["com.mongodb.client.model.MergeOptions$WhenMatched", "com.mongodb.client.model.MergeOptions.getWhenMatched()", "public com.mongodb.client.model.MergeOptions$WhenMatched getWhenMatched()"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions.whenMatched(com.mongodb.client.model.MergeOptions$WhenMatched)", "public com.mongodb.client.model.MergeOptions whenMatched(com.mongodb.client.model.MergeOptions$WhenMatched)"], ["java.util.List<com.mongodb.client.model.Variable<?>>", "com.mongodb.client.model.MergeOptions.getVariables()", "public java.util.List<com.mongodb.client.model.Variable<?>> getVariables()"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions.variables(java.util.List<com.mongodb.client.model.Variable<?>>)", "public com.mongodb.client.model.MergeOptions variables(java.util.List<com.mongodb.client.model.Variable<?>>)"], ["java.util.List<org.bson.conversions.Bson>", "com.mongodb.client.model.MergeOptions.getWhenMatchedPipeline()", "public java.util.List<org.bson.conversions.Bson> getWhenMatchedPipeline()"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions.whenMatchedPipeline(java.util.List<org.bson.conversions.Bson>)", "public com.mongodb.client.model.MergeOptions whenMatchedPipeline(java.util.List<org.bson.conversions.Bson>)"], ["com.mongodb.client.model.MergeOptions$WhenNotMatched", "com.mongodb.client.model.MergeOptions.getWhenNotMatched()", "public com.mongodb.client.model.MergeOptions$WhenNotMatched getWhenNotMatched()"], ["com.mongodb.client.model.MergeOptions", "com.mongodb.client.model.MergeOptions.whenNotMatched(com.mongodb.client.model.MergeOptions$WhenNotMatched)", "public com.mongodb.client.model.MergeOptions whenNotMatched(com.mongodb.client.model.MergeOptions$WhenNotMatched)"], ["boolean", "com.mongodb.client.model.MergeOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.MergeOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.MergeOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson)", "public com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson)"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, org.bson.conversions.Bson, com.mongodb.client.model.UpdateOptions)"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>)"], ["com.mongodb.client.model.UpdateManyModel", "com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)", "public com.mongodb.client.model.UpdateManyModel(org.bson.conversions.Bson, java.util.List<? extends org.bson.conversions.Bson>, com.mongodb.client.model.UpdateOptions)"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateManyModel.getFilter()", "public org.bson.conversions.Bson getFilter()"], ["org.bson.conversions.Bson", "com.mongodb.client.model.UpdateManyModel.getUpdate()", "public org.bson.conversions.Bson getUpdate()"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.UpdateManyModel.getUpdatePipeline()", "public java.util.List<? extends org.bson.conversions.Bson> getUpdatePipeline()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateManyModel.getOptions()", "public com.mongodb.client.model.UpdateOptions getOptions()"], ["java.lang.String", "com.mongodb.client.model.UpdateManyModel.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions()", "public com.mongodb.client.model.BucketAutoOptions()"], ["com.mongodb.client.model.BucketGranularity", "com.mongodb.client.model.BucketAutoOptions.getGranularity()", "public com.mongodb.client.model.BucketGranularity getGranularity()"], ["java.util.List<com.mongodb.client.model.BsonField>", "com.mongodb.client.model.BucketAutoOptions.getOutput()", "public java.util.List<com.mongodb.client.model.BsonField> getOutput()"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions.granularity(com.mongodb.client.model.BucketGranularity)", "public com.mongodb.client.model.BucketAutoOptions granularity(com.mongodb.client.model.BucketGranularity)"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions.output(com.mongodb.client.model.BsonField...)", "public com.mongodb.client.model.BucketAutoOptions output(com.mongodb.client.model.BsonField...)"], ["com.mongodb.client.model.BucketAutoOptions", "com.mongodb.client.model.BucketAutoOptions.output(java.util.List<com.mongodb.client.model.BsonField>)", "public com.mongodb.client.model.BucketAutoOptions output(java.util.List<com.mongodb.client.model.BsonField>)"], ["boolean", "com.mongodb.client.model.BucketAutoOptions.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.BucketAutoOptions.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.BucketAutoOptions.toString()", "public java.lang.String toString()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions()", "public com.mongodb.client.model.UpdateOptions()"], ["boolean", "com.mongodb.client.model.UpdateOptions.isUpsert()", "public boolean isUpsert()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.upsert(boolean)", "public com.mongodb.client.model.UpdateOptions upsert(boolean)"], ["java.lang.Boolean", "com.mongodb.client.model.UpdateOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.client.model.UpdateOptions bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.client.model.Collation", "com.mongodb.client.model.UpdateOptions.getCollation()", "public com.mongodb.client.model.Collation getCollation()"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.collation(com.mongodb.client.model.Collation)", "public com.mongodb.client.model.UpdateOptions collation(com.mongodb.client.model.Collation)"], ["com.mongodb.client.model.UpdateOptions", "com.mongodb.client.model.UpdateOptions.arrayFilters(java.util.List<? extends org.bson.conversions.Bson>)", "public com.mongodb.client.model.UpdateOptions arrayFilters(java.util.List<? extends org.bson.conversions.Bson>)"], ["java.util.List<? extends org.bson.conversions.Bson>", "com.mongodb.client.model.UpdateOptions.getArrayFilters()", "public java.util.List<? extends org.bson.conversions.Bson> getArrayFilters()"], ["java.lang.String", "com.mongodb.client.model.UpdateOptions.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Aggregates$ReplaceStage.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Aggregates$ReplaceStage.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Aggregates$ReplaceStage.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Aggregates$ReplaceStage.toString()", "public java.lang.String toString()"], ["<TDocument> org.bson.BsonDocument", "com.mongodb.client.model.Filters$IterableOperatorFilter.toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)", "public <TDocument> org.bson.BsonDocument toBsonDocument(java.lang.Class<TDocument>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "com.mongodb.client.model.Filters$IterableOperatorFilter.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.client.model.Filters$IterableOperatorFilter.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.client.model.Filters$IterableOperatorFilter.toString()", "public java.lang.String toString()"], ["com.mongodb.ExplainVerbosity[]", "com.mongodb.ExplainVerbosity.values()", "public static com.mongodb.ExplainVerbosity[] values()"], ["com.mongodb.ExplainVerbosity", "com.mongodb.ExplainVerbosity.valueOf(java.lang.String)", "public static com.mongodb.ExplainVerbosity valueOf(java.lang.String)"], ["com.mongodb.TagSet", "com.mongodb.TagSet()", "public com.mongodb.TagSet()"], ["com.mongodb.TagSet", "com.mongodb.TagSet(com.mongodb.Tag)", "public com.mongodb.TagSet(com.mongodb.Tag)"], ["com.mongodb.TagSet", "com.mongodb.TagSet(java.util.List<com.mongodb.Tag>)", "public com.mongodb.TagSet(java.util.List<com.mongodb.Tag>)"], ["java.util.Iterator<com.mongodb.Tag>", "com.mongodb.TagSet.iterator()", "public java.util.Iterator<com.mongodb.Tag> iterator()"], ["boolean", "com.mongodb.TagSet.containsAll(com.mongodb.TagSet)", "public boolean containsAll(com.mongodb.TagSet)"], ["boolean", "com.mongodb.TagSet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.TagSet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.TagSet.toString()", "public java.lang.String toString()"], ["com.mongodb.DBRef", "com.mongodb.DBRef(java.lang.String, java.lang.Object)", "public com.mongodb.DBRef(java.lang.String, java.lang.Object)"], ["com.mongodb.DBRef", "com.mongodb.DBRef(java.lang.String, java.lang.String, java.lang.Object)", "public com.mongodb.DBRef(java.lang.String, java.lang.String, java.lang.Object)"], ["java.lang.Object", "com.mongodb.DBRef.getId()", "public java.lang.Object getId()"], ["java.lang.String", "com.mongodb.DBRef.getCollectionName()", "public java.lang.String getCollectionName()"], ["java.lang.String", "com.mongodb.DBRef.getDatabaseName()", "public java.lang.String getDatabaseName()"], ["boolean", "com.mongodb.DBRef.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DBRef.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.DBRef.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.mongodb.DB$1.apply(com.mongodb.DBObject)", "public java.lang.String apply(com.mongodb.DBObject)"], ["java.lang.Object", "com.mongodb.DB$1.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["com.mongodb.MongoBulkWriteException", "com.mongodb.MongoBulkWriteException(com.mongodb.bulk.BulkWriteResult, java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)", "public com.mongodb.MongoBulkWriteException(com.mongodb.bulk.BulkWriteResult, java.util.List<com.mongodb.bulk.BulkWriteError>, com.mongodb.bulk.WriteConcernError, com.mongodb.ServerAddress)"], ["com.mongodb.bulk.BulkWriteResult", "com.mongodb.MongoBulkWriteException.getWriteResult()", "public com.mongodb.bulk.BulkWriteResult getWriteResult()"], ["java.util.List<com.mongodb.bulk.BulkWriteError>", "com.mongodb.MongoBulkWriteException.getWriteErrors()", "public java.util.List<com.mongodb.bulk.BulkWriteError> getWriteErrors()"], ["com.mongodb.bulk.WriteConcernError", "com.mongodb.MongoBulkWriteException.getWriteConcernError()", "public com.mongodb.bulk.WriteConcernError getWriteConcernError()"], ["com.mongodb.ServerAddress", "com.mongodb.MongoBulkWriteException.getServerAddress()", "public com.mongodb.ServerAddress getServerAddress()"], ["boolean", "com.mongodb.MongoBulkWriteException.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.MongoBulkWriteException.hashCode()", "public int hashCode()"], ["com.mongodb.WriteConcernException", "com.mongodb.WriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)", "public com.mongodb.WriteConcernException(org.bson.BsonDocument, com.mongodb.ServerAddress, com.mongodb.WriteConcernResult)"], ["int", "com.mongodb.WriteConcernException.extractErrorCode(org.bson.BsonDocument)", "public static int extractErrorCode(org.bson.BsonDocument)"], ["java.lang.String", "com.mongodb.WriteConcernException.extractErrorMessage(org.bson.BsonDocument)", "public static java.lang.String extractErrorMessage(org.bson.BsonDocument)"], ["com.mongodb.WriteConcernResult", "com.mongodb.WriteConcernException.getWriteConcernResult()", "public com.mongodb.WriteConcernResult getWriteConcernResult()"], ["int", "com.mongodb.WriteConcernException.getErrorCode()", "public int getErrorCode()"], ["java.lang.String", "com.mongodb.WriteConcernException.getErrorMessage()", "public java.lang.String getErrorMessage()"], ["org.bson.BsonDocument", "com.mongodb.WriteConcernException.getResponse()", "public org.bson.BsonDocument getResponse()"], ["com.mongodb.LazyDBCallback", "com.mongodb.LazyDBCallback(com.mongodb.DBCollection)", "public com.mongodb.LazyDBCallback(com.mongodb.DBCollection)"], ["java.lang.Object", "com.mongodb.LazyDBCallback.createObject(byte[], int)", "public java.lang.Object createObject(byte[], int)"], ["java.util.List", "com.mongodb.LazyDBCallback.createArray(byte[], int)", "public java.util.List createArray(byte[], int)"], ["java.lang.Object", "com.mongodb.LazyDBCallback.createDBRef(java.lang.String, org.bson.types.ObjectId)", "public java.lang.Object createDBRef(java.lang.String, org.bson.types.ObjectId)"], ["com.mongodb.DBObject", "com.mongodb.DBDecoderAdapter.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public com.mongodb.DBObject decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "com.mongodb.DBDecoderAdapter.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.util.Set<java.lang.String>", "com.mongodb.ReflectionDBObject$JavaWrapper.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "com.mongodb.ReflectionDBObject$JavaWrapper.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject$JavaWrapper.get(com.mongodb.ReflectionDBObject, java.lang.String)", "public java.lang.Object get(com.mongodb.ReflectionDBObject, java.lang.String)"], ["java.lang.Object", "com.mongodb.ReflectionDBObject$JavaWrapper.set(com.mongodb.ReflectionDBObject, java.lang.String, java.lang.Object)", "public java.lang.Object set(com.mongodb.ReflectionDBObject, java.lang.String, java.lang.Object)"], ["com.mongodb.WriteConcernError", "com.mongodb.WriteConcernError(int, java.lang.String, com.mongodb.DBObject)", "public com.mongodb.WriteConcernError(int, java.lang.String, com.mongodb.DBObject)"], ["int", "com.mongodb.WriteConcernError.getCode()", "public int getCode()"], ["java.lang.String", "com.mongodb.WriteConcernError.getMessage()", "public java.lang.String getMessage()"], ["com.mongodb.DBObject", "com.mongodb.WriteConcernError.getDetails()", "public com.mongodb.DBObject getDetails()"], ["boolean", "com.mongodb.WriteConcernError.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.WriteConcernError.hashCode()", "public int hashCode()"], ["java.lang.String", "com.mongodb.WriteConcernError.toString()", "public java.lang.String toString()"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String)", "public com.mongodb.DBAddress(java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(com.mongodb.DBAddress, java.lang.String)", "public com.mongodb.DBAddress(com.mongodb.DBAddress, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String, java.lang.String)", "public com.mongodb.DBAddress(java.lang.String, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.lang.String, int, java.lang.String)", "public com.mongodb.DBAddress(java.lang.String, int, java.lang.String)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress(java.net.InetAddress, int, java.lang.String)", "public com.mongodb.DBAddress(java.net.InetAddress, int, java.lang.String)"], ["int", "com.mongodb.DBAddress.hashCode()", "public int hashCode()"], ["boolean", "com.mongodb.DBAddress.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.mongodb.DBAddress", "com.mongodb.DBAddress.getSister(java.lang.String)", "public com.mongodb.DBAddress getSister(java.lang.String)"], ["java.lang.String", "com.mongodb.DBAddress.getDBName()", "public java.lang.String getDBName()"], ["java.lang.String", "com.mongodb.DBAddress.toString()", "public java.lang.String toString()"], ["com.mongodb.MongoGridFSException", "com.mongodb.MongoGridFSException(java.lang.String)", "public com.mongodb.MongoGridFSException(java.lang.String)"], ["com.mongodb.MongoGridFSException", "com.mongodb.MongoGridFSException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoGridFSException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoInternalException", "com.mongodb.MongoInternalException(java.lang.String)", "public com.mongodb.MongoInternalException(java.lang.String)"], ["com.mongodb.MongoInternalException", "com.mongodb.MongoInternalException(java.lang.String, java.lang.Throwable)", "public com.mongodb.MongoInternalException(java.lang.String, java.lang.Throwable)"], ["com.mongodb.MongoChangeStreamException", "com.mongodb.MongoChangeStreamException(java.lang.String)", "public com.mongodb.MongoChangeStreamException(java.lang.String)"], ["com.mongodb.MapReduceCommand$OutputType[]", "com.mongodb.MapReduceCommand$OutputType.values()", "public static com.mongodb.MapReduceCommand$OutputType[] values()"], ["com.mongodb.MapReduceCommand$OutputType", "com.mongodb.MapReduceCommand$OutputType.valueOf(java.lang.String)", "public static com.mongodb.MapReduceCommand$OutputType valueOf(java.lang.String)"], ["com.mongodb.DocumentToDBRefTransformer", "com.mongodb.DocumentToDBRefTransformer()", "public com.mongodb.DocumentToDBRefTransformer()"], ["java.lang.Object", "com.mongodb.DocumentToDBRefTransformer.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["boolean", "com.mongodb.DocumentToDBRefTransformer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.mongodb.DocumentToDBRefTransformer.hashCode()", "public int hashCode()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions()", "public com.mongodb.InsertOptions()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.writeConcern(com.mongodb.WriteConcern)", "public com.mongodb.InsertOptions writeConcern(com.mongodb.WriteConcern)"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.continueOnError(boolean)", "public com.mongodb.InsertOptions continueOnError(boolean)"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.dbEncoder(com.mongodb.DBEncoder)", "public com.mongodb.InsertOptions dbEncoder(com.mongodb.DBEncoder)"], ["com.mongodb.WriteConcern", "com.mongodb.InsertOptions.getWriteConcern()", "public com.mongodb.WriteConcern getWriteConcern()"], ["boolean", "com.mongodb.InsertOptions.isContinueOnError()", "public boolean isContinueOnError()"], ["com.mongodb.DBEncoder", "com.mongodb.InsertOptions.getDbEncoder()", "public com.mongodb.DBEncoder getDbEncoder()"], ["java.lang.Boolean", "com.mongodb.InsertOptions.getBypassDocumentValidation()", "public java.lang.Boolean getBypassDocumentValidation()"], ["com.mongodb.InsertOptions", "com.mongodb.InsertOptions.bypassDocumentValidation(java.lang.Boolean)", "public com.mongodb.InsertOptions bypassDocumentValidation(java.lang.Boolean)"], ["com.mongodb.MongoNodeIsRecoveringException", "com.mongodb.MongoNodeIsRecoveringException(org.bson.BsonDocument, com.mongodb.ServerAddress)", "public com.mongodb.MongoNodeIsRecoveringException(org.bson.BsonDocument, com.mongodb.ServerAddress)"], ["com.mongodb.MongoNodeIsRecoveringException", "com.mongodb.MongoNodeIsRecoveringException(com.mongodb.ServerAddress)", "public com.mongodb.MongoNodeIsRecoveringException(com.mongodb.ServerAddress)"], ["com.mongodb.DBCallback", "com.mongodb.DefaultDBCallback$1.create(com.mongodb.DBCollection)", "public com.mongodb.DBCallback create(com.mongodb.DBCollection)"], ["org.bson.AbstractBsonWriter$State[]", "org.bson.AbstractBsonWriter$State.values()", "public static org.bson.AbstractBsonWriter$State[] values()"], ["org.bson.AbstractBsonWriter$State", "org.bson.AbstractBsonWriter$State.valueOf(java.lang.String)", "public static org.bson.AbstractBsonWriter$State valueOf(java.lang.String)"], ["org.bson.BsonString", "org.bson.BsonString(java.lang.String)", "public org.bson.BsonString(java.lang.String)"], ["int", "org.bson.BsonString.compareTo(org.bson.BsonString)", "public int compareTo(org.bson.BsonString)"], ["org.bson.BsonType", "org.bson.BsonString.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonString.getValue()", "public java.lang.String getValue()"], ["boolean", "org.bson.BsonString.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonString.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonString.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonString.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["void", "org.bson.BSONCallbackAdapter.flush()", "public void flush()"], ["void", "org.bson.BSONCallbackAdapter.doWriteStartDocument()", "public void doWriteStartDocument()"], ["void", "org.bson.BSONCallbackAdapter.doWriteStartArray()", "public void doWriteStartArray()"], ["void", "org.bson.BSONCallbackAdapter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.BSONCallbackAdapter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.BSONCallbackAdapter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BSONCallbackAdapter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BSONCallbackAdapter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.BSONCallbackAdapter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.BSONCallbackAdapter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BSONCallbackAdapter.doWriteUndefined()", "public void doWriteUndefined()"], ["org.bson.BsonWriterSettings", "org.bson.BsonWriterSettings(int)", "public org.bson.BsonWriterSettings(int)"], ["org.bson.BsonWriterSettings", "org.bson.BsonWriterSettings()", "public org.bson.BsonWriterSettings()"], ["int", "org.bson.BsonWriterSettings.getMaxSerializationDepth()", "public int getMaxSerializationDepth()"], ["org.bson.BsonJavaScriptWithScope", "org.bson.BsonJavaScriptWithScope(java.lang.String, org.bson.BsonDocument)", "public org.bson.BsonJavaScriptWithScope(java.lang.String, org.bson.BsonDocument)"], ["org.bson.BsonType", "org.bson.BsonJavaScriptWithScope.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonJavaScriptWithScope.getCode()", "public java.lang.String getCode()"], ["org.bson.BsonDocument", "org.bson.BsonJavaScriptWithScope.getScope()", "public org.bson.BsonDocument getScope()"], ["boolean", "org.bson.BsonJavaScriptWithScope.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonJavaScriptWithScope.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonJavaScriptWithScope.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.NoOpFieldNameValidator.validate(java.lang.String)", "public boolean validate(java.lang.String)"], ["org.bson.FieldNameValidator", "org.bson.NoOpFieldNameValidator.getValidatorForField(java.lang.String)", "public org.bson.FieldNameValidator getValidatorForField(java.lang.String)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.parse(java.lang.String)", "public static org.bson.BsonDocument parse(java.lang.String)"], ["org.bson.BsonDocument", "org.bson.BsonDocument(java.util.List<org.bson.BsonElement>)", "public org.bson.BsonDocument(java.util.List<org.bson.BsonElement>)"], ["org.bson.BsonDocument", "org.bson.BsonDocument(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.BsonDocument()", "public org.bson.BsonDocument()"], ["<C> org.bson.BsonDocument", "org.bson.BsonDocument.toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)", "public <C> org.bson.BsonDocument toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonType", "org.bson.BsonDocument.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonDocument.size()", "public int size()"], ["boolean", "org.bson.BsonDocument.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.BsonDocument.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocument.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.getDocument(java.lang.Object)", "public org.bson.BsonDocument getDocument(java.lang.Object)"], ["org.bson.BsonArray", "org.bson.BsonDocument.getArray(java.lang.Object)", "public org.bson.BsonArray getArray(java.lang.Object)"], ["org.bson.BsonNumber", "org.bson.BsonDocument.getNumber(java.lang.Object)", "public org.bson.BsonNumber getNumber(java.lang.Object)"], ["org.bson.BsonInt32", "org.bson.BsonDocument.getInt32(java.lang.Object)", "public org.bson.BsonInt32 getInt32(java.lang.Object)"], ["org.bson.BsonInt64", "org.bson.BsonDocument.getInt64(java.lang.Object)", "public org.bson.BsonInt64 getInt64(java.lang.Object)"], ["org.bson.BsonDecimal128", "org.bson.BsonDocument.getDecimal128(java.lang.Object)", "public org.bson.BsonDecimal128 getDecimal128(java.lang.Object)"], ["org.bson.BsonDouble", "org.bson.BsonDocument.getDouble(java.lang.Object)", "public org.bson.BsonDouble getDouble(java.lang.Object)"], ["org.bson.BsonBoolean", "org.bson.BsonDocument.getBoolean(java.lang.Object)", "public org.bson.BsonBoolean getBoolean(java.lang.Object)"], ["org.bson.BsonString", "org.bson.BsonDocument.getString(java.lang.Object)", "public org.bson.BsonString getString(java.lang.Object)"], ["org.bson.BsonDateTime", "org.bson.BsonDocument.getDateTime(java.lang.Object)", "public org.bson.BsonDateTime getDateTime(java.lang.Object)"], ["org.bson.BsonTimestamp", "org.bson.BsonDocument.getTimestamp(java.lang.Object)", "public org.bson.BsonTimestamp getTimestamp(java.lang.Object)"], ["org.bson.BsonObjectId", "org.bson.BsonDocument.getObjectId(java.lang.Object)", "public org.bson.BsonObjectId getObjectId(java.lang.Object)"], ["org.bson.BsonRegularExpression", "org.bson.BsonDocument.getRegularExpression(java.lang.Object)", "public org.bson.BsonRegularExpression getRegularExpression(java.lang.Object)"], ["org.bson.BsonBinary", "org.bson.BsonDocument.getBinary(java.lang.Object)", "public org.bson.BsonBinary getBinary(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isNull(java.lang.Object)", "public boolean isNull(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDocument(java.lang.Object)", "public boolean isDocument(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isArray(java.lang.Object)", "public boolean isArray(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isNumber(java.lang.Object)", "public boolean isNumber(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isInt32(java.lang.Object)", "public boolean isInt32(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isInt64(java.lang.Object)", "public boolean isInt64(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDecimal128(java.lang.Object)", "public boolean isDecimal128(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDouble(java.lang.Object)", "public boolean isDouble(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isBoolean(java.lang.Object)", "public boolean isBoolean(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isString(java.lang.Object)", "public boolean isString(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isDateTime(java.lang.Object)", "public boolean isDateTime(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isTimestamp(java.lang.Object)", "public boolean isTimestamp(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isObjectId(java.lang.Object)", "public boolean isObjectId(java.lang.Object)"], ["boolean", "org.bson.BsonDocument.isBinary(java.lang.Object)", "public boolean isBinary(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocument.get(java.lang.Object, org.bson.BsonValue)", "public org.bson.BsonValue get(java.lang.Object, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.BsonDocument.getDocument(java.lang.Object, org.bson.BsonDocument)", "public org.bson.BsonDocument getDocument(java.lang.Object, org.bson.BsonDocument)"], ["org.bson.BsonArray", "org.bson.BsonDocument.getArray(java.lang.Object, org.bson.BsonArray)", "public org.bson.BsonArray getArray(java.lang.Object, org.bson.BsonArray)"], ["org.bson.BsonNumber", "org.bson.BsonDocument.getNumber(java.lang.Object, org.bson.BsonNumber)", "public org.bson.BsonNumber getNumber(java.lang.Object, org.bson.BsonNumber)"], ["org.bson.BsonInt32", "org.bson.BsonDocument.getInt32(java.lang.Object, org.bson.BsonInt32)", "public org.bson.BsonInt32 getInt32(java.lang.Object, org.bson.BsonInt32)"], ["org.bson.BsonInt64", "org.bson.BsonDocument.getInt64(java.lang.Object, org.bson.BsonInt64)", "public org.bson.BsonInt64 getInt64(java.lang.Object, org.bson.BsonInt64)"], ["org.bson.BsonDecimal128", "org.bson.BsonDocument.getDecimal128(java.lang.Object, org.bson.BsonDecimal128)", "public org.bson.BsonDecimal128 getDecimal128(java.lang.Object, org.bson.BsonDecimal128)"], ["org.bson.BsonDouble", "org.bson.BsonDocument.getDouble(java.lang.Object, org.bson.BsonDouble)", "public org.bson.BsonDouble getDouble(java.lang.Object, org.bson.BsonDouble)"], ["org.bson.BsonBoolean", "org.bson.BsonDocument.getBoolean(java.lang.Object, org.bson.BsonBoolean)", "public org.bson.BsonBoolean getBoolean(java.lang.Object, org.bson.BsonBoolean)"], ["org.bson.BsonString", "org.bson.BsonDocument.getString(java.lang.Object, org.bson.BsonString)", "public org.bson.BsonString getString(java.lang.Object, org.bson.BsonString)"], ["org.bson.BsonDateTime", "org.bson.BsonDocument.getDateTime(java.lang.Object, org.bson.BsonDateTime)", "public org.bson.BsonDateTime getDateTime(java.lang.Object, org.bson.BsonDateTime)"], ["org.bson.BsonTimestamp", "org.bson.BsonDocument.getTimestamp(java.lang.Object, org.bson.BsonTimestamp)", "public org.bson.BsonTimestamp getTimestamp(java.lang.Object, org.bson.BsonTimestamp)"], ["org.bson.BsonObjectId", "org.bson.BsonDocument.getObjectId(java.lang.Object, org.bson.BsonObjectId)", "public org.bson.BsonObjectId getObjectId(java.lang.Object, org.bson.BsonObjectId)"], ["org.bson.BsonBinary", "org.bson.BsonDocument.getBinary(java.lang.Object, org.bson.BsonBinary)", "public org.bson.BsonBinary getBinary(java.lang.Object, org.bson.BsonBinary)"], ["org.bson.BsonRegularExpression", "org.bson.BsonDocument.getRegularExpression(java.lang.Object, org.bson.BsonRegularExpression)", "public org.bson.BsonRegularExpression getRegularExpression(java.lang.Object, org.bson.BsonRegularExpression)"], ["org.bson.BsonValue", "org.bson.BsonDocument.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonDocument.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["void", "org.bson.BsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["void", "org.bson.BsonDocument.clear()", "public void clear()"], ["java.util.Set<java.lang.String>", "org.bson.BsonDocument.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Collection<org.bson.BsonValue>", "org.bson.BsonDocument.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.BsonDocument.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["org.bson.BsonDocument", "org.bson.BsonDocument.append(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument append(java.lang.String, org.bson.BsonValue)"], ["java.lang.String", "org.bson.BsonDocument.getFirstKey()", "public java.lang.String getFirstKey()"], ["org.bson.BsonReader", "org.bson.BsonDocument.asBsonReader()", "public org.bson.BsonReader asBsonReader()"], ["boolean", "org.bson.BsonDocument.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDocument.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDocument.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "org.bson.BsonDocument.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "org.bson.BsonDocument.toString()", "public java.lang.String toString()"], ["org.bson.BsonDocument", "org.bson.BsonDocument.clone()", "public org.bson.BsonDocument clone()"], ["java.lang.Object", "org.bson.BsonDocument.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.Object", "org.bson.BsonDocument.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocument.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocument.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["org.bson.BsonBoolean", "org.bson.BsonBoolean.valueOf(boolean)", "public static org.bson.BsonBoolean valueOf(boolean)"], ["org.bson.BsonBoolean", "org.bson.BsonBoolean(boolean)", "public org.bson.BsonBoolean(boolean)"], ["int", "org.bson.BsonBoolean.compareTo(org.bson.BsonBoolean)", "public int compareTo(org.bson.BsonBoolean)"], ["org.bson.BsonType", "org.bson.BsonBoolean.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonBoolean.getValue()", "public boolean getValue()"], ["boolean", "org.bson.BsonBoolean.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonBoolean.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonBoolean.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonBoolean.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["byte[]", "org.bson.internal.Base64.decode(java.lang.String)", "public static byte[] decode(java.lang.String)"], ["java.lang.String", "org.bson.internal.Base64.encode(byte[])", "public static java.lang.String encode(byte[])"], ["byte[]", "org.bson.internal.UuidHelper.encodeUuidToBinary(java.util.UUID, org.bson.UuidRepresentation)", "public static byte[] encodeUuidToBinary(java.util.UUID, org.bson.UuidRepresentation)"], ["java.util.UUID", "org.bson.internal.UuidHelper.decodeBinaryToUuid(byte[], byte, org.bson.UuidRepresentation)", "public static java.util.UUID decodeBinaryToUuid(byte[], byte, org.bson.UuidRepresentation)"], ["int", "org.bson.internal.UnsignedLongs.compare(long, long)", "public static int compare(long, long)"], ["java.lang.String", "org.bson.internal.UnsignedLongs.toString(long)", "public static java.lang.String toString(long)"], ["long", "org.bson.internal.UnsignedLongs.parse(java.lang.String)", "public static long parse(java.lang.String)"], ["org.bson.RawBsonArray", "org.bson.RawBsonArray(byte[])", "public org.bson.RawBsonArray(byte[])"], ["org.bson.RawBsonArray", "org.bson.RawBsonArray(byte[], int, int)", "public org.bson.RawBsonArray(byte[], int, int)"], ["boolean", "org.bson.RawBsonArray.add(org.bson.BsonValue)", "public boolean add(org.bson.BsonValue)"], ["boolean", "org.bson.RawBsonArray.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.RawBsonArray.addAll(java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.RawBsonArray.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.RawBsonArray.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.RawBsonArray.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.bson.RawBsonArray.clear()", "public void clear()"], ["org.bson.BsonValue", "org.bson.RawBsonArray.set(int, org.bson.BsonValue)", "public org.bson.BsonValue set(int, org.bson.BsonValue)"], ["void", "org.bson.RawBsonArray.add(int, org.bson.BsonValue)", "public void add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.RawBsonArray.remove(int)", "public org.bson.BsonValue remove(int)"], ["org.bson.BsonArray", "org.bson.RawBsonArray.clone()", "public org.bson.BsonArray clone()"], ["boolean", "org.bson.RawBsonArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.RawBsonArray.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.bson.RawBsonArray.remove(int)", "public java.lang.Object remove(int)"], ["void", "org.bson.RawBsonArray.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonArray.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["boolean", "org.bson.RawBsonArray.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonArray.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.bson.BsonInt32", "org.bson.BsonInt32(int)", "public org.bson.BsonInt32(int)"], ["int", "org.bson.BsonInt32.compareTo(org.bson.BsonInt32)", "public int compareTo(org.bson.BsonInt32)"], ["org.bson.BsonType", "org.bson.BsonInt32.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonInt32.getValue()", "public int getValue()"], ["int", "org.bson.BsonInt32.intValue()", "public int intValue()"], ["long", "org.bson.BsonInt32.longValue()", "public long longValue()"], ["org.bson.types.Decimal128", "org.bson.BsonInt32.decimal128Value()", "public org.bson.types.Decimal128 decimal128Value()"], ["double", "org.bson.BsonInt32.doubleValue()", "public double doubleValue()"], ["boolean", "org.bson.BsonInt32.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonInt32.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonInt32.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonInt32.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["boolean", "org.bson.RawBsonArray$RawBsonArrayList$Itr.hasNext()", "public boolean hasNext()"], ["org.bson.BsonValue", "org.bson.RawBsonArray$RawBsonArrayList$Itr.next()", "public org.bson.BsonValue next()"], ["void", "org.bson.RawBsonArray$RawBsonArrayList$Itr.remove()", "public void remove()"], ["int", "org.bson.RawBsonArray$RawBsonArrayList$Itr.getCursor()", "public int getCursor()"], ["void", "org.bson.RawBsonArray$RawBsonArrayList$Itr.setCursor(int)", "public void setCursor(int)"], ["java.lang.Object", "org.bson.RawBsonArray$RawBsonArrayList$Itr.next()", "public java.lang.Object next()"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWrapper.asBsonDocument(java.lang.Object, org.bson.codecs.configuration.CodecRegistry)", "public static org.bson.BsonDocument asBsonDocument(java.lang.Object, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonDocumentWrapper", "org.bson.BsonDocumentWrapper(T, org.bson.codecs.Encoder<T>)", "public org.bson.BsonDocumentWrapper(T, org.bson.codecs.Encoder<T>)"], ["T", "org.bson.BsonDocumentWrapper.getWrappedDocument()", "public T getWrappedDocument()"], ["org.bson.codecs.Encoder<T>", "org.bson.BsonDocumentWrapper.getEncoder()", "public org.bson.codecs.Encoder<T> getEncoder()"], ["boolean", "org.bson.BsonDocumentWrapper.isUnwrapped()", "public boolean isUnwrapped()"], ["int", "org.bson.BsonDocumentWrapper.size()", "public int size()"], ["boolean", "org.bson.BsonDocumentWrapper.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.BsonDocumentWrapper.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.BsonDocumentWrapper.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonDocumentWrapper.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["void", "org.bson.BsonDocumentWrapper.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["void", "org.bson.BsonDocumentWrapper.clear()", "public void clear()"], ["java.util.Set<java.lang.String>", "org.bson.BsonDocumentWrapper.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Collection<org.bson.BsonValue>", "org.bson.BsonDocumentWrapper.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.BsonDocumentWrapper.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["boolean", "org.bson.BsonDocumentWrapper.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDocumentWrapper.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDocumentWrapper.toString()", "public java.lang.String toString()"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWrapper.clone()", "public org.bson.BsonDocument clone()"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.lang.Object", "org.bson.BsonDocumentWrapper.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["void", "org.bson.BsonDocumentReader$Mark.reset()", "public void reset()"], ["org.bson.LazyBSONCallback", "org.bson.LazyBSONCallback()", "public org.bson.LazyBSONCallback()"], ["void", "org.bson.LazyBSONCallback.reset()", "public void reset()"], ["java.lang.Object", "org.bson.LazyBSONCallback.get()", "public java.lang.Object get()"], ["void", "org.bson.LazyBSONCallback.gotBinary(java.lang.String, byte, byte[])", "public void gotBinary(java.lang.String, byte, byte[])"], ["java.lang.Object", "org.bson.LazyBSONCallback.createObject(byte[], int)", "public java.lang.Object createObject(byte[], int)"], ["java.util.List", "org.bson.LazyBSONCallback.createArray(byte[], int)", "public java.util.List createArray(byte[], int)"], ["java.lang.Object", "org.bson.LazyBSONCallback.createDBRef(java.lang.String, org.bson.types.ObjectId)", "public java.lang.Object createDBRef(java.lang.String, org.bson.types.ObjectId)"], ["org.bson.BsonDouble", "org.bson.BsonDouble(double)", "public org.bson.BsonDouble(double)"], ["int", "org.bson.BsonDouble.compareTo(org.bson.BsonDouble)", "public int compareTo(org.bson.BsonDouble)"], ["org.bson.BsonType", "org.bson.BsonDouble.getBsonType()", "public org.bson.BsonType getBsonType()"], ["double", "org.bson.BsonDouble.getValue()", "public double getValue()"], ["int", "org.bson.BsonDouble.intValue()", "public int intValue()"], ["long", "org.bson.BsonDouble.longValue()", "public long longValue()"], ["org.bson.types.Decimal128", "org.bson.BsonDouble.decimal128Value()", "public org.bson.types.Decimal128 decimal128Value()"], ["double", "org.bson.BsonDouble.doubleValue()", "public double doubleValue()"], ["boolean", "org.bson.BsonDouble.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDouble.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDouble.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonDouble.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonType[]", "org.bson.BsonType.values()", "public static org.bson.BsonType[] values()"], ["org.bson.BsonType", "org.bson.BsonType.valueOf(java.lang.String)", "public static org.bson.BsonType valueOf(java.lang.String)"], ["int", "org.bson.BsonType.getValue()", "public int getValue()"], ["org.bson.BsonType", "org.bson.BsonType.findByValue(int)", "public static org.bson.BsonType findByValue(int)"], ["boolean", "org.bson.BsonType.isContainer()", "public boolean isContainer()"], ["org.bson.BsonValue", "org.bson.RawBsonArray$RawBsonArrayList.get(int)", "public org.bson.BsonValue get(int)"], ["int", "org.bson.RawBsonArray$RawBsonArrayList.size()", "public int size()"], ["java.util.Iterator<org.bson.BsonValue>", "org.bson.RawBsonArray$RawBsonArrayList.iterator()", "public java.util.Iterator<org.bson.BsonValue> iterator()"], ["java.util.ListIterator<org.bson.BsonValue>", "org.bson.RawBsonArray$RawBsonArrayList.listIterator()", "public java.util.ListIterator<org.bson.BsonValue> listIterator()"], ["java.util.ListIterator<org.bson.BsonValue>", "org.bson.RawBsonArray$RawBsonArrayList.listIterator(int)", "public java.util.ListIterator<org.bson.BsonValue> listIterator(int)"], ["java.lang.Object", "org.bson.RawBsonArray$RawBsonArrayList.get(int)", "public java.lang.Object get(int)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.io.BsonOutput, org.bson.FieldNameValidator)", "public org.bson.BsonBinaryWriter(org.bson.io.BsonOutput, org.bson.FieldNameValidator)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.io.BsonOutput)", "public org.bson.BsonBinaryWriter(org.bson.io.BsonOutput)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput)", "public org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput)"], ["org.bson.BsonBinaryWriter", "org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput, org.bson.FieldNameValidator)", "public org.bson.BsonBinaryWriter(org.bson.BsonWriterSettings, org.bson.BsonBinaryWriterSettings, org.bson.io.BsonOutput, org.bson.FieldNameValidator)"], ["void", "org.bson.BsonBinaryWriter.close()", "public void close()"], ["org.bson.io.BsonOutput", "org.bson.BsonBinaryWriter.getBsonOutput()", "public org.bson.io.BsonOutput getBsonOutput()"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriter.getBinaryWriterSettings()", "public org.bson.BsonBinaryWriterSettings getBinaryWriterSettings()"], ["void", "org.bson.BsonBinaryWriter.flush()", "public void flush()"], ["void", "org.bson.BsonBinaryWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.BsonBinaryWriter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.BsonBinaryWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BsonBinaryWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BsonBinaryWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.BsonBinaryWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.BsonBinaryWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BsonBinaryWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "org.bson.BsonBinaryWriter.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["void", "org.bson.BsonBinaryWriter.pipe(org.bson.BsonReader, java.util.List<org.bson.BsonElement>)", "public void pipe(org.bson.BsonReader, java.util.List<org.bson.BsonElement>)"], ["void", "org.bson.BsonBinaryWriter.pushMaxDocumentSize(int)", "public void pushMaxDocumentSize(int)"], ["void", "org.bson.BsonBinaryWriter.popMaxDocumentSize()", "public void popMaxDocumentSize()"], ["void", "org.bson.BsonBinaryWriter.mark()", "public void mark()"], ["void", "org.bson.BsonBinaryWriter.reset()", "public void reset()"], ["org.bson.BsonBinarySubType[]", "org.bson.BsonBinarySubType.values()", "public static org.bson.BsonBinarySubType[] values()"], ["org.bson.BsonBinarySubType", "org.bson.BsonBinarySubType.valueOf(java.lang.String)", "public static org.bson.BsonBinarySubType valueOf(java.lang.String)"], ["boolean", "org.bson.BsonBinarySubType.isUuid(byte)", "public static boolean isUuid(byte)"], ["byte", "org.bson.BsonBinarySubType.getValue()", "public byte getValue()"], ["org.bson.AbstractBsonReader$State[]", "org.bson.AbstractBsonReader$State.values()", "public static org.bson.AbstractBsonReader$State[] values()"], ["org.bson.AbstractBsonReader$State", "org.bson.AbstractBsonReader$State.valueOf(java.lang.String)", "public static org.bson.AbstractBsonReader$State valueOf(java.lang.String)"], ["org.bson.BsonMinKey", "org.bson.BsonMinKey()", "public org.bson.BsonMinKey()"], ["org.bson.BsonType", "org.bson.BsonMinKey.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonMinKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonMinKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonMinKey.toString()", "public java.lang.String toString()"], ["org.bson.BasicBSONEncoder", "org.bson.BasicBSONEncoder()", "public org.bson.BasicBSONEncoder()"], ["byte[]", "org.bson.BasicBSONEncoder.encode(org.bson.BSONObject)", "public byte[] encode(org.bson.BSONObject)"], ["void", "org.bson.BasicBSONEncoder.done()", "public void done()"], ["void", "org.bson.BasicBSONEncoder.set(org.bson.io.OutputBuffer)", "public void set(org.bson.io.OutputBuffer)"], ["int", "org.bson.BasicBSONEncoder.putObject(org.bson.BSONObject)", "public int putObject(org.bson.BSONObject)"], ["void", "org.bson.BsonBinaryReader$Mark.reset()", "public void reset()"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject()", "public org.bson.BasicBSONObject()"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(int)", "public org.bson.BasicBSONObject(int)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(java.lang.String, java.lang.Object)", "public org.bson.BasicBSONObject(java.lang.String, java.lang.Object)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject(java.util.Map)", "public org.bson.BasicBSONObject(java.util.Map)"], ["java.util.Map", "org.bson.BasicBSONObject.toMap()", "public java.util.Map toMap()"], ["java.lang.Object", "org.bson.BasicBSONObject.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONObject.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["int", "org.bson.BasicBSONObject.getInt(java.lang.String)", "public int getInt(java.lang.String)"], ["int", "org.bson.BasicBSONObject.getInt(java.lang.String, int)", "public int getInt(java.lang.String, int)"], ["long", "org.bson.BasicBSONObject.getLong(java.lang.String)", "public long getLong(java.lang.String)"], ["long", "org.bson.BasicBSONObject.getLong(java.lang.String, long)", "public long getLong(java.lang.String, long)"], ["double", "org.bson.BasicBSONObject.getDouble(java.lang.String)", "public double getDouble(java.lang.String)"], ["double", "org.bson.BasicBSONObject.getDouble(java.lang.String, double)", "public double getDouble(java.lang.String, double)"], ["java.lang.String", "org.bson.BasicBSONObject.getString(java.lang.String)", "public java.lang.String getString(java.lang.String)"], ["java.lang.String", "org.bson.BasicBSONObject.getString(java.lang.String, java.lang.String)", "public java.lang.String getString(java.lang.String, java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.getBoolean(java.lang.String)", "public boolean getBoolean(java.lang.String)"], ["boolean", "org.bson.BasicBSONObject.getBoolean(java.lang.String, boolean)", "public boolean getBoolean(java.lang.String, boolean)"], ["org.bson.types.ObjectId", "org.bson.BasicBSONObject.getObjectId(java.lang.String)", "public org.bson.types.ObjectId getObjectId(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.BasicBSONObject.getObjectId(java.lang.String, org.bson.types.ObjectId)", "public org.bson.types.ObjectId getObjectId(java.lang.String, org.bson.types.ObjectId)"], ["java.util.Date", "org.bson.BasicBSONObject.getDate(java.lang.String)", "public java.util.Date getDate(java.lang.String)"], ["java.util.Date", "org.bson.BasicBSONObject.getDate(java.lang.String, java.util.Date)", "public java.util.Date getDate(java.lang.String, java.util.Date)"], ["void", "org.bson.BasicBSONObject.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["void", "org.bson.BasicBSONObject.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["org.bson.BasicBSONObject", "org.bson.BasicBSONObject.append(java.lang.String, java.lang.Object)", "public org.bson.BasicBSONObject append(java.lang.String, java.lang.Object)"], ["boolean", "org.bson.BasicBSONObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BasicBSONObject.hashCode()", "public int hashCode()"], ["java.lang.Object", "org.bson.BasicBSONObject.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["org.bson.UuidRepresentation[]", "org.bson.UuidRepresentation.values()", "public static org.bson.UuidRepresentation[] values()"], ["org.bson.UuidRepresentation", "org.bson.UuidRepresentation.valueOf(java.lang.String)", "public static org.bson.UuidRepresentation valueOf(java.lang.String)"], ["org.bson.BsonDocumentReader", "org.bson.BsonDocumentReader(org.bson.BsonDocument)", "public org.bson.BsonDocumentReader(org.bson.BsonDocument)"], ["org.bson.types.Decimal128", "org.bson.BsonDocumentReader.doReadDecimal128()", "public org.bson.types.Decimal128 doReadDecimal128()"], ["org.bson.BsonType", "org.bson.BsonDocumentReader.readBsonType()", "public org.bson.BsonType readBsonType()"], ["void", "org.bson.BsonDocumentReader.mark()", "public void mark()"], ["org.bson.BsonReaderMark", "org.bson.BsonDocumentReader.getMark()", "public org.bson.BsonReaderMark getMark()"], ["void", "org.bson.BsonDocumentReader.reset()", "public void reset()"], ["org.bson.BsonNumber", "org.bson.BsonNumber()", "public org.bson.BsonNumber()"], ["org.bson.BSONException", "org.bson.BSONException(java.lang.String)", "public org.bson.BSONException(java.lang.String)"], ["org.bson.BSONException", "org.bson.BSONException(int, java.lang.String)", "public org.bson.BSONException(int, java.lang.String)"], ["org.bson.BSONException", "org.bson.BSONException(java.lang.String, java.lang.Throwable)", "public org.bson.BSONException(java.lang.String, java.lang.Throwable)"], ["org.bson.BSONException", "org.bson.BSONException(int, java.lang.String, java.lang.Throwable)", "public org.bson.BSONException(int, java.lang.String, java.lang.Throwable)"], ["java.lang.Integer", "org.bson.BSONException.getErrorCode()", "public java.lang.Integer getErrorCode()"], ["boolean", "org.bson.BSONException.hasErrorCode()", "public boolean hasErrorCode()"], ["org.bson.BsonSymbol", "org.bson.BsonSymbol(java.lang.String)", "public org.bson.BsonSymbol(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonSymbol.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonSymbol.getSymbol()", "public java.lang.String getSymbol()"], ["boolean", "org.bson.BsonSymbol.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonSymbol.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonSymbol.toString()", "public java.lang.String toString()"], ["org.bson.LazyBSONObject", "org.bson.LazyBSONObject(byte[], org.bson.LazyBSONCallback)", "public org.bson.LazyBSONObject(byte[], org.bson.LazyBSONCallback)"], ["org.bson.LazyBSONObject", "org.bson.LazyBSONObject(byte[], int, org.bson.LazyBSONCallback)", "public org.bson.LazyBSONObject(byte[], int, org.bson.LazyBSONCallback)"], ["java.lang.Object", "org.bson.LazyBSONObject.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "org.bson.LazyBSONObject.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.bson.LazyBSONObject.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["boolean", "org.bson.LazyBSONObject.isEmpty()", "public boolean isEmpty()"], ["int", "org.bson.LazyBSONObject.getBSONSize()", "public int getBSONSize()"], ["int", "org.bson.LazyBSONObject.pipe(java.io.OutputStream)", "public int pipe(java.io.OutputStream) throws java.io.IOException"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.LazyBSONObject.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet()"], ["int", "org.bson.LazyBSONObject.hashCode()", "public int hashCode()"], ["boolean", "org.bson.LazyBSONObject.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.Object", "org.bson.LazyBSONObject.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["void", "org.bson.LazyBSONObject.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["void", "org.bson.LazyBSONObject.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["java.lang.Object", "org.bson.LazyBSONObject.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["java.util.Map", "org.bson.LazyBSONObject.toMap()", "public java.util.Map toMap()"], ["org.bson.BsonRegularExpression", "org.bson.BsonRegularExpression(java.lang.String, java.lang.String)", "public org.bson.BsonRegularExpression(java.lang.String, java.lang.String)"], ["org.bson.BsonRegularExpression", "org.bson.BsonRegularExpression(java.lang.String)", "public org.bson.BsonRegularExpression(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonRegularExpression.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonRegularExpression.getPattern()", "public java.lang.String getPattern()"], ["java.lang.String", "org.bson.BsonRegularExpression.getOptions()", "public java.lang.String getOptions()"], ["boolean", "org.bson.BsonRegularExpression.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonRegularExpression.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonRegularExpression.toString()", "public java.lang.String toString()"], ["org.bson.BsonInt64", "org.bson.BsonInt64(long)", "public org.bson.BsonInt64(long)"], ["int", "org.bson.BsonInt64.compareTo(org.bson.BsonInt64)", "public int compareTo(org.bson.BsonInt64)"], ["org.bson.BsonType", "org.bson.BsonInt64.getBsonType()", "public org.bson.BsonType getBsonType()"], ["long", "org.bson.BsonInt64.getValue()", "public long getValue()"], ["int", "org.bson.BsonInt64.intValue()", "public int intValue()"], ["long", "org.bson.BsonInt64.longValue()", "public long longValue()"], ["double", "org.bson.BsonInt64.doubleValue()", "public double doubleValue()"], ["org.bson.types.Decimal128", "org.bson.BsonInt64.decimal128Value()", "public org.bson.types.Decimal128 decimal128Value()"], ["boolean", "org.bson.BsonInt64.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonInt64.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonInt64.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonInt64.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp()", "public org.bson.BsonTimestamp()"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp(long)", "public org.bson.BsonTimestamp(long)"], ["org.bson.BsonTimestamp", "org.bson.BsonTimestamp(int, int)", "public org.bson.BsonTimestamp(int, int)"], ["org.bson.BsonType", "org.bson.BsonTimestamp.getBsonType()", "public org.bson.BsonType getBsonType()"], ["long", "org.bson.BsonTimestamp.getValue()", "public long getValue()"], ["int", "org.bson.BsonTimestamp.getTime()", "public int getTime()"], ["int", "org.bson.BsonTimestamp.getInc()", "public int getInc()"], ["java.lang.String", "org.bson.BsonTimestamp.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonTimestamp.compareTo(org.bson.BsonTimestamp)", "public int compareTo(org.bson.BsonTimestamp)"], ["boolean", "org.bson.BsonTimestamp.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonTimestamp.hashCode()", "public int hashCode()"], ["int", "org.bson.BsonTimestamp.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.BsonContextType[]", "org.bson.BsonContextType.values()", "public static org.bson.BsonContextType[] values()"], ["org.bson.BsonContextType", "org.bson.BsonContextType.valueOf(java.lang.String)", "public static org.bson.BsonContextType valueOf(java.lang.String)"], ["boolean", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.hasPrevious()", "public boolean hasPrevious()"], ["org.bson.BsonValue", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.previous()", "public org.bson.BsonValue previous()"], ["int", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.nextIndex()", "public int nextIndex()"], ["int", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.previousIndex()", "public int previousIndex()"], ["void", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.set(org.bson.BsonValue)", "public void set(org.bson.BsonValue)"], ["void", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.add(org.bson.BsonValue)", "public void add(org.bson.BsonValue)"], ["void", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.add(java.lang.Object)", "public void add(java.lang.Object)"], ["void", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.set(java.lang.Object)", "public void set(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonArray$RawBsonArrayList$ListItr.previous()", "public java.lang.Object previous()"], ["org.bson.BasicBSONCallback", "org.bson.BasicBSONCallback()", "public org.bson.BasicBSONCallback()"], ["java.lang.Object", "org.bson.BasicBSONCallback.get()", "public java.lang.Object get()"], ["org.bson.BSONObject", "org.bson.BasicBSONCallback.create()", "public org.bson.BSONObject create()"], ["org.bson.BSONCallback", "org.bson.BasicBSONCallback.createBSONCallback()", "public org.bson.BSONCallback createBSONCallback()"], ["org.bson.BSONObject", "org.bson.BasicBSONCallback.create(boolean, java.util.List<java.lang.String>)", "public org.bson.BSONObject create(boolean, java.util.List<java.lang.String>)"], ["void", "org.bson.BasicBSONCallback.objectStart()", "public void objectStart()"], ["void", "org.bson.BasicBSONCallback.objectStart(java.lang.String)", "public void objectStart(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONCallback.objectDone()", "public java.lang.Object objectDone()"], ["void", "org.bson.BasicBSONCallback.arrayStart()", "public void arrayStart()"], ["void", "org.bson.BasicBSONCallback.arrayStart(java.lang.String)", "public void arrayStart(java.lang.String)"], ["java.lang.Object", "org.bson.BasicBSONCallback.arrayDone()", "public java.lang.Object arrayDone()"], ["void", "org.bson.BasicBSONCallback.gotNull(java.lang.String)", "public void gotNull(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotUndefined(java.lang.String)", "public void gotUndefined(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotMinKey(java.lang.String)", "public void gotMinKey(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotMaxKey(java.lang.String)", "public void gotMaxKey(java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotBoolean(java.lang.String, boolean)", "public void gotBoolean(java.lang.String, boolean)"], ["void", "org.bson.BasicBSONCallback.gotDouble(java.lang.String, double)", "public void gotDouble(java.lang.String, double)"], ["void", "org.bson.BasicBSONCallback.gotInt(java.lang.String, int)", "public void gotInt(java.lang.String, int)"], ["void", "org.bson.BasicBSONCallback.gotLong(java.lang.String, long)", "public void gotLong(java.lang.String, long)"], ["void", "org.bson.BasicBSONCallback.gotDecimal128(java.lang.String, org.bson.types.Decimal128)", "public void gotDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "org.bson.BasicBSONCallback.gotDate(java.lang.String, long)", "public void gotDate(java.lang.String, long)"], ["void", "org.bson.BasicBSONCallback.gotRegex(java.lang.String, java.lang.String, java.lang.String)", "public void gotRegex(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotString(java.lang.String, java.lang.String)", "public void gotString(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotSymbol(java.lang.String, java.lang.String)", "public void gotSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotTimestamp(java.lang.String, int, int)", "public void gotTimestamp(java.lang.String, int, int)"], ["void", "org.bson.BasicBSONCallback.gotObjectId(java.lang.String, org.bson.types.ObjectId)", "public void gotObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.BasicBSONCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)", "public void gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.BasicBSONCallback.gotBinaryArray(java.lang.String, byte[])", "public void gotBinaryArray(java.lang.String, byte[])"], ["void", "org.bson.BasicBSONCallback.gotBinary(java.lang.String, byte, byte[])", "public void gotBinary(java.lang.String, byte, byte[])"], ["void", "org.bson.BasicBSONCallback.gotUUID(java.lang.String, long, long)", "public void gotUUID(java.lang.String, long, long)"], ["void", "org.bson.BasicBSONCallback.gotCode(java.lang.String, java.lang.String)", "public void gotCode(java.lang.String, java.lang.String)"], ["void", "org.bson.BasicBSONCallback.gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)", "public void gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)"], ["void", "org.bson.BasicBSONCallback.reset()", "public void reset()"], ["org.bson.BsonNull", "org.bson.BsonNull()", "public org.bson.BsonNull()"], ["org.bson.BsonType", "org.bson.BsonNull.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonNull.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonNull.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonNull.toString()", "public java.lang.String toString()"], ["void", "org.bson.json.JsonReader$Mark.reset()", "public void reset()"], ["void", "org.bson.json.JsonReader$Mark.discard()", "public void discard()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings$Builder.build()", "public org.bson.json.JsonWriterSettings build()"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.indent(boolean)", "public org.bson.json.JsonWriterSettings$Builder indent(boolean)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.newLineCharacters(java.lang.String)", "public org.bson.json.JsonWriterSettings$Builder newLineCharacters(java.lang.String)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.indentCharacters(java.lang.String)", "public org.bson.json.JsonWriterSettings$Builder indentCharacters(java.lang.String)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.outputMode(org.bson.json.JsonMode)", "public org.bson.json.JsonWriterSettings$Builder outputMode(org.bson.json.JsonMode)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.maxLength(int)", "public org.bson.json.JsonWriterSettings$Builder maxLength(int)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.nullConverter(org.bson.json.Converter<org.bson.BsonNull>)", "public org.bson.json.JsonWriterSettings$Builder nullConverter(org.bson.json.Converter<org.bson.BsonNull>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.stringConverter(org.bson.json.Converter<java.lang.String>)", "public org.bson.json.JsonWriterSettings$Builder stringConverter(org.bson.json.Converter<java.lang.String>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.dateTimeConverter(org.bson.json.Converter<java.lang.Long>)", "public org.bson.json.JsonWriterSettings$Builder dateTimeConverter(org.bson.json.Converter<java.lang.Long>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.binaryConverter(org.bson.json.Converter<org.bson.BsonBinary>)", "public org.bson.json.JsonWriterSettings$Builder binaryConverter(org.bson.json.Converter<org.bson.BsonBinary>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.booleanConverter(org.bson.json.Converter<java.lang.Boolean>)", "public org.bson.json.JsonWriterSettings$Builder booleanConverter(org.bson.json.Converter<java.lang.Boolean>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.doubleConverter(org.bson.json.Converter<java.lang.Double>)", "public org.bson.json.JsonWriterSettings$Builder doubleConverter(org.bson.json.Converter<java.lang.Double>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.int32Converter(org.bson.json.Converter<java.lang.Integer>)", "public org.bson.json.JsonWriterSettings$Builder int32Converter(org.bson.json.Converter<java.lang.Integer>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.int64Converter(org.bson.json.Converter<java.lang.Long>)", "public org.bson.json.JsonWriterSettings$Builder int64Converter(org.bson.json.Converter<java.lang.Long>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.decimal128Converter(org.bson.json.Converter<org.bson.types.Decimal128>)", "public org.bson.json.JsonWriterSettings$Builder decimal128Converter(org.bson.json.Converter<org.bson.types.Decimal128>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.objectIdConverter(org.bson.json.Converter<org.bson.types.ObjectId>)", "public org.bson.json.JsonWriterSettings$Builder objectIdConverter(org.bson.json.Converter<org.bson.types.ObjectId>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.timestampConverter(org.bson.json.Converter<org.bson.BsonTimestamp>)", "public org.bson.json.JsonWriterSettings$Builder timestampConverter(org.bson.json.Converter<org.bson.BsonTimestamp>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.regularExpressionConverter(org.bson.json.Converter<org.bson.BsonRegularExpression>)", "public org.bson.json.JsonWriterSettings$Builder regularExpressionConverter(org.bson.json.Converter<org.bson.BsonRegularExpression>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.symbolConverter(org.bson.json.Converter<java.lang.String>)", "public org.bson.json.JsonWriterSettings$Builder symbolConverter(org.bson.json.Converter<java.lang.String>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.minKeyConverter(org.bson.json.Converter<org.bson.BsonMinKey>)", "public org.bson.json.JsonWriterSettings$Builder minKeyConverter(org.bson.json.Converter<org.bson.BsonMinKey>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.maxKeyConverter(org.bson.json.Converter<org.bson.BsonMaxKey>)", "public org.bson.json.JsonWriterSettings$Builder maxKeyConverter(org.bson.json.Converter<org.bson.BsonMaxKey>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.undefinedConverter(org.bson.json.Converter<org.bson.BsonUndefined>)", "public org.bson.json.JsonWriterSettings$Builder undefinedConverter(org.bson.json.Converter<org.bson.BsonUndefined>)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings$Builder.javaScriptConverter(org.bson.json.Converter<java.lang.String>)", "public org.bson.json.JsonWriterSettings$Builder javaScriptConverter(org.bson.json.Converter<java.lang.String>)"], ["void", "org.bson.json.ShellMaxKeyConverter.convert(org.bson.BsonMaxKey, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonMaxKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellMaxKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["int", "org.bson.json.JsonStreamBuffer.getPosition()", "public int getPosition()"], ["int", "org.bson.json.JsonStreamBuffer.read()", "public int read()"], ["void", "org.bson.json.JsonStreamBuffer.unread(int)", "public void unread(int)"], ["int", "org.bson.json.JsonStreamBuffer.mark()", "public int mark()"], ["void", "org.bson.json.JsonStreamBuffer.reset(int)", "public void reset(int)"], ["void", "org.bson.json.JsonStreamBuffer.discard(int)", "public void discard(int)"], ["void", "org.bson.json.ExtendedJsonObjectIdConverter.convert(org.bson.types.ObjectId, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.types.ObjectId, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonObjectIdConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriter$State[]", "org.bson.json.StrictCharacterStreamJsonWriter$State.values()", "public static org.bson.json.StrictCharacterStreamJsonWriter$State[] values()"], ["org.bson.json.StrictCharacterStreamJsonWriter$State", "org.bson.json.StrictCharacterStreamJsonWriter$State.valueOf(java.lang.String)", "public static org.bson.json.StrictCharacterStreamJsonWriter$State valueOf(java.lang.String)"], ["java.time.Instant", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter$1.queryFrom(java.time.temporal.TemporalAccessor)", "public java.time.Instant queryFrom(java.time.temporal.TemporalAccessor)"], ["java.lang.Object", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter$1.queryFrom(java.time.temporal.TemporalAccessor)", "public java.lang.Object queryFrom(java.time.temporal.TemporalAccessor)"], ["void", "org.bson.json.ExtendedJsonBinaryConverter.convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonBinaryConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMinKeyConverter.convert(org.bson.BsonMinKey, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonMinKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMinKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["long", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter.parse(java.lang.String)", "public long parse(java.lang.String)"], ["java.lang.String", "org.bson.json.DateTimeFormatter$Java8DateTimeFormatter.format(long)", "public java.lang.String format(long)"], ["org.bson.json.JsonScanner$NumberState[]", "org.bson.json.JsonScanner$NumberState.values()", "public static org.bson.json.JsonScanner$NumberState[] values()"], ["org.bson.json.JsonScanner$NumberState", "org.bson.json.JsonScanner$NumberState.valueOf(java.lang.String)", "public static org.bson.json.JsonScanner$NumberState valueOf(java.lang.String)"], ["void", "org.bson.json.JsonNullConverter.convert(org.bson.BsonNull, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonNull, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonNullConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMaxKeyConverter.convert(org.bson.BsonMaxKey, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonMaxKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonMaxKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonReader", "org.bson.json.JsonReader(java.lang.String)", "public org.bson.json.JsonReader(java.lang.String)"], ["org.bson.json.JsonReader", "org.bson.json.JsonReader(java.io.Reader)", "public org.bson.json.JsonReader(java.io.Reader)"], ["org.bson.BsonType", "org.bson.json.JsonReader.readBsonType()", "public org.bson.BsonType readBsonType()"], ["org.bson.types.Decimal128", "org.bson.json.JsonReader.doReadDecimal128()", "public org.bson.types.Decimal128 doReadDecimal128()"], ["void", "org.bson.json.JsonReader.mark()", "public void mark()"], ["org.bson.BsonReaderMark", "org.bson.json.JsonReader.getMark()", "public org.bson.BsonReaderMark getMark()"], ["void", "org.bson.json.JsonReader.reset()", "public void reset()"], ["void", "org.bson.json.JsonInt32Converter.convert(java.lang.Integer, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Integer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonInt32Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt32Converter.convert(java.lang.Integer, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Integer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt32Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["java.lang.Object", "org.bson.json.JsonToken.getValue()", "public java.lang.Object getValue()"], ["<T> T", "org.bson.json.JsonToken.getValue(java.lang.Class<T>)", "public <T> T getValue(java.lang.Class<T>)"], ["org.bson.json.JsonTokenType", "org.bson.json.JsonToken.getType()", "public org.bson.json.JsonTokenType getType()"], ["org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType[]", "org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType.values()", "public static org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType[] values()"], ["org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType", "org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType.valueOf(java.lang.String)", "public static org.bson.json.StrictCharacterStreamJsonWriter$JsonContextType valueOf(java.lang.String)"], ["void", "org.bson.json.LegacyExtendedJsonDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["long", "org.bson.json.DateTimeFormatter$JaxbDateTimeFormatter.parse(java.lang.String)", "public long parse(java.lang.String)"], ["java.lang.String", "org.bson.json.DateTimeFormatter$JaxbDateTimeFormatter.format(long)", "public java.lang.String format(long)"], ["void", "org.bson.json.ExtendedJsonUndefinedConverter.convert(org.bson.BsonUndefined, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonUndefined, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonUndefinedConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellObjectIdConverter.convert(org.bson.types.ObjectId, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.types.ObjectId, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellObjectIdConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonWriter", "org.bson.json.JsonWriter(java.io.Writer)", "public org.bson.json.JsonWriter(java.io.Writer)"], ["org.bson.json.JsonWriter", "org.bson.json.JsonWriter(java.io.Writer, org.bson.json.JsonWriterSettings)", "public org.bson.json.JsonWriter(java.io.Writer, org.bson.json.JsonWriterSettings)"], ["java.io.Writer", "org.bson.json.JsonWriter.getWriter()", "public java.io.Writer getWriter()"], ["void", "org.bson.json.JsonWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.json.JsonWriter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.json.JsonWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.json.JsonWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.json.JsonWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.json.JsonWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.json.JsonWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.json.JsonWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "org.bson.json.JsonWriter.flush()", "public void flush()"], ["boolean", "org.bson.json.JsonWriter.isTruncated()", "public boolean isTruncated()"], ["void", "org.bson.json.JsonWriter$2.convert(org.bson.BsonDbPointer, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonDbPointer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$2.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonJavaScriptConverter.convert(java.lang.String, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.String, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonJavaScriptConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.build()", "public org.bson.json.StrictCharacterStreamJsonWriterSettings build()"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.indent(boolean)", "public org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder indent(boolean)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.newLineCharacters(java.lang.String)", "public org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder newLineCharacters(java.lang.String)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.indentCharacters(java.lang.String)", "public org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder indentCharacters(java.lang.String)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder.maxLength(int)", "public org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder maxLength(int)"], ["void", "org.bson.json.ExtendedJsonDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType, java.lang.String)", "public org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType, java.lang.String)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType)", "public org.bson.json.JsonWriter$Context(org.bson.json.JsonWriter, org.bson.json.JsonWriter$Context, org.bson.BsonContextType)"], ["org.bson.json.JsonWriter$Context", "org.bson.json.JsonWriter$Context.getParentContext()", "public org.bson.json.JsonWriter$Context getParentContext()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.json.JsonWriter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["void", "org.bson.json.ShellRegularExpressionConverter.convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellRegularExpressionConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDoubleConverter.convert(java.lang.Double, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Double, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDoubleConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDecimal128Converter.convert(org.bson.types.Decimal128, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.types.Decimal128, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellDecimal128Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonSymbolConverter.convert(java.lang.String, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.String, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonSymbolConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonTokenType[]", "org.bson.json.JsonTokenType.values()", "public static org.bson.json.JsonTokenType[] values()"], ["org.bson.json.JsonTokenType", "org.bson.json.JsonTokenType.valueOf(java.lang.String)", "public static org.bson.json.JsonTokenType valueOf(java.lang.String)"], ["void", "org.bson.json.ShellMinKeyConverter.convert(org.bson.BsonMinKey, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonMinKey, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellMinKeyConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder", "org.bson.json.StrictCharacterStreamJsonWriterSettings.builder()", "public static org.bson.json.StrictCharacterStreamJsonWriterSettings$Builder builder()"], ["boolean", "org.bson.json.StrictCharacterStreamJsonWriterSettings.isIndent()", "public boolean isIndent()"], ["java.lang.String", "org.bson.json.StrictCharacterStreamJsonWriterSettings.getNewLineCharacters()", "public java.lang.String getNewLineCharacters()"], ["java.lang.String", "org.bson.json.StrictCharacterStreamJsonWriterSettings.getIndentCharacters()", "public java.lang.String getIndentCharacters()"], ["int", "org.bson.json.StrictCharacterStreamJsonWriterSettings.getMaxLength()", "public int getMaxLength()"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException()", "public org.bson.json.JsonParseException()"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.String)", "public org.bson.json.JsonParseException(java.lang.String)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.String, java.lang.Object...)", "public org.bson.json.JsonParseException(java.lang.String, java.lang.Object...)"], ["org.bson.json.JsonParseException", "org.bson.json.JsonParseException(java.lang.Throwable)", "public org.bson.json.JsonParseException(java.lang.Throwable)"], ["void", "org.bson.json.JsonDoubleConverter.convert(java.lang.Double, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Double, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonDoubleConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.JsonWriterSettings$Builder", "org.bson.json.JsonWriterSettings.builder()", "public static org.bson.json.JsonWriterSettings$Builder builder()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings()", "public org.bson.json.JsonWriterSettings()"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(boolean)", "public org.bson.json.JsonWriterSettings(boolean)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, boolean)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, boolean)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String)"], ["org.bson.json.JsonWriterSettings", "org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String, java.lang.String)", "public org.bson.json.JsonWriterSettings(org.bson.json.JsonMode, java.lang.String, java.lang.String)"], ["boolean", "org.bson.json.JsonWriterSettings.isIndent()", "public boolean isIndent()"], ["java.lang.String", "org.bson.json.JsonWriterSettings.getNewLineCharacters()", "public java.lang.String getNewLineCharacters()"], ["java.lang.String", "org.bson.json.JsonWriterSettings.getIndentCharacters()", "public java.lang.String getIndentCharacters()"], ["org.bson.json.JsonMode", "org.bson.json.JsonWriterSettings.getOutputMode()", "public org.bson.json.JsonMode getOutputMode()"], ["int", "org.bson.json.JsonWriterSettings.getMaxLength()", "public int getMaxLength()"], ["org.bson.json.Converter<org.bson.BsonNull>", "org.bson.json.JsonWriterSettings.getNullConverter()", "public org.bson.json.Converter<org.bson.BsonNull> getNullConverter()"], ["org.bson.json.Converter<java.lang.String>", "org.bson.json.JsonWriterSettings.getStringConverter()", "public org.bson.json.Converter<java.lang.String> getStringConverter()"], ["org.bson.json.Converter<org.bson.BsonBinary>", "org.bson.json.JsonWriterSettings.getBinaryConverter()", "public org.bson.json.Converter<org.bson.BsonBinary> getBinaryConverter()"], ["org.bson.json.Converter<java.lang.Boolean>", "org.bson.json.JsonWriterSettings.getBooleanConverter()", "public org.bson.json.Converter<java.lang.Boolean> getBooleanConverter()"], ["org.bson.json.Converter<java.lang.Long>", "org.bson.json.JsonWriterSettings.getDateTimeConverter()", "public org.bson.json.Converter<java.lang.Long> getDateTimeConverter()"], ["org.bson.json.Converter<java.lang.Double>", "org.bson.json.JsonWriterSettings.getDoubleConverter()", "public org.bson.json.Converter<java.lang.Double> getDoubleConverter()"], ["org.bson.json.Converter<java.lang.Integer>", "org.bson.json.JsonWriterSettings.getInt32Converter()", "public org.bson.json.Converter<java.lang.Integer> getInt32Converter()"], ["org.bson.json.Converter<java.lang.Long>", "org.bson.json.JsonWriterSettings.getInt64Converter()", "public org.bson.json.Converter<java.lang.Long> getInt64Converter()"], ["org.bson.json.Converter<org.bson.types.Decimal128>", "org.bson.json.JsonWriterSettings.getDecimal128Converter()", "public org.bson.json.Converter<org.bson.types.Decimal128> getDecimal128Converter()"], ["org.bson.json.Converter<org.bson.types.ObjectId>", "org.bson.json.JsonWriterSettings.getObjectIdConverter()", "public org.bson.json.Converter<org.bson.types.ObjectId> getObjectIdConverter()"], ["org.bson.json.Converter<org.bson.BsonRegularExpression>", "org.bson.json.JsonWriterSettings.getRegularExpressionConverter()", "public org.bson.json.Converter<org.bson.BsonRegularExpression> getRegularExpressionConverter()"], ["org.bson.json.Converter<org.bson.BsonTimestamp>", "org.bson.json.JsonWriterSettings.getTimestampConverter()", "public org.bson.json.Converter<org.bson.BsonTimestamp> getTimestampConverter()"], ["org.bson.json.Converter<java.lang.String>", "org.bson.json.JsonWriterSettings.getSymbolConverter()", "public org.bson.json.Converter<java.lang.String> getSymbolConverter()"], ["org.bson.json.Converter<org.bson.BsonMinKey>", "org.bson.json.JsonWriterSettings.getMinKeyConverter()", "public org.bson.json.Converter<org.bson.BsonMinKey> getMinKeyConverter()"], ["org.bson.json.Converter<org.bson.BsonMaxKey>", "org.bson.json.JsonWriterSettings.getMaxKeyConverter()", "public org.bson.json.Converter<org.bson.BsonMaxKey> getMaxKeyConverter()"], ["org.bson.json.Converter<org.bson.BsonUndefined>", "org.bson.json.JsonWriterSettings.getUndefinedConverter()", "public org.bson.json.Converter<org.bson.BsonUndefined> getUndefinedConverter()"], ["org.bson.json.Converter<java.lang.String>", "org.bson.json.JsonWriterSettings.getJavaScriptConverter()", "public org.bson.json.Converter<java.lang.String> getJavaScriptConverter()"], ["void", "org.bson.json.ShellBinaryConverter.convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellBinaryConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonBooleanConverter.convert(java.lang.Boolean, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Boolean, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonBooleanConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDoubleConverter.convert(java.lang.Double, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Double, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDoubleConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDateTimeConverter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonDateTimeConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonRegularExpressionConverter.convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonRegularExpressionConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellTimestampConverter.convert(org.bson.BsonTimestamp, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonTimestamp, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellTimestampConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonScanner.reset(int)", "public void reset(int)"], ["int", "org.bson.json.JsonScanner.mark()", "public int mark()"], ["void", "org.bson.json.JsonScanner.discard(int)", "public void discard(int)"], ["org.bson.json.JsonToken", "org.bson.json.JsonScanner.nextToken()", "public org.bson.json.JsonToken nextToken()"], ["org.bson.json.JsonMode[]", "org.bson.json.JsonMode.values()", "public static org.bson.json.JsonMode[] values()"], ["org.bson.json.JsonMode", "org.bson.json.JsonMode.valueOf(java.lang.String)", "public static org.bson.json.JsonMode valueOf(java.lang.String)"], ["void", "org.bson.json.ShellUndefinedConverter.convert(org.bson.BsonUndefined, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonUndefined, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellUndefinedConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$1.convert(org.bson.BsonDbPointer, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonDbPointer, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonWriter$1.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDecimal128Converter.convert(org.bson.types.Decimal128, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.types.Decimal128, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonDecimal128Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonTimestampConverter.convert(org.bson.BsonTimestamp, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonTimestamp, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonTimestampConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellInt64Converter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ShellInt64Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt64Converter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonInt64Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.json.StrictCharacterStreamJsonWriter", "org.bson.json.StrictCharacterStreamJsonWriter(java.io.Writer, org.bson.json.StrictCharacterStreamJsonWriterSettings)", "public org.bson.json.StrictCharacterStreamJsonWriter(java.io.Writer, org.bson.json.StrictCharacterStreamJsonWriterSettings)"], ["int", "org.bson.json.StrictCharacterStreamJsonWriter.getCurrentLength()", "public int getCurrentLength()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartObject(java.lang.String)", "public void writeStartObject(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartArray(java.lang.String)", "public void writeStartArray(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeBoolean(java.lang.String, boolean)", "public void writeBoolean(java.lang.String, boolean)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNumber(java.lang.String, java.lang.String)", "public void writeNumber(java.lang.String, java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeString(java.lang.String, java.lang.String)", "public void writeString(java.lang.String, java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeRaw(java.lang.String, java.lang.String)", "public void writeRaw(java.lang.String, java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNull(java.lang.String)", "public void writeNull(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeName(java.lang.String)", "public void writeName(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNumber(java.lang.String)", "public void writeNumber(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeRaw(java.lang.String)", "public void writeRaw(java.lang.String)"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeNull()", "public void writeNull()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartObject()", "public void writeStartObject()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeStartArray()", "public void writeStartArray()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeEndObject()", "public void writeEndObject()"], ["void", "org.bson.json.StrictCharacterStreamJsonWriter.writeEndArray()", "public void writeEndArray()"], ["boolean", "org.bson.json.StrictCharacterStreamJsonWriter.isTruncated()", "public boolean isTruncated()"], ["org.bson.json.JsonScanner$RegularExpressionState[]", "org.bson.json.JsonScanner$RegularExpressionState.values()", "public static org.bson.json.JsonScanner$RegularExpressionState[] values()"], ["org.bson.json.JsonScanner$RegularExpressionState", "org.bson.json.JsonScanner$RegularExpressionState.valueOf(java.lang.String)", "public static org.bson.json.JsonScanner$RegularExpressionState valueOf(java.lang.String)"], ["void", "org.bson.json.LegacyExtendedJsonBinaryConverter.convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonBinary, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.LegacyExtendedJsonBinaryConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["int", "org.bson.json.JsonStringBuffer.getPosition()", "public int getPosition()"], ["int", "org.bson.json.JsonStringBuffer.read()", "public int read()"], ["void", "org.bson.json.JsonStringBuffer.unread(int)", "public void unread(int)"], ["int", "org.bson.json.JsonStringBuffer.mark()", "public int mark()"], ["void", "org.bson.json.JsonStringBuffer.reset(int)", "public void reset(int)"], ["void", "org.bson.json.JsonStringBuffer.discard(int)", "public void discard(int)"], ["void", "org.bson.json.ExtendedJsonRegularExpressionConverter.convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)", "public void convert(org.bson.BsonRegularExpression, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.ExtendedJsonRegularExpressionConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonStringConverter.convert(java.lang.String, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.String, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.JsonStringConverter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonInt64Converter.convert(java.lang.Long, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Long, org.bson.json.StrictJsonWriter)"], ["void", "org.bson.json.RelaxedExtendedJsonInt64Converter.convert(java.lang.Object, org.bson.json.StrictJsonWriter)", "public void convert(java.lang.Object, org.bson.json.StrictJsonWriter)"], ["org.bson.BSONCallbackAdapter$Context", "org.bson.BSONCallbackAdapter$Context.getParentContext()", "public org.bson.BSONCallbackAdapter$Context getParentContext()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BSONCallbackAdapter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["java.lang.String", "org.bson.diagnostics.JULLogger.getName()", "public java.lang.String getName()"], ["boolean", "org.bson.diagnostics.JULLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "org.bson.diagnostics.JULLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.bson.diagnostics.JULLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "org.bson.diagnostics.JULLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "org.bson.diagnostics.JULLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.JULLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "org.bson.diagnostics.JULLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "org.bson.diagnostics.JULLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["void", "org.bson.diagnostics.JULLogger.log(java.util.logging.Level, java.lang.String, java.lang.Throwable)", "public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.bson.diagnostics.SLF4JLogger.getName()", "public java.lang.String getName()"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isTraceEnabled()", "public boolean isTraceEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.trace(java.lang.String, java.lang.Throwable)", "public void trace(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isDebugEnabled()", "public boolean isDebugEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.debug(java.lang.String)", "public void debug(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.debug(java.lang.String, java.lang.Throwable)", "public void debug(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isInfoEnabled()", "public boolean isInfoEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.info(java.lang.String, java.lang.Throwable)", "public void info(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isWarnEnabled()", "public boolean isWarnEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.warn(java.lang.String)", "public void warn(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.warn(java.lang.String, java.lang.Throwable)", "public void warn(java.lang.String, java.lang.Throwable)"], ["boolean", "org.bson.diagnostics.SLF4JLogger.isErrorEnabled()", "public boolean isErrorEnabled()"], ["void", "org.bson.diagnostics.SLF4JLogger.error(java.lang.String)", "public void error(java.lang.String)"], ["void", "org.bson.diagnostics.SLF4JLogger.error(java.lang.String, java.lang.Throwable)", "public void error(java.lang.String, java.lang.Throwable)"], ["org.bson.diagnostics.Logger", "org.bson.diagnostics.Loggers.getLogger(java.lang.String)", "public static org.bson.diagnostics.Logger getLogger(java.lang.String)"], ["org.bson.BsonDecimal128", "org.bson.BsonDecimal128(org.bson.types.Decimal128)", "public org.bson.BsonDecimal128(org.bson.types.Decimal128)"], ["org.bson.BsonType", "org.bson.BsonDecimal128.getBsonType()", "public org.bson.BsonType getBsonType()"], ["org.bson.types.Decimal128", "org.bson.BsonDecimal128.getValue()", "public org.bson.types.Decimal128 getValue()"], ["boolean", "org.bson.BsonDecimal128.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDecimal128.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDecimal128.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonDecimal128.intValue()", "public int intValue()"], ["long", "org.bson.BsonDecimal128.longValue()", "public long longValue()"], ["double", "org.bson.BsonDecimal128.doubleValue()", "public double doubleValue()"], ["org.bson.types.Decimal128", "org.bson.BsonDecimal128.decimal128Value()", "public org.bson.types.Decimal128 decimal128Value()"], ["org.bson.BsonSerializationException", "org.bson.BsonSerializationException(java.lang.String)", "public org.bson.BsonSerializationException(java.lang.String)"], ["org.bson.BsonInvalidOperationException", "org.bson.BsonInvalidOperationException(java.lang.String)", "public org.bson.BsonInvalidOperationException(java.lang.String)"], ["org.bson.BsonInvalidOperationException", "org.bson.BsonInvalidOperationException(java.lang.String, java.lang.Throwable)", "public org.bson.BsonInvalidOperationException(java.lang.String, java.lang.Throwable)"], ["org.bson.BsonJavaScript", "org.bson.BsonJavaScript(java.lang.String)", "public org.bson.BsonJavaScript(java.lang.String)"], ["org.bson.BsonType", "org.bson.BsonJavaScript.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonJavaScript.getCode()", "public java.lang.String getCode()"], ["boolean", "org.bson.BsonJavaScript.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonJavaScript.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonJavaScript.toString()", "public java.lang.String toString()"], ["org.bson.BsonDateTime", "org.bson.BsonDateTime(long)", "public org.bson.BsonDateTime(long)"], ["int", "org.bson.BsonDateTime.compareTo(org.bson.BsonDateTime)", "public int compareTo(org.bson.BsonDateTime)"], ["org.bson.BsonType", "org.bson.BsonDateTime.getBsonType()", "public org.bson.BsonType getBsonType()"], ["long", "org.bson.BsonDateTime.getValue()", "public long getValue()"], ["boolean", "org.bson.BsonDateTime.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDateTime.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDateTime.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonDateTime.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.Document", "org.bson.Document()", "public org.bson.Document()"], ["org.bson.Document", "org.bson.Document(java.lang.String, java.lang.Object)", "public org.bson.Document(java.lang.String, java.lang.Object)"], ["org.bson.Document", "org.bson.Document(java.util.Map<java.lang.String, java.lang.Object>)", "public org.bson.Document(java.util.Map<java.lang.String, java.lang.Object>)"], ["org.bson.Document", "org.bson.Document.parse(java.lang.String)", "public static org.bson.Document parse(java.lang.String)"], ["org.bson.Document", "org.bson.Document.parse(java.lang.String, org.bson.codecs.Decoder<org.bson.Document>)", "public static org.bson.Document parse(java.lang.String, org.bson.codecs.Decoder<org.bson.Document>)"], ["<C> org.bson.BsonDocument", "org.bson.Document.toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)", "public <C> org.bson.BsonDocument toBsonDocument(java.lang.Class<C>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.Document", "org.bson.Document.append(java.lang.String, java.lang.Object)", "public org.bson.Document append(java.lang.String, java.lang.Object)"], ["<T> T", "org.bson.Document.get(java.lang.Object, java.lang.Class<T>)", "public <T> T get(java.lang.Object, java.lang.Class<T>)"], ["<T> T", "org.bson.Document.get(java.lang.Object, T)", "public <T> T get(java.lang.Object, T)"], ["<T> T", "org.bson.Document.getEmbedded(java.util.List<?>, java.lang.Class<T>)", "public <T> T getEmbedded(java.util.List<?>, java.lang.Class<T>)"], ["<T> T", "org.bson.Document.getEmbedded(java.util.List<?>, T)", "public <T> T getEmbedded(java.util.List<?>, T)"], ["java.lang.Integer", "org.bson.Document.getInteger(java.lang.Object)", "public java.lang.Integer getInteger(java.lang.Object)"], ["int", "org.bson.Document.getInteger(java.lang.Object, int)", "public int getInteger(java.lang.Object, int)"], ["java.lang.Long", "org.bson.Document.getLong(java.lang.Object)", "public java.lang.Long getLong(java.lang.Object)"], ["java.lang.Double", "org.bson.Document.getDouble(java.lang.Object)", "public java.lang.Double getDouble(java.lang.Object)"], ["java.lang.String", "org.bson.Document.getString(java.lang.Object)", "public java.lang.String getString(java.lang.Object)"], ["java.lang.Boolean", "org.bson.Document.getBoolean(java.lang.Object)", "public java.lang.Boolean getBoolean(java.lang.Object)"], ["boolean", "org.bson.Document.getBoolean(java.lang.Object, boolean)", "public boolean getBoolean(java.lang.Object, boolean)"], ["org.bson.types.ObjectId", "org.bson.Document.getObjectId(java.lang.Object)", "public org.bson.types.ObjectId getObjectId(java.lang.Object)"], ["java.util.Date", "org.bson.Document.getDate(java.lang.Object)", "public java.util.Date getDate(java.lang.Object)"], ["<T> java.util.List<T>", "org.bson.Document.getList(java.lang.Object, java.lang.Class<T>)", "public <T> java.util.List<T> getList(java.lang.Object, java.lang.Class<T>)"], ["<T> java.util.List<T>", "org.bson.Document.getList(java.lang.Object, java.lang.Class<T>, java.util.List<T>)", "public <T> java.util.List<T> getList(java.lang.Object, java.lang.Class<T>, java.util.List<T>)"], ["java.lang.String", "org.bson.Document.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "org.bson.Document.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["java.lang.String", "org.bson.Document.toJson(org.bson.codecs.Encoder<org.bson.Document>)", "public java.lang.String toJson(org.bson.codecs.Encoder<org.bson.Document>)"], ["java.lang.String", "org.bson.Document.toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<org.bson.Document>)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings, org.bson.codecs.Encoder<org.bson.Document>)"], ["int", "org.bson.Document.size()", "public int size()"], ["boolean", "org.bson.Document.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.Document.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["boolean", "org.bson.Document.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["java.lang.Object", "org.bson.Document.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.lang.Object", "org.bson.Document.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.bson.Document.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["void", "org.bson.Document.putAll(java.util.Map<? extends java.lang.String, ?>)", "public void putAll(java.util.Map<? extends java.lang.String, ?>)"], ["void", "org.bson.Document.clear()", "public void clear()"], ["java.util.Set<java.lang.String>", "org.bson.Document.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Collection<java.lang.Object>", "org.bson.Document.values()", "public java.util.Collection<java.lang.Object> values()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.Document.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, java.lang.Object>> entrySet()"], ["boolean", "org.bson.Document.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.Document.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.Document.toString()", "public java.lang.String toString()"], ["java.lang.Object", "org.bson.Document.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["org.bson.BsonDbPointer", "org.bson.BsonDbPointer(java.lang.String, org.bson.types.ObjectId)", "public org.bson.BsonDbPointer(java.lang.String, org.bson.types.ObjectId)"], ["org.bson.BsonType", "org.bson.BsonDbPointer.getBsonType()", "public org.bson.BsonType getBsonType()"], ["java.lang.String", "org.bson.BsonDbPointer.getNamespace()", "public java.lang.String getNamespace()"], ["org.bson.types.ObjectId", "org.bson.BsonDbPointer.getId()", "public org.bson.types.ObjectId getId()"], ["boolean", "org.bson.BsonDbPointer.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonDbPointer.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonDbPointer.toString()", "public java.lang.String toString()"], ["<N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V>", "org.bson.util.CopyOnWriteMap$Hash.copy(N)", "public <N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V> copy(N)"], ["<K, V> java.util.Map<K, V>", "org.bson.util.ComputingMap.create(org.bson.util.Function<K, V>)", "public static <K, V> java.util.Map<K, V> create(org.bson.util.Function<K, V>)"], ["V", "org.bson.util.ComputingMap.get(java.lang.Object)", "public V get(java.lang.Object)"], ["V", "org.bson.util.ComputingMap.apply(K)", "public V apply(K)"], ["V", "org.bson.util.ComputingMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["boolean", "org.bson.util.ComputingMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.bson.util.ComputingMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.bson.util.ComputingMap.replace(K, V)", "public V replace(K, V)"], ["int", "org.bson.util.ComputingMap.size()", "public int size()"], ["boolean", "org.bson.util.ComputingMap.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.util.ComputingMap.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.util.ComputingMap.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["V", "org.bson.util.ComputingMap.put(K, V)", "public V put(K, V)"], ["V", "org.bson.util.ComputingMap.remove(java.lang.Object)", "public V remove(java.lang.Object)"], ["void", "org.bson.util.ComputingMap.putAll(java.util.Map<? extends K, ? extends V>)", "public void putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.bson.util.ComputingMap.clear()", "public void clear()"], ["java.util.Set<K>", "org.bson.util.ComputingMap.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.bson.util.ComputingMap.values()", "public java.util.Collection<V> values()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.ComputingMap.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["boolean", "org.bson.util.ComputingMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.util.ComputingMap.hashCode()", "public int hashCode()"], ["java.util.Set<K>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Collection<V>", "org.bson.util.AbstractCopyOnWriteMap$Immutable.values()", "public java.util.Collection<V> values()"], ["<T> java.util.List<java.lang.Class<?>>", "org.bson.util.ClassAncestry.getAncestry(java.lang.Class<T>)", "public static <T> java.util.List<java.lang.Class<?>> getAncestry(java.lang.Class<T>)"], ["T", "org.bson.util.ClassMap$ComputeFunction.apply(java.lang.Class<?>)", "public T apply(java.lang.Class<?>)"], ["java.lang.Object", "org.bson.util.ClassMap$ComputeFunction.apply(java.lang.Object)", "public java.lang.Object apply(java.lang.Object)"], ["<N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V>", "org.bson.util.CopyOnWriteMap$Linked.copy(N)", "public <N extends java.util.Map<? extends K, ? extends V>> java.util.Map<K, V> copy(N)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.contains(java.lang.Object)", "public final boolean contains(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.containsAll(java.util.Collection<?>)", "public final boolean containsAll(java.util.Collection<?>)"], ["java.util.Iterator<E>", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.iterator()", "public final java.util.Iterator<E> iterator()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.isEmpty()", "public final boolean isEmpty()"], ["int", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.size()", "public final int size()"], ["java.lang.Object[]", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toArray()", "public final java.lang.Object[] toArray()"], ["<T> T[]", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toArray(T[])", "public final <T> T[] toArray(T[])"], ["int", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.hashCode()", "public int hashCode()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.lang.String", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.add(E)", "public final boolean add(E)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$CollectionView.addAll(java.util.Collection<? extends E>)", "public final boolean addAll(java.util.Collection<? extends E>)"], ["void", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.clear()", "public void clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$EntrySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["java.util.Set<K>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.keySet()", "public java.util.Set<K> keySet()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.entrySet()", "public java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Collection<V>", "org.bson.util.AbstractCopyOnWriteMap$Mutable.values()", "public java.util.Collection<V> values()"], ["void", "org.bson.util.AbstractCopyOnWriteMap.clear()", "public final void clear()"], ["V", "org.bson.util.AbstractCopyOnWriteMap.remove(java.lang.Object)", "public final V remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.remove(java.lang.Object, java.lang.Object)", "public boolean remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.replace(K, V, V)", "public boolean replace(K, V, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.replace(K, V)", "public V replace(K, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.put(K, V)", "public final V put(K, V)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.putIfAbsent(K, V)", "public V putIfAbsent(K, V)"], ["void", "org.bson.util.AbstractCopyOnWriteMap.putAll(java.util.Map<? extends K, ? extends V>)", "public final void putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.bson.util.AbstractCopyOnWriteMap.entrySet()", "public final java.util.Set<java.util.Map$Entry<K, V>> entrySet()"], ["java.util.Set<K>", "org.bson.util.AbstractCopyOnWriteMap.keySet()", "public final java.util.Set<K> keySet()"], ["java.util.Collection<V>", "org.bson.util.AbstractCopyOnWriteMap.values()", "public final java.util.Collection<V> values()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.containsKey(java.lang.Object)", "public final boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.containsValue(java.lang.Object)", "public final boolean containsValue(java.lang.Object)"], ["V", "org.bson.util.AbstractCopyOnWriteMap.get(java.lang.Object)", "public final V get(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.isEmpty()", "public final boolean isEmpty()"], ["int", "org.bson.util.AbstractCopyOnWriteMap.size()", "public final int size()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap.equals(java.lang.Object)", "public final boolean equals(java.lang.Object)"], ["int", "org.bson.util.AbstractCopyOnWriteMap.hashCode()", "public final int hashCode()"], ["java.lang.String", "org.bson.util.AbstractCopyOnWriteMap.toString()", "public java.lang.String toString()"], ["org.bson.util.AbstractCopyOnWriteMap$View$Type[]", "org.bson.util.AbstractCopyOnWriteMap$View$Type.values()", "public static org.bson.util.AbstractCopyOnWriteMap$View$Type[] values()"], ["org.bson.util.AbstractCopyOnWriteMap$View$Type", "org.bson.util.AbstractCopyOnWriteMap$View$Type.valueOf(java.lang.String)", "public static org.bson.util.AbstractCopyOnWriteMap$View$Type valueOf(java.lang.String)"], ["<K, V> org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap.builder()", "public static <K, V> org.bson.util.CopyOnWriteMap$Builder<K, V> builder()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newHashMap()", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newHashMap()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newHashMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newLinkedMap()", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newLinkedMap()"], ["<K, V> org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap.newLinkedMap(java.util.Map<? extends K, ? extends V>)", "public static <K, V> org.bson.util.CopyOnWriteMap<K, V> newLinkedMap(java.util.Map<? extends K, ? extends V>)"], ["void", "org.bson.util.AbstractCopyOnWriteMap$Values.clear()", "public void clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$Values.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.hasNext()", "public boolean hasNext()"], ["T", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.next()", "public T next()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$UnmodifiableIterator.remove()", "public void remove()"], ["void", "org.bson.util.AbstractCopyOnWriteMap$KeySet.clear()", "public void clear()"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.util.AbstractCopyOnWriteMap$KeySet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["org.bson.util.ClassMap", "org.bson.util.ClassMap()", "public org.bson.util.ClassMap()"], ["<T> java.util.List<java.lang.Class<?>>", "org.bson.util.ClassMap.getAncestry(java.lang.Class<T>)", "public static <T> java.util.List<java.lang.Class<?>> getAncestry(java.lang.Class<T>)"], ["T", "org.bson.util.ClassMap.get(java.lang.Object)", "public T get(java.lang.Object)"], ["T", "org.bson.util.ClassMap.put(java.lang.Class<?>, T)", "public T put(java.lang.Class<?>, T)"], ["T", "org.bson.util.ClassMap.remove(java.lang.Object)", "public T remove(java.lang.Object)"], ["void", "org.bson.util.ClassMap.clear()", "public void clear()"], ["int", "org.bson.util.ClassMap.size()", "public int size()"], ["boolean", "org.bson.util.ClassMap.isEmpty()", "public boolean isEmpty()"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.stableViews()", "public org.bson.util.CopyOnWriteMap$Builder<K, V> stableViews()"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.addAll(java.util.Map<? extends K, ? extends V>)", "public org.bson.util.CopyOnWriteMap$Builder<K, V> addAll(java.util.Map<? extends K, ? extends V>)"], ["org.bson.util.CopyOnWriteMap$Builder<K, V>", "org.bson.util.CopyOnWriteMap$Builder.liveViews()", "public org.bson.util.CopyOnWriteMap$Builder<K, V> liveViews()"], ["org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap$Builder.newHashMap()", "public org.bson.util.CopyOnWriteMap<K, V> newHashMap()"], ["org.bson.util.CopyOnWriteMap<K, V>", "org.bson.util.CopyOnWriteMap$Builder.newLinkedMap()", "public org.bson.util.CopyOnWriteMap<K, V> newLinkedMap()"], ["void", "org.bson.AbstractBsonWriter.writeStartDocument(java.lang.String)", "public void writeStartDocument(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartDocument()", "public void writeStartDocument()"], ["void", "org.bson.AbstractBsonWriter.writeEndDocument()", "public void writeEndDocument()"], ["void", "org.bson.AbstractBsonWriter.writeStartArray(java.lang.String)", "public void writeStartArray(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeStartArray()", "public void writeStartArray()"], ["void", "org.bson.AbstractBsonWriter.writeEndArray()", "public void writeEndArray()"], ["void", "org.bson.AbstractBsonWriter.writeBinaryData(java.lang.String, org.bson.BsonBinary)", "public void writeBinaryData(java.lang.String, org.bson.BsonBinary)"], ["void", "org.bson.AbstractBsonWriter.writeBinaryData(org.bson.BsonBinary)", "public void writeBinaryData(org.bson.BsonBinary)"], ["void", "org.bson.AbstractBsonWriter.writeBoolean(java.lang.String, boolean)", "public void writeBoolean(java.lang.String, boolean)"], ["void", "org.bson.AbstractBsonWriter.writeBoolean(boolean)", "public void writeBoolean(boolean)"], ["void", "org.bson.AbstractBsonWriter.writeDateTime(java.lang.String, long)", "public void writeDateTime(java.lang.String, long)"], ["void", "org.bson.AbstractBsonWriter.writeDateTime(long)", "public void writeDateTime(long)"], ["void", "org.bson.AbstractBsonWriter.writeDBPointer(java.lang.String, org.bson.BsonDbPointer)", "public void writeDBPointer(java.lang.String, org.bson.BsonDbPointer)"], ["void", "org.bson.AbstractBsonWriter.writeDBPointer(org.bson.BsonDbPointer)", "public void writeDBPointer(org.bson.BsonDbPointer)"], ["void", "org.bson.AbstractBsonWriter.writeDouble(java.lang.String, double)", "public void writeDouble(java.lang.String, double)"], ["void", "org.bson.AbstractBsonWriter.writeDouble(double)", "public void writeDouble(double)"], ["void", "org.bson.AbstractBsonWriter.writeInt32(java.lang.String, int)", "public void writeInt32(java.lang.String, int)"], ["void", "org.bson.AbstractBsonWriter.writeInt32(int)", "public void writeInt32(int)"], ["void", "org.bson.AbstractBsonWriter.writeInt64(java.lang.String, long)", "public void writeInt64(java.lang.String, long)"], ["void", "org.bson.AbstractBsonWriter.writeInt64(long)", "public void writeInt64(long)"], ["void", "org.bson.AbstractBsonWriter.writeDecimal128(org.bson.types.Decimal128)", "public void writeDecimal128(org.bson.types.Decimal128)"], ["void", "org.bson.AbstractBsonWriter.writeDecimal128(java.lang.String, org.bson.types.Decimal128)", "public void writeDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScript(java.lang.String, java.lang.String)", "public void writeJavaScript(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScript(java.lang.String)", "public void writeJavaScript(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScriptWithScope(java.lang.String, java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeJavaScriptWithScope(java.lang.String)", "public void writeJavaScriptWithScope(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMaxKey(java.lang.String)", "public void writeMaxKey(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMaxKey()", "public void writeMaxKey()"], ["void", "org.bson.AbstractBsonWriter.writeMinKey(java.lang.String)", "public void writeMinKey(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeMinKey()", "public void writeMinKey()"], ["void", "org.bson.AbstractBsonWriter.writeName(java.lang.String)", "public void writeName(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeNull(java.lang.String)", "public void writeNull(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeNull()", "public void writeNull()"], ["void", "org.bson.AbstractBsonWriter.writeObjectId(java.lang.String, org.bson.types.ObjectId)", "public void writeObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.AbstractBsonWriter.writeObjectId(org.bson.types.ObjectId)", "public void writeObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.AbstractBsonWriter.writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)", "public void writeRegularExpression(java.lang.String, org.bson.BsonRegularExpression)"], ["void", "org.bson.AbstractBsonWriter.writeRegularExpression(org.bson.BsonRegularExpression)", "public void writeRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.AbstractBsonWriter.writeString(java.lang.String, java.lang.String)", "public void writeString(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeSymbol(java.lang.String, java.lang.String)", "public void writeSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeSymbol(java.lang.String)", "public void writeSymbol(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeTimestamp(java.lang.String, org.bson.BsonTimestamp)", "public void writeTimestamp(java.lang.String, org.bson.BsonTimestamp)"], ["void", "org.bson.AbstractBsonWriter.writeTimestamp(org.bson.BsonTimestamp)", "public void writeTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.AbstractBsonWriter.writeUndefined(java.lang.String)", "public void writeUndefined(java.lang.String)"], ["void", "org.bson.AbstractBsonWriter.writeUndefined()", "public void writeUndefined()"], ["void", "org.bson.AbstractBsonWriter.close()", "public void close()"], ["void", "org.bson.AbstractBsonWriter.pipe(org.bson.BsonReader)", "public void pipe(org.bson.BsonReader)"], ["void", "org.bson.AbstractBsonWriter.pipe(org.bson.BsonReader, java.util.List<org.bson.BsonElement>)", "public void pipe(org.bson.BsonReader, java.util.List<org.bson.BsonElement>)"], ["org.bson.BsonDocumentWriter", "org.bson.BsonDocumentWriter(org.bson.BsonDocument)", "public org.bson.BsonDocumentWriter(org.bson.BsonDocument)"], ["org.bson.BsonDocument", "org.bson.BsonDocumentWriter.getDocument()", "public org.bson.BsonDocument getDocument()"], ["void", "org.bson.BsonDocumentWriter.doWriteBoolean(boolean)", "public void doWriteBoolean(boolean)"], ["void", "org.bson.BsonDocumentWriter.doWriteNull()", "public void doWriteNull()"], ["void", "org.bson.BsonDocumentWriter.doWriteObjectId(org.bson.types.ObjectId)", "public void doWriteObjectId(org.bson.types.ObjectId)"], ["void", "org.bson.BsonDocumentWriter.doWriteRegularExpression(org.bson.BsonRegularExpression)", "public void doWriteRegularExpression(org.bson.BsonRegularExpression)"], ["void", "org.bson.BsonDocumentWriter.doWriteString(java.lang.String)", "public void doWriteString(java.lang.String)"], ["void", "org.bson.BsonDocumentWriter.doWriteSymbol(java.lang.String)", "public void doWriteSymbol(java.lang.String)"], ["void", "org.bson.BsonDocumentWriter.doWriteTimestamp(org.bson.BsonTimestamp)", "public void doWriteTimestamp(org.bson.BsonTimestamp)"], ["void", "org.bson.BsonDocumentWriter.doWriteUndefined()", "public void doWriteUndefined()"], ["void", "org.bson.BsonDocumentWriter.flush()", "public void flush()"], ["org.bson.BSON", "org.bson.BSON()", "public org.bson.BSON()"], ["boolean", "org.bson.BSON.hasEncodeHooks()", "public static boolean hasEncodeHooks()"], ["boolean", "org.bson.BSON.hasDecodeHooks()", "public static boolean hasDecodeHooks()"], ["void", "org.bson.BSON.addEncodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void addEncodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.addDecodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void addDecodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["java.lang.Object", "org.bson.BSON.applyEncodingHooks(java.lang.Object)", "public static java.lang.Object applyEncodingHooks(java.lang.Object)"], ["java.lang.Object", "org.bson.BSON.applyDecodingHooks(java.lang.Object)", "public static java.lang.Object applyDecodingHooks(java.lang.Object)"], ["java.util.List<org.bson.Transformer>", "org.bson.BSON.getEncodingHooks(java.lang.Class<?>)", "public static java.util.List<org.bson.Transformer> getEncodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.clearEncodingHooks()", "public static void clearEncodingHooks()"], ["void", "org.bson.BSON.removeEncodingHooks(java.lang.Class<?>)", "public static void removeEncodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.removeEncodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void removeEncodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["java.util.List<org.bson.Transformer>", "org.bson.BSON.getDecodingHooks(java.lang.Class<?>)", "public static java.util.List<org.bson.Transformer> getDecodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.clearDecodingHooks()", "public static void clearDecodingHooks()"], ["void", "org.bson.BSON.removeDecodingHooks(java.lang.Class<?>)", "public static void removeDecodingHooks(java.lang.Class<?>)"], ["void", "org.bson.BSON.removeDecodingHook(java.lang.Class<?>, org.bson.Transformer)", "public static void removeDecodingHook(java.lang.Class<?>, org.bson.Transformer)"], ["void", "org.bson.BSON.clearAllHooks()", "public static void clearAllHooks()"], ["byte[]", "org.bson.BSON.encode(org.bson.BSONObject)", "public static byte[] encode(org.bson.BSONObject)"], ["org.bson.BSONObject", "org.bson.BSON.decode(byte[])", "public static org.bson.BSONObject decode(byte[])"], ["int", "org.bson.BSON.regexFlags(java.lang.String)", "public static int regexFlags(java.lang.String)"], ["int", "org.bson.BSON.regexFlag(char)", "public static int regexFlag(char)"], ["java.lang.String", "org.bson.BSON.regexFlags(int)", "public static java.lang.String regexFlags(int)"], ["int", "org.bson.BSON.toInt(java.lang.Object)", "public static int toInt(java.lang.Object)"], ["org.bson.BsonMaximumSizeExceededException", "org.bson.BsonMaximumSizeExceededException(java.lang.String)", "public org.bson.BsonMaximumSizeExceededException(java.lang.String)"], ["org.bson.BsonArray", "org.bson.BsonArray(java.util.List<? extends org.bson.BsonValue>)", "public org.bson.BsonArray(java.util.List<? extends org.bson.BsonValue>)"], ["org.bson.BsonArray", "org.bson.BsonArray()", "public org.bson.BsonArray()"], ["org.bson.BsonArray", "org.bson.BsonArray.parse(java.lang.String)", "public static org.bson.BsonArray parse(java.lang.String)"], ["java.util.List<org.bson.BsonValue>", "org.bson.BsonArray.getValues()", "public java.util.List<org.bson.BsonValue> getValues()"], ["org.bson.BsonType", "org.bson.BsonArray.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonArray.size()", "public int size()"], ["boolean", "org.bson.BsonArray.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.BsonArray.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<org.bson.BsonValue>", "org.bson.BsonArray.iterator()", "public java.util.Iterator<org.bson.BsonValue> iterator()"], ["java.lang.Object[]", "org.bson.BsonArray.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.bson.BsonArray.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.bson.BsonArray.add(org.bson.BsonValue)", "public boolean add(org.bson.BsonValue)"], ["boolean", "org.bson.BsonArray.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.BsonArray.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.BsonArray.addAll(java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.BsonArray.addAll(int, java.util.Collection<? extends org.bson.BsonValue>)", "public boolean addAll(int, java.util.Collection<? extends org.bson.BsonValue>)"], ["boolean", "org.bson.BsonArray.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "org.bson.BsonArray.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "org.bson.BsonArray.clear()", "public void clear()"], ["org.bson.BsonValue", "org.bson.BsonArray.get(int)", "public org.bson.BsonValue get(int)"], ["org.bson.BsonValue", "org.bson.BsonArray.set(int, org.bson.BsonValue)", "public org.bson.BsonValue set(int, org.bson.BsonValue)"], ["void", "org.bson.BsonArray.add(int, org.bson.BsonValue)", "public void add(int, org.bson.BsonValue)"], ["org.bson.BsonValue", "org.bson.BsonArray.remove(int)", "public org.bson.BsonValue remove(int)"], ["int", "org.bson.BsonArray.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.bson.BsonArray.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<org.bson.BsonValue>", "org.bson.BsonArray.listIterator()", "public java.util.ListIterator<org.bson.BsonValue> listIterator()"], ["java.util.ListIterator<org.bson.BsonValue>", "org.bson.BsonArray.listIterator(int)", "public java.util.ListIterator<org.bson.BsonValue> listIterator(int)"], ["java.util.List<org.bson.BsonValue>", "org.bson.BsonArray.subList(int, int)", "public java.util.List<org.bson.BsonValue> subList(int, int)"], ["boolean", "org.bson.BsonArray.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonArray.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonArray.toString()", "public java.lang.String toString()"], ["org.bson.BsonArray", "org.bson.BsonArray.clone()", "public org.bson.BsonArray clone()"], ["java.lang.Object", "org.bson.BsonArray.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.Object", "org.bson.BsonArray.remove(int)", "public java.lang.Object remove(int)"], ["void", "org.bson.BsonArray.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonArray.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "org.bson.BsonArray.get(int)", "public java.lang.Object get(int)"], ["boolean", "org.bson.BsonArray.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.hasNext()", "public boolean hasNext()"], ["T", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.next()", "public T next()"], ["void", "org.bson.BsonDocumentReader$BsonDocumentMarkableIterator.remove()", "public void remove()"], ["void", "org.bson.io.ByteBufferBsonInput$1.reset()", "public void reset()"], ["org.bson.io.Bits", "org.bson.io.Bits()", "public org.bson.io.Bits()"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[])", "public static void readFully(java.io.InputStream, byte[]) throws java.io.IOException"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[], int)", "public static void readFully(java.io.InputStream, byte[], int) throws java.io.IOException"], ["void", "org.bson.io.Bits.readFully(java.io.InputStream, byte[], int, int)", "public static void readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException"], ["int", "org.bson.io.Bits.readInt(java.io.InputStream)", "public static int readInt(java.io.InputStream) throws java.io.IOException"], ["int", "org.bson.io.Bits.readInt(java.io.InputStream, byte[])", "public static int readInt(java.io.InputStream, byte[]) throws java.io.IOException"], ["int", "org.bson.io.Bits.readInt(byte[])", "public static int readInt(byte[])"], ["int", "org.bson.io.Bits.readInt(byte[], int)", "public static int readInt(byte[], int)"], ["int", "org.bson.io.Bits.readIntBE(byte[], int)", "public static int readIntBE(byte[], int)"], ["long", "org.bson.io.Bits.readLong(java.io.InputStream)", "public static long readLong(java.io.InputStream) throws java.io.IOException"], ["long", "org.bson.io.Bits.readLong(java.io.InputStream, byte[])", "public static long readLong(java.io.InputStream, byte[]) throws java.io.IOException"], ["long", "org.bson.io.Bits.readLong(byte[])", "public static long readLong(byte[])"], ["long", "org.bson.io.Bits.readLong(byte[], int)", "public static long readLong(byte[], int)"], ["org.bson.io.BasicOutputBuffer", "org.bson.io.BasicOutputBuffer()", "public org.bson.io.BasicOutputBuffer()"], ["org.bson.io.BasicOutputBuffer", "org.bson.io.BasicOutputBuffer(int)", "public org.bson.io.BasicOutputBuffer(int)"], ["byte[]", "org.bson.io.BasicOutputBuffer.getInternalBuffer()", "public byte[] getInternalBuffer()"], ["void", "org.bson.io.BasicOutputBuffer.write(byte[])", "public void write(byte[])"], ["void", "org.bson.io.BasicOutputBuffer.writeBytes(byte[], int, int)", "public void writeBytes(byte[], int, int)"], ["void", "org.bson.io.BasicOutputBuffer.writeByte(int)", "public void writeByte(int)"], ["int", "org.bson.io.BasicOutputBuffer.getPosition()", "public int getPosition()"], ["int", "org.bson.io.BasicOutputBuffer.getSize()", "public int getSize()"], ["int", "org.bson.io.BasicOutputBuffer.pipe(java.io.OutputStream)", "public int pipe(java.io.OutputStream) throws java.io.IOException"], ["void", "org.bson.io.BasicOutputBuffer.truncateToPosition(int)", "public void truncateToPosition(int)"], ["java.util.List<org.bson.ByteBuf>", "org.bson.io.BasicOutputBuffer.getByteBuffers()", "public java.util.List<org.bson.ByteBuf> getByteBuffers()"], ["void", "org.bson.io.BasicOutputBuffer.close()", "public void close()"], ["org.bson.io.ByteBufferBsonInput", "org.bson.io.ByteBufferBsonInput(org.bson.ByteBuf)", "public org.bson.io.ByteBufferBsonInput(org.bson.ByteBuf)"], ["int", "org.bson.io.ByteBufferBsonInput.getPosition()", "public int getPosition()"], ["byte", "org.bson.io.ByteBufferBsonInput.readByte()", "public byte readByte()"], ["void", "org.bson.io.ByteBufferBsonInput.readBytes(byte[])", "public void readBytes(byte[])"], ["void", "org.bson.io.ByteBufferBsonInput.readBytes(byte[], int, int)", "public void readBytes(byte[], int, int)"], ["long", "org.bson.io.ByteBufferBsonInput.readInt64()", "public long readInt64()"], ["double", "org.bson.io.ByteBufferBsonInput.readDouble()", "public double readDouble()"], ["int", "org.bson.io.ByteBufferBsonInput.readInt32()", "public int readInt32()"], ["org.bson.types.ObjectId", "org.bson.io.ByteBufferBsonInput.readObjectId()", "public org.bson.types.ObjectId readObjectId()"], ["java.lang.String", "org.bson.io.ByteBufferBsonInput.readString()", "public java.lang.String readString()"], ["java.lang.String", "org.bson.io.ByteBufferBsonInput.readCString()", "public java.lang.String readCString()"], ["void", "org.bson.io.ByteBufferBsonInput.skipCString()", "public void skipCString()"], ["void", "org.bson.io.ByteBufferBsonInput.skip(int)", "public void skip(int)"], ["void", "org.bson.io.ByteBufferBsonInput.mark(int)", "public void mark(int)"], ["org.bson.io.BsonInputMark", "org.bson.io.ByteBufferBsonInput.getMark(int)", "public org.bson.io.BsonInputMark getMark(int)"], ["void", "org.bson.io.ByteBufferBsonInput.reset()", "public void reset()"], ["boolean", "org.bson.io.ByteBufferBsonInput.hasRemaining()", "public boolean hasRemaining()"], ["void", "org.bson.io.ByteBufferBsonInput.close()", "public void close()"], ["org.bson.io.OutputBuffer", "org.bson.io.OutputBuffer()", "public org.bson.io.OutputBuffer()"], ["void", "org.bson.io.OutputBuffer.write(byte[])", "public void write(byte[])"], ["void", "org.bson.io.OutputBuffer.close()", "public void close()"], ["void", "org.bson.io.OutputBuffer.write(byte[], int, int)", "public void write(byte[], int, int)"], ["void", "org.bson.io.OutputBuffer.writeBytes(byte[])", "public void writeBytes(byte[])"], ["void", "org.bson.io.OutputBuffer.writeInt32(int)", "public void writeInt32(int)"], ["void", "org.bson.io.OutputBuffer.writeInt32(int, int)", "public void writeInt32(int, int)"], ["void", "org.bson.io.OutputBuffer.writeInt64(long)", "public void writeInt64(long)"], ["void", "org.bson.io.OutputBuffer.writeDouble(double)", "public void writeDouble(double)"], ["void", "org.bson.io.OutputBuffer.writeString(java.lang.String)", "public void writeString(java.lang.String)"], ["void", "org.bson.io.OutputBuffer.writeCString(java.lang.String)", "public void writeCString(java.lang.String)"], ["void", "org.bson.io.OutputBuffer.writeObjectId(org.bson.types.ObjectId)", "public void writeObjectId(org.bson.types.ObjectId)"], ["int", "org.bson.io.OutputBuffer.size()", "public int size()"], ["byte[]", "org.bson.io.OutputBuffer.toByteArray()", "public byte[] toByteArray()"], ["void", "org.bson.io.OutputBuffer.write(int)", "public void write(int)"], ["void", "org.bson.io.OutputBuffer.writeInt(int)", "public void writeInt(int)"], ["java.lang.String", "org.bson.io.OutputBuffer.toString()", "public java.lang.String toString()"], ["void", "org.bson.io.OutputBuffer.writeLong(long)", "public void writeLong(long)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context)", "public org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context, org.bson.BsonContextType)", "public org.bson.AbstractBsonWriter$Context(org.bson.AbstractBsonWriter, org.bson.AbstractBsonWriter$Context, org.bson.BsonContextType)"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["org.bson.BsonContextType", "org.bson.AbstractBsonWriter$Context.getContextType()", "public org.bson.BsonContextType getContextType()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.AbstractBsonWriter$Context.copy()", "public org.bson.AbstractBsonWriter$Context copy()"], ["org.bson.codecs.BsonObjectIdCodec", "org.bson.codecs.BsonObjectIdCodec()", "public org.bson.codecs.BsonObjectIdCodec()"], ["void", "org.bson.codecs.BsonObjectIdCodec.encode(org.bson.BsonWriter, org.bson.BsonObjectId, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonObjectId, org.bson.codecs.EncoderContext)"], ["org.bson.BsonObjectId", "org.bson.codecs.BsonObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonObjectId decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonObjectId>", "org.bson.codecs.BsonObjectIdCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonObjectId> getEncoderClass()"], ["void", "org.bson.codecs.BsonObjectIdCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonInt32Codec", "org.bson.codecs.BsonInt32Codec()", "public org.bson.codecs.BsonInt32Codec()"], ["org.bson.BsonInt32", "org.bson.codecs.BsonInt32Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonInt32 decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonInt32Codec.encode(org.bson.BsonWriter, org.bson.BsonInt32, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonInt32, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonInt32>", "org.bson.codecs.BsonInt32Codec.getEncoderClass()", "public java.lang.Class<org.bson.BsonInt32> getEncoderClass()"], ["void", "org.bson.codecs.BsonInt32Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonInt32Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonRegularExpressionCodec", "org.bson.codecs.BsonRegularExpressionCodec()", "public org.bson.codecs.BsonRegularExpressionCodec()"], ["org.bson.BsonRegularExpression", "org.bson.codecs.BsonRegularExpressionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonRegularExpression decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonRegularExpressionCodec.encode(org.bson.BsonWriter, org.bson.BsonRegularExpression, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonRegularExpression, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonRegularExpression>", "org.bson.codecs.BsonRegularExpressionCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonRegularExpression> getEncoderClass()"], ["void", "org.bson.codecs.BsonRegularExpressionCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonRegularExpressionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MaxKeyCodec", "org.bson.codecs.MaxKeyCodec()", "public org.bson.codecs.MaxKeyCodec()"], ["void", "org.bson.codecs.MaxKeyCodec.encode(org.bson.BsonWriter, org.bson.types.MaxKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.MaxKey, org.bson.codecs.EncoderContext)"], ["org.bson.types.MaxKey", "org.bson.codecs.MaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.MaxKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.MaxKey>", "org.bson.codecs.MaxKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.MaxKey> getEncoderClass()"], ["void", "org.bson.codecs.MaxKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ShortCodec", "org.bson.codecs.ShortCodec()", "public org.bson.codecs.ShortCodec()"], ["void", "org.bson.codecs.ShortCodec.encode(org.bson.BsonWriter, java.lang.Short, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Short, org.bson.codecs.EncoderContext)"], ["java.lang.Short", "org.bson.codecs.ShortCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Short decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Short>", "org.bson.codecs.ShortCodec.getEncoderClass()", "public java.lang.Class<java.lang.Short> getEncoderClass()"], ["void", "org.bson.codecs.ShortCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ShortCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider()", "public org.bson.codecs.MapCodecProvider()"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider(org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.MapCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider(org.bson.Transformer)", "public org.bson.codecs.MapCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.MapCodecProvider", "org.bson.codecs.MapCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.MapCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.MapCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.MapCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.MapCodecProvider.hashCode()", "public int hashCode()"], ["org.bson.codecs.BsonDocumentCodec", "org.bson.codecs.BsonDocumentCodec()", "public org.bson.codecs.BsonDocumentCodec()"], ["org.bson.codecs.BsonDocumentCodec", "org.bson.codecs.BsonDocumentCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonDocumentCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.BsonDocumentCodec.getCodecRegistry()", "public org.bson.codecs.configuration.CodecRegistry getCodecRegistry()"], ["org.bson.BsonDocument", "org.bson.codecs.BsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDocument decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDocumentCodec.encode(org.bson.BsonWriter, org.bson.BsonDocument, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDocument, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDocument>", "org.bson.codecs.BsonDocumentCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDocument> getEncoderClass()"], ["org.bson.BsonDocument", "org.bson.codecs.BsonDocumentCodec.generateIdIfAbsentFromDocument(org.bson.BsonDocument)", "public org.bson.BsonDocument generateIdIfAbsentFromDocument(org.bson.BsonDocument)"], ["boolean", "org.bson.codecs.BsonDocumentCodec.documentHasId(org.bson.BsonDocument)", "public boolean documentHasId(org.bson.BsonDocument)"], ["org.bson.BsonValue", "org.bson.codecs.BsonDocumentCodec.getDocumentId(org.bson.BsonDocument)", "public org.bson.BsonValue getDocumentId(org.bson.BsonDocument)"], ["org.bson.BsonValue", "org.bson.codecs.BsonDocumentCodec.getDocumentId(java.lang.Object)", "public org.bson.BsonValue getDocumentId(java.lang.Object)"], ["boolean", "org.bson.codecs.BsonDocumentCodec.documentHasId(java.lang.Object)", "public boolean documentHasId(java.lang.Object)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentCodec.generateIdIfAbsentFromDocument(java.lang.Object)", "public java.lang.Object generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "org.bson.codecs.BsonDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "org.bson.codecs.IterableCodec$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.bson.codecs.PatternCodec", "org.bson.codecs.PatternCodec()", "public org.bson.codecs.PatternCodec()"], ["void", "org.bson.codecs.PatternCodec.encode(org.bson.BsonWriter, java.util.regex.Pattern, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.regex.Pattern, org.bson.codecs.EncoderContext)"], ["java.util.regex.Pattern", "org.bson.codecs.PatternCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.regex.Pattern decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.regex.Pattern>", "org.bson.codecs.PatternCodec.getEncoderClass()", "public java.lang.Class<java.util.regex.Pattern> getEncoderClass()"], ["void", "org.bson.codecs.PatternCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.PatternCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.IntegerCodec", "org.bson.codecs.IntegerCodec()", "public org.bson.codecs.IntegerCodec()"], ["void", "org.bson.codecs.IntegerCodec.encode(org.bson.BsonWriter, java.lang.Integer, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Integer, org.bson.codecs.EncoderContext)"], ["java.lang.Integer", "org.bson.codecs.IntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Integer decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Integer>", "org.bson.codecs.IntegerCodec.getEncoderClass()", "public java.lang.Class<java.lang.Integer> getEncoderClass()"], ["void", "org.bson.codecs.IntegerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.IntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonBooleanCodec", "org.bson.codecs.BsonBooleanCodec()", "public org.bson.codecs.BsonBooleanCodec()"], ["org.bson.BsonBoolean", "org.bson.codecs.BsonBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonBoolean decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonBooleanCodec.encode(org.bson.BsonWriter, org.bson.BsonBoolean, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonBoolean, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonBoolean>", "org.bson.codecs.BsonBooleanCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonBoolean> getEncoderClass()"], ["void", "org.bson.codecs.BsonBooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.UuidCodecProvider", "org.bson.codecs.UuidCodecProvider(org.bson.UuidRepresentation)", "public org.bson.codecs.UuidCodecProvider(org.bson.UuidRepresentation)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.UuidCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.BsonTypeCodecMap", "org.bson.codecs.BsonTypeCodecMap(org.bson.codecs.BsonTypeClassMap, org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonTypeCodecMap(org.bson.codecs.BsonTypeClassMap, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.Codec<?>", "org.bson.codecs.BsonTypeCodecMap.get(org.bson.BsonType)", "public org.bson.codecs.Codec<?> get(org.bson.BsonType)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec()", "public org.bson.codecs.DocumentCodec()"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.DocumentCodec", "org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.DocumentCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["boolean", "org.bson.codecs.DocumentCodec.documentHasId(org.bson.Document)", "public boolean documentHasId(org.bson.Document)"], ["org.bson.BsonValue", "org.bson.codecs.DocumentCodec.getDocumentId(org.bson.Document)", "public org.bson.BsonValue getDocumentId(org.bson.Document)"], ["org.bson.Document", "org.bson.codecs.DocumentCodec.generateIdIfAbsentFromDocument(org.bson.Document)", "public org.bson.Document generateIdIfAbsentFromDocument(org.bson.Document)"], ["void", "org.bson.codecs.DocumentCodec.encode(org.bson.BsonWriter, org.bson.Document, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.Document, org.bson.codecs.EncoderContext)"], ["org.bson.Document", "org.bson.codecs.DocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.Document decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.Document>", "org.bson.codecs.DocumentCodec.getEncoderClass()", "public java.lang.Class<org.bson.Document> getEncoderClass()"], ["org.bson.BsonValue", "org.bson.codecs.DocumentCodec.getDocumentId(java.lang.Object)", "public org.bson.BsonValue getDocumentId(java.lang.Object)"], ["boolean", "org.bson.codecs.DocumentCodec.documentHasId(java.lang.Object)", "public boolean documentHasId(java.lang.Object)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec.generateIdIfAbsentFromDocument(java.lang.Object)", "public java.lang.Object generateIdIfAbsentFromDocument(java.lang.Object)"], ["void", "org.bson.codecs.DocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.CodeCodec", "org.bson.codecs.CodeCodec()", "public org.bson.codecs.CodeCodec()"], ["void", "org.bson.codecs.CodeCodec.encode(org.bson.BsonWriter, org.bson.types.Code, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Code, org.bson.codecs.EncoderContext)"], ["org.bson.types.Code", "org.bson.codecs.CodeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Code decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.Code>", "org.bson.codecs.CodeCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.Code> getEncoderClass()"], ["void", "org.bson.codecs.CodeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CodeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.CodeWithScopeCodec", "org.bson.codecs.CodeWithScopeCodec(org.bson.codecs.Codec<org.bson.Document>)", "public org.bson.codecs.CodeWithScopeCodec(org.bson.codecs.Codec<org.bson.Document>)"], ["org.bson.types.CodeWithScope", "org.bson.codecs.CodeWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.CodeWithScope decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.CodeWithScopeCodec.encode(org.bson.BsonWriter, org.bson.types.CodeWithScope, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.CodeWithScope, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.types.CodeWithScope>", "org.bson.codecs.CodeWithScopeCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.CodeWithScope> getEncoderClass()"], ["void", "org.bson.codecs.CodeWithScopeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CodeWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ByteArrayCodec", "org.bson.codecs.ByteArrayCodec()", "public org.bson.codecs.ByteArrayCodec()"], ["void", "org.bson.codecs.ByteArrayCodec.encode(org.bson.BsonWriter, byte[], org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, byte[], org.bson.codecs.EncoderContext)"], ["byte[]", "org.bson.codecs.ByteArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public byte[] decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<byte[]>", "org.bson.codecs.ByteArrayCodec.getEncoderClass()", "public java.lang.Class<byte[]> getEncoderClass()"], ["void", "org.bson.codecs.ByteArrayCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ByteArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.StringCodec", "org.bson.codecs.StringCodec()", "public org.bson.codecs.StringCodec()"], ["void", "org.bson.codecs.StringCodec.encode(org.bson.BsonWriter, java.lang.String, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.String, org.bson.codecs.EncoderContext)"], ["java.lang.String", "org.bson.codecs.StringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.String decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.String>", "org.bson.codecs.StringCodec.getEncoderClass()", "public java.lang.Class<java.lang.String> getEncoderClass()"], ["void", "org.bson.codecs.StringCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.StringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["T", "org.bson.codecs.configuration.Optional$Some.get()", "public T get()"], ["boolean", "org.bson.codecs.configuration.Optional$Some.isEmpty()", "public boolean isEmpty()"], ["java.lang.String", "org.bson.codecs.configuration.Optional$Some.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.configuration.Optional$Some.isDefined()", "public boolean isDefined()"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromCodecs(org.bson.codecs.Codec<?>...)", "public static org.bson.codecs.configuration.CodecRegistry fromCodecs(org.bson.codecs.Codec<?>...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromCodecs(java.util.List<? extends org.bson.codecs.Codec<?>>)", "public static org.bson.codecs.configuration.CodecRegistry fromCodecs(java.util.List<? extends org.bson.codecs.Codec<?>>)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromProviders(org.bson.codecs.configuration.CodecProvider...)", "public static org.bson.codecs.configuration.CodecRegistry fromProviders(org.bson.codecs.configuration.CodecProvider...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromProviders(java.util.List<? extends org.bson.codecs.configuration.CodecProvider>)", "public static org.bson.codecs.configuration.CodecRegistry fromProviders(java.util.List<? extends org.bson.codecs.configuration.CodecProvider>)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromRegistries(org.bson.codecs.configuration.CodecRegistry...)", "public static org.bson.codecs.configuration.CodecRegistry fromRegistries(org.bson.codecs.configuration.CodecRegistry...)"], ["org.bson.codecs.configuration.CodecRegistry", "org.bson.codecs.configuration.CodecRegistries.fromRegistries(java.util.List<? extends org.bson.codecs.configuration.CodecRegistry>)", "public static org.bson.codecs.configuration.CodecRegistry fromRegistries(java.util.List<? extends org.bson.codecs.configuration.CodecRegistry>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.CodecRegistries$1.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Object", "org.bson.codecs.configuration.Optional$1.get()", "public java.lang.Object get()"], ["boolean", "org.bson.codecs.configuration.Optional$1.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.codecs.configuration.CodecCache.containsKey(java.lang.Class<?>)", "public boolean containsKey(java.lang.Class<?>)"], ["void", "org.bson.codecs.configuration.CodecCache.put(java.lang.Class<?>, org.bson.codecs.Codec<?>)", "public void put(java.lang.Class<?>, org.bson.codecs.Codec<?>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.CodecCache.getOrThrow(java.lang.Class<T>)", "public <T> org.bson.codecs.Codec<T> getOrThrow(java.lang.Class<T>)"], ["org.bson.codecs.configuration.CodecConfigurationException", "org.bson.codecs.configuration.CodecConfigurationException(java.lang.String)", "public org.bson.codecs.configuration.CodecConfigurationException(java.lang.String)"], ["org.bson.codecs.configuration.CodecConfigurationException", "org.bson.codecs.configuration.CodecConfigurationException(java.lang.String, java.lang.Throwable)", "public org.bson.codecs.configuration.CodecConfigurationException(java.lang.String, java.lang.Throwable)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.ProvidersCodecRegistry.get(java.lang.Class<T>)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.ProvidersCodecRegistry.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.configuration.ProvidersCodecRegistry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.configuration.ProvidersCodecRegistry.hashCode()", "public int hashCode()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.configuration.MapOfCodecsProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["java.lang.Class<T>", "org.bson.codecs.configuration.ChildCodecRegistry.getCodecClass()", "public java.lang.Class<T> getCodecClass()"], ["<U> org.bson.codecs.Codec<U>", "org.bson.codecs.configuration.ChildCodecRegistry.get(java.lang.Class<U>)", "public <U> org.bson.codecs.Codec<U> get(java.lang.Class<U>)"], ["boolean", "org.bson.codecs.configuration.ChildCodecRegistry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.configuration.ChildCodecRegistry.hashCode()", "public int hashCode()"], ["<T> org.bson.codecs.configuration.Optional<T>", "org.bson.codecs.configuration.Optional.empty()", "public static <T> org.bson.codecs.configuration.Optional<T> empty()"], ["<T> org.bson.codecs.configuration.Optional<T>", "org.bson.codecs.configuration.Optional.of(T)", "public static <T> org.bson.codecs.configuration.Optional<T> of(T)"], ["java.lang.String", "org.bson.codecs.configuration.Optional.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.configuration.Optional.isDefined()", "public boolean isDefined()"], ["void", "org.bson.codecs.configuration.LazyCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["java.lang.Class<T>", "org.bson.codecs.configuration.LazyCodec.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["T", "org.bson.codecs.configuration.LazyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BinaryCodec", "org.bson.codecs.BinaryCodec()", "public org.bson.codecs.BinaryCodec()"], ["void", "org.bson.codecs.BinaryCodec.encode(org.bson.BsonWriter, org.bson.types.Binary, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Binary, org.bson.codecs.EncoderContext)"], ["org.bson.types.Binary", "org.bson.codecs.BinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Binary decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.Binary>", "org.bson.codecs.BinaryCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.Binary> getEncoderClass()"], ["void", "org.bson.codecs.BinaryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonValueCodec", "org.bson.codecs.BsonValueCodec()", "public org.bson.codecs.BsonValueCodec()"], ["org.bson.codecs.BsonValueCodec", "org.bson.codecs.BsonValueCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonValueCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonValue", "org.bson.codecs.BsonValueCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonValue decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonValueCodec.encode(org.bson.BsonWriter, org.bson.BsonValue, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonValue, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonValue>", "org.bson.codecs.BsonValueCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonValue> getEncoderClass()"], ["void", "org.bson.codecs.BsonValueCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonValueCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonValueCodecProvider", "org.bson.codecs.BsonValueCodecProvider()", "public org.bson.codecs.BsonValueCodecProvider()"], ["java.lang.Class<? extends org.bson.BsonValue>", "org.bson.codecs.BsonValueCodecProvider.getClassForBsonType(org.bson.BsonType)", "public static java.lang.Class<? extends org.bson.BsonValue> getClassForBsonType(org.bson.BsonType)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonValueCodecProvider.getBsonTypeClassMap()", "public static org.bson.codecs.BsonTypeClassMap getBsonTypeClassMap()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.BsonValueCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider()", "public org.bson.codecs.IterableCodecProvider()"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider(org.bson.Transformer)", "public org.bson.codecs.IterableCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider(org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.IterableCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.IterableCodecProvider", "org.bson.codecs.IterableCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.IterableCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.IterableCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.IterableCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.IterableCodecProvider.hashCode()", "public int hashCode()"], ["org.bson.codecs.jsr310.InstantCodec", "org.bson.codecs.jsr310.InstantCodec()", "public org.bson.codecs.jsr310.InstantCodec()"], ["java.time.Instant", "org.bson.codecs.jsr310.InstantCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.time.Instant decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.jsr310.InstantCodec.encode(org.bson.BsonWriter, java.time.Instant, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.time.Instant, org.bson.codecs.EncoderContext)"], ["java.lang.Class<java.time.Instant>", "org.bson.codecs.jsr310.InstantCodec.getEncoderClass()", "public java.lang.Class<java.time.Instant> getEncoderClass()"], ["void", "org.bson.codecs.jsr310.InstantCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.jsr310.InstantCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.jsr310.LocalDateTimeCodec", "org.bson.codecs.jsr310.LocalDateTimeCodec()", "public org.bson.codecs.jsr310.LocalDateTimeCodec()"], ["java.time.LocalDateTime", "org.bson.codecs.jsr310.LocalDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.time.LocalDateTime decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.jsr310.LocalDateTimeCodec.encode(org.bson.BsonWriter, java.time.LocalDateTime, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.time.LocalDateTime, org.bson.codecs.EncoderContext)"], ["java.lang.Class<java.time.LocalDateTime>", "org.bson.codecs.jsr310.LocalDateTimeCodec.getEncoderClass()", "public java.lang.Class<java.time.LocalDateTime> getEncoderClass()"], ["void", "org.bson.codecs.jsr310.LocalDateTimeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.jsr310.LocalDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.jsr310.LocalTimeCodec", "org.bson.codecs.jsr310.LocalTimeCodec()", "public org.bson.codecs.jsr310.LocalTimeCodec()"], ["java.time.LocalTime", "org.bson.codecs.jsr310.LocalTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.time.LocalTime decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.jsr310.LocalTimeCodec.encode(org.bson.BsonWriter, java.time.LocalTime, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.time.LocalTime, org.bson.codecs.EncoderContext)"], ["java.lang.Class<java.time.LocalTime>", "org.bson.codecs.jsr310.LocalTimeCodec.getEncoderClass()", "public java.lang.Class<java.time.LocalTime> getEncoderClass()"], ["void", "org.bson.codecs.jsr310.LocalTimeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.jsr310.LocalTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.jsr310.LocalDateCodec", "org.bson.codecs.jsr310.LocalDateCodec()", "public org.bson.codecs.jsr310.LocalDateCodec()"], ["java.time.LocalDate", "org.bson.codecs.jsr310.LocalDateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.time.LocalDate decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.jsr310.LocalDateCodec.encode(org.bson.BsonWriter, java.time.LocalDate, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.time.LocalDate, org.bson.codecs.EncoderContext)"], ["java.lang.Class<java.time.LocalDate>", "org.bson.codecs.jsr310.LocalDateCodec.getEncoderClass()", "public java.lang.Class<java.time.LocalDate> getEncoderClass()"], ["void", "org.bson.codecs.jsr310.LocalDateCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.jsr310.LocalDateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.jsr310.Jsr310CodecProvider", "org.bson.codecs.jsr310.Jsr310CodecProvider()", "public org.bson.codecs.jsr310.Jsr310CodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.jsr310.Jsr310CodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.EncoderContext$Builder", "org.bson.codecs.EncoderContext$Builder.isEncodingCollectibleDocument(boolean)", "public org.bson.codecs.EncoderContext$Builder isEncodingCollectibleDocument(boolean)"], ["org.bson.codecs.EncoderContext", "org.bson.codecs.EncoderContext$Builder.build()", "public org.bson.codecs.EncoderContext build()"], ["org.bson.codecs.AtomicIntegerCodec", "org.bson.codecs.AtomicIntegerCodec()", "public org.bson.codecs.AtomicIntegerCodec()"], ["void", "org.bson.codecs.AtomicIntegerCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicInteger, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicInteger, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicInteger", "org.bson.codecs.AtomicIntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.concurrent.atomic.AtomicInteger decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.concurrent.atomic.AtomicInteger>", "org.bson.codecs.AtomicIntegerCodec.getEncoderClass()", "public java.lang.Class<java.util.concurrent.atomic.AtomicInteger> getEncoderClass()"], ["void", "org.bson.codecs.AtomicIntegerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicIntegerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDBPointerCodec", "org.bson.codecs.BsonDBPointerCodec()", "public org.bson.codecs.BsonDBPointerCodec()"], ["org.bson.BsonDbPointer", "org.bson.codecs.BsonDBPointerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDbPointer decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDBPointerCodec.encode(org.bson.BsonWriter, org.bson.BsonDbPointer, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDbPointer, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDbPointer>", "org.bson.codecs.BsonDBPointerCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDbPointer> getEncoderClass()"], ["void", "org.bson.codecs.BsonDBPointerCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDBPointerCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BooleanCodec", "org.bson.codecs.BooleanCodec()", "public org.bson.codecs.BooleanCodec()"], ["void", "org.bson.codecs.BooleanCodec.encode(org.bson.BsonWriter, java.lang.Boolean, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Boolean, org.bson.codecs.EncoderContext)"], ["java.lang.Boolean", "org.bson.codecs.BooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Boolean decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Boolean>", "org.bson.codecs.BooleanCodec.getEncoderClass()", "public java.lang.Class<java.lang.Boolean> getEncoderClass()"], ["void", "org.bson.codecs.BooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.EncoderContext$Builder", "org.bson.codecs.EncoderContext.builder()", "public static org.bson.codecs.EncoderContext$Builder builder()"], ["boolean", "org.bson.codecs.EncoderContext.isEncodingCollectibleDocument()", "public boolean isEncodingCollectibleDocument()"], ["<T> void", "org.bson.codecs.EncoderContext.encodeWithChildContext(org.bson.codecs.Encoder<T>, org.bson.BsonWriter, T)", "public <T> void encodeWithChildContext(org.bson.codecs.Encoder<T>, org.bson.BsonWriter, T)"], ["org.bson.codecs.EncoderContext", "org.bson.codecs.EncoderContext.getChildContext()", "public org.bson.codecs.EncoderContext getChildContext()"], ["org.bson.codecs.BsonCodecProvider", "org.bson.codecs.BsonCodecProvider()", "public org.bson.codecs.BsonCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.BsonCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.AtomicLongCodec", "org.bson.codecs.AtomicLongCodec()", "public org.bson.codecs.AtomicLongCodec()"], ["void", "org.bson.codecs.AtomicLongCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicLong, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicLong, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicLong", "org.bson.codecs.AtomicLongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.concurrent.atomic.AtomicLong decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.concurrent.atomic.AtomicLong>", "org.bson.codecs.AtomicLongCodec.getEncoderClass()", "public java.lang.Class<java.util.concurrent.atomic.AtomicLong> getEncoderClass()"], ["void", "org.bson.codecs.AtomicLongCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicLongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonUndefinedCodec", "org.bson.codecs.BsonUndefinedCodec()", "public org.bson.codecs.BsonUndefinedCodec()"], ["org.bson.BsonUndefined", "org.bson.codecs.BsonUndefinedCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonUndefined decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonUndefinedCodec.encode(org.bson.BsonWriter, org.bson.BsonUndefined, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonUndefined, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonUndefined>", "org.bson.codecs.BsonUndefinedCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonUndefined> getEncoderClass()"], ["void", "org.bson.codecs.BsonUndefinedCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonUndefinedCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ValueCodecProvider", "org.bson.codecs.ValueCodecProvider()", "public org.bson.codecs.ValueCodecProvider()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.ValueCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.ValueCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.ValueCodecProvider.hashCode()", "public int hashCode()"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonTypeClassMap(java.util.Map<org.bson.BsonType, java.lang.Class<?>>)", "public org.bson.codecs.BsonTypeClassMap(java.util.Map<org.bson.BsonType, java.lang.Class<?>>)"], ["org.bson.codecs.BsonTypeClassMap", "org.bson.codecs.BsonTypeClassMap()", "public org.bson.codecs.BsonTypeClassMap()"], ["java.lang.Class<?>", "org.bson.codecs.BsonTypeClassMap.get(org.bson.BsonType)", "public java.lang.Class<?> get(org.bson.BsonType)"], ["boolean", "org.bson.codecs.BsonTypeClassMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.BsonTypeClassMap.hashCode()", "public int hashCode()"], ["org.bson.codecs.BsonInt64Codec", "org.bson.codecs.BsonInt64Codec()", "public org.bson.codecs.BsonInt64Codec()"], ["org.bson.BsonInt64", "org.bson.codecs.BsonInt64Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonInt64 decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonInt64Codec.encode(org.bson.BsonWriter, org.bson.BsonInt64, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonInt64, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonInt64>", "org.bson.codecs.BsonInt64Codec.getEncoderClass()", "public java.lang.Class<org.bson.BsonInt64> getEncoderClass()"], ["void", "org.bson.codecs.BsonInt64Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonInt64Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DateCodec", "org.bson.codecs.DateCodec()", "public org.bson.codecs.DateCodec()"], ["void", "org.bson.codecs.DateCodec.encode(org.bson.BsonWriter, java.util.Date, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.Date, org.bson.codecs.EncoderContext)"], ["java.util.Date", "org.bson.codecs.DateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.Date decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Date>", "org.bson.codecs.DateCodec.getEncoderClass()", "public java.lang.Class<java.util.Date> getEncoderClass()"], ["void", "org.bson.codecs.DateCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DateCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider()", "public org.bson.codecs.DocumentCodecProvider()"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.Transformer)", "public org.bson.codecs.DocumentCodecProvider(org.bson.Transformer)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.DocumentCodecProvider", "org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.DocumentCodecProvider(org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.DocumentCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["boolean", "org.bson.codecs.DocumentCodecProvider.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.DocumentCodecProvider.hashCode()", "public int hashCode()"], ["org.bson.codecs.FloatCodec", "org.bson.codecs.FloatCodec()", "public org.bson.codecs.FloatCodec()"], ["void", "org.bson.codecs.FloatCodec.encode(org.bson.BsonWriter, java.lang.Float, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Float, org.bson.codecs.EncoderContext)"], ["java.lang.Float", "org.bson.codecs.FloatCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Float decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Float>", "org.bson.codecs.FloatCodec.getEncoderClass()", "public java.lang.Class<java.lang.Float> getEncoderClass()"], ["void", "org.bson.codecs.FloatCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.FloatCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.Decimal128Codec", "org.bson.codecs.Decimal128Codec()", "public org.bson.codecs.Decimal128Codec()"], ["org.bson.types.Decimal128", "org.bson.codecs.Decimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Decimal128 decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.Decimal128Codec.encode(org.bson.BsonWriter, org.bson.types.Decimal128, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Decimal128, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.types.Decimal128>", "org.bson.codecs.Decimal128Codec.getEncoderClass()", "public java.lang.Class<org.bson.types.Decimal128> getEncoderClass()"], ["void", "org.bson.codecs.Decimal128Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.Decimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDocumentWrapperCodec", "org.bson.codecs.BsonDocumentWrapperCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)", "public org.bson.codecs.BsonDocumentWrapperCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)"], ["org.bson.BsonDocumentWrapper", "org.bson.codecs.BsonDocumentWrapperCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDocumentWrapper decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDocumentWrapperCodec.encode(org.bson.BsonWriter, org.bson.BsonDocumentWrapper, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDocumentWrapper, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDocumentWrapper>", "org.bson.codecs.BsonDocumentWrapperCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDocumentWrapper> getEncoderClass()"], ["void", "org.bson.codecs.BsonDocumentWrapperCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDocumentWrapperCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonNullCodec", "org.bson.codecs.BsonNullCodec()", "public org.bson.codecs.BsonNullCodec()"], ["org.bson.BsonNull", "org.bson.codecs.BsonNullCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonNull decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonNullCodec.encode(org.bson.BsonWriter, org.bson.BsonNull, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonNull, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonNull>", "org.bson.codecs.BsonNullCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonNull> getEncoderClass()"], ["void", "org.bson.codecs.BsonNullCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonNullCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ObjectIdGenerator", "org.bson.codecs.ObjectIdGenerator()", "public org.bson.codecs.ObjectIdGenerator()"], ["java.lang.Object", "org.bson.codecs.ObjectIdGenerator.generate()", "public java.lang.Object generate()"], ["org.bson.codecs.AtomicBooleanCodec", "org.bson.codecs.AtomicBooleanCodec()", "public org.bson.codecs.AtomicBooleanCodec()"], ["void", "org.bson.codecs.AtomicBooleanCodec.encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicBoolean, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.concurrent.atomic.AtomicBoolean, org.bson.codecs.EncoderContext)"], ["java.util.concurrent.atomic.AtomicBoolean", "org.bson.codecs.AtomicBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.concurrent.atomic.AtomicBoolean decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.concurrent.atomic.AtomicBoolean>", "org.bson.codecs.AtomicBooleanCodec.getEncoderClass()", "public java.lang.Class<java.util.concurrent.atomic.AtomicBoolean> getEncoderClass()"], ["void", "org.bson.codecs.AtomicBooleanCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.AtomicBooleanCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonJavaScriptWithScopeCodec", "org.bson.codecs.BsonJavaScriptWithScopeCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)", "public org.bson.codecs.BsonJavaScriptWithScopeCodec(org.bson.codecs.Codec<org.bson.BsonDocument>)"], ["org.bson.BsonJavaScriptWithScope", "org.bson.codecs.BsonJavaScriptWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonJavaScriptWithScope decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptWithScopeCodec.encode(org.bson.BsonWriter, org.bson.BsonJavaScriptWithScope, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonJavaScriptWithScope, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonJavaScriptWithScope>", "org.bson.codecs.BsonJavaScriptWithScopeCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonJavaScriptWithScope> getEncoderClass()"], ["void", "org.bson.codecs.BsonJavaScriptWithScopeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonJavaScriptWithScopeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonStringCodec", "org.bson.codecs.BsonStringCodec()", "public org.bson.codecs.BsonStringCodec()"], ["org.bson.BsonString", "org.bson.codecs.BsonStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonString decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonStringCodec.encode(org.bson.BsonWriter, org.bson.BsonString, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonString, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonString>", "org.bson.codecs.BsonStringCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonString> getEncoderClass()"], ["void", "org.bson.codecs.BsonStringCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonStringCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["boolean", "org.bson.codecs.DecoderContext.hasCheckedDiscriminator()", "public boolean hasCheckedDiscriminator()"], ["org.bson.codecs.DecoderContext$Builder", "org.bson.codecs.DecoderContext.builder()", "public static org.bson.codecs.DecoderContext$Builder builder()"], ["<T> T", "org.bson.codecs.DecoderContext.decodeWithChildContext(org.bson.codecs.Decoder<T>, org.bson.BsonReader)", "public <T> T decodeWithChildContext(org.bson.codecs.Decoder<T>, org.bson.BsonReader)"], ["org.bson.codecs.CharacterCodec", "org.bson.codecs.CharacterCodec()", "public org.bson.codecs.CharacterCodec()"], ["void", "org.bson.codecs.CharacterCodec.encode(org.bson.BsonWriter, java.lang.Character, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Character, org.bson.codecs.EncoderContext)"], ["java.lang.Character", "org.bson.codecs.CharacterCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Character decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Character>", "org.bson.codecs.CharacterCodec.getEncoderClass()", "public java.lang.Class<java.lang.Character> getEncoderClass()"], ["void", "org.bson.codecs.CharacterCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.CharacterCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonMaxKeyCodec", "org.bson.codecs.BsonMaxKeyCodec()", "public org.bson.codecs.BsonMaxKeyCodec()"], ["void", "org.bson.codecs.BsonMaxKeyCodec.encode(org.bson.BsonWriter, org.bson.BsonMaxKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonMaxKey, org.bson.codecs.EncoderContext)"], ["org.bson.BsonMaxKey", "org.bson.codecs.BsonMaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonMaxKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonMaxKey>", "org.bson.codecs.BsonMaxKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonMaxKey> getEncoderClass()"], ["void", "org.bson.codecs.BsonMaxKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonMaxKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonCodec", "org.bson.codecs.BsonCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.conversions.Bson", "org.bson.codecs.BsonCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.conversions.Bson decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonCodec.encode(org.bson.BsonWriter, org.bson.conversions.Bson, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.conversions.Bson, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.conversions.Bson>", "org.bson.codecs.BsonCodec.getEncoderClass()", "public java.lang.Class<org.bson.conversions.Bson> getEncoderClass()"], ["void", "org.bson.codecs.BsonCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDoubleCodec", "org.bson.codecs.BsonDoubleCodec()", "public org.bson.codecs.BsonDoubleCodec()"], ["org.bson.BsonDouble", "org.bson.codecs.BsonDoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDouble decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDoubleCodec.encode(org.bson.BsonWriter, org.bson.BsonDouble, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDouble, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDouble>", "org.bson.codecs.BsonDoubleCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDouble> getEncoderClass()"], ["void", "org.bson.codecs.BsonDoubleCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.DoubleCodec", "org.bson.codecs.DoubleCodec()", "public org.bson.codecs.DoubleCodec()"], ["void", "org.bson.codecs.DoubleCodec.encode(org.bson.BsonWriter, java.lang.Double, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Double, org.bson.codecs.EncoderContext)"], ["java.lang.Double", "org.bson.codecs.DoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Double decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Double>", "org.bson.codecs.DoubleCodec.getEncoderClass()", "public java.lang.Class<java.lang.Double> getEncoderClass()"], ["void", "org.bson.codecs.DoubleCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.DoubleCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonDecimal128Codec", "org.bson.codecs.BsonDecimal128Codec()", "public org.bson.codecs.BsonDecimal128Codec()"], ["org.bson.BsonDecimal128", "org.bson.codecs.BsonDecimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDecimal128 decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDecimal128Codec.encode(org.bson.BsonWriter, org.bson.BsonDecimal128, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDecimal128, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDecimal128>", "org.bson.codecs.BsonDecimal128Codec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDecimal128> getEncoderClass()"], ["void", "org.bson.codecs.BsonDecimal128Codec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDecimal128Codec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonBinaryCodec", "org.bson.codecs.BsonBinaryCodec()", "public org.bson.codecs.BsonBinaryCodec()"], ["void", "org.bson.codecs.BsonBinaryCodec.encode(org.bson.BsonWriter, org.bson.BsonBinary, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonBinary, org.bson.codecs.EncoderContext)"], ["org.bson.BsonBinary", "org.bson.codecs.BsonBinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonBinary decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonBinary>", "org.bson.codecs.BsonBinaryCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonBinary> getEncoderClass()"], ["void", "org.bson.codecs.BsonBinaryCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonBinaryCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ByteCodec", "org.bson.codecs.ByteCodec()", "public org.bson.codecs.ByteCodec()"], ["void", "org.bson.codecs.ByteCodec.encode(org.bson.BsonWriter, java.lang.Byte, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Byte, org.bson.codecs.EncoderContext)"], ["java.lang.Byte", "org.bson.codecs.ByteCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Byte decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Byte>", "org.bson.codecs.ByteCodec.getEncoderClass()", "public java.lang.Class<java.lang.Byte> getEncoderClass()"], ["void", "org.bson.codecs.ByteCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ByteCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.LongCodec", "org.bson.codecs.LongCodec()", "public org.bson.codecs.LongCodec()"], ["void", "org.bson.codecs.LongCodec.encode(org.bson.BsonWriter, java.lang.Long, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Long, org.bson.codecs.EncoderContext)"], ["java.lang.Long", "org.bson.codecs.LongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Long decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.lang.Long>", "org.bson.codecs.LongCodec.getEncoderClass()", "public java.lang.Class<java.lang.Long> getEncoderClass()"], ["void", "org.bson.codecs.LongCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.LongCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["boolean", "org.bson.codecs.DecoderContext$Builder.hasCheckedDiscriminator()", "public boolean hasCheckedDiscriminator()"], ["org.bson.codecs.DecoderContext$Builder", "org.bson.codecs.DecoderContext$Builder.checkedDiscriminator(boolean)", "public org.bson.codecs.DecoderContext$Builder checkedDiscriminator(boolean)"], ["org.bson.codecs.DecoderContext", "org.bson.codecs.DecoderContext$Builder.build()", "public org.bson.codecs.DecoderContext build()"], ["org.bson.codecs.MinKeyCodec", "org.bson.codecs.MinKeyCodec()", "public org.bson.codecs.MinKeyCodec()"], ["void", "org.bson.codecs.MinKeyCodec.encode(org.bson.BsonWriter, org.bson.types.MinKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.MinKey, org.bson.codecs.EncoderContext)"], ["org.bson.types.MinKey", "org.bson.codecs.MinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.MinKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.MinKey>", "org.bson.codecs.MinKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.MinKey> getEncoderClass()"], ["void", "org.bson.codecs.MinKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonJavaScriptCodec", "org.bson.codecs.BsonJavaScriptCodec()", "public org.bson.codecs.BsonJavaScriptCodec()"], ["org.bson.BsonJavaScript", "org.bson.codecs.BsonJavaScriptCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonJavaScript decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonJavaScriptCodec.encode(org.bson.BsonWriter, org.bson.BsonJavaScript, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonJavaScript, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonJavaScript>", "org.bson.codecs.BsonJavaScriptCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonJavaScript> getEncoderClass()"], ["void", "org.bson.codecs.BsonJavaScriptCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonJavaScriptCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BsonTimestampCodec", "org.bson.codecs.BsonTimestampCodec()", "public org.bson.codecs.BsonTimestampCodec()"], ["void", "org.bson.codecs.BsonTimestampCodec.encode(org.bson.BsonWriter, org.bson.BsonTimestamp, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonTimestamp, org.bson.codecs.EncoderContext)"], ["org.bson.BsonTimestamp", "org.bson.codecs.BsonTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonTimestamp decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonTimestamp>", "org.bson.codecs.BsonTimestampCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonTimestamp> getEncoderClass()"], ["void", "org.bson.codecs.BsonTimestampCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonTimestampCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.UuidCodecHelper.reverseByteArray(byte[], int, int)", "public static void reverseByteArray(byte[], int, int)"], ["org.bson.codecs.BsonMinKeyCodec", "org.bson.codecs.BsonMinKeyCodec()", "public org.bson.codecs.BsonMinKeyCodec()"], ["void", "org.bson.codecs.BsonMinKeyCodec.encode(org.bson.BsonWriter, org.bson.BsonMinKey, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonMinKey, org.bson.codecs.EncoderContext)"], ["org.bson.BsonMinKey", "org.bson.codecs.BsonMinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonMinKey decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.BsonMinKey>", "org.bson.codecs.BsonMinKeyCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonMinKey> getEncoderClass()"], ["void", "org.bson.codecs.BsonMinKeyCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonMinKeyCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.RawBsonDocumentCodec", "org.bson.codecs.RawBsonDocumentCodec()", "public org.bson.codecs.RawBsonDocumentCodec()"], ["void", "org.bson.codecs.RawBsonDocumentCodec.encode(org.bson.BsonWriter, org.bson.RawBsonDocument, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.RawBsonDocument, org.bson.codecs.EncoderContext)"], ["org.bson.RawBsonDocument", "org.bson.codecs.RawBsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.RawBsonDocument decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.RawBsonDocument>", "org.bson.codecs.RawBsonDocumentCodec.getEncoderClass()", "public java.lang.Class<org.bson.RawBsonDocument> getEncoderClass()"], ["void", "org.bson.codecs.RawBsonDocumentCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.RawBsonDocumentCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.ObjectIdCodec", "org.bson.codecs.ObjectIdCodec()", "public org.bson.codecs.ObjectIdCodec()"], ["void", "org.bson.codecs.ObjectIdCodec.encode(org.bson.BsonWriter, org.bson.types.ObjectId, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.ObjectId, org.bson.codecs.EncoderContext)"], ["org.bson.types.ObjectId", "org.bson.codecs.ObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.ObjectId decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<org.bson.types.ObjectId>", "org.bson.codecs.ObjectIdCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.ObjectId> getEncoderClass()"], ["void", "org.bson.codecs.ObjectIdCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.ObjectIdCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.IterableCodec", "org.bson.codecs.IterableCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.IterableCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.IterableCodec", "org.bson.codecs.IterableCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.IterableCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["java.lang.Iterable", "org.bson.codecs.IterableCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Iterable decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.IterableCodec.encode(org.bson.BsonWriter, java.lang.Iterable, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Iterable, org.bson.codecs.EncoderContext)"], ["java.lang.Class<java.lang.Iterable>", "org.bson.codecs.IterableCodec.getEncoderClass()", "public java.lang.Class<java.lang.Iterable> getEncoderClass()"], ["void", "org.bson.codecs.IterableCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.IterableCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.SymbolCodec", "org.bson.codecs.SymbolCodec()", "public org.bson.codecs.SymbolCodec()"], ["org.bson.types.Symbol", "org.bson.codecs.SymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.types.Symbol decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.SymbolCodec.encode(org.bson.BsonWriter, org.bson.types.Symbol, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.types.Symbol, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.types.Symbol>", "org.bson.codecs.SymbolCodec.getEncoderClass()", "public java.lang.Class<org.bson.types.Symbol> getEncoderClass()"], ["void", "org.bson.codecs.SymbolCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.SymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.EnumPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["S", "org.bson.codecs.pojo.LazyMissingCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public S decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.LazyMissingCodec.encode(org.bson.BsonWriter, S, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, S, org.bson.codecs.EncoderContext)"], ["java.lang.Class<S>", "org.bson.codecs.pojo.LazyMissingCodec.getEncoderClass()", "public java.lang.Class<S> getEncoderClass()"], ["<S> org.bson.codecs.pojo.ClassModelBuilder<S>", "org.bson.codecs.pojo.ClassModel.builder(java.lang.Class<S>)", "public static <S> org.bson.codecs.pojo.ClassModelBuilder<S> builder(java.lang.Class<S>)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.ClassModel.getType()", "public java.lang.Class<T> getType()"], ["boolean", "org.bson.codecs.pojo.ClassModel.hasTypeParameters()", "public boolean hasTypeParameters()"], ["boolean", "org.bson.codecs.pojo.ClassModel.useDiscriminator()", "public boolean useDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.getDiscriminatorKey()", "public java.lang.String getDiscriminatorKey()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.getDiscriminator()", "public java.lang.String getDiscriminator()"], ["org.bson.codecs.pojo.PropertyModel<?>", "org.bson.codecs.pojo.ClassModel.getPropertyModel(java.lang.String)", "public org.bson.codecs.pojo.PropertyModel<?> getPropertyModel(java.lang.String)"], ["java.util.List<org.bson.codecs.pojo.PropertyModel<?>>", "org.bson.codecs.pojo.ClassModel.getPropertyModels()", "public java.util.List<org.bson.codecs.pojo.PropertyModel<?>> getPropertyModels()"], ["org.bson.codecs.pojo.PropertyModel<?>", "org.bson.codecs.pojo.ClassModel.getIdPropertyModel()", "public org.bson.codecs.pojo.PropertyModel<?> getIdPropertyModel()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModel.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.pojo.ClassModel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.ClassModel.hashCode()", "public int hashCode()"], ["<S> T", "org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl$PrivatePropertyAccessor.get(S)", "public <S> T get(S)"], ["<S> void", "org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl$PrivatePropertyAccessor.set(S, T)", "public <S> void set(S, T)"], ["void", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.encode(org.bson.BsonWriter, java.util.Map<java.lang.String, T>, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.Map<java.lang.String, T>, org.bson.codecs.EncoderContext)"], ["java.util.Map<java.lang.String, T>", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.Map<java.lang.String, T> decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Map<java.lang.String, T>>", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.getEncoderClass()", "public java.lang.Class<java.util.Map<java.lang.String, T>> getEncoderClass()"], ["void", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.pojo.MapPropertyCodecProvider$MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.PojoCodecImpl.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["T", "org.bson.codecs.pojo.PojoCodecImpl.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.PojoCodecImpl.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["java.lang.String", "org.bson.codecs.pojo.PojoCodecImpl.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.pojo.IdPropertyModelHolder.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.IdPropertyModelHolder.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.codecs.pojo.TypeParameterMap.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.pojo.TypeParameterMap.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.TypeParameterMap.hashCode()", "public int hashCode()"], ["void", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["T", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.pojo.EnumPropertyCodecProvider$EnumCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.encode(org.bson.BsonWriter, java.util.Collection<T>, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.Collection<T>, org.bson.codecs.EncoderContext)"], ["java.util.Collection<T>", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.Collection<T> decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Collection<T>>", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.getEncoderClass()", "public java.lang.Class<java.util.Collection<T>> getEncoderClass()"], ["void", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.pojo.CollectionPropertyCodecProvider$CollectionCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyMetadata.getName()", "public java.lang.String getName()"], ["java.util.List<java.lang.annotation.Annotation>", "org.bson.codecs.pojo.PropertyMetadata.getReadAnnotations()", "public java.util.List<java.lang.annotation.Annotation> getReadAnnotations()"], ["org.bson.codecs.pojo.PropertyMetadata<T>", "org.bson.codecs.pojo.PropertyMetadata.addReadAnnotation(java.lang.annotation.Annotation)", "public org.bson.codecs.pojo.PropertyMetadata<T> addReadAnnotation(java.lang.annotation.Annotation)"], ["java.util.List<java.lang.annotation.Annotation>", "org.bson.codecs.pojo.PropertyMetadata.getWriteAnnotations()", "public java.util.List<java.lang.annotation.Annotation> getWriteAnnotations()"], ["org.bson.codecs.pojo.PropertyMetadata<T>", "org.bson.codecs.pojo.PropertyMetadata.addWriteAnnotation(java.lang.annotation.Annotation)", "public org.bson.codecs.pojo.PropertyMetadata<T> addWriteAnnotation(java.lang.annotation.Annotation)"], ["java.lang.reflect.Field", "org.bson.codecs.pojo.PropertyMetadata.getField()", "public java.lang.reflect.Field getField()"], ["org.bson.codecs.pojo.PropertyMetadata<T>", "org.bson.codecs.pojo.PropertyMetadata.field(java.lang.reflect.Field)", "public org.bson.codecs.pojo.PropertyMetadata<T> field(java.lang.reflect.Field)"], ["java.lang.reflect.Method", "org.bson.codecs.pojo.PropertyMetadata.getGetter()", "public java.lang.reflect.Method getGetter()"], ["void", "org.bson.codecs.pojo.PropertyMetadata.setGetter(java.lang.reflect.Method)", "public void setGetter(java.lang.reflect.Method)"], ["java.lang.reflect.Method", "org.bson.codecs.pojo.PropertyMetadata.getSetter()", "public java.lang.reflect.Method getSetter()"], ["void", "org.bson.codecs.pojo.PropertyMetadata.setSetter(java.lang.reflect.Method)", "public void setSetter(java.lang.reflect.Method)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyMetadata.getDeclaringClassName()", "public java.lang.String getDeclaringClassName()"], ["org.bson.codecs.pojo.TypeData<T>", "org.bson.codecs.pojo.PropertyMetadata.getTypeData()", "public org.bson.codecs.pojo.TypeData<T> getTypeData()"], ["org.bson.codecs.pojo.TypeParameterMap", "org.bson.codecs.pojo.PropertyMetadata.getTypeParameterMap()", "public org.bson.codecs.pojo.TypeParameterMap getTypeParameterMap()"], ["java.util.List<org.bson.codecs.pojo.TypeData<?>>", "org.bson.codecs.pojo.PropertyMetadata.getTypeParameters()", "public java.util.List<org.bson.codecs.pojo.TypeData<?>> getTypeParameters()"], ["<S> org.bson.codecs.pojo.PropertyMetadata<T>", "org.bson.codecs.pojo.PropertyMetadata.typeParameterInfo(org.bson.codecs.pojo.TypeParameterMap, org.bson.codecs.pojo.TypeData<S>)", "public <S> org.bson.codecs.pojo.PropertyMetadata<T> typeParameterInfo(org.bson.codecs.pojo.TypeParameterMap, org.bson.codecs.pojo.TypeData<S>)"], ["boolean", "org.bson.codecs.pojo.PropertyMetadata.isSerializable()", "public boolean isSerializable()"], ["boolean", "org.bson.codecs.pojo.PropertyMetadata.isDeserializable()", "public boolean isDeserializable()"], ["<S> org.bson.codecs.pojo.TypeData$Builder<T>", "org.bson.codecs.pojo.TypeData$Builder.addTypeParameter(org.bson.codecs.pojo.TypeData<S>)", "public <S> org.bson.codecs.pojo.TypeData$Builder<T> addTypeParameter(org.bson.codecs.pojo.TypeData<S>)"], ["org.bson.codecs.pojo.TypeData$Builder<T>", "org.bson.codecs.pojo.TypeData$Builder.addTypeParameters(java.util.List<org.bson.codecs.pojo.TypeData<?>>)", "public org.bson.codecs.pojo.TypeData$Builder<T> addTypeParameters(java.util.List<org.bson.codecs.pojo.TypeData<?>>)"], ["org.bson.codecs.pojo.TypeData<T>", "org.bson.codecs.pojo.TypeData$Builder.build()", "public org.bson.codecs.pojo.TypeData<T> build()"], ["<T> org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModel.builder()", "public static <T> org.bson.codecs.pojo.PropertyModelBuilder<T> builder()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.getWriteName()", "public java.lang.String getWriteName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.getReadName()", "public java.lang.String getReadName()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.isWritable()", "public boolean isWritable()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.isReadable()", "public boolean isReadable()"], ["org.bson.codecs.pojo.TypeData<T>", "org.bson.codecs.pojo.PropertyModel.getTypeData()", "public org.bson.codecs.pojo.TypeData<T> getTypeData()"], ["org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.PropertyModel.getCodec()", "public org.bson.codecs.Codec<T> getCodec()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.shouldSerialize(T)", "public boolean shouldSerialize(T)"], ["org.bson.codecs.pojo.PropertyAccessor<T>", "org.bson.codecs.pojo.PropertyModel.getPropertyAccessor()", "public org.bson.codecs.pojo.PropertyAccessor<T> getPropertyAccessor()"], ["java.lang.Boolean", "org.bson.codecs.pojo.PropertyModel.useDiscriminator()", "public java.lang.Boolean useDiscriminator()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModel.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.pojo.PropertyModel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.PropertyModel.hashCode()", "public int hashCode()"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider.builder()", "public static org.bson.codecs.pojo.PojoCodecProvider$Builder builder()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.PojoCodecProvider.get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(java.lang.Class<T>, org.bson.codecs.configuration.CodecRegistry)"], ["void", "org.bson.codecs.pojo.ConventionDefaultsImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)", "public void apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["org.bson.BsonObjectId", "org.bson.codecs.pojo.IdGenerators$2.generate()", "public org.bson.BsonObjectId generate()"], ["java.lang.Class<org.bson.BsonObjectId>", "org.bson.codecs.pojo.IdGenerators$2.getType()", "public java.lang.Class<org.bson.BsonObjectId> getType()"], ["java.lang.Object", "org.bson.codecs.pojo.IdGenerators$2.generate()", "public java.lang.Object generate()"], ["void", "org.bson.codecs.pojo.ConventionObjectIdGeneratorsImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)", "public void apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["T", "org.bson.codecs.pojo.AutomaticPojoCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.pojo.AutomaticPojoCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.AutomaticPojoCodec.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["void", "org.bson.codecs.pojo.ConventionSetPrivateFieldImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)", "public void apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["<T> org.bson.codecs.pojo.TypeData$Builder<T>", "org.bson.codecs.pojo.TypeData.builder(java.lang.Class<T>)", "public static <T> org.bson.codecs.pojo.TypeData$Builder<T> builder(java.lang.Class<T>)"], ["org.bson.codecs.pojo.TypeData<?>", "org.bson.codecs.pojo.TypeData.newInstance(java.lang.reflect.Method)", "public static org.bson.codecs.pojo.TypeData<?> newInstance(java.lang.reflect.Method)"], ["org.bson.codecs.pojo.TypeData<?>", "org.bson.codecs.pojo.TypeData.newInstance(java.lang.reflect.Field)", "public static org.bson.codecs.pojo.TypeData<?> newInstance(java.lang.reflect.Field)"], ["<T> org.bson.codecs.pojo.TypeData<T>", "org.bson.codecs.pojo.TypeData.newInstance(java.lang.reflect.Type, java.lang.Class<T>)", "public static <T> org.bson.codecs.pojo.TypeData<T> newInstance(java.lang.reflect.Type, java.lang.Class<T>)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.TypeData.getType()", "public java.lang.Class<T> getType()"], ["java.util.List<org.bson.codecs.pojo.TypeData<?>>", "org.bson.codecs.pojo.TypeData.getTypeParameters()", "public java.util.List<org.bson.codecs.pojo.TypeData<?>> getTypeParameters()"], ["java.lang.String", "org.bson.codecs.pojo.TypeData.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.codecs.pojo.TypeData.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.codecs.pojo.TypeData.hashCode()", "public int hashCode()"], ["java.lang.Class<?>", "org.bson.codecs.pojo.DiscriminatorLookup.lookup(java.lang.String)", "public java.lang.Class<?> lookup(java.lang.String)"], ["org.bson.codecs.pojo.InstanceCreator<T>", "org.bson.codecs.pojo.InstanceCreatorFactoryImpl.create()", "public org.bson.codecs.pojo.InstanceCreator<T> create()"], ["org.bson.codecs.pojo.PojoCodecProvider", "org.bson.codecs.pojo.PojoCodecProvider$Builder.build()", "public org.bson.codecs.pojo.PojoCodecProvider build()"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.automatic(boolean)", "public org.bson.codecs.pojo.PojoCodecProvider$Builder automatic(boolean)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.conventions(java.util.List<org.bson.codecs.pojo.Convention>)", "public org.bson.codecs.pojo.PojoCodecProvider$Builder conventions(java.util.List<org.bson.codecs.pojo.Convention>)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(java.lang.Class<?>...)", "public org.bson.codecs.pojo.PojoCodecProvider$Builder register(java.lang.Class<?>...)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(org.bson.codecs.pojo.ClassModel<?>...)", "public org.bson.codecs.pojo.PojoCodecProvider$Builder register(org.bson.codecs.pojo.ClassModel<?>...)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(java.lang.String...)", "public org.bson.codecs.pojo.PojoCodecProvider$Builder register(java.lang.String...)"], ["org.bson.codecs.pojo.PojoCodecProvider$Builder", "org.bson.codecs.pojo.PojoCodecProvider$Builder.register(org.bson.codecs.pojo.PropertyCodecProvider...)", "public org.bson.codecs.pojo.PojoCodecProvider$Builder register(org.bson.codecs.pojo.PropertyCodecProvider...)"], ["void", "org.bson.codecs.pojo.ConventionUseGettersAsSettersImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)", "public void apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.getName()", "public java.lang.String getName()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.getReadName()", "public java.lang.String getReadName()"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.readName(java.lang.String)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> readName(java.lang.String)"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.getWriteName()", "public java.lang.String getWriteName()"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.writeName(java.lang.String)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> writeName(java.lang.String)"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.codec(org.bson.codecs.Codec<T>)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> codec(org.bson.codecs.Codec<T>)"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.propertySerialization(org.bson.codecs.pojo.PropertySerialization<T>)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> propertySerialization(org.bson.codecs.pojo.PropertySerialization<T>)"], ["org.bson.codecs.pojo.PropertySerialization<T>", "org.bson.codecs.pojo.PropertyModelBuilder.getPropertySerialization()", "public org.bson.codecs.pojo.PropertySerialization<T> getPropertySerialization()"], ["java.util.List<java.lang.annotation.Annotation>", "org.bson.codecs.pojo.PropertyModelBuilder.getReadAnnotations()", "public java.util.List<java.lang.annotation.Annotation> getReadAnnotations()"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.readAnnotations(java.util.List<java.lang.annotation.Annotation>)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> readAnnotations(java.util.List<java.lang.annotation.Annotation>)"], ["java.util.List<java.lang.annotation.Annotation>", "org.bson.codecs.pojo.PropertyModelBuilder.getWriteAnnotations()", "public java.util.List<java.lang.annotation.Annotation> getWriteAnnotations()"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.writeAnnotations(java.util.List<java.lang.annotation.Annotation>)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> writeAnnotations(java.util.List<java.lang.annotation.Annotation>)"], ["boolean", "org.bson.codecs.pojo.PropertyModelBuilder.isWritable()", "public boolean isWritable()"], ["boolean", "org.bson.codecs.pojo.PropertyModelBuilder.isReadable()", "public boolean isReadable()"], ["java.lang.Boolean", "org.bson.codecs.pojo.PropertyModelBuilder.isDiscriminatorEnabled()", "public java.lang.Boolean isDiscriminatorEnabled()"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.discriminatorEnabled(boolean)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> discriminatorEnabled(boolean)"], ["org.bson.codecs.pojo.PropertyAccessor<T>", "org.bson.codecs.pojo.PropertyModelBuilder.getPropertyAccessor()", "public org.bson.codecs.pojo.PropertyAccessor<T> getPropertyAccessor()"], ["org.bson.codecs.pojo.PropertyModelBuilder<T>", "org.bson.codecs.pojo.PropertyModelBuilder.propertyAccessor(org.bson.codecs.pojo.PropertyAccessor<T>)", "public org.bson.codecs.pojo.PropertyModelBuilder<T> propertyAccessor(org.bson.codecs.pojo.PropertyAccessor<T>)"], ["org.bson.codecs.pojo.PropertyModel<T>", "org.bson.codecs.pojo.PropertyModelBuilder.build()", "public org.bson.codecs.pojo.PropertyModel<T> build()"], ["java.lang.String", "org.bson.codecs.pojo.PropertyModelBuilder.toString()", "public java.lang.String toString()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.CollectionPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["void", "org.bson.codecs.pojo.ConventionAnnotationImpl.apply(org.bson.codecs.pojo.ClassModelBuilder<?>)", "public void apply(org.bson.codecs.pojo.ClassModelBuilder<?>)"], ["boolean", "org.bson.codecs.pojo.PropertyModelSerializationImpl.shouldSerialize(T)", "public boolean shouldSerialize(T)"], ["<S> T", "org.bson.codecs.pojo.PropertyAccessorImpl.get(S)", "public <S> T get(S)"], ["<S> void", "org.bson.codecs.pojo.PropertyAccessorImpl.set(S, T)", "public <S> void set(S, T)"], ["org.bson.types.ObjectId", "org.bson.codecs.pojo.IdGenerators$1.generate()", "public org.bson.types.ObjectId generate()"], ["java.lang.Class<org.bson.types.ObjectId>", "org.bson.codecs.pojo.IdGenerators$1.getType()", "public java.lang.Class<org.bson.types.ObjectId> getType()"], ["java.lang.Object", "org.bson.codecs.pojo.IdGenerators$1.generate()", "public java.lang.Object generate()"], ["<T> org.bson.codecs.Codec<T>", "org.bson.codecs.pojo.MapPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)", "public <T> org.bson.codecs.Codec<T> get(org.bson.codecs.pojo.TypeWithTypeParameters<T>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["<S> org.bson.codecs.Codec<S>", "org.bson.codecs.pojo.FallbackPropertyCodecProvider.get(org.bson.codecs.pojo.TypeWithTypeParameters<S>, org.bson.codecs.pojo.PropertyCodecRegistry)", "public <S> org.bson.codecs.Codec<S> get(org.bson.codecs.pojo.TypeWithTypeParameters<S>, org.bson.codecs.pojo.PropertyCodecRegistry)"], ["<S> T", "org.bson.codecs.pojo.ConventionSetPrivateFieldImpl$PrivatePropertyAccessor.get(S)", "public <S> T get(S)"], ["<S> void", "org.bson.codecs.pojo.ConventionSetPrivateFieldImpl$PrivatePropertyAccessor.set(S, T)", "public <S> void set(S, T)"], ["void", "org.bson.codecs.pojo.LazyPojoCodec.encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, T, org.bson.codecs.EncoderContext)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.LazyPojoCodec.getEncoderClass()", "public java.lang.Class<T> getEncoderClass()"], ["T", "org.bson.codecs.pojo.LazyPojoCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public T decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.idGenerator(org.bson.codecs.pojo.IdGenerator<?>)", "public org.bson.codecs.pojo.ClassModelBuilder<T> idGenerator(org.bson.codecs.pojo.IdGenerator<?>)"], ["org.bson.codecs.pojo.IdGenerator<?>", "org.bson.codecs.pojo.ClassModelBuilder.getIdGenerator()", "public org.bson.codecs.pojo.IdGenerator<?> getIdGenerator()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.instanceCreatorFactory(org.bson.codecs.pojo.InstanceCreatorFactory<T>)", "public org.bson.codecs.pojo.ClassModelBuilder<T> instanceCreatorFactory(org.bson.codecs.pojo.InstanceCreatorFactory<T>)"], ["org.bson.codecs.pojo.InstanceCreatorFactory<T>", "org.bson.codecs.pojo.ClassModelBuilder.getInstanceCreatorFactory()", "public org.bson.codecs.pojo.InstanceCreatorFactory<T> getInstanceCreatorFactory()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.type(java.lang.Class<T>)", "public org.bson.codecs.pojo.ClassModelBuilder<T> type(java.lang.Class<T>)"], ["java.lang.Class<T>", "org.bson.codecs.pojo.ClassModelBuilder.getType()", "public java.lang.Class<T> getType()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.conventions(java.util.List<org.bson.codecs.pojo.Convention>)", "public org.bson.codecs.pojo.ClassModelBuilder<T> conventions(java.util.List<org.bson.codecs.pojo.Convention>)"], ["java.util.List<org.bson.codecs.pojo.Convention>", "org.bson.codecs.pojo.ClassModelBuilder.getConventions()", "public java.util.List<org.bson.codecs.pojo.Convention> getConventions()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.annotations(java.util.List<java.lang.annotation.Annotation>)", "public org.bson.codecs.pojo.ClassModelBuilder<T> annotations(java.util.List<java.lang.annotation.Annotation>)"], ["java.util.List<java.lang.annotation.Annotation>", "org.bson.codecs.pojo.ClassModelBuilder.getAnnotations()", "public java.util.List<java.lang.annotation.Annotation> getAnnotations()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.discriminator(java.lang.String)", "public org.bson.codecs.pojo.ClassModelBuilder<T> discriminator(java.lang.String)"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.getDiscriminator()", "public java.lang.String getDiscriminator()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.discriminatorKey(java.lang.String)", "public org.bson.codecs.pojo.ClassModelBuilder<T> discriminatorKey(java.lang.String)"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.getDiscriminatorKey()", "public java.lang.String getDiscriminatorKey()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.enableDiscriminator(boolean)", "public org.bson.codecs.pojo.ClassModelBuilder<T> enableDiscriminator(boolean)"], ["java.lang.Boolean", "org.bson.codecs.pojo.ClassModelBuilder.useDiscriminator()", "public java.lang.Boolean useDiscriminator()"], ["org.bson.codecs.pojo.ClassModelBuilder<T>", "org.bson.codecs.pojo.ClassModelBuilder.idPropertyName(java.lang.String)", "public org.bson.codecs.pojo.ClassModelBuilder<T> idPropertyName(java.lang.String)"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.getIdPropertyName()", "public java.lang.String getIdPropertyName()"], ["boolean", "org.bson.codecs.pojo.ClassModelBuilder.removeProperty(java.lang.String)", "public boolean removeProperty(java.lang.String)"], ["org.bson.codecs.pojo.PropertyModelBuilder<?>", "org.bson.codecs.pojo.ClassModelBuilder.getProperty(java.lang.String)", "public org.bson.codecs.pojo.PropertyModelBuilder<?> getProperty(java.lang.String)"], ["java.util.List<org.bson.codecs.pojo.PropertyModelBuilder<?>>", "org.bson.codecs.pojo.ClassModelBuilder.getPropertyModelBuilders()", "public java.util.List<org.bson.codecs.pojo.PropertyModelBuilder<?>> getPropertyModelBuilders()"], ["org.bson.codecs.pojo.ClassModel<T>", "org.bson.codecs.pojo.ClassModelBuilder.build()", "public org.bson.codecs.pojo.ClassModel<T> build()"], ["java.lang.String", "org.bson.codecs.pojo.ClassModelBuilder.toString()", "public java.lang.String toString()"], ["<S> void", "org.bson.codecs.pojo.InstanceCreatorImpl.set(S, org.bson.codecs.pojo.PropertyModel<S>)", "public <S> void set(S, org.bson.codecs.pojo.PropertyModel<S>)"], ["T", "org.bson.codecs.pojo.InstanceCreatorImpl.getInstance()", "public T getInstance()"], ["<S> org.bson.codecs.Codec<S>", "org.bson.codecs.pojo.PropertyCodecRegistryImpl.get(org.bson.codecs.pojo.TypeWithTypeParameters<S>)", "public <S> org.bson.codecs.Codec<S> get(org.bson.codecs.pojo.TypeWithTypeParameters<S>)"], ["org.bson.codecs.PatternCodec$RegexFlag[]", "org.bson.codecs.PatternCodec$RegexFlag.values()", "public static org.bson.codecs.PatternCodec$RegexFlag[] values()"], ["org.bson.codecs.PatternCodec$RegexFlag", "org.bson.codecs.PatternCodec$RegexFlag.valueOf(java.lang.String)", "public static org.bson.codecs.PatternCodec$RegexFlag valueOf(java.lang.String)"], ["org.bson.codecs.PatternCodec$RegexFlag", "org.bson.codecs.PatternCodec$RegexFlag.getByCharacter(char)", "public static org.bson.codecs.PatternCodec$RegexFlag getByCharacter(char)"], ["org.bson.codecs.BsonDateTimeCodec", "org.bson.codecs.BsonDateTimeCodec()", "public org.bson.codecs.BsonDateTimeCodec()"], ["org.bson.BsonDateTime", "org.bson.codecs.BsonDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonDateTime decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonDateTimeCodec.encode(org.bson.BsonWriter, org.bson.BsonDateTime, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonDateTime, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonDateTime>", "org.bson.codecs.BsonDateTimeCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonDateTime> getEncoderClass()"], ["void", "org.bson.codecs.BsonDateTimeCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonDateTimeCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.UuidCodec", "org.bson.codecs.UuidCodec(org.bson.UuidRepresentation)", "public org.bson.codecs.UuidCodec(org.bson.UuidRepresentation)"], ["org.bson.codecs.UuidCodec", "org.bson.codecs.UuidCodec()", "public org.bson.codecs.UuidCodec()"], ["void", "org.bson.codecs.UuidCodec.encode(org.bson.BsonWriter, java.util.UUID, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.UUID, org.bson.codecs.EncoderContext)"], ["java.util.UUID", "org.bson.codecs.UuidCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.UUID decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.UUID>", "org.bson.codecs.UuidCodec.getEncoderClass()", "public java.lang.Class<java.util.UUID> getEncoderClass()"], ["void", "org.bson.codecs.UuidCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.UuidCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.BigDecimalCodec", "org.bson.codecs.BigDecimalCodec()", "public org.bson.codecs.BigDecimalCodec()"], ["void", "org.bson.codecs.BigDecimalCodec.encode(org.bson.BsonWriter, java.math.BigDecimal, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.math.BigDecimal, org.bson.codecs.EncoderContext)"], ["java.math.BigDecimal", "org.bson.codecs.BigDecimalCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.math.BigDecimal decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.math.BigDecimal>", "org.bson.codecs.BigDecimalCodec.getEncoderClass()", "public java.lang.Class<java.math.BigDecimal> getEncoderClass()"], ["void", "org.bson.codecs.BigDecimalCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BigDecimalCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "org.bson.codecs.DocumentCodec$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.bson.codecs.BsonSymbolCodec", "org.bson.codecs.BsonSymbolCodec()", "public org.bson.codecs.BsonSymbolCodec()"], ["org.bson.BsonSymbol", "org.bson.codecs.BsonSymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonSymbol decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonSymbolCodec.encode(org.bson.BsonWriter, org.bson.BsonSymbol, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonSymbol, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonSymbol>", "org.bson.codecs.BsonSymbolCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonSymbol> getEncoderClass()"], ["void", "org.bson.codecs.BsonSymbolCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonSymbolCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec()", "public org.bson.codecs.MapCodec()"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)", "public org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap)"], ["org.bson.codecs.MapCodec", "org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)", "public org.bson.codecs.MapCodec(org.bson.codecs.configuration.CodecRegistry, org.bson.codecs.BsonTypeClassMap, org.bson.Transformer)"], ["void", "org.bson.codecs.MapCodec.encode(org.bson.BsonWriter, java.util.Map<java.lang.String, java.lang.Object>, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.util.Map<java.lang.String, java.lang.Object>, org.bson.codecs.EncoderContext)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.bson.codecs.MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.util.Map<java.lang.String, java.lang.Object> decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Class<java.util.Map<java.lang.String, java.lang.Object>>", "org.bson.codecs.MapCodec.getEncoderClass()", "public java.lang.Class<java.util.Map<java.lang.String, java.lang.Object>> getEncoderClass()"], ["void", "org.bson.codecs.MapCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.MapCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["java.lang.Object", "org.bson.codecs.MapCodec$1.transform(java.lang.Object)", "public java.lang.Object transform(java.lang.Object)"], ["org.bson.codecs.BsonArrayCodec", "org.bson.codecs.BsonArrayCodec()", "public org.bson.codecs.BsonArrayCodec()"], ["org.bson.codecs.BsonArrayCodec", "org.bson.codecs.BsonArrayCodec(org.bson.codecs.configuration.CodecRegistry)", "public org.bson.codecs.BsonArrayCodec(org.bson.codecs.configuration.CodecRegistry)"], ["org.bson.BsonArray", "org.bson.codecs.BsonArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public org.bson.BsonArray decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["void", "org.bson.codecs.BsonArrayCodec.encode(org.bson.BsonWriter, org.bson.BsonArray, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, org.bson.BsonArray, org.bson.codecs.EncoderContext)"], ["java.lang.Class<org.bson.BsonArray>", "org.bson.codecs.BsonArrayCodec.getEncoderClass()", "public java.lang.Class<org.bson.BsonArray> getEncoderClass()"], ["void", "org.bson.codecs.BsonArrayCodec.encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)", "public void encode(org.bson.BsonWriter, java.lang.Object, org.bson.codecs.EncoderContext)"], ["java.lang.Object", "org.bson.codecs.BsonArrayCodec.decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)", "public java.lang.Object decode(org.bson.BsonReader, org.bson.codecs.DecoderContext)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context, org.bson.BsonContextType, int)", "public org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context, org.bson.BsonContextType, int)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context)", "public org.bson.BsonBinaryWriter$Context(org.bson.BsonBinaryWriter, org.bson.BsonBinaryWriter$Context)"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context.getParentContext()", "public org.bson.BsonBinaryWriter$Context getParentContext()"], ["org.bson.BsonBinaryWriter$Context", "org.bson.BsonBinaryWriter$Context.copy()", "public org.bson.BsonBinaryWriter$Context copy()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BsonBinaryWriter$Context.copy()", "public org.bson.AbstractBsonWriter$Context copy()"], ["org.bson.AbstractBsonWriter$Context", "org.bson.BsonBinaryWriter$Context.getParentContext()", "public org.bson.AbstractBsonWriter$Context getParentContext()"], ["<T> T", "org.bson.assertions.Assertions.notNull(java.lang.String, T)", "public static <T> T notNull(java.lang.String, T)"], ["void", "org.bson.assertions.Assertions.isTrue(java.lang.String, boolean)", "public static void isTrue(java.lang.String, boolean)"], ["void", "org.bson.assertions.Assertions.isTrueArgument(java.lang.String, boolean)", "public static void isTrueArgument(java.lang.String, boolean)"], ["<T> T", "org.bson.assertions.Assertions.isTrueArgument(java.lang.String, T, boolean)", "public static <T> T isTrueArgument(java.lang.String, T, boolean)"], ["<T> T", "org.bson.assertions.Assertions.convertToType(java.lang.Class<T>, java.lang.Object, java.lang.String)", "public static <T> T convertToType(java.lang.Class<T>, java.lang.Object, java.lang.String)"], ["void", "org.bson.AbstractBsonReader$Mark.reset()", "public void reset()"], ["org.bson.LazyBSONDecoder", "org.bson.LazyBSONDecoder()", "public org.bson.LazyBSONDecoder()"], ["org.bson.BSONObject", "org.bson.LazyBSONDecoder.readObject(byte[])", "public org.bson.BSONObject readObject(byte[])"], ["org.bson.BSONObject", "org.bson.LazyBSONDecoder.readObject(java.io.InputStream)", "public org.bson.BSONObject readObject(java.io.InputStream) throws java.io.IOException"], ["int", "org.bson.LazyBSONDecoder.decode(byte[], org.bson.BSONCallback)", "public int decode(byte[], org.bson.BSONCallback)"], ["int", "org.bson.LazyBSONDecoder.decode(java.io.InputStream, org.bson.BSONCallback)", "public int decode(java.io.InputStream, org.bson.BSONCallback) throws java.io.IOException"], ["org.bson.BsonUndefined", "org.bson.BsonUndefined()", "public org.bson.BsonUndefined()"], ["org.bson.BsonType", "org.bson.BsonUndefined.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonUndefined.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonUndefined.hashCode()", "public int hashCode()"], ["org.bson.BsonDocument", "org.bson.BsonValue.asDocument()", "public org.bson.BsonDocument asDocument()"], ["org.bson.BsonArray", "org.bson.BsonValue.asArray()", "public org.bson.BsonArray asArray()"], ["org.bson.BsonString", "org.bson.BsonValue.asString()", "public org.bson.BsonString asString()"], ["org.bson.BsonNumber", "org.bson.BsonValue.asNumber()", "public org.bson.BsonNumber asNumber()"], ["org.bson.BsonInt32", "org.bson.BsonValue.asInt32()", "public org.bson.BsonInt32 asInt32()"], ["org.bson.BsonInt64", "org.bson.BsonValue.asInt64()", "public org.bson.BsonInt64 asInt64()"], ["org.bson.BsonDecimal128", "org.bson.BsonValue.asDecimal128()", "public org.bson.BsonDecimal128 asDecimal128()"], ["org.bson.BsonDouble", "org.bson.BsonValue.asDouble()", "public org.bson.BsonDouble asDouble()"], ["org.bson.BsonBoolean", "org.bson.BsonValue.asBoolean()", "public org.bson.BsonBoolean asBoolean()"], ["org.bson.BsonObjectId", "org.bson.BsonValue.asObjectId()", "public org.bson.BsonObjectId asObjectId()"], ["org.bson.BsonDbPointer", "org.bson.BsonValue.asDBPointer()", "public org.bson.BsonDbPointer asDBPointer()"], ["org.bson.BsonTimestamp", "org.bson.BsonValue.asTimestamp()", "public org.bson.BsonTimestamp asTimestamp()"], ["org.bson.BsonBinary", "org.bson.BsonValue.asBinary()", "public org.bson.BsonBinary asBinary()"], ["org.bson.BsonDateTime", "org.bson.BsonValue.asDateTime()", "public org.bson.BsonDateTime asDateTime()"], ["org.bson.BsonSymbol", "org.bson.BsonValue.asSymbol()", "public org.bson.BsonSymbol asSymbol()"], ["org.bson.BsonRegularExpression", "org.bson.BsonValue.asRegularExpression()", "public org.bson.BsonRegularExpression asRegularExpression()"], ["org.bson.BsonJavaScript", "org.bson.BsonValue.asJavaScript()", "public org.bson.BsonJavaScript asJavaScript()"], ["org.bson.BsonJavaScriptWithScope", "org.bson.BsonValue.asJavaScriptWithScope()", "public org.bson.BsonJavaScriptWithScope asJavaScriptWithScope()"], ["boolean", "org.bson.BsonValue.isNull()", "public boolean isNull()"], ["boolean", "org.bson.BsonValue.isDocument()", "public boolean isDocument()"], ["boolean", "org.bson.BsonValue.isArray()", "public boolean isArray()"], ["boolean", "org.bson.BsonValue.isString()", "public boolean isString()"], ["boolean", "org.bson.BsonValue.isNumber()", "public boolean isNumber()"], ["boolean", "org.bson.BsonValue.isInt32()", "public boolean isInt32()"], ["boolean", "org.bson.BsonValue.isInt64()", "public boolean isInt64()"], ["boolean", "org.bson.BsonValue.isDecimal128()", "public boolean isDecimal128()"], ["boolean", "org.bson.BsonValue.isDouble()", "public boolean isDouble()"], ["boolean", "org.bson.BsonValue.isBoolean()", "public boolean isBoolean()"], ["boolean", "org.bson.BsonValue.isObjectId()", "public boolean isObjectId()"], ["boolean", "org.bson.BsonValue.isDBPointer()", "public boolean isDBPointer()"], ["boolean", "org.bson.BsonValue.isTimestamp()", "public boolean isTimestamp()"], ["boolean", "org.bson.BsonValue.isBinary()", "public boolean isBinary()"], ["boolean", "org.bson.BsonValue.isDateTime()", "public boolean isDateTime()"], ["boolean", "org.bson.BsonValue.isSymbol()", "public boolean isSymbol()"], ["boolean", "org.bson.BsonValue.isRegularExpression()", "public boolean isRegularExpression()"], ["boolean", "org.bson.BsonValue.isJavaScript()", "public boolean isJavaScript()"], ["boolean", "org.bson.BsonValue.isJavaScriptWithScope()", "public boolean isJavaScriptWithScope()"], ["int", "org.bson.LazyBSONObject$1.size()", "public int size()"], ["boolean", "org.bson.LazyBSONObject$1.isEmpty()", "public boolean isEmpty()"], ["java.util.Iterator<java.util.Map$Entry<java.lang.String, java.lang.Object>>", "org.bson.LazyBSONObject$1.iterator()", "public java.util.Iterator<java.util.Map$Entry<java.lang.String, java.lang.Object>> iterator()"], ["java.lang.Object[]", "org.bson.LazyBSONObject$1.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.bson.LazyBSONObject$1.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.bson.LazyBSONObject$1.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["boolean", "org.bson.LazyBSONObject$1.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.LazyBSONObject$1.add(java.util.Map$Entry<java.lang.String, java.lang.Object>)", "public boolean add(java.util.Map$Entry<java.lang.String, java.lang.Object>)"], ["boolean", "org.bson.LazyBSONObject$1.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.LazyBSONObject$1.addAll(java.util.Collection<? extends java.util.Map$Entry<java.lang.String, java.lang.Object>>)", "public boolean addAll(java.util.Collection<? extends java.util.Map$Entry<java.lang.String, java.lang.Object>>)"], ["boolean", "org.bson.LazyBSONObject$1.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.bson.LazyBSONObject$1.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["void", "org.bson.LazyBSONObject$1.clear()", "public void clear()"], ["boolean", "org.bson.LazyBSONObject$1.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["org.bson.EmptyBSONCallback", "org.bson.EmptyBSONCallback()", "public org.bson.EmptyBSONCallback()"], ["void", "org.bson.EmptyBSONCallback.objectStart()", "public void objectStart()"], ["void", "org.bson.EmptyBSONCallback.objectStart(java.lang.String)", "public void objectStart(java.lang.String)"], ["java.lang.Object", "org.bson.EmptyBSONCallback.objectDone()", "public java.lang.Object objectDone()"], ["void", "org.bson.EmptyBSONCallback.reset()", "public void reset()"], ["java.lang.Object", "org.bson.EmptyBSONCallback.get()", "public java.lang.Object get()"], ["org.bson.BSONCallback", "org.bson.EmptyBSONCallback.createBSONCallback()", "public org.bson.BSONCallback createBSONCallback()"], ["void", "org.bson.EmptyBSONCallback.arrayStart()", "public void arrayStart()"], ["void", "org.bson.EmptyBSONCallback.arrayStart(java.lang.String)", "public void arrayStart(java.lang.String)"], ["java.lang.Object", "org.bson.EmptyBSONCallback.arrayDone()", "public java.lang.Object arrayDone()"], ["void", "org.bson.EmptyBSONCallback.gotNull(java.lang.String)", "public void gotNull(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotUndefined(java.lang.String)", "public void gotUndefined(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotMinKey(java.lang.String)", "public void gotMinKey(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotMaxKey(java.lang.String)", "public void gotMaxKey(java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotBoolean(java.lang.String, boolean)", "public void gotBoolean(java.lang.String, boolean)"], ["void", "org.bson.EmptyBSONCallback.gotDouble(java.lang.String, double)", "public void gotDouble(java.lang.String, double)"], ["void", "org.bson.EmptyBSONCallback.gotInt(java.lang.String, int)", "public void gotInt(java.lang.String, int)"], ["void", "org.bson.EmptyBSONCallback.gotLong(java.lang.String, long)", "public void gotLong(java.lang.String, long)"], ["void", "org.bson.EmptyBSONCallback.gotDecimal128(java.lang.String, org.bson.types.Decimal128)", "public void gotDecimal128(java.lang.String, org.bson.types.Decimal128)"], ["void", "org.bson.EmptyBSONCallback.gotDate(java.lang.String, long)", "public void gotDate(java.lang.String, long)"], ["void", "org.bson.EmptyBSONCallback.gotString(java.lang.String, java.lang.String)", "public void gotString(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotSymbol(java.lang.String, java.lang.String)", "public void gotSymbol(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotRegex(java.lang.String, java.lang.String, java.lang.String)", "public void gotRegex(java.lang.String, java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotTimestamp(java.lang.String, int, int)", "public void gotTimestamp(java.lang.String, int, int)"], ["void", "org.bson.EmptyBSONCallback.gotObjectId(java.lang.String, org.bson.types.ObjectId)", "public void gotObjectId(java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.EmptyBSONCallback.gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)", "public void gotDBRef(java.lang.String, java.lang.String, org.bson.types.ObjectId)"], ["void", "org.bson.EmptyBSONCallback.gotBinaryArray(java.lang.String, byte[])", "public void gotBinaryArray(java.lang.String, byte[])"], ["void", "org.bson.EmptyBSONCallback.gotBinary(java.lang.String, byte, byte[])", "public void gotBinary(java.lang.String, byte, byte[])"], ["void", "org.bson.EmptyBSONCallback.gotUUID(java.lang.String, long, long)", "public void gotUUID(java.lang.String, long, long)"], ["void", "org.bson.EmptyBSONCallback.gotCode(java.lang.String, java.lang.String)", "public void gotCode(java.lang.String, java.lang.String)"], ["void", "org.bson.EmptyBSONCallback.gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)", "public void gotCodeWScope(java.lang.String, java.lang.String, java.lang.Object)"], ["org.bson.BasicBSONDecoder", "org.bson.BasicBSONDecoder()", "public org.bson.BasicBSONDecoder()"], ["org.bson.BSONObject", "org.bson.BasicBSONDecoder.readObject(byte[])", "public org.bson.BSONObject readObject(byte[])"], ["org.bson.BSONObject", "org.bson.BasicBSONDecoder.readObject(java.io.InputStream)", "public org.bson.BSONObject readObject(java.io.InputStream) throws java.io.IOException"], ["int", "org.bson.BasicBSONDecoder.decode(byte[], org.bson.BSONCallback)", "public int decode(byte[], org.bson.BSONCallback)"], ["int", "org.bson.BasicBSONDecoder.decode(java.io.InputStream, org.bson.BSONCallback)", "public int decode(java.io.InputStream, org.bson.BSONCallback) throws java.io.IOException"], ["org.bson.LazyBSONList$LazyBSONListIterator", "org.bson.LazyBSONList$LazyBSONListIterator(org.bson.LazyBSONList)", "public org.bson.LazyBSONList$LazyBSONListIterator(org.bson.LazyBSONList)"], ["boolean", "org.bson.LazyBSONList$LazyBSONListIterator.hasNext()", "public boolean hasNext()"], ["java.lang.Object", "org.bson.LazyBSONList$LazyBSONListIterator.next()", "public java.lang.Object next()"], ["void", "org.bson.LazyBSONList$LazyBSONListIterator.remove()", "public void remove()"], ["org.bson.BsonElement", "org.bson.BsonElement(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonElement(java.lang.String, org.bson.BsonValue)"], ["java.lang.String", "org.bson.BsonElement.getName()", "public java.lang.String getName()"], ["org.bson.BsonValue", "org.bson.BsonElement.getValue()", "public org.bson.BsonValue getValue()"], ["boolean", "org.bson.BsonElement.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonElement.hashCode()", "public int hashCode()"], ["org.bson.BsonMaxKey", "org.bson.BsonMaxKey()", "public org.bson.BsonMaxKey()"], ["org.bson.BsonType", "org.bson.BsonMaxKey.getBsonType()", "public org.bson.BsonType getBsonType()"], ["boolean", "org.bson.BsonMaxKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonMaxKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonMaxKey.toString()", "public java.lang.String toString()"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128.parse(java.lang.String)", "public static org.bson.types.Decimal128 parse(java.lang.String)"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128.fromIEEE754BIDEncoding(long, long)", "public static org.bson.types.Decimal128 fromIEEE754BIDEncoding(long, long)"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128(long)", "public org.bson.types.Decimal128(long)"], ["org.bson.types.Decimal128", "org.bson.types.Decimal128(java.math.BigDecimal)", "public org.bson.types.Decimal128(java.math.BigDecimal)"], ["long", "org.bson.types.Decimal128.getHigh()", "public long getHigh()"], ["long", "org.bson.types.Decimal128.getLow()", "public long getLow()"], ["java.math.BigDecimal", "org.bson.types.Decimal128.bigDecimalValue()", "public java.math.BigDecimal bigDecimalValue()"], ["boolean", "org.bson.types.Decimal128.isNegative()", "public boolean isNegative()"], ["boolean", "org.bson.types.Decimal128.isInfinite()", "public boolean isInfinite()"], ["boolean", "org.bson.types.Decimal128.isFinite()", "public boolean isFinite()"], ["boolean", "org.bson.types.Decimal128.isNaN()", "public boolean isNaN()"], ["int", "org.bson.types.Decimal128.compareTo(org.bson.types.Decimal128)", "public int compareTo(org.bson.types.Decimal128)"], ["int", "org.bson.types.Decimal128.intValue()", "public int intValue()"], ["long", "org.bson.types.Decimal128.longValue()", "public long longValue()"], ["float", "org.bson.types.Decimal128.floatValue()", "public float floatValue()"], ["double", "org.bson.types.Decimal128.doubleValue()", "public double doubleValue()"], ["boolean", "org.bson.types.Decimal128.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Decimal128.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.Decimal128.toString()", "public java.lang.String toString()"], ["int", "org.bson.types.Decimal128.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId.get()", "public static org.bson.types.ObjectId get()"], ["boolean", "org.bson.types.ObjectId.isValid(java.lang.String)", "public static boolean isValid(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId()", "public org.bson.types.ObjectId()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date)", "public org.bson.types.ObjectId(java.util.Date)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date, int)", "public org.bson.types.ObjectId(java.util.Date, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.util.Date, int, short, int)", "public org.bson.types.ObjectId(java.util.Date, int, short, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(int, int, short, int)", "public org.bson.types.ObjectId(int, int, short, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(int, int)", "public org.bson.types.ObjectId(int, int)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.lang.String)", "public org.bson.types.ObjectId(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(byte[])", "public org.bson.types.ObjectId(byte[])"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId(java.nio.ByteBuffer)", "public org.bson.types.ObjectId(java.nio.ByteBuffer)"], ["byte[]", "org.bson.types.ObjectId.toByteArray()", "public byte[] toByteArray()"], ["void", "org.bson.types.ObjectId.putToByteBuffer(java.nio.ByteBuffer)", "public void putToByteBuffer(java.nio.ByteBuffer)"], ["int", "org.bson.types.ObjectId.getTimestamp()", "public int getTimestamp()"], ["java.util.Date", "org.bson.types.ObjectId.getDate()", "public java.util.Date getDate()"], ["java.lang.String", "org.bson.types.ObjectId.toHexString()", "public java.lang.String toHexString()"], ["boolean", "org.bson.types.ObjectId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.ObjectId.hashCode()", "public int hashCode()"], ["int", "org.bson.types.ObjectId.compareTo(org.bson.types.ObjectId)", "public int compareTo(org.bson.types.ObjectId)"], ["java.lang.String", "org.bson.types.ObjectId.toString()", "public java.lang.String toString()"], ["org.bson.types.ObjectId", "org.bson.types.ObjectId.createFromLegacyFormat(int, int, int)", "public static org.bson.types.ObjectId createFromLegacyFormat(int, int, int)"], ["int", "org.bson.types.ObjectId.getCurrentCounter()", "public static int getCurrentCounter()"], ["int", "org.bson.types.ObjectId.getGeneratedMachineIdentifier()", "public static int getGeneratedMachineIdentifier()"], ["int", "org.bson.types.ObjectId.getGeneratedProcessIdentifier()", "public static int getGeneratedProcessIdentifier()"], ["int", "org.bson.types.ObjectId.getMachineIdentifier()", "public int getMachineIdentifier()"], ["short", "org.bson.types.ObjectId.getProcessIdentifier()", "public short getProcessIdentifier()"], ["int", "org.bson.types.ObjectId.getCounter()", "public int getCounter()"], ["int", "org.bson.types.ObjectId.getTimeSecond()", "public int getTimeSecond()"], ["long", "org.bson.types.ObjectId.getTime()", "public long getTime()"], ["java.lang.String", "org.bson.types.ObjectId.toStringMongod()", "public java.lang.String toStringMongod()"], ["int", "org.bson.types.ObjectId.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.types.Symbol", "org.bson.types.Symbol(java.lang.String)", "public org.bson.types.Symbol(java.lang.String)"], ["java.lang.String", "org.bson.types.Symbol.getSymbol()", "public java.lang.String getSymbol()"], ["boolean", "org.bson.types.Symbol.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Symbol.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.Symbol.toString()", "public java.lang.String toString()"], ["org.bson.types.Binary", "org.bson.types.Binary(byte[])", "public org.bson.types.Binary(byte[])"], ["org.bson.types.Binary", "org.bson.types.Binary(org.bson.BsonBinarySubType, byte[])", "public org.bson.types.Binary(org.bson.BsonBinarySubType, byte[])"], ["org.bson.types.Binary", "org.bson.types.Binary(byte, byte[])", "public org.bson.types.Binary(byte, byte[])"], ["byte", "org.bson.types.Binary.getType()", "public byte getType()"], ["byte[]", "org.bson.types.Binary.getData()", "public byte[] getData()"], ["int", "org.bson.types.Binary.length()", "public int length()"], ["boolean", "org.bson.types.Binary.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Binary.hashCode()", "public int hashCode()"], ["org.bson.types.MaxKey", "org.bson.types.MaxKey()", "public org.bson.types.MaxKey()"], ["boolean", "org.bson.types.MaxKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.MaxKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.MaxKey.toString()", "public java.lang.String toString()"], ["org.bson.types.BSONTimestamp", "org.bson.types.BSONTimestamp()", "public org.bson.types.BSONTimestamp()"], ["org.bson.types.BSONTimestamp", "org.bson.types.BSONTimestamp(int, int)", "public org.bson.types.BSONTimestamp(int, int)"], ["int", "org.bson.types.BSONTimestamp.getTime()", "public int getTime()"], ["int", "org.bson.types.BSONTimestamp.getInc()", "public int getInc()"], ["java.lang.String", "org.bson.types.BSONTimestamp.toString()", "public java.lang.String toString()"], ["int", "org.bson.types.BSONTimestamp.compareTo(org.bson.types.BSONTimestamp)", "public int compareTo(org.bson.types.BSONTimestamp)"], ["int", "org.bson.types.BSONTimestamp.hashCode()", "public int hashCode()"], ["boolean", "org.bson.types.BSONTimestamp.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.BSONTimestamp.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["org.bson.types.CodeWScope", "org.bson.types.CodeWScope(java.lang.String, org.bson.BSONObject)", "public org.bson.types.CodeWScope(java.lang.String, org.bson.BSONObject)"], ["org.bson.BSONObject", "org.bson.types.CodeWScope.getScope()", "public org.bson.BSONObject getScope()"], ["boolean", "org.bson.types.CodeWScope.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.CodeWScope.hashCode()", "public int hashCode()"], ["org.bson.types.BasicBSONList", "org.bson.types.BasicBSONList()", "public org.bson.types.BasicBSONList()"], ["java.lang.Object", "org.bson.types.BasicBSONList.put(java.lang.String, java.lang.Object)", "public java.lang.Object put(java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.bson.types.BasicBSONList.put(int, java.lang.Object)", "public java.lang.Object put(int, java.lang.Object)"], ["void", "org.bson.types.BasicBSONList.putAll(java.util.Map)", "public void putAll(java.util.Map)"], ["void", "org.bson.types.BasicBSONList.putAll(org.bson.BSONObject)", "public void putAll(org.bson.BSONObject)"], ["java.lang.Object", "org.bson.types.BasicBSONList.get(java.lang.String)", "public java.lang.Object get(java.lang.String)"], ["java.lang.Object", "org.bson.types.BasicBSONList.removeField(java.lang.String)", "public java.lang.Object removeField(java.lang.String)"], ["boolean", "org.bson.types.BasicBSONList.containsKey(java.lang.String)", "public boolean containsKey(java.lang.String)"], ["boolean", "org.bson.types.BasicBSONList.containsField(java.lang.String)", "public boolean containsField(java.lang.String)"], ["java.util.Set<java.lang.String>", "org.bson.types.BasicBSONList.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.util.Map", "org.bson.types.BasicBSONList.toMap()", "public java.util.Map toMap()"], ["org.bson.types.CodeWithScope", "org.bson.types.CodeWithScope(java.lang.String, org.bson.Document)", "public org.bson.types.CodeWithScope(java.lang.String, org.bson.Document)"], ["org.bson.Document", "org.bson.types.CodeWithScope.getScope()", "public org.bson.Document getScope()"], ["boolean", "org.bson.types.CodeWithScope.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.CodeWithScope.hashCode()", "public int hashCode()"], ["int", "org.bson.types.StringRangeSet.size()", "public int size()"], ["boolean", "org.bson.types.StringRangeSet.isEmpty()", "public boolean isEmpty()"], ["boolean", "org.bson.types.StringRangeSet.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator<java.lang.String>", "org.bson.types.StringRangeSet.iterator()", "public java.util.Iterator<java.lang.String> iterator()"], ["java.lang.Object[]", "org.bson.types.StringRangeSet.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "org.bson.types.StringRangeSet.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "org.bson.types.StringRangeSet.add(java.lang.String)", "public boolean add(java.lang.String)"], ["boolean", "org.bson.types.StringRangeSet.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.types.StringRangeSet.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "org.bson.types.StringRangeSet.addAll(java.util.Collection<? extends java.lang.String>)", "public boolean addAll(java.util.Collection<? extends java.lang.String>)"], ["boolean", "org.bson.types.StringRangeSet.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["boolean", "org.bson.types.StringRangeSet.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["void", "org.bson.types.StringRangeSet.clear()", "public void clear()"], ["boolean", "org.bson.types.StringRangeSet.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["org.bson.types.MinKey", "org.bson.types.MinKey()", "public org.bson.types.MinKey()"], ["boolean", "org.bson.types.MinKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.MinKey.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.MinKey.toString()", "public java.lang.String toString()"], ["boolean", "org.bson.types.StringRangeSet$1.hasNext()", "public boolean hasNext()"], ["java.lang.String", "org.bson.types.StringRangeSet$1.next()", "public java.lang.String next()"], ["void", "org.bson.types.StringRangeSet$1.remove()", "public void remove()"], ["java.lang.Object", "org.bson.types.StringRangeSet$1.next()", "public java.lang.Object next()"], ["org.bson.types.Code", "org.bson.types.Code(java.lang.String)", "public org.bson.types.Code(java.lang.String)"], ["java.lang.String", "org.bson.types.Code.getCode()", "public java.lang.String getCode()"], ["boolean", "org.bson.types.Code.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.types.Code.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.types.Code.toString()", "public java.lang.String toString()"], ["org.bson.BsonBinary", "org.bson.BsonBinary(byte[])", "public org.bson.BsonBinary(byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(org.bson.BsonBinarySubType, byte[])", "public org.bson.BsonBinary(org.bson.BsonBinarySubType, byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(byte, byte[])", "public org.bson.BsonBinary(byte, byte[])"], ["org.bson.BsonBinary", "org.bson.BsonBinary(java.util.UUID)", "public org.bson.BsonBinary(java.util.UUID)"], ["org.bson.BsonBinary", "org.bson.BsonBinary(java.util.UUID, org.bson.UuidRepresentation)", "public org.bson.BsonBinary(java.util.UUID, org.bson.UuidRepresentation)"], ["java.util.UUID", "org.bson.BsonBinary.asUuid()", "public java.util.UUID asUuid()"], ["java.util.UUID", "org.bson.BsonBinary.asUuid(org.bson.UuidRepresentation)", "public java.util.UUID asUuid(org.bson.UuidRepresentation)"], ["org.bson.BsonType", "org.bson.BsonBinary.getBsonType()", "public org.bson.BsonType getBsonType()"], ["byte", "org.bson.BsonBinary.getType()", "public byte getType()"], ["byte[]", "org.bson.BsonBinary.getData()", "public byte[] getData()"], ["boolean", "org.bson.BsonBinary.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonBinary.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonBinary.toString()", "public java.lang.String toString()"], ["org.bson.LazyBSONList", "org.bson.LazyBSONList(byte[], org.bson.LazyBSONCallback)", "public org.bson.LazyBSONList(byte[], org.bson.LazyBSONCallback)"], ["org.bson.LazyBSONList", "org.bson.LazyBSONList(byte[], int, org.bson.LazyBSONCallback)", "public org.bson.LazyBSONList(byte[], int, org.bson.LazyBSONCallback)"], ["int", "org.bson.LazyBSONList.size()", "public int size()"], ["boolean", "org.bson.LazyBSONList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.util.Iterator", "org.bson.LazyBSONList.iterator()", "public java.util.Iterator iterator()"], ["boolean", "org.bson.LazyBSONList.containsAll(java.util.Collection)", "public boolean containsAll(java.util.Collection)"], ["java.lang.Object", "org.bson.LazyBSONList.get(int)", "public java.lang.Object get(int)"], ["int", "org.bson.LazyBSONList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "org.bson.LazyBSONList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator", "org.bson.LazyBSONList.listIterator()", "public java.util.ListIterator listIterator()"], ["java.util.ListIterator", "org.bson.LazyBSONList.listIterator(int)", "public java.util.ListIterator listIterator(int)"], ["boolean", "org.bson.LazyBSONList.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["boolean", "org.bson.LazyBSONList.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "org.bson.LazyBSONList.addAll(java.util.Collection)", "public boolean addAll(java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.addAll(int, java.util.Collection)", "public boolean addAll(int, java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.removeAll(java.util.Collection)", "public boolean removeAll(java.util.Collection)"], ["boolean", "org.bson.LazyBSONList.retainAll(java.util.Collection)", "public boolean retainAll(java.util.Collection)"], ["void", "org.bson.LazyBSONList.clear()", "public void clear()"], ["java.lang.Object", "org.bson.LazyBSONList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["void", "org.bson.LazyBSONList.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "org.bson.LazyBSONList.remove(int)", "public java.lang.Object remove(int)"], ["java.util.List", "org.bson.LazyBSONList.subList(int, int)", "public java.util.List subList(int, int)"], ["java.lang.Object[]", "org.bson.LazyBSONList.toArray()", "public java.lang.Object[] toArray()"], ["java.lang.Object[]", "org.bson.LazyBSONList.toArray(java.lang.Object[])", "public java.lang.Object[] toArray(java.lang.Object[])"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument.parse(java.lang.String)", "public static org.bson.RawBsonDocument parse(java.lang.String)"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument(byte[])", "public org.bson.RawBsonDocument(byte[])"], ["org.bson.RawBsonDocument", "org.bson.RawBsonDocument(byte[], int, int)", "public org.bson.RawBsonDocument(byte[], int, int)"], ["<T>", "org.bson.RawBsonDocument.org.bson.RawBsonDocument(T, org.bson.codecs.Codec<T>)", "public <T> org.bson.RawBsonDocument(T, org.bson.codecs.Codec<T>)"], ["org.bson.ByteBuf", "org.bson.RawBsonDocument.getByteBuffer()", "public org.bson.ByteBuf getByteBuffer()"], ["<T> T", "org.bson.RawBsonDocument.decode(org.bson.codecs.Codec<T>)", "public <T> T decode(org.bson.codecs.Codec<T>)"], ["<T> T", "org.bson.RawBsonDocument.decode(org.bson.codecs.Decoder<T>)", "public <T> T decode(org.bson.codecs.Decoder<T>)"], ["void", "org.bson.RawBsonDocument.clear()", "public void clear()"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.put(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonValue put(java.lang.String, org.bson.BsonValue)"], ["org.bson.BsonDocument", "org.bson.RawBsonDocument.append(java.lang.String, org.bson.BsonValue)", "public org.bson.BsonDocument append(java.lang.String, org.bson.BsonValue)"], ["void", "org.bson.RawBsonDocument.putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)", "public void putAll(java.util.Map<? extends java.lang.String, ? extends org.bson.BsonValue>)"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.remove(java.lang.Object)", "public org.bson.BsonValue remove(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.isEmpty()", "public boolean isEmpty()"], ["int", "org.bson.RawBsonDocument.size()", "public int size()"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>>", "org.bson.RawBsonDocument.entrySet()", "public java.util.Set<java.util.Map$Entry<java.lang.String, org.bson.BsonValue>> entrySet()"], ["java.util.Collection<org.bson.BsonValue>", "org.bson.RawBsonDocument.values()", "public java.util.Collection<org.bson.BsonValue> values()"], ["java.util.Set<java.lang.String>", "org.bson.RawBsonDocument.keySet()", "public java.util.Set<java.lang.String> keySet()"], ["java.lang.String", "org.bson.RawBsonDocument.getFirstKey()", "public java.lang.String getFirstKey()"], ["boolean", "org.bson.RawBsonDocument.containsKey(java.lang.Object)", "public boolean containsKey(java.lang.Object)"], ["boolean", "org.bson.RawBsonDocument.containsValue(java.lang.Object)", "public boolean containsValue(java.lang.Object)"], ["org.bson.BsonValue", "org.bson.RawBsonDocument.get(java.lang.Object)", "public org.bson.BsonValue get(java.lang.Object)"], ["java.lang.String", "org.bson.RawBsonDocument.toJson()", "public java.lang.String toJson()"], ["java.lang.String", "org.bson.RawBsonDocument.toJson(org.bson.json.JsonWriterSettings)", "public java.lang.String toJson(org.bson.json.JsonWriterSettings)"], ["boolean", "org.bson.RawBsonDocument.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.RawBsonDocument.hashCode()", "public int hashCode()"], ["org.bson.BsonDocument", "org.bson.RawBsonDocument.clone()", "public org.bson.BsonDocument clone()"], ["java.lang.Object", "org.bson.RawBsonDocument.remove(java.lang.Object)", "public java.lang.Object remove(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.put(java.lang.Object, java.lang.Object)", "public java.lang.Object put(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.get(java.lang.Object)", "public java.lang.Object get(java.lang.Object)"], ["java.lang.Object", "org.bson.RawBsonDocument.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["org.bson.BsonBinaryReader", "org.bson.BsonBinaryReader(java.nio.ByteBuffer)", "public org.bson.BsonBinaryReader(java.nio.ByteBuffer)"], ["org.bson.BsonBinaryReader", "org.bson.BsonBinaryReader(org.bson.io.BsonInput)", "public org.bson.BsonBinaryReader(org.bson.io.BsonInput)"], ["void", "org.bson.BsonBinaryReader.close()", "public void close()"], ["org.bson.io.BsonInput", "org.bson.BsonBinaryReader.getBsonInput()", "public org.bson.io.BsonInput getBsonInput()"], ["org.bson.BsonType", "org.bson.BsonBinaryReader.readBsonType()", "public org.bson.BsonType readBsonType()"], ["org.bson.types.Decimal128", "org.bson.BsonBinaryReader.doReadDecimal128()", "public org.bson.types.Decimal128 doReadDecimal128()"], ["void", "org.bson.BsonBinaryReader.doReadStartArray()", "public void doReadStartArray()"], ["void", "org.bson.BsonBinaryReader.mark()", "public void mark()"], ["org.bson.BsonReaderMark", "org.bson.BsonBinaryReader.getMark()", "public org.bson.BsonReaderMark getMark()"], ["void", "org.bson.BsonBinaryReader.reset()", "public void reset()"], ["java.util.Map$Entry<java.lang.String, org.bson.BsonValue>", "org.bson.BsonDocumentReader$Context.getNextElement()", "public java.util.Map$Entry<java.lang.String, org.bson.BsonValue> getNextElement()"], ["org.bson.BsonValue", "org.bson.BsonDocumentReader$Context.getNextValue()", "public org.bson.BsonValue getNextValue()"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriterSettings(int)", "public org.bson.BsonBinaryWriterSettings(int)"], ["org.bson.BsonBinaryWriterSettings", "org.bson.BsonBinaryWriterSettings()", "public org.bson.BsonBinaryWriterSettings()"], ["int", "org.bson.BsonBinaryWriterSettings.getMaxDocumentSize()", "public int getMaxDocumentSize()"], ["org.bson.ByteBufNIO", "org.bson.ByteBufNIO(java.nio.ByteBuffer)", "public org.bson.ByteBufNIO(java.nio.ByteBuffer)"], ["int", "org.bson.ByteBufNIO.getReferenceCount()", "public int getReferenceCount()"], ["org.bson.ByteBufNIO", "org.bson.ByteBufNIO.retain()", "public org.bson.ByteBufNIO retain()"], ["void", "org.bson.ByteBufNIO.release()", "public void release()"], ["int", "org.bson.ByteBufNIO.capacity()", "public int capacity()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(int, byte)", "public org.bson.ByteBuf put(int, byte)"], ["int", "org.bson.ByteBufNIO.remaining()", "public int remaining()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(byte[], int, int)", "public org.bson.ByteBuf put(byte[], int, int)"], ["boolean", "org.bson.ByteBufNIO.hasRemaining()", "public boolean hasRemaining()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.put(byte)", "public org.bson.ByteBuf put(byte)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.flip()", "public org.bson.ByteBuf flip()"], ["byte[]", "org.bson.ByteBufNIO.array()", "public byte[] array()"], ["int", "org.bson.ByteBufNIO.limit()", "public int limit()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.position(int)", "public org.bson.ByteBuf position(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.clear()", "public org.bson.ByteBuf clear()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.order(java.nio.ByteOrder)", "public org.bson.ByteBuf order(java.nio.ByteOrder)"], ["byte", "org.bson.ByteBufNIO.get()", "public byte get()"], ["byte", "org.bson.ByteBufNIO.get(int)", "public byte get(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(byte[])", "public org.bson.ByteBuf get(byte[])"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(int, byte[])", "public org.bson.ByteBuf get(int, byte[])"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(byte[], int, int)", "public org.bson.ByteBuf get(byte[], int, int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.get(int, byte[], int, int)", "public org.bson.ByteBuf get(int, byte[], int, int)"], ["long", "org.bson.ByteBufNIO.getLong()", "public long getLong()"], ["long", "org.bson.ByteBufNIO.getLong(int)", "public long getLong(int)"], ["double", "org.bson.ByteBufNIO.getDouble()", "public double getDouble()"], ["double", "org.bson.ByteBufNIO.getDouble(int)", "public double getDouble(int)"], ["int", "org.bson.ByteBufNIO.getInt()", "public int getInt()"], ["int", "org.bson.ByteBufNIO.getInt(int)", "public int getInt(int)"], ["int", "org.bson.ByteBufNIO.position()", "public int position()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.limit(int)", "public org.bson.ByteBuf limit(int)"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.asReadOnly()", "public org.bson.ByteBuf asReadOnly()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.duplicate()", "public org.bson.ByteBuf duplicate()"], ["java.nio.ByteBuffer", "org.bson.ByteBufNIO.asNIO()", "public java.nio.ByteBuffer asNIO()"], ["org.bson.ByteBuf", "org.bson.ByteBufNIO.retain()", "public org.bson.ByteBuf retain()"], ["java.lang.String", "org.bson.StringUtils.join(java.lang.String, java.util.Collection<?>)", "public static java.lang.String join(java.lang.String, java.util.Collection<?>)"], ["org.bson.BsonType", "org.bson.AbstractBsonReader.getCurrentBsonType()", "public org.bson.BsonType getCurrentBsonType()"], ["java.lang.String", "org.bson.AbstractBsonReader.getCurrentName()", "public java.lang.String getCurrentName()"], ["org.bson.AbstractBsonReader$State", "org.bson.AbstractBsonReader.getState()", "public org.bson.AbstractBsonReader$State getState()"], ["void", "org.bson.AbstractBsonReader.close()", "public void close()"], ["org.bson.BsonBinary", "org.bson.AbstractBsonReader.readBinaryData()", "public org.bson.BsonBinary readBinaryData()"], ["byte", "org.bson.AbstractBsonReader.peekBinarySubType()", "public byte peekBinarySubType()"], ["int", "org.bson.AbstractBsonReader.peekBinarySize()", "public int peekBinarySize()"], ["boolean", "org.bson.AbstractBsonReader.readBoolean()", "public boolean readBoolean()"], ["long", "org.bson.AbstractBsonReader.readDateTime()", "public long readDateTime()"], ["double", "org.bson.AbstractBsonReader.readDouble()", "public double readDouble()"], ["void", "org.bson.AbstractBsonReader.readEndArray()", "public void readEndArray()"], ["void", "org.bson.AbstractBsonReader.readEndDocument()", "public void readEndDocument()"], ["int", "org.bson.AbstractBsonReader.readInt32()", "public int readInt32()"], ["long", "org.bson.AbstractBsonReader.readInt64()", "public long readInt64()"], ["org.bson.types.Decimal128", "org.bson.AbstractBsonReader.readDecimal128()", "public org.bson.types.Decimal128 readDecimal128()"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScript()", "public java.lang.String readJavaScript()"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScriptWithScope()", "public java.lang.String readJavaScriptWithScope()"], ["void", "org.bson.AbstractBsonReader.readMaxKey()", "public void readMaxKey()"], ["void", "org.bson.AbstractBsonReader.readMinKey()", "public void readMinKey()"], ["void", "org.bson.AbstractBsonReader.readNull()", "public void readNull()"], ["org.bson.types.ObjectId", "org.bson.AbstractBsonReader.readObjectId()", "public org.bson.types.ObjectId readObjectId()"], ["org.bson.BsonRegularExpression", "org.bson.AbstractBsonReader.readRegularExpression()", "public org.bson.BsonRegularExpression readRegularExpression()"], ["org.bson.BsonDbPointer", "org.bson.AbstractBsonReader.readDBPointer()", "public org.bson.BsonDbPointer readDBPointer()"], ["void", "org.bson.AbstractBsonReader.readStartArray()", "public void readStartArray()"], ["void", "org.bson.AbstractBsonReader.readStartDocument()", "public void readStartDocument()"], ["java.lang.String", "org.bson.AbstractBsonReader.readString()", "public java.lang.String readString()"], ["java.lang.String", "org.bson.AbstractBsonReader.readSymbol()", "public java.lang.String readSymbol()"], ["org.bson.BsonTimestamp", "org.bson.AbstractBsonReader.readTimestamp()", "public org.bson.BsonTimestamp readTimestamp()"], ["void", "org.bson.AbstractBsonReader.readUndefined()", "public void readUndefined()"], ["void", "org.bson.AbstractBsonReader.skipName()", "public void skipName()"], ["void", "org.bson.AbstractBsonReader.skipValue()", "public void skipValue()"], ["org.bson.BsonBinary", "org.bson.AbstractBsonReader.readBinaryData(java.lang.String)", "public org.bson.BsonBinary readBinaryData(java.lang.String)"], ["boolean", "org.bson.AbstractBsonReader.readBoolean(java.lang.String)", "public boolean readBoolean(java.lang.String)"], ["long", "org.bson.AbstractBsonReader.readDateTime(java.lang.String)", "public long readDateTime(java.lang.String)"], ["double", "org.bson.AbstractBsonReader.readDouble(java.lang.String)", "public double readDouble(java.lang.String)"], ["int", "org.bson.AbstractBsonReader.readInt32(java.lang.String)", "public int readInt32(java.lang.String)"], ["long", "org.bson.AbstractBsonReader.readInt64(java.lang.String)", "public long readInt64(java.lang.String)"], ["org.bson.types.Decimal128", "org.bson.AbstractBsonReader.readDecimal128(java.lang.String)", "public org.bson.types.Decimal128 readDecimal128(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScript(java.lang.String)", "public java.lang.String readJavaScript(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readJavaScriptWithScope(java.lang.String)", "public java.lang.String readJavaScriptWithScope(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readMaxKey(java.lang.String)", "public void readMaxKey(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readMinKey(java.lang.String)", "public void readMinKey(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readName()", "public java.lang.String readName()"], ["void", "org.bson.AbstractBsonReader.readName(java.lang.String)", "public void readName(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readNull(java.lang.String)", "public void readNull(java.lang.String)"], ["org.bson.types.ObjectId", "org.bson.AbstractBsonReader.readObjectId(java.lang.String)", "public org.bson.types.ObjectId readObjectId(java.lang.String)"], ["org.bson.BsonRegularExpression", "org.bson.AbstractBsonReader.readRegularExpression(java.lang.String)", "public org.bson.BsonRegularExpression readRegularExpression(java.lang.String)"], ["org.bson.BsonDbPointer", "org.bson.AbstractBsonReader.readDBPointer(java.lang.String)", "public org.bson.BsonDbPointer readDBPointer(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readString(java.lang.String)", "public java.lang.String readString(java.lang.String)"], ["java.lang.String", "org.bson.AbstractBsonReader.readSymbol(java.lang.String)", "public java.lang.String readSymbol(java.lang.String)"], ["org.bson.BsonTimestamp", "org.bson.AbstractBsonReader.readTimestamp(java.lang.String)", "public org.bson.BsonTimestamp readTimestamp(java.lang.String)"], ["void", "org.bson.AbstractBsonReader.readUndefined(java.lang.String)", "public void readUndefined(java.lang.String)"], ["org.bson.BsonObjectId", "org.bson.BsonObjectId()", "public org.bson.BsonObjectId()"], ["org.bson.BsonObjectId", "org.bson.BsonObjectId(org.bson.types.ObjectId)", "public org.bson.BsonObjectId(org.bson.types.ObjectId)"], ["org.bson.types.ObjectId", "org.bson.BsonObjectId.getValue()", "public org.bson.types.ObjectId getValue()"], ["org.bson.BsonType", "org.bson.BsonObjectId.getBsonType()", "public org.bson.BsonType getBsonType()"], ["int", "org.bson.BsonObjectId.compareTo(org.bson.BsonObjectId)", "public int compareTo(org.bson.BsonObjectId)"], ["boolean", "org.bson.BsonObjectId.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.bson.BsonObjectId.hashCode()", "public int hashCode()"], ["java.lang.String", "org.bson.BsonObjectId.toString()", "public java.lang.String toString()"], ["int", "org.bson.BsonObjectId.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"]]}