{"rocksdbjni-5.11.3.jar": [["org.rocksdb.AbstractCompactionFilter$Context", "org.rocksdb.AbstractCompactionFilter$Context(boolean, boolean)", "public org.rocksdb.AbstractCompactionFilter$Context(boolean, boolean)"], ["boolean", "org.rocksdb.AbstractCompactionFilter$Context.isFullCompaction()", "public boolean isFullCompaction()"], ["boolean", "org.rocksdb.AbstractCompactionFilter$Context.isManualCompaction()", "public boolean isManualCompaction()"], ["org.rocksdb.AbstractCompactionFilterFactory", "org.rocksdb.AbstractCompactionFilterFactory()", "public org.rocksdb.AbstractCompactionFilterFactory()"], ["java.lang.String", "org.rocksdb.AbstractComparator.findShortestSeparator(java.lang.String, T)", "public java.lang.String findShortestSeparator(java.lang.String, T)"], ["java.lang.String", "org.rocksdb.AbstractComparator.findShortSuccessor(java.lang.String)", "public java.lang.String findShortSuccessor(java.lang.String)"], ["boolean", "org.rocksdb.AbstractImmutableNativeReference.isOwningHandle()", "public boolean isOwningHandle()"], ["void", "org.rocksdb.AbstractImmutableNativeReference.close()", "public void close()"], ["org.rocksdb.AbstractNativeReference", "org.rocksdb.AbstractNativeReference()", "public org.rocksdb.AbstractNativeReference()"], ["void", "org.rocksdb.AbstractNativeReference.dispose()", "public final void dispose()"], ["boolean", "org.rocksdb.AbstractRocksIterator.isValid()", "public boolean isValid()"], ["void", "org.rocksdb.AbstractRocksIterator.seekToFirst()", "public void seekToFirst()"], ["void", "org.rocksdb.AbstractRocksIterator.seekToLast()", "public void seekToLast()"], ["void", "org.rocksdb.AbstractRocksIterator.seek(byte[])", "public void seek(byte[])"], ["void", "org.rocksdb.AbstractRocksIterator.seekForPrev(byte[])", "public void seekForPrev(byte[])"], ["void", "org.rocksdb.AbstractRocksIterator.next()", "public void next()"], ["void", "org.rocksdb.AbstractRocksIterator.prev()", "public void prev()"], ["void", "org.rocksdb.AbstractRocksIterator.status()", "public void status() throws org.rocksdb.RocksDBException"], ["T", "org.rocksdb.AbstractSlice.data()", "public T data()"], ["int", "org.rocksdb.AbstractSlice.size()", "public int size()"], ["boolean", "org.rocksdb.AbstractSlice.empty()", "public boolean empty()"], ["java.lang.String", "org.rocksdb.AbstractSlice.toString(boolean)", "public java.lang.String toString(boolean)"], ["java.lang.String", "org.rocksdb.AbstractSlice.toString()", "public java.lang.String toString()"], ["int", "org.rocksdb.AbstractSlice.compare(org.rocksdb.AbstractSlice<?>)", "public int compare(org.rocksdb.AbstractSlice<?>)"], ["int", "org.rocksdb.AbstractSlice.hashCode()", "public int hashCode()"], ["boolean", "org.rocksdb.AbstractSlice.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["boolean", "org.rocksdb.AbstractSlice.startsWith(org.rocksdb.AbstractSlice<?>)", "public boolean startsWith(org.rocksdb.AbstractSlice<?>)"], ["int", "org.rocksdb.AbstractWriteBatch.count()", "public int count()"], ["void", "org.rocksdb.AbstractWriteBatch.put(byte[], byte[])", "public void put(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.put(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void put(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.merge(byte[], byte[])", "public void merge(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.remove(byte[])", "public void remove(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.remove(org.rocksdb.ColumnFamilyHandle, byte[])", "public void remove(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.delete(byte[])", "public void delete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.delete(org.rocksdb.ColumnFamilyHandle, byte[])", "public void delete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.singleDelete(byte[])", "public void singleDelete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[])", "public void singleDelete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.deleteRange(byte[], byte[])", "public void deleteRange(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.putLogData(byte[])", "public void putLogData(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.clear()", "public void clear()"], ["void", "org.rocksdb.AbstractWriteBatch.setSavePoint()", "public void setSavePoint()"], ["void", "org.rocksdb.AbstractWriteBatch.rollbackToSavePoint()", "public void rollbackToSavePoint() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.popSavePoint()", "public void popSavePoint() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.AbstractWriteBatch.setMaxBytes(long)", "public void setMaxBytes(long)"], ["org.rocksdb.WriteBatch", "org.rocksdb.AbstractWriteBatch.getWriteBatch()", "public org.rocksdb.WriteBatch getWriteBatch()"], ["org.rocksdb.AccessHint[]", "org.rocksdb.AccessHint.values()", "public static org.rocksdb.AccessHint[] values()"], ["org.rocksdb.AccessHint", "org.rocksdb.AccessHint.valueOf(java.lang.String)", "public static org.rocksdb.AccessHint valueOf(java.lang.String)"], ["byte", "org.rocksdb.AccessHint.getValue()", "public byte getValue()"], ["org.rocksdb.AccessHint", "org.rocksdb.AccessHint.getAccessHint(byte)", "public static org.rocksdb.AccessHint getAccessHint(byte)"], ["org.rocksdb.BackupEngine", "org.rocksdb.BackupEngine.open(org.rocksdb.Env, org.rocksdb.BackupableDBOptions)", "public static org.rocksdb.BackupEngine open(org.rocksdb.Env, org.rocksdb.BackupableDBOptions) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.BackupEngine.createNewBackup(org.rocksdb.RocksDB)", "public void createNewBackup(org.rocksdb.RocksDB) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.BackupEngine.createNewBackup(org.rocksdb.RocksDB, boolean)", "public void createNewBackup(org.rocksdb.RocksDB, boolean) throws org.rocksdb.RocksDBException"], ["java.util.List<org.rocksdb.BackupInfo>", "org.rocksdb.BackupEngine.getBackupInfo()", "public java.util.List<org.rocksdb.BackupInfo> getBackupInfo()"], ["int[]", "org.rocksdb.BackupEngine.getCorruptedBackups()", "public int[] getCorruptedBackups()"], ["void", "org.rocksdb.BackupEngine.garbageCollect()", "public void garbageCollect() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.BackupEngine.purgeOldBackups(int)", "public void purgeOldBackups(int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.BackupEngine.deleteBackup(int)", "public void deleteBackup(int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.BackupEngine.restoreDbFromBackup(int, java.lang.String, java.lang.String, org.rocksdb.RestoreOptions)", "public void restoreDbFromBackup(int, java.lang.String, java.lang.String, org.rocksdb.RestoreOptions) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.BackupEngine.restoreDbFromLatestBackup(java.lang.String, java.lang.String, org.rocksdb.RestoreOptions)", "public void restoreDbFromLatestBackup(java.lang.String, java.lang.String, org.rocksdb.RestoreOptions) throws org.rocksdb.RocksDBException"], ["int", "org.rocksdb.BackupInfo.backupId()", "public int backupId()"], ["long", "org.rocksdb.BackupInfo.timestamp()", "public long timestamp()"], ["long", "org.rocksdb.BackupInfo.size()", "public long size()"], ["int", "org.rocksdb.BackupInfo.numberFiles()", "public int numberFiles()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions(java.lang.String)", "public org.rocksdb.BackupableDBOptions(java.lang.String)"], ["java.lang.String", "org.rocksdb.BackupableDBOptions.backupDir()", "public java.lang.String backupDir()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupEnv(org.rocksdb.Env)", "public org.rocksdb.BackupableDBOptions setBackupEnv(org.rocksdb.Env)"], ["org.rocksdb.Env", "org.rocksdb.BackupableDBOptions.backupEnv()", "public org.rocksdb.Env backupEnv()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setShareTableFiles(boolean)", "public org.rocksdb.BackupableDBOptions setShareTableFiles(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.shareTableFiles()", "public boolean shareTableFiles()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setInfoLog(org.rocksdb.Logger)", "public org.rocksdb.BackupableDBOptions setInfoLog(org.rocksdb.Logger)"], ["org.rocksdb.Logger", "org.rocksdb.BackupableDBOptions.infoLog()", "public org.rocksdb.Logger infoLog()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setSync(boolean)", "public org.rocksdb.BackupableDBOptions setSync(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.sync()", "public boolean sync()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setDestroyOldData(boolean)", "public org.rocksdb.BackupableDBOptions setDestroyOldData(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.destroyOldData()", "public boolean destroyOldData()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupLogFiles(boolean)", "public org.rocksdb.BackupableDBOptions setBackupLogFiles(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.backupLogFiles()", "public boolean backupLogFiles()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupRateLimit(long)", "public org.rocksdb.BackupableDBOptions setBackupRateLimit(long)"], ["long", "org.rocksdb.BackupableDBOptions.backupRateLimit()", "public long backupRateLimit()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setBackupRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.BackupableDBOptions setBackupRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.RateLimiter", "org.rocksdb.BackupableDBOptions.backupRateLimiter()", "public org.rocksdb.RateLimiter backupRateLimiter()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setRestoreRateLimit(long)", "public org.rocksdb.BackupableDBOptions setRestoreRateLimit(long)"], ["long", "org.rocksdb.BackupableDBOptions.restoreRateLimit()", "public long restoreRateLimit()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setRestoreRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.BackupableDBOptions setRestoreRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.RateLimiter", "org.rocksdb.BackupableDBOptions.restoreRateLimiter()", "public org.rocksdb.RateLimiter restoreRateLimiter()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setShareFilesWithChecksum(boolean)", "public org.rocksdb.BackupableDBOptions setShareFilesWithChecksum(boolean)"], ["boolean", "org.rocksdb.BackupableDBOptions.shareFilesWithChecksum()", "public boolean shareFilesWithChecksum()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setMaxBackgroundOperations(int)", "public org.rocksdb.BackupableDBOptions setMaxBackgroundOperations(int)"], ["int", "org.rocksdb.BackupableDBOptions.maxBackgroundOperations()", "public int maxBackgroundOperations()"], ["org.rocksdb.BackupableDBOptions", "org.rocksdb.BackupableDBOptions.setCallbackTriggerIntervalSize(long)", "public org.rocksdb.BackupableDBOptions setCallbackTriggerIntervalSize(long)"], ["long", "org.rocksdb.BackupableDBOptions.callbackTriggerIntervalSize()", "public long callbackTriggerIntervalSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig()", "public org.rocksdb.BlockBasedTableConfig()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setNoBlockCache(boolean)", "public org.rocksdb.BlockBasedTableConfig setNoBlockCache(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.noBlockCache()", "public boolean noBlockCache()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockCacheSize(long)", "public org.rocksdb.BlockBasedTableConfig setBlockCacheSize(long)"], ["long", "org.rocksdb.BlockBasedTableConfig.blockCacheSize()", "public long blockCacheSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setCacheNumShardBits(int)", "public org.rocksdb.BlockBasedTableConfig setCacheNumShardBits(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.cacheNumShardBits()", "public int cacheNumShardBits()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockSize(long)", "public org.rocksdb.BlockBasedTableConfig setBlockSize(long)"], ["long", "org.rocksdb.BlockBasedTableConfig.blockSize()", "public long blockSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockSizeDeviation(int)", "public org.rocksdb.BlockBasedTableConfig setBlockSizeDeviation(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.blockSizeDeviation()", "public int blockSizeDeviation()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockRestartInterval(int)", "public org.rocksdb.BlockBasedTableConfig setBlockRestartInterval(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.blockRestartInterval()", "public int blockRestartInterval()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setWholeKeyFiltering(boolean)", "public org.rocksdb.BlockBasedTableConfig setWholeKeyFiltering(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.wholeKeyFiltering()", "public boolean wholeKeyFiltering()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setFilter(org.rocksdb.Filter)", "public org.rocksdb.BlockBasedTableConfig setFilter(org.rocksdb.Filter)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.cacheIndexAndFilterBlocks()", "public boolean cacheIndexAndFilterBlocks()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setCacheIndexAndFilterBlocks(boolean)", "public org.rocksdb.BlockBasedTableConfig setCacheIndexAndFilterBlocks(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.pinL0FilterAndIndexBlocksInCache()", "public boolean pinL0FilterAndIndexBlocksInCache()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setPinL0FilterAndIndexBlocksInCache(boolean)", "public org.rocksdb.BlockBasedTableConfig setPinL0FilterAndIndexBlocksInCache(boolean)"], ["boolean", "org.rocksdb.BlockBasedTableConfig.hashIndexAllowCollision()", "public boolean hashIndexAllowCollision()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setHashIndexAllowCollision(boolean)", "public org.rocksdb.BlockBasedTableConfig setHashIndexAllowCollision(boolean)"], ["long", "org.rocksdb.BlockBasedTableConfig.blockCacheCompressedSize()", "public long blockCacheCompressedSize()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockCacheCompressedSize(long)", "public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressedSize(long)"], ["int", "org.rocksdb.BlockBasedTableConfig.blockCacheCompressedNumShardBits()", "public int blockCacheCompressedNumShardBits()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setBlockCacheCompressedNumShardBits(int)", "public org.rocksdb.BlockBasedTableConfig setBlockCacheCompressedNumShardBits(int)"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setChecksumType(org.rocksdb.ChecksumType)", "public org.rocksdb.BlockBasedTableConfig setChecksumType(org.rocksdb.ChecksumType)"], ["org.rocksdb.ChecksumType", "org.rocksdb.BlockBasedTableConfig.checksumType()", "public org.rocksdb.ChecksumType checksumType()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setIndexType(org.rocksdb.IndexType)", "public org.rocksdb.BlockBasedTableConfig setIndexType(org.rocksdb.IndexType)"], ["org.rocksdb.IndexType", "org.rocksdb.BlockBasedTableConfig.indexType()", "public org.rocksdb.IndexType indexType()"], ["org.rocksdb.BlockBasedTableConfig", "org.rocksdb.BlockBasedTableConfig.setFormatVersion(int)", "public org.rocksdb.BlockBasedTableConfig setFormatVersion(int)"], ["int", "org.rocksdb.BlockBasedTableConfig.formatVersion()", "public int formatVersion()"], ["org.rocksdb.BloomFilter", "org.rocksdb.BloomFilter()", "public org.rocksdb.BloomFilter()"], ["org.rocksdb.BloomFilter", "org.rocksdb.BloomFilter(int)", "public org.rocksdb.BloomFilter(int)"], ["org.rocksdb.BloomFilter", "org.rocksdb.BloomFilter(int, boolean)", "public org.rocksdb.BloomFilter(int, boolean)"], ["org.rocksdb.BuiltinComparator[]", "org.rocksdb.BuiltinComparator.values()", "public static org.rocksdb.BuiltinComparator[] values()"], ["org.rocksdb.BuiltinComparator", "org.rocksdb.BuiltinComparator.valueOf(java.lang.String)", "public static org.rocksdb.BuiltinComparator valueOf(java.lang.String)"], ["org.rocksdb.CassandraCompactionFilter", "org.rocksdb.CassandraCompactionFilter(boolean, int)", "public org.rocksdb.CassandraCompactionFilter(boolean, int)"], ["org.rocksdb.CassandraValueMergeOperator", "org.rocksdb.CassandraValueMergeOperator(int)", "public org.rocksdb.CassandraValueMergeOperator(int)"], ["org.rocksdb.CassandraValueMergeOperator", "org.rocksdb.CassandraValueMergeOperator(int, int)", "public org.rocksdb.CassandraValueMergeOperator(int, int)"], ["org.rocksdb.Checkpoint", "org.rocksdb.Checkpoint.create(org.rocksdb.RocksDB)", "public static org.rocksdb.Checkpoint create(org.rocksdb.RocksDB)"], ["void", "org.rocksdb.Checkpoint.createCheckpoint(java.lang.String)", "public void createCheckpoint(java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.ChecksumType[]", "org.rocksdb.ChecksumType.values()", "public static org.rocksdb.ChecksumType[] values()"], ["org.rocksdb.ChecksumType", "org.rocksdb.ChecksumType.valueOf(java.lang.String)", "public static org.rocksdb.ChecksumType valueOf(java.lang.String)"], ["byte", "org.rocksdb.ChecksumType.getValue()", "public byte getValue()"], ["org.rocksdb.ClockCache", "org.rocksdb.ClockCache(long)", "public org.rocksdb.ClockCache(long)"], ["org.rocksdb.ClockCache", "org.rocksdb.ClockCache(long, int)", "public org.rocksdb.ClockCache(long, int)"], ["org.rocksdb.ClockCache", "org.rocksdb.ClockCache(long, int, boolean)", "public org.rocksdb.ClockCache(long, int, boolean)"], ["org.rocksdb.ColumnFamilyDescriptor", "org.rocksdb.ColumnFamilyDescriptor(byte[])", "public org.rocksdb.ColumnFamilyDescriptor(byte[])"], ["org.rocksdb.ColumnFamilyDescriptor", "org.rocksdb.ColumnFamilyDescriptor(byte[], org.rocksdb.ColumnFamilyOptions)", "public org.rocksdb.ColumnFamilyDescriptor(byte[], org.rocksdb.ColumnFamilyOptions)"], ["byte[]", "org.rocksdb.ColumnFamilyDescriptor.getName()", "public byte[] getName()"], ["byte[]", "org.rocksdb.ColumnFamilyDescriptor.columnFamilyName()", "public byte[] columnFamilyName()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyDescriptor.getOptions()", "public org.rocksdb.ColumnFamilyOptions getOptions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyDescriptor.columnFamilyOptions()", "public org.rocksdb.ColumnFamilyOptions columnFamilyOptions()"], ["boolean", "org.rocksdb.ColumnFamilyDescriptor.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.rocksdb.ColumnFamilyDescriptor.hashCode()", "public int hashCode()"], ["byte[]", "org.rocksdb.ColumnFamilyHandle.getName()", "public byte[] getName()"], ["int", "org.rocksdb.ColumnFamilyHandle.getID()", "public int getID()"], ["org.rocksdb.ColumnFamilyDescriptor", "org.rocksdb.ColumnFamilyHandle.getDescriptor()", "public org.rocksdb.ColumnFamilyDescriptor getDescriptor() throws org.rocksdb.RocksDBException"], ["boolean", "org.rocksdb.ColumnFamilyHandle.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.rocksdb.ColumnFamilyHandle.hashCode()", "public int hashCode()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions()", "public org.rocksdb.ColumnFamilyOptions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.getColumnFamilyOptionsFromProps(java.util.Properties)", "public static org.rocksdb.ColumnFamilyOptions getColumnFamilyOptionsFromProps(java.util.Properties)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeForSmallDb()", "public org.rocksdb.ColumnFamilyOptions optimizeForSmallDb()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeForPointLookup(long)", "public org.rocksdb.ColumnFamilyOptions optimizeForPointLookup(long)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction()", "public org.rocksdb.ColumnFamilyOptions optimizeLevelStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction(long)", "public org.rocksdb.ColumnFamilyOptions optimizeLevelStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction()", "public org.rocksdb.ColumnFamilyOptions optimizeUniversalStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction(long)", "public org.rocksdb.ColumnFamilyOptions optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.BuiltinComparator)", "public org.rocksdb.ColumnFamilyOptions setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)", "public org.rocksdb.ColumnFamilyOptions setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMergeOperatorName(java.lang.String)", "public org.rocksdb.ColumnFamilyOptions setMergeOperatorName(java.lang.String)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMergeOperator(org.rocksdb.MergeOperator)", "public org.rocksdb.ColumnFamilyOptions setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionFilter(org.rocksdb.AbstractCompactionFilter<? extends org.rocksdb.AbstractSlice<?>>)", "public org.rocksdb.ColumnFamilyOptions setCompactionFilter(org.rocksdb.AbstractCompactionFilter<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionFilterFactory(org.rocksdb.AbstractCompactionFilterFactory<? extends org.rocksdb.AbstractCompactionFilter<?>>)", "public org.rocksdb.ColumnFamilyOptions setCompactionFilterFactory(org.rocksdb.AbstractCompactionFilterFactory<? extends org.rocksdb.AbstractCompactionFilter<?>>)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setWriteBufferSize(long)", "public org.rocksdb.ColumnFamilyOptions setWriteBufferSize(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.writeBufferSize()", "public long writeBufferSize()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumber(int)", "public org.rocksdb.ColumnFamilyOptions setMaxWriteBufferNumber(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.maxWriteBufferNumber()", "public int maxWriteBufferNumber()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMinWriteBufferNumberToMerge(int)", "public org.rocksdb.ColumnFamilyOptions setMinWriteBufferNumberToMerge(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.minWriteBufferNumberToMerge()", "public int minWriteBufferNumberToMerge()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.useFixedLengthPrefixExtractor(int)", "public org.rocksdb.ColumnFamilyOptions useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.useCappedPrefixExtractor(int)", "public org.rocksdb.ColumnFamilyOptions useCappedPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.ColumnFamilyOptions setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.ColumnFamilyOptions.compressionType()", "public org.rocksdb.CompressionType compressionType()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>)", "public org.rocksdb.ColumnFamilyOptions setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>)"], ["java.util.List<org.rocksdb.CompressionType>", "org.rocksdb.ColumnFamilyOptions.compressionPerLevel()", "public java.util.List<org.rocksdb.CompressionType> compressionPerLevel()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setBottommostCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.ColumnFamilyOptions setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.ColumnFamilyOptions.bottommostCompressionType()", "public org.rocksdb.CompressionType bottommostCompressionType()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompressionOptions(org.rocksdb.CompressionOptions)", "public org.rocksdb.ColumnFamilyOptions setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.CompressionOptions", "org.rocksdb.ColumnFamilyOptions.compressionOptions()", "public org.rocksdb.CompressionOptions compressionOptions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setNumLevels(int)", "public org.rocksdb.ColumnFamilyOptions setNumLevels(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.numLevels()", "public int numLevels()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelZeroFileNumCompactionTrigger(int)", "public org.rocksdb.ColumnFamilyOptions setLevelZeroFileNumCompactionTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.levelZeroFileNumCompactionTrigger()", "public int levelZeroFileNumCompactionTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelZeroSlowdownWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptions setLevelZeroSlowdownWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.levelZeroSlowdownWritesTrigger()", "public int levelZeroSlowdownWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelZeroStopWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptions setLevelZeroStopWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.levelZeroStopWritesTrigger()", "public int levelZeroStopWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeBase(long)", "public org.rocksdb.ColumnFamilyOptions setTargetFileSizeBase(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.targetFileSizeBase()", "public long targetFileSizeBase()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeMultiplier(int)", "public org.rocksdb.ColumnFamilyOptions setTargetFileSizeMultiplier(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.targetFileSizeMultiplier()", "public int targetFileSizeMultiplier()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelBase(long)", "public org.rocksdb.ColumnFamilyOptions setMaxBytesForLevelBase(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxBytesForLevelBase()", "public long maxBytesForLevelBase()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevelCompactionDynamicLevelBytes(boolean)", "public org.rocksdb.ColumnFamilyOptions setLevelCompactionDynamicLevelBytes(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.levelCompactionDynamicLevelBytes()", "public boolean levelCompactionDynamicLevelBytes()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.ColumnFamilyOptions setMaxBytesForLevelMultiplier(double)"], ["double", "org.rocksdb.ColumnFamilyOptions.maxBytesForLevelMultiplier()", "public double maxBytesForLevelMultiplier()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxCompactionBytes(long)", "public org.rocksdb.ColumnFamilyOptions setMaxCompactionBytes(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxCompactionBytes()", "public long maxCompactionBytes()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setArenaBlockSize(long)", "public org.rocksdb.ColumnFamilyOptions setArenaBlockSize(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.arenaBlockSize()", "public long arenaBlockSize()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setDisableAutoCompactions(boolean)", "public org.rocksdb.ColumnFamilyOptions setDisableAutoCompactions(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.disableAutoCompactions()", "public boolean disableAutoCompactions()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionStyle(org.rocksdb.CompactionStyle)", "public org.rocksdb.ColumnFamilyOptions setCompactionStyle(org.rocksdb.CompactionStyle)"], ["org.rocksdb.CompactionStyle", "org.rocksdb.ColumnFamilyOptions.compactionStyle()", "public org.rocksdb.CompactionStyle compactionStyle()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxTableFilesSizeFIFO(long)", "public org.rocksdb.ColumnFamilyOptions setMaxTableFilesSizeFIFO(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxTableFilesSizeFIFO()", "public long maxTableFilesSizeFIFO()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxSequentialSkipInIterations(long)", "public org.rocksdb.ColumnFamilyOptions setMaxSequentialSkipInIterations(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxSequentialSkipInIterations()", "public long maxSequentialSkipInIterations()"], ["org.rocksdb.MemTableConfig", "org.rocksdb.ColumnFamilyOptions.memTableConfig()", "public org.rocksdb.MemTableConfig memTableConfig()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMemTableConfig(org.rocksdb.MemTableConfig)", "public org.rocksdb.ColumnFamilyOptions setMemTableConfig(org.rocksdb.MemTableConfig)"], ["java.lang.String", "org.rocksdb.ColumnFamilyOptions.memTableFactoryName()", "public java.lang.String memTableFactoryName()"], ["org.rocksdb.TableFormatConfig", "org.rocksdb.ColumnFamilyOptions.tableFormatConfig()", "public org.rocksdb.TableFormatConfig tableFormatConfig()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setTableFormatConfig(org.rocksdb.TableFormatConfig)", "public org.rocksdb.ColumnFamilyOptions setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["java.lang.String", "org.rocksdb.ColumnFamilyOptions.tableFactoryName()", "public java.lang.String tableFactoryName()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateSupport(boolean)", "public org.rocksdb.ColumnFamilyOptions setInplaceUpdateSupport(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.inplaceUpdateSupport()", "public boolean inplaceUpdateSupport()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateNumLocks(long)", "public org.rocksdb.ColumnFamilyOptions setInplaceUpdateNumLocks(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.inplaceUpdateNumLocks()", "public long inplaceUpdateNumLocks()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMemtablePrefixBloomSizeRatio(double)", "public org.rocksdb.ColumnFamilyOptions setMemtablePrefixBloomSizeRatio(double)"], ["double", "org.rocksdb.ColumnFamilyOptions.memtablePrefixBloomSizeRatio()", "public double memtablePrefixBloomSizeRatio()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setBloomLocality(int)", "public org.rocksdb.ColumnFamilyOptions setBloomLocality(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.bloomLocality()", "public int bloomLocality()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxSuccessiveMerges(long)", "public org.rocksdb.ColumnFamilyOptions setMaxSuccessiveMerges(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.maxSuccessiveMerges()", "public long maxSuccessiveMerges()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setOptimizeFiltersForHits(boolean)", "public org.rocksdb.ColumnFamilyOptions setOptimizeFiltersForHits(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.optimizeFiltersForHits()", "public boolean optimizeFiltersForHits()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMemtableHugePageSize(long)", "public org.rocksdb.ColumnFamilyOptions setMemtableHugePageSize(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.memtableHugePageSize()", "public long memtableHugePageSize()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setSoftPendingCompactionBytesLimit(long)", "public org.rocksdb.ColumnFamilyOptions setSoftPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.softPendingCompactionBytesLimit()", "public long softPendingCompactionBytesLimit()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setHardPendingCompactionBytesLimit(long)", "public org.rocksdb.ColumnFamilyOptions setHardPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.ColumnFamilyOptions.hardPendingCompactionBytesLimit()", "public long hardPendingCompactionBytesLimit()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevel0FileNumCompactionTrigger(int)", "public org.rocksdb.ColumnFamilyOptions setLevel0FileNumCompactionTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.level0FileNumCompactionTrigger()", "public int level0FileNumCompactionTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevel0SlowdownWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptions setLevel0SlowdownWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.level0SlowdownWritesTrigger()", "public int level0SlowdownWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setLevel0StopWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptions setLevel0StopWritesTrigger(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.level0StopWritesTrigger()", "public int level0StopWritesTrigger()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplierAdditional(int[])", "public org.rocksdb.ColumnFamilyOptions setMaxBytesForLevelMultiplierAdditional(int[])"], ["int[]", "org.rocksdb.ColumnFamilyOptions.maxBytesForLevelMultiplierAdditional()", "public int[] maxBytesForLevelMultiplierAdditional()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setParanoidFileChecks(boolean)", "public org.rocksdb.ColumnFamilyOptions setParanoidFileChecks(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.paranoidFileChecks()", "public boolean paranoidFileChecks()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumberToMaintain(int)", "public org.rocksdb.ColumnFamilyOptions setMaxWriteBufferNumberToMaintain(int)"], ["int", "org.rocksdb.ColumnFamilyOptions.maxWriteBufferNumberToMaintain()", "public int maxWriteBufferNumberToMaintain()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionPriority(org.rocksdb.CompactionPriority)", "public org.rocksdb.ColumnFamilyOptions setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.CompactionPriority", "org.rocksdb.ColumnFamilyOptions.compactionPriority()", "public org.rocksdb.CompactionPriority compactionPriority()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setReportBgIoStats(boolean)", "public org.rocksdb.ColumnFamilyOptions setReportBgIoStats(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.reportBgIoStats()", "public boolean reportBgIoStats()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)", "public org.rocksdb.ColumnFamilyOptions setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.ColumnFamilyOptions.compactionOptionsUniversal()", "public org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)", "public org.rocksdb.ColumnFamilyOptions setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.ColumnFamilyOptions.compactionOptionsFIFO()", "public org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO()"], ["org.rocksdb.ColumnFamilyOptions", "org.rocksdb.ColumnFamilyOptions.setForceConsistencyChecks(boolean)", "public org.rocksdb.ColumnFamilyOptions setForceConsistencyChecks(boolean)"], ["boolean", "org.rocksdb.ColumnFamilyOptions.forceConsistencyChecks()", "public boolean forceConsistencyChecks()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompressionOptions(org.rocksdb.CompressionOptions)", "public org.rocksdb.ColumnFamilyOptionsInterface setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setBottommostCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.ColumnFamilyOptionsInterface setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setTableFormatConfig(org.rocksdb.TableFormatConfig)", "public org.rocksdb.ColumnFamilyOptionsInterface setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMemTableConfig(org.rocksdb.MemTableConfig)", "public org.rocksdb.ColumnFamilyOptionsInterface setMemTableConfig(org.rocksdb.MemTableConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxTableFilesSizeFIFO(long)", "public org.rocksdb.ColumnFamilyOptionsInterface setMaxTableFilesSizeFIFO(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.ColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelZeroStopWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroStopWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelZeroSlowdownWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroSlowdownWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelZeroFileNumCompactionTrigger(int)", "public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroFileNumCompactionTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.useCappedPrefixExtractor(int)", "public org.rocksdb.ColumnFamilyOptionsInterface useCappedPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.useFixedLengthPrefixExtractor(int)", "public org.rocksdb.ColumnFamilyOptionsInterface useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMergeOperator(org.rocksdb.MergeOperator)", "public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMergeOperatorName(java.lang.String)", "public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperatorName(java.lang.String)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.AbstractComparator)", "public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.AbstractComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setComparator(org.rocksdb.BuiltinComparator)", "public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction(long)", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeUniversalStyleCompaction()", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction(long)", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeLevelStyleCompaction()", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeForPointLookup(long)", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeForPointLookup(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.optimizeForSmallDb()", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeForSmallDb()"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setForceConsistencyChecks(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setForceConsistencyChecks(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setOptimizeFiltersForHits(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setOptimizeFiltersForHits(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionPriority(org.rocksdb.CompactionPriority)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompactionStyle(org.rocksdb.CompactionStyle)", "public org.rocksdb.ColumnFamilyOptionsInterface setCompactionStyle(org.rocksdb.CompactionStyle)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxCompactionBytes(long)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxCompactionBytes(long)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevelCompactionDynamicLevelBytes(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setLevelCompactionDynamicLevelBytes(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setNumLevels(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setNumLevels(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompressionPerLevel(java.util.List)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompressionPerLevel(java.util.List)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setBloomLocality(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setBloomLocality(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateSupport(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setInplaceUpdateSupport(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumberToMaintain(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxWriteBufferNumberToMaintain(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMinWriteBufferNumberToMerge(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMinWriteBufferNumberToMerge(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelBase(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxCompactionBytes(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevel0FileNumCompactionTrigger(int)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setDisableAutoCompactions(boolean)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setWriteBufferSize(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setReportBgIoStats(boolean)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setReportBgIoStats(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setParanoidFileChecks(boolean)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxSuccessiveMerges(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxSequentialSkipInIterations(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setHardPendingCompactionBytesLimit(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setSoftPendingCompactionBytesLimit(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplierAdditional(int[])", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[])"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeMultiplier(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setTargetFileSizeBase(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeBase(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevel0StopWritesTrigger(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setLevel0SlowdownWritesTrigger(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setArenaBlockSize(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setArenaBlockSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMemtableHugePageSize(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtableHugePageSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMemtablePrefixBloomSizeRatio(double)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setInplaceUpdateNumLocks(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.ColumnFamilyOptions.setMaxWriteBufferNumber(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int)"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.CompactionOptionsFIFO()", "public org.rocksdb.CompactionOptionsFIFO()"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.CompactionOptionsFIFO.setMaxTableFilesSize(long)", "public org.rocksdb.CompactionOptionsFIFO setMaxTableFilesSize(long)"], ["long", "org.rocksdb.CompactionOptionsFIFO.maxTableFilesSize()", "public long maxTableFilesSize()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal()", "public org.rocksdb.CompactionOptionsUniversal()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setSizeRatio(int)", "public org.rocksdb.CompactionOptionsUniversal setSizeRatio(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.sizeRatio()", "public int sizeRatio()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setMinMergeWidth(int)", "public org.rocksdb.CompactionOptionsUniversal setMinMergeWidth(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.minMergeWidth()", "public int minMergeWidth()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setMaxMergeWidth(int)", "public org.rocksdb.CompactionOptionsUniversal setMaxMergeWidth(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.maxMergeWidth()", "public int maxMergeWidth()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setMaxSizeAmplificationPercent(int)", "public org.rocksdb.CompactionOptionsUniversal setMaxSizeAmplificationPercent(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.maxSizeAmplificationPercent()", "public int maxSizeAmplificationPercent()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setCompressionSizePercent(int)", "public org.rocksdb.CompactionOptionsUniversal setCompressionSizePercent(int)"], ["int", "org.rocksdb.CompactionOptionsUniversal.compressionSizePercent()", "public int compressionSizePercent()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setStopStyle(org.rocksdb.CompactionStopStyle)", "public org.rocksdb.CompactionOptionsUniversal setStopStyle(org.rocksdb.CompactionStopStyle)"], ["org.rocksdb.CompactionStopStyle", "org.rocksdb.CompactionOptionsUniversal.stopStyle()", "public org.rocksdb.CompactionStopStyle stopStyle()"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.CompactionOptionsUniversal.setAllowTrivialMove(boolean)", "public org.rocksdb.CompactionOptionsUniversal setAllowTrivialMove(boolean)"], ["boolean", "org.rocksdb.CompactionOptionsUniversal.allowTrivialMove()", "public boolean allowTrivialMove()"], ["org.rocksdb.CompactionPriority[]", "org.rocksdb.CompactionPriority.values()", "public static org.rocksdb.CompactionPriority[] values()"], ["org.rocksdb.CompactionPriority", "org.rocksdb.CompactionPriority.valueOf(java.lang.String)", "public static org.rocksdb.CompactionPriority valueOf(java.lang.String)"], ["byte", "org.rocksdb.CompactionPriority.getValue()", "public byte getValue()"], ["org.rocksdb.CompactionPriority", "org.rocksdb.CompactionPriority.getCompactionPriority(byte)", "public static org.rocksdb.CompactionPriority getCompactionPriority(byte)"], ["org.rocksdb.CompactionStopStyle[]", "org.rocksdb.CompactionStopStyle.values()", "public static org.rocksdb.CompactionStopStyle[] values()"], ["org.rocksdb.CompactionStopStyle", "org.rocksdb.CompactionStopStyle.valueOf(java.lang.String)", "public static org.rocksdb.CompactionStopStyle valueOf(java.lang.String)"], ["byte", "org.rocksdb.CompactionStopStyle.getValue()", "public byte getValue()"], ["org.rocksdb.CompactionStopStyle", "org.rocksdb.CompactionStopStyle.getCompactionStopStyle(byte)", "public static org.rocksdb.CompactionStopStyle getCompactionStopStyle(byte)"], ["org.rocksdb.CompactionStyle[]", "org.rocksdb.CompactionStyle.values()", "public static org.rocksdb.CompactionStyle[] values()"], ["org.rocksdb.CompactionStyle", "org.rocksdb.CompactionStyle.valueOf(java.lang.String)", "public static org.rocksdb.CompactionStyle valueOf(java.lang.String)"], ["byte", "org.rocksdb.CompactionStyle.getValue()", "public byte getValue()"], ["org.rocksdb.Comparator", "org.rocksdb.Comparator(org.rocksdb.ComparatorOptions)", "public org.rocksdb.Comparator(org.rocksdb.ComparatorOptions)"], ["org.rocksdb.ComparatorOptions", "org.rocksdb.ComparatorOptions()", "public org.rocksdb.ComparatorOptions()"], ["boolean", "org.rocksdb.ComparatorOptions.useAdaptiveMutex()", "public boolean useAdaptiveMutex()"], ["org.rocksdb.ComparatorOptions", "org.rocksdb.ComparatorOptions.setUseAdaptiveMutex(boolean)", "public org.rocksdb.ComparatorOptions setUseAdaptiveMutex(boolean)"], ["org.rocksdb.ComparatorType[]", "org.rocksdb.ComparatorType.values()", "public static org.rocksdb.ComparatorType[] values()"], ["org.rocksdb.ComparatorType", "org.rocksdb.ComparatorType.valueOf(java.lang.String)", "public static org.rocksdb.ComparatorType valueOf(java.lang.String)"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions()", "public org.rocksdb.CompressionOptions()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setWindowBits(int)", "public org.rocksdb.CompressionOptions setWindowBits(int)"], ["int", "org.rocksdb.CompressionOptions.windowBits()", "public int windowBits()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setLevel(int)", "public org.rocksdb.CompressionOptions setLevel(int)"], ["int", "org.rocksdb.CompressionOptions.level()", "public int level()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setStrategy(int)", "public org.rocksdb.CompressionOptions setStrategy(int)"], ["int", "org.rocksdb.CompressionOptions.strategy()", "public int strategy()"], ["org.rocksdb.CompressionOptions", "org.rocksdb.CompressionOptions.setMaxDictBytes(int)", "public org.rocksdb.CompressionOptions setMaxDictBytes(int)"], ["int", "org.rocksdb.CompressionOptions.maxDictBytes()", "public int maxDictBytes()"], ["org.rocksdb.CompressionType[]", "org.rocksdb.CompressionType.values()", "public static org.rocksdb.CompressionType[] values()"], ["org.rocksdb.CompressionType", "org.rocksdb.CompressionType.valueOf(java.lang.String)", "public static org.rocksdb.CompressionType valueOf(java.lang.String)"], ["org.rocksdb.CompressionType", "org.rocksdb.CompressionType.getCompressionType(java.lang.String)", "public static org.rocksdb.CompressionType getCompressionType(java.lang.String)"], ["org.rocksdb.CompressionType", "org.rocksdb.CompressionType.getCompressionType(byte)", "public static org.rocksdb.CompressionType getCompressionType(byte)"], ["byte", "org.rocksdb.CompressionType.getValue()", "public byte getValue()"], ["java.lang.String", "org.rocksdb.CompressionType.getLibraryName()", "public java.lang.String getLibraryName()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions()", "public org.rocksdb.DBOptions()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.getDBOptionsFromProps(java.util.Properties)", "public static org.rocksdb.DBOptions getDBOptionsFromProps(java.util.Properties)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.optimizeForSmallDb()", "public org.rocksdb.DBOptions optimizeForSmallDb()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setIncreaseParallelism(int)", "public org.rocksdb.DBOptions setIncreaseParallelism(int)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setCreateIfMissing(boolean)", "public org.rocksdb.DBOptions setCreateIfMissing(boolean)"], ["boolean", "org.rocksdb.DBOptions.createIfMissing()", "public boolean createIfMissing()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setCreateMissingColumnFamilies(boolean)", "public org.rocksdb.DBOptions setCreateMissingColumnFamilies(boolean)"], ["boolean", "org.rocksdb.DBOptions.createMissingColumnFamilies()", "public boolean createMissingColumnFamilies()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setEnv(org.rocksdb.Env)", "public org.rocksdb.DBOptions setEnv(org.rocksdb.Env)"], ["org.rocksdb.Env", "org.rocksdb.DBOptions.getEnv()", "public org.rocksdb.Env getEnv()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setErrorIfExists(boolean)", "public org.rocksdb.DBOptions setErrorIfExists(boolean)"], ["boolean", "org.rocksdb.DBOptions.errorIfExists()", "public boolean errorIfExists()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setParanoidChecks(boolean)", "public org.rocksdb.DBOptions setParanoidChecks(boolean)"], ["boolean", "org.rocksdb.DBOptions.paranoidChecks()", "public boolean paranoidChecks()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.DBOptions setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setLogger(org.rocksdb.Logger)", "public org.rocksdb.DBOptions setLogger(org.rocksdb.Logger)"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setInfoLogLevel(org.rocksdb.InfoLogLevel)", "public org.rocksdb.DBOptions setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.DBOptions.infoLogLevel()", "public org.rocksdb.InfoLogLevel infoLogLevel()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxOpenFiles(int)", "public org.rocksdb.DBOptions setMaxOpenFiles(int)"], ["int", "org.rocksdb.DBOptions.maxOpenFiles()", "public int maxOpenFiles()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxFileOpeningThreads(int)", "public org.rocksdb.DBOptions setMaxFileOpeningThreads(int)"], ["int", "org.rocksdb.DBOptions.maxFileOpeningThreads()", "public int maxFileOpeningThreads()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxTotalWalSize(long)", "public org.rocksdb.DBOptions setMaxTotalWalSize(long)"], ["long", "org.rocksdb.DBOptions.maxTotalWalSize()", "public long maxTotalWalSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setStatistics(org.rocksdb.Statistics)", "public org.rocksdb.DBOptions setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.Statistics", "org.rocksdb.DBOptions.statistics()", "public org.rocksdb.Statistics statistics()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseFsync(boolean)", "public org.rocksdb.DBOptions setUseFsync(boolean)"], ["boolean", "org.rocksdb.DBOptions.useFsync()", "public boolean useFsync()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDbPaths(java.util.Collection<org.rocksdb.DbPath>)", "public org.rocksdb.DBOptions setDbPaths(java.util.Collection<org.rocksdb.DbPath>)"], ["java.util.List<org.rocksdb.DbPath>", "org.rocksdb.DBOptions.dbPaths()", "public java.util.List<org.rocksdb.DbPath> dbPaths()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDbLogDir(java.lang.String)", "public org.rocksdb.DBOptions setDbLogDir(java.lang.String)"], ["java.lang.String", "org.rocksdb.DBOptions.dbLogDir()", "public java.lang.String dbLogDir()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalDir(java.lang.String)", "public org.rocksdb.DBOptions setWalDir(java.lang.String)"], ["java.lang.String", "org.rocksdb.DBOptions.walDir()", "public java.lang.String walDir()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDeleteObsoleteFilesPeriodMicros(long)", "public org.rocksdb.DBOptions setDeleteObsoleteFilesPeriodMicros(long)"], ["long", "org.rocksdb.DBOptions.deleteObsoleteFilesPeriodMicros()", "public long deleteObsoleteFilesPeriodMicros()"], ["void", "org.rocksdb.DBOptions.setBaseBackgroundCompactions(int)", "public void setBaseBackgroundCompactions(int)"], ["int", "org.rocksdb.DBOptions.baseBackgroundCompactions()", "public int baseBackgroundCompactions()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxBackgroundCompactions(int)", "public org.rocksdb.DBOptions setMaxBackgroundCompactions(int)"], ["int", "org.rocksdb.DBOptions.maxBackgroundCompactions()", "public int maxBackgroundCompactions()"], ["void", "org.rocksdb.DBOptions.setMaxSubcompactions(int)", "public void setMaxSubcompactions(int)"], ["int", "org.rocksdb.DBOptions.maxSubcompactions()", "public int maxSubcompactions()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxBackgroundFlushes(int)", "public org.rocksdb.DBOptions setMaxBackgroundFlushes(int)"], ["int", "org.rocksdb.DBOptions.maxBackgroundFlushes()", "public int maxBackgroundFlushes()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxBackgroundJobs(int)", "public org.rocksdb.DBOptions setMaxBackgroundJobs(int)"], ["int", "org.rocksdb.DBOptions.maxBackgroundJobs()", "public int maxBackgroundJobs()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxLogFileSize(long)", "public org.rocksdb.DBOptions setMaxLogFileSize(long)"], ["long", "org.rocksdb.DBOptions.maxLogFileSize()", "public long maxLogFileSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setLogFileTimeToRoll(long)", "public org.rocksdb.DBOptions setLogFileTimeToRoll(long)"], ["long", "org.rocksdb.DBOptions.logFileTimeToRoll()", "public long logFileTimeToRoll()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setKeepLogFileNum(long)", "public org.rocksdb.DBOptions setKeepLogFileNum(long)"], ["long", "org.rocksdb.DBOptions.keepLogFileNum()", "public long keepLogFileNum()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRecycleLogFileNum(long)", "public org.rocksdb.DBOptions setRecycleLogFileNum(long)"], ["long", "org.rocksdb.DBOptions.recycleLogFileNum()", "public long recycleLogFileNum()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setMaxManifestFileSize(long)", "public org.rocksdb.DBOptions setMaxManifestFileSize(long)"], ["long", "org.rocksdb.DBOptions.maxManifestFileSize()", "public long maxManifestFileSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setTableCacheNumshardbits(int)", "public org.rocksdb.DBOptions setTableCacheNumshardbits(int)"], ["int", "org.rocksdb.DBOptions.tableCacheNumshardbits()", "public int tableCacheNumshardbits()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalTtlSeconds(long)", "public org.rocksdb.DBOptions setWalTtlSeconds(long)"], ["long", "org.rocksdb.DBOptions.walTtlSeconds()", "public long walTtlSeconds()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalSizeLimitMB(long)", "public org.rocksdb.DBOptions setWalSizeLimitMB(long)"], ["long", "org.rocksdb.DBOptions.walSizeLimitMB()", "public long walSizeLimitMB()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setManifestPreallocationSize(long)", "public org.rocksdb.DBOptions setManifestPreallocationSize(long)"], ["long", "org.rocksdb.DBOptions.manifestPreallocationSize()", "public long manifestPreallocationSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseDirectReads(boolean)", "public org.rocksdb.DBOptions setUseDirectReads(boolean)"], ["boolean", "org.rocksdb.DBOptions.useDirectReads()", "public boolean useDirectReads()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseDirectIoForFlushAndCompaction(boolean)", "public org.rocksdb.DBOptions setUseDirectIoForFlushAndCompaction(boolean)"], ["boolean", "org.rocksdb.DBOptions.useDirectIoForFlushAndCompaction()", "public boolean useDirectIoForFlushAndCompaction()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowFAllocate(boolean)", "public org.rocksdb.DBOptions setAllowFAllocate(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowFAllocate()", "public boolean allowFAllocate()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowMmapReads(boolean)", "public org.rocksdb.DBOptions setAllowMmapReads(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowMmapReads()", "public boolean allowMmapReads()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowMmapWrites(boolean)", "public org.rocksdb.DBOptions setAllowMmapWrites(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowMmapWrites()", "public boolean allowMmapWrites()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setIsFdCloseOnExec(boolean)", "public org.rocksdb.DBOptions setIsFdCloseOnExec(boolean)"], ["boolean", "org.rocksdb.DBOptions.isFdCloseOnExec()", "public boolean isFdCloseOnExec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setStatsDumpPeriodSec(int)", "public org.rocksdb.DBOptions setStatsDumpPeriodSec(int)"], ["int", "org.rocksdb.DBOptions.statsDumpPeriodSec()", "public int statsDumpPeriodSec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAdviseRandomOnOpen(boolean)", "public org.rocksdb.DBOptions setAdviseRandomOnOpen(boolean)"], ["boolean", "org.rocksdb.DBOptions.adviseRandomOnOpen()", "public boolean adviseRandomOnOpen()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDbWriteBufferSize(long)", "public org.rocksdb.DBOptions setDbWriteBufferSize(long)"], ["long", "org.rocksdb.DBOptions.dbWriteBufferSize()", "public long dbWriteBufferSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)", "public org.rocksdb.DBOptions setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.AccessHint", "org.rocksdb.DBOptions.accessHintOnCompactionStart()", "public org.rocksdb.AccessHint accessHintOnCompactionStart()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setNewTableReaderForCompactionInputs(boolean)", "public org.rocksdb.DBOptions setNewTableReaderForCompactionInputs(boolean)"], ["boolean", "org.rocksdb.DBOptions.newTableReaderForCompactionInputs()", "public boolean newTableReaderForCompactionInputs()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setCompactionReadaheadSize(long)", "public org.rocksdb.DBOptions setCompactionReadaheadSize(long)"], ["long", "org.rocksdb.DBOptions.compactionReadaheadSize()", "public long compactionReadaheadSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRandomAccessMaxBufferSize(long)", "public org.rocksdb.DBOptions setRandomAccessMaxBufferSize(long)"], ["long", "org.rocksdb.DBOptions.randomAccessMaxBufferSize()", "public long randomAccessMaxBufferSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWritableFileMaxBufferSize(long)", "public org.rocksdb.DBOptions setWritableFileMaxBufferSize(long)"], ["long", "org.rocksdb.DBOptions.writableFileMaxBufferSize()", "public long writableFileMaxBufferSize()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setUseAdaptiveMutex(boolean)", "public org.rocksdb.DBOptions setUseAdaptiveMutex(boolean)"], ["boolean", "org.rocksdb.DBOptions.useAdaptiveMutex()", "public boolean useAdaptiveMutex()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setBytesPerSync(long)", "public org.rocksdb.DBOptions setBytesPerSync(long)"], ["long", "org.rocksdb.DBOptions.bytesPerSync()", "public long bytesPerSync()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalBytesPerSync(long)", "public org.rocksdb.DBOptions setWalBytesPerSync(long)"], ["long", "org.rocksdb.DBOptions.walBytesPerSync()", "public long walBytesPerSync()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setEnableThreadTracking(boolean)", "public org.rocksdb.DBOptions setEnableThreadTracking(boolean)"], ["boolean", "org.rocksdb.DBOptions.enableThreadTracking()", "public boolean enableThreadTracking()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDelayedWriteRate(long)", "public org.rocksdb.DBOptions setDelayedWriteRate(long)"], ["long", "org.rocksdb.DBOptions.delayedWriteRate()", "public long delayedWriteRate()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllowConcurrentMemtableWrite(boolean)", "public org.rocksdb.DBOptions setAllowConcurrentMemtableWrite(boolean)"], ["boolean", "org.rocksdb.DBOptions.allowConcurrentMemtableWrite()", "public boolean allowConcurrentMemtableWrite()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setEnableWriteThreadAdaptiveYield(boolean)", "public org.rocksdb.DBOptions setEnableWriteThreadAdaptiveYield(boolean)"], ["boolean", "org.rocksdb.DBOptions.enableWriteThreadAdaptiveYield()", "public boolean enableWriteThreadAdaptiveYield()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWriteThreadMaxYieldUsec(long)", "public org.rocksdb.DBOptions setWriteThreadMaxYieldUsec(long)"], ["long", "org.rocksdb.DBOptions.writeThreadMaxYieldUsec()", "public long writeThreadMaxYieldUsec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWriteThreadSlowYieldUsec(long)", "public org.rocksdb.DBOptions setWriteThreadSlowYieldUsec(long)"], ["long", "org.rocksdb.DBOptions.writeThreadSlowYieldUsec()", "public long writeThreadSlowYieldUsec()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setSkipStatsUpdateOnDbOpen(boolean)", "public org.rocksdb.DBOptions setSkipStatsUpdateOnDbOpen(boolean)"], ["boolean", "org.rocksdb.DBOptions.skipStatsUpdateOnDbOpen()", "public boolean skipStatsUpdateOnDbOpen()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)", "public org.rocksdb.DBOptions setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.DBOptions.walRecoveryMode()", "public org.rocksdb.WALRecoveryMode walRecoveryMode()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAllow2pc(boolean)", "public org.rocksdb.DBOptions setAllow2pc(boolean)"], ["boolean", "org.rocksdb.DBOptions.allow2pc()", "public boolean allow2pc()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setRowCache(org.rocksdb.Cache)", "public org.rocksdb.DBOptions setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.Cache", "org.rocksdb.DBOptions.rowCache()", "public org.rocksdb.Cache rowCache()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setFailIfOptionsFileError(boolean)", "public org.rocksdb.DBOptions setFailIfOptionsFileError(boolean)"], ["boolean", "org.rocksdb.DBOptions.failIfOptionsFileError()", "public boolean failIfOptionsFileError()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setDumpMallocStats(boolean)", "public org.rocksdb.DBOptions setDumpMallocStats(boolean)"], ["boolean", "org.rocksdb.DBOptions.dumpMallocStats()", "public boolean dumpMallocStats()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAvoidFlushDuringRecovery(boolean)", "public org.rocksdb.DBOptions setAvoidFlushDuringRecovery(boolean)"], ["boolean", "org.rocksdb.DBOptions.avoidFlushDuringRecovery()", "public boolean avoidFlushDuringRecovery()"], ["org.rocksdb.DBOptions", "org.rocksdb.DBOptions.setAvoidFlushDuringShutdown(boolean)", "public org.rocksdb.DBOptions setAvoidFlushDuringShutdown(boolean)"], ["boolean", "org.rocksdb.DBOptions.avoidFlushDuringShutdown()", "public boolean avoidFlushDuringShutdown()"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAvoidFlushDuringShutdown(boolean)", "public org.rocksdb.DBOptionsInterface setAvoidFlushDuringShutdown(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAvoidFlushDuringRecovery(boolean)", "public org.rocksdb.DBOptionsInterface setAvoidFlushDuringRecovery(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDumpMallocStats(boolean)", "public org.rocksdb.DBOptionsInterface setDumpMallocStats(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setFailIfOptionsFileError(boolean)", "public org.rocksdb.DBOptionsInterface setFailIfOptionsFileError(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRowCache(org.rocksdb.Cache)", "public org.rocksdb.DBOptionsInterface setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllow2pc(boolean)", "public org.rocksdb.DBOptionsInterface setAllow2pc(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)", "public org.rocksdb.DBOptionsInterface setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setSkipStatsUpdateOnDbOpen(boolean)", "public org.rocksdb.DBOptionsInterface setSkipStatsUpdateOnDbOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWriteThreadSlowYieldUsec(long)", "public org.rocksdb.DBOptionsInterface setWriteThreadSlowYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWriteThreadMaxYieldUsec(long)", "public org.rocksdb.DBOptionsInterface setWriteThreadMaxYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setEnableWriteThreadAdaptiveYield(boolean)", "public org.rocksdb.DBOptionsInterface setEnableWriteThreadAdaptiveYield(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowConcurrentMemtableWrite(boolean)", "public org.rocksdb.DBOptionsInterface setAllowConcurrentMemtableWrite(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDelayedWriteRate(long)", "public org.rocksdb.DBOptionsInterface setDelayedWriteRate(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setEnableThreadTracking(boolean)", "public org.rocksdb.DBOptionsInterface setEnableThreadTracking(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalBytesPerSync(long)", "public org.rocksdb.DBOptionsInterface setWalBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setBytesPerSync(long)", "public org.rocksdb.DBOptionsInterface setBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseAdaptiveMutex(boolean)", "public org.rocksdb.DBOptionsInterface setUseAdaptiveMutex(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWritableFileMaxBufferSize(long)", "public org.rocksdb.DBOptionsInterface setWritableFileMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRandomAccessMaxBufferSize(long)", "public org.rocksdb.DBOptionsInterface setRandomAccessMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setCompactionReadaheadSize(long)", "public org.rocksdb.DBOptionsInterface setCompactionReadaheadSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setNewTableReaderForCompactionInputs(boolean)", "public org.rocksdb.DBOptionsInterface setNewTableReaderForCompactionInputs(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)", "public org.rocksdb.DBOptionsInterface setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDbWriteBufferSize(long)", "public org.rocksdb.DBOptionsInterface setDbWriteBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAdviseRandomOnOpen(boolean)", "public org.rocksdb.DBOptionsInterface setAdviseRandomOnOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setStatsDumpPeriodSec(int)", "public org.rocksdb.DBOptionsInterface setStatsDumpPeriodSec(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setIsFdCloseOnExec(boolean)", "public org.rocksdb.DBOptionsInterface setIsFdCloseOnExec(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowMmapWrites(boolean)", "public org.rocksdb.DBOptionsInterface setAllowMmapWrites(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowMmapReads(boolean)", "public org.rocksdb.DBOptionsInterface setAllowMmapReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setAllowFAllocate(boolean)", "public org.rocksdb.DBOptionsInterface setAllowFAllocate(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseDirectIoForFlushAndCompaction(boolean)", "public org.rocksdb.DBOptionsInterface setUseDirectIoForFlushAndCompaction(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseDirectReads(boolean)", "public org.rocksdb.DBOptionsInterface setUseDirectReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setManifestPreallocationSize(long)", "public org.rocksdb.DBOptionsInterface setManifestPreallocationSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalSizeLimitMB(long)", "public org.rocksdb.DBOptionsInterface setWalSizeLimitMB(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalTtlSeconds(long)", "public org.rocksdb.DBOptionsInterface setWalTtlSeconds(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setTableCacheNumshardbits(int)", "public org.rocksdb.DBOptionsInterface setTableCacheNumshardbits(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxManifestFileSize(long)", "public org.rocksdb.DBOptionsInterface setMaxManifestFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRecycleLogFileNum(long)", "public org.rocksdb.DBOptionsInterface setRecycleLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setKeepLogFileNum(long)", "public org.rocksdb.DBOptionsInterface setKeepLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setLogFileTimeToRoll(long)", "public org.rocksdb.DBOptionsInterface setLogFileTimeToRoll(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxLogFileSize(long)", "public org.rocksdb.DBOptionsInterface setMaxLogFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxBackgroundJobs(int)", "public org.rocksdb.DBOptionsInterface setMaxBackgroundJobs(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxBackgroundFlushes(int)", "public org.rocksdb.DBOptionsInterface setMaxBackgroundFlushes(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxBackgroundCompactions(int)", "public org.rocksdb.DBOptionsInterface setMaxBackgroundCompactions(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDeleteObsoleteFilesPeriodMicros(long)", "public org.rocksdb.DBOptionsInterface setDeleteObsoleteFilesPeriodMicros(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setWalDir(java.lang.String)", "public org.rocksdb.DBOptionsInterface setWalDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDbLogDir(java.lang.String)", "public org.rocksdb.DBOptionsInterface setDbLogDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setDbPaths(java.util.Collection)", "public org.rocksdb.DBOptionsInterface setDbPaths(java.util.Collection)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setUseFsync(boolean)", "public org.rocksdb.DBOptionsInterface setUseFsync(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setStatistics(org.rocksdb.Statistics)", "public org.rocksdb.DBOptionsInterface setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxTotalWalSize(long)", "public org.rocksdb.DBOptionsInterface setMaxTotalWalSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxFileOpeningThreads(int)", "public org.rocksdb.DBOptionsInterface setMaxFileOpeningThreads(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setMaxOpenFiles(int)", "public org.rocksdb.DBOptionsInterface setMaxOpenFiles(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setInfoLogLevel(org.rocksdb.InfoLogLevel)", "public org.rocksdb.DBOptionsInterface setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setLogger(org.rocksdb.Logger)", "public org.rocksdb.DBOptionsInterface setLogger(org.rocksdb.Logger)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.DBOptionsInterface setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setParanoidChecks(boolean)", "public org.rocksdb.DBOptionsInterface setParanoidChecks(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setErrorIfExists(boolean)", "public org.rocksdb.DBOptionsInterface setErrorIfExists(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setCreateMissingColumnFamilies(boolean)", "public org.rocksdb.DBOptionsInterface setCreateMissingColumnFamilies(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setCreateIfMissing(boolean)", "public org.rocksdb.DBOptionsInterface setCreateIfMissing(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setIncreaseParallelism(int)", "public org.rocksdb.DBOptionsInterface setIncreaseParallelism(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.setEnv(org.rocksdb.Env)", "public org.rocksdb.DBOptionsInterface setEnv(org.rocksdb.Env)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.DBOptions.optimizeForSmallDb()", "public org.rocksdb.DBOptionsInterface optimizeForSmallDb()"], ["org.rocksdb.DbPath", "org.rocksdb.DbPath(java.nio.file.Path, long)", "public org.rocksdb.DbPath(java.nio.file.Path, long)"], ["boolean", "org.rocksdb.DbPath.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "org.rocksdb.DbPath.hashCode()", "public int hashCode()"], ["org.rocksdb.DirectComparator", "org.rocksdb.DirectComparator(org.rocksdb.ComparatorOptions)", "public org.rocksdb.DirectComparator(org.rocksdb.ComparatorOptions)"], ["org.rocksdb.DirectSlice", "org.rocksdb.DirectSlice(java.lang.String)", "public org.rocksdb.DirectSlice(java.lang.String)"], ["org.rocksdb.DirectSlice", "org.rocksdb.DirectSlice(java.nio.ByteBuffer, int)", "public org.rocksdb.DirectSlice(java.nio.ByteBuffer, int)"], ["org.rocksdb.DirectSlice", "org.rocksdb.DirectSlice(java.nio.ByteBuffer)", "public org.rocksdb.DirectSlice(java.nio.ByteBuffer)"], ["byte", "org.rocksdb.DirectSlice.get(int)", "public byte get(int)"], ["void", "org.rocksdb.DirectSlice.clear()", "public void clear()"], ["void", "org.rocksdb.DirectSlice.removePrefix(int)", "public void removePrefix(int)"], ["org.rocksdb.EncodingType[]", "org.rocksdb.EncodingType.values()", "public static org.rocksdb.EncodingType[] values()"], ["org.rocksdb.EncodingType", "org.rocksdb.EncodingType.valueOf(java.lang.String)", "public static org.rocksdb.EncodingType valueOf(java.lang.String)"], ["byte", "org.rocksdb.EncodingType.getValue()", "public byte getValue()"], ["org.rocksdb.Env", "org.rocksdb.Env.getDefault()", "public static org.rocksdb.Env getDefault()"], ["org.rocksdb.Env", "org.rocksdb.Env.setBackgroundThreads(int)", "public org.rocksdb.Env setBackgroundThreads(int)"], ["org.rocksdb.Env", "org.rocksdb.Env.setBackgroundThreads(int, int)", "public org.rocksdb.Env setBackgroundThreads(int, int)"], ["int", "org.rocksdb.Env.getThreadPoolQueueLen(int)", "public int getThreadPoolQueueLen(int)"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions()", "public org.rocksdb.EnvOptions()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseOsBuffer(boolean)", "public org.rocksdb.EnvOptions setUseOsBuffer(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useOsBuffer()", "public boolean useOsBuffer()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseMmapReads(boolean)", "public org.rocksdb.EnvOptions setUseMmapReads(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useMmapReads()", "public boolean useMmapReads()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseMmapWrites(boolean)", "public org.rocksdb.EnvOptions setUseMmapWrites(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useMmapWrites()", "public boolean useMmapWrites()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseDirectReads(boolean)", "public org.rocksdb.EnvOptions setUseDirectReads(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useDirectReads()", "public boolean useDirectReads()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setUseDirectWrites(boolean)", "public org.rocksdb.EnvOptions setUseDirectWrites(boolean)"], ["boolean", "org.rocksdb.EnvOptions.useDirectWrites()", "public boolean useDirectWrites()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setAllowFallocate(boolean)", "public org.rocksdb.EnvOptions setAllowFallocate(boolean)"], ["boolean", "org.rocksdb.EnvOptions.allowFallocate()", "public boolean allowFallocate()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setSetFdCloexec(boolean)", "public org.rocksdb.EnvOptions setSetFdCloexec(boolean)"], ["boolean", "org.rocksdb.EnvOptions.setFdCloexec()", "public boolean setFdCloexec()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setBytesPerSync(long)", "public org.rocksdb.EnvOptions setBytesPerSync(long)"], ["long", "org.rocksdb.EnvOptions.bytesPerSync()", "public long bytesPerSync()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setFallocateWithKeepSize(boolean)", "public org.rocksdb.EnvOptions setFallocateWithKeepSize(boolean)"], ["boolean", "org.rocksdb.EnvOptions.fallocateWithKeepSize()", "public boolean fallocateWithKeepSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setCompactionReadaheadSize(long)", "public org.rocksdb.EnvOptions setCompactionReadaheadSize(long)"], ["long", "org.rocksdb.EnvOptions.compactionReadaheadSize()", "public long compactionReadaheadSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setRandomAccessMaxBufferSize(long)", "public org.rocksdb.EnvOptions setRandomAccessMaxBufferSize(long)"], ["long", "org.rocksdb.EnvOptions.randomAccessMaxBufferSize()", "public long randomAccessMaxBufferSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setWritableFileMaxBufferSize(long)", "public org.rocksdb.EnvOptions setWritableFileMaxBufferSize(long)"], ["long", "org.rocksdb.EnvOptions.writableFileMaxBufferSize()", "public long writableFileMaxBufferSize()"], ["org.rocksdb.EnvOptions", "org.rocksdb.EnvOptions.setRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.EnvOptions setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.RateLimiter", "org.rocksdb.EnvOptions.rateLimiter()", "public org.rocksdb.RateLimiter rateLimiter()"], ["org.rocksdb.FlushOptions", "org.rocksdb.FlushOptions()", "public org.rocksdb.FlushOptions()"], ["org.rocksdb.FlushOptions", "org.rocksdb.FlushOptions.setWaitForFlush(boolean)", "public org.rocksdb.FlushOptions setWaitForFlush(boolean)"], ["boolean", "org.rocksdb.FlushOptions.waitForFlush()", "public boolean waitForFlush()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig()", "public org.rocksdb.HashLinkedListMemTableConfig()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setBucketCount(long)", "public org.rocksdb.HashLinkedListMemTableConfig setBucketCount(long)"], ["long", "org.rocksdb.HashLinkedListMemTableConfig.bucketCount()", "public long bucketCount()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setHugePageTlbSize(long)", "public org.rocksdb.HashLinkedListMemTableConfig setHugePageTlbSize(long)"], ["long", "org.rocksdb.HashLinkedListMemTableConfig.hugePageTlbSize()", "public long hugePageTlbSize()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setBucketEntriesLoggingThreshold(int)", "public org.rocksdb.HashLinkedListMemTableConfig setBucketEntriesLoggingThreshold(int)"], ["int", "org.rocksdb.HashLinkedListMemTableConfig.bucketEntriesLoggingThreshold()", "public int bucketEntriesLoggingThreshold()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setIfLogBucketDistWhenFlush(boolean)", "public org.rocksdb.HashLinkedListMemTableConfig setIfLogBucketDistWhenFlush(boolean)"], ["boolean", "org.rocksdb.HashLinkedListMemTableConfig.ifLogBucketDistWhenFlush()", "public boolean ifLogBucketDistWhenFlush()"], ["org.rocksdb.HashLinkedListMemTableConfig", "org.rocksdb.HashLinkedListMemTableConfig.setThresholdUseSkiplist(int)", "public org.rocksdb.HashLinkedListMemTableConfig setThresholdUseSkiplist(int)"], ["int", "org.rocksdb.HashLinkedListMemTableConfig.thresholdUseSkiplist()", "public int thresholdUseSkiplist()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig()", "public org.rocksdb.HashSkipListMemTableConfig()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig.setBucketCount(long)", "public org.rocksdb.HashSkipListMemTableConfig setBucketCount(long)"], ["long", "org.rocksdb.HashSkipListMemTableConfig.bucketCount()", "public long bucketCount()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig.setHeight(int)", "public org.rocksdb.HashSkipListMemTableConfig setHeight(int)"], ["int", "org.rocksdb.HashSkipListMemTableConfig.height()", "public int height()"], ["org.rocksdb.HashSkipListMemTableConfig", "org.rocksdb.HashSkipListMemTableConfig.setBranchingFactor(int)", "public org.rocksdb.HashSkipListMemTableConfig setBranchingFactor(int)"], ["int", "org.rocksdb.HashSkipListMemTableConfig.branchingFactor()", "public int branchingFactor()"], ["org.rocksdb.HistogramData", "org.rocksdb.HistogramData(double, double, double, double, double)", "public org.rocksdb.HistogramData(double, double, double, double, double)"], ["double", "org.rocksdb.HistogramData.getMedian()", "public double getMedian()"], ["double", "org.rocksdb.HistogramData.getPercentile95()", "public double getPercentile95()"], ["double", "org.rocksdb.HistogramData.getPercentile99()", "public double getPercentile99()"], ["double", "org.rocksdb.HistogramData.getAverage()", "public double getAverage()"], ["double", "org.rocksdb.HistogramData.getStandardDeviation()", "public double getStandardDeviation()"], ["org.rocksdb.HistogramType[]", "org.rocksdb.HistogramType.values()", "public static org.rocksdb.HistogramType[] values()"], ["org.rocksdb.HistogramType", "org.rocksdb.HistogramType.valueOf(java.lang.String)", "public static org.rocksdb.HistogramType valueOf(java.lang.String)"], ["byte", "org.rocksdb.HistogramType.getValue()", "public byte getValue()"], ["org.rocksdb.IndexType[]", "org.rocksdb.IndexType.values()", "public static org.rocksdb.IndexType[] values()"], ["org.rocksdb.IndexType", "org.rocksdb.IndexType.valueOf(java.lang.String)", "public static org.rocksdb.IndexType valueOf(java.lang.String)"], ["byte", "org.rocksdb.IndexType.getValue()", "public byte getValue()"], ["org.rocksdb.InfoLogLevel[]", "org.rocksdb.InfoLogLevel.values()", "public static org.rocksdb.InfoLogLevel[] values()"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.InfoLogLevel.valueOf(java.lang.String)", "public static org.rocksdb.InfoLogLevel valueOf(java.lang.String)"], ["byte", "org.rocksdb.InfoLogLevel.getValue()", "public byte getValue()"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.InfoLogLevel.getInfoLogLevel(byte)", "public static org.rocksdb.InfoLogLevel getInfoLogLevel(byte)"], ["org.rocksdb.IngestExternalFileOptions", "org.rocksdb.IngestExternalFileOptions()", "public org.rocksdb.IngestExternalFileOptions()"], ["org.rocksdb.IngestExternalFileOptions", "org.rocksdb.IngestExternalFileOptions(boolean, boolean, boolean, boolean)", "public org.rocksdb.IngestExternalFileOptions(boolean, boolean, boolean, boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.moveFiles()", "public boolean moveFiles()"], ["void", "org.rocksdb.IngestExternalFileOptions.setMoveFiles(boolean)", "public void setMoveFiles(boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.snapshotConsistency()", "public boolean snapshotConsistency()"], ["void", "org.rocksdb.IngestExternalFileOptions.setSnapshotConsistency(boolean)", "public void setSnapshotConsistency(boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.allowGlobalSeqNo()", "public boolean allowGlobalSeqNo()"], ["void", "org.rocksdb.IngestExternalFileOptions.setAllowGlobalSeqNo(boolean)", "public void setAllowGlobalSeqNo(boolean)"], ["boolean", "org.rocksdb.IngestExternalFileOptions.allowBlockingFlush()", "public boolean allowBlockingFlush()"], ["void", "org.rocksdb.IngestExternalFileOptions.setAllowBlockingFlush(boolean)", "public void setAllowBlockingFlush(boolean)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long)", "public org.rocksdb.LRUCache(long)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long, int)", "public org.rocksdb.LRUCache(long, int)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long, int, boolean)", "public org.rocksdb.LRUCache(long, int, boolean)"], ["org.rocksdb.LRUCache", "org.rocksdb.LRUCache(long, int, boolean, double)", "public org.rocksdb.LRUCache(long, int, boolean, double)"], ["org.rocksdb.Logger", "org.rocksdb.Logger(org.rocksdb.Options)", "public org.rocksdb.Logger(org.rocksdb.Options)"], ["org.rocksdb.Logger", "org.rocksdb.Logger(org.rocksdb.DBOptions)", "public org.rocksdb.Logger(org.rocksdb.DBOptions)"], ["void", "org.rocksdb.Logger.setInfoLogLevel(org.rocksdb.InfoLogLevel)", "public void setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.Logger.infoLogLevel()", "public org.rocksdb.InfoLogLevel infoLogLevel()"], ["org.rocksdb.MemTableConfig", "org.rocksdb.MemTableConfig()", "public org.rocksdb.MemTableConfig()"], ["org.rocksdb.MutableColumnFamilyOptions$CompactionOption[]", "org.rocksdb.MutableColumnFamilyOptions$CompactionOption.values()", "public static org.rocksdb.MutableColumnFamilyOptions$CompactionOption[] values()"], ["org.rocksdb.MutableColumnFamilyOptions$CompactionOption", "org.rocksdb.MutableColumnFamilyOptions$CompactionOption.valueOf(java.lang.String)", "public static org.rocksdb.MutableColumnFamilyOptions$CompactionOption valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$CompactionOption.getValueType()", "public org.rocksdb.MutableColumnFamilyOptions$ValueType getValueType()"], ["org.rocksdb.MutableColumnFamilyOptions$MemtableOption[]", "org.rocksdb.MutableColumnFamilyOptions$MemtableOption.values()", "public static org.rocksdb.MutableColumnFamilyOptions$MemtableOption[] values()"], ["org.rocksdb.MutableColumnFamilyOptions$MemtableOption", "org.rocksdb.MutableColumnFamilyOptions$MemtableOption.valueOf(java.lang.String)", "public static org.rocksdb.MutableColumnFamilyOptions$MemtableOption valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$MemtableOption.getValueType()", "public org.rocksdb.MutableColumnFamilyOptions$ValueType getValueType()"], ["org.rocksdb.MutableColumnFamilyOptions$MiscOption[]", "org.rocksdb.MutableColumnFamilyOptions$MiscOption.values()", "public static org.rocksdb.MutableColumnFamilyOptions$MiscOption[] values()"], ["org.rocksdb.MutableColumnFamilyOptions$MiscOption", "org.rocksdb.MutableColumnFamilyOptions$MiscOption.valueOf(java.lang.String)", "public static org.rocksdb.MutableColumnFamilyOptions$MiscOption valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$MiscOption.getValueType()", "public org.rocksdb.MutableColumnFamilyOptions$ValueType getValueType()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder()", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder()"], ["org.rocksdb.MutableColumnFamilyOptions", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.build()", "public org.rocksdb.MutableColumnFamilyOptions build()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.fromString(java.lang.String, java.lang.String)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder fromString(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setWriteBufferSize(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setWriteBufferSize(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.writeBufferSize()", "public long writeBufferSize()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setArenaBlockSize(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setArenaBlockSize(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.arenaBlockSize()", "public long arenaBlockSize()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtablePrefixBloomSizeRatio(double)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMemtablePrefixBloomSizeRatio(double)"], ["double", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.memtablePrefixBloomSizeRatio()", "public double memtablePrefixBloomSizeRatio()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtableHugePageSize(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMemtableHugePageSize(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.memtableHugePageSize()", "public long memtableHugePageSize()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSuccessiveMerges(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxSuccessiveMerges(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxSuccessiveMerges()", "public long maxSuccessiveMerges()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxWriteBufferNumber(int)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxWriteBufferNumber(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxWriteBufferNumber()", "public int maxWriteBufferNumber()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setInplaceUpdateNumLocks(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setInplaceUpdateNumLocks(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.inplaceUpdateNumLocks()", "public long inplaceUpdateNumLocks()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setDisableAutoCompactions(boolean)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setDisableAutoCompactions(boolean)"], ["boolean", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.disableAutoCompactions()", "public boolean disableAutoCompactions()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setSoftPendingCompactionBytesLimit(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setSoftPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.softPendingCompactionBytesLimit()", "public long softPendingCompactionBytesLimit()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setHardPendingCompactionBytesLimit(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setHardPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.hardPendingCompactionBytesLimit()", "public long hardPendingCompactionBytesLimit()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0FileNumCompactionTrigger(int)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setLevel0FileNumCompactionTrigger(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.level0FileNumCompactionTrigger()", "public int level0FileNumCompactionTrigger()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0SlowdownWritesTrigger(int)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setLevel0SlowdownWritesTrigger(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.level0SlowdownWritesTrigger()", "public int level0SlowdownWritesTrigger()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0StopWritesTrigger(int)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setLevel0StopWritesTrigger(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.level0StopWritesTrigger()", "public int level0StopWritesTrigger()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxCompactionBytes(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxCompactionBytes(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxCompactionBytes()", "public long maxCompactionBytes()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeBase(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setTargetFileSizeBase(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.targetFileSizeBase()", "public long targetFileSizeBase()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeMultiplier(int)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setTargetFileSizeMultiplier(int)"], ["int", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.targetFileSizeMultiplier()", "public int targetFileSizeMultiplier()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelBase(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxBytesForLevelBase(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxBytesForLevelBase()", "public long maxBytesForLevelBase()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxBytesForLevelMultiplier(double)"], ["double", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxBytesForLevelMultiplier()", "public double maxBytesForLevelMultiplier()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplierAdditional(int[])", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxBytesForLevelMultiplierAdditional(int[])"], ["int[]", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxBytesForLevelMultiplierAdditional()", "public int[] maxBytesForLevelMultiplierAdditional()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSequentialSkipInIterations(long)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setMaxSequentialSkipInIterations(long)"], ["long", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.maxSequentialSkipInIterations()", "public long maxSequentialSkipInIterations()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setParanoidFileChecks(boolean)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setParanoidFileChecks(boolean)"], ["boolean", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.paranoidFileChecks()", "public boolean paranoidFileChecks()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.compressionType()", "public org.rocksdb.CompressionType compressionType()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setReportBgIoStats(boolean)", "public org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder setReportBgIoStats(boolean)"], ["boolean", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.reportBgIoStats()", "public boolean reportBgIoStats()"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelBase(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxCompactionBytes(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0FileNumCompactionTrigger(int)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setDisableAutoCompactions(boolean)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setWriteBufferSize(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setReportBgIoStats(boolean)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setReportBgIoStats(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setParanoidFileChecks(boolean)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSuccessiveMerges(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxSequentialSkipInIterations(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setHardPendingCompactionBytesLimit(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setSoftPendingCompactionBytesLimit(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplierAdditional(int[])", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[])"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeMultiplier(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setTargetFileSizeBase(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeBase(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0StopWritesTrigger(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setLevel0SlowdownWritesTrigger(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setArenaBlockSize(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setArenaBlockSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtableHugePageSize(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtableHugePageSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMemtablePrefixBloomSizeRatio(double)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setInplaceUpdateNumLocks(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder.setMaxWriteBufferNumber(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int)"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType[]", "org.rocksdb.MutableColumnFamilyOptions$ValueType.values()", "public static org.rocksdb.MutableColumnFamilyOptions$ValueType[] values()"], ["org.rocksdb.MutableColumnFamilyOptions$ValueType", "org.rocksdb.MutableColumnFamilyOptions$ValueType.valueOf(java.lang.String)", "public static org.rocksdb.MutableColumnFamilyOptions$ValueType valueOf(java.lang.String)"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions.builder()", "public static org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder builder()"], ["org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder", "org.rocksdb.MutableColumnFamilyOptions.parse(java.lang.String)", "public static org.rocksdb.MutableColumnFamilyOptions$MutableColumnFamilyOptionsBuilder parse(java.lang.String)"], ["java.lang.String", "org.rocksdb.MutableColumnFamilyOptions.toString()", "public java.lang.String toString()"], ["org.rocksdb.NativeComparatorWrapper", "org.rocksdb.NativeComparatorWrapper()", "public org.rocksdb.NativeComparatorWrapper()"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.name()", "public final java.lang.String name()"], ["int", "org.rocksdb.NativeComparatorWrapper.compare(org.rocksdb.Slice, org.rocksdb.Slice)", "public final int compare(org.rocksdb.Slice, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.findShortestSeparator(java.lang.String, org.rocksdb.Slice)", "public final java.lang.String findShortestSeparator(java.lang.String, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.findShortSuccessor(java.lang.String)", "public final java.lang.String findShortSuccessor(java.lang.String)"], ["java.lang.String", "org.rocksdb.NativeComparatorWrapper.findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)", "public java.lang.String findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)"], ["int", "org.rocksdb.NativeComparatorWrapper.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)", "public int compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"], ["org.rocksdb.NativeLibraryLoader", "org.rocksdb.NativeLibraryLoader.getInstance()", "public static org.rocksdb.NativeLibraryLoader getInstance()"], ["synchronized", "org.rocksdb.NativeLibraryLoader.void loadLibrary(java.lang.String)", "public synchronized void loadLibrary(java.lang.String) throws java.io.IOException"], ["org.rocksdb.OptimisticTransactionDB", "org.rocksdb.OptimisticTransactionDB.open(org.rocksdb.Options, java.lang.String)", "public static org.rocksdb.OptimisticTransactionDB open(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.OptimisticTransactionDB", "org.rocksdb.OptimisticTransactionDB.open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public static org.rocksdb.OptimisticTransactionDB open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.OptimisticTransactionOptions)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.OptimisticTransactionOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.Transaction)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.OptimisticTransactionOptions, org.rocksdb.Transaction)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.OptimisticTransactionOptions, org.rocksdb.Transaction)"], ["org.rocksdb.RocksDB", "org.rocksdb.OptimisticTransactionDB.getBaseDB()", "public org.rocksdb.RocksDB getBaseDB()"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions, org.rocksdb.Transaction)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.OptimisticTransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions)"], ["org.rocksdb.OptimisticTransactionOptions", "org.rocksdb.OptimisticTransactionOptions()", "public org.rocksdb.OptimisticTransactionOptions()"], ["boolean", "org.rocksdb.OptimisticTransactionOptions.isSetSnapshot()", "public boolean isSetSnapshot()"], ["org.rocksdb.OptimisticTransactionOptions", "org.rocksdb.OptimisticTransactionOptions.setSetSnapshot(boolean)", "public org.rocksdb.OptimisticTransactionOptions setSetSnapshot(boolean)"], ["org.rocksdb.OptimisticTransactionOptions", "org.rocksdb.OptimisticTransactionOptions.setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)", "public org.rocksdb.OptimisticTransactionOptions setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.TransactionalOptions", "org.rocksdb.OptimisticTransactionOptions.setSetSnapshot(boolean)", "public org.rocksdb.TransactionalOptions setSetSnapshot(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options()", "public org.rocksdb.Options()"], ["org.rocksdb.Options", "org.rocksdb.Options(org.rocksdb.DBOptions, org.rocksdb.ColumnFamilyOptions)", "public org.rocksdb.Options(org.rocksdb.DBOptions, org.rocksdb.ColumnFamilyOptions)"], ["org.rocksdb.Options", "org.rocksdb.Options.setIncreaseParallelism(int)", "public org.rocksdb.Options setIncreaseParallelism(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.setCreateIfMissing(boolean)", "public org.rocksdb.Options setCreateIfMissing(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setCreateMissingColumnFamilies(boolean)", "public org.rocksdb.Options setCreateMissingColumnFamilies(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setEnv(org.rocksdb.Env)", "public org.rocksdb.Options setEnv(org.rocksdb.Env)"], ["org.rocksdb.Env", "org.rocksdb.Options.getEnv()", "public org.rocksdb.Env getEnv()"], ["org.rocksdb.Options", "org.rocksdb.Options.prepareForBulkLoad()", "public org.rocksdb.Options prepareForBulkLoad()"], ["boolean", "org.rocksdb.Options.createIfMissing()", "public boolean createIfMissing()"], ["boolean", "org.rocksdb.Options.createMissingColumnFamilies()", "public boolean createMissingColumnFamilies()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeForSmallDb()", "public org.rocksdb.Options optimizeForSmallDb()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeForPointLookup(long)", "public org.rocksdb.Options optimizeForPointLookup(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeLevelStyleCompaction()", "public org.rocksdb.Options optimizeLevelStyleCompaction()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeLevelStyleCompaction(long)", "public org.rocksdb.Options optimizeLevelStyleCompaction(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeUniversalStyleCompaction()", "public org.rocksdb.Options optimizeUniversalStyleCompaction()"], ["org.rocksdb.Options", "org.rocksdb.Options.optimizeUniversalStyleCompaction(long)", "public org.rocksdb.Options optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setComparator(org.rocksdb.BuiltinComparator)", "public org.rocksdb.Options setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.Options", "org.rocksdb.Options.setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)", "public org.rocksdb.Options setComparator(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMergeOperatorName(java.lang.String)", "public org.rocksdb.Options setMergeOperatorName(java.lang.String)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMergeOperator(org.rocksdb.MergeOperator)", "public org.rocksdb.Options setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.Options", "org.rocksdb.Options.setWriteBufferSize(long)", "public org.rocksdb.Options setWriteBufferSize(long)"], ["long", "org.rocksdb.Options.writeBufferSize()", "public long writeBufferSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxWriteBufferNumber(int)", "public org.rocksdb.Options setMaxWriteBufferNumber(int)"], ["int", "org.rocksdb.Options.maxWriteBufferNumber()", "public int maxWriteBufferNumber()"], ["boolean", "org.rocksdb.Options.errorIfExists()", "public boolean errorIfExists()"], ["org.rocksdb.Options", "org.rocksdb.Options.setErrorIfExists(boolean)", "public org.rocksdb.Options setErrorIfExists(boolean)"], ["boolean", "org.rocksdb.Options.paranoidChecks()", "public boolean paranoidChecks()"], ["org.rocksdb.Options", "org.rocksdb.Options.setParanoidChecks(boolean)", "public org.rocksdb.Options setParanoidChecks(boolean)"], ["int", "org.rocksdb.Options.maxOpenFiles()", "public int maxOpenFiles()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxFileOpeningThreads(int)", "public org.rocksdb.Options setMaxFileOpeningThreads(int)"], ["int", "org.rocksdb.Options.maxFileOpeningThreads()", "public int maxFileOpeningThreads()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxTotalWalSize(long)", "public org.rocksdb.Options setMaxTotalWalSize(long)"], ["long", "org.rocksdb.Options.maxTotalWalSize()", "public long maxTotalWalSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxOpenFiles(int)", "public org.rocksdb.Options setMaxOpenFiles(int)"], ["boolean", "org.rocksdb.Options.useFsync()", "public boolean useFsync()"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseFsync(boolean)", "public org.rocksdb.Options setUseFsync(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setDbPaths(java.util.Collection<org.rocksdb.DbPath>)", "public org.rocksdb.Options setDbPaths(java.util.Collection<org.rocksdb.DbPath>)"], ["java.util.List<org.rocksdb.DbPath>", "org.rocksdb.Options.dbPaths()", "public java.util.List<org.rocksdb.DbPath> dbPaths()"], ["java.lang.String", "org.rocksdb.Options.dbLogDir()", "public java.lang.String dbLogDir()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDbLogDir(java.lang.String)", "public org.rocksdb.Options setDbLogDir(java.lang.String)"], ["java.lang.String", "org.rocksdb.Options.walDir()", "public java.lang.String walDir()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalDir(java.lang.String)", "public org.rocksdb.Options setWalDir(java.lang.String)"], ["long", "org.rocksdb.Options.deleteObsoleteFilesPeriodMicros()", "public long deleteObsoleteFilesPeriodMicros()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDeleteObsoleteFilesPeriodMicros(long)", "public org.rocksdb.Options setDeleteObsoleteFilesPeriodMicros(long)"], ["int", "org.rocksdb.Options.maxBackgroundCompactions()", "public int maxBackgroundCompactions()"], ["org.rocksdb.Options", "org.rocksdb.Options.setStatistics(org.rocksdb.Statistics)", "public org.rocksdb.Options setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.Statistics", "org.rocksdb.Options.statistics()", "public org.rocksdb.Statistics statistics()"], ["void", "org.rocksdb.Options.setBaseBackgroundCompactions(int)", "public void setBaseBackgroundCompactions(int)"], ["int", "org.rocksdb.Options.baseBackgroundCompactions()", "public int baseBackgroundCompactions()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBackgroundCompactions(int)", "public org.rocksdb.Options setMaxBackgroundCompactions(int)"], ["void", "org.rocksdb.Options.setMaxSubcompactions(int)", "public void setMaxSubcompactions(int)"], ["int", "org.rocksdb.Options.maxSubcompactions()", "public int maxSubcompactions()"], ["int", "org.rocksdb.Options.maxBackgroundFlushes()", "public int maxBackgroundFlushes()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBackgroundFlushes(int)", "public org.rocksdb.Options setMaxBackgroundFlushes(int)"], ["int", "org.rocksdb.Options.maxBackgroundJobs()", "public int maxBackgroundJobs()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBackgroundJobs(int)", "public org.rocksdb.Options setMaxBackgroundJobs(int)"], ["long", "org.rocksdb.Options.maxLogFileSize()", "public long maxLogFileSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxLogFileSize(long)", "public org.rocksdb.Options setMaxLogFileSize(long)"], ["long", "org.rocksdb.Options.logFileTimeToRoll()", "public long logFileTimeToRoll()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLogFileTimeToRoll(long)", "public org.rocksdb.Options setLogFileTimeToRoll(long)"], ["long", "org.rocksdb.Options.keepLogFileNum()", "public long keepLogFileNum()"], ["org.rocksdb.Options", "org.rocksdb.Options.setKeepLogFileNum(long)", "public org.rocksdb.Options setKeepLogFileNum(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setRecycleLogFileNum(long)", "public org.rocksdb.Options setRecycleLogFileNum(long)"], ["long", "org.rocksdb.Options.recycleLogFileNum()", "public long recycleLogFileNum()"], ["long", "org.rocksdb.Options.maxManifestFileSize()", "public long maxManifestFileSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxManifestFileSize(long)", "public org.rocksdb.Options setMaxManifestFileSize(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxTableFilesSizeFIFO(long)", "public org.rocksdb.Options setMaxTableFilesSizeFIFO(long)"], ["long", "org.rocksdb.Options.maxTableFilesSizeFIFO()", "public long maxTableFilesSizeFIFO()"], ["int", "org.rocksdb.Options.tableCacheNumshardbits()", "public int tableCacheNumshardbits()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTableCacheNumshardbits(int)", "public org.rocksdb.Options setTableCacheNumshardbits(int)"], ["long", "org.rocksdb.Options.walTtlSeconds()", "public long walTtlSeconds()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalTtlSeconds(long)", "public org.rocksdb.Options setWalTtlSeconds(long)"], ["long", "org.rocksdb.Options.walSizeLimitMB()", "public long walSizeLimitMB()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalSizeLimitMB(long)", "public org.rocksdb.Options setWalSizeLimitMB(long)"], ["long", "org.rocksdb.Options.manifestPreallocationSize()", "public long manifestPreallocationSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setManifestPreallocationSize(long)", "public org.rocksdb.Options setManifestPreallocationSize(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseDirectReads(boolean)", "public org.rocksdb.Options setUseDirectReads(boolean)"], ["boolean", "org.rocksdb.Options.useDirectReads()", "public boolean useDirectReads()"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseDirectIoForFlushAndCompaction(boolean)", "public org.rocksdb.Options setUseDirectIoForFlushAndCompaction(boolean)"], ["boolean", "org.rocksdb.Options.useDirectIoForFlushAndCompaction()", "public boolean useDirectIoForFlushAndCompaction()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowFAllocate(boolean)", "public org.rocksdb.Options setAllowFAllocate(boolean)"], ["boolean", "org.rocksdb.Options.allowFAllocate()", "public boolean allowFAllocate()"], ["boolean", "org.rocksdb.Options.allowMmapReads()", "public boolean allowMmapReads()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowMmapReads(boolean)", "public org.rocksdb.Options setAllowMmapReads(boolean)"], ["boolean", "org.rocksdb.Options.allowMmapWrites()", "public boolean allowMmapWrites()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowMmapWrites(boolean)", "public org.rocksdb.Options setAllowMmapWrites(boolean)"], ["boolean", "org.rocksdb.Options.isFdCloseOnExec()", "public boolean isFdCloseOnExec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setIsFdCloseOnExec(boolean)", "public org.rocksdb.Options setIsFdCloseOnExec(boolean)"], ["int", "org.rocksdb.Options.statsDumpPeriodSec()", "public int statsDumpPeriodSec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setStatsDumpPeriodSec(int)", "public org.rocksdb.Options setStatsDumpPeriodSec(int)"], ["boolean", "org.rocksdb.Options.adviseRandomOnOpen()", "public boolean adviseRandomOnOpen()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAdviseRandomOnOpen(boolean)", "public org.rocksdb.Options setAdviseRandomOnOpen(boolean)"], ["org.rocksdb.Options", "org.rocksdb.Options.setDbWriteBufferSize(long)", "public org.rocksdb.Options setDbWriteBufferSize(long)"], ["long", "org.rocksdb.Options.dbWriteBufferSize()", "public long dbWriteBufferSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)", "public org.rocksdb.Options setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.AccessHint", "org.rocksdb.Options.accessHintOnCompactionStart()", "public org.rocksdb.AccessHint accessHintOnCompactionStart()"], ["org.rocksdb.Options", "org.rocksdb.Options.setNewTableReaderForCompactionInputs(boolean)", "public org.rocksdb.Options setNewTableReaderForCompactionInputs(boolean)"], ["boolean", "org.rocksdb.Options.newTableReaderForCompactionInputs()", "public boolean newTableReaderForCompactionInputs()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionReadaheadSize(long)", "public org.rocksdb.Options setCompactionReadaheadSize(long)"], ["long", "org.rocksdb.Options.compactionReadaheadSize()", "public long compactionReadaheadSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setRandomAccessMaxBufferSize(long)", "public org.rocksdb.Options setRandomAccessMaxBufferSize(long)"], ["long", "org.rocksdb.Options.randomAccessMaxBufferSize()", "public long randomAccessMaxBufferSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWritableFileMaxBufferSize(long)", "public org.rocksdb.Options setWritableFileMaxBufferSize(long)"], ["long", "org.rocksdb.Options.writableFileMaxBufferSize()", "public long writableFileMaxBufferSize()"], ["boolean", "org.rocksdb.Options.useAdaptiveMutex()", "public boolean useAdaptiveMutex()"], ["org.rocksdb.Options", "org.rocksdb.Options.setUseAdaptiveMutex(boolean)", "public org.rocksdb.Options setUseAdaptiveMutex(boolean)"], ["long", "org.rocksdb.Options.bytesPerSync()", "public long bytesPerSync()"], ["org.rocksdb.Options", "org.rocksdb.Options.setBytesPerSync(long)", "public org.rocksdb.Options setBytesPerSync(long)"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalBytesPerSync(long)", "public org.rocksdb.Options setWalBytesPerSync(long)"], ["long", "org.rocksdb.Options.walBytesPerSync()", "public long walBytesPerSync()"], ["org.rocksdb.Options", "org.rocksdb.Options.setEnableThreadTracking(boolean)", "public org.rocksdb.Options setEnableThreadTracking(boolean)"], ["boolean", "org.rocksdb.Options.enableThreadTracking()", "public boolean enableThreadTracking()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDelayedWriteRate(long)", "public org.rocksdb.Options setDelayedWriteRate(long)"], ["long", "org.rocksdb.Options.delayedWriteRate()", "public long delayedWriteRate()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllowConcurrentMemtableWrite(boolean)", "public org.rocksdb.Options setAllowConcurrentMemtableWrite(boolean)"], ["boolean", "org.rocksdb.Options.allowConcurrentMemtableWrite()", "public boolean allowConcurrentMemtableWrite()"], ["org.rocksdb.Options", "org.rocksdb.Options.setEnableWriteThreadAdaptiveYield(boolean)", "public org.rocksdb.Options setEnableWriteThreadAdaptiveYield(boolean)"], ["boolean", "org.rocksdb.Options.enableWriteThreadAdaptiveYield()", "public boolean enableWriteThreadAdaptiveYield()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWriteThreadMaxYieldUsec(long)", "public org.rocksdb.Options setWriteThreadMaxYieldUsec(long)"], ["long", "org.rocksdb.Options.writeThreadMaxYieldUsec()", "public long writeThreadMaxYieldUsec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWriteThreadSlowYieldUsec(long)", "public org.rocksdb.Options setWriteThreadSlowYieldUsec(long)"], ["long", "org.rocksdb.Options.writeThreadSlowYieldUsec()", "public long writeThreadSlowYieldUsec()"], ["org.rocksdb.Options", "org.rocksdb.Options.setSkipStatsUpdateOnDbOpen(boolean)", "public org.rocksdb.Options setSkipStatsUpdateOnDbOpen(boolean)"], ["boolean", "org.rocksdb.Options.skipStatsUpdateOnDbOpen()", "public boolean skipStatsUpdateOnDbOpen()"], ["org.rocksdb.Options", "org.rocksdb.Options.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)", "public org.rocksdb.Options setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.Options.walRecoveryMode()", "public org.rocksdb.WALRecoveryMode walRecoveryMode()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAllow2pc(boolean)", "public org.rocksdb.Options setAllow2pc(boolean)"], ["boolean", "org.rocksdb.Options.allow2pc()", "public boolean allow2pc()"], ["org.rocksdb.Options", "org.rocksdb.Options.setRowCache(org.rocksdb.Cache)", "public org.rocksdb.Options setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.Cache", "org.rocksdb.Options.rowCache()", "public org.rocksdb.Cache rowCache()"], ["org.rocksdb.Options", "org.rocksdb.Options.setFailIfOptionsFileError(boolean)", "public org.rocksdb.Options setFailIfOptionsFileError(boolean)"], ["boolean", "org.rocksdb.Options.failIfOptionsFileError()", "public boolean failIfOptionsFileError()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDumpMallocStats(boolean)", "public org.rocksdb.Options setDumpMallocStats(boolean)"], ["boolean", "org.rocksdb.Options.dumpMallocStats()", "public boolean dumpMallocStats()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAvoidFlushDuringRecovery(boolean)", "public org.rocksdb.Options setAvoidFlushDuringRecovery(boolean)"], ["boolean", "org.rocksdb.Options.avoidFlushDuringRecovery()", "public boolean avoidFlushDuringRecovery()"], ["org.rocksdb.Options", "org.rocksdb.Options.setAvoidFlushDuringShutdown(boolean)", "public org.rocksdb.Options setAvoidFlushDuringShutdown(boolean)"], ["boolean", "org.rocksdb.Options.avoidFlushDuringShutdown()", "public boolean avoidFlushDuringShutdown()"], ["org.rocksdb.MemTableConfig", "org.rocksdb.Options.memTableConfig()", "public org.rocksdb.MemTableConfig memTableConfig()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMemTableConfig(org.rocksdb.MemTableConfig)", "public org.rocksdb.Options setMemTableConfig(org.rocksdb.MemTableConfig)"], ["org.rocksdb.Options", "org.rocksdb.Options.setRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.Options setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.Options", "org.rocksdb.Options.setLogger(org.rocksdb.Logger)", "public org.rocksdb.Options setLogger(org.rocksdb.Logger)"], ["org.rocksdb.Options", "org.rocksdb.Options.setInfoLogLevel(org.rocksdb.InfoLogLevel)", "public org.rocksdb.Options setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.InfoLogLevel", "org.rocksdb.Options.infoLogLevel()", "public org.rocksdb.InfoLogLevel infoLogLevel()"], ["java.lang.String", "org.rocksdb.Options.memTableFactoryName()", "public java.lang.String memTableFactoryName()"], ["org.rocksdb.TableFormatConfig", "org.rocksdb.Options.tableFormatConfig()", "public org.rocksdb.TableFormatConfig tableFormatConfig()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTableFormatConfig(org.rocksdb.TableFormatConfig)", "public org.rocksdb.Options setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["java.lang.String", "org.rocksdb.Options.tableFactoryName()", "public java.lang.String tableFactoryName()"], ["org.rocksdb.Options", "org.rocksdb.Options.useFixedLengthPrefixExtractor(int)", "public org.rocksdb.Options useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.useCappedPrefixExtractor(int)", "public org.rocksdb.Options useCappedPrefixExtractor(int)"], ["org.rocksdb.CompressionType", "org.rocksdb.Options.compressionType()", "public org.rocksdb.CompressionType compressionType()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>)", "public org.rocksdb.Options setCompressionPerLevel(java.util.List<org.rocksdb.CompressionType>)"], ["java.util.List<org.rocksdb.CompressionType>", "org.rocksdb.Options.compressionPerLevel()", "public java.util.List<org.rocksdb.CompressionType> compressionPerLevel()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.Options setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.Options", "org.rocksdb.Options.setBottommostCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.Options setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.CompressionType", "org.rocksdb.Options.bottommostCompressionType()", "public org.rocksdb.CompressionType bottommostCompressionType()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompressionOptions(org.rocksdb.CompressionOptions)", "public org.rocksdb.Options setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.CompressionOptions", "org.rocksdb.Options.compressionOptions()", "public org.rocksdb.CompressionOptions compressionOptions()"], ["org.rocksdb.CompactionStyle", "org.rocksdb.Options.compactionStyle()", "public org.rocksdb.CompactionStyle compactionStyle()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionStyle(org.rocksdb.CompactionStyle)", "public org.rocksdb.Options setCompactionStyle(org.rocksdb.CompactionStyle)"], ["int", "org.rocksdb.Options.numLevels()", "public int numLevels()"], ["org.rocksdb.Options", "org.rocksdb.Options.setNumLevels(int)", "public org.rocksdb.Options setNumLevels(int)"], ["int", "org.rocksdb.Options.levelZeroFileNumCompactionTrigger()", "public int levelZeroFileNumCompactionTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelZeroFileNumCompactionTrigger(int)", "public org.rocksdb.Options setLevelZeroFileNumCompactionTrigger(int)"], ["int", "org.rocksdb.Options.levelZeroSlowdownWritesTrigger()", "public int levelZeroSlowdownWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelZeroSlowdownWritesTrigger(int)", "public org.rocksdb.Options setLevelZeroSlowdownWritesTrigger(int)"], ["int", "org.rocksdb.Options.levelZeroStopWritesTrigger()", "public int levelZeroStopWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelZeroStopWritesTrigger(int)", "public org.rocksdb.Options setLevelZeroStopWritesTrigger(int)"], ["long", "org.rocksdb.Options.targetFileSizeBase()", "public long targetFileSizeBase()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTargetFileSizeBase(long)", "public org.rocksdb.Options setTargetFileSizeBase(long)"], ["int", "org.rocksdb.Options.targetFileSizeMultiplier()", "public int targetFileSizeMultiplier()"], ["org.rocksdb.Options", "org.rocksdb.Options.setTargetFileSizeMultiplier(int)", "public org.rocksdb.Options setTargetFileSizeMultiplier(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBytesForLevelBase(long)", "public org.rocksdb.Options setMaxBytesForLevelBase(long)"], ["long", "org.rocksdb.Options.maxBytesForLevelBase()", "public long maxBytesForLevelBase()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevelCompactionDynamicLevelBytes(boolean)", "public org.rocksdb.Options setLevelCompactionDynamicLevelBytes(boolean)"], ["boolean", "org.rocksdb.Options.levelCompactionDynamicLevelBytes()", "public boolean levelCompactionDynamicLevelBytes()"], ["double", "org.rocksdb.Options.maxBytesForLevelMultiplier()", "public double maxBytesForLevelMultiplier()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.Options setMaxBytesForLevelMultiplier(double)"], ["long", "org.rocksdb.Options.maxCompactionBytes()", "public long maxCompactionBytes()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxCompactionBytes(long)", "public org.rocksdb.Options setMaxCompactionBytes(long)"], ["long", "org.rocksdb.Options.arenaBlockSize()", "public long arenaBlockSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setArenaBlockSize(long)", "public org.rocksdb.Options setArenaBlockSize(long)"], ["boolean", "org.rocksdb.Options.disableAutoCompactions()", "public boolean disableAutoCompactions()"], ["org.rocksdb.Options", "org.rocksdb.Options.setDisableAutoCompactions(boolean)", "public org.rocksdb.Options setDisableAutoCompactions(boolean)"], ["long", "org.rocksdb.Options.maxSequentialSkipInIterations()", "public long maxSequentialSkipInIterations()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxSequentialSkipInIterations(long)", "public org.rocksdb.Options setMaxSequentialSkipInIterations(long)"], ["boolean", "org.rocksdb.Options.inplaceUpdateSupport()", "public boolean inplaceUpdateSupport()"], ["org.rocksdb.Options", "org.rocksdb.Options.setInplaceUpdateSupport(boolean)", "public org.rocksdb.Options setInplaceUpdateSupport(boolean)"], ["long", "org.rocksdb.Options.inplaceUpdateNumLocks()", "public long inplaceUpdateNumLocks()"], ["org.rocksdb.Options", "org.rocksdb.Options.setInplaceUpdateNumLocks(long)", "public org.rocksdb.Options setInplaceUpdateNumLocks(long)"], ["double", "org.rocksdb.Options.memtablePrefixBloomSizeRatio()", "public double memtablePrefixBloomSizeRatio()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMemtablePrefixBloomSizeRatio(double)", "public org.rocksdb.Options setMemtablePrefixBloomSizeRatio(double)"], ["int", "org.rocksdb.Options.bloomLocality()", "public int bloomLocality()"], ["org.rocksdb.Options", "org.rocksdb.Options.setBloomLocality(int)", "public org.rocksdb.Options setBloomLocality(int)"], ["long", "org.rocksdb.Options.maxSuccessiveMerges()", "public long maxSuccessiveMerges()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxSuccessiveMerges(long)", "public org.rocksdb.Options setMaxSuccessiveMerges(long)"], ["int", "org.rocksdb.Options.minWriteBufferNumberToMerge()", "public int minWriteBufferNumberToMerge()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMinWriteBufferNumberToMerge(int)", "public org.rocksdb.Options setMinWriteBufferNumberToMerge(int)"], ["org.rocksdb.Options", "org.rocksdb.Options.setOptimizeFiltersForHits(boolean)", "public org.rocksdb.Options setOptimizeFiltersForHits(boolean)"], ["boolean", "org.rocksdb.Options.optimizeFiltersForHits()", "public boolean optimizeFiltersForHits()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMemtableHugePageSize(long)", "public org.rocksdb.Options setMemtableHugePageSize(long)"], ["long", "org.rocksdb.Options.memtableHugePageSize()", "public long memtableHugePageSize()"], ["org.rocksdb.Options", "org.rocksdb.Options.setSoftPendingCompactionBytesLimit(long)", "public org.rocksdb.Options setSoftPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.Options.softPendingCompactionBytesLimit()", "public long softPendingCompactionBytesLimit()"], ["org.rocksdb.Options", "org.rocksdb.Options.setHardPendingCompactionBytesLimit(long)", "public org.rocksdb.Options setHardPendingCompactionBytesLimit(long)"], ["long", "org.rocksdb.Options.hardPendingCompactionBytesLimit()", "public long hardPendingCompactionBytesLimit()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevel0FileNumCompactionTrigger(int)", "public org.rocksdb.Options setLevel0FileNumCompactionTrigger(int)"], ["int", "org.rocksdb.Options.level0FileNumCompactionTrigger()", "public int level0FileNumCompactionTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevel0SlowdownWritesTrigger(int)", "public org.rocksdb.Options setLevel0SlowdownWritesTrigger(int)"], ["int", "org.rocksdb.Options.level0SlowdownWritesTrigger()", "public int level0SlowdownWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setLevel0StopWritesTrigger(int)", "public org.rocksdb.Options setLevel0StopWritesTrigger(int)"], ["int", "org.rocksdb.Options.level0StopWritesTrigger()", "public int level0StopWritesTrigger()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxBytesForLevelMultiplierAdditional(int[])", "public org.rocksdb.Options setMaxBytesForLevelMultiplierAdditional(int[])"], ["int[]", "org.rocksdb.Options.maxBytesForLevelMultiplierAdditional()", "public int[] maxBytesForLevelMultiplierAdditional()"], ["org.rocksdb.Options", "org.rocksdb.Options.setParanoidFileChecks(boolean)", "public org.rocksdb.Options setParanoidFileChecks(boolean)"], ["boolean", "org.rocksdb.Options.paranoidFileChecks()", "public boolean paranoidFileChecks()"], ["org.rocksdb.Options", "org.rocksdb.Options.setMaxWriteBufferNumberToMaintain(int)", "public org.rocksdb.Options setMaxWriteBufferNumberToMaintain(int)"], ["int", "org.rocksdb.Options.maxWriteBufferNumberToMaintain()", "public int maxWriteBufferNumberToMaintain()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionPriority(org.rocksdb.CompactionPriority)", "public org.rocksdb.Options setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.CompactionPriority", "org.rocksdb.Options.compactionPriority()", "public org.rocksdb.CompactionPriority compactionPriority()"], ["org.rocksdb.Options", "org.rocksdb.Options.setReportBgIoStats(boolean)", "public org.rocksdb.Options setReportBgIoStats(boolean)"], ["boolean", "org.rocksdb.Options.reportBgIoStats()", "public boolean reportBgIoStats()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)", "public org.rocksdb.Options setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.CompactionOptionsUniversal", "org.rocksdb.Options.compactionOptionsUniversal()", "public org.rocksdb.CompactionOptionsUniversal compactionOptionsUniversal()"], ["org.rocksdb.Options", "org.rocksdb.Options.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)", "public org.rocksdb.Options setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.CompactionOptionsFIFO", "org.rocksdb.Options.compactionOptionsFIFO()", "public org.rocksdb.CompactionOptionsFIFO compactionOptionsFIFO()"], ["org.rocksdb.Options", "org.rocksdb.Options.setForceConsistencyChecks(boolean)", "public org.rocksdb.Options setForceConsistencyChecks(boolean)"], ["boolean", "org.rocksdb.Options.forceConsistencyChecks()", "public boolean forceConsistencyChecks()"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAvoidFlushDuringShutdown(boolean)", "public org.rocksdb.DBOptionsInterface setAvoidFlushDuringShutdown(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAvoidFlushDuringRecovery(boolean)", "public org.rocksdb.DBOptionsInterface setAvoidFlushDuringRecovery(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDumpMallocStats(boolean)", "public org.rocksdb.DBOptionsInterface setDumpMallocStats(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setFailIfOptionsFileError(boolean)", "public org.rocksdb.DBOptionsInterface setFailIfOptionsFileError(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRowCache(org.rocksdb.Cache)", "public org.rocksdb.DBOptionsInterface setRowCache(org.rocksdb.Cache)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllow2pc(boolean)", "public org.rocksdb.DBOptionsInterface setAllow2pc(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalRecoveryMode(org.rocksdb.WALRecoveryMode)", "public org.rocksdb.DBOptionsInterface setWalRecoveryMode(org.rocksdb.WALRecoveryMode)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setSkipStatsUpdateOnDbOpen(boolean)", "public org.rocksdb.DBOptionsInterface setSkipStatsUpdateOnDbOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWriteThreadSlowYieldUsec(long)", "public org.rocksdb.DBOptionsInterface setWriteThreadSlowYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWriteThreadMaxYieldUsec(long)", "public org.rocksdb.DBOptionsInterface setWriteThreadMaxYieldUsec(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setEnableWriteThreadAdaptiveYield(boolean)", "public org.rocksdb.DBOptionsInterface setEnableWriteThreadAdaptiveYield(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowConcurrentMemtableWrite(boolean)", "public org.rocksdb.DBOptionsInterface setAllowConcurrentMemtableWrite(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDelayedWriteRate(long)", "public org.rocksdb.DBOptionsInterface setDelayedWriteRate(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setEnableThreadTracking(boolean)", "public org.rocksdb.DBOptionsInterface setEnableThreadTracking(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalBytesPerSync(long)", "public org.rocksdb.DBOptionsInterface setWalBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setBytesPerSync(long)", "public org.rocksdb.DBOptionsInterface setBytesPerSync(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseAdaptiveMutex(boolean)", "public org.rocksdb.DBOptionsInterface setUseAdaptiveMutex(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWritableFileMaxBufferSize(long)", "public org.rocksdb.DBOptionsInterface setWritableFileMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRandomAccessMaxBufferSize(long)", "public org.rocksdb.DBOptionsInterface setRandomAccessMaxBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setCompactionReadaheadSize(long)", "public org.rocksdb.DBOptionsInterface setCompactionReadaheadSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setNewTableReaderForCompactionInputs(boolean)", "public org.rocksdb.DBOptionsInterface setNewTableReaderForCompactionInputs(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAccessHintOnCompactionStart(org.rocksdb.AccessHint)", "public org.rocksdb.DBOptionsInterface setAccessHintOnCompactionStart(org.rocksdb.AccessHint)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDbWriteBufferSize(long)", "public org.rocksdb.DBOptionsInterface setDbWriteBufferSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAdviseRandomOnOpen(boolean)", "public org.rocksdb.DBOptionsInterface setAdviseRandomOnOpen(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setStatsDumpPeriodSec(int)", "public org.rocksdb.DBOptionsInterface setStatsDumpPeriodSec(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setIsFdCloseOnExec(boolean)", "public org.rocksdb.DBOptionsInterface setIsFdCloseOnExec(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowMmapWrites(boolean)", "public org.rocksdb.DBOptionsInterface setAllowMmapWrites(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowMmapReads(boolean)", "public org.rocksdb.DBOptionsInterface setAllowMmapReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setAllowFAllocate(boolean)", "public org.rocksdb.DBOptionsInterface setAllowFAllocate(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseDirectIoForFlushAndCompaction(boolean)", "public org.rocksdb.DBOptionsInterface setUseDirectIoForFlushAndCompaction(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseDirectReads(boolean)", "public org.rocksdb.DBOptionsInterface setUseDirectReads(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setManifestPreallocationSize(long)", "public org.rocksdb.DBOptionsInterface setManifestPreallocationSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalSizeLimitMB(long)", "public org.rocksdb.DBOptionsInterface setWalSizeLimitMB(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalTtlSeconds(long)", "public org.rocksdb.DBOptionsInterface setWalTtlSeconds(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setTableCacheNumshardbits(int)", "public org.rocksdb.DBOptionsInterface setTableCacheNumshardbits(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxManifestFileSize(long)", "public org.rocksdb.DBOptionsInterface setMaxManifestFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRecycleLogFileNum(long)", "public org.rocksdb.DBOptionsInterface setRecycleLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setKeepLogFileNum(long)", "public org.rocksdb.DBOptionsInterface setKeepLogFileNum(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setLogFileTimeToRoll(long)", "public org.rocksdb.DBOptionsInterface setLogFileTimeToRoll(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxLogFileSize(long)", "public org.rocksdb.DBOptionsInterface setMaxLogFileSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxBackgroundJobs(int)", "public org.rocksdb.DBOptionsInterface setMaxBackgroundJobs(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxBackgroundFlushes(int)", "public org.rocksdb.DBOptionsInterface setMaxBackgroundFlushes(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxBackgroundCompactions(int)", "public org.rocksdb.DBOptionsInterface setMaxBackgroundCompactions(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDeleteObsoleteFilesPeriodMicros(long)", "public org.rocksdb.DBOptionsInterface setDeleteObsoleteFilesPeriodMicros(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setWalDir(java.lang.String)", "public org.rocksdb.DBOptionsInterface setWalDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDbLogDir(java.lang.String)", "public org.rocksdb.DBOptionsInterface setDbLogDir(java.lang.String)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setDbPaths(java.util.Collection)", "public org.rocksdb.DBOptionsInterface setDbPaths(java.util.Collection)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setUseFsync(boolean)", "public org.rocksdb.DBOptionsInterface setUseFsync(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setStatistics(org.rocksdb.Statistics)", "public org.rocksdb.DBOptionsInterface setStatistics(org.rocksdb.Statistics)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxTotalWalSize(long)", "public org.rocksdb.DBOptionsInterface setMaxTotalWalSize(long)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxFileOpeningThreads(int)", "public org.rocksdb.DBOptionsInterface setMaxFileOpeningThreads(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setMaxOpenFiles(int)", "public org.rocksdb.DBOptionsInterface setMaxOpenFiles(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setInfoLogLevel(org.rocksdb.InfoLogLevel)", "public org.rocksdb.DBOptionsInterface setInfoLogLevel(org.rocksdb.InfoLogLevel)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setLogger(org.rocksdb.Logger)", "public org.rocksdb.DBOptionsInterface setLogger(org.rocksdb.Logger)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setRateLimiter(org.rocksdb.RateLimiter)", "public org.rocksdb.DBOptionsInterface setRateLimiter(org.rocksdb.RateLimiter)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setParanoidChecks(boolean)", "public org.rocksdb.DBOptionsInterface setParanoidChecks(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setErrorIfExists(boolean)", "public org.rocksdb.DBOptionsInterface setErrorIfExists(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setCreateMissingColumnFamilies(boolean)", "public org.rocksdb.DBOptionsInterface setCreateMissingColumnFamilies(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setCreateIfMissing(boolean)", "public org.rocksdb.DBOptionsInterface setCreateIfMissing(boolean)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setIncreaseParallelism(int)", "public org.rocksdb.DBOptionsInterface setIncreaseParallelism(int)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.setEnv(org.rocksdb.Env)", "public org.rocksdb.DBOptionsInterface setEnv(org.rocksdb.Env)"], ["org.rocksdb.DBOptionsInterface", "org.rocksdb.Options.optimizeForSmallDb()", "public org.rocksdb.DBOptionsInterface optimizeForSmallDb()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompressionOptions(org.rocksdb.CompressionOptions)", "public org.rocksdb.ColumnFamilyOptionsInterface setCompressionOptions(org.rocksdb.CompressionOptions)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setBottommostCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.ColumnFamilyOptionsInterface setBottommostCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setTableFormatConfig(org.rocksdb.TableFormatConfig)", "public org.rocksdb.ColumnFamilyOptionsInterface setTableFormatConfig(org.rocksdb.TableFormatConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMemTableConfig(org.rocksdb.MemTableConfig)", "public org.rocksdb.ColumnFamilyOptionsInterface setMemTableConfig(org.rocksdb.MemTableConfig)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxTableFilesSizeFIFO(long)", "public org.rocksdb.ColumnFamilyOptionsInterface setMaxTableFilesSizeFIFO(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.ColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelZeroStopWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroStopWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelZeroSlowdownWritesTrigger(int)", "public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroSlowdownWritesTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelZeroFileNumCompactionTrigger(int)", "public org.rocksdb.ColumnFamilyOptionsInterface setLevelZeroFileNumCompactionTrigger(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.useCappedPrefixExtractor(int)", "public org.rocksdb.ColumnFamilyOptionsInterface useCappedPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.useFixedLengthPrefixExtractor(int)", "public org.rocksdb.ColumnFamilyOptionsInterface useFixedLengthPrefixExtractor(int)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMergeOperator(org.rocksdb.MergeOperator)", "public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperator(org.rocksdb.MergeOperator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setMergeOperatorName(java.lang.String)", "public org.rocksdb.ColumnFamilyOptionsInterface setMergeOperatorName(java.lang.String)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setComparator(org.rocksdb.AbstractComparator)", "public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.AbstractComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setComparator(org.rocksdb.BuiltinComparator)", "public org.rocksdb.ColumnFamilyOptionsInterface setComparator(org.rocksdb.BuiltinComparator)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeUniversalStyleCompaction(long)", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeUniversalStyleCompaction()", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeUniversalStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeLevelStyleCompaction(long)", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeLevelStyleCompaction()", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeLevelStyleCompaction()"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeForPointLookup(long)", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeForPointLookup(long)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.optimizeForSmallDb()", "public org.rocksdb.ColumnFamilyOptionsInterface optimizeForSmallDb()"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setForceConsistencyChecks(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setForceConsistencyChecks(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setOptimizeFiltersForHits(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setOptimizeFiltersForHits(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsFIFO(org.rocksdb.CompactionOptionsFIFO)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionOptionsUniversal(org.rocksdb.CompactionOptionsUniversal)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionPriority(org.rocksdb.CompactionPriority)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompactionPriority(org.rocksdb.CompactionPriority)"], ["org.rocksdb.ColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompactionStyle(org.rocksdb.CompactionStyle)", "public org.rocksdb.ColumnFamilyOptionsInterface setCompactionStyle(org.rocksdb.CompactionStyle)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxCompactionBytes(long)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxCompactionBytes(long)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevelCompactionDynamicLevelBytes(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setLevelCompactionDynamicLevelBytes(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setNumLevels(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setNumLevels(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompressionPerLevel(java.util.List)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setCompressionPerLevel(java.util.List)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setBloomLocality(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setBloomLocality(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setInplaceUpdateSupport(boolean)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setInplaceUpdateSupport(boolean)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxWriteBufferNumberToMaintain(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMaxWriteBufferNumberToMaintain(int)"], ["org.rocksdb.AdvancedColumnFamilyOptionsInterface", "org.rocksdb.Options.setMinWriteBufferNumberToMerge(int)", "public org.rocksdb.AdvancedColumnFamilyOptionsInterface setMinWriteBufferNumberToMerge(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setCompressionType(org.rocksdb.CompressionType)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setCompressionType(org.rocksdb.CompressionType)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelBase(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxBytesForLevelBase(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxCompactionBytes(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setMaxCompactionBytes(long)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevel0FileNumCompactionTrigger(int)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setLevel0FileNumCompactionTrigger(int)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setDisableAutoCompactions(boolean)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setDisableAutoCompactions(boolean)"], ["org.rocksdb.MutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setWriteBufferSize(long)", "public org.rocksdb.MutableColumnFamilyOptionsInterface setWriteBufferSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setReportBgIoStats(boolean)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setReportBgIoStats(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setParanoidFileChecks(boolean)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setParanoidFileChecks(boolean)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxSuccessiveMerges(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSuccessiveMerges(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxSequentialSkipInIterations(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxSequentialSkipInIterations(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setHardPendingCompactionBytesLimit(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setHardPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setSoftPendingCompactionBytesLimit(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setSoftPendingCompactionBytesLimit(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelMultiplierAdditional(int[])", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplierAdditional(int[])"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxBytesForLevelMultiplier(double)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxBytesForLevelMultiplier(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setTargetFileSizeMultiplier(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeMultiplier(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setTargetFileSizeBase(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setTargetFileSizeBase(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevel0StopWritesTrigger(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0StopWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setLevel0SlowdownWritesTrigger(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setLevel0SlowdownWritesTrigger(int)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setArenaBlockSize(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setArenaBlockSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMemtableHugePageSize(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtableHugePageSize(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMemtablePrefixBloomSizeRatio(double)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMemtablePrefixBloomSizeRatio(double)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setInplaceUpdateNumLocks(long)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setInplaceUpdateNumLocks(long)"], ["org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface", "org.rocksdb.Options.setMaxWriteBufferNumber(int)", "public org.rocksdb.AdvancedMutableColumnFamilyOptionsInterface setMaxWriteBufferNumber(int)"], ["void", "org.rocksdb.OptionsUtil.loadLatestOptions(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>)", "public static void loadLatestOptions(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.OptionsUtil.loadLatestOptions(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, boolean)", "public static void loadLatestOptions(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, boolean) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.OptionsUtil.loadOptionsFromFile(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>)", "public static void loadOptionsFromFile(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.OptionsUtil.loadOptionsFromFile(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, boolean)", "public static void loadOptionsFromFile(java.lang.String, org.rocksdb.Env, org.rocksdb.DBOptions, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, boolean) throws org.rocksdb.RocksDBException"], ["java.lang.String", "org.rocksdb.OptionsUtil.getLatestOptionsFileName(java.lang.String, org.rocksdb.Env)", "public static java.lang.String getLatestOptionsFileName(java.lang.String, org.rocksdb.Env) throws org.rocksdb.RocksDBException"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig()", "public org.rocksdb.PlainTableConfig()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setKeySize(int)", "public org.rocksdb.PlainTableConfig setKeySize(int)"], ["int", "org.rocksdb.PlainTableConfig.keySize()", "public int keySize()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setBloomBitsPerKey(int)", "public org.rocksdb.PlainTableConfig setBloomBitsPerKey(int)"], ["int", "org.rocksdb.PlainTableConfig.bloomBitsPerKey()", "public int bloomBitsPerKey()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setHashTableRatio(double)", "public org.rocksdb.PlainTableConfig setHashTableRatio(double)"], ["double", "org.rocksdb.PlainTableConfig.hashTableRatio()", "public double hashTableRatio()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setIndexSparseness(int)", "public org.rocksdb.PlainTableConfig setIndexSparseness(int)"], ["long", "org.rocksdb.PlainTableConfig.indexSparseness()", "public long indexSparseness()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setHugePageTlbSize(int)", "public org.rocksdb.PlainTableConfig setHugePageTlbSize(int)"], ["int", "org.rocksdb.PlainTableConfig.hugePageTlbSize()", "public int hugePageTlbSize()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setEncodingType(org.rocksdb.EncodingType)", "public org.rocksdb.PlainTableConfig setEncodingType(org.rocksdb.EncodingType)"], ["org.rocksdb.EncodingType", "org.rocksdb.PlainTableConfig.encodingType()", "public org.rocksdb.EncodingType encodingType()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setFullScanMode(boolean)", "public org.rocksdb.PlainTableConfig setFullScanMode(boolean)"], ["boolean", "org.rocksdb.PlainTableConfig.fullScanMode()", "public boolean fullScanMode()"], ["org.rocksdb.PlainTableConfig", "org.rocksdb.PlainTableConfig.setStoreIndexInFile(boolean)", "public org.rocksdb.PlainTableConfig setStoreIndexInFile(boolean)"], ["boolean", "org.rocksdb.PlainTableConfig.storeIndexInFile()", "public boolean storeIndexInFile()"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long)", "public org.rocksdb.RateLimiter(long)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long)", "public org.rocksdb.RateLimiter(long, long)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long, int)", "public org.rocksdb.RateLimiter(long, long, int)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long, int, org.rocksdb.RateLimiterMode)", "public org.rocksdb.RateLimiter(long, long, int, org.rocksdb.RateLimiterMode)"], ["org.rocksdb.RateLimiter", "org.rocksdb.RateLimiter(long, long, int, org.rocksdb.RateLimiterMode, boolean)", "public org.rocksdb.RateLimiter(long, long, int, org.rocksdb.RateLimiterMode, boolean)"], ["void", "org.rocksdb.RateLimiter.setBytesPerSecond(long)", "public void setBytesPerSecond(long)"], ["long", "org.rocksdb.RateLimiter.getBytesPerSecond()", "public long getBytesPerSecond()"], ["void", "org.rocksdb.RateLimiter.request(long)", "public void request(long)"], ["long", "org.rocksdb.RateLimiter.getSingleBurstBytes()", "public long getSingleBurstBytes()"], ["long", "org.rocksdb.RateLimiter.getTotalBytesThrough()", "public long getTotalBytesThrough()"], ["long", "org.rocksdb.RateLimiter.getTotalRequests()", "public long getTotalRequests()"], ["org.rocksdb.RateLimiterMode[]", "org.rocksdb.RateLimiterMode.values()", "public static org.rocksdb.RateLimiterMode[] values()"], ["org.rocksdb.RateLimiterMode", "org.rocksdb.RateLimiterMode.valueOf(java.lang.String)", "public static org.rocksdb.RateLimiterMode valueOf(java.lang.String)"], ["byte", "org.rocksdb.RateLimiterMode.getValue()", "public byte getValue()"], ["org.rocksdb.RateLimiterMode", "org.rocksdb.RateLimiterMode.getRateLimiterMode(byte)", "public static org.rocksdb.RateLimiterMode getRateLimiterMode(byte)"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions()", "public org.rocksdb.ReadOptions()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions(org.rocksdb.ReadOptions)", "public org.rocksdb.ReadOptions(org.rocksdb.ReadOptions)"], ["boolean", "org.rocksdb.ReadOptions.verifyChecksums()", "public boolean verifyChecksums()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setVerifyChecksums(boolean)", "public org.rocksdb.ReadOptions setVerifyChecksums(boolean)"], ["boolean", "org.rocksdb.ReadOptions.fillCache()", "public boolean fillCache()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setFillCache(boolean)", "public org.rocksdb.ReadOptions setFillCache(boolean)"], ["org.rocksdb.Snapshot", "org.rocksdb.ReadOptions.snapshot()", "public org.rocksdb.Snapshot snapshot()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setSnapshot(org.rocksdb.Snapshot)", "public org.rocksdb.ReadOptions setSnapshot(org.rocksdb.Snapshot)"], ["org.rocksdb.ReadTier", "org.rocksdb.ReadOptions.readTier()", "public org.rocksdb.ReadTier readTier()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setReadTier(org.rocksdb.ReadTier)", "public org.rocksdb.ReadOptions setReadTier(org.rocksdb.ReadTier)"], ["boolean", "org.rocksdb.ReadOptions.tailing()", "public boolean tailing()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setTailing(boolean)", "public org.rocksdb.ReadOptions setTailing(boolean)"], ["boolean", "org.rocksdb.ReadOptions.managed()", "public boolean managed()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setManaged(boolean)", "public org.rocksdb.ReadOptions setManaged(boolean)"], ["boolean", "org.rocksdb.ReadOptions.totalOrderSeek()", "public boolean totalOrderSeek()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setTotalOrderSeek(boolean)", "public org.rocksdb.ReadOptions setTotalOrderSeek(boolean)"], ["boolean", "org.rocksdb.ReadOptions.prefixSameAsStart()", "public boolean prefixSameAsStart()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setPrefixSameAsStart(boolean)", "public org.rocksdb.ReadOptions setPrefixSameAsStart(boolean)"], ["boolean", "org.rocksdb.ReadOptions.pinData()", "public boolean pinData()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setPinData(boolean)", "public org.rocksdb.ReadOptions setPinData(boolean)"], ["boolean", "org.rocksdb.ReadOptions.backgroundPurgeOnIteratorCleanup()", "public boolean backgroundPurgeOnIteratorCleanup()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setBackgroundPurgeOnIteratorCleanup(boolean)", "public org.rocksdb.ReadOptions setBackgroundPurgeOnIteratorCleanup(boolean)"], ["long", "org.rocksdb.ReadOptions.readaheadSize()", "public long readaheadSize()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setReadaheadSize(long)", "public org.rocksdb.ReadOptions setReadaheadSize(long)"], ["boolean", "org.rocksdb.ReadOptions.ignoreRangeDeletions()", "public boolean ignoreRangeDeletions()"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setIgnoreRangeDeletions(boolean)", "public org.rocksdb.ReadOptions setIgnoreRangeDeletions(boolean)"], ["org.rocksdb.ReadOptions", "org.rocksdb.ReadOptions.setIterateUpperBound(org.rocksdb.Slice)", "public org.rocksdb.ReadOptions setIterateUpperBound(org.rocksdb.Slice)"], ["org.rocksdb.Slice", "org.rocksdb.ReadOptions.iterateUpperBound()", "public org.rocksdb.Slice iterateUpperBound()"], ["org.rocksdb.ReadTier[]", "org.rocksdb.ReadTier.values()", "public static org.rocksdb.ReadTier[] values()"], ["org.rocksdb.ReadTier", "org.rocksdb.ReadTier.valueOf(java.lang.String)", "public static org.rocksdb.ReadTier valueOf(java.lang.String)"], ["byte", "org.rocksdb.ReadTier.getValue()", "public byte getValue()"], ["org.rocksdb.ReadTier", "org.rocksdb.ReadTier.getReadTier(byte)", "public static org.rocksdb.ReadTier getReadTier(byte)"], ["org.rocksdb.RemoveEmptyValueCompactionFilter", "org.rocksdb.RemoveEmptyValueCompactionFilter()", "public org.rocksdb.RemoveEmptyValueCompactionFilter()"], ["org.rocksdb.RestoreOptions", "org.rocksdb.RestoreOptions(boolean)", "public org.rocksdb.RestoreOptions(boolean)"], ["org.rocksdb.RocksDB$LibraryState[]", "org.rocksdb.RocksDB$LibraryState.values()", "public static org.rocksdb.RocksDB$LibraryState[] values()"], ["org.rocksdb.RocksDB$LibraryState", "org.rocksdb.RocksDB$LibraryState.valueOf(java.lang.String)", "public static org.rocksdb.RocksDB$LibraryState valueOf(java.lang.String)"], ["void", "org.rocksdb.RocksDB.loadLibrary()", "public static void loadLibrary()"], ["void", "org.rocksdb.RocksDB.loadLibrary(java.util.List<java.lang.String>)", "public static void loadLibrary(java.util.List<java.lang.String>)"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(java.lang.String)", "public static org.rocksdb.RocksDB open(java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public static org.rocksdb.RocksDB open(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(org.rocksdb.Options, java.lang.String)", "public static org.rocksdb.RocksDB open(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public static org.rocksdb.RocksDB open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(java.lang.String)", "public static org.rocksdb.RocksDB openReadOnly(java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public static org.rocksdb.RocksDB openReadOnly(java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(org.rocksdb.Options, java.lang.String)", "public static org.rocksdb.RocksDB openReadOnly(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDB", "org.rocksdb.RocksDB.openReadOnly(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public static org.rocksdb.RocksDB openReadOnly(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["java.util.List<byte[]>", "org.rocksdb.RocksDB.listColumnFamilies(org.rocksdb.Options, java.lang.String)", "public static java.util.List<byte[]> listColumnFamilies(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.put(byte[], byte[])", "public void put(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.put(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void put(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.put(org.rocksdb.WriteOptions, byte[], byte[])", "public void put(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[])", "public void put(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(byte[], java.lang.StringBuilder)", "public boolean keyMayExist(byte[], java.lang.StringBuilder)"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder)", "public boolean keyMayExist(org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder)"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(org.rocksdb.ReadOptions, byte[], java.lang.StringBuilder)", "public boolean keyMayExist(org.rocksdb.ReadOptions, byte[], java.lang.StringBuilder)"], ["boolean", "org.rocksdb.RocksDB.keyMayExist(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder)", "public boolean keyMayExist(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], java.lang.StringBuilder)"], ["void", "org.rocksdb.RocksDB.write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatch)", "public void write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatch) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatchWithIndex)", "public void write(org.rocksdb.WriteOptions, org.rocksdb.WriteBatchWithIndex) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.merge(byte[], byte[])", "public void merge(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.merge(org.rocksdb.WriteOptions, byte[], byte[])", "public void merge(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[])", "public void merge(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["int", "org.rocksdb.RocksDB.get(byte[], byte[])", "public int get(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["int", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public int get(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException"], ["int", "org.rocksdb.RocksDB.get(org.rocksdb.ReadOptions, byte[], byte[])", "public int get(org.rocksdb.ReadOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["int", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], byte[])", "public int get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.RocksDB.get(byte[])", "public byte[] get(byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, byte[])", "public byte[] get(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.RocksDB.get(org.rocksdb.ReadOptions, byte[])", "public byte[] get(org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.RocksDB.get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[])", "public byte[] get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(java.util.List<byte[]>)", "public java.util.Map<byte[], byte[]> multiGet(java.util.List<byte[]>) throws org.rocksdb.RocksDBException"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>)", "public java.util.Map<byte[], byte[]> multiGet(java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(org.rocksdb.ReadOptions, java.util.List<byte[]>)", "public java.util.Map<byte[], byte[]> multiGet(org.rocksdb.ReadOptions, java.util.List<byte[]>) throws org.rocksdb.RocksDBException"], ["java.util.Map<byte[], byte[]>", "org.rocksdb.RocksDB.multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>)", "public java.util.Map<byte[], byte[]> multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<byte[]>) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.remove(byte[])", "public void remove(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.delete(byte[])", "public void delete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.remove(org.rocksdb.ColumnFamilyHandle, byte[])", "public void remove(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.delete(org.rocksdb.ColumnFamilyHandle, byte[])", "public void delete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.remove(org.rocksdb.WriteOptions, byte[])", "public void remove(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.delete(org.rocksdb.WriteOptions, byte[])", "public void delete(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.remove(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[])", "public void remove(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[])", "public void delete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.singleDelete(byte[])", "public void singleDelete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[])", "public void singleDelete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.singleDelete(org.rocksdb.WriteOptions, byte[])", "public void singleDelete(org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.singleDelete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[])", "public void singleDelete(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[]) throws org.rocksdb.RocksDBException"], ["java.lang.String", "org.rocksdb.RocksDB.getProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String)", "public java.lang.String getProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.deleteRange(byte[], byte[])", "public void deleteRange(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void deleteRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.deleteRange(org.rocksdb.WriteOptions, byte[], byte[])", "public void deleteRange(org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.deleteRange(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[])", "public void deleteRange(org.rocksdb.ColumnFamilyHandle, org.rocksdb.WriteOptions, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["java.lang.String", "org.rocksdb.RocksDB.getProperty(java.lang.String)", "public java.lang.String getProperty(java.lang.String) throws org.rocksdb.RocksDBException"], ["long", "org.rocksdb.RocksDB.getLongProperty(java.lang.String)", "public long getLongProperty(java.lang.String) throws org.rocksdb.RocksDBException"], ["long", "org.rocksdb.RocksDB.getLongProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String)", "public long getLongProperty(org.rocksdb.ColumnFamilyHandle, java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator()", "public org.rocksdb.RocksIterator newIterator()"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator(org.rocksdb.ReadOptions)", "public org.rocksdb.RocksIterator newIterator(org.rocksdb.ReadOptions)"], ["org.rocksdb.Snapshot", "org.rocksdb.RocksDB.getSnapshot()", "public org.rocksdb.Snapshot getSnapshot()"], ["void", "org.rocksdb.RocksDB.releaseSnapshot(org.rocksdb.Snapshot)", "public void releaseSnapshot(org.rocksdb.Snapshot)"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator(org.rocksdb.ColumnFamilyHandle)", "public org.rocksdb.RocksIterator newIterator(org.rocksdb.ColumnFamilyHandle)"], ["org.rocksdb.RocksIterator", "org.rocksdb.RocksDB.newIterator(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions)", "public org.rocksdb.RocksIterator newIterator(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions)"], ["java.util.List<org.rocksdb.RocksIterator>", "org.rocksdb.RocksDB.newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public java.util.List<org.rocksdb.RocksIterator> newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["java.util.List<org.rocksdb.RocksIterator>", "org.rocksdb.RocksDB.newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>, org.rocksdb.ReadOptions)", "public java.util.List<org.rocksdb.RocksIterator> newIterators(java.util.List<org.rocksdb.ColumnFamilyHandle>, org.rocksdb.ReadOptions) throws org.rocksdb.RocksDBException"], ["org.rocksdb.ColumnFamilyHandle", "org.rocksdb.RocksDB.getDefaultColumnFamily()", "public org.rocksdb.ColumnFamilyHandle getDefaultColumnFamily()"], ["org.rocksdb.ColumnFamilyHandle", "org.rocksdb.RocksDB.createColumnFamily(org.rocksdb.ColumnFamilyDescriptor)", "public org.rocksdb.ColumnFamilyHandle createColumnFamily(org.rocksdb.ColumnFamilyDescriptor) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.dropColumnFamily(org.rocksdb.ColumnFamilyHandle)", "public void dropColumnFamily(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException, java.lang.IllegalArgumentException"], ["void", "org.rocksdb.RocksDB.flush(org.rocksdb.FlushOptions)", "public void flush(org.rocksdb.FlushOptions) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.flush(org.rocksdb.FlushOptions, org.rocksdb.ColumnFamilyHandle)", "public void flush(org.rocksdb.FlushOptions, org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange()", "public void compactRange() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(byte[], byte[])", "public void compactRange(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(boolean, int, int)", "public void compactRange(boolean, int, int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(byte[], byte[], boolean, int, int)", "public void compactRange(byte[], byte[], boolean, int, int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle)", "public void compactRange(org.rocksdb.ColumnFamilyHandle) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle, boolean, int, int)", "public void compactRange(org.rocksdb.ColumnFamilyHandle, boolean, int, int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], boolean, int, int)", "public void compactRange(org.rocksdb.ColumnFamilyHandle, byte[], byte[], boolean, int, int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.pauseBackgroundWork()", "public void pauseBackgroundWork() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.continueBackgroundWork()", "public void continueBackgroundWork() throws org.rocksdb.RocksDBException"], ["long", "org.rocksdb.RocksDB.getLatestSequenceNumber()", "public long getLatestSequenceNumber()"], ["void", "org.rocksdb.RocksDB.disableFileDeletions()", "public void disableFileDeletions() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.enableFileDeletions(boolean)", "public void enableFileDeletions(boolean) throws org.rocksdb.RocksDBException"], ["org.rocksdb.TransactionLogIterator", "org.rocksdb.RocksDB.getUpdatesSince(long)", "public org.rocksdb.TransactionLogIterator getUpdatesSince(long) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.setOptions(org.rocksdb.ColumnFamilyHandle, org.rocksdb.MutableColumnFamilyOptions)", "public void setOptions(org.rocksdb.ColumnFamilyHandle, org.rocksdb.MutableColumnFamilyOptions) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.ingestExternalFile(java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions)", "public void ingestExternalFile(java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.ingestExternalFile(org.rocksdb.ColumnFamilyHandle, java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions)", "public void ingestExternalFile(org.rocksdb.ColumnFamilyHandle, java.util.List<java.lang.String>, org.rocksdb.IngestExternalFileOptions) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.RocksDB.destroyDB(java.lang.String, org.rocksdb.Options)", "public static void destroyDB(java.lang.String, org.rocksdb.Options) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksDBException", "org.rocksdb.RocksDBException(java.lang.String)", "public org.rocksdb.RocksDBException(java.lang.String)"], ["org.rocksdb.RocksDBException", "org.rocksdb.RocksDBException(java.lang.String, org.rocksdb.Status)", "public org.rocksdb.RocksDBException(java.lang.String, org.rocksdb.Status)"], ["org.rocksdb.RocksDBException", "org.rocksdb.RocksDBException(org.rocksdb.Status)", "public org.rocksdb.RocksDBException(org.rocksdb.Status)"], ["org.rocksdb.Status", "org.rocksdb.RocksDBException.getStatus()", "public org.rocksdb.Status getStatus()"], ["byte[]", "org.rocksdb.RocksIterator.key()", "public byte[] key()"], ["byte[]", "org.rocksdb.RocksIterator.value()", "public byte[] value()"], ["org.rocksdb.RocksMemEnv", "org.rocksdb.RocksMemEnv()", "public org.rocksdb.RocksMemEnv()"], ["synchronized", "org.rocksdb.RocksMutableObject.void resetNativeHandle(long, boolean)", "public synchronized void resetNativeHandle(long, boolean)"], ["synchronized", "org.rocksdb.RocksMutableObject.void setNativeHandle(long, boolean)", "public synchronized void setNativeHandle(long, boolean)"], ["synchronized", "org.rocksdb.RocksMutableObject.void close()", "public final synchronized void close()"], ["org.rocksdb.SkipListMemTableConfig", "org.rocksdb.SkipListMemTableConfig()", "public org.rocksdb.SkipListMemTableConfig()"], ["org.rocksdb.SkipListMemTableConfig", "org.rocksdb.SkipListMemTableConfig.setLookahead(long)", "public org.rocksdb.SkipListMemTableConfig setLookahead(long)"], ["long", "org.rocksdb.SkipListMemTableConfig.lookahead()", "public long lookahead()"], ["org.rocksdb.Slice", "org.rocksdb.Slice(java.lang.String)", "public org.rocksdb.Slice(java.lang.String)"], ["org.rocksdb.Slice", "org.rocksdb.Slice(byte[], int)", "public org.rocksdb.Slice(byte[], int)"], ["org.rocksdb.Slice", "org.rocksdb.Slice(byte[])", "public org.rocksdb.Slice(byte[])"], ["void", "org.rocksdb.Slice.clear()", "public void clear()"], ["void", "org.rocksdb.Slice.removePrefix(int)", "public void removePrefix(int)"], ["long", "org.rocksdb.Snapshot.getSequenceNumber()", "public long getSequenceNumber()"], ["org.rocksdb.SstFileWriter", "org.rocksdb.SstFileWriter(org.rocksdb.EnvOptions, org.rocksdb.Options, org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)", "public org.rocksdb.SstFileWriter(org.rocksdb.EnvOptions, org.rocksdb.Options, org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>)"], ["org.rocksdb.SstFileWriter", "org.rocksdb.SstFileWriter(org.rocksdb.EnvOptions, org.rocksdb.Options)", "public org.rocksdb.SstFileWriter(org.rocksdb.EnvOptions, org.rocksdb.Options)"], ["void", "org.rocksdb.SstFileWriter.open(java.lang.String)", "public void open(java.lang.String) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.add(org.rocksdb.Slice, org.rocksdb.Slice)", "public void add(org.rocksdb.Slice, org.rocksdb.Slice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.add(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)", "public void add(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.put(org.rocksdb.Slice, org.rocksdb.Slice)", "public void put(org.rocksdb.Slice, org.rocksdb.Slice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.put(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)", "public void put(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.put(byte[], byte[])", "public void put(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.merge(org.rocksdb.Slice, org.rocksdb.Slice)", "public void merge(org.rocksdb.Slice, org.rocksdb.Slice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.merge(byte[], byte[])", "public void merge(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.merge(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)", "public void merge(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.delete(org.rocksdb.Slice)", "public void delete(org.rocksdb.Slice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.delete(org.rocksdb.DirectSlice)", "public void delete(org.rocksdb.DirectSlice) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.delete(byte[])", "public void delete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.SstFileWriter.finish()", "public void finish() throws org.rocksdb.RocksDBException"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics()", "public org.rocksdb.Statistics()"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics(org.rocksdb.Statistics)", "public org.rocksdb.Statistics(org.rocksdb.Statistics)"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics(java.util.EnumSet<org.rocksdb.HistogramType>)", "public org.rocksdb.Statistics(java.util.EnumSet<org.rocksdb.HistogramType>)"], ["org.rocksdb.Statistics", "org.rocksdb.Statistics(java.util.EnumSet<org.rocksdb.HistogramType>, org.rocksdb.Statistics)", "public org.rocksdb.Statistics(java.util.EnumSet<org.rocksdb.HistogramType>, org.rocksdb.Statistics)"], ["org.rocksdb.StatsLevel", "org.rocksdb.Statistics.statsLevel()", "public org.rocksdb.StatsLevel statsLevel()"], ["void", "org.rocksdb.Statistics.setStatsLevel(org.rocksdb.StatsLevel)", "public void setStatsLevel(org.rocksdb.StatsLevel)"], ["long", "org.rocksdb.Statistics.getTickerCount(org.rocksdb.TickerType)", "public long getTickerCount(org.rocksdb.TickerType)"], ["long", "org.rocksdb.Statistics.getAndResetTickerCount(org.rocksdb.TickerType)", "public long getAndResetTickerCount(org.rocksdb.TickerType)"], ["org.rocksdb.HistogramData", "org.rocksdb.Statistics.getHistogramData(org.rocksdb.HistogramType)", "public org.rocksdb.HistogramData getHistogramData(org.rocksdb.HistogramType)"], ["java.lang.String", "org.rocksdb.Statistics.getHistogramString(org.rocksdb.HistogramType)", "public java.lang.String getHistogramString(org.rocksdb.HistogramType)"], ["void", "org.rocksdb.Statistics.reset()", "public void reset() throws org.rocksdb.RocksDBException"], ["java.lang.String", "org.rocksdb.Statistics.toString()", "public java.lang.String toString()"], ["void", "org.rocksdb.StatisticsCollector$1.run()", "public void run()"], ["org.rocksdb.StatisticsCollector", "org.rocksdb.StatisticsCollector(java.util.List<org.rocksdb.StatsCollectorInput>, int)", "public org.rocksdb.StatisticsCollector(java.util.List<org.rocksdb.StatsCollectorInput>, int)"], ["void", "org.rocksdb.StatisticsCollector.start()", "public void start()"], ["void", "org.rocksdb.StatisticsCollector.shutDown(int)", "public void shutDown(int) throws java.lang.InterruptedException"], ["org.rocksdb.StatsCollectorInput", "org.rocksdb.StatsCollectorInput(org.rocksdb.Statistics, org.rocksdb.StatisticsCollectorCallback)", "public org.rocksdb.StatsCollectorInput(org.rocksdb.Statistics, org.rocksdb.StatisticsCollectorCallback)"], ["org.rocksdb.Statistics", "org.rocksdb.StatsCollectorInput.getStatistics()", "public org.rocksdb.Statistics getStatistics()"], ["org.rocksdb.StatisticsCollectorCallback", "org.rocksdb.StatsCollectorInput.getCallback()", "public org.rocksdb.StatisticsCollectorCallback getCallback()"], ["org.rocksdb.StatsLevel[]", "org.rocksdb.StatsLevel.values()", "public static org.rocksdb.StatsLevel[] values()"], ["org.rocksdb.StatsLevel", "org.rocksdb.StatsLevel.valueOf(java.lang.String)", "public static org.rocksdb.StatsLevel valueOf(java.lang.String)"], ["byte", "org.rocksdb.StatsLevel.getValue()", "public byte getValue()"], ["org.rocksdb.StatsLevel", "org.rocksdb.StatsLevel.getStatsLevel(byte)", "public static org.rocksdb.StatsLevel getStatsLevel(byte)"], ["org.rocksdb.Status$Code[]", "org.rocksdb.Status$Code.values()", "public static org.rocksdb.Status$Code[] values()"], ["org.rocksdb.Status$Code", "org.rocksdb.Status$Code.valueOf(java.lang.String)", "public static org.rocksdb.Status$Code valueOf(java.lang.String)"], ["org.rocksdb.Status$Code", "org.rocksdb.Status$Code.getCode(byte)", "public static org.rocksdb.Status$Code getCode(byte)"], ["byte", "org.rocksdb.Status$Code.getValue()", "public byte getValue()"], ["org.rocksdb.Status$SubCode[]", "org.rocksdb.Status$SubCode.values()", "public static org.rocksdb.Status$SubCode[] values()"], ["org.rocksdb.Status$SubCode", "org.rocksdb.Status$SubCode.valueOf(java.lang.String)", "public static org.rocksdb.Status$SubCode valueOf(java.lang.String)"], ["org.rocksdb.Status$SubCode", "org.rocksdb.Status$SubCode.getSubCode(byte)", "public static org.rocksdb.Status$SubCode getSubCode(byte)"], ["byte", "org.rocksdb.Status$SubCode.getValue()", "public byte getValue()"], ["org.rocksdb.Status", "org.rocksdb.Status(org.rocksdb.Status$Code, org.rocksdb.Status$SubCode, java.lang.String)", "public org.rocksdb.Status(org.rocksdb.Status$Code, org.rocksdb.Status$SubCode, java.lang.String)"], ["org.rocksdb.Status$Code", "org.rocksdb.Status.getCode()", "public org.rocksdb.Status$Code getCode()"], ["org.rocksdb.Status$SubCode", "org.rocksdb.Status.getSubCode()", "public org.rocksdb.Status$SubCode getSubCode()"], ["java.lang.String", "org.rocksdb.Status.getState()", "public java.lang.String getState()"], ["java.lang.String", "org.rocksdb.Status.getCodeString()", "public java.lang.String getCodeString()"], ["org.rocksdb.StringAppendOperator", "org.rocksdb.StringAppendOperator()", "public org.rocksdb.StringAppendOperator()"], ["org.rocksdb.TableFormatConfig", "org.rocksdb.TableFormatConfig()", "public org.rocksdb.TableFormatConfig()"], ["org.rocksdb.TickerType[]", "org.rocksdb.TickerType.values()", "public static org.rocksdb.TickerType[] values()"], ["org.rocksdb.TickerType", "org.rocksdb.TickerType.valueOf(java.lang.String)", "public static org.rocksdb.TickerType valueOf(java.lang.String)"], ["byte", "org.rocksdb.TickerType.getValue()", "public byte getValue()"], ["org.rocksdb.Transaction$TransactionState[]", "org.rocksdb.Transaction$TransactionState.values()", "public static org.rocksdb.Transaction$TransactionState[] values()"], ["org.rocksdb.Transaction$TransactionState", "org.rocksdb.Transaction$TransactionState.valueOf(java.lang.String)", "public static org.rocksdb.Transaction$TransactionState valueOf(java.lang.String)"], ["org.rocksdb.Transaction$TransactionState", "org.rocksdb.Transaction$TransactionState.getTransactionState(byte)", "public static org.rocksdb.Transaction$TransactionState getTransactionState(byte)"], ["long", "org.rocksdb.Transaction$WaitingTransactions.getColumnFamilyId()", "public long getColumnFamilyId()"], ["java.lang.String", "org.rocksdb.Transaction$WaitingTransactions.getKey()", "public java.lang.String getKey()"], ["long[]", "org.rocksdb.Transaction$WaitingTransactions.getTransactionIds()", "public long[] getTransactionIds()"], ["void", "org.rocksdb.Transaction.setSnapshot()", "public void setSnapshot()"], ["void", "org.rocksdb.Transaction.setSnapshotOnNextOperation()", "public void setSnapshotOnNextOperation()"], ["void", "org.rocksdb.Transaction.setSnapshotOnNextOperation(org.rocksdb.AbstractTransactionNotifier)", "public void setSnapshotOnNextOperation(org.rocksdb.AbstractTransactionNotifier)"], ["org.rocksdb.Snapshot", "org.rocksdb.Transaction.getSnapshot()", "public org.rocksdb.Snapshot getSnapshot()"], ["void", "org.rocksdb.Transaction.clearSnapshot()", "public void clearSnapshot()"], ["void", "org.rocksdb.Transaction.commit()", "public void commit() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.rollback()", "public void rollback() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.setSavePoint()", "public void setSavePoint() throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.rollbackToSavePoint()", "public void rollbackToSavePoint() throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.Transaction.get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[])", "public byte[] get(org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.Transaction.get(org.rocksdb.ReadOptions, byte[])", "public byte[] get(org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException"], ["byte[][]", "org.rocksdb.Transaction.multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, byte[][])", "public byte[][] multiGet(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, byte[][]) throws org.rocksdb.RocksDBException"], ["byte[][]", "org.rocksdb.Transaction.multiGet(org.rocksdb.ReadOptions, byte[][])", "public byte[][] multiGet(org.rocksdb.ReadOptions, byte[][]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.Transaction.getForUpdate(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], boolean)", "public byte[] getForUpdate(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle, byte[], boolean) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.Transaction.getForUpdate(org.rocksdb.ReadOptions, byte[], boolean)", "public byte[] getForUpdate(org.rocksdb.ReadOptions, byte[], boolean) throws org.rocksdb.RocksDBException"], ["byte[][]", "org.rocksdb.Transaction.multiGetForUpdate(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, byte[][])", "public byte[][] multiGetForUpdate(org.rocksdb.ReadOptions, java.util.List<org.rocksdb.ColumnFamilyHandle>, byte[][]) throws org.rocksdb.RocksDBException"], ["byte[][]", "org.rocksdb.Transaction.multiGetForUpdate(org.rocksdb.ReadOptions, byte[][])", "public byte[][] multiGetForUpdate(org.rocksdb.ReadOptions, byte[][]) throws org.rocksdb.RocksDBException"], ["org.rocksdb.RocksIterator", "org.rocksdb.Transaction.getIterator(org.rocksdb.ReadOptions)", "public org.rocksdb.RocksIterator getIterator(org.rocksdb.ReadOptions)"], ["org.rocksdb.RocksIterator", "org.rocksdb.Transaction.getIterator(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle)", "public org.rocksdb.RocksIterator getIterator(org.rocksdb.ReadOptions, org.rocksdb.ColumnFamilyHandle)"], ["void", "org.rocksdb.Transaction.put(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void put(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.put(byte[], byte[])", "public void put(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.put(org.rocksdb.ColumnFamilyHandle, byte[][], byte[][])", "public void put(org.rocksdb.ColumnFamilyHandle, byte[][], byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.put(byte[][], byte[][])", "public void put(byte[][], byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void merge(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.merge(byte[], byte[])", "public void merge(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.delete(org.rocksdb.ColumnFamilyHandle, byte[])", "public void delete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.delete(byte[])", "public void delete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.delete(org.rocksdb.ColumnFamilyHandle, byte[][])", "public void delete(org.rocksdb.ColumnFamilyHandle, byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.delete(byte[][])", "public void delete(byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[])", "public void singleDelete(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.singleDelete(byte[])", "public void singleDelete(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.singleDelete(org.rocksdb.ColumnFamilyHandle, byte[][])", "public void singleDelete(org.rocksdb.ColumnFamilyHandle, byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.singleDelete(byte[][])", "public void singleDelete(byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.putUntracked(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void putUntracked(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.putUntracked(byte[], byte[])", "public void putUntracked(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.putUntracked(org.rocksdb.ColumnFamilyHandle, byte[][], byte[][])", "public void putUntracked(org.rocksdb.ColumnFamilyHandle, byte[][], byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.putUntracked(byte[][], byte[][])", "public void putUntracked(byte[][], byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.mergeUntracked(org.rocksdb.ColumnFamilyHandle, byte[], byte[])", "public void mergeUntracked(org.rocksdb.ColumnFamilyHandle, byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.mergeUntracked(byte[], byte[])", "public void mergeUntracked(byte[], byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.deleteUntracked(org.rocksdb.ColumnFamilyHandle, byte[])", "public void deleteUntracked(org.rocksdb.ColumnFamilyHandle, byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.deleteUntracked(byte[])", "public void deleteUntracked(byte[]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.deleteUntracked(org.rocksdb.ColumnFamilyHandle, byte[][])", "public void deleteUntracked(org.rocksdb.ColumnFamilyHandle, byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.deleteUntracked(byte[][])", "public void deleteUntracked(byte[][]) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.Transaction.putLogData(byte[])", "public void putLogData(byte[])"], ["void", "org.rocksdb.Transaction.disableIndexing()", "public void disableIndexing()"], ["void", "org.rocksdb.Transaction.enableIndexing()", "public void enableIndexing()"], ["long", "org.rocksdb.Transaction.getNumKeys()", "public long getNumKeys()"], ["long", "org.rocksdb.Transaction.getNumPuts()", "public long getNumPuts()"], ["long", "org.rocksdb.Transaction.getNumDeletes()", "public long getNumDeletes()"], ["long", "org.rocksdb.Transaction.getNumMerges()", "public long getNumMerges()"], ["long", "org.rocksdb.Transaction.getElapsedTime()", "public long getElapsedTime()"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.Transaction.getWriteBatch()", "public org.rocksdb.WriteBatchWithIndex getWriteBatch()"], ["void", "org.rocksdb.Transaction.setLockTimeout(long)", "public void setLockTimeout(long)"], ["org.rocksdb.WriteOptions", "org.rocksdb.Transaction.getWriteOptions()", "public org.rocksdb.WriteOptions getWriteOptions()"], ["void", "org.rocksdb.Transaction.setWriteOptions(org.rocksdb.WriteOptions)", "public void setWriteOptions(org.rocksdb.WriteOptions)"], ["void", "org.rocksdb.Transaction.undoGetForUpdate(org.rocksdb.ColumnFamilyHandle, byte[])", "public void undoGetForUpdate(org.rocksdb.ColumnFamilyHandle, byte[])"], ["void", "org.rocksdb.Transaction.undoGetForUpdate(byte[])", "public void undoGetForUpdate(byte[])"], ["void", "org.rocksdb.Transaction.rebuildFromWriteBatch(org.rocksdb.WriteBatch)", "public void rebuildFromWriteBatch(org.rocksdb.WriteBatch) throws org.rocksdb.RocksDBException"], ["org.rocksdb.WriteBatch", "org.rocksdb.Transaction.getCommitTimeWriteBatch()", "public org.rocksdb.WriteBatch getCommitTimeWriteBatch()"], ["void", "org.rocksdb.Transaction.setLogNumber(long)", "public void setLogNumber(long)"], ["long", "org.rocksdb.Transaction.getLogNumber()", "public long getLogNumber()"], ["void", "org.rocksdb.Transaction.setName(java.lang.String)", "public void setName(java.lang.String) throws org.rocksdb.RocksDBException"], ["java.lang.String", "org.rocksdb.Transaction.getName()", "public java.lang.String getName()"], ["long", "org.rocksdb.Transaction.getID()", "public long getID()"], ["boolean", "org.rocksdb.Transaction.isDeadlockDetect()", "public boolean isDeadlockDetect()"], ["org.rocksdb.Transaction$WaitingTransactions", "org.rocksdb.Transaction.getWaitingTxns()", "public org.rocksdb.Transaction$WaitingTransactions getWaitingTxns()"], ["org.rocksdb.Transaction$TransactionState", "org.rocksdb.Transaction.getState()", "public org.rocksdb.Transaction$TransactionState getState()"], ["long", "org.rocksdb.Transaction.getId()", "public long getId()"], ["long", "org.rocksdb.TransactionDB$DeadlockInfo.getTransactionID()", "public long getTransactionID()"], ["long", "org.rocksdb.TransactionDB$DeadlockInfo.getColumnFamilyId()", "public long getColumnFamilyId()"], ["java.lang.String", "org.rocksdb.TransactionDB$DeadlockInfo.getWaitingKey()", "public java.lang.String getWaitingKey()"], ["boolean", "org.rocksdb.TransactionDB$DeadlockInfo.isExclusive()", "public boolean isExclusive()"], ["org.rocksdb.TransactionDB$DeadlockPath", "org.rocksdb.TransactionDB$DeadlockPath(org.rocksdb.TransactionDB$DeadlockInfo[], boolean)", "public org.rocksdb.TransactionDB$DeadlockPath(org.rocksdb.TransactionDB$DeadlockInfo[], boolean)"], ["boolean", "org.rocksdb.TransactionDB$DeadlockPath.isEmpty()", "public boolean isEmpty()"], ["org.rocksdb.TransactionDB$KeyLockInfo", "org.rocksdb.TransactionDB$KeyLockInfo(java.lang.String, long[], boolean)", "public org.rocksdb.TransactionDB$KeyLockInfo(java.lang.String, long[], boolean)"], ["java.lang.String", "org.rocksdb.TransactionDB$KeyLockInfo.getKey()", "public java.lang.String getKey()"], ["long[]", "org.rocksdb.TransactionDB$KeyLockInfo.getTransactionIDs()", "public long[] getTransactionIDs()"], ["boolean", "org.rocksdb.TransactionDB$KeyLockInfo.isExclusive()", "public boolean isExclusive()"], ["org.rocksdb.TransactionDB", "org.rocksdb.TransactionDB.open(org.rocksdb.Options, org.rocksdb.TransactionDBOptions, java.lang.String)", "public static org.rocksdb.TransactionDB open(org.rocksdb.Options, org.rocksdb.TransactionDBOptions, java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.TransactionDB", "org.rocksdb.TransactionDB.open(org.rocksdb.DBOptions, org.rocksdb.TransactionDBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>)", "public static org.rocksdb.TransactionDB open(org.rocksdb.DBOptions, org.rocksdb.TransactionDBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>) throws org.rocksdb.RocksDBException"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionOptions)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionOptions)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.Transaction)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionOptions, org.rocksdb.Transaction)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.getTransactionByName(java.lang.String)", "public org.rocksdb.Transaction getTransactionByName(java.lang.String)"], ["java.util.List<org.rocksdb.Transaction>", "org.rocksdb.TransactionDB.getAllPreparedTransactions()", "public java.util.List<org.rocksdb.Transaction> getAllPreparedTransactions()"], ["java.util.Map<java.lang.Long, org.rocksdb.TransactionDB$KeyLockInfo>", "org.rocksdb.TransactionDB.getLockStatusData()", "public java.util.Map<java.lang.Long, org.rocksdb.TransactionDB$KeyLockInfo> getLockStatusData()"], ["org.rocksdb.TransactionDB$DeadlockPath[]", "org.rocksdb.TransactionDB.getDeadlockInfoBuffer()", "public org.rocksdb.TransactionDB$DeadlockPath[] getDeadlockInfoBuffer()"], ["void", "org.rocksdb.TransactionDB.setDeadlockInfoBufferSize(int)", "public void setDeadlockInfoBufferSize(int)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions, org.rocksdb.Transaction)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions, org.rocksdb.Transaction)"], ["org.rocksdb.Transaction", "org.rocksdb.TransactionDB.beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions)", "public org.rocksdb.Transaction beginTransaction(org.rocksdb.WriteOptions, org.rocksdb.TransactionalOptions)"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions()", "public org.rocksdb.TransactionDBOptions()"], ["long", "org.rocksdb.TransactionDBOptions.getMaxNumLocks()", "public long getMaxNumLocks()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setMaxNumLocks(long)", "public org.rocksdb.TransactionDBOptions setMaxNumLocks(long)"], ["long", "org.rocksdb.TransactionDBOptions.getNumStripes()", "public long getNumStripes()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setNumStripes(long)", "public org.rocksdb.TransactionDBOptions setNumStripes(long)"], ["long", "org.rocksdb.TransactionDBOptions.getTransactionLockTimeout()", "public long getTransactionLockTimeout()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setTransactionLockTimeout(long)", "public org.rocksdb.TransactionDBOptions setTransactionLockTimeout(long)"], ["long", "org.rocksdb.TransactionDBOptions.getDefaultLockTimeout()", "public long getDefaultLockTimeout()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setDefaultLockTimeout(long)", "public org.rocksdb.TransactionDBOptions setDefaultLockTimeout(long)"], ["org.rocksdb.TxnDBWritePolicy", "org.rocksdb.TransactionDBOptions.getWritePolicy()", "public org.rocksdb.TxnDBWritePolicy getWritePolicy()"], ["org.rocksdb.TransactionDBOptions", "org.rocksdb.TransactionDBOptions.setWritePolicy(org.rocksdb.TxnDBWritePolicy)", "public org.rocksdb.TransactionDBOptions setWritePolicy(org.rocksdb.TxnDBWritePolicy)"], ["org.rocksdb.TransactionLogIterator$BatchResult", "org.rocksdb.TransactionLogIterator$BatchResult(long, long)", "public org.rocksdb.TransactionLogIterator$BatchResult(long, long)"], ["long", "org.rocksdb.TransactionLogIterator$BatchResult.sequenceNumber()", "public long sequenceNumber()"], ["org.rocksdb.WriteBatch", "org.rocksdb.TransactionLogIterator$BatchResult.writeBatch()", "public org.rocksdb.WriteBatch writeBatch()"], ["boolean", "org.rocksdb.TransactionLogIterator.isValid()", "public boolean isValid()"], ["void", "org.rocksdb.TransactionLogIterator.next()", "public void next()"], ["void", "org.rocksdb.TransactionLogIterator.status()", "public void status() throws org.rocksdb.RocksDBException"], ["org.rocksdb.TransactionLogIterator$BatchResult", "org.rocksdb.TransactionLogIterator.getBatch()", "public org.rocksdb.TransactionLogIterator$BatchResult getBatch()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions()", "public org.rocksdb.TransactionOptions()"], ["boolean", "org.rocksdb.TransactionOptions.isSetSnapshot()", "public boolean isSetSnapshot()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setSetSnapshot(boolean)", "public org.rocksdb.TransactionOptions setSetSnapshot(boolean)"], ["boolean", "org.rocksdb.TransactionOptions.isDeadlockDetect()", "public boolean isDeadlockDetect()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setDeadlockDetect(boolean)", "public org.rocksdb.TransactionOptions setDeadlockDetect(boolean)"], ["long", "org.rocksdb.TransactionOptions.getLockTimeout()", "public long getLockTimeout()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setLockTimeout(long)", "public org.rocksdb.TransactionOptions setLockTimeout(long)"], ["long", "org.rocksdb.TransactionOptions.getExpiration()", "public long getExpiration()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setExpiration(long)", "public org.rocksdb.TransactionOptions setExpiration(long)"], ["long", "org.rocksdb.TransactionOptions.getDeadlockDetectDepth()", "public long getDeadlockDetectDepth()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setDeadlockDetectDepth(long)", "public org.rocksdb.TransactionOptions setDeadlockDetectDepth(long)"], ["long", "org.rocksdb.TransactionOptions.getMaxWriteBatchSize()", "public long getMaxWriteBatchSize()"], ["org.rocksdb.TransactionOptions", "org.rocksdb.TransactionOptions.setMaxWriteBatchSize(long)", "public org.rocksdb.TransactionOptions setMaxWriteBatchSize(long)"], ["org.rocksdb.TransactionalOptions", "org.rocksdb.TransactionOptions.setSetSnapshot(boolean)", "public org.rocksdb.TransactionalOptions setSetSnapshot(boolean)"], ["org.rocksdb.TtlDB", "org.rocksdb.TtlDB.open(org.rocksdb.Options, java.lang.String)", "public static org.rocksdb.TtlDB open(org.rocksdb.Options, java.lang.String) throws org.rocksdb.RocksDBException"], ["org.rocksdb.TtlDB", "org.rocksdb.TtlDB.open(org.rocksdb.Options, java.lang.String, int, boolean)", "public static org.rocksdb.TtlDB open(org.rocksdb.Options, java.lang.String, int, boolean) throws org.rocksdb.RocksDBException"], ["org.rocksdb.TtlDB", "org.rocksdb.TtlDB.open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<java.lang.Integer>, boolean)", "public static org.rocksdb.TtlDB open(org.rocksdb.DBOptions, java.lang.String, java.util.List<org.rocksdb.ColumnFamilyDescriptor>, java.util.List<org.rocksdb.ColumnFamilyHandle>, java.util.List<java.lang.Integer>, boolean) throws org.rocksdb.RocksDBException"], ["org.rocksdb.ColumnFamilyHandle", "org.rocksdb.TtlDB.createColumnFamilyWithTtl(org.rocksdb.ColumnFamilyDescriptor, int)", "public org.rocksdb.ColumnFamilyHandle createColumnFamilyWithTtl(org.rocksdb.ColumnFamilyDescriptor, int) throws org.rocksdb.RocksDBException"], ["void", "org.rocksdb.TtlDB.close()", "public void close()"], ["org.rocksdb.TxnDBWritePolicy[]", "org.rocksdb.TxnDBWritePolicy.values()", "public static org.rocksdb.TxnDBWritePolicy[] values()"], ["org.rocksdb.TxnDBWritePolicy", "org.rocksdb.TxnDBWritePolicy.valueOf(java.lang.String)", "public static org.rocksdb.TxnDBWritePolicy valueOf(java.lang.String)"], ["byte", "org.rocksdb.TxnDBWritePolicy.getValue()", "public byte getValue()"], ["org.rocksdb.TxnDBWritePolicy", "org.rocksdb.TxnDBWritePolicy.getTxnDBWritePolicy(byte)", "public static org.rocksdb.TxnDBWritePolicy getTxnDBWritePolicy(byte)"], ["org.rocksdb.VectorMemTableConfig", "org.rocksdb.VectorMemTableConfig()", "public org.rocksdb.VectorMemTableConfig()"], ["org.rocksdb.VectorMemTableConfig", "org.rocksdb.VectorMemTableConfig.setReservedSize(int)", "public org.rocksdb.VectorMemTableConfig setReservedSize(int)"], ["int", "org.rocksdb.VectorMemTableConfig.reservedSize()", "public int reservedSize()"], ["org.rocksdb.WALRecoveryMode[]", "org.rocksdb.WALRecoveryMode.values()", "public static org.rocksdb.WALRecoveryMode[] values()"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.WALRecoveryMode.valueOf(java.lang.String)", "public static org.rocksdb.WALRecoveryMode valueOf(java.lang.String)"], ["byte", "org.rocksdb.WALRecoveryMode.getValue()", "public byte getValue()"], ["org.rocksdb.WALRecoveryMode", "org.rocksdb.WALRecoveryMode.getWALRecoveryMode(byte)", "public static org.rocksdb.WALRecoveryMode getWALRecoveryMode(byte)"], ["org.rocksdb.WBWIRocksIterator$WriteEntry", "org.rocksdb.WBWIRocksIterator$WriteEntry(org.rocksdb.WBWIRocksIterator$WriteType, org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)", "public org.rocksdb.WBWIRocksIterator$WriteEntry(org.rocksdb.WBWIRocksIterator$WriteType, org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["org.rocksdb.WBWIRocksIterator$WriteType", "org.rocksdb.WBWIRocksIterator$WriteEntry.getType()", "public org.rocksdb.WBWIRocksIterator$WriteType getType()"], ["org.rocksdb.DirectSlice", "org.rocksdb.WBWIRocksIterator$WriteEntry.getKey()", "public org.rocksdb.DirectSlice getKey()"], ["org.rocksdb.DirectSlice", "org.rocksdb.WBWIRocksIterator$WriteEntry.getValue()", "public org.rocksdb.DirectSlice getValue()"], ["int", "org.rocksdb.WBWIRocksIterator$WriteEntry.hashCode()", "public int hashCode()"], ["boolean", "org.rocksdb.WBWIRocksIterator$WriteEntry.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["void", "org.rocksdb.WBWIRocksIterator$WriteEntry.close()", "public void close()"], ["org.rocksdb.WBWIRocksIterator$WriteType[]", "org.rocksdb.WBWIRocksIterator$WriteType.values()", "public static org.rocksdb.WBWIRocksIterator$WriteType[] values()"], ["org.rocksdb.WBWIRocksIterator$WriteType", "org.rocksdb.WBWIRocksIterator$WriteType.valueOf(java.lang.String)", "public static org.rocksdb.WBWIRocksIterator$WriteType valueOf(java.lang.String)"], ["org.rocksdb.WBWIRocksIterator$WriteType", "org.rocksdb.WBWIRocksIterator$WriteType.fromId(byte)", "public static org.rocksdb.WBWIRocksIterator$WriteType fromId(byte)"], ["org.rocksdb.WBWIRocksIterator$WriteEntry", "org.rocksdb.WBWIRocksIterator.entry()", "public org.rocksdb.WBWIRocksIterator$WriteEntry entry()"], ["void", "org.rocksdb.WBWIRocksIterator.close()", "public void close()"], ["org.rocksdb.WriteBatch$Handler", "org.rocksdb.WriteBatch$Handler()", "public org.rocksdb.WriteBatch$Handler()"], ["boolean", "org.rocksdb.WriteBatch$Handler.shouldContinue()", "public boolean shouldContinue()"], ["org.rocksdb.WriteBatch$SavePoint", "org.rocksdb.WriteBatch$SavePoint(long, long, long)", "public org.rocksdb.WriteBatch$SavePoint(long, long, long)"], ["void", "org.rocksdb.WriteBatch$SavePoint.clear()", "public void clear()"], ["long", "org.rocksdb.WriteBatch$SavePoint.getSize()", "public long getSize()"], ["long", "org.rocksdb.WriteBatch$SavePoint.getCount()", "public long getCount()"], ["long", "org.rocksdb.WriteBatch$SavePoint.getContentFlags()", "public long getContentFlags()"], ["boolean", "org.rocksdb.WriteBatch$SavePoint.isCleared()", "public boolean isCleared()"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch()", "public org.rocksdb.WriteBatch()"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch(int)", "public org.rocksdb.WriteBatch(int)"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch(byte[])", "public org.rocksdb.WriteBatch(byte[])"], ["void", "org.rocksdb.WriteBatch.iterate(org.rocksdb.WriteBatch$Handler)", "public void iterate(org.rocksdb.WriteBatch$Handler) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.WriteBatch.data()", "public byte[] data()"], ["long", "org.rocksdb.WriteBatch.getDataSize()", "public long getDataSize()"], ["boolean", "org.rocksdb.WriteBatch.hasPut()", "public boolean hasPut()"], ["boolean", "org.rocksdb.WriteBatch.hasDelete()", "public boolean hasDelete()"], ["boolean", "org.rocksdb.WriteBatch.hasSingleDelete()", "public boolean hasSingleDelete()"], ["boolean", "org.rocksdb.WriteBatch.hasDeleteRange()", "public boolean hasDeleteRange()"], ["boolean", "org.rocksdb.WriteBatch.hasMerge()", "public boolean hasMerge()"], ["boolean", "org.rocksdb.WriteBatch.hasBeginPrepare()", "public boolean hasBeginPrepare()"], ["boolean", "org.rocksdb.WriteBatch.hasEndPrepare()", "public boolean hasEndPrepare()"], ["boolean", "org.rocksdb.WriteBatch.hasCommit()", "public boolean hasCommit()"], ["boolean", "org.rocksdb.WriteBatch.hasRollback()", "public boolean hasRollback()"], ["org.rocksdb.WriteBatch", "org.rocksdb.WriteBatch.getWriteBatch()", "public org.rocksdb.WriteBatch getWriteBatch()"], ["void", "org.rocksdb.WriteBatch.markWalTerminationPoint()", "public void markWalTerminationPoint()"], ["org.rocksdb.WriteBatch$SavePoint", "org.rocksdb.WriteBatch.getWalTerminationPoint()", "public org.rocksdb.WriteBatch$SavePoint getWalTerminationPoint()"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.WriteBatchWithIndex()", "public org.rocksdb.WriteBatchWithIndex()"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.WriteBatchWithIndex(boolean)", "public org.rocksdb.WriteBatchWithIndex(boolean)"], ["org.rocksdb.WriteBatchWithIndex", "org.rocksdb.WriteBatchWithIndex(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>, int, boolean)", "public org.rocksdb.WriteBatchWithIndex(org.rocksdb.AbstractComparator<? extends org.rocksdb.AbstractSlice<?>>, int, boolean)"], ["org.rocksdb.WBWIRocksIterator", "org.rocksdb.WriteBatchWithIndex.newIterator(org.rocksdb.ColumnFamilyHandle)", "public org.rocksdb.WBWIRocksIterator newIterator(org.rocksdb.ColumnFamilyHandle)"], ["org.rocksdb.WBWIRocksIterator", "org.rocksdb.WriteBatchWithIndex.newIterator()", "public org.rocksdb.WBWIRocksIterator newIterator()"], ["org.rocksdb.RocksIterator", "org.rocksdb.WriteBatchWithIndex.newIteratorWithBase(org.rocksdb.ColumnFamilyHandle, org.rocksdb.RocksIterator)", "public org.rocksdb.RocksIterator newIteratorWithBase(org.rocksdb.ColumnFamilyHandle, org.rocksdb.RocksIterator)"], ["org.rocksdb.RocksIterator", "org.rocksdb.WriteBatchWithIndex.newIteratorWithBase(org.rocksdb.RocksIterator)", "public org.rocksdb.RocksIterator newIteratorWithBase(org.rocksdb.RocksIterator)"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatch(org.rocksdb.ColumnFamilyHandle, org.rocksdb.DBOptions, byte[])", "public byte[] getFromBatch(org.rocksdb.ColumnFamilyHandle, org.rocksdb.DBOptions, byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatch(org.rocksdb.DBOptions, byte[])", "public byte[] getFromBatch(org.rocksdb.DBOptions, byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatchAndDB(org.rocksdb.RocksDB, org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[])", "public byte[] getFromBatchAndDB(org.rocksdb.RocksDB, org.rocksdb.ColumnFamilyHandle, org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException"], ["byte[]", "org.rocksdb.WriteBatchWithIndex.getFromBatchAndDB(org.rocksdb.RocksDB, org.rocksdb.ReadOptions, byte[])", "public byte[] getFromBatchAndDB(org.rocksdb.RocksDB, org.rocksdb.ReadOptions, byte[]) throws org.rocksdb.RocksDBException"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions()", "public org.rocksdb.WriteOptions()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setSync(boolean)", "public org.rocksdb.WriteOptions setSync(boolean)"], ["boolean", "org.rocksdb.WriteOptions.sync()", "public boolean sync()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setDisableWAL(boolean)", "public org.rocksdb.WriteOptions setDisableWAL(boolean)"], ["boolean", "org.rocksdb.WriteOptions.disableWAL()", "public boolean disableWAL()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setIgnoreMissingColumnFamilies(boolean)", "public org.rocksdb.WriteOptions setIgnoreMissingColumnFamilies(boolean)"], ["boolean", "org.rocksdb.WriteOptions.ignoreMissingColumnFamilies()", "public boolean ignoreMissingColumnFamilies()"], ["org.rocksdb.WriteOptions", "org.rocksdb.WriteOptions.setNoSlowdown(boolean)", "public org.rocksdb.WriteOptions setNoSlowdown(boolean)"], ["boolean", "org.rocksdb.WriteOptions.noSlowdown()", "public boolean noSlowdown()"], ["org.rocksdb.util.BytewiseComparator", "org.rocksdb.util.BytewiseComparator(org.rocksdb.ComparatorOptions)", "public org.rocksdb.util.BytewiseComparator(org.rocksdb.ComparatorOptions)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.name()", "public java.lang.String name()"], ["int", "org.rocksdb.util.BytewiseComparator.compare(org.rocksdb.Slice, org.rocksdb.Slice)", "public int compare(org.rocksdb.Slice, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.Slice)", "public java.lang.String findShortestSeparator(java.lang.String, org.rocksdb.Slice)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.findShortSuccessor(java.lang.String)", "public java.lang.String findShortSuccessor(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.BytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)", "public java.lang.String findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)"], ["int", "org.rocksdb.util.BytewiseComparator.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)", "public int compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"], ["org.rocksdb.util.DirectBytewiseComparator", "org.rocksdb.util.DirectBytewiseComparator(org.rocksdb.ComparatorOptions)", "public org.rocksdb.util.DirectBytewiseComparator(org.rocksdb.ComparatorOptions)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.name()", "public java.lang.String name()"], ["int", "org.rocksdb.util.DirectBytewiseComparator.compare(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)", "public int compare(org.rocksdb.DirectSlice, org.rocksdb.DirectSlice)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.DirectSlice)", "public java.lang.String findShortestSeparator(java.lang.String, org.rocksdb.DirectSlice)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.findShortSuccessor(java.lang.String)", "public java.lang.String findShortSuccessor(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.DirectBytewiseComparator.findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)", "public java.lang.String findShortestSeparator(java.lang.String, org.rocksdb.AbstractSlice)"], ["int", "org.rocksdb.util.DirectBytewiseComparator.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)", "public int compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"], ["org.rocksdb.util.Environment", "org.rocksdb.util.Environment()", "public org.rocksdb.util.Environment()"], ["boolean", "org.rocksdb.util.Environment.isPowerPC()", "public static boolean isPowerPC()"], ["boolean", "org.rocksdb.util.Environment.isWindows()", "public static boolean isWindows()"], ["boolean", "org.rocksdb.util.Environment.isFreeBSD()", "public static boolean isFreeBSD()"], ["boolean", "org.rocksdb.util.Environment.isMac()", "public static boolean isMac()"], ["boolean", "org.rocksdb.util.Environment.isAix()", "public static boolean isAix()"], ["boolean", "org.rocksdb.util.Environment.isUnix()", "public static boolean isUnix()"], ["boolean", "org.rocksdb.util.Environment.isSolaris()", "public static boolean isSolaris()"], ["boolean", "org.rocksdb.util.Environment.is64Bit()", "public static boolean is64Bit()"], ["java.lang.String", "org.rocksdb.util.Environment.getSharedLibraryName(java.lang.String)", "public static java.lang.String getSharedLibraryName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getSharedLibraryFileName(java.lang.String)", "public static java.lang.String getSharedLibraryFileName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getJniLibraryName(java.lang.String)", "public static java.lang.String getJniLibraryName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getJniLibraryFileName(java.lang.String)", "public static java.lang.String getJniLibraryFileName(java.lang.String)"], ["java.lang.String", "org.rocksdb.util.Environment.getJniLibraryExtension()", "public static java.lang.String getJniLibraryExtension()"], ["org.rocksdb.util.ReverseBytewiseComparator", "org.rocksdb.util.ReverseBytewiseComparator(org.rocksdb.ComparatorOptions)", "public org.rocksdb.util.ReverseBytewiseComparator(org.rocksdb.ComparatorOptions)"], ["java.lang.String", "org.rocksdb.util.ReverseBytewiseComparator.name()", "public java.lang.String name()"], ["int", "org.rocksdb.util.ReverseBytewiseComparator.compare(org.rocksdb.Slice, org.rocksdb.Slice)", "public int compare(org.rocksdb.Slice, org.rocksdb.Slice)"], ["int", "org.rocksdb.util.ReverseBytewiseComparator.compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)", "public int compare(org.rocksdb.AbstractSlice, org.rocksdb.AbstractSlice)"]]}