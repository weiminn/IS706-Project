{"javaparser-core-3.2.10.jar": [["com.github.javaparser.ModifierHolder", "com.github.javaparser.ModifierHolder(com.github.javaparser.JavaToken, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ModifierHolder(com.github.javaparser.JavaToken, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.printer.lexicalpreservation.Difference$Added", "com.github.javaparser.printer.lexicalpreservation.Difference$Added(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.lexicalpreservation.Difference$Added(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Difference$Added.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Added.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Difference$Added.hashCode()", "public int hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Difference$Added.getElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Added.isAdded()", "public boolean isAdded()"], ["com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel.from(int)", "public com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel from(int)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel.toString()", "public java.lang.String toString()"], ["com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel.sub(int, int)", "public com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel sub(int, int)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CalculatedSyntaxModel.removeIndentationElements()", "public void removeIndentationElements()"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.getTokenType()", "public int getTokenType()"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.getContent(com.github.javaparser.ast.Node)", "public java.lang.String getContent(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmToken", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmToken", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int, java.lang.String)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int, java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmToken", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int, com.github.javaparser.printer.concretesyntaxmodel.CsmToken$TokenContentCalculator)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmToken(int, com.github.javaparser.printer.concretesyntaxmodel.CsmToken$TokenContentCalculator)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.hashCode()", "public int hashCode()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.isWhiteSpace()", "public boolean isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmToken.isNewLine()", "public boolean isNewLine()"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getProperty()", "public com.github.javaparser.ast.observer.ObservableProperty getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getSeparatorPost()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getSeparatorPost()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getSeparatorPre()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getSeparatorPre()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getPreceeding()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getPreceeding()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.getFollowing()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getFollowing()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmList", "com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmList", "com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmList", "com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmList(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmList.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition[]", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition.values()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition[] values()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition.valueOf(java.lang.String)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition valueOf(java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getCondition()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition getCondition()"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getProperty()", "public com.github.javaparser.ast.observer.ObservableProperty getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getThenElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getThenElement()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.getElseElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getElseElement()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmConditional", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmConditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmConditional.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmChar", "com.github.javaparser.printer.concretesyntaxmodel.CsmChar(com.github.javaparser.ast.observer.ObservableProperty)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmChar(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmChar.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmSequence", "com.github.javaparser.printer.concretesyntaxmodel.CsmSequence(java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmSequence(java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>)"], ["java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>", "com.github.javaparser.printer.concretesyntaxmodel.CsmSequence.getElements()", "public java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement> getElements()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmSequence.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["void", "com.github.javaparser.printer.ConcreteSyntaxModel.genericPrettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public static void genericPrettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.ConcreteSyntaxModel.genericPrettyPrint(com.github.javaparser.ast.Node)", "public static java.lang.String genericPrettyPrint(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.ConcreteSyntaxModel.forClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement forClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParser$CustomToken.newToken(int, java.lang.String)", "public static com.github.javaparser.Token newToken(int, java.lang.String)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator()", "public com.github.javaparser.ast.body.VariableDeclarator()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, java.lang.String)", "public com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.VariableDeclarator(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.body.VariableDeclarator.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.VariableDeclarator.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.body.VariableDeclarator.getInitializer()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getInitializer()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.VariableDeclarator.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.VariableDeclarator setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setInitializer(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.VariableDeclarator setInitializer(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setInitializer(java.lang.String)", "public com.github.javaparser.ast.body.VariableDeclarator setInitializer(java.lang.String)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.VariableDeclarator.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.body.VariableDeclarator setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.body.VariableDeclarator.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.removeInitializer()", "public com.github.javaparser.ast.body.VariableDeclarator removeInitializer()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.clone()", "public com.github.javaparser.ast.body.VariableDeclarator clone()"], ["com.github.javaparser.metamodel.VariableDeclaratorMetaModel", "com.github.javaparser.ast.body.VariableDeclarator.getMetaModel()", "public com.github.javaparser.metamodel.VariableDeclaratorMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.ast.body.VariableDeclarator.replaceInitializer(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.VariableDeclarator replaceInitializer(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.body.VariableDeclarator.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.VariableDeclarator.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.VariableDeclarator.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.VariableDeclarator.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.VariableDeclarator.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.VariableDeclarator.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration()", "public com.github.javaparser.ast.body.MethodDeclaration()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String)", "public com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)", "public com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.MethodDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.MethodDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.body.MethodDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.MethodDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.stmt.BlockStmt>", "com.github.javaparser.ast.body.MethodDeclaration.getBody()", "public java.util.Optional<com.github.javaparser.ast.stmt.BlockStmt> getBody()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.MethodDeclaration setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.MethodDeclaration.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.body.MethodDeclaration setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.body.MethodDeclaration setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.MethodDeclaration setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)", "public com.github.javaparser.ast.body.MethodDeclaration setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.body.MethodDeclaration setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)", "public com.github.javaparser.ast.body.MethodDeclaration setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["java.lang.String", "com.github.javaparser.ast.body.MethodDeclaration.getDeclarationAsString(boolean, boolean, boolean)", "public java.lang.String getDeclarationAsString(boolean, boolean, boolean)"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isNative()", "public boolean isNative()"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isSynchronized()", "public boolean isSynchronized()"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.isDefault()", "public boolean isDefault()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setNative(boolean)", "public com.github.javaparser.ast.body.MethodDeclaration setNative(boolean)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setSynchronized(boolean)", "public com.github.javaparser.ast.body.MethodDeclaration setSynchronized(boolean)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setDefault(boolean)", "public com.github.javaparser.ast.body.MethodDeclaration setDefault(boolean)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.MethodDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.removeBody()", "public com.github.javaparser.ast.body.MethodDeclaration removeBody()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.clone()", "public com.github.javaparser.ast.body.MethodDeclaration clone()"], ["com.github.javaparser.metamodel.MethodDeclarationMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.MethodDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.replaceBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.MethodDeclaration replaceBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["boolean", "com.github.javaparser.ast.body.MethodDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.CallableDeclarationMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.CallableDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.clone()", "public com.github.javaparser.ast.body.CallableDeclaration clone()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.body.CallableDeclaration setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.body.CallableDeclaration setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.body.CallableDeclaration setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.CallableDeclaration setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.body.CallableDeclaration setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.MethodDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.MethodDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.MethodDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.removeBody()", "public com.github.javaparser.ast.Node removeBody()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.MethodDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration()", "public com.github.javaparser.ast.body.EnumConstantDeclaration()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration(java.lang.String)", "public com.github.javaparser.ast.body.EnumConstantDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.EnumConstantDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.EnumConstantDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.EnumConstantDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.EnumConstantDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.body.EnumConstantDeclaration.getArguments()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getArguments()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>", "com.github.javaparser.ast.body.EnumConstantDeclaration.getClassBody()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>> getClassBody()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.EnumConstantDeclaration.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.body.EnumConstantDeclaration setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.setClassBody(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.EnumConstantDeclaration setClassBody(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.EnumConstantDeclaration setName(com.github.javaparser.ast.expr.SimpleName)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.EnumConstantDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.EnumConstantDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()", "public com.github.javaparser.ast.body.EnumConstantDeclaration clone()"], ["com.github.javaparser.metamodel.EnumConstantDeclarationMetaModel", "com.github.javaparser.ast.body.EnumConstantDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.EnumConstantDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.EnumConstantDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.EnumConstantDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.EnumConstantDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.EnumConstantDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumConstantDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumConstantDeclaration.setArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration()", "public com.github.javaparser.ast.body.ConstructorDeclaration()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", "public com.github.javaparser.ast.body.ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.ConstructorDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.ConstructorDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.ConstructorDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.body.ConstructorDeclaration.getBody()", "public com.github.javaparser.ast.stmt.BlockStmt getBody()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.ConstructorDeclaration setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.body.ConstructorDeclaration setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.ConstructorDeclaration setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)", "public com.github.javaparser.ast.body.ConstructorDeclaration setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.body.ConstructorDeclaration setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)", "public com.github.javaparser.ast.body.ConstructorDeclaration setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["java.lang.String", "com.github.javaparser.ast.body.ConstructorDeclaration.getDeclarationAsString(boolean, boolean, boolean)", "public java.lang.String getDeclarationAsString(boolean, boolean, boolean)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.ConstructorDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.ConstructorDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()", "public com.github.javaparser.ast.body.ConstructorDeclaration clone()"], ["com.github.javaparser.metamodel.ConstructorDeclarationMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.ConstructorDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.ConstructorDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.CallableDeclarationMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.CallableDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()", "public com.github.javaparser.ast.body.CallableDeclaration clone()"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.body.CallableDeclaration setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.body.CallableDeclaration setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.body.CallableDeclaration setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.CallableDeclaration setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.body.CallableDeclaration setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.ConstructorDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.ConstructorDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ConstructorDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration()", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, boolean, java.lang.String)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, boolean, java.lang.String)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, boolean, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getExtendedTypes()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> getExtendedTypes()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getImplementedTypes()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> getImplementedTypes()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getTypeParameters()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter> getTypeParameters()"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInterface()", "public boolean isInterface()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setExtendedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration setExtendedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration setImplementedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setInterface(boolean)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration setInterface(boolean)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["java.util.Optional<com.github.javaparser.ast.body.ConstructorDeclaration>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getDefaultConstructor()", "public java.util.Optional<com.github.javaparser.ast.body.ConstructorDeclaration> getDefaultConstructor()"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.addConstructor(com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.body.ConstructorDeclaration addConstructor(com.github.javaparser.ast.Modifier...)"], ["java.util.List<com.github.javaparser.ast.body.ConstructorDeclaration>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getConstructors()", "public java.util.List<com.github.javaparser.ast.body.ConstructorDeclaration> getConstructors()"], ["java.util.Optional<com.github.javaparser.ast.body.ConstructorDeclaration>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getConstructorByParameterTypes(java.lang.String...)", "public java.util.Optional<com.github.javaparser.ast.body.ConstructorDeclaration> getConstructorByParameterTypes(java.lang.String...)"], ["java.util.Optional<com.github.javaparser.ast.body.ConstructorDeclaration>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getConstructorByParameterTypes(java.lang.Class<?>...)", "public java.util.Optional<com.github.javaparser.ast.body.ConstructorDeclaration> getConstructorByParameterTypes(java.lang.Class<?>...)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isLocalClassDeclaration()", "public boolean isLocalClassDeclaration()"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.isInnerClass()", "public boolean isInnerClass()"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration clone()"], ["com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.TypeDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()", "public com.github.javaparser.ast.body.TypeDeclaration clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setImplementedTypes(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setExtendedTypes(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setExtendedTypes(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.ClassOrInterfaceDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.BodyDeclaration()", "public com.github.javaparser.ast.body.BodyDeclaration()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.BodyDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.body.BodyDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.BodyDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.body.BodyDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.body.BodyDeclaration.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["T", "com.github.javaparser.ast.body.BodyDeclaration.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public T setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.BodyDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.ast.body.BodyDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration<?> clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.BodyDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.BodyDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.BodyDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.BodyDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.BodyDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.BodyDeclaration.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit()", "public com.github.javaparser.ast.CompilationUnit()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit(java.lang.String)", "public com.github.javaparser.ast.CompilationUnit(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>, com.github.javaparser.ast.modules.ModuleDeclaration)", "public com.github.javaparser.ast.CompilationUnit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>, com.github.javaparser.ast.modules.ModuleDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit(com.github.javaparser.TokenRange, com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>, com.github.javaparser.ast.modules.ModuleDeclaration)", "public com.github.javaparser.ast.CompilationUnit(com.github.javaparser.TokenRange, com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>, com.github.javaparser.ast.modules.ModuleDeclaration)"], ["<R, A> R", "com.github.javaparser.ast.CompilationUnit.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.CompilationUnit.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.List<com.github.javaparser.ast.comments.Comment>", "com.github.javaparser.ast.CompilationUnit.getComments()", "public java.util.List<com.github.javaparser.ast.comments.Comment> getComments()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>", "com.github.javaparser.ast.CompilationUnit.getImports()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration> getImports()"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.CompilationUnit.getImport(int)", "public com.github.javaparser.ast.ImportDeclaration getImport(int)"], ["java.util.Optional<com.github.javaparser.ast.PackageDeclaration>", "com.github.javaparser.ast.CompilationUnit.getPackageDeclaration()", "public java.util.Optional<com.github.javaparser.ast.PackageDeclaration> getPackageDeclaration()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>", "com.github.javaparser.ast.CompilationUnit.getTypes()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>> getTypes()"], ["com.github.javaparser.ast.body.TypeDeclaration<?>", "com.github.javaparser.ast.CompilationUnit.getType(int)", "public com.github.javaparser.ast.body.TypeDeclaration<?> getType(int)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setImports(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>)", "public com.github.javaparser.ast.CompilationUnit setImports(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ImportDeclaration>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setImport(int, com.github.javaparser.ast.ImportDeclaration)", "public com.github.javaparser.ast.CompilationUnit setImport(int, com.github.javaparser.ast.ImportDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(com.github.javaparser.ast.ImportDeclaration)", "public com.github.javaparser.ast.CompilationUnit addImport(com.github.javaparser.ast.ImportDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setPackageDeclaration(com.github.javaparser.ast.PackageDeclaration)", "public com.github.javaparser.ast.CompilationUnit setPackageDeclaration(com.github.javaparser.ast.PackageDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>)", "public com.github.javaparser.ast.CompilationUnit setTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.TypeDeclaration<?>>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setType(int, com.github.javaparser.ast.body.TypeDeclaration<?>)", "public com.github.javaparser.ast.CompilationUnit setType(int, com.github.javaparser.ast.body.TypeDeclaration<?>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addType(com.github.javaparser.ast.body.TypeDeclaration<?>)", "public com.github.javaparser.ast.CompilationUnit addType(com.github.javaparser.ast.body.TypeDeclaration<?>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setPackageDeclaration(java.lang.String)", "public com.github.javaparser.ast.CompilationUnit setPackageDeclaration(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(java.lang.String)", "public com.github.javaparser.ast.CompilationUnit addImport(java.lang.String)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(java.lang.Class<?>)", "public com.github.javaparser.ast.CompilationUnit addImport(java.lang.Class<?>)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.addImport(java.lang.String, boolean, boolean)", "public com.github.javaparser.ast.CompilationUnit addImport(java.lang.String, boolean, boolean)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addClass(java.lang.String)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration addClass(java.lang.String)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addClass(java.lang.String, com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration addClass(java.lang.String, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addInterface(java.lang.String)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration addInterface(java.lang.String)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.CompilationUnit.addInterface(java.lang.String, com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration addInterface(java.lang.String, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.CompilationUnit.addEnum(java.lang.String)", "public com.github.javaparser.ast.body.EnumDeclaration addEnum(java.lang.String)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.CompilationUnit.addEnum(java.lang.String, com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.body.EnumDeclaration addEnum(java.lang.String, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.CompilationUnit.addAnnotationDeclaration(java.lang.String)", "public com.github.javaparser.ast.body.AnnotationDeclaration addAnnotationDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.CompilationUnit.addAnnotationDeclaration(java.lang.String, com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.body.AnnotationDeclaration addAnnotationDeclaration(java.lang.String, com.github.javaparser.ast.Modifier...)"], ["java.util.Optional<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration>", "com.github.javaparser.ast.CompilationUnit.getClassByName(java.lang.String)", "public java.util.Optional<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration> getClassByName(java.lang.String)"], ["java.util.Optional<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration>", "com.github.javaparser.ast.CompilationUnit.getInterfaceByName(java.lang.String)", "public java.util.Optional<com.github.javaparser.ast.body.ClassOrInterfaceDeclaration> getInterfaceByName(java.lang.String)"], ["java.util.Optional<com.github.javaparser.ast.body.EnumDeclaration>", "com.github.javaparser.ast.CompilationUnit.getEnumByName(java.lang.String)", "public java.util.Optional<com.github.javaparser.ast.body.EnumDeclaration> getEnumByName(java.lang.String)"], ["java.util.Optional<com.github.javaparser.ast.body.AnnotationDeclaration>", "com.github.javaparser.ast.CompilationUnit.getAnnotationDeclarationByName(java.lang.String)", "public java.util.Optional<com.github.javaparser.ast.body.AnnotationDeclaration> getAnnotationDeclarationByName(java.lang.String)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.CompilationUnit.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.CompilationUnit.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.removePackageDeclaration()", "public com.github.javaparser.ast.CompilationUnit removePackageDeclaration()"], ["java.util.Optional<com.github.javaparser.ast.modules.ModuleDeclaration>", "com.github.javaparser.ast.CompilationUnit.getModule()", "public java.util.Optional<com.github.javaparser.ast.modules.ModuleDeclaration> getModule()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setModule(com.github.javaparser.ast.modules.ModuleDeclaration)", "public com.github.javaparser.ast.CompilationUnit setModule(com.github.javaparser.ast.modules.ModuleDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.removeModule()", "public com.github.javaparser.ast.CompilationUnit removeModule()"], ["java.util.Optional<com.github.javaparser.ast.CompilationUnit$Storage>", "com.github.javaparser.ast.CompilationUnit.getStorage()", "public java.util.Optional<com.github.javaparser.ast.CompilationUnit$Storage> getStorage()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.setStorage(java.nio.file.Path)", "public com.github.javaparser.ast.CompilationUnit setStorage(java.nio.file.Path)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.clone()", "public com.github.javaparser.ast.CompilationUnit clone()"], ["com.github.javaparser.metamodel.CompilationUnitMetaModel", "com.github.javaparser.ast.CompilationUnit.getMetaModel()", "public com.github.javaparser.metamodel.CompilationUnitMetaModel getMetaModel()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.replaceModule(com.github.javaparser.ast.modules.ModuleDeclaration)", "public com.github.javaparser.ast.CompilationUnit replaceModule(com.github.javaparser.ast.modules.ModuleDeclaration)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit.replacePackageDeclaration(com.github.javaparser.ast.PackageDeclaration)", "public com.github.javaparser.ast.CompilationUnit replacePackageDeclaration(com.github.javaparser.ast.PackageDeclaration)"], ["boolean", "com.github.javaparser.ast.CompilationUnit.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.CompilationUnit.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.CompilationUnit.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.CompilationUnit.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.visitor.TreeVisitor", "com.github.javaparser.ast.visitor.TreeVisitor()", "public com.github.javaparser.ast.visitor.TreeVisitor()"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitLeavesFirst(com.github.javaparser.ast.Node)", "public void visitLeavesFirst(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitPreOrder(com.github.javaparser.ast.Node)", "public void visitPreOrder(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitPostOrder(com.github.javaparser.ast.Node)", "public void visitPostOrder(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitDepthFirst(com.github.javaparser.ast.Node)", "public void visitDepthFirst(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.visitor.TreeVisitor.visitBreadthFirst(com.github.javaparser.ast.Node)", "public void visitBreadthFirst(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.visitor.VoidVisitorAdapter", "com.github.javaparser.ast.visitor.VoidVisitorAdapter()", "public com.github.javaparser.ast.visitor.VoidVisitorAdapter()"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)", "public void visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)", "public void visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)", "public void visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)", "public void visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)", "public void visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, A)", "public void visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, A)", "public void visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, A)", "public void visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, A)", "public void visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, A)", "public void visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, A)", "public void visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, A)", "public void visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, A)", "public void visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, A)", "public void visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)", "public void visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)", "public void visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, A)", "public void visit(com.github.javaparser.ast.CompilationUnit, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)", "public void visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)", "public void visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, A)", "public void visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)", "public void visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)", "public void visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)", "public void visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, A)", "public void visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)", "public void visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, A)", "public void visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForeachStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ForeachStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, A)", "public void visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)", "public void visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)", "public void visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, A)", "public void visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)", "public void visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, A)", "public void visit(com.github.javaparser.ast.comments.LineComment, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)", "public void visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, A)", "public void visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)", "public void visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, A)", "public void visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, A)", "public void visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)", "public void visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)", "public void visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, A)", "public void visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, A)", "public void visit(com.github.javaparser.ast.body.Parameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, A)", "public void visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, A)", "public void visit(com.github.javaparser.ast.expr.Name, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, A)", "public void visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, A)", "public void visit(com.github.javaparser.ast.type.ArrayType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, A)", "public void visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, A)", "public void visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, A)", "public void visit(com.github.javaparser.ast.type.UnionType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)", "public void visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)", "public void visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, A)", "public void visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)", "public void visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)", "public void visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)", "public void visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, A)", "public void visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)", "public void visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, A)", "public void visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)", "public void visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, A)", "public void visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, A)", "public void visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, A)", "public void visit(com.github.javaparser.ast.type.UnknownType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)", "public void visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, A)", "public void visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, A)", "public void visit(com.github.javaparser.ast.type.VoidType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, A)", "public void visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, A)", "public void visit(com.github.javaparser.ast.type.WildcardType, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, A)", "public void visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)", "public void visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, A)", "public void visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.NodeList, A)", "public void visit(com.github.javaparser.ast.NodeList, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, A)", "public void visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)", "public void visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)", "public void visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)", "public void visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)", "public void visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)", "public void visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)", "public void visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)"], ["void", "com.github.javaparser.ast.visitor.VoidVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)", "public void visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.booleanType()", "public static com.github.javaparser.ast.type.PrimitiveType booleanType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.charType()", "public static com.github.javaparser.ast.type.PrimitiveType charType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.byteType()", "public static com.github.javaparser.ast.type.PrimitiveType byteType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.shortType()", "public static com.github.javaparser.ast.type.PrimitiveType shortType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.intType()", "public static com.github.javaparser.ast.type.PrimitiveType intType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.longType()", "public static com.github.javaparser.ast.type.PrimitiveType longType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.floatType()", "public static com.github.javaparser.ast.type.PrimitiveType floatType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.doubleType()", "public static com.github.javaparser.ast.type.PrimitiveType doubleType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType()", "public com.github.javaparser.ast.type.PrimitiveType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.ast.type.PrimitiveType$Primitive)", "public com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.ast.type.PrimitiveType$Primitive)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.PrimitiveType$Primitive)", "public com.github.javaparser.ast.type.PrimitiveType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.PrimitiveType$Primitive)"], ["<R, A> R", "com.github.javaparser.ast.type.PrimitiveType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.PrimitiveType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.PrimitiveType$Primitive", "com.github.javaparser.ast.type.PrimitiveType.getType()", "public com.github.javaparser.ast.type.PrimitiveType$Primitive getType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.PrimitiveType.toBoxedType()", "public com.github.javaparser.ast.type.ClassOrInterfaceType toBoxedType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.setType(com.github.javaparser.ast.type.PrimitiveType$Primitive)", "public com.github.javaparser.ast.type.PrimitiveType setType(com.github.javaparser.ast.type.PrimitiveType$Primitive)"], ["java.lang.String", "com.github.javaparser.ast.type.PrimitiveType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.PrimitiveType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.PrimitiveType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.PrimitiveType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.PrimitiveType.clone()", "public com.github.javaparser.ast.type.PrimitiveType clone()"], ["com.github.javaparser.metamodel.PrimitiveTypeMetaModel", "com.github.javaparser.ast.type.PrimitiveType.getMetaModel()", "public com.github.javaparser.metamodel.PrimitiveTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.PrimitiveType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.PrimitiveType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.PrimitiveType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.PrimitiveType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.PrimitiveType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.PrimitiveType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.PrimitiveType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.PrimitiveType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType()", "public com.github.javaparser.ast.type.UnionType()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.type.UnionType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.type.UnionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.type.UnionType.getElements()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType> getElements()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.setElements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.type.UnionType setElements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.UnionType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.UnionType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.UnionType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.UnionType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.UnionType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.UnionType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.UnionType", "com.github.javaparser.ast.type.UnionType.clone()", "public com.github.javaparser.ast.type.UnionType clone()"], ["com.github.javaparser.metamodel.UnionTypeMetaModel", "com.github.javaparser.ast.type.UnionType.getMetaModel()", "public com.github.javaparser.metamodel.UnionTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.UnionType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.UnionType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnionType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnionType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.UnionType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.UnionType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.UnionType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.UnionType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt()", "public com.github.javaparser.ast.stmt.ThrowStmt()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ThrowStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ThrowStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ThrowStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ThrowStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ThrowStmt.getExpression()", "public com.github.javaparser.ast.expr.Expression getExpression()"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ThrowStmt setExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ThrowStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.ast.stmt.ThrowStmt.clone()", "public com.github.javaparser.ast.stmt.ThrowStmt clone()"], ["com.github.javaparser.metamodel.ThrowStmtMetaModel", "com.github.javaparser.ast.stmt.ThrowStmt.getMetaModel()", "public com.github.javaparser.metamodel.ThrowStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ThrowStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ThrowStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ThrowStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ThrowStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ThrowStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ThrowStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ThrowStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt()", "public com.github.javaparser.ast.stmt.SynchronizedStmt()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.SynchronizedStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.SynchronizedStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.SynchronizedStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.SynchronizedStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.SynchronizedStmt.getExpression()", "public com.github.javaparser.ast.expr.Expression getExpression()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.SynchronizedStmt setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.getBody()", "public com.github.javaparser.ast.stmt.BlockStmt getBody()"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.SynchronizedStmt setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["boolean", "com.github.javaparser.ast.stmt.SynchronizedStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()", "public com.github.javaparser.ast.stmt.SynchronizedStmt clone()"], ["com.github.javaparser.metamodel.SynchronizedStmtMetaModel", "com.github.javaparser.ast.stmt.SynchronizedStmt.getMetaModel()", "public com.github.javaparser.metamodel.SynchronizedStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.SynchronizedStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.SynchronizedStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.SynchronizedStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.SynchronizedStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SynchronizedStmt.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SynchronizedStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt()", "public com.github.javaparser.ast.stmt.WhileStmt()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.WhileStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.WhileStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.WhileStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.WhileStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.WhileStmt.getBody()", "public com.github.javaparser.ast.stmt.Statement getBody()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.WhileStmt.getCondition()", "public com.github.javaparser.ast.expr.Expression getCondition()"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.WhileStmt setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.WhileStmt setCondition(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.WhileStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.ast.stmt.WhileStmt.clone()", "public com.github.javaparser.ast.stmt.WhileStmt clone()"], ["com.github.javaparser.metamodel.WhileStmtMetaModel", "com.github.javaparser.ast.stmt.WhileStmt.getMetaModel()", "public com.github.javaparser.metamodel.WhileStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.WhileStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.WhileStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.WhileStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.WhileStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.WhileStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.WhileStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.WhileStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.WhileStmt.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt()", "public com.github.javaparser.ast.stmt.ForStmt()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.ForStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.ForStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ForStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ForStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForStmt.getBody()", "public com.github.javaparser.ast.stmt.Statement getBody()"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.ForStmt.getCompare()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getCompare()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.ForStmt.getInitialization()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getInitialization()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.ForStmt.getUpdate()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getUpdate()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.ForStmt setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setCompare(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ForStmt setCompare(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setInitialization(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.stmt.ForStmt setInitialization(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.setUpdate(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.stmt.ForStmt setUpdate(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.stmt.ForStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.stmt.ForStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.removeCompare()", "public com.github.javaparser.ast.stmt.ForStmt removeCompare()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.clone()", "public com.github.javaparser.ast.stmt.ForStmt clone()"], ["com.github.javaparser.metamodel.ForStmtMetaModel", "com.github.javaparser.ast.stmt.ForStmt.getMetaModel()", "public com.github.javaparser.metamodel.ForStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.ForStmt", "com.github.javaparser.ast.stmt.ForStmt.replaceCompare(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ForStmt replaceCompare(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ForStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ForStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ForStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ForStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause()", "public com.github.javaparser.ast.stmt.CatchClause()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.CatchClause(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.TokenRange, com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.CatchClause(com.github.javaparser.TokenRange, com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.CatchClause.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.CatchClause.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.stmt.CatchClause.getParameter()", "public com.github.javaparser.ast.body.Parameter getParameter()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause.setParameter(com.github.javaparser.ast.body.Parameter)", "public com.github.javaparser.ast.stmt.CatchClause setParameter(com.github.javaparser.ast.body.Parameter)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.CatchClause.getBody()", "public com.github.javaparser.ast.stmt.BlockStmt getBody()"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.CatchClause setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["boolean", "com.github.javaparser.ast.stmt.CatchClause.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.CatchClause", "com.github.javaparser.ast.stmt.CatchClause.clone()", "public com.github.javaparser.ast.stmt.CatchClause clone()"], ["com.github.javaparser.metamodel.CatchClauseMetaModel", "com.github.javaparser.ast.stmt.CatchClause.getMetaModel()", "public com.github.javaparser.metamodel.CatchClauseMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.CatchClause.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.CatchClause.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.CatchClause.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.CatchClause.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.CatchClause.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt()", "public com.github.javaparser.ast.stmt.LabeledStmt()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt(java.lang.String, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.LabeledStmt(java.lang.String, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.LabeledStmt(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.LabeledStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.LabeledStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.LabeledStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.LabeledStmt.getStatement()", "public com.github.javaparser.ast.stmt.Statement getStatement()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.setStatement(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.LabeledStmt setStatement(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.stmt.LabeledStmt.getLabel()", "public com.github.javaparser.ast.expr.SimpleName getLabel()"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.LabeledStmt setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.LabeledStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.ast.stmt.LabeledStmt.clone()", "public com.github.javaparser.ast.stmt.LabeledStmt clone()"], ["com.github.javaparser.metamodel.LabeledStmtMetaModel", "com.github.javaparser.ast.stmt.LabeledStmt.getMetaModel()", "public com.github.javaparser.metamodel.LabeledStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.LabeledStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.LabeledStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.LabeledStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.LabeledStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.LabeledStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.LabeledStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt()", "public com.github.javaparser.ast.stmt.UnparsableStmt()"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.stmt.UnparsableStmt(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.stmt.UnparsableStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.UnparsableStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.stmt.UnparsableStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.UnparsableStmt", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()", "public com.github.javaparser.ast.stmt.UnparsableStmt clone()"], ["com.github.javaparser.metamodel.UnparsableStmtMetaModel", "com.github.javaparser.ast.stmt.UnparsableStmt.getMetaModel()", "public com.github.javaparser.metamodel.UnparsableStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node$Parsedness", "com.github.javaparser.ast.stmt.UnparsableStmt.getParsed()", "public com.github.javaparser.ast.Node$Parsedness getParsed()"], ["boolean", "com.github.javaparser.ast.stmt.UnparsableStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.UnparsableStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.UnparsableStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.UnparsableStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt()", "public com.github.javaparser.ast.stmt.DoStmt()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt(com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.DoStmt(com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.DoStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.DoStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.DoStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.DoStmt.getBody()", "public com.github.javaparser.ast.stmt.Statement getBody()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.DoStmt.getCondition()", "public com.github.javaparser.ast.expr.Expression getCondition()"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.DoStmt setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.DoStmt setCondition(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.DoStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.ast.stmt.DoStmt.clone()", "public com.github.javaparser.ast.stmt.DoStmt clone()"], ["com.github.javaparser.metamodel.DoStmtMetaModel", "com.github.javaparser.ast.stmt.DoStmt.getMetaModel()", "public com.github.javaparser.metamodel.DoStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.DoStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.DoStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.DoStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.DoStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.DoStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.DoStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.DoStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.DoStmt.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt()", "public com.github.javaparser.ast.stmt.LocalClassDeclarationStmt()"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)", "public com.github.javaparser.ast.stmt.LocalClassDeclarationStmt(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)", "public com.github.javaparser.ast.stmt.LocalClassDeclarationStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)"], ["<R, A> R", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getClassDeclaration()", "public com.github.javaparser.ast.body.ClassOrInterfaceDeclaration getClassDeclaration()"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.setClassDeclaration(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)", "public com.github.javaparser.ast.stmt.LocalClassDeclarationStmt setClassDeclaration(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration)"], ["boolean", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.LocalClassDeclarationStmt", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()", "public com.github.javaparser.ast.stmt.LocalClassDeclarationStmt clone()"], ["com.github.javaparser.metamodel.LocalClassDeclarationStmtMetaModel", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getMetaModel()", "public com.github.javaparser.metamodel.LocalClassDeclarationStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.LocalClassDeclarationStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt()", "public com.github.javaparser.ast.stmt.ReturnStmt()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ReturnStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ReturnStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt(java.lang.String)", "public com.github.javaparser.ast.stmt.ReturnStmt(java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ReturnStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ReturnStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.ReturnStmt.getExpression()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getExpression()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ReturnStmt setExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ReturnStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.removeExpression()", "public com.github.javaparser.ast.stmt.ReturnStmt removeExpression()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.clone()", "public com.github.javaparser.ast.stmt.ReturnStmt clone()"], ["com.github.javaparser.metamodel.ReturnStmtMetaModel", "com.github.javaparser.ast.stmt.ReturnStmt.getMetaModel()", "public com.github.javaparser.metamodel.ReturnStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.ast.stmt.ReturnStmt.replaceExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ReturnStmt replaceExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ReturnStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ReturnStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ReturnStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ReturnStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ReturnStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ReturnStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt()", "public com.github.javaparser.ast.stmt.ContinueStmt()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt(java.lang.String)", "public com.github.javaparser.ast.stmt.ContinueStmt(java.lang.String)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.ContinueStmt(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.ContinueStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ContinueStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ContinueStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.SimpleName>", "com.github.javaparser.ast.stmt.ContinueStmt.getLabel()", "public java.util.Optional<com.github.javaparser.ast.expr.SimpleName> getLabel()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.ContinueStmt setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.ContinueStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.removeLabel()", "public com.github.javaparser.ast.stmt.ContinueStmt removeLabel()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.clone()", "public com.github.javaparser.ast.stmt.ContinueStmt clone()"], ["com.github.javaparser.metamodel.ContinueStmtMetaModel", "com.github.javaparser.ast.stmt.ContinueStmt.getMetaModel()", "public com.github.javaparser.metamodel.ContinueStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.ast.stmt.ContinueStmt.replaceLabel(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.ContinueStmt replaceLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.ContinueStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ContinueStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ContinueStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ContinueStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ContinueStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ContinueStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ContinueStmt.removeLabel()", "public com.github.javaparser.ast.Node removeLabel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ContinueStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr()", "public com.github.javaparser.ast.expr.TypeExpr()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.TypeExpr(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.TypeExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)"], ["<R, A> R", "com.github.javaparser.ast.expr.TypeExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.TypeExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.TypeExpr.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.TypeExpr setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.expr.TypeExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.TypeExpr", "com.github.javaparser.ast.expr.TypeExpr.clone()", "public com.github.javaparser.ast.expr.TypeExpr clone()"], ["com.github.javaparser.metamodel.TypeExprMetaModel", "com.github.javaparser.ast.expr.TypeExpr.getMetaModel()", "public com.github.javaparser.metamodel.TypeExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.TypeExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.TypeExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.TypeExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.TypeExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.TypeExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.TypeExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.TypeExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.BinaryExpr$Operator[]", "com.github.javaparser.ast.expr.BinaryExpr$Operator.values()", "public static com.github.javaparser.ast.expr.BinaryExpr$Operator[] values()"], ["com.github.javaparser.ast.expr.BinaryExpr$Operator", "com.github.javaparser.ast.expr.BinaryExpr$Operator.valueOf(java.lang.String)", "public static com.github.javaparser.ast.expr.BinaryExpr$Operator valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.BinaryExpr$Operator.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration()", "public com.github.javaparser.ast.PackageDeclaration()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.PackageDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.PackageDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.PackageDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.PackageDeclaration.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.PackageDeclaration.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.PackageDeclaration setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.PackageDeclaration setName(com.github.javaparser.ast.expr.Name)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.PackageDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.PackageDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.ast.PackageDeclaration.clone()", "public com.github.javaparser.ast.PackageDeclaration clone()"], ["com.github.javaparser.metamodel.PackageDeclarationMetaModel", "com.github.javaparser.ast.PackageDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.PackageDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.PackageDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.PackageDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.PackageDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.PackageDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.PackageDeclaration.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.PackageDeclaration.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>)", "public static <T extends com.github.javaparser.ast.Node> void sortByBeginPosition(java.util.List<T>)"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.utils.PositionUtils.sortByBeginPosition(com.github.javaparser.ast.NodeList<T>)", "public static <T extends com.github.javaparser.ast.Node> void sortByBeginPosition(com.github.javaparser.ast.NodeList<T>)"], ["<T extends com.github.javaparser.ast.Node> void", "com.github.javaparser.utils.PositionUtils.sortByBeginPosition(java.util.List<T>, boolean)", "public static <T extends com.github.javaparser.ast.Node> void sortByBeginPosition(java.util.List<T>, boolean)"], ["boolean", "com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public static boolean areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.utils.PositionUtils.areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)", "public static boolean areInOrder(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.utils.PositionUtils.getLastAnnotation(com.github.javaparser.ast.Node)", "public static com.github.javaparser.ast.expr.AnnotationExpr getLastAnnotation(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.utils.PositionUtils.nodeContains(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)", "public static boolean nodeContains(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, boolean)"], ["java.lang.String", "com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator.translate(java.lang.CharSequence)", "public final java.lang.String translate(java.lang.CharSequence)"], ["void", "com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer)", "public final void translate(java.lang.CharSequence, java.io.Writer) throws java.io.IOException"], ["com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator", "com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator.with(com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator...)", "public final com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator with(com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator...)"], ["java.lang.String", "com.github.javaparser.utils.StringEscapeUtils.escapeJava(java.lang.String)", "public static final java.lang.String escapeJava(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.StringEscapeUtils.unescapeJava(java.lang.String)", "public static java.lang.String unescapeJava(java.lang.String)"], ["com.github.javaparser.utils.ClassUtils", "com.github.javaparser.utils.ClassUtils()", "public com.github.javaparser.utils.ClassUtils()"], ["boolean", "com.github.javaparser.utils.ClassUtils.isPrimitiveOrWrapper(java.lang.Class<?>)", "public static boolean isPrimitiveOrWrapper(java.lang.Class<?>)"], ["boolean", "com.github.javaparser.utils.ClassUtils.isPrimitiveWrapper(java.lang.Class<?>)", "public static boolean isPrimitiveWrapper(java.lang.Class<?>)"], ["com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator", "com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator(com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator...)", "public com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator(com.github.javaparser.utils.StringEscapeUtils$CharSequenceTranslator...)"], ["int", "com.github.javaparser.utils.StringEscapeUtils$AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer)", "public int translate(java.lang.CharSequence, int, java.io.Writer) throws java.io.IOException"], ["com.github.javaparser.javadoc.JavadocBlockTag", "com.github.javaparser.javadoc.JavadocBlockTag(com.github.javaparser.javadoc.JavadocBlockTag$Type, java.lang.String)", "public com.github.javaparser.javadoc.JavadocBlockTag(com.github.javaparser.javadoc.JavadocBlockTag$Type, java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag", "com.github.javaparser.javadoc.JavadocBlockTag(java.lang.String, java.lang.String)", "public com.github.javaparser.javadoc.JavadocBlockTag(java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag", "com.github.javaparser.javadoc.JavadocBlockTag.createParamBlockTag(java.lang.String, java.lang.String)", "public static com.github.javaparser.javadoc.JavadocBlockTag createParamBlockTag(java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.JavadocBlockTag$Type", "com.github.javaparser.javadoc.JavadocBlockTag.getType()", "public com.github.javaparser.javadoc.JavadocBlockTag$Type getType()"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.JavadocBlockTag.getContent()", "public com.github.javaparser.javadoc.description.JavadocDescription getContent()"], ["java.util.Optional<java.lang.String>", "com.github.javaparser.javadoc.JavadocBlockTag.getName()", "public java.util.Optional<java.lang.String> getName()"], ["java.lang.String", "com.github.javaparser.javadoc.JavadocBlockTag.getTagName()", "public java.lang.String getTagName()"], ["java.lang.String", "com.github.javaparser.javadoc.JavadocBlockTag.toText()", "public java.lang.String toText()"], ["boolean", "com.github.javaparser.javadoc.JavadocBlockTag.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.JavadocBlockTag.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.JavadocBlockTag.toString()", "public java.lang.String toString()"], ["com.github.javaparser.javadoc.description.JavadocSnippet", "com.github.javaparser.javadoc.description.JavadocSnippet(java.lang.String)", "public com.github.javaparser.javadoc.description.JavadocSnippet(java.lang.String)"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocSnippet.toText()", "public java.lang.String toText()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocSnippet.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.description.JavadocSnippet.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocSnippet.toString()", "public java.lang.String toString()"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.description.JavadocDescription.parseText(java.lang.String)", "public static com.github.javaparser.javadoc.description.JavadocDescription parseText(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.description.JavadocDescription()", "public com.github.javaparser.javadoc.description.JavadocDescription()"], ["void", "com.github.javaparser.javadoc.description.JavadocDescription.addElement(com.github.javaparser.javadoc.description.JavadocDescriptionElement)", "public void addElement(com.github.javaparser.javadoc.description.JavadocDescriptionElement)"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocDescription.toText()", "public java.lang.String toText()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocDescription.isEmpty()", "public boolean isEmpty()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocDescription.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.description.JavadocDescription.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocDescription.toString()", "public java.lang.String toString()"], ["com.github.javaparser.JavaParser", "com.github.javaparser.JavaParser()", "public com.github.javaparser.JavaParser()"], ["com.github.javaparser.JavaParser", "com.github.javaparser.JavaParser(com.github.javaparser.ParserConfiguration)", "public com.github.javaparser.JavaParser(com.github.javaparser.ParserConfiguration)"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.JavaParser.getStaticConfiguration()", "public static com.github.javaparser.ParserConfiguration getStaticConfiguration()"], ["void", "com.github.javaparser.JavaParser.setStaticConfiguration(com.github.javaparser.ParserConfiguration)", "public static void setStaticConfiguration(com.github.javaparser.ParserConfiguration)"], ["<N extends com.github.javaparser.ast.Node> com.github.javaparser.ParseResult<N>", "com.github.javaparser.JavaParser.parse(com.github.javaparser.ParseStart<N>, com.github.javaparser.Provider)", "public <N extends com.github.javaparser.ast.Node> com.github.javaparser.ParseResult<N> parse(com.github.javaparser.ParseStart<N>, com.github.javaparser.Provider)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.io.InputStream, java.nio.charset.Charset)", "public static com.github.javaparser.ast.CompilationUnit parse(java.io.InputStream, java.nio.charset.Charset)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.io.InputStream)", "public static com.github.javaparser.ast.CompilationUnit parse(java.io.InputStream)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.io.File, java.nio.charset.Charset)", "public static com.github.javaparser.ast.CompilationUnit parse(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.io.File)", "public static com.github.javaparser.ast.CompilationUnit parse(java.io.File) throws java.io.FileNotFoundException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.nio.file.Path, java.nio.charset.Charset)", "public static com.github.javaparser.ast.CompilationUnit parse(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.nio.file.Path)", "public static com.github.javaparser.ast.CompilationUnit parse(java.nio.file.Path) throws java.io.IOException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parseResource(java.lang.String)", "public static com.github.javaparser.ast.CompilationUnit parseResource(java.lang.String) throws java.io.IOException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parseResource(java.lang.String, java.nio.charset.Charset)", "public static com.github.javaparser.ast.CompilationUnit parseResource(java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parseResource(java.lang.ClassLoader, java.lang.String, java.nio.charset.Charset)", "public static com.github.javaparser.ast.CompilationUnit parseResource(java.lang.ClassLoader, java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.io.Reader)", "public static com.github.javaparser.ast.CompilationUnit parse(java.io.Reader)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.JavaParser.parse(java.lang.String)", "public static com.github.javaparser.ast.CompilationUnit parse(java.lang.String)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.JavaParser.parseBlock(java.lang.String)", "public static com.github.javaparser.ast.stmt.BlockStmt parseBlock(java.lang.String)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.JavaParser.parseStatement(java.lang.String)", "public static com.github.javaparser.ast.stmt.Statement parseStatement(java.lang.String)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.JavaParser.parseImport(java.lang.String)", "public static com.github.javaparser.ast.ImportDeclaration parseImport(java.lang.String)"], ["<T extends com.github.javaparser.ast.expr.Expression> T", "com.github.javaparser.JavaParser.parseExpression(java.lang.String)", "public static <T extends com.github.javaparser.ast.expr.Expression> T parseExpression(java.lang.String)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.JavaParser.parseAnnotation(java.lang.String)", "public static com.github.javaparser.ast.expr.AnnotationExpr parseAnnotation(java.lang.String)"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.JavaParser.parseAnnotationBodyDeclaration(java.lang.String)", "public static com.github.javaparser.ast.body.BodyDeclaration<?> parseAnnotationBodyDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.JavaParser.parseClassBodyDeclaration(java.lang.String)", "public static com.github.javaparser.ast.body.BodyDeclaration<?> parseClassBodyDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.JavaParser.parseInterfaceBodyDeclaration(java.lang.String)", "public static com.github.javaparser.ast.body.BodyDeclaration<?> parseInterfaceBodyDeclaration(java.lang.String)"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.JavaParser.parseBodyDeclaration(java.lang.String)", "public static com.github.javaparser.ast.body.BodyDeclaration<?> parseBodyDeclaration(java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.JavaParser.parseClassOrInterfaceType(java.lang.String)", "public static com.github.javaparser.ast.type.ClassOrInterfaceType parseClassOrInterfaceType(java.lang.String)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.JavaParser.parseType(java.lang.String)", "public static com.github.javaparser.ast.type.Type parseType(java.lang.String)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.JavaParser.parseVariableDeclarationExpr(java.lang.String)", "public static com.github.javaparser.ast.expr.VariableDeclarationExpr parseVariableDeclarationExpr(java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.JavaParser.parseJavadoc(java.lang.String)", "public static com.github.javaparser.javadoc.Javadoc parseJavadoc(java.lang.String)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.JavaParser.parseExplicitConstructorInvocationStmt(java.lang.String)", "public static com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt parseExplicitConstructorInvocationStmt(java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.JavaParser.parseName(java.lang.String)", "public static com.github.javaparser.ast.expr.Name parseName(java.lang.String)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.JavaParser.parseParameter(java.lang.String)", "public static com.github.javaparser.ast.body.Parameter parseParameter(java.lang.String)"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.JavaParser.parsePackageDeclaration(java.lang.String)", "public static com.github.javaparser.ast.PackageDeclaration parsePackageDeclaration(java.lang.String)"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.indent()", "public com.github.javaparser.printer.SourcePrinter indent()"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.unindent()", "public com.github.javaparser.printer.SourcePrinter unindent()"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.print(java.lang.String)", "public com.github.javaparser.printer.SourcePrinter print(java.lang.String)"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.println(java.lang.String)", "public com.github.javaparser.printer.SourcePrinter println(java.lang.String)"], ["com.github.javaparser.printer.SourcePrinter", "com.github.javaparser.printer.SourcePrinter.println()", "public com.github.javaparser.printer.SourcePrinter println()"], ["java.lang.String", "com.github.javaparser.printer.SourcePrinter.getSource()", "public java.lang.String getSource()"], ["java.lang.String", "com.github.javaparser.printer.SourcePrinter.toString()", "public java.lang.String toString()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent.hashCode()", "public int hashCode()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmUnindent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding", "com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmOrphanCommentsEnding.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmString", "com.github.javaparser.printer.concretesyntaxmodel.CsmString(com.github.javaparser.ast.observer.ObservableProperty)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmString(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmString.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmString.toString()", "public java.lang.String toString()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration()", "public com.github.javaparser.printer.PrettyPrinterConfiguration()"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrinterConfiguration.getIndent()", "public java.lang.String getIndent()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setIndent(java.lang.String)", "public com.github.javaparser.printer.PrettyPrinterConfiguration setIndent(java.lang.String)"], ["boolean", "com.github.javaparser.printer.PrettyPrinterConfiguration.isPrintComments()", "public boolean isPrintComments()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setPrintComments(boolean)", "public com.github.javaparser.printer.PrettyPrinterConfiguration setPrintComments(boolean)"], ["java.util.function.Function<com.github.javaparser.printer.PrettyPrinterConfiguration, com.github.javaparser.printer.PrettyPrintVisitor>", "com.github.javaparser.printer.PrettyPrinterConfiguration.getVisitorFactory()", "public java.util.function.Function<com.github.javaparser.printer.PrettyPrinterConfiguration, com.github.javaparser.printer.PrettyPrintVisitor> getVisitorFactory()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setVisitorFactory(java.util.function.Function<com.github.javaparser.printer.PrettyPrinterConfiguration, com.github.javaparser.printer.PrettyPrintVisitor>)", "public com.github.javaparser.printer.PrettyPrinterConfiguration setVisitorFactory(java.util.function.Function<com.github.javaparser.printer.PrettyPrinterConfiguration, com.github.javaparser.printer.PrettyPrintVisitor>)"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrinterConfiguration.getEndOfLineCharacter()", "public java.lang.String getEndOfLineCharacter()"], ["com.github.javaparser.printer.PrettyPrinterConfiguration", "com.github.javaparser.printer.PrettyPrinterConfiguration.setEndOfLineCharacter(java.lang.String)", "public com.github.javaparser.printer.PrettyPrinterConfiguration setEndOfLineCharacter(java.lang.String)"], ["com.github.javaparser.printer.PrettyPrintVisitor", "com.github.javaparser.printer.PrettyPrintVisitor(com.github.javaparser.printer.PrettyPrinterConfiguration)", "public com.github.javaparser.printer.PrettyPrintVisitor(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrintVisitor.getSource()", "public java.lang.String getSource()"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)", "public void visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.Name, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)", "public void visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)", "public void visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)", "public void visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)", "public void visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)", "public void visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)", "public void visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Void)", "public void visit(com.github.javaparser.ast.NodeList, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)", "public void visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)", "public void visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public void visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public void visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public void visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public void visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public void visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public void visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.printer.PrettyPrintVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public void visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["com.github.javaparser.ast.observer.AstObserver$ListChangeType[]", "com.github.javaparser.ast.observer.AstObserver$ListChangeType.values()", "public static com.github.javaparser.ast.observer.AstObserver$ListChangeType[] values()"], ["com.github.javaparser.ast.observer.AstObserver$ListChangeType", "com.github.javaparser.ast.observer.AstObserver$ListChangeType.valueOf(java.lang.String)", "public static com.github.javaparser.ast.observer.AstObserver$ListChangeType valueOf(java.lang.String)"], ["com.github.javaparser.ast.validator.Java1_2Validator", "com.github.javaparser.ast.validator.Java1_2Validator()", "public com.github.javaparser.ast.validator.Java1_2Validator()"], ["com.github.javaparser.ast.validator.ProblemReporter", "com.github.javaparser.ast.validator.ProblemReporter(java.util.List<com.github.javaparser.Problem>)", "public com.github.javaparser.ast.validator.ProblemReporter(java.util.List<com.github.javaparser.Problem>)"], ["void", "com.github.javaparser.ast.validator.ProblemReporter.report(com.github.javaparser.ast.nodeTypes.NodeWithTokenRange<?>, java.lang.String, java.lang.Object...)", "public void report(com.github.javaparser.ast.nodeTypes.NodeWithTokenRange<?>, java.lang.String, java.lang.Object...)"], ["void", "com.github.javaparser.ast.validator.ProblemReporter.report(com.github.javaparser.TokenRange, java.lang.String, java.lang.Object...)", "public void report(com.github.javaparser.TokenRange, java.lang.String, java.lang.Object...)"], ["com.github.javaparser.ast.validator.Java6Validator", "com.github.javaparser.ast.validator.Java6Validator()", "public com.github.javaparser.ast.validator.Java6Validator()"], ["com.github.javaparser.ast.validator.SingleNodeTypeValidator", "com.github.javaparser.ast.validator.SingleNodeTypeValidator(java.lang.Class<N>, com.github.javaparser.ast.validator.TypedValidator<N>)", "public com.github.javaparser.ast.validator.SingleNodeTypeValidator(java.lang.Class<N>, com.github.javaparser.ast.validator.TypedValidator<N>)"], ["void", "com.github.javaparser.ast.validator.SingleNodeTypeValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)", "public void accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.SingleNodeTypeValidator.accept(java.lang.Object, java.lang.Object)", "public void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.ModifierValidator", "com.github.javaparser.ast.validator.chunks.ModifierValidator(boolean, boolean, boolean)", "public com.github.javaparser.ast.validator.chunks.ModifierValidator(boolean, boolean, boolean)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public void visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public void visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.ModifierValidator.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public void visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt()", "public com.github.javaparser.ast.stmt.AssertStmt()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.AssertStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.AssertStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.AssertStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.AssertStmt.getCheck()", "public com.github.javaparser.ast.expr.Expression getCheck()"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.AssertStmt.getMessage()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getMessage()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.setCheck(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.AssertStmt setCheck(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.setMessage(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.AssertStmt setMessage(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.AssertStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.removeMessage()", "public com.github.javaparser.ast.stmt.AssertStmt removeMessage()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.clone()", "public com.github.javaparser.ast.stmt.AssertStmt clone()"], ["com.github.javaparser.metamodel.AssertStmtMetaModel", "com.github.javaparser.ast.stmt.AssertStmt.getMetaModel()", "public com.github.javaparser.metamodel.AssertStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.ast.stmt.AssertStmt.replaceMessage(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.AssertStmt replaceMessage(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.AssertStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.AssertStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.AssertStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.AssertStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.AssertStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.AssertStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr()", "public com.github.javaparser.ast.expr.MarkerAnnotationExpr()"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr(java.lang.String)", "public com.github.javaparser.ast.expr.MarkerAnnotationExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.MarkerAnnotationExpr(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.MarkerAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MarkerAnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.MarkerAnnotationExpr clone()"], ["com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.MarkerAnnotationExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.AnnotationExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.AnnotationExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MarkerAnnotationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.Expression()", "public com.github.javaparser.ast.expr.Expression()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.Expression(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.expr.Expression(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.expr.Expression.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.Expression.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.Expression.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.Expression.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.Expression.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Expression.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.Expression.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr()", "public com.github.javaparser.ast.expr.BooleanLiteralExpr()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr(boolean)", "public com.github.javaparser.ast.expr.BooleanLiteralExpr(boolean)"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr(com.github.javaparser.TokenRange, boolean)", "public com.github.javaparser.ast.expr.BooleanLiteralExpr(com.github.javaparser.TokenRange, boolean)"], ["<R, A> R", "com.github.javaparser.ast.expr.BooleanLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.BooleanLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getValue()", "public boolean getValue()"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.setValue(boolean)", "public com.github.javaparser.ast.expr.BooleanLiteralExpr setValue(boolean)"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.BooleanLiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()", "public com.github.javaparser.ast.expr.BooleanLiteralExpr clone()"], ["com.github.javaparser.metamodel.BooleanLiteralExprMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.BooleanLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.BooleanLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.BooleanLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.BooleanLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr()", "public com.github.javaparser.ast.expr.MethodCallExpr()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, java.lang.String)", "public com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, java.lang.String)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.MethodCallExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["<R, A> R", "com.github.javaparser.ast.expr.MethodCallExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MethodCallExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.MethodCallExpr.getArguments()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getArguments()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.MethodCallExpr.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.MethodCallExpr.getScope()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getScope()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.MethodCallExpr setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.MethodCallExpr setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MethodCallExpr setScope(com.github.javaparser.ast.expr.Expression)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>>", "com.github.javaparser.ast.expr.MethodCallExpr.getTypeArguments()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>> getTypeArguments()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.expr.MethodCallExpr setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.MethodCallExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.MethodCallExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.removeScope()", "public com.github.javaparser.ast.expr.MethodCallExpr removeScope()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.clone()", "public com.github.javaparser.ast.expr.MethodCallExpr clone()"], ["com.github.javaparser.metamodel.MethodCallExprMetaModel", "com.github.javaparser.ast.expr.MethodCallExpr.getMetaModel()", "public com.github.javaparser.metamodel.MethodCallExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.MethodCallExpr", "com.github.javaparser.ast.expr.MethodCallExpr.replaceScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MethodCallExpr replaceScope(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.MethodCallExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.MethodCallExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MethodCallExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MethodCallExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MethodCallExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setTypeArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.removeScope()", "public com.github.javaparser.ast.Node removeScope()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodCallExpr.setScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.AssignExpr$Operator[]", "com.github.javaparser.ast.expr.AssignExpr$Operator.values()", "public static com.github.javaparser.ast.expr.AssignExpr$Operator[] values()"], ["com.github.javaparser.ast.expr.AssignExpr$Operator", "com.github.javaparser.ast.expr.AssignExpr$Operator.valueOf(java.lang.String)", "public static com.github.javaparser.ast.expr.AssignExpr$Operator valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.AssignExpr$Operator.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr()", "public com.github.javaparser.ast.expr.SingleMemberAnnotationExpr()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SingleMemberAnnotationExpr(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SingleMemberAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMemberValue()", "public com.github.javaparser.ast.expr.Expression getMemberValue()"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.setMemberValue(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SingleMemberAnnotationExpr setMemberValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.SingleMemberAnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.SingleMemberAnnotationExpr clone()"], ["com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.SingleMemberAnnotationExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.AnnotationExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.AnnotationExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SingleMemberAnnotationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.nio.file.Path", "com.github.javaparser.ast.CompilationUnit$Storage.getPath()", "public java.nio.file.Path getPath()"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.ast.CompilationUnit$Storage.getCompilationUnit()", "public com.github.javaparser.ast.CompilationUnit getCompilationUnit()"], ["java.nio.file.Path", "com.github.javaparser.ast.CompilationUnit$Storage.getSourceRoot()", "public java.nio.file.Path getSourceRoot()"], ["java.lang.String", "com.github.javaparser.ast.CompilationUnit$Storage.getFileName()", "public java.lang.String getFileName()"], ["java.nio.file.Path", "com.github.javaparser.ast.CompilationUnit$Storage.getDirectory()", "public java.nio.file.Path getDirectory()"], ["void", "com.github.javaparser.ast.CompilationUnit$Storage.save()", "public void save()"], ["void", "com.github.javaparser.ast.CompilationUnit$Storage.save(java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>)", "public void save(java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>)"], ["com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>", "com.github.javaparser.ast.CompilationUnit$Storage.reparse(com.github.javaparser.JavaParser)", "public com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit> reparse(com.github.javaparser.JavaParser)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.com.github.javaparser.ast.expr.AnnotationExpr getAnnotation(int)", "public default com.github.javaparser.ast.expr.AnnotationExpr getAnnotation(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N setAnnotation(int, com.github.javaparser.ast.expr.AnnotationExpr)", "public default N setAnnotation(int, com.github.javaparser.ast.expr.AnnotationExpr)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addAnnotation(com.github.javaparser.ast.expr.AnnotationExpr)", "public default N addAnnotation(com.github.javaparser.ast.expr.AnnotationExpr)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addAnnotation(java.lang.String)", "public default N addAnnotation(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.com.github.javaparser.ast.expr.NormalAnnotationExpr addAndGetAnnotation(java.lang.String)", "public default com.github.javaparser.ast.expr.NormalAnnotationExpr addAndGetAnnotation(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public default N addAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.com.github.javaparser.ast.expr.NormalAnnotationExpr addAndGetAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public default com.github.javaparser.ast.expr.NormalAnnotationExpr addAndGetAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addMarkerAnnotation(java.lang.String)", "public default N addMarkerAnnotation(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addMarkerAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public default N addMarkerAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.String, com.github.javaparser.ast.expr.Expression)", "public default N addSingleMemberAnnotation(java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.String, java.lang.String)", "public default N addSingleMemberAnnotation(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.N addSingleMemberAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String)", "public default N addSingleMemberAnnotation(java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.boolean isAnnotationPresent(java.lang.String)", "public default boolean isAnnotationPresent(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public default boolean isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["java.util.Optional<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.getAnnotationByName(java.lang.String)", "public default java.util.Optional<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotationByName(java.lang.String)"], ["java.util.Optional<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.getAnnotationByClass(java.lang.Class<? extends java.lang.annotation.Annotation>)", "public default java.util.Optional<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotationByClass(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.Statement getStatement(int)", "public default com.github.javaparser.ast.stmt.Statement getStatement(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N setStatement(int, com.github.javaparser.ast.stmt.Statement)", "public default N setStatement(int, com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(com.github.javaparser.ast.stmt.Statement)", "public default N addStatement(com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(int, com.github.javaparser.ast.stmt.Statement)", "public default N addStatement(int, com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(com.github.javaparser.ast.expr.Expression)", "public default N addStatement(com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(java.lang.String)", "public default N addStatement(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N addStatement(int, com.github.javaparser.ast.expr.Expression)", "public default N addStatement(int, com.github.javaparser.ast.expr.Expression)"], ["<A extends com.github.javaparser.ast.stmt.Statement> A", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.addAndGetStatement(A)", "public default <A extends com.github.javaparser.ast.stmt.Statement> A addAndGetStatement(A)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.Statement addAndGetStatement(int, com.github.javaparser.ast.stmt.Statement)", "public default com.github.javaparser.ast.stmt.Statement addAndGetStatement(int, com.github.javaparser.ast.stmt.Statement)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.ExpressionStmt addAndGetStatement(com.github.javaparser.ast.expr.Expression)", "public default com.github.javaparser.ast.stmt.ExpressionStmt addAndGetStatement(com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.com.github.javaparser.ast.stmt.ExpressionStmt addAndGetStatement(java.lang.String)", "public default com.github.javaparser.ast.stmt.ExpressionStmt addAndGetStatement(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.boolean isEmpty()", "public default boolean isEmpty()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N copyStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public default N copyStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithStatements.N copyStatements(com.github.javaparser.ast.nodeTypes.NodeWithStatements<?>)", "public default N copyStatements(com.github.javaparser.ast.nodeTypes.NodeWithStatements<?>)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["com.github.javaparser.utils.SeparatedItemStringBuilder", "com.github.javaparser.utils.SeparatedItemStringBuilder(java.lang.String, java.lang.String, java.lang.String)", "public com.github.javaparser.utils.SeparatedItemStringBuilder(java.lang.String, java.lang.String, java.lang.String)"], ["com.github.javaparser.utils.SeparatedItemStringBuilder", "com.github.javaparser.utils.SeparatedItemStringBuilder.append(java.lang.CharSequence, java.lang.Object...)", "public com.github.javaparser.utils.SeparatedItemStringBuilder append(java.lang.CharSequence, java.lang.Object...)"], ["boolean", "com.github.javaparser.utils.SeparatedItemStringBuilder.hasItems()", "public boolean hasItems()"], ["java.lang.String", "com.github.javaparser.utils.SeparatedItemStringBuilder.toString()", "public java.lang.String toString()"], ["java.util.List<com.github.javaparser.metamodel.BaseNodeMetaModel>", "com.github.javaparser.metamodel.JavaParserMetaModel.getNodeMetaModels()", "public static java.util.List<com.github.javaparser.metamodel.BaseNodeMetaModel> getNodeMetaModels()"], ["java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>", "com.github.javaparser.metamodel.JavaParserMetaModel.getNodeMetaModel(java.lang.Class<? extends com.github.javaparser.ast.Node>)", "public static java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel> getNodeMetaModel(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementMatchers$1.match(com.github.javaparser.printer.lexicalpreservation.TextElement)", "public boolean match(com.github.javaparser.printer.lexicalpreservation.TextElement)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.TextElementMatchers$1.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isWhiteSpace()", "public boolean isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isSpaceOrTab()", "public boolean isSpaceOrTab()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isNewline()", "public boolean isNewline()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isComment()", "public boolean isComment()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.ChildTextElement.isChildOfClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)", "public boolean isChildOfClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$3.process(com.github.javaparser.ast.Node)", "public void process(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled(com.github.javaparser.printer.concretesyntaxmodel.CsmMix, com.github.javaparser.printer.concretesyntaxmodel.CsmMix)", "public com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled(com.github.javaparser.printer.concretesyntaxmodel.CsmMix, com.github.javaparser.printer.concretesyntaxmodel.CsmMix)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled.hashCode()", "public int hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmMix", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled.getElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmMix getElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled.isAdded()", "public boolean isAdded()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Difference$Reshuffled.getElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getElement()"], ["default", "com.github.javaparser.printer.lexicalpreservation.changes.Change.boolean evaluate(com.github.javaparser.printer.concretesyntaxmodel.CsmConditional, com.github.javaparser.ast.Node)", "public default boolean evaluate(com.github.javaparser.printer.concretesyntaxmodel.CsmConditional, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange", "com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node)", "public com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.ListRemovalChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)", "public java.lang.Object getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.changes.NoChange", "com.github.javaparser.printer.lexicalpreservation.changes.NoChange()", "public com.github.javaparser.printer.lexicalpreservation.changes.NoChange()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.NoChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)", "public java.lang.Object getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getProperty()", "public com.github.javaparser.ast.observer.ObservableProperty getProperty()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getOldValue()", "public java.lang.Object getOldValue()"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getNewValue()", "public java.lang.Object getNewValue()"], ["com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange(com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange(com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.PropertyChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)", "public java.lang.Object getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.PhantomNodeLogic$1.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory()", "public com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory()"], ["java.util.Iterator<com.github.javaparser.printer.lexicalpreservation.TokenTextElement>", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.reverseIterator(com.github.javaparser.printer.lexicalpreservation.NodeText)", "public static java.util.Iterator<com.github.javaparser.printer.lexicalpreservation.TokenTextElement> reverseIterator(com.github.javaparser.printer.lexicalpreservation.NodeText)"], ["java.util.Iterator<com.github.javaparser.printer.lexicalpreservation.TokenTextElement>", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory.partialReverseIterator(com.github.javaparser.printer.lexicalpreservation.NodeText, int)", "public static java.util.Iterator<com.github.javaparser.printer.lexicalpreservation.TokenTextElement> partialReverseIterator(com.github.javaparser.printer.lexicalpreservation.NodeText, int)"], ["com.github.javaparser.printer.lexicalpreservation.TextElement", "com.github.javaparser.printer.lexicalpreservation.TextElement()", "public com.github.javaparser.printer.lexicalpreservation.TextElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElement.match(com.github.javaparser.printer.lexicalpreservation.TextElement)", "public boolean match(com.github.javaparser.printer.lexicalpreservation.TextElement)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElement.isWhiteSpaceOrComment()", "public final boolean isWhiteSpaceOrComment()"], ["com.github.javaparser.printer.lexicalpreservation.Difference$Removed", "com.github.javaparser.printer.lexicalpreservation.Difference$Removed(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.lexicalpreservation.Difference$Removed(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Difference$Removed.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Removed.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Difference$Removed.hashCode()", "public int hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Difference$Removed.getElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Removed.isAdded()", "public boolean isAdded()"], ["void", "com.github.javaparser.printer.lexicalpreservation.NodeText.remove(com.github.javaparser.printer.lexicalpreservation.TextElementMatcher, boolean)", "public void remove(com.github.javaparser.printer.lexicalpreservation.TextElementMatcher, boolean)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.NodeText.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$SingleElementIterator.hasNext()", "public boolean hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$SingleElementIterator.next()", "public E next()"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$SingleElementIterator.remove()", "public void remove()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmMix", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix(java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmMix(java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>)"], ["java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement>", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.getElements()", "public java.util.List<com.github.javaparser.printer.concretesyntaxmodel.CsmElement> getElements()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.printer.concretesyntaxmodel.CsmMix.toString()", "public java.lang.String toString()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmComment", "com.github.javaparser.printer.concretesyntaxmodel.CsmComment()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmComment()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmComment.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.ast.visitor.ModifierVisitor", "com.github.javaparser.ast.visitor.ModifierVisitor()", "public com.github.javaparser.ast.visitor.ModifierVisitor()"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CastExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.CompilationUnit, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.CompilationUnit, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ForeachStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NameExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.PackageDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.Parameter, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.Parameter, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.Name, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.Name, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SimpleName, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ArrayType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.ArrayType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.IntersectionType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnionType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.UnionType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.TypeParameter, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnknownType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.UnknownType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.VoidType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.VoidType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.WildcardType, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.WildcardType, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.NodeList, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.NodeList, A)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ImportDeclaration, A)", "public com.github.javaparser.ast.Node visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.BlockComment, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.LineComment, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.comments.LineComment, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.ModifierVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.validator.Java5Validator", "com.github.javaparser.ast.validator.Java5Validator()", "public com.github.javaparser.ast.validator.Java5Validator()"], ["com.github.javaparser.ast.validator.SimpleValidator", "com.github.javaparser.ast.validator.SimpleValidator(java.lang.Class<N>, java.util.function.Predicate<N>, java.util.function.BiConsumer<N, com.github.javaparser.ast.validator.ProblemReporter>)", "public com.github.javaparser.ast.validator.SimpleValidator(java.lang.Class<N>, java.util.function.Predicate<N>, java.util.function.BiConsumer<N, com.github.javaparser.ast.validator.ProblemReporter>)"], ["com.github.javaparser.ast.validator.Java1_3Validator", "com.github.javaparser.ast.validator.Java1_3Validator()", "public com.github.javaparser.ast.validator.Java1_3Validator()"], ["com.github.javaparser.ast.validator.Java7Validator", "com.github.javaparser.ast.validator.Java7Validator()", "public com.github.javaparser.ast.validator.Java7Validator()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType()", "public com.github.javaparser.ast.type.WildcardType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.WildcardType(com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.WildcardType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.WildcardType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.WildcardType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.type.WildcardType.getExtendedType()", "public java.util.Optional<com.github.javaparser.ast.type.ReferenceType> getExtendedType()"], ["java.util.Optional<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.type.WildcardType.getSuperType()", "public java.util.Optional<com.github.javaparser.ast.type.ReferenceType> getSuperType()"], ["java.util.Optional<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.type.WildcardType.getExtendedTypes()", "public java.util.Optional<com.github.javaparser.ast.type.ReferenceType> getExtendedTypes()"], ["java.util.Optional<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.type.WildcardType.getSuperTypes()", "public java.util.Optional<com.github.javaparser.ast.type.ReferenceType> getSuperTypes()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setExtendedType(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType setExtendedType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setExtendedTypes(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType setExtendedTypes(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setSuperType(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType setSuperType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setSuperTypes(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType setSuperTypes(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.WildcardType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.WildcardType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.WildcardType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.WildcardType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.removeExtendedTypes()", "public com.github.javaparser.ast.type.WildcardType removeExtendedTypes()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.removeSuperTypes()", "public com.github.javaparser.ast.type.WildcardType removeSuperTypes()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.removeExtendedType()", "public com.github.javaparser.ast.type.WildcardType removeExtendedType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.removeSuperType()", "public com.github.javaparser.ast.type.WildcardType removeSuperType()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.clone()", "public com.github.javaparser.ast.type.WildcardType clone()"], ["com.github.javaparser.metamodel.WildcardTypeMetaModel", "com.github.javaparser.ast.type.WildcardType.getMetaModel()", "public com.github.javaparser.metamodel.WildcardTypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.replaceExtendedType(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType replaceExtendedType(com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType.replaceSuperType(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType replaceSuperType(com.github.javaparser.ast.type.ReferenceType)"], ["boolean", "com.github.javaparser.ast.type.WildcardType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.ast.type.WildcardType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.type.WildcardType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ReferenceType, com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.WildcardType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.WildcardType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.WildcardType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.WildcardType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.WildcardType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.WildcardType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.WildcardType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType()", "public com.github.javaparser.ast.type.ReferenceType()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ReferenceType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ReferenceType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["boolean", "com.github.javaparser.ast.type.ReferenceType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ReferenceType.clone()", "public com.github.javaparser.ast.type.ReferenceType clone()"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.ReferenceType.getMetaModel()", "public com.github.javaparser.metamodel.ReferenceTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.ReferenceType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.ReferenceType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ReferenceType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.ReferenceType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ReferenceType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.ReferenceType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.Type(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.Type(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.type.Type.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.type.Type.getAnnotation(int)", "public com.github.javaparser.ast.expr.AnnotationExpr getAnnotation(int)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type.getElementType()", "public com.github.javaparser.ast.type.Type getElementType()"], ["int", "com.github.javaparser.ast.type.Type.getArrayLevel()", "public int getArrayLevel()"], ["boolean", "com.github.javaparser.ast.type.Type.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.Type.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.Type.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.Type.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.Type.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.Type.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.Type.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.type.IntersectionType(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.type.IntersectionType(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["<R, A> R", "com.github.javaparser.ast.type.IntersectionType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.IntersectionType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.type.IntersectionType.getElements()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType> getElements()"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.setElements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.type.IntersectionType setElements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.IntersectionType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.IntersectionType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.IntersectionType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.IntersectionType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.ast.type.IntersectionType.clone()", "public com.github.javaparser.ast.type.IntersectionType clone()"], ["com.github.javaparser.metamodel.IntersectionTypeMetaModel", "com.github.javaparser.ast.type.IntersectionType.getMetaModel()", "public com.github.javaparser.metamodel.IntersectionTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.IntersectionType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.IntersectionType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.IntersectionType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.IntersectionType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.IntersectionType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.IntersectionType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.IntersectionType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.IntersectionType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter()", "public com.github.javaparser.ast.type.TypeParameter()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(java.lang.String)", "public com.github.javaparser.ast.type.TypeParameter(java.lang.String)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)", "public com.github.javaparser.ast.type.TypeParameter(java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.Range, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)", "public com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.Range, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.TypeParameter(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.TypeParameter.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.TypeParameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.type.TypeParameter.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.ast.type.TypeParameter.getTypeBound()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> getTypeBound()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.type.TypeParameter setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.setTypeBound(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)", "public com.github.javaparser.ast.type.TypeParameter setTypeBound(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.TypeParameter setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.TypeParameter.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.TypeParameter.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.TypeParameter.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.ast.type.TypeParameter.clone()", "public com.github.javaparser.ast.type.TypeParameter clone()"], ["com.github.javaparser.metamodel.TypeParameterMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()", "public com.github.javaparser.metamodel.TypeParameterMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.TypeParameter.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()", "public com.github.javaparser.metamodel.ReferenceTypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.TypeParameter.clone()", "public com.github.javaparser.ast.type.ReferenceType clone()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.TypeParameter.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.TypeParameter.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.TypeParameter.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.TypeParameter.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.TypeParameter.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.TypeParameter.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.TypeParameter.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt()", "public com.github.javaparser.ast.stmt.SwitchStmt()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>)", "public com.github.javaparser.ast.stmt.SwitchStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>)", "public com.github.javaparser.ast.stmt.SwitchStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.SwitchStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.SwitchStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>", "com.github.javaparser.ast.stmt.SwitchStmt.getEntries()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt> getEntries()"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchStmt.getEntry(int)", "public com.github.javaparser.ast.stmt.SwitchEntryStmt getEntry(int)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.SwitchStmt.getSelector()", "public com.github.javaparser.ast.expr.Expression getSelector()"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>)", "public com.github.javaparser.ast.stmt.SwitchStmt setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.SwitchEntryStmt>)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.setEntry(int, com.github.javaparser.ast.stmt.SwitchEntryStmt)", "public com.github.javaparser.ast.stmt.SwitchStmt setEntry(int, com.github.javaparser.ast.stmt.SwitchEntryStmt)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.addEntry(com.github.javaparser.ast.stmt.SwitchEntryStmt)", "public com.github.javaparser.ast.stmt.SwitchStmt addEntry(com.github.javaparser.ast.stmt.SwitchEntryStmt)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.setSelector(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.SwitchStmt setSelector(com.github.javaparser.ast.expr.Expression)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.stmt.SwitchStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.stmt.SwitchStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.ast.stmt.SwitchStmt.clone()", "public com.github.javaparser.ast.stmt.SwitchStmt clone()"], ["com.github.javaparser.metamodel.SwitchStmtMetaModel", "com.github.javaparser.ast.stmt.SwitchStmt.getMetaModel()", "public com.github.javaparser.metamodel.SwitchStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.SwitchStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.SwitchStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.SwitchStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.SwitchStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SwitchStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.SwitchStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.Statement()", "public com.github.javaparser.ast.stmt.Statement()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.Statement(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.stmt.Statement(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.stmt.Statement.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.Statement.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.Statement.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.Statement.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.Statement.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.Statement.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.Statement.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt()", "public com.github.javaparser.ast.stmt.ForeachStmt()"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.ForeachStmt(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.ForeachStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.String, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.ForeachStmt(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.String, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ForeachStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ForeachStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForeachStmt.getBody()", "public com.github.javaparser.ast.stmt.Statement getBody()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ForeachStmt.getIterable()", "public com.github.javaparser.ast.expr.Expression getIterable()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.stmt.ForeachStmt.getVariable()", "public com.github.javaparser.ast.expr.VariableDeclarationExpr getVariable()"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.ForeachStmt setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt.setIterable(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ForeachStmt setIterable(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt.setVariable(com.github.javaparser.ast.expr.VariableDeclarationExpr)", "public com.github.javaparser.ast.stmt.ForeachStmt setVariable(com.github.javaparser.ast.expr.VariableDeclarationExpr)"], ["boolean", "com.github.javaparser.ast.stmt.ForeachStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ForeachStmt", "com.github.javaparser.ast.stmt.ForeachStmt.clone()", "public com.github.javaparser.ast.stmt.ForeachStmt clone()"], ["com.github.javaparser.metamodel.ForeachStmtMetaModel", "com.github.javaparser.ast.stmt.ForeachStmt.getMetaModel()", "public com.github.javaparser.metamodel.ForeachStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ForeachStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ForeachStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ForeachStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ForeachStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForeachStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ForeachStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ForeachStmt.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.expr.UnaryExpr$Operator[]", "com.github.javaparser.ast.expr.UnaryExpr$Operator.values()", "public static com.github.javaparser.ast.expr.UnaryExpr$Operator[] values()"], ["com.github.javaparser.ast.expr.UnaryExpr$Operator", "com.github.javaparser.ast.expr.UnaryExpr$Operator.valueOf(java.lang.String)", "public static com.github.javaparser.ast.expr.UnaryExpr$Operator valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.UnaryExpr$Operator.asString()", "public java.lang.String asString()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr$Operator.isPostfix()", "public boolean isPostfix()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr$Operator.isPrefix()", "public boolean isPrefix()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr()", "public com.github.javaparser.ast.expr.ArrayCreationExpr()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>, com.github.javaparser.ast.expr.ArrayInitializerExpr)", "public com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>, com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.Range, com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.Range, com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>, com.github.javaparser.ast.expr.ArrayInitializerExpr)", "public com.github.javaparser.ast.expr.ArrayCreationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>, com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["<R, A> R", "com.github.javaparser.ast.expr.ArrayCreationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ArrayCreationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.ArrayInitializerExpr>", "com.github.javaparser.ast.expr.ArrayCreationExpr.getInitializer()", "public java.util.Optional<com.github.javaparser.ast.expr.ArrayInitializerExpr> getInitializer()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ArrayCreationExpr.getElementType()", "public com.github.javaparser.ast.type.Type getElementType()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)", "public com.github.javaparser.ast.expr.ArrayCreationExpr setInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setElementType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.ArrayCreationExpr setElementType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>", "com.github.javaparser.ast.expr.ArrayCreationExpr.getLevels()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel> getLevels()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setLevels(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>)", "public com.github.javaparser.ast.expr.ArrayCreationExpr setLevels(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.ArrayCreationLevel>)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ArrayCreationExpr.createdType()", "public com.github.javaparser.ast.type.Type createdType()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setElementType(java.lang.Class<?>)", "public com.github.javaparser.ast.expr.ArrayCreationExpr setElementType(java.lang.Class<?>)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.setElementType(java.lang.String)", "public com.github.javaparser.ast.expr.ArrayCreationExpr setElementType(java.lang.String)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.ArrayCreationExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.ArrayCreationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.removeInitializer()", "public com.github.javaparser.ast.expr.ArrayCreationExpr removeInitializer()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()", "public com.github.javaparser.ast.expr.ArrayCreationExpr clone()"], ["com.github.javaparser.metamodel.ArrayCreationExprMetaModel", "com.github.javaparser.ast.expr.ArrayCreationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ArrayCreationExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.ast.expr.ArrayCreationExpr.replaceInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)", "public com.github.javaparser.ast.expr.ArrayCreationExpr replaceInitializer(com.github.javaparser.ast.expr.ArrayInitializerExpr)"], ["boolean", "com.github.javaparser.ast.expr.ArrayCreationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ArrayCreationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ArrayCreationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ArrayCreationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr()", "public com.github.javaparser.ast.expr.ConditionalExpr()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ConditionalExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ConditionalExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.ConditionalExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ConditionalExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.getCondition()", "public com.github.javaparser.ast.expr.Expression getCondition()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.getElseExpr()", "public com.github.javaparser.ast.expr.Expression getElseExpr()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.getThenExpr()", "public com.github.javaparser.ast.expr.Expression getThenExpr()"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ConditionalExpr setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.setElseExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ConditionalExpr setElseExpr(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.setThenExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ConditionalExpr setThenExpr(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ConditionalExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ConditionalExpr", "com.github.javaparser.ast.expr.ConditionalExpr.clone()", "public com.github.javaparser.ast.expr.ConditionalExpr clone()"], ["com.github.javaparser.metamodel.ConditionalExprMetaModel", "com.github.javaparser.ast.expr.ConditionalExpr.getMetaModel()", "public com.github.javaparser.metamodel.ConditionalExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ConditionalExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ConditionalExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ConditionalExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ConditionalExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ConditionalExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ConditionalExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ConditionalExpr.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr()", "public com.github.javaparser.ast.expr.LambdaExpr()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.Statement, boolean)", "public com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.Statement, boolean)"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.Statement, boolean)", "public com.github.javaparser.ast.expr.LambdaExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.stmt.Statement, boolean)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.ast.expr.LambdaExpr.getParameters()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter> getParameters()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)", "public com.github.javaparser.ast.expr.LambdaExpr setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.expr.LambdaExpr.getBody()", "public com.github.javaparser.ast.stmt.Statement getBody()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.setBody(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.expr.LambdaExpr setBody(com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.expr.LambdaExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.LambdaExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.isEnclosingParameters()", "public boolean isEnclosingParameters()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.setEnclosingParameters(boolean)", "public com.github.javaparser.ast.expr.LambdaExpr setEnclosingParameters(boolean)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.LambdaExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.LambdaExpr.getExpressionBody()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getExpressionBody()"], ["com.github.javaparser.ast.expr.LambdaExpr", "com.github.javaparser.ast.expr.LambdaExpr.clone()", "public com.github.javaparser.ast.expr.LambdaExpr clone()"], ["com.github.javaparser.metamodel.LambdaExprMetaModel", "com.github.javaparser.ast.expr.LambdaExpr.getMetaModel()", "public com.github.javaparser.metamodel.LambdaExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LambdaExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LambdaExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LambdaExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LambdaExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LambdaExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LambdaExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LambdaExpr.setParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setParameters(com.github.javaparser.ast.NodeList)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.com.github.javaparser.ast.type.TypeParameter getTypeParameter(int)", "public default com.github.javaparser.ast.type.TypeParameter getTypeParameter(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N setTypeParameter(int, com.github.javaparser.ast.type.TypeParameter)", "public default N setTypeParameter(int, com.github.javaparser.ast.type.TypeParameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.N addTypeParameter(com.github.javaparser.ast.type.TypeParameter)", "public default N addTypeParameter(com.github.javaparser.ast.type.TypeParameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeParameters.boolean isGeneric()", "public default boolean isGeneric()"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMember(int)", "public default com.github.javaparser.ast.body.BodyDeclaration<?> getMember(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.N setMember(int, com.github.javaparser.ast.body.BodyDeclaration<?>)", "public default N setMember(int, com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.N addMember(com.github.javaparser.ast.body.BodyDeclaration<?>)", "public default N addMember(com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addField(java.lang.Class<?>, java.lang.String, com.github.javaparser.ast.Modifier...)", "public default com.github.javaparser.ast.body.FieldDeclaration addField(java.lang.Class<?>, java.lang.String, com.github.javaparser.ast.Modifier...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier...)", "public default com.github.javaparser.ast.body.FieldDeclaration addField(java.lang.String, java.lang.String, com.github.javaparser.ast.Modifier...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addField(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier...)", "public default com.github.javaparser.ast.body.FieldDeclaration addField(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPrivateField(java.lang.Class<?>, java.lang.String)", "public default com.github.javaparser.ast.body.FieldDeclaration addPrivateField(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPrivateField(java.lang.String, java.lang.String)", "public default com.github.javaparser.ast.body.FieldDeclaration addPrivateField(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPublicField(java.lang.Class<?>, java.lang.String)", "public default com.github.javaparser.ast.body.FieldDeclaration addPublicField(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addPublicField(java.lang.String, java.lang.String)", "public default com.github.javaparser.ast.body.FieldDeclaration addPublicField(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addProtectedField(java.lang.Class<?>, java.lang.String)", "public default com.github.javaparser.ast.body.FieldDeclaration addProtectedField(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.FieldDeclaration addProtectedField(java.lang.String, java.lang.String)", "public default com.github.javaparser.ast.body.FieldDeclaration addProtectedField(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.body.MethodDeclaration addMethod(java.lang.String, com.github.javaparser.ast.Modifier...)", "public default com.github.javaparser.ast.body.MethodDeclaration addMethod(java.lang.String, com.github.javaparser.ast.Modifier...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.stmt.BlockStmt addInitializer()", "public default com.github.javaparser.ast.stmt.BlockStmt addInitializer()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.com.github.javaparser.ast.stmt.BlockStmt addStaticInitializer()", "public default com.github.javaparser.ast.stmt.BlockStmt addStaticInitializer()"], ["java.util.List<com.github.javaparser.ast.body.MethodDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethodsByName(java.lang.String)", "public default java.util.List<com.github.javaparser.ast.body.MethodDeclaration> getMethodsByName(java.lang.String)"], ["java.util.List<com.github.javaparser.ast.body.MethodDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethods()", "public default java.util.List<com.github.javaparser.ast.body.MethodDeclaration> getMethods()"], ["java.util.List<com.github.javaparser.ast.body.MethodDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethodsByParameterTypes(java.lang.String...)", "public default java.util.List<com.github.javaparser.ast.body.MethodDeclaration> getMethodsByParameterTypes(java.lang.String...)"], ["java.util.List<com.github.javaparser.ast.body.MethodDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethodsBySignature(java.lang.String, java.lang.String...)", "public default java.util.List<com.github.javaparser.ast.body.MethodDeclaration> getMethodsBySignature(java.lang.String, java.lang.String...)"], ["java.util.List<com.github.javaparser.ast.body.MethodDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getMethodsByParameterTypes(java.lang.Class<?>...)", "public default java.util.List<com.github.javaparser.ast.body.MethodDeclaration> getMethodsByParameterTypes(java.lang.Class<?>...)"], ["java.util.Optional<com.github.javaparser.ast.body.FieldDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getFieldByName(java.lang.String)", "public default java.util.Optional<com.github.javaparser.ast.body.FieldDeclaration> getFieldByName(java.lang.String)"], ["java.util.List<com.github.javaparser.ast.body.FieldDeclaration>", "com.github.javaparser.ast.nodeTypes.NodeWithMembers.getFields()", "public default java.util.List<com.github.javaparser.ast.body.FieldDeclaration> getFields()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithType.N setType(java.lang.Class<?>)", "public default N setType(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithType.N setType(java.lang.String)", "public default N setType(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier.boolean isStatic()", "public default boolean isStatic()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStaticModifier.N setStatic(boolean)", "public default N setStatic(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier.boolean isStrictfp()", "public default boolean isStrictfp()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithStrictfpModifier.N setStrictfp(boolean)", "public default N setStrictfp(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.boolean isPrivate()", "public default boolean isPrivate()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPrivateModifier.N setPrivate(boolean)", "public default N setPrivate(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.boolean isPublic()", "public default boolean isPublic()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithPublicModifier.N setPublic(boolean)", "public default N setPublic(boolean)"], ["com.github.javaparser.utils.StringEscapeUtils$LookupTranslator", "com.github.javaparser.utils.StringEscapeUtils$LookupTranslator(java.lang.CharSequence[]...)", "public com.github.javaparser.utils.StringEscapeUtils$LookupTranslator(java.lang.CharSequence[]...)"], ["int", "com.github.javaparser.utils.StringEscapeUtils$LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer)", "public int translate(java.lang.CharSequence, int, java.io.Writer) throws java.io.IOException"], ["com.github.javaparser.utils.Pair", "com.github.javaparser.utils.Pair(A, B)", "public com.github.javaparser.utils.Pair(A, B)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.JavadocParser.parse(com.github.javaparser.ast.comments.JavadocComment)", "public static com.github.javaparser.javadoc.Javadoc parse(com.github.javaparser.ast.comments.JavadocComment)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.JavadocParser.parse(java.lang.String)", "public static com.github.javaparser.javadoc.Javadoc parse(java.lang.String)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.setDebugStream(java.io.PrintStream)", "public void setDebugStream(java.io.PrintStream)"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParserTokenManager.getNextToken()", "public com.github.javaparser.Token getNextToken()"], ["com.github.javaparser.GeneratedJavaParserTokenManager", "com.github.javaparser.GeneratedJavaParserTokenManager(com.github.javaparser.JavaCharStream)", "public com.github.javaparser.GeneratedJavaParserTokenManager(com.github.javaparser.JavaCharStream)"], ["com.github.javaparser.GeneratedJavaParserTokenManager", "com.github.javaparser.GeneratedJavaParserTokenManager(com.github.javaparser.JavaCharStream, int)", "public com.github.javaparser.GeneratedJavaParserTokenManager(com.github.javaparser.JavaCharStream, int)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.ReInit(com.github.javaparser.JavaCharStream)", "public void ReInit(com.github.javaparser.JavaCharStream)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.ReInit(com.github.javaparser.JavaCharStream, int)", "public void ReInit(com.github.javaparser.JavaCharStream, int)"], ["void", "com.github.javaparser.GeneratedJavaParserTokenManager.SwitchTo(int)", "public void SwitchTo(int)"], ["com.github.javaparser.metamodel.BaseNodeMetaModel", "com.github.javaparser.metamodel.BaseNodeMetaModel(java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>, java.lang.Class<? extends com.github.javaparser.ast.Node>, java.lang.String, java.lang.String, boolean, boolean)", "public com.github.javaparser.metamodel.BaseNodeMetaModel(java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>, java.lang.Class<? extends com.github.javaparser.ast.Node>, java.lang.String, java.lang.String, boolean, boolean)"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.is(java.lang.Class<? extends com.github.javaparser.ast.Node>)", "public boolean is(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getQualifiedClassName()", "public java.lang.String getQualifiedClassName()"], ["java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getSuperNodeMetaModel()", "public java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel> getSuperNodeMetaModel()"], ["java.util.List<com.github.javaparser.metamodel.PropertyMetaModel>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getDeclaredPropertyMetaModels()", "public java.util.List<com.github.javaparser.metamodel.PropertyMetaModel> getDeclaredPropertyMetaModels()"], ["java.util.List<com.github.javaparser.metamodel.PropertyMetaModel>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getDerivedPropertyMetaModels()", "public java.util.List<com.github.javaparser.metamodel.PropertyMetaModel> getDerivedPropertyMetaModels()"], ["java.util.List<com.github.javaparser.metamodel.PropertyMetaModel>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getConstructorParameters()", "public java.util.List<com.github.javaparser.metamodel.PropertyMetaModel> getConstructorParameters()"], ["java.util.List<com.github.javaparser.metamodel.PropertyMetaModel>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getAllPropertyMetaModels()", "public java.util.List<com.github.javaparser.metamodel.PropertyMetaModel> getAllPropertyMetaModels()"], ["java.lang.Class<? extends com.github.javaparser.ast.Node>", "com.github.javaparser.metamodel.BaseNodeMetaModel.getType()", "public java.lang.Class<? extends com.github.javaparser.ast.Node> getType()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getPackageName()", "public java.lang.String getPackageName()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.isAbstract()", "public boolean isAbstract()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.hasWildcard()", "public boolean hasWildcard()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.isRootNode()", "public boolean isRootNode()"], ["boolean", "com.github.javaparser.metamodel.BaseNodeMetaModel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.metamodel.BaseNodeMetaModel.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeNameGenerified()", "public java.lang.String getTypeNameGenerified()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getTypeName()", "public java.lang.String getTypeName()"], ["java.lang.String", "com.github.javaparser.metamodel.BaseNodeMetaModel.getMetaModelFieldName()", "public java.lang.String getMetaModelFieldName()"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$2.process(com.github.javaparser.ast.Node)", "public void process(com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.NodeText$Option[]", "com.github.javaparser.printer.lexicalpreservation.NodeText$Option.values()", "public static com.github.javaparser.printer.lexicalpreservation.NodeText$Option[] values()"], ["com.github.javaparser.printer.lexicalpreservation.NodeText$Option", "com.github.javaparser.printer.lexicalpreservation.NodeText$Option.valueOf(java.lang.String)", "public static com.github.javaparser.printer.lexicalpreservation.NodeText$Option valueOf(java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.child(com.github.javaparser.ast.observer.ObservableProperty)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement child(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.attribute(com.github.javaparser.ast.observer.ObservableProperty)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement attribute(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.sequence(com.github.javaparser.printer.concretesyntaxmodel.CsmElement...)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement sequence(com.github.javaparser.printer.concretesyntaxmodel.CsmElement...)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.string(int, java.lang.String)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement string(int, java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.string(int)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement string(int)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.stringToken(com.github.javaparser.ast.observer.ObservableProperty)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement stringToken(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.charToken(com.github.javaparser.ast.observer.ObservableProperty)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement charToken(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.token(int)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement token(int)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.token(int, com.github.javaparser.printer.concretesyntaxmodel.CsmToken$TokenContentCalculator)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement token(int, com.github.javaparser.printer.concretesyntaxmodel.CsmToken$TokenContentCalculator)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.conditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement conditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.conditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement conditional(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmConditional$Condition, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.space()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement space()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.semicolon()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement semicolon()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.comment()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement comment()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.newline()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement newline()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.none()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement none()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.comma()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement comma()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement list(com.github.javaparser.ast.observer.ObservableProperty)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement list(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement, com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.orphanCommentsEnding()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement orphanCommentsEnding()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.orphanCommentsBeforeThis()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement orphanCommentsBeforeThis()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.indent()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement indent()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.unindent()", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement unindent()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.concretesyntaxmodel.CsmElement.block(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.concretesyntaxmodel.CsmElement block(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.ast.visitor.GenericVisitorAdapter", "com.github.javaparser.ast.visitor.GenericVisitorAdapter()", "public com.github.javaparser.ast.visitor.GenericVisitorAdapter()"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)", "public R visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)", "public R visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)", "public R visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)", "public R visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)", "public R visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, A)", "public R visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, A)", "public R visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, A)", "public R visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, A)", "public R visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, A)", "public R visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, A)", "public R visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, A)", "public R visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, A)", "public R visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)", "public R visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)", "public R visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, A)", "public R visit(com.github.javaparser.ast.CompilationUnit, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)", "public R visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)", "public R visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, A)", "public R visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)", "public R visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)", "public R visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)", "public R visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, A)", "public R visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)", "public R visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, A)", "public R visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForeachStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ForeachStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, A)", "public R visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)", "public R visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)", "public R visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, A)", "public R visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)", "public R visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)", "public R visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, A)", "public R visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)", "public R visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, A)", "public R visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, A)", "public R visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)", "public R visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)", "public R visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, A)", "public R visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, A)", "public R visit(com.github.javaparser.ast.body.Parameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, A)", "public R visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, A)", "public R visit(com.github.javaparser.ast.expr.Name, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, A)", "public R visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, A)", "public R visit(com.github.javaparser.ast.type.ArrayType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, A)", "public R visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, A)", "public R visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, A)", "public R visit(com.github.javaparser.ast.type.UnionType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)", "public R visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)", "public R visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, A)", "public R visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)", "public R visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)", "public R visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)", "public R visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, A)", "public R visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)", "public R visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, A)", "public R visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)", "public R visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, A)", "public R visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, A)", "public R visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, A)", "public R visit(com.github.javaparser.ast.type.UnknownType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)", "public R visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, A)", "public R visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, A)", "public R visit(com.github.javaparser.ast.type.VoidType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, A)", "public R visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, A)", "public R visit(com.github.javaparser.ast.type.WildcardType, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, A)", "public R visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)", "public R visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, A)", "public R visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, A)", "public R visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, A)", "public R visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, A)", "public R visit(com.github.javaparser.ast.comments.LineComment, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.NodeList, A)", "public R visit(com.github.javaparser.ast.NodeList, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)", "public R visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)", "public R visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)", "public R visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)", "public R visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)", "public R visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)", "public R visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)"], ["R", "com.github.javaparser.ast.visitor.GenericVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)", "public R visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ArrayType(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.AnnotationExpr...)", "public com.github.javaparser.ast.type.ArrayType(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.AnnotationExpr...)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ArrayType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.ArrayType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.ArrayType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.getComponentType()", "public com.github.javaparser.ast.type.Type getComponentType()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.setComponentType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.type.ArrayType setComponentType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.wrapInArrayTypes(com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>...)", "public static com.github.javaparser.ast.type.Type wrapInArrayTypes(com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>...)"], ["com.github.javaparser.utils.Pair<com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>>", "com.github.javaparser.ast.type.ArrayType.unwrapArrayTypes(com.github.javaparser.ast.type.Type)", "public static com.github.javaparser.utils.Pair<com.github.javaparser.ast.type.Type, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>> unwrapArrayTypes(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ArrayType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.ArrayType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.ArrayType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.ArrayType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.ArrayType", "com.github.javaparser.ast.type.ArrayType.clone()", "public com.github.javaparser.ast.type.ArrayType clone()"], ["com.github.javaparser.metamodel.ArrayTypeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()", "public com.github.javaparser.metamodel.ArrayTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.ArrayType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()", "public com.github.javaparser.metamodel.ReferenceTypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ArrayType.clone()", "public com.github.javaparser.ast.type.ReferenceType clone()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ArrayType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.ArrayType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ArrayType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.ArrayType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ArrayType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt()", "public com.github.javaparser.ast.stmt.BreakStmt()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt(java.lang.String)", "public com.github.javaparser.ast.stmt.BreakStmt(java.lang.String)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.BreakStmt(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.BreakStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.stmt.BreakStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.BreakStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.SimpleName>", "com.github.javaparser.ast.stmt.BreakStmt.getLabel()", "public java.util.Optional<com.github.javaparser.ast.expr.SimpleName> getLabel()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.setLabel(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.BreakStmt setLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.BreakStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.removeLabel()", "public com.github.javaparser.ast.stmt.BreakStmt removeLabel()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.clone()", "public com.github.javaparser.ast.stmt.BreakStmt clone()"], ["com.github.javaparser.metamodel.BreakStmtMetaModel", "com.github.javaparser.ast.stmt.BreakStmt.getMetaModel()", "public com.github.javaparser.metamodel.BreakStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.ast.stmt.BreakStmt.replaceLabel(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.stmt.BreakStmt replaceLabel(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.stmt.BreakStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.BreakStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.BreakStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.BreakStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.BreakStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.BreakStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt()", "public com.github.javaparser.ast.stmt.ExpressionStmt()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExpressionStmt(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExpressionStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ExpressionStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ExpressionStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ExpressionStmt.getExpression()", "public com.github.javaparser.ast.expr.Expression getExpression()"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExpressionStmt setExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ExpressionStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()", "public com.github.javaparser.ast.stmt.ExpressionStmt clone()"], ["com.github.javaparser.metamodel.ExpressionStmtMetaModel", "com.github.javaparser.ast.stmt.ExpressionStmt.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.ExpressionStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ExpressionStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ExpressionStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ExpressionStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExpressionStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt()", "public com.github.javaparser.ast.stmt.TryStmt()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>, com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.stmt.TryStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.TryStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>", "com.github.javaparser.ast.stmt.TryStmt.getCatchClauses()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause> getCatchClauses()"], ["java.util.Optional<com.github.javaparser.ast.stmt.BlockStmt>", "com.github.javaparser.ast.stmt.TryStmt.getFinallyBlock()", "public java.util.Optional<com.github.javaparser.ast.stmt.BlockStmt> getFinallyBlock()"], ["java.util.Optional<com.github.javaparser.ast.stmt.BlockStmt>", "com.github.javaparser.ast.stmt.TryStmt.getTryBlock()", "public java.util.Optional<com.github.javaparser.ast.stmt.BlockStmt> getTryBlock()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>", "com.github.javaparser.ast.stmt.TryStmt.getResources()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr> getResources()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setCatchClauses(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>)", "public com.github.javaparser.ast.stmt.TryStmt setCatchClauses(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.CatchClause>)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setFinallyBlock(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt setFinallyBlock(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setTryBlock(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt setTryBlock(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.setResources(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>)", "public com.github.javaparser.ast.stmt.TryStmt setResources(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.stmt.TryStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.stmt.TryStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.removeFinallyBlock()", "public com.github.javaparser.ast.stmt.TryStmt removeFinallyBlock()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.removeTryBlock()", "public com.github.javaparser.ast.stmt.TryStmt removeTryBlock()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.clone()", "public com.github.javaparser.ast.stmt.TryStmt clone()"], ["com.github.javaparser.metamodel.TryStmtMetaModel", "com.github.javaparser.ast.stmt.TryStmt.getMetaModel()", "public com.github.javaparser.metamodel.TryStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.replaceFinallyBlock(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt replaceFinallyBlock(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.ast.stmt.TryStmt.replaceTryBlock(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.stmt.TryStmt replaceTryBlock(com.github.javaparser.ast.stmt.BlockStmt)"], ["boolean", "com.github.javaparser.ast.stmt.TryStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.TryStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.TryStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.TryStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.TryStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.TryStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt()", "public com.github.javaparser.ast.stmt.IfStmt()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.IfStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.IfStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.stmt.Statement, com.github.javaparser.ast.stmt.Statement)"], ["<R, A> R", "com.github.javaparser.ast.stmt.IfStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.IfStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.IfStmt.getCondition()", "public com.github.javaparser.ast.expr.Expression getCondition()"], ["java.util.Optional<com.github.javaparser.ast.stmt.Statement>", "com.github.javaparser.ast.stmt.IfStmt.getElseStmt()", "public java.util.Optional<com.github.javaparser.ast.stmt.Statement> getElseStmt()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.IfStmt.getThenStmt()", "public com.github.javaparser.ast.stmt.Statement getThenStmt()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.IfStmt setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.setElseStmt(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.IfStmt setElseStmt(com.github.javaparser.ast.stmt.Statement)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.setThenStmt(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.IfStmt setThenStmt(com.github.javaparser.ast.stmt.Statement)"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.removeElseStmt()", "public com.github.javaparser.ast.stmt.IfStmt removeElseStmt()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.hasThenBlock()", "public boolean hasThenBlock()"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.hasElseBlock()", "public boolean hasElseBlock()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.clone()", "public com.github.javaparser.ast.stmt.IfStmt clone()"], ["com.github.javaparser.metamodel.IfStmtMetaModel", "com.github.javaparser.ast.stmt.IfStmt.getMetaModel()", "public com.github.javaparser.metamodel.IfStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.ast.stmt.IfStmt.replaceElseStmt(com.github.javaparser.ast.stmt.Statement)", "public com.github.javaparser.ast.stmt.IfStmt replaceElseStmt(com.github.javaparser.ast.stmt.Statement)"], ["boolean", "com.github.javaparser.ast.stmt.IfStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.IfStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.IfStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.IfStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.IfStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.IfStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.IfStmt.setCondition(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setCondition(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt()", "public com.github.javaparser.ast.stmt.SwitchEntryStmt()"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public com.github.javaparser.ast.stmt.SwitchEntryStmt(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public com.github.javaparser.ast.stmt.SwitchEntryStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.SwitchEntryStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.SwitchEntryStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.SwitchEntryStmt.getLabel()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getLabel()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>", "com.github.javaparser.ast.stmt.SwitchEntryStmt.getStatements()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement> getStatements()"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt.setLabel(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.SwitchEntryStmt setLabel(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt.setStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public com.github.javaparser.ast.stmt.SwitchEntryStmt setStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.stmt.SwitchEntryStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.stmt.SwitchEntryStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt.removeLabel()", "public com.github.javaparser.ast.stmt.SwitchEntryStmt removeLabel()"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt.clone()", "public com.github.javaparser.ast.stmt.SwitchEntryStmt clone()"], ["com.github.javaparser.metamodel.SwitchEntryStmtMetaModel", "com.github.javaparser.ast.stmt.SwitchEntryStmt.getMetaModel()", "public com.github.javaparser.metamodel.SwitchEntryStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.ast.stmt.SwitchEntryStmt.replaceLabel(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.SwitchEntryStmt replaceLabel(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.SwitchEntryStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.SwitchEntryStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.SwitchEntryStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.SwitchEntryStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SwitchEntryStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.SwitchEntryStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.SwitchEntryStmt.setStatements(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setStatements(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt()", "public com.github.javaparser.ast.stmt.BlockStmt()"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public com.github.javaparser.ast.stmt.BlockStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public com.github.javaparser.ast.stmt.BlockStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.BlockStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>", "com.github.javaparser.ast.stmt.BlockStmt.getStatements()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement> getStatements()"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt.setStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)", "public com.github.javaparser.ast.stmt.BlockStmt setStatements(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.stmt.BlockStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.stmt.BlockStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.stmt.BlockStmt.clone()", "public com.github.javaparser.ast.stmt.BlockStmt clone()"], ["com.github.javaparser.metamodel.BlockStmtMetaModel", "com.github.javaparser.ast.stmt.BlockStmt.getMetaModel()", "public com.github.javaparser.metamodel.BlockStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.BlockStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.BlockStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.BlockStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.BlockStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.BlockStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.BlockStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.BlockStmt.setStatements(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setStatements(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr()", "public com.github.javaparser.ast.expr.ThisExpr()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ThisExpr(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ThisExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.ThisExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ThisExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.ThisExpr.getClassExpr()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getClassExpr()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.setClassExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ThisExpr setClassExpr(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ThisExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.removeClassExpr()", "public com.github.javaparser.ast.expr.ThisExpr removeClassExpr()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.clone()", "public com.github.javaparser.ast.expr.ThisExpr clone()"], ["com.github.javaparser.metamodel.ThisExprMetaModel", "com.github.javaparser.ast.expr.ThisExpr.getMetaModel()", "public com.github.javaparser.metamodel.ThisExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.ThisExpr", "com.github.javaparser.ast.expr.ThisExpr.replaceClassExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ThisExpr replaceClassExpr(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ThisExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ThisExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ThisExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ThisExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ThisExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ThisExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr()", "public com.github.javaparser.ast.expr.LiteralExpr()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.expr.LiteralExpr(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.expr.LiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.LiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr()", "public com.github.javaparser.ast.expr.ArrayAccessExpr()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ArrayAccessExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ArrayAccessExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.ArrayAccessExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ArrayAccessExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayAccessExpr.getIndex()", "public com.github.javaparser.ast.expr.Expression getIndex()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayAccessExpr.getName()", "public com.github.javaparser.ast.expr.Expression getName()"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.setIndex(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ArrayAccessExpr setIndex(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.setName(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ArrayAccessExpr setName(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ArrayAccessExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ArrayAccessExpr", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()", "public com.github.javaparser.ast.expr.ArrayAccessExpr clone()"], ["com.github.javaparser.metamodel.ArrayAccessExprMetaModel", "com.github.javaparser.ast.expr.ArrayAccessExpr.getMetaModel()", "public com.github.javaparser.metamodel.ArrayAccessExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ArrayAccessExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ArrayAccessExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ArrayAccessExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ArrayAccessExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.NodeList", "com.github.javaparser.ast.NodeList()", "public com.github.javaparser.ast.NodeList()"], ["com.github.javaparser.ast.NodeList", "com.github.javaparser.ast.NodeList(com.github.javaparser.ast.Node)", "public com.github.javaparser.ast.NodeList(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.NodeList", "com.github.javaparser.ast.NodeList(com.github.javaparser.ast.NodeList<N>)", "public com.github.javaparser.ast.NodeList(com.github.javaparser.ast.NodeList<N>)"], ["boolean", "com.github.javaparser.ast.NodeList.add(N)", "public boolean add(N)"], ["boolean", "com.github.javaparser.ast.NodeList.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["<X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X>", "com.github.javaparser.ast.NodeList.nodeList(X...)", "public static <X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X> nodeList(X...)"], ["<X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X>", "com.github.javaparser.ast.NodeList.nodeList(java.util.Collection<X>)", "public static <X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X> nodeList(java.util.Collection<X>)"], ["<X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X>", "com.github.javaparser.ast.NodeList.nodeList(com.github.javaparser.ast.NodeList<X>)", "public static <X extends com.github.javaparser.ast.Node> com.github.javaparser.ast.NodeList<X> nodeList(com.github.javaparser.ast.NodeList<X>)"], ["boolean", "com.github.javaparser.ast.NodeList.contains(N)", "public boolean contains(N)"], ["int", "com.github.javaparser.ast.NodeList.size()", "public int size()"], ["N", "com.github.javaparser.ast.NodeList.get(int)", "public N get(int)"], ["java.util.Iterator<N>", "com.github.javaparser.ast.NodeList.iterator()", "public java.util.Iterator<N> iterator()"], ["N", "com.github.javaparser.ast.NodeList.set(int, N)", "public N set(int, N)"], ["N", "com.github.javaparser.ast.NodeList.remove(int)", "public N remove(int)"], ["boolean", "com.github.javaparser.ast.NodeList.isEmpty()", "public boolean isEmpty()"], ["void", "com.github.javaparser.ast.NodeList.sort(java.util.Comparator<? super N>)", "public void sort(java.util.Comparator<? super N>)"], ["void", "com.github.javaparser.ast.NodeList.addAll(com.github.javaparser.ast.NodeList<N>)", "public void addAll(com.github.javaparser.ast.NodeList<N>)"], ["void", "com.github.javaparser.ast.NodeList.add(int, N)", "public void add(int, N)"], ["java.util.Optional<com.github.javaparser.ast.Node>", "com.github.javaparser.ast.NodeList.getParentNode()", "public java.util.Optional<com.github.javaparser.ast.Node> getParentNode()"], ["com.github.javaparser.ast.NodeList<N>", "com.github.javaparser.ast.NodeList.setParentNode(com.github.javaparser.ast.Node)", "public com.github.javaparser.ast.NodeList<N> setParentNode(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.NodeList.getParentNodeForChildren()", "public com.github.javaparser.ast.Node getParentNodeForChildren()"], ["<R, A> R", "com.github.javaparser.ast.NodeList.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.NodeList.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["void", "com.github.javaparser.ast.NodeList.forEach(java.util.function.Consumer<? super N>)", "public void forEach(java.util.function.Consumer<? super N>)"], ["boolean", "com.github.javaparser.ast.NodeList.contains(java.lang.Object)", "public boolean contains(java.lang.Object)"], ["java.lang.Object[]", "com.github.javaparser.ast.NodeList.toArray()", "public java.lang.Object[] toArray()"], ["<T> T[]", "com.github.javaparser.ast.NodeList.toArray(T[])", "public <T> T[] toArray(T[])"], ["boolean", "com.github.javaparser.ast.NodeList.remove(java.lang.Object)", "public boolean remove(java.lang.Object)"], ["boolean", "com.github.javaparser.ast.NodeList.containsAll(java.util.Collection<?>)", "public boolean containsAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.ast.NodeList.addAll(java.util.Collection<? extends N>)", "public boolean addAll(java.util.Collection<? extends N>)"], ["boolean", "com.github.javaparser.ast.NodeList.addAll(int, java.util.Collection<? extends N>)", "public boolean addAll(int, java.util.Collection<? extends N>)"], ["boolean", "com.github.javaparser.ast.NodeList.removeAll(java.util.Collection<?>)", "public boolean removeAll(java.util.Collection<?>)"], ["boolean", "com.github.javaparser.ast.NodeList.retainAll(java.util.Collection<?>)", "public boolean retainAll(java.util.Collection<?>)"], ["void", "com.github.javaparser.ast.NodeList.replaceAll(java.util.function.UnaryOperator<N>)", "public void replaceAll(java.util.function.UnaryOperator<N>)"], ["boolean", "com.github.javaparser.ast.NodeList.removeIf(java.util.function.Predicate<? super N>)", "public boolean removeIf(java.util.function.Predicate<? super N>)"], ["void", "com.github.javaparser.ast.NodeList.clear()", "public void clear()"], ["boolean", "com.github.javaparser.ast.NodeList.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.ast.NodeList.hashCode()", "public int hashCode()"], ["int", "com.github.javaparser.ast.NodeList.indexOf(java.lang.Object)", "public int indexOf(java.lang.Object)"], ["int", "com.github.javaparser.ast.NodeList.lastIndexOf(java.lang.Object)", "public int lastIndexOf(java.lang.Object)"], ["java.util.ListIterator<N>", "com.github.javaparser.ast.NodeList.listIterator()", "public java.util.ListIterator<N> listIterator()"], ["java.util.ListIterator<N>", "com.github.javaparser.ast.NodeList.listIterator(int)", "public java.util.ListIterator<N> listIterator(int)"], ["java.util.stream.Stream<N>", "com.github.javaparser.ast.NodeList.parallelStream()", "public java.util.stream.Stream<N> parallelStream()"], ["java.util.List<N>", "com.github.javaparser.ast.NodeList.subList(int, int)", "public java.util.List<N> subList(int, int)"], ["java.util.Spliterator<N>", "com.github.javaparser.ast.NodeList.spliterator()", "public java.util.Spliterator<N> spliterator()"], ["void", "com.github.javaparser.ast.NodeList.unregister(com.github.javaparser.ast.observer.AstObserver)", "public void unregister(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.NodeList.register(com.github.javaparser.ast.observer.AstObserver)", "public void register(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.NodeList.isRegistered(com.github.javaparser.ast.observer.AstObserver)", "public boolean isRegistered(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.NodeList.replace(N, N)", "public boolean replace(N, N)"], ["boolean", "com.github.javaparser.ast.NodeList.isNonEmpty()", "public boolean isNonEmpty()"], ["void", "com.github.javaparser.ast.NodeList.ifNonEmpty(java.util.function.Consumer<? super com.github.javaparser.ast.NodeList<N>>)", "public void ifNonEmpty(java.util.function.Consumer<? super com.github.javaparser.ast.NodeList<N>>)"], ["<T extends com.github.javaparser.ast.Node> java.util.stream.Collector<T, com.github.javaparser.ast.NodeList<T>, com.github.javaparser.ast.NodeList<T>>", "com.github.javaparser.ast.NodeList.toNodeList()", "public static <T extends com.github.javaparser.ast.Node> java.util.stream.Collector<T, com.github.javaparser.ast.NodeList<T>, com.github.javaparser.ast.NodeList<T>> toNodeList()"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.remove(int)", "public java.lang.Object remove(int)"], ["void", "com.github.javaparser.ast.NodeList.add(int, java.lang.Object)", "public void add(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.set(int, java.lang.Object)", "public java.lang.Object set(int, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.get(int)", "public java.lang.Object get(int)"], ["boolean", "com.github.javaparser.ast.NodeList.add(java.lang.Object)", "public boolean add(java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.NodeList.setParentNode(com.github.javaparser.ast.Node)", "public java.lang.Object setParentNode(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration()", "public com.github.javaparser.ParserConfiguration()"], ["boolean", "com.github.javaparser.ParserConfiguration.isAttributeComments()", "public boolean isAttributeComments()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setAttributeComments(boolean)", "public com.github.javaparser.ParserConfiguration setAttributeComments(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isDoNotAssignCommentsPrecedingEmptyLines()", "public boolean isDoNotAssignCommentsPrecedingEmptyLines()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setDoNotAssignCommentsPrecedingEmptyLines(boolean)", "public com.github.javaparser.ParserConfiguration setDoNotAssignCommentsPrecedingEmptyLines(boolean)"], ["boolean", "com.github.javaparser.ParserConfiguration.isDoNotConsiderAnnotationsAsNodeStartForCodeAttribution()", "public boolean isDoNotConsiderAnnotationsAsNodeStartForCodeAttribution()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setDoNotConsiderAnnotationsAsNodeStartForCodeAttribution(boolean)", "public com.github.javaparser.ParserConfiguration setDoNotConsiderAnnotationsAsNodeStartForCodeAttribution(boolean)"], ["int", "com.github.javaparser.ParserConfiguration.getTabSize()", "public int getTabSize()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setTabSize(int)", "public com.github.javaparser.ParserConfiguration setTabSize(int)"], ["com.github.javaparser.ast.validator.Validator", "com.github.javaparser.ParserConfiguration.getValidator()", "public com.github.javaparser.ast.validator.Validator getValidator()"], ["com.github.javaparser.ParserConfiguration", "com.github.javaparser.ParserConfiguration.setValidator(com.github.javaparser.ast.validator.Validator)", "public com.github.javaparser.ParserConfiguration setValidator(com.github.javaparser.ast.validator.Validator)"], ["com.github.javaparser.StreamProvider", "com.github.javaparser.StreamProvider(java.io.Reader)", "public com.github.javaparser.StreamProvider(java.io.Reader)"], ["com.github.javaparser.StreamProvider", "com.github.javaparser.StreamProvider(java.io.InputStream)", "public com.github.javaparser.StreamProvider(java.io.InputStream) throws java.io.IOException"], ["com.github.javaparser.StreamProvider", "com.github.javaparser.StreamProvider(java.io.InputStream, java.lang.String)", "public com.github.javaparser.StreamProvider(java.io.InputStream, java.lang.String) throws java.io.IOException"], ["int", "com.github.javaparser.StreamProvider.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["void", "com.github.javaparser.StreamProvider.close()", "public void close() throws java.io.IOException"], ["com.github.javaparser.StringProvider", "com.github.javaparser.StringProvider(java.lang.String)", "public com.github.javaparser.StringProvider(java.lang.String)"], ["int", "com.github.javaparser.StringProvider.read(char[], int, int)", "public int read(char[], int, int) throws java.io.IOException"], ["void", "com.github.javaparser.StringProvider.close()", "public void close() throws java.io.IOException"], ["com.github.javaparser.Problem", "com.github.javaparser.Problem(java.lang.String, com.github.javaparser.TokenRange, java.lang.Throwable)", "public com.github.javaparser.Problem(java.lang.String, com.github.javaparser.TokenRange, java.lang.Throwable)"], ["java.lang.String", "com.github.javaparser.Problem.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.github.javaparser.Problem.getMessage()", "public java.lang.String getMessage()"], ["java.lang.String", "com.github.javaparser.Problem.getVerboseMessage()", "public java.lang.String getVerboseMessage()"], ["java.util.Optional<com.github.javaparser.TokenRange>", "com.github.javaparser.Problem.getLocation()", "public java.util.Optional<com.github.javaparser.TokenRange> getLocation()"], ["java.util.Optional<com.github.javaparser.TokenRange>", "com.github.javaparser.Problem.getRange()", "public java.util.Optional<com.github.javaparser.TokenRange> getRange()"], ["java.util.Optional<java.lang.Throwable>", "com.github.javaparser.Problem.getCause()", "public java.util.Optional<java.lang.Throwable> getCause()"], ["<N> java.util.Optional<N>", "com.github.javaparser.HasParentNode.getAncestorOfType(java.lang.Class<N>)", "public default <N> java.util.Optional<N> getAncestorOfType(java.lang.Class<N>)"], ["default", "com.github.javaparser.HasParentNode.void setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)", "public default void setAsParentNodeOf(java.util.List<? extends com.github.javaparser.ast.Node>)"], ["default", "com.github.javaparser.HasParentNode.void setAsParentNodeOf(com.github.javaparser.ast.Node)", "public default void setAsParentNodeOf(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException(com.github.javaparser.Token, int[][], java.lang.String[])", "public com.github.javaparser.ParseException(com.github.javaparser.Token, int[][], java.lang.String[])"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException(com.github.javaparser.Token, int[][], java.lang.String[], java.lang.String)", "public com.github.javaparser.ParseException(com.github.javaparser.Token, int[][], java.lang.String[], java.lang.String)"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException()", "public com.github.javaparser.ParseException()"], ["com.github.javaparser.ParseException", "com.github.javaparser.ParseException(java.lang.String)", "public com.github.javaparser.ParseException(java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc(com.github.javaparser.javadoc.description.JavadocDescription)", "public com.github.javaparser.javadoc.Javadoc(com.github.javaparser.javadoc.description.JavadocDescription)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(com.github.javaparser.javadoc.JavadocBlockTag)", "public com.github.javaparser.javadoc.Javadoc addBlockTag(com.github.javaparser.javadoc.JavadocBlockTag)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(java.lang.String, java.lang.String)", "public com.github.javaparser.javadoc.Javadoc addBlockTag(java.lang.String, java.lang.String)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.javadoc.Javadoc.addBlockTag(java.lang.String)", "public com.github.javaparser.javadoc.Javadoc addBlockTag(java.lang.String)"], ["java.lang.String", "com.github.javaparser.javadoc.Javadoc.toText()", "public java.lang.String toText()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.javadoc.Javadoc.toComment(java.lang.String)", "public com.github.javaparser.ast.comments.JavadocComment toComment(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocDescription", "com.github.javaparser.javadoc.Javadoc.getDescription()", "public com.github.javaparser.javadoc.description.JavadocDescription getDescription()"], ["java.util.List<com.github.javaparser.javadoc.JavadocBlockTag>", "com.github.javaparser.javadoc.Javadoc.getBlockTags()", "public java.util.List<com.github.javaparser.javadoc.JavadocBlockTag> getBlockTags()"], ["boolean", "com.github.javaparser.javadoc.Javadoc.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.Javadoc.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.Javadoc.toString()", "public java.lang.String toString()"], ["java.lang.String", "com.github.javaparser.TokenMgrException.getMessage()", "public java.lang.String getMessage()"], ["com.github.javaparser.TokenMgrException", "com.github.javaparser.TokenMgrException()", "public com.github.javaparser.TokenMgrException()"], ["com.github.javaparser.TokenMgrException", "com.github.javaparser.TokenMgrException(java.lang.String, int)", "public com.github.javaparser.TokenMgrException(java.lang.String, int)"], ["com.github.javaparser.TokenMgrException", "com.github.javaparser.TokenMgrException(boolean, int, int, int, java.lang.String, int, int)", "public com.github.javaparser.TokenMgrException(boolean, int, int, int, java.lang.String, int, int)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator.calculatePropertyChange(com.github.javaparser.printer.lexicalpreservation.NodeText, com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public void calculatePropertyChange(com.github.javaparser.printer.lexicalpreservation.NodeText, com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["com.github.javaparser.printer.lexicalpreservation.Difference$Kept", "com.github.javaparser.printer.lexicalpreservation.Difference$Kept(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public com.github.javaparser.printer.lexicalpreservation.Difference$Kept(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Difference$Kept.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Kept.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.Difference$Kept.hashCode()", "public int hashCode()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmElement", "com.github.javaparser.printer.lexicalpreservation.Difference$Kept.getElement()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmElement getElement()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.Difference$Kept.isAdded()", "public boolean isAdded()"], ["com.github.javaparser.printer.lexicalpreservation.TokenTextElement", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.newLine()", "public static com.github.javaparser.printer.lexicalpreservation.TokenTextElement newLine()"], ["int", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.getTokenKind()", "public int getTokenKind()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isWhiteSpace()", "public boolean isWhiteSpace()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isSpaceOrTab()", "public boolean isSpaceOrTab()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isComment()", "public boolean isComment()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isNewline()", "public boolean isNewline()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TokenTextElement.isChildOfClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)", "public boolean isChildOfClass(java.lang.Class<? extends com.github.javaparser.ast.Node>)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$EmptyIterator.hasNext()", "public boolean hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$EmptyIterator.next()", "public E next()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.getChild()", "public com.github.javaparser.ast.Node getChild()"], ["com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild(com.github.javaparser.ast.Node)", "public com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.printer.lexicalpreservation.LexicalDifferenceCalculator$CsmChild.hashCode()", "public int hashCode()"], ["com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator(java.util.Iterator<E>, com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator$Provider<E>)", "public com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator(java.util.Iterator<E>, com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator$Provider<E>)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator.hasNext()", "public boolean hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator.next()", "public E next()"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$CascadingIterator.remove()", "public void remove()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmIndent", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmIndent()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent.hashCode()", "public int hashCode()"], ["boolean", "com.github.javaparser.printer.concretesyntaxmodel.CsmIndent.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference.getProperty()", "public com.github.javaparser.ast.observer.ObservableProperty getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference", "com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference(com.github.javaparser.ast.observer.ObservableProperty)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmSingleReference.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute.getProperty()", "public com.github.javaparser.ast.observer.ObservableProperty getProperty()"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute(com.github.javaparser.ast.observer.ObservableProperty)", "public com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute(com.github.javaparser.ast.observer.ObservableProperty)"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["int", "com.github.javaparser.printer.concretesyntaxmodel.CsmAttribute.getTokenType(com.github.javaparser.ast.Node, java.lang.String)", "public int getTokenType(com.github.javaparser.ast.Node, java.lang.String)"], ["com.github.javaparser.printer.concretesyntaxmodel.CsmNone", "com.github.javaparser.printer.concretesyntaxmodel.CsmNone()", "public com.github.javaparser.printer.concretesyntaxmodel.CsmNone()"], ["void", "com.github.javaparser.printer.concretesyntaxmodel.CsmNone.prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)", "public void prettyPrint(com.github.javaparser.ast.Node, com.github.javaparser.printer.SourcePrinter)"], ["boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.equals(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public static boolean equals(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.CompilationUnit, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.PackageDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.TypeParameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.comments.LineComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.comments.BlockComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.EnumDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.EnumConstantDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.AnnotationDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.FieldDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.ConstructorDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.MethodDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.Parameter, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.body.InitializerDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.comments.JavadocComment, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.PrimitiveType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.ArrayType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.ArrayCreationLevel, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.IntersectionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.UnionType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.VoidType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.WildcardType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.type.UnknownType, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ArrayAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ArrayCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.AssignExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.BinaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.CastExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ClassExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ConditionalExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.EnclosedExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.FieldAccessExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.InstanceOfExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.StringLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.CharLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.NullLiteralExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.MethodCallExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.NameExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ObjectCreationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.ThisExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.SuperExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.UnaryExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.MemberValuePair, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.AssertStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.BlockStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.LabeledStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.EmptyStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ExpressionStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.SwitchStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.BreakStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ReturnStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.IfStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.WhileStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ContinueStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.DoStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ForeachStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ForStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.ThrowStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.SynchronizedStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.TryStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.CatchClause, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.LambdaExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.MethodReferenceExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.expr.TypeExpr, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.ImportDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.modules.ModuleDeclaration, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.modules.ModuleExportsStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.modules.ModuleUsesStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.modules.ModuleOpensStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Boolean", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, com.github.javaparser.ast.visitor.Visitable)", "public java.lang.Boolean visit(com.github.javaparser.ast.stmt.UnparsableStmt, com.github.javaparser.ast.visitor.Visitable)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.EqualsVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.modules.ModuleExportsStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt()", "public com.github.javaparser.ast.modules.ModuleExportsStmt()"], ["com.github.javaparser.ast.modules.ModuleExportsStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)", "public com.github.javaparser.ast.modules.ModuleExportsStmt(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleExportsStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)", "public com.github.javaparser.ast.modules.ModuleExportsStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleExportsStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleExportsStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleExportsStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleExportsStmt.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["com.github.javaparser.ast.modules.ModuleExportsStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.modules.ModuleExportsStmt setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>", "com.github.javaparser.ast.modules.ModuleExportsStmt.getModuleNames()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name> getModuleNames()"], ["com.github.javaparser.ast.modules.ModuleExportsStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt.setModuleNames(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)", "public com.github.javaparser.ast.modules.ModuleExportsStmt setModuleNames(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.modules.ModuleExportsStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["com.github.javaparser.ast.modules.ModuleExportsStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt.clone()", "public com.github.javaparser.ast.modules.ModuleExportsStmt clone()"], ["com.github.javaparser.metamodel.ModuleExportsStmtMetaModel", "com.github.javaparser.ast.modules.ModuleExportsStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleExportsStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleExportsStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ModuleStmtMetaModel", "com.github.javaparser.ast.modules.ModuleExportsStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleExportsStmt.clone()", "public com.github.javaparser.ast.modules.ModuleStmt clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleExportsStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleExportsStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleExportsStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleExportsStmt.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleStmt()", "public com.github.javaparser.ast.modules.ModuleStmt()"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleStmt(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.modules.ModuleStmt(com.github.javaparser.TokenRange)"], ["boolean", "com.github.javaparser.ast.modules.ModuleStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleStmt.clone()", "public com.github.javaparser.ast.modules.ModuleStmt clone()"], ["com.github.javaparser.metamodel.ModuleStmtMetaModel", "com.github.javaparser.ast.modules.ModuleStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt()", "public com.github.javaparser.ast.modules.ModuleRequiresStmt()"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.modules.ModuleRequiresStmt(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.modules.ModuleRequiresStmt(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.expr.Name)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleRequiresStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleRequiresStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.modules.ModuleRequiresStmt.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.modules.ModuleRequiresStmt setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleRequiresStmt.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.modules.ModuleRequiresStmt setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresStmt.isTransitive()", "public boolean isTransitive()"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt.setTransitive(boolean)", "public com.github.javaparser.ast.modules.ModuleRequiresStmt setTransitive(boolean)"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.modules.ModuleRequiresStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt.clone()", "public com.github.javaparser.ast.modules.ModuleRequiresStmt clone()"], ["com.github.javaparser.metamodel.ModuleRequiresStmtMetaModel", "com.github.javaparser.ast.modules.ModuleRequiresStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleRequiresStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleRequiresStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ModuleStmtMetaModel", "com.github.javaparser.ast.modules.ModuleRequiresStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleRequiresStmt.clone()", "public com.github.javaparser.ast.modules.ModuleStmt clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleRequiresStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleRequiresStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleRequiresStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleRequiresStmt.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleRequiresStmt.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.AccessSpecifier[]", "com.github.javaparser.ast.AccessSpecifier.values()", "public static com.github.javaparser.ast.AccessSpecifier[] values()"], ["com.github.javaparser.ast.AccessSpecifier", "com.github.javaparser.ast.AccessSpecifier.valueOf(java.lang.String)", "public static com.github.javaparser.ast.AccessSpecifier valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.AccessSpecifier.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration(com.github.javaparser.ast.expr.Name, boolean, boolean)", "public com.github.javaparser.ast.ImportDeclaration(com.github.javaparser.ast.expr.Name, boolean, boolean)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, boolean, boolean)", "public com.github.javaparser.ast.ImportDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, boolean, boolean)"], ["<R, A> R", "com.github.javaparser.ast.ImportDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.ImportDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.ImportDeclaration.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.isAsterisk()", "public boolean isAsterisk()"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.isStatic()", "public boolean isStatic()"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.setAsterisk(boolean)", "public com.github.javaparser.ast.ImportDeclaration setAsterisk(boolean)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.ImportDeclaration setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.setStatic(boolean)", "public com.github.javaparser.ast.ImportDeclaration setStatic(boolean)"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.ast.ImportDeclaration.clone()", "public com.github.javaparser.ast.ImportDeclaration clone()"], ["com.github.javaparser.metamodel.ImportDeclarationMetaModel", "com.github.javaparser.ast.ImportDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.ImportDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.ImportDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.ImportDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ImportDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.ImportDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ImportDeclaration.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.observer.ObservableProperty$Type[]", "com.github.javaparser.ast.observer.ObservableProperty$Type.values()", "public static com.github.javaparser.ast.observer.ObservableProperty$Type[] values()"], ["com.github.javaparser.ast.observer.ObservableProperty$Type", "com.github.javaparser.ast.observer.ObservableProperty$Type.valueOf(java.lang.String)", "public static com.github.javaparser.ast.observer.ObservableProperty$Type valueOf(java.lang.String)"], ["com.github.javaparser.ast.observer.ObservableProperty[]", "com.github.javaparser.ast.observer.ObservableProperty.values()", "public static com.github.javaparser.ast.observer.ObservableProperty[] values()"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.ast.observer.ObservableProperty.valueOf(java.lang.String)", "public static com.github.javaparser.ast.observer.ObservableProperty valueOf(java.lang.String)"], ["com.github.javaparser.ast.observer.ObservableProperty", "com.github.javaparser.ast.observer.ObservableProperty.fromCamelCaseName(java.lang.String)", "public static com.github.javaparser.ast.observer.ObservableProperty fromCamelCaseName(java.lang.String)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isDerived()", "public boolean isDerived()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isAboutNodes()", "public boolean isAboutNodes()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isAboutValues()", "public boolean isAboutValues()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isMultiple()", "public boolean isMultiple()"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isSingle()", "public boolean isSingle()"], ["java.lang.String", "com.github.javaparser.ast.observer.ObservableProperty.camelCaseName()", "public java.lang.String camelCaseName()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsSingleReference(com.github.javaparser.ast.Node)", "public com.github.javaparser.ast.Node getValueAsSingleReference(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.NodeList<? extends com.github.javaparser.ast.Node>", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsMultipleReference(com.github.javaparser.ast.Node)", "public com.github.javaparser.ast.NodeList<? extends com.github.javaparser.ast.Node> getValueAsMultipleReference(com.github.javaparser.ast.Node)"], ["java.util.Collection<?>", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsCollection(com.github.javaparser.ast.Node)", "public java.util.Collection<?> getValueAsCollection(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsStringAttribute(com.github.javaparser.ast.Node)", "public java.lang.String getValueAsStringAttribute(com.github.javaparser.ast.Node)"], ["java.lang.Boolean", "com.github.javaparser.ast.observer.ObservableProperty.getValueAsBooleanAttribute(com.github.javaparser.ast.Node)", "public java.lang.Boolean getValueAsBooleanAttribute(com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.ast.observer.ObservableProperty.getRawValue(com.github.javaparser.ast.Node)", "public java.lang.Object getRawValue(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isNull(com.github.javaparser.ast.Node)", "public boolean isNull(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isNullOrNotPresent(com.github.javaparser.ast.Node)", "public boolean isNullOrNotPresent(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.observer.ObservableProperty.isNullOrEmpty(com.github.javaparser.ast.Node)", "public boolean isNullOrEmpty(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.validator.Java1_4Validator", "com.github.javaparser.ast.validator.Java1_4Validator()", "public com.github.javaparser.ast.validator.Java1_4Validator()"], ["com.github.javaparser.ast.validator.chunks.CommonValidators", "com.github.javaparser.ast.validator.chunks.CommonValidators()", "public com.github.javaparser.ast.validator.chunks.CommonValidators()"], ["com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator()", "public com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator()"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.UnderscoreKeywordValidator.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["default", "com.github.javaparser.ast.validator.TypedValidator.void accept(java.lang.Object, java.lang.Object)", "public default void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.NoProblemsValidator", "com.github.javaparser.ast.validator.NoProblemsValidator()", "public com.github.javaparser.ast.validator.NoProblemsValidator()"], ["void", "com.github.javaparser.ast.validator.NoProblemsValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)", "public void accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.NoProblemsValidator.accept(java.lang.Object, java.lang.Object)", "public void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.Java1_0Validator", "com.github.javaparser.ast.validator.Java1_0Validator()", "public com.github.javaparser.ast.validator.Java1_0Validator()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr()", "public com.github.javaparser.ast.expr.AssignExpr()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.AssignExpr$Operator)", "public com.github.javaparser.ast.expr.AssignExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.AssignExpr$Operator)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.AssignExpr$Operator)", "public com.github.javaparser.ast.expr.AssignExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.AssignExpr$Operator)"], ["<R, A> R", "com.github.javaparser.ast.expr.AssignExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.AssignExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.AssignExpr$Operator", "com.github.javaparser.ast.expr.AssignExpr.getOperator()", "public com.github.javaparser.ast.expr.AssignExpr$Operator getOperator()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AssignExpr.getTarget()", "public com.github.javaparser.ast.expr.Expression getTarget()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AssignExpr.getValue()", "public com.github.javaparser.ast.expr.Expression getValue()"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.setOperator(com.github.javaparser.ast.expr.AssignExpr$Operator)", "public com.github.javaparser.ast.expr.AssignExpr setOperator(com.github.javaparser.ast.expr.AssignExpr$Operator)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.setTarget(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.AssignExpr setTarget(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.setValue(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.AssignExpr setValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.AssignExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.AssignExpr", "com.github.javaparser.ast.expr.AssignExpr.clone()", "public com.github.javaparser.ast.expr.AssignExpr clone()"], ["com.github.javaparser.metamodel.AssignExprMetaModel", "com.github.javaparser.ast.expr.AssignExpr.getMetaModel()", "public com.github.javaparser.metamodel.AssignExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.AssignExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.AssignExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AssignExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.AssignExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.AssignExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.AssignExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr()", "public com.github.javaparser.ast.expr.CastExpr()"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.CastExpr(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.CastExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.CastExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.CastExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.CastExpr.getExpression()", "public com.github.javaparser.ast.expr.Expression getExpression()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.CastExpr.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.CastExpr setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.CastExpr setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.expr.CastExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.CastExpr", "com.github.javaparser.ast.expr.CastExpr.clone()", "public com.github.javaparser.ast.expr.CastExpr clone()"], ["com.github.javaparser.metamodel.CastExprMetaModel", "com.github.javaparser.ast.expr.CastExpr.getMetaModel()", "public com.github.javaparser.metamodel.CastExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.CastExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.CastExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.CastExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.CastExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CastExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.CastExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CastExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CastExpr.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr()", "public com.github.javaparser.ast.expr.FieldAccessExpr()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.ast.expr.Expression, java.lang.String)", "public com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.ast.expr.Expression, java.lang.String)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.FieldAccessExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.expr.FieldAccessExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.FieldAccessExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.FieldAccessExpr.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.FieldAccessExpr setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.FieldAccessExpr.getField()", "public com.github.javaparser.ast.expr.SimpleName getField()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.FieldAccessExpr.getScope()", "public com.github.javaparser.ast.expr.Expression getScope()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setField(java.lang.String)", "public com.github.javaparser.ast.expr.FieldAccessExpr setField(java.lang.String)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setFieldExpr(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.FieldAccessExpr setFieldExpr(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.FieldAccessExpr setScope(com.github.javaparser.ast.expr.Expression)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>>", "com.github.javaparser.ast.expr.FieldAccessExpr.getTypeArguments()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>> getTypeArguments()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.expr.FieldAccessExpr setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.FieldAccessExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["com.github.javaparser.ast.expr.FieldAccessExpr", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()", "public com.github.javaparser.ast.expr.FieldAccessExpr clone()"], ["com.github.javaparser.metamodel.FieldAccessExprMetaModel", "com.github.javaparser.ast.expr.FieldAccessExpr.getMetaModel()", "public com.github.javaparser.metamodel.FieldAccessExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.FieldAccessExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.FieldAccessExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.FieldAccessExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.FieldAccessExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.FieldAccessExpr.setTypeArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr()", "public com.github.javaparser.ast.expr.SuperExpr()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SuperExpr(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SuperExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.SuperExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SuperExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.SuperExpr.getClassExpr()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getClassExpr()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.setClassExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SuperExpr setClassExpr(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.SuperExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.removeClassExpr()", "public com.github.javaparser.ast.expr.SuperExpr removeClassExpr()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.clone()", "public com.github.javaparser.ast.expr.SuperExpr clone()"], ["com.github.javaparser.metamodel.SuperExprMetaModel", "com.github.javaparser.ast.expr.SuperExpr.getMetaModel()", "public com.github.javaparser.metamodel.SuperExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.SuperExpr", "com.github.javaparser.ast.expr.SuperExpr.replaceClassExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.SuperExpr replaceClassExpr(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.SuperExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.SuperExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.SuperExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SuperExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SuperExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SuperExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr()", "public com.github.javaparser.ast.expr.InstanceOfExpr()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.expr.InstanceOfExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ReferenceType)"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.expr.InstanceOfExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ReferenceType)"], ["<R, A> R", "com.github.javaparser.ast.expr.InstanceOfExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.InstanceOfExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.InstanceOfExpr.getExpression()", "public com.github.javaparser.ast.expr.Expression getExpression()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.expr.InstanceOfExpr.getType()", "public com.github.javaparser.ast.type.ReferenceType getType()"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.InstanceOfExpr setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.setType(com.github.javaparser.ast.type.ReferenceType)", "public com.github.javaparser.ast.expr.InstanceOfExpr setType(com.github.javaparser.ast.type.ReferenceType)"], ["boolean", "com.github.javaparser.ast.expr.InstanceOfExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.InstanceOfExpr", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()", "public com.github.javaparser.ast.expr.InstanceOfExpr clone()"], ["com.github.javaparser.metamodel.InstanceOfExprMetaModel", "com.github.javaparser.ast.expr.InstanceOfExpr.getMetaModel()", "public com.github.javaparser.metamodel.InstanceOfExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.InstanceOfExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.InstanceOfExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.InstanceOfExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.InstanceOfExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.InstanceOfExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.InstanceOfExpr.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.InstanceOfExpr.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr()", "public com.github.javaparser.ast.expr.BinaryExpr()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.BinaryExpr$Operator)", "public com.github.javaparser.ast.expr.BinaryExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.BinaryExpr$Operator)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.BinaryExpr$Operator)", "public com.github.javaparser.ast.expr.BinaryExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.BinaryExpr$Operator)"], ["<R, A> R", "com.github.javaparser.ast.expr.BinaryExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.BinaryExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BinaryExpr.getLeft()", "public com.github.javaparser.ast.expr.Expression getLeft()"], ["com.github.javaparser.ast.expr.BinaryExpr$Operator", "com.github.javaparser.ast.expr.BinaryExpr.getOperator()", "public com.github.javaparser.ast.expr.BinaryExpr$Operator getOperator()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BinaryExpr.getRight()", "public com.github.javaparser.ast.expr.Expression getRight()"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.setLeft(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.BinaryExpr setLeft(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.setOperator(com.github.javaparser.ast.expr.BinaryExpr$Operator)", "public com.github.javaparser.ast.expr.BinaryExpr setOperator(com.github.javaparser.ast.expr.BinaryExpr$Operator)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.setRight(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.BinaryExpr setRight(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.BinaryExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.BinaryExpr", "com.github.javaparser.ast.expr.BinaryExpr.clone()", "public com.github.javaparser.ast.expr.BinaryExpr clone()"], ["com.github.javaparser.metamodel.BinaryExprMetaModel", "com.github.javaparser.ast.expr.BinaryExpr.getMetaModel()", "public com.github.javaparser.metamodel.BinaryExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.BinaryExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.BinaryExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.BinaryExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.BinaryExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.BinaryExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.BinaryExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr()", "public com.github.javaparser.ast.expr.ArrayInitializerExpr()"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.ArrayInitializerExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.ArrayInitializerExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["<R, A> R", "com.github.javaparser.ast.expr.ArrayInitializerExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ArrayInitializerExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getValues()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getValues()"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr.setValues(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.ArrayInitializerExpr setValues(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.ArrayInitializerExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()", "public com.github.javaparser.ast.expr.ArrayInitializerExpr clone()"], ["com.github.javaparser.metamodel.ArrayInitializerExprMetaModel", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getMetaModel()", "public com.github.javaparser.metamodel.ArrayInitializerExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ArrayInitializerExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ArrayInitializerExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ArrayInitializerExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr()", "public com.github.javaparser.ast.expr.DoubleLiteralExpr()"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr(java.lang.String)", "public com.github.javaparser.ast.expr.DoubleLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.DoubleLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr(double)", "public com.github.javaparser.ast.expr.DoubleLiteralExpr(double)"], ["<R, A> R", "com.github.javaparser.ast.expr.DoubleLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.DoubleLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.DoubleLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["double", "com.github.javaparser.ast.expr.DoubleLiteralExpr.asDouble()", "public double asDouble()"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.setDouble(double)", "public com.github.javaparser.ast.expr.DoubleLiteralExpr setDouble(double)"], ["com.github.javaparser.ast.expr.DoubleLiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()", "public com.github.javaparser.ast.expr.DoubleLiteralExpr clone()"], ["com.github.javaparser.metamodel.DoubleLiteralExprMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.DoubleLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.DoubleLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralStringValueExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralStringValueExpr clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.DoubleLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.DoubleLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr()", "public com.github.javaparser.ast.expr.CharLiteralExpr()"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr(java.lang.String)", "public com.github.javaparser.ast.expr.CharLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr(char)", "public com.github.javaparser.ast.expr.CharLiteralExpr(char)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.CharLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.escape(java.lang.String)", "public static com.github.javaparser.ast.expr.CharLiteralExpr escape(java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.CharLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.CharLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.CharLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["char", "com.github.javaparser.ast.expr.CharLiteralExpr.asChar()", "public char asChar()"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.setChar(char)", "public com.github.javaparser.ast.expr.CharLiteralExpr setChar(char)"], ["com.github.javaparser.ast.expr.CharLiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()", "public com.github.javaparser.ast.expr.CharLiteralExpr clone()"], ["com.github.javaparser.metamodel.CharLiteralExprMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.CharLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.CharLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralStringValueExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralStringValueExpr clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.CharLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.CharLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr()", "public com.github.javaparser.ast.expr.IntegerLiteralExpr()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr(java.lang.String)", "public com.github.javaparser.ast.expr.IntegerLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.IntegerLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr(int)", "public com.github.javaparser.ast.expr.IntegerLiteralExpr(int)"], ["<R, A> R", "com.github.javaparser.ast.expr.IntegerLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.IntegerLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.IntegerLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["int", "com.github.javaparser.ast.expr.IntegerLiteralExpr.asInt()", "public int asInt()"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.setInt(int)", "public com.github.javaparser.ast.expr.IntegerLiteralExpr setInt(int)"], ["com.github.javaparser.ast.expr.IntegerLiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()", "public com.github.javaparser.ast.expr.IntegerLiteralExpr clone()"], ["com.github.javaparser.metamodel.IntegerLiteralExprMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.IntegerLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.IntegerLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralStringValueExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralStringValueExpr clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.IntegerLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.IntegerLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr()", "public com.github.javaparser.ast.expr.NameExpr()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr(java.lang.String)", "public com.github.javaparser.ast.expr.NameExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.NameExpr(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.NameExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.expr.NameExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.NameExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.NameExpr.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.NameExpr setName(com.github.javaparser.ast.expr.SimpleName)"], ["boolean", "com.github.javaparser.ast.expr.NameExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.NameExpr", "com.github.javaparser.ast.expr.NameExpr.clone()", "public com.github.javaparser.ast.expr.NameExpr clone()"], ["com.github.javaparser.metamodel.NameExprMetaModel", "com.github.javaparser.ast.expr.NameExpr.getMetaModel()", "public com.github.javaparser.metamodel.NameExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.NameExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.NameExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.NameExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.NameExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NameExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.NameExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NameExpr.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr(java.lang.String)", "public com.github.javaparser.ast.expr.LiteralStringValueExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.LiteralStringValueExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getValue()", "public java.lang.String getValue()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.setValue(java.lang.String)", "public com.github.javaparser.ast.expr.LiteralStringValueExpr setValue(java.lang.String)"], ["boolean", "com.github.javaparser.ast.expr.LiteralStringValueExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()", "public com.github.javaparser.ast.expr.LiteralStringValueExpr clone()"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralStringValueExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LiteralStringValueExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LiteralStringValueExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LiteralStringValueExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr()", "public com.github.javaparser.ast.expr.NormalAnnotationExpr()"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)", "public com.github.javaparser.ast.expr.NormalAnnotationExpr(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)", "public com.github.javaparser.ast.expr.NormalAnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)"], ["<R, A> R", "com.github.javaparser.ast.expr.NormalAnnotationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.NormalAnnotationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getPairs()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair> getPairs()"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.setPairs(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)", "public com.github.javaparser.ast.expr.NormalAnnotationExpr setPairs(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.addPair(java.lang.String, java.lang.String)", "public com.github.javaparser.ast.expr.NormalAnnotationExpr addPair(java.lang.String, java.lang.String)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.addPair(java.lang.String, com.github.javaparser.ast.expr.NameExpr)", "public com.github.javaparser.ast.expr.NormalAnnotationExpr addPair(java.lang.String, com.github.javaparser.ast.expr.NameExpr)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.NormalAnnotationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.NormalAnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.NormalAnnotationExpr clone()"], ["com.github.javaparser.metamodel.NormalAnnotationExprMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NormalAnnotationExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.NormalAnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.AnnotationExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.AnnotationExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.NormalAnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.NormalAnnotationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr()", "public com.github.javaparser.ast.expr.EnclosedExpr()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.EnclosedExpr(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.EnclosedExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.EnclosedExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.EnclosedExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.EnclosedExpr.getInner()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getInner()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.setInner(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.EnclosedExpr setInner(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.EnclosedExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.removeInner()", "public com.github.javaparser.ast.expr.EnclosedExpr removeInner()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.clone()", "public com.github.javaparser.ast.expr.EnclosedExpr clone()"], ["com.github.javaparser.metamodel.EnclosedExprMetaModel", "com.github.javaparser.ast.expr.EnclosedExpr.getMetaModel()", "public com.github.javaparser.metamodel.EnclosedExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.EnclosedExpr", "com.github.javaparser.ast.expr.EnclosedExpr.replaceInner(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.EnclosedExpr replaceInner(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.EnclosedExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.EnclosedExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.EnclosedExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.EnclosedExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.EnclosedExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.EnclosedExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node$Parsedness[]", "com.github.javaparser.ast.Node$Parsedness.values()", "public static com.github.javaparser.ast.Node$Parsedness[] values()"], ["com.github.javaparser.ast.Node$Parsedness", "com.github.javaparser.ast.Node$Parsedness.valueOf(java.lang.String)", "public static com.github.javaparser.ast.Node$Parsedness valueOf(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.com.github.javaparser.ast.type.ClassOrInterfaceType getImplementedTypes(int)", "public default com.github.javaparser.ast.type.ClassOrInterfaceType getImplementedTypes(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N setImplementedType(int, com.github.javaparser.ast.type.ClassOrInterfaceType)", "public default N setImplementedType(int, com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplementedType(com.github.javaparser.ast.type.ClassOrInterfaceType)", "public default N addImplementedType(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplements(java.lang.String)", "public default N addImplements(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplements(java.lang.Class<?>)", "public default N addImplements(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplementedType(java.lang.String)", "public default N addImplementedType(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithImplements.N addImplementedType(java.lang.Class<?>)", "public default N addImplementedType(java.lang.Class<?>)"], ["java.util.Optional<com.github.javaparser.Position>", "com.github.javaparser.ast.nodeTypes.NodeWithRange.getBegin()", "public default java.util.Optional<com.github.javaparser.Position> getBegin()"], ["java.util.Optional<com.github.javaparser.Position>", "com.github.javaparser.ast.nodeTypes.NodeWithRange.getEnd()", "public default java.util.Optional<com.github.javaparser.Position> getEnd()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithRange.boolean containsWithin(com.github.javaparser.ast.Node)", "public default boolean containsWithin(com.github.javaparser.ast.Node)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithRange.boolean isPositionedAfter(com.github.javaparser.Position)", "public default boolean isPositionedAfter(com.github.javaparser.Position)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithRange.boolean isPositionedBefore(com.github.javaparser.Position)", "public default boolean isPositionedBefore(com.github.javaparser.Position)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.com.github.javaparser.ast.expr.Expression getArgument(int)", "public default com.github.javaparser.ast.expr.Expression getArgument(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.N addArgument(java.lang.String)", "public default N addArgument(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.N addArgument(com.github.javaparser.ast.expr.Expression)", "public default N addArgument(com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithArguments.N setArgument(int, com.github.javaparser.ast.expr.Expression)", "public default N setArgument(int, com.github.javaparser.ast.expr.Expression)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.java.lang.String getId()", "public default java.lang.String getId()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithIdentifier.N setId(java.lang.String)", "public default N setId(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithName.N setName(java.lang.String)", "public default N setName(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithName.java.lang.String getNameAsString()", "public default java.lang.String getNameAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithOptionalLabel.T setLabel(java.lang.String)", "public default T setLabel(java.lang.String)"], ["java.util.Optional<java.lang.String>", "com.github.javaparser.ast.nodeTypes.NodeWithOptionalLabel.getLabelAsString()", "public default java.util.Optional<java.lang.String> getLabelAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter getParameter(int)", "public default com.github.javaparser.ast.body.Parameter getParameter(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N setParameter(int, com.github.javaparser.ast.body.Parameter)", "public default N setParameter(int, com.github.javaparser.ast.body.Parameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(com.github.javaparser.ast.type.Type, java.lang.String)", "public default N addParameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(java.lang.Class<?>, java.lang.String)", "public default N addParameter(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(java.lang.String, java.lang.String)", "public default N addParameter(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.N addParameter(com.github.javaparser.ast.body.Parameter)", "public default N addParameter(com.github.javaparser.ast.body.Parameter)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(com.github.javaparser.ast.type.Type, java.lang.String)", "public default com.github.javaparser.ast.body.Parameter addAndGetParameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(java.lang.Class<?>, java.lang.String)", "public default com.github.javaparser.ast.body.Parameter addAndGetParameter(java.lang.Class<?>, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(java.lang.String, java.lang.String)", "public default com.github.javaparser.ast.body.Parameter addAndGetParameter(java.lang.String, java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.com.github.javaparser.ast.body.Parameter addAndGetParameter(com.github.javaparser.ast.body.Parameter)", "public default com.github.javaparser.ast.body.Parameter addAndGetParameter(com.github.javaparser.ast.body.Parameter)"], ["java.util.Optional<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.getParameterByName(java.lang.String)", "public default java.util.Optional<com.github.javaparser.ast.body.Parameter> getParameterByName(java.lang.String)"], ["java.util.Optional<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.getParameterByType(java.lang.String)", "public default java.util.Optional<com.github.javaparser.ast.body.Parameter> getParameterByType(java.lang.String)"], ["java.util.Optional<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.getParameterByType(java.lang.Class<?>)", "public default java.util.Optional<com.github.javaparser.ast.body.Parameter> getParameterByType(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.boolean hasParametersOfType(java.lang.String...)", "public default boolean hasParametersOfType(java.lang.String...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithParameters.boolean hasParametersOfType(java.lang.Class<?>...)", "public default boolean hasParametersOfType(java.lang.Class<?>...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithBlockStmt.com.github.javaparser.ast.stmt.BlockStmt createBody()", "public default com.github.javaparser.ast.stmt.BlockStmt createBody()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier.boolean isAbstract()", "public default boolean isAbstract()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithAbstractModifier.N setAbstract(boolean)", "public default N setAbstract(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier.boolean isFinal()", "public default boolean isFinal()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithFinalModifier.N setFinal(boolean)", "public default N setFinal(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.boolean isProtected()", "public default boolean isProtected()"], ["default", "com.github.javaparser.ast.nodeTypes.modifiers.NodeWithProtectedModifier.N setProtected(boolean)", "public default N setProtected(boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N addModifier(com.github.javaparser.ast.Modifier...)", "public default N addModifier(com.github.javaparser.ast.Modifier...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N removeModifier(com.github.javaparser.ast.Modifier...)", "public default N removeModifier(com.github.javaparser.ast.Modifier...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithModifiers.N setModifier(com.github.javaparser.ast.Modifier, boolean)", "public default N setModifier(com.github.javaparser.ast.Modifier, boolean)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithBody.com.github.javaparser.ast.stmt.BlockStmt createBlockStatementAsBody()", "public default com.github.javaparser.ast.stmt.BlockStmt createBlockStatementAsBody()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.boolean isUsingDiamondOperator()", "public default boolean isUsingDiamondOperator()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.N setDiamondOperator()", "public default N setDiamondOperator()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.N removeTypeArguments()", "public default N removeTypeArguments()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithTypeArguments.N setTypeArguments(com.github.javaparser.ast.type.Type...)", "public default N setTypeArguments(com.github.javaparser.ast.type.Type...)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.body.VariableDeclarator getVariable(int)", "public default com.github.javaparser.ast.body.VariableDeclarator getVariable(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.N setVariable(int, com.github.javaparser.ast.body.VariableDeclarator)", "public default N setVariable(int, com.github.javaparser.ast.body.VariableDeclarator)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.N addVariable(com.github.javaparser.ast.body.VariableDeclarator)", "public default N addVariable(com.github.javaparser.ast.body.VariableDeclarator)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.type.Type getCommonType()", "public default com.github.javaparser.ast.type.Type getCommonType()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.type.Type getElementType()", "public default com.github.javaparser.ast.type.Type getElementType()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.com.github.javaparser.ast.type.Type getMaximumCommonType()", "public default com.github.javaparser.ast.type.Type getMaximumCommonType()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.nodeTypes.NodeWithVariables.calculateMaximumCommonType(java.util.List<com.github.javaparser.ast.type.Type>)", "public static com.github.javaparser.ast.type.Type calculateMaximumCommonType(java.util.List<com.github.javaparser.ast.type.Type>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithOptionalBlockStmt.com.github.javaparser.ast.stmt.BlockStmt createBody()", "public default com.github.javaparser.ast.stmt.BlockStmt createBody()"], ["java.util.Optional<com.github.javaparser.ast.comments.JavadocComment>", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.getJavadocComment()", "public default java.util.Optional<com.github.javaparser.ast.comments.JavadocComment> getJavadocComment()"], ["java.util.Optional<com.github.javaparser.javadoc.Javadoc>", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.getJavadoc()", "public default java.util.Optional<com.github.javaparser.javadoc.Javadoc> getJavadoc()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(java.lang.String)", "public default N setJavadocComment(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(com.github.javaparser.ast.comments.JavadocComment)", "public default N setJavadocComment(com.github.javaparser.ast.comments.JavadocComment)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.N setJavadocComment(java.lang.String, com.github.javaparser.javadoc.Javadoc)", "public default N setJavadocComment(java.lang.String, com.github.javaparser.javadoc.Javadoc)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.boolean removeJavaDocComment()", "public default boolean removeJavaDocComment()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithJavadoc.boolean hasJavaDocComment()", "public default boolean hasJavaDocComment()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.com.github.javaparser.ast.type.ClassOrInterfaceType getExtendedTypes(int)", "public default com.github.javaparser.ast.type.ClassOrInterfaceType getExtendedTypes(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N setExtendedType(int, com.github.javaparser.ast.type.ClassOrInterfaceType)", "public default N setExtendedType(int, com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtendedType(com.github.javaparser.ast.type.ClassOrInterfaceType)", "public default N addExtendedType(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtends(java.lang.Class<?>)", "public default N addExtends(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtends(java.lang.String)", "public default N addExtends(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtendedType(java.lang.Class<?>)", "public default N addExtendedType(java.lang.Class<?>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExtends.N addExtendedType(java.lang.String)", "public default N addExtendedType(java.lang.String)"], ["int", "com.github.javaparser.utils.StringEscapeUtils$OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)", "public int translate(java.lang.CharSequence, int, java.io.Writer) throws java.io.IOException"], ["com.github.javaparser.TokenRange", "com.github.javaparser.TokenRange(com.github.javaparser.JavaToken, com.github.javaparser.JavaToken)", "public com.github.javaparser.TokenRange(com.github.javaparser.JavaToken, com.github.javaparser.JavaToken)"], ["com.github.javaparser.JavaToken", "com.github.javaparser.TokenRange.getBegin()", "public com.github.javaparser.JavaToken getBegin()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.TokenRange.getEnd()", "public com.github.javaparser.JavaToken getEnd()"], ["com.github.javaparser.Range", "com.github.javaparser.TokenRange.toRange()", "public com.github.javaparser.Range toRange()"], ["com.github.javaparser.TokenRange", "com.github.javaparser.TokenRange.withBegin(com.github.javaparser.JavaToken)", "public com.github.javaparser.TokenRange withBegin(com.github.javaparser.JavaToken)"], ["com.github.javaparser.TokenRange", "com.github.javaparser.TokenRange.withEnd(com.github.javaparser.JavaToken)", "public com.github.javaparser.TokenRange withEnd(com.github.javaparser.JavaToken)"], ["java.lang.String", "com.github.javaparser.TokenRange.toString()", "public java.lang.String toString()"], ["void", "com.github.javaparser.JavaCharStream.setTabSize(int)", "public void setTabSize(int)"], ["int", "com.github.javaparser.JavaCharStream.getTabSize(int)", "public int getTabSize(int)"], ["char", "com.github.javaparser.JavaCharStream.BeginToken()", "public char BeginToken() throws java.io.IOException"], ["char", "com.github.javaparser.JavaCharStream.readChar()", "public char readChar() throws java.io.IOException"], ["int", "com.github.javaparser.JavaCharStream.getColumn()", "public int getColumn()"], ["int", "com.github.javaparser.JavaCharStream.getLine()", "public int getLine()"], ["int", "com.github.javaparser.JavaCharStream.getEndColumn()", "public int getEndColumn()"], ["int", "com.github.javaparser.JavaCharStream.getEndLine()", "public int getEndLine()"], ["int", "com.github.javaparser.JavaCharStream.getBeginColumn()", "public int getBeginColumn()"], ["int", "com.github.javaparser.JavaCharStream.getBeginLine()", "public int getBeginLine()"], ["void", "com.github.javaparser.JavaCharStream.backup(int)", "public void backup(int)"], ["com.github.javaparser.JavaCharStream", "com.github.javaparser.JavaCharStream(com.github.javaparser.Provider, int, int, int)", "public com.github.javaparser.JavaCharStream(com.github.javaparser.Provider, int, int, int)"], ["com.github.javaparser.JavaCharStream", "com.github.javaparser.JavaCharStream(com.github.javaparser.Provider, int, int)", "public com.github.javaparser.JavaCharStream(com.github.javaparser.Provider, int, int)"], ["com.github.javaparser.JavaCharStream", "com.github.javaparser.JavaCharStream(com.github.javaparser.Provider)", "public com.github.javaparser.JavaCharStream(com.github.javaparser.Provider)"], ["void", "com.github.javaparser.JavaCharStream.ReInit(com.github.javaparser.Provider, int, int, int)", "public void ReInit(com.github.javaparser.Provider, int, int, int)"], ["void", "com.github.javaparser.JavaCharStream.ReInit(com.github.javaparser.Provider, int, int)", "public void ReInit(com.github.javaparser.Provider, int, int)"], ["void", "com.github.javaparser.JavaCharStream.ReInit(com.github.javaparser.Provider)", "public void ReInit(com.github.javaparser.Provider)"], ["java.lang.String", "com.github.javaparser.JavaCharStream.GetImage()", "public java.lang.String GetImage()"], ["char[]", "com.github.javaparser.JavaCharStream.GetSuffix(int)", "public char[] GetSuffix(int)"], ["void", "com.github.javaparser.JavaCharStream.Done()", "public void Done()"], ["void", "com.github.javaparser.JavaCharStream.adjustBeginLineColumn(int, int)", "public void adjustBeginLineColumn(int, int)"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$1.remove()", "public void remove()"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$1.concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public void concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$1.concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)", "public void concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter$1.concreteListReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void concreteListReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.XmlPrinter", "com.github.javaparser.printer.XmlPrinter(boolean)", "public com.github.javaparser.printer.XmlPrinter(boolean)"], ["java.lang.String", "com.github.javaparser.printer.XmlPrinter.output(com.github.javaparser.ast.Node)", "public java.lang.String output(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.XmlPrinter.output(com.github.javaparser.ast.Node, java.lang.String, int, java.lang.StringBuilder)", "public void output(com.github.javaparser.ast.Node, java.lang.String, int, java.lang.StringBuilder)"], ["com.github.javaparser.printer.JsonPrinter", "com.github.javaparser.printer.JsonPrinter(boolean)", "public com.github.javaparser.printer.JsonPrinter(boolean)"], ["java.lang.String", "com.github.javaparser.printer.JsonPrinter.output(com.github.javaparser.ast.Node)", "public java.lang.String output(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.printer.JsonPrinter.output(com.github.javaparser.ast.Node, java.lang.String, int)", "public java.lang.String output(com.github.javaparser.ast.Node, java.lang.String, int)"], ["com.github.javaparser.printer.PrettyPrinter", "com.github.javaparser.printer.PrettyPrinter()", "public com.github.javaparser.printer.PrettyPrinter()"], ["com.github.javaparser.printer.PrettyPrinter", "com.github.javaparser.printer.PrettyPrinter(com.github.javaparser.printer.PrettyPrinterConfiguration)", "public com.github.javaparser.printer.PrettyPrinter(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["java.lang.String", "com.github.javaparser.printer.PrettyPrinter.print(com.github.javaparser.ast.Node)", "public java.lang.String print(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.printer.ConcreteSyntaxModel$JavadocContentTokenCalculator.calculate(com.github.javaparser.ast.Node)", "public java.lang.String calculate(com.github.javaparser.ast.Node)"], ["int", "com.github.javaparser.printer.ConcreteSyntaxModel$JavadocContentTokenCalculator.hashCode()", "public int hashCode()"], ["boolean", "com.github.javaparser.printer.ConcreteSyntaxModel$JavadocContentTokenCalculator.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.github.javaparser.printer.AsciiArtPrinter", "com.github.javaparser.printer.AsciiArtPrinter()", "public com.github.javaparser.printer.AsciiArtPrinter()"], ["java.lang.String", "com.github.javaparser.printer.AsciiArtPrinter.output(com.github.javaparser.ast.Node)", "public java.lang.String output(com.github.javaparser.ast.Node)"], ["com.github.javaparser.Position", "com.github.javaparser.Position(int, int)", "public com.github.javaparser.Position(int, int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.pos(int, int)", "public static com.github.javaparser.Position pos(int, int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.withColumn(int)", "public com.github.javaparser.Position withColumn(int)"], ["com.github.javaparser.Position", "com.github.javaparser.Position.withLine(int)", "public com.github.javaparser.Position withLine(int)"], ["boolean", "com.github.javaparser.Position.valid()", "public boolean valid()"], ["boolean", "com.github.javaparser.Position.invalid()", "public boolean invalid()"], ["com.github.javaparser.Position", "com.github.javaparser.Position.orIfInvalid(com.github.javaparser.Position)", "public com.github.javaparser.Position orIfInvalid(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Position.isAfter(com.github.javaparser.Position)", "public boolean isAfter(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Position.isBefore(com.github.javaparser.Position)", "public boolean isBefore(com.github.javaparser.Position)"], ["int", "com.github.javaparser.Position.compareTo(com.github.javaparser.Position)", "public int compareTo(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Position.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.Position.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.Position.toString()", "public java.lang.String toString()"], ["int", "com.github.javaparser.Position.compareTo(java.lang.Object)", "public int compareTo(java.lang.Object)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.CallableDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.body.CallableDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.body.CallableDeclaration", "com.github.javaparser.ast.body.CallableDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public com.github.javaparser.ast.body.CallableDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.body.CallableDeclaration.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public T setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.CallableDeclaration.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public T setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.ast.body.CallableDeclaration.getParameters()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter> getParameters()"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)", "public T setParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>", "com.github.javaparser.ast.body.CallableDeclaration.getThrownExceptions()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType> getThrownExceptions()"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)", "public T setThrownExceptions(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ReferenceType>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>", "com.github.javaparser.ast.body.CallableDeclaration.getTypeParameters()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter> getTypeParameters()"], ["T", "com.github.javaparser.ast.body.CallableDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)", "public T setTypeParameters(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.TypeParameter>)"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration.getDeclarationAsString(boolean, boolean)", "public java.lang.String getDeclarationAsString(boolean, boolean)"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration.getDeclarationAsString()", "public java.lang.String getDeclarationAsString()"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.CallableDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.CallableDeclaration$Signature", "com.github.javaparser.ast.body.CallableDeclaration.getSignature()", "public com.github.javaparser.ast.body.CallableDeclaration$Signature getSignature()"], ["com.github.javaparser.ast.body.CallableDeclaration<?>", "com.github.javaparser.ast.body.CallableDeclaration.clone()", "public com.github.javaparser.ast.body.CallableDeclaration<?> clone()"], ["com.github.javaparser.metamodel.CallableDeclarationMetaModel", "com.github.javaparser.ast.body.CallableDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.CallableDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.CallableDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.CallableDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.CallableDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.CallableDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setThrownExceptions(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setThrownExceptions(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.CallableDeclaration.setTypeParameters(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeParameters(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter()", "public com.github.javaparser.ast.body.Parameter()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.type.Type, java.lang.String)", "public com.github.javaparser.ast.body.Parameter(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.Parameter(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.Parameter(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.Parameter(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName)"], ["<R, A> R", "com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.Parameter.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.Parameter.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["boolean", "com.github.javaparser.ast.body.Parameter.isVarArgs()", "public boolean isVarArgs()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.body.Parameter setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setVarArgs(boolean)", "public com.github.javaparser.ast.body.Parameter setVarArgs(boolean)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.body.Parameter.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.Parameter.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.body.Parameter.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.body.Parameter setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.Parameter setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.body.Parameter setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.Parameter.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.Parameter.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.body.Parameter.getVarArgsAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getVarArgsAnnotations()"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.setVarArgsAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.body.Parameter setVarArgsAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.ast.body.Parameter.clone()", "public com.github.javaparser.ast.body.Parameter clone()"], ["com.github.javaparser.metamodel.ParameterMetaModel", "com.github.javaparser.ast.body.Parameter.getMetaModel()", "public com.github.javaparser.metamodel.ParameterMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.Parameter.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.Parameter.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.Parameter.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.Parameter.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration()", "public com.github.javaparser.ast.body.EnumDeclaration()"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", "public com.github.javaparser.ast.body.EnumDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.EnumDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.EnumDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.EnumDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.EnumDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>", "com.github.javaparser.ast.body.EnumDeclaration.getEntries()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration> getEntries()"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.getEntry(int)", "public com.github.javaparser.ast.body.EnumConstantDeclaration getEntry(int)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.setEntry(int, com.github.javaparser.ast.body.EnumConstantDeclaration)", "public com.github.javaparser.ast.body.EnumDeclaration setEntry(int, com.github.javaparser.ast.body.EnumConstantDeclaration)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.addEntry(com.github.javaparser.ast.body.EnumConstantDeclaration)", "public com.github.javaparser.ast.body.EnumDeclaration addEntry(com.github.javaparser.ast.body.EnumConstantDeclaration)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.ast.body.EnumDeclaration.getImplementedTypes()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> getImplementedTypes()"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>)", "public com.github.javaparser.ast.body.EnumDeclaration setEntries(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.EnumConstantDeclaration>)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)", "public com.github.javaparser.ast.body.EnumDeclaration setImplementedTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>)"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.addEnumConstant(java.lang.String)", "public com.github.javaparser.ast.body.EnumConstantDeclaration addEnumConstant(java.lang.String)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.EnumDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.EnumDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.clone()", "public com.github.javaparser.ast.body.EnumDeclaration clone()"], ["com.github.javaparser.metamodel.EnumDeclarationMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.EnumDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.EnumDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.TypeDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.clone()", "public com.github.javaparser.ast.body.TypeDeclaration clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.EnumDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.EnumDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.EnumDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.EnumDeclaration.setImplementedTypes(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setImplementedTypes(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration()", "public com.github.javaparser.ast.body.TypeDeclaration()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", "public com.github.javaparser.ast.body.TypeDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.TypeDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.TypeDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.TypeDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.addMember(com.github.javaparser.ast.body.BodyDeclaration<?>)", "public T addMember(com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>", "com.github.javaparser.ast.body.TypeDeclaration.getMembers()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>> getMembers()"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.body.TypeDeclaration.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.setMembers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public T setMembers(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public T setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["T", "com.github.javaparser.ast.body.TypeDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public T setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.TypeDeclaration.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.TypeDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.isTopLevelType()", "public boolean isTopLevelType()"], ["java.util.List<com.github.javaparser.ast.body.CallableDeclaration<?>>", "com.github.javaparser.ast.body.TypeDeclaration.getCallablesWithSignature(com.github.javaparser.ast.body.CallableDeclaration$Signature)", "public java.util.List<com.github.javaparser.ast.body.CallableDeclaration<?>> getCallablesWithSignature(com.github.javaparser.ast.body.CallableDeclaration$Signature)"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.isNestedType()", "public boolean isNestedType()"], ["com.github.javaparser.ast.body.TypeDeclaration<?>", "com.github.javaparser.ast.body.TypeDeclaration.clone()", "public com.github.javaparser.ast.body.TypeDeclaration<?> clone()"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.TypeDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.TypeDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.TypeDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.TypeDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.TypeDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.TypeDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.TypeDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.setMembers(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setMembers(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.addMember(com.github.javaparser.ast.body.BodyDeclaration)", "public com.github.javaparser.ast.Node addMember(com.github.javaparser.ast.body.BodyDeclaration)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.TypeDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration()", "public com.github.javaparser.ast.body.FieldDeclaration()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.body.VariableDeclarator)", "public com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.body.VariableDeclarator)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.body.FieldDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String)", "public com.github.javaparser.ast.body.FieldDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.body.FieldDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.FieldDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.body.FieldDeclaration.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>", "com.github.javaparser.ast.body.FieldDeclaration.getVariables()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator> getVariables()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.body.FieldDeclaration setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setVariables(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.body.FieldDeclaration setVariables(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.createGetter()", "public com.github.javaparser.ast.body.MethodDeclaration createGetter()"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.createSetter()", "public com.github.javaparser.ast.body.MethodDeclaration createSetter()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.isTransient()", "public boolean isTransient()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.isVolatile()", "public boolean isVolatile()"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setTransient(boolean)", "public com.github.javaparser.ast.body.FieldDeclaration setTransient(boolean)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.setVolatile(boolean)", "public com.github.javaparser.ast.body.FieldDeclaration setVolatile(boolean)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.FieldDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.clone()", "public com.github.javaparser.ast.body.FieldDeclaration clone()"], ["com.github.javaparser.metamodel.FieldDeclarationMetaModel", "com.github.javaparser.ast.body.FieldDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.FieldDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.FieldDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.FieldDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.FieldDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.FieldDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.FieldDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.FieldDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.FieldDeclaration.setVariables(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setVariables(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.FieldDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration()", "public com.github.javaparser.ast.body.AnnotationDeclaration()"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)", "public com.github.javaparser.ast.body.AnnotationDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, java.lang.String)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.AnnotationDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.body.AnnotationDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.body.AnnotationDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.AnnotationDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.AnnotationDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.AnnotationDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()", "public com.github.javaparser.ast.body.AnnotationDeclaration clone()"], ["com.github.javaparser.metamodel.AnnotationDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.AnnotationDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.AnnotationDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.TypeDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.TypeDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()", "public com.github.javaparser.ast.body.TypeDeclaration clone()"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.AnnotationDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.AnnotationDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment()", "public com.github.javaparser.ast.comments.JavadocComment()"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment(java.lang.String)", "public com.github.javaparser.ast.comments.JavadocComment(java.lang.String)"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.comments.JavadocComment(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.comments.JavadocComment.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.comments.JavadocComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.javadoc.Javadoc", "com.github.javaparser.ast.comments.JavadocComment.parse()", "public com.github.javaparser.javadoc.Javadoc parse()"], ["boolean", "com.github.javaparser.ast.comments.JavadocComment.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.JavadocComment", "com.github.javaparser.ast.comments.JavadocComment.clone()", "public com.github.javaparser.ast.comments.JavadocComment clone()"], ["com.github.javaparser.metamodel.JavadocCommentMetaModel", "com.github.javaparser.ast.comments.JavadocComment.getMetaModel()", "public com.github.javaparser.metamodel.JavadocCommentMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.JavadocComment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.JavadocComment.getMetaModel()", "public com.github.javaparser.metamodel.CommentMetaModel getMetaModel()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.JavadocComment.clone()", "public com.github.javaparser.ast.comments.Comment clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.JavadocComment.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.JavadocComment.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.JavadocComment.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment()", "public com.github.javaparser.ast.comments.BlockComment()"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment(java.lang.String)", "public com.github.javaparser.ast.comments.BlockComment(java.lang.String)"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.comments.BlockComment(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.comments.BlockComment.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.comments.BlockComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.comments.BlockComment.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.BlockComment", "com.github.javaparser.ast.comments.BlockComment.clone()", "public com.github.javaparser.ast.comments.BlockComment clone()"], ["com.github.javaparser.metamodel.BlockCommentMetaModel", "com.github.javaparser.ast.comments.BlockComment.getMetaModel()", "public com.github.javaparser.metamodel.BlockCommentMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.BlockComment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.BlockComment.getMetaModel()", "public com.github.javaparser.metamodel.CommentMetaModel getMetaModel()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.BlockComment.clone()", "public com.github.javaparser.ast.comments.Comment clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.BlockComment.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.BlockComment.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.BlockComment.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment()", "public com.github.javaparser.ast.comments.LineComment()"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment(java.lang.String)", "public com.github.javaparser.ast.comments.LineComment(java.lang.String)"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.comments.LineComment(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.comments.LineComment.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.comments.LineComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.comments.LineComment.isLineComment()", "public boolean isLineComment()"], ["boolean", "com.github.javaparser.ast.comments.LineComment.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.LineComment.clone()", "public com.github.javaparser.ast.comments.LineComment clone()"], ["com.github.javaparser.metamodel.LineCommentMetaModel", "com.github.javaparser.ast.comments.LineComment.getMetaModel()", "public com.github.javaparser.metamodel.LineCommentMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.LineComment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.LineComment.getMetaModel()", "public com.github.javaparser.metamodel.CommentMetaModel getMetaModel()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.LineComment.clone()", "public com.github.javaparser.ast.comments.Comment clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.LineComment.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.LineComment.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.LineComment.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["int", "com.github.javaparser.ast.visitor.HashCodeVisitor.hashCode(com.github.javaparser.ast.Node)", "public static int hashCode(com.github.javaparser.ast.Node)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.ArrayType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.CompilationUnit, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.comments.LineComment, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.Name, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.NodeList, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.Parameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.UnionType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.UnknownType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.VoidType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.type.WildcardType, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Void)"], ["java.lang.Integer", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)", "public java.lang.Integer visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Void)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.HashCodeVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.GenericListVisitorAdapter", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter()", "public com.github.javaparser.ast.visitor.GenericListVisitorAdapter()"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.AnnotationDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ArrayAccessExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ArrayCreationExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, A)", "public java.util.List<R> visit(com.github.javaparser.ast.ArrayCreationLevel, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.ArrayType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.AssertStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.AssignExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.BinaryExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, A)", "public java.util.List<R> visit(com.github.javaparser.ast.comments.BlockComment, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.BlockStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.BreakStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.CastExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.CatchClause, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.CharLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ClassExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.ClassOrInterfaceType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, A)", "public java.util.List<R> visit(com.github.javaparser.ast.CompilationUnit, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ConditionalExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.ConstructorDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ContinueStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.DoStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.EmptyStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.EnclosedExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.EnumConstantDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.EnumDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ExpressionStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.FieldAccessExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.FieldDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ForStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForeachStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ForeachStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.IfStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.ImportDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.InitializerDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.InstanceOfExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.IntersectionType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, A)", "public java.util.List<R> visit(com.github.javaparser.ast.comments.JavadocComment, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.LabeledStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.LambdaExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, A)", "public java.util.List<R> visit(com.github.javaparser.ast.comments.LineComment, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.LongLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.MemberValuePair, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.MethodCallExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.MethodDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.MethodReferenceExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.NameExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.Name, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.NullLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ObjectCreationExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.PackageDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.Parameter, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.PrimitiveType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ReturnStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.SimpleName, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.StringLiteralExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.SuperExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.SwitchStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.SynchronizedStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.ThisExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.ThrowStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.TryStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.TypeExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.TypeParameter, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.UnaryExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.UnionType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.UnknownType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)", "public java.util.List<R> visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, A)", "public java.util.List<R> visit(com.github.javaparser.ast.body.VariableDeclarator, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.VoidType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.WhileStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, A)", "public java.util.List<R> visit(com.github.javaparser.ast.type.WildcardType, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.NodeList, A)", "public java.util.List<R> visit(com.github.javaparser.ast.NodeList, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)", "public java.util.List<R> visit(com.github.javaparser.ast.modules.ModuleDeclaration, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.modules.ModuleExportsStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.modules.ModuleOpensStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.modules.ModuleUsesStmt, A)"], ["java.util.List<R>", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)", "public java.util.List<R> visit(com.github.javaparser.ast.stmt.UnparsableStmt, A)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr()", "public com.github.javaparser.ast.expr.UnaryExpr()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.UnaryExpr$Operator)", "public com.github.javaparser.ast.expr.UnaryExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.UnaryExpr$Operator)"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.UnaryExpr$Operator)", "public com.github.javaparser.ast.expr.UnaryExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.expr.UnaryExpr$Operator)"], ["<R, A> R", "com.github.javaparser.ast.expr.UnaryExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.UnaryExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.UnaryExpr.getExpression()", "public com.github.javaparser.ast.expr.Expression getExpression()"], ["com.github.javaparser.ast.expr.UnaryExpr$Operator", "com.github.javaparser.ast.expr.UnaryExpr.getOperator()", "public com.github.javaparser.ast.expr.UnaryExpr$Operator getOperator()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.UnaryExpr setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.setOperator(com.github.javaparser.ast.expr.UnaryExpr$Operator)", "public com.github.javaparser.ast.expr.UnaryExpr setOperator(com.github.javaparser.ast.expr.UnaryExpr$Operator)"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.isPostfix()", "public boolean isPostfix()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.isPrefix()", "public boolean isPrefix()"], ["com.github.javaparser.ast.expr.UnaryExpr", "com.github.javaparser.ast.expr.UnaryExpr.clone()", "public com.github.javaparser.ast.expr.UnaryExpr clone()"], ["com.github.javaparser.metamodel.UnaryExprMetaModel", "com.github.javaparser.ast.expr.UnaryExpr.getMetaModel()", "public com.github.javaparser.metamodel.UnaryExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.UnaryExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.UnaryExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.UnaryExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.UnaryExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.UnaryExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.UnaryExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.UnaryExpr.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr()", "public com.github.javaparser.ast.expr.MethodReferenceExpr()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String)", "public com.github.javaparser.ast.expr.MethodReferenceExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String)", "public com.github.javaparser.ast.expr.MethodReferenceExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.MethodReferenceExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MethodReferenceExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MethodReferenceExpr.getScope()", "public com.github.javaparser.ast.expr.Expression getScope()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.setScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MethodReferenceExpr setScope(com.github.javaparser.ast.expr.Expression)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>>", "com.github.javaparser.ast.expr.MethodReferenceExpr.getTypeArguments()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>> getTypeArguments()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.expr.MethodReferenceExpr setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.lang.String", "com.github.javaparser.ast.expr.MethodReferenceExpr.getIdentifier()", "public java.lang.String getIdentifier()"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.setIdentifier(java.lang.String)", "public com.github.javaparser.ast.expr.MethodReferenceExpr setIdentifier(java.lang.String)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.MethodReferenceExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.MethodReferenceExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MethodReferenceExpr", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()", "public com.github.javaparser.ast.expr.MethodReferenceExpr clone()"], ["com.github.javaparser.metamodel.MethodReferenceExprMetaModel", "com.github.javaparser.ast.expr.MethodReferenceExpr.getMetaModel()", "public com.github.javaparser.metamodel.MethodReferenceExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MethodReferenceExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.MethodReferenceExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MethodReferenceExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MethodReferenceExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodReferenceExpr.setTypeArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MethodReferenceExpr.setIdentifier(java.lang.String)", "public com.github.javaparser.ast.Node setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr()", "public com.github.javaparser.ast.expr.VariableDeclarationExpr()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.type.Type, java.lang.String)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.type.Type, java.lang.String)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.body.VariableDeclarator)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.body.VariableDeclarator)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.Modifier...)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.body.VariableDeclarator, com.github.javaparser.ast.Modifier...)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["<R, A> R", "com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.VariableDeclarationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getVariables()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator> getVariables()"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)", "public com.github.javaparser.ast.expr.VariableDeclarationExpr setVariables(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.VariableDeclarator>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.VariableDeclarationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()", "public com.github.javaparser.ast.expr.VariableDeclarationExpr clone()"], ["com.github.javaparser.metamodel.VariableDeclarationExprMetaModel", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getMetaModel()", "public com.github.javaparser.metamodel.VariableDeclarationExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.VariableDeclarationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.VariableDeclarationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.VariableDeclarationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.VariableDeclarationExpr.setVariables(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setVariables(com.github.javaparser.ast.NodeList)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithExpression.N setExpression(java.lang.String)", "public default N setExpression(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.N setName(java.lang.String)", "public default N setName(java.lang.String)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithSimpleName.java.lang.String getNameAsString()", "public default java.lang.String getNameAsString()"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.com.github.javaparser.ast.type.ReferenceType getThrownException(int)", "public default com.github.javaparser.ast.type.ReferenceType getThrownException(int)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N addThrownException(com.github.javaparser.ast.type.ReferenceType)", "public default N addThrownException(com.github.javaparser.ast.type.ReferenceType)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.N addThrownException(java.lang.Class<? extends java.lang.Throwable>)", "public default N addThrownException(java.lang.Class<? extends java.lang.Throwable>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.boolean isThrown(java.lang.Class<? extends java.lang.Throwable>)", "public default boolean isThrown(java.lang.Class<? extends java.lang.Throwable>)"], ["default", "com.github.javaparser.ast.nodeTypes.NodeWithThrownExceptions.boolean isThrown(java.lang.String)", "public default boolean isThrown(java.lang.String)"], ["com.github.javaparser.utils.Utils", "com.github.javaparser.utils.Utils()", "public com.github.javaparser.utils.Utils()"], ["<T> java.util.List<T>", "com.github.javaparser.utils.Utils.ensureNotNull(java.util.List<T>)", "public static <T> java.util.List<T> ensureNotNull(java.util.List<T>)"], ["<E> boolean", "com.github.javaparser.utils.Utils.isNullOrEmpty(java.util.Collection<E>)", "public static <E> boolean isNullOrEmpty(java.util.Collection<E>)"], ["<T> T", "com.github.javaparser.utils.Utils.assertNotNull(T)", "public static <T> T assertNotNull(T)"], ["java.lang.String", "com.github.javaparser.utils.Utils.assertNonEmpty(java.lang.String)", "public static java.lang.String assertNonEmpty(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.escapeEndOfLines(java.lang.String)", "public static java.lang.String escapeEndOfLines(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.readerToString(java.io.Reader)", "public static java.lang.String readerToString(java.io.Reader) throws java.io.IOException"], ["<T> java.util.List<T>", "com.github.javaparser.utils.Utils.arrayToList(T[])", "public static <T> java.util.List<T> arrayToList(T[])"], ["java.lang.String", "com.github.javaparser.utils.Utils.toCamelCase(java.lang.String)", "public static java.lang.String toCamelCase(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.screamingToCamelCase(java.lang.String)", "public static java.lang.String screamingToCamelCase(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.camelCaseToScreaming(java.lang.String)", "public static java.lang.String camelCaseToScreaming(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.nextWord(java.lang.String)", "public static java.lang.String nextWord(java.lang.String)"], ["java.lang.StringBuilder", "com.github.javaparser.utils.Utils.indent(java.lang.StringBuilder, int)", "public static java.lang.StringBuilder indent(java.lang.StringBuilder, int)"], ["java.lang.String", "com.github.javaparser.utils.Utils.capitalize(java.lang.String)", "public static java.lang.String capitalize(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.Utils.decapitalize(java.lang.String)", "public static java.lang.String decapitalize(java.lang.String)"], ["boolean", "com.github.javaparser.utils.Utils.valueIsNullOrEmpty(java.lang.Object)", "public static boolean valueIsNullOrEmpty(java.lang.Object)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.getterName(java.lang.Class<?>, java.lang.String)", "public static java.lang.String getterName(java.lang.Class<?>, java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.getterToPropertyName(java.lang.String)", "public static java.lang.String getterToPropertyName(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.setterName(java.lang.String)", "public static java.lang.String setterName(java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.optionalOf(java.lang.String, boolean)", "public static java.lang.String optionalOf(java.lang.String, boolean)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.f(java.lang.String, java.lang.Object...)", "public static java.lang.String f(java.lang.String, java.lang.Object...)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.fileInPackageAbsolutePath(java.lang.String, java.lang.String, java.lang.String)", "public static java.nio.file.Path fileInPackageAbsolutePath(java.lang.String, java.lang.String, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.fileInPackageAbsolutePath(java.nio.file.Path, java.lang.String, java.lang.String)", "public static java.nio.file.Path fileInPackageAbsolutePath(java.nio.file.Path, java.lang.String, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.fileInPackageRelativePath(java.lang.String, java.lang.String)", "public static java.nio.file.Path fileInPackageRelativePath(java.lang.String, java.lang.String)"], ["java.lang.String", "com.github.javaparser.utils.CodeGenerationUtils.packageToPath(java.lang.String)", "public static java.lang.String packageToPath(java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.packageAbsolutePath(java.lang.String, java.lang.String)", "public static java.nio.file.Path packageAbsolutePath(java.lang.String, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.packageAbsolutePath(java.nio.file.Path, java.lang.String)", "public static java.nio.file.Path packageAbsolutePath(java.nio.file.Path, java.lang.String)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.classLoaderRoot(java.lang.Class<?>)", "public static java.nio.file.Path classLoaderRoot(java.lang.Class<?>)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.mavenModuleRoot(java.lang.Class<?>)", "public static java.nio.file.Path mavenModuleRoot(java.lang.Class<?>)"], ["java.nio.file.Path", "com.github.javaparser.utils.CodeGenerationUtils.subtractPaths(java.nio.file.Path, java.nio.file.Path)", "public static java.nio.file.Path subtractPaths(java.nio.file.Path, java.nio.file.Path)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot(java.nio.file.Path)", "public com.github.javaparser.utils.SourceRoot(java.nio.file.Path)"], ["java.util.List<com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>>", "com.github.javaparser.utils.SourceRoot.tryToParse(java.lang.String)", "public java.util.List<com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>> tryToParse(java.lang.String) throws java.io.IOException"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, com.github.javaparser.JavaParser, com.github.javaparser.utils.SourceRoot$Callback)", "public com.github.javaparser.utils.SourceRoot parse(java.lang.String, com.github.javaparser.JavaParser, com.github.javaparser.utils.SourceRoot$Callback) throws java.io.IOException"], ["java.util.List<com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>>", "com.github.javaparser.utils.SourceRoot.tryToParse()", "public java.util.List<com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>> tryToParse() throws java.io.IOException"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.saveAll()", "public com.github.javaparser.utils.SourceRoot saveAll() throws java.io.IOException"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.saveAll(java.nio.file.Path)", "public com.github.javaparser.utils.SourceRoot saveAll(java.nio.file.Path) throws java.io.IOException"], ["java.util.List<com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>>", "com.github.javaparser.utils.SourceRoot.getCache()", "public java.util.List<com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>> getCache()"], ["java.util.List<com.github.javaparser.ast.CompilationUnit>", "com.github.javaparser.utils.SourceRoot.getCompilationUnits()", "public java.util.List<com.github.javaparser.ast.CompilationUnit> getCompilationUnits()"], ["com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit>", "com.github.javaparser.utils.SourceRoot.tryToParse(java.lang.String, java.lang.String)", "public com.github.javaparser.ParseResult<com.github.javaparser.ast.CompilationUnit> tryToParse(java.lang.String, java.lang.String) throws java.io.IOException"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.utils.SourceRoot.parse(java.lang.String, java.lang.String)", "public com.github.javaparser.ast.CompilationUnit parse(java.lang.String, java.lang.String)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.add(java.lang.String, java.lang.String, com.github.javaparser.ast.CompilationUnit)", "public com.github.javaparser.utils.SourceRoot add(java.lang.String, java.lang.String, com.github.javaparser.ast.CompilationUnit)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.add(com.github.javaparser.ast.CompilationUnit)", "public com.github.javaparser.utils.SourceRoot add(com.github.javaparser.ast.CompilationUnit)"], ["java.nio.file.Path", "com.github.javaparser.utils.SourceRoot.getRoot()", "public java.nio.file.Path getRoot()"], ["com.github.javaparser.JavaParser", "com.github.javaparser.utils.SourceRoot.getJavaParser()", "public com.github.javaparser.JavaParser getJavaParser()"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.setJavaParser(com.github.javaparser.JavaParser)", "public com.github.javaparser.utils.SourceRoot setJavaParser(com.github.javaparser.JavaParser)"], ["com.github.javaparser.utils.SourceRoot", "com.github.javaparser.utils.SourceRoot.setPrinter(java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>)", "public com.github.javaparser.utils.SourceRoot setPrinter(java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>)"], ["java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String>", "com.github.javaparser.utils.SourceRoot.getPrinter()", "public java.util.function.Function<com.github.javaparser.ast.CompilationUnit, java.lang.String> getPrinter()"], ["int", "com.github.javaparser.utils.StringEscapeUtils$UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer)", "public int translate(java.lang.CharSequence, int, java.io.Writer) throws java.io.IOException"], ["com.github.javaparser.utils.SourceRoot$Callback$Result[]", "com.github.javaparser.utils.SourceRoot$Callback$Result.values()", "public static com.github.javaparser.utils.SourceRoot$Callback$Result[] values()"], ["com.github.javaparser.utils.SourceRoot$Callback$Result", "com.github.javaparser.utils.SourceRoot$Callback$Result.valueOf(java.lang.String)", "public static com.github.javaparser.utils.SourceRoot$Callback$Result valueOf(java.lang.String)"], ["java.util.List<com.github.javaparser.JavaToken>", "com.github.javaparser.GeneratedJavaParser.getTokens()", "public java.util.List<com.github.javaparser.JavaToken> getTokens()"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.GeneratedJavaParser.getCommentsCollection()", "public com.github.javaparser.ast.comments.CommentsCollection getCommentsCollection()"], ["void", "com.github.javaparser.GeneratedJavaParser.setTabSize(int)", "public void setTabSize(int)"], ["com.github.javaparser.ast.CompilationUnit", "com.github.javaparser.GeneratedJavaParser.CompilationUnit()", "public final com.github.javaparser.ast.CompilationUnit CompilationUnit() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.PackageDeclaration", "com.github.javaparser.GeneratedJavaParser.PackageDeclaration()", "public final com.github.javaparser.ast.PackageDeclaration PackageDeclaration() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.ImportDeclaration", "com.github.javaparser.GeneratedJavaParser.ImportDeclaration()", "public final com.github.javaparser.ast.ImportDeclaration ImportDeclaration() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ModifierHolder", "com.github.javaparser.GeneratedJavaParser.Modifiers()", "public final com.github.javaparser.ModifierHolder Modifiers() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.ClassOrInterfaceDeclaration", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.GeneratedJavaParser.ExtendsList()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> ExtendsList() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.GeneratedJavaParser.ImplementsList()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> ImplementsList() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.EnumDeclaration", "com.github.javaparser.GeneratedJavaParser.EnumDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.EnumDeclaration EnumDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.EnumConstantDeclaration", "com.github.javaparser.GeneratedJavaParser.EnumConstantDeclaration()", "public final com.github.javaparser.ast.body.EnumConstantDeclaration EnumConstantDeclaration() throws com.github.javaparser.ParseException"], ["com.github.javaparser.RangedList<com.github.javaparser.ast.type.TypeParameter>", "com.github.javaparser.GeneratedJavaParser.TypeParameters()", "public final com.github.javaparser.RangedList<com.github.javaparser.ast.type.TypeParameter> TypeParameters() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.TypeParameter", "com.github.javaparser.GeneratedJavaParser.TypeParameter()", "public final com.github.javaparser.ast.type.TypeParameter TypeParameter() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.GeneratedJavaParser.TypeBound()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.ClassOrInterfaceType> TypeBound() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceBody()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>> ClassOrInterfaceBody() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceBodyDeclaration()", "public final com.github.javaparser.ast.body.BodyDeclaration<?> ClassOrInterfaceBodyDeclaration() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.FieldDeclaration", "com.github.javaparser.GeneratedJavaParser.FieldDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.FieldDeclaration FieldDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.VariableDeclarator", "com.github.javaparser.GeneratedJavaParser.VariableDeclarator(com.github.javaparser.ast.type.Type)", "public final com.github.javaparser.ast.body.VariableDeclarator VariableDeclarator(com.github.javaparser.ast.type.Type) throws com.github.javaparser.ParseException"], ["com.github.javaparser.utils.Pair<com.github.javaparser.ast.expr.SimpleName, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>>", "com.github.javaparser.GeneratedJavaParser.VariableDeclaratorId()", "public final com.github.javaparser.utils.Pair<com.github.javaparser.ast.expr.SimpleName, java.util.List<com.github.javaparser.ast.type.ArrayType$ArrayBracketPair>> VariableDeclaratorId() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.VariableInitializer()", "public final com.github.javaparser.ast.expr.Expression VariableInitializer() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.ArrayInitializerExpr", "com.github.javaparser.GeneratedJavaParser.ArrayInitializer()", "public final com.github.javaparser.ast.expr.ArrayInitializerExpr ArrayInitializer() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.MethodDeclaration", "com.github.javaparser.GeneratedJavaParser.MethodDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.MethodDeclaration MethodDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.GeneratedJavaParser.ReferenceTypeWithAnnotations()", "public final com.github.javaparser.ast.type.ReferenceType ReferenceTypeWithAnnotations() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.GeneratedJavaParser.Parameters()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter> Parameters() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.GeneratedJavaParser.LambdaParameters()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter> LambdaParameters() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter>", "com.github.javaparser.GeneratedJavaParser.InferredLambdaParameters()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.Parameter> InferredLambdaParameters() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.Parameter", "com.github.javaparser.GeneratedJavaParser.Parameter()", "public final com.github.javaparser.ast.body.Parameter Parameter() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.GeneratedJavaParser.ReceiverParameterId()", "public final com.github.javaparser.ast.expr.SimpleName ReceiverParameterId() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.ConstructorDeclaration", "com.github.javaparser.GeneratedJavaParser.ConstructorDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.ConstructorDeclaration ConstructorDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.GeneratedJavaParser.ExplicitConstructorInvocation()", "public final com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt ExplicitConstructorInvocation() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement>", "com.github.javaparser.GeneratedJavaParser.Statements()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.stmt.Statement> Statements() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.GeneratedJavaParser.InitializerDeclaration()", "public final com.github.javaparser.ast.body.InitializerDeclaration InitializerDeclaration() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.Type()", "public final com.github.javaparser.ast.type.Type Type() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.GeneratedJavaParser.ReferenceType()", "public final com.github.javaparser.ast.type.ReferenceType ReferenceType() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.GeneratedJavaParser.ArrayBracketPair()", "public final com.github.javaparser.ast.type.ArrayType$ArrayBracketPair ArrayBracketPair() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.IntersectionType", "com.github.javaparser.GeneratedJavaParser.IntersectionType()", "public final com.github.javaparser.ast.type.IntersectionType IntersectionType() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.GeneratedJavaParser.AnnotatedClassOrInterfaceType()", "public final com.github.javaparser.ast.type.ClassOrInterfaceType AnnotatedClassOrInterfaceType() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.GeneratedJavaParser.ClassOrInterfaceType()", "public final com.github.javaparser.ast.type.ClassOrInterfaceType ClassOrInterfaceType() throws com.github.javaparser.ParseException"], ["com.github.javaparser.RangedList<com.github.javaparser.ast.type.Type>", "com.github.javaparser.GeneratedJavaParser.TypeArguments()", "public final com.github.javaparser.RangedList<com.github.javaparser.ast.type.Type> TypeArguments() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.TypeArgument()", "public final com.github.javaparser.ast.type.Type TypeArgument() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.WildcardType", "com.github.javaparser.GeneratedJavaParser.Wildcard()", "public final com.github.javaparser.ast.type.WildcardType Wildcard() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.GeneratedJavaParser.PrimitiveType()", "public final com.github.javaparser.ast.type.PrimitiveType PrimitiveType() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.GeneratedJavaParser.ResultType()", "public final com.github.javaparser.ast.type.Type ResultType() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.GeneratedJavaParser.Name()", "public final com.github.javaparser.ast.expr.Name Name() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.GeneratedJavaParser.SimpleName()", "public final com.github.javaparser.ast.expr.SimpleName SimpleName() throws com.github.javaparser.ParseException"], ["java.lang.String", "com.github.javaparser.GeneratedJavaParser.Identifier()", "public final java.lang.String Identifier() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.Expression()", "public final com.github.javaparser.ast.expr.Expression Expression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.AssignExpr$Operator", "com.github.javaparser.GeneratedJavaParser.AssignmentOperator()", "public final com.github.javaparser.ast.expr.AssignExpr$Operator AssignmentOperator() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ConditionalExpression()", "public final com.github.javaparser.ast.expr.Expression ConditionalExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ConditionalOrExpression()", "public final com.github.javaparser.ast.expr.Expression ConditionalOrExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ConditionalAndExpression()", "public final com.github.javaparser.ast.expr.Expression ConditionalAndExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.InclusiveOrExpression()", "public final com.github.javaparser.ast.expr.Expression InclusiveOrExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ExclusiveOrExpression()", "public final com.github.javaparser.ast.expr.Expression ExclusiveOrExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.AndExpression()", "public final com.github.javaparser.ast.expr.Expression AndExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.EqualityExpression()", "public final com.github.javaparser.ast.expr.Expression EqualityExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.InstanceOfExpression()", "public final com.github.javaparser.ast.expr.Expression InstanceOfExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.RelationalExpression()", "public final com.github.javaparser.ast.expr.Expression RelationalExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.ShiftExpression()", "public final com.github.javaparser.ast.expr.Expression ShiftExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.AdditiveExpression()", "public final com.github.javaparser.ast.expr.Expression AdditiveExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.MultiplicativeExpression()", "public final com.github.javaparser.ast.expr.Expression MultiplicativeExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.UnaryExpression()", "public final com.github.javaparser.ast.expr.Expression UnaryExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PreIncrementExpression()", "public final com.github.javaparser.ast.expr.Expression PreIncrementExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PreDecrementExpression()", "public final com.github.javaparser.ast.expr.Expression PreDecrementExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.UnaryExpressionNotPlusMinus()", "public final com.github.javaparser.ast.expr.Expression UnaryExpressionNotPlusMinus() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PostfixExpression()", "public final com.github.javaparser.ast.expr.Expression PostfixExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.CastExpression()", "public final com.github.javaparser.ast.expr.Expression CastExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimaryExpression()", "public final com.github.javaparser.ast.expr.Expression PrimaryExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimaryExpressionWithoutSuperSuffix()", "public final com.github.javaparser.ast.expr.Expression PrimaryExpressionWithoutSuperSuffix() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimaryPrefix()", "public final com.github.javaparser.ast.expr.Expression PrimaryPrefix() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimarySuffix(com.github.javaparser.ast.expr.Expression)", "public final com.github.javaparser.ast.expr.Expression PrimarySuffix(com.github.javaparser.ast.expr.Expression) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.PrimarySuffixWithoutSuper(com.github.javaparser.ast.expr.Expression)", "public final com.github.javaparser.ast.expr.Expression PrimarySuffixWithoutSuper(com.github.javaparser.ast.expr.Expression) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.Literal()", "public final com.github.javaparser.ast.expr.Expression Literal() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.BooleanLiteral()", "public final com.github.javaparser.ast.expr.Expression BooleanLiteral() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.NullLiteral()", "public final com.github.javaparser.ast.expr.Expression NullLiteral() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.GeneratedJavaParser.Arguments()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> Arguments() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.GeneratedJavaParser.ArgumentList()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> ArgumentList() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.AllocationExpression(com.github.javaparser.ast.expr.Expression)", "public final com.github.javaparser.ast.expr.Expression AllocationExpression(com.github.javaparser.ast.expr.Expression) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.ArrayCreationExpr", "com.github.javaparser.GeneratedJavaParser.ArrayCreation(com.github.javaparser.JavaToken, com.github.javaparser.ast.type.Type)", "public final com.github.javaparser.ast.expr.ArrayCreationExpr ArrayCreation(com.github.javaparser.JavaToken, com.github.javaparser.ast.type.Type) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.Statement()", "public final com.github.javaparser.ast.stmt.Statement Statement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.AssertStmt", "com.github.javaparser.GeneratedJavaParser.AssertStatement()", "public final com.github.javaparser.ast.stmt.AssertStmt AssertStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.LabeledStmt", "com.github.javaparser.GeneratedJavaParser.LabeledStatement()", "public final com.github.javaparser.ast.stmt.LabeledStmt LabeledStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.GeneratedJavaParser.Block()", "public final com.github.javaparser.ast.stmt.BlockStmt Block() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.BlockStatement()", "public final com.github.javaparser.ast.stmt.Statement BlockStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.VariableDeclarationExpr", "com.github.javaparser.GeneratedJavaParser.VariableDeclarationExpression()", "public final com.github.javaparser.ast.expr.VariableDeclarationExpr VariableDeclarationExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.GeneratedJavaParser.EmptyStatement()", "public final com.github.javaparser.ast.stmt.EmptyStmt EmptyStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.LambdaBody()", "public final com.github.javaparser.ast.stmt.Statement LambdaBody() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.ExpressionStmt", "com.github.javaparser.GeneratedJavaParser.StatementExpression()", "public final com.github.javaparser.ast.stmt.ExpressionStmt StatementExpression() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.SwitchStmt", "com.github.javaparser.GeneratedJavaParser.SwitchStatement()", "public final com.github.javaparser.ast.stmt.SwitchStmt SwitchStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.SwitchEntryStmt", "com.github.javaparser.GeneratedJavaParser.SwitchEntry()", "public final com.github.javaparser.ast.stmt.SwitchEntryStmt SwitchEntry() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.IfStmt", "com.github.javaparser.GeneratedJavaParser.IfStatement()", "public final com.github.javaparser.ast.stmt.IfStmt IfStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.WhileStmt", "com.github.javaparser.GeneratedJavaParser.WhileStatement()", "public final com.github.javaparser.ast.stmt.WhileStmt WhileStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.DoStmt", "com.github.javaparser.GeneratedJavaParser.DoStatement()", "public final com.github.javaparser.ast.stmt.DoStmt DoStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.GeneratedJavaParser.ForStatement()", "public final com.github.javaparser.ast.stmt.Statement ForStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.GeneratedJavaParser.ForInit()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> ForInit() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.GeneratedJavaParser.ExpressionList()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> ExpressionList() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.GeneratedJavaParser.ForUpdate()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> ForUpdate() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.BreakStmt", "com.github.javaparser.GeneratedJavaParser.BreakStatement()", "public final com.github.javaparser.ast.stmt.BreakStmt BreakStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.ContinueStmt", "com.github.javaparser.GeneratedJavaParser.ContinueStatement()", "public final com.github.javaparser.ast.stmt.ContinueStmt ContinueStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.ReturnStmt", "com.github.javaparser.GeneratedJavaParser.ReturnStatement()", "public final com.github.javaparser.ast.stmt.ReturnStmt ReturnStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.ThrowStmt", "com.github.javaparser.GeneratedJavaParser.ThrowStatement()", "public final com.github.javaparser.ast.stmt.ThrowStmt ThrowStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.SynchronizedStmt", "com.github.javaparser.GeneratedJavaParser.SynchronizedStatement()", "public final com.github.javaparser.ast.stmt.SynchronizedStmt SynchronizedStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.stmt.TryStmt", "com.github.javaparser.GeneratedJavaParser.TryStatement()", "public final com.github.javaparser.ast.stmt.TryStmt TryStatement() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>", "com.github.javaparser.GeneratedJavaParser.ResourceSpecification()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr> ResourceSpecification() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr>", "com.github.javaparser.GeneratedJavaParser.Resources()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.VariableDeclarationExpr> Resources() throws com.github.javaparser.ParseException"], ["void", "com.github.javaparser.GeneratedJavaParser.RUNSIGNEDSHIFT()", "public final void RUNSIGNEDSHIFT() throws com.github.javaparser.ParseException"], ["void", "com.github.javaparser.GeneratedJavaParser.RSIGNEDSHIFT()", "public final void RSIGNEDSHIFT() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.GeneratedJavaParser.Annotations()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> Annotations() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.GeneratedJavaParser.Annotation()", "public final com.github.javaparser.ast.expr.AnnotationExpr Annotation() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair>", "com.github.javaparser.GeneratedJavaParser.MemberValuePairs()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.MemberValuePair> MemberValuePairs() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.GeneratedJavaParser.MemberValuePair()", "public final com.github.javaparser.ast.expr.MemberValuePair MemberValuePair() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.MemberValue()", "public final com.github.javaparser.ast.expr.Expression MemberValue() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.MemberValueArrayInitializer()", "public final com.github.javaparser.ast.expr.Expression MemberValueArrayInitializer() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.AnnotationDeclaration", "com.github.javaparser.GeneratedJavaParser.AnnotationTypeDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.AnnotationDeclaration AnnotationTypeDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>", "com.github.javaparser.GeneratedJavaParser.AnnotationTypeBody()", "public final com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>> AnnotationTypeBody() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.BodyDeclaration<?>", "com.github.javaparser.GeneratedJavaParser.AnnotationBodyDeclaration()", "public final com.github.javaparser.ast.body.BodyDeclaration<?> AnnotationBodyDeclaration() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.GeneratedJavaParser.AnnotationTypeMemberDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.body.AnnotationMemberDeclaration AnnotationTypeMemberDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.GeneratedJavaParser.DefaultValue()", "public final com.github.javaparser.ast.expr.Expression DefaultValue() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.GeneratedJavaParser.ModuleStmt()", "public final com.github.javaparser.ast.modules.ModuleStmt ModuleStmt() throws com.github.javaparser.ParseException"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.GeneratedJavaParser.ModuleDeclaration(com.github.javaparser.ModifierHolder)", "public final com.github.javaparser.ast.modules.ModuleDeclaration ModuleDeclaration(com.github.javaparser.ModifierHolder) throws com.github.javaparser.ParseException"], ["com.github.javaparser.GeneratedJavaParser", "com.github.javaparser.GeneratedJavaParser(com.github.javaparser.Provider)", "public com.github.javaparser.GeneratedJavaParser(com.github.javaparser.Provider)"], ["com.github.javaparser.GeneratedJavaParser", "com.github.javaparser.GeneratedJavaParser(java.lang.String)", "public com.github.javaparser.GeneratedJavaParser(java.lang.String) throws com.github.javaparser.ParseException, com.github.javaparser.TokenMgrException"], ["void", "com.github.javaparser.GeneratedJavaParser.ReInit(java.lang.String)", "public void ReInit(java.lang.String)"], ["void", "com.github.javaparser.GeneratedJavaParser.ReInit(com.github.javaparser.Provider)", "public void ReInit(com.github.javaparser.Provider)"], ["com.github.javaparser.GeneratedJavaParser", "com.github.javaparser.GeneratedJavaParser(com.github.javaparser.GeneratedJavaParserTokenManager)", "public com.github.javaparser.GeneratedJavaParser(com.github.javaparser.GeneratedJavaParserTokenManager)"], ["void", "com.github.javaparser.GeneratedJavaParser.ReInit(com.github.javaparser.GeneratedJavaParserTokenManager)", "public void ReInit(com.github.javaparser.GeneratedJavaParserTokenManager)"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParser.getNextToken()", "public final com.github.javaparser.Token getNextToken()"], ["com.github.javaparser.Token", "com.github.javaparser.GeneratedJavaParser.getToken(int)", "public final com.github.javaparser.Token getToken(int)"], ["com.github.javaparser.ParseException", "com.github.javaparser.GeneratedJavaParser.generateParseException()", "public com.github.javaparser.ParseException generateParseException()"], ["void", "com.github.javaparser.GeneratedJavaParser.enable_tracing()", "public final void enable_tracing()"], ["void", "com.github.javaparser.GeneratedJavaParser.disable_tracing()", "public final void disable_tracing()"], ["<N extends com.github.javaparser.ast.Node> com.github.javaparser.utils.Pair<com.github.javaparser.ParseResult<N>, com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter>", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.setup(com.github.javaparser.ParseStart<N>, com.github.javaparser.Provider)", "public static <N extends com.github.javaparser.ast.Node> com.github.javaparser.utils.Pair<com.github.javaparser.ParseResult<N>, com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter> setup(com.github.javaparser.ParseStart<N>, com.github.javaparser.Provider)"], ["java.util.Iterator<com.github.javaparser.printer.lexicalpreservation.TokenTextElement>", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.tokensPreceeding(com.github.javaparser.ast.Node)", "public java.util.Iterator<com.github.javaparser.printer.lexicalpreservation.TokenTextElement> tokensPreceeding(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.print(com.github.javaparser.ast.Node)", "public java.lang.String print(com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.print(com.github.javaparser.ast.Node, java.io.Writer)", "public void print(com.github.javaparser.ast.Node, java.io.Writer) throws java.io.IOException"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.LexicalPreservingPrinter.toString()", "public java.lang.String toString()"], ["com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange", "com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.ListReplacementChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)", "public java.lang.Object getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange", "com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node)", "public com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.printer.lexicalpreservation.changes.ListAdditionChange.getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)", "public java.lang.Object getValue(com.github.javaparser.ast.observer.ObservableProperty, com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$ComposedIterator.hasNext()", "public boolean hasNext()"], ["E", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$ComposedIterator.next()", "public E next()"], ["void", "com.github.javaparser.printer.lexicalpreservation.TextElementIteratorsFactory$ComposedIterator.remove()", "public void remove()"], ["com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement", "com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement.added(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement added(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement", "com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement.removed(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement removed(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement", "com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement.kept(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)", "public static com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement kept(com.github.javaparser.printer.concretesyntaxmodel.CsmElement)"], ["void", "com.github.javaparser.ast.body.VariableDeclarator$1.propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public void propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration$Signature.getName()", "public java.lang.String getName()"], ["java.util.List<com.github.javaparser.ast.type.Type>", "com.github.javaparser.ast.body.CallableDeclaration$Signature.getParameterTypes()", "public java.util.List<com.github.javaparser.ast.type.Type> getParameterTypes()"], ["boolean", "com.github.javaparser.ast.body.CallableDeclaration$Signature.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.ast.body.CallableDeclaration$Signature.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration$Signature.asString()", "public java.lang.String asString()"], ["java.lang.String", "com.github.javaparser.ast.body.CallableDeclaration$Signature.toString()", "public java.lang.String toString()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration()", "public com.github.javaparser.ast.body.InitializerDeclaration()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration(boolean, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.InitializerDeclaration(boolean, com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration(com.github.javaparser.TokenRange, boolean, com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.InitializerDeclaration(com.github.javaparser.TokenRange, boolean, com.github.javaparser.ast.stmt.BlockStmt)"], ["<R, A> R", "com.github.javaparser.ast.body.InitializerDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.InitializerDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.stmt.BlockStmt", "com.github.javaparser.ast.body.InitializerDeclaration.getBody()", "public com.github.javaparser.ast.stmt.BlockStmt getBody()"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.isStatic()", "public boolean isStatic()"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.body.InitializerDeclaration setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.setStatic(boolean)", "public com.github.javaparser.ast.body.InitializerDeclaration setStatic(boolean)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.InitializerDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.InitializerDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.clone()", "public com.github.javaparser.ast.body.InitializerDeclaration clone()"], ["com.github.javaparser.metamodel.InitializerDeclarationMetaModel", "com.github.javaparser.ast.body.InitializerDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.InitializerDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.body.InitializerDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.InitializerDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.InitializerDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.InitializerDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.InitializerDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.InitializerDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.InitializerDeclaration.setBody(com.github.javaparser.ast.stmt.BlockStmt)", "public com.github.javaparser.ast.Node setBody(com.github.javaparser.ast.stmt.BlockStmt)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration()", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.type.Type, java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration(java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration(com.github.javaparser.TokenRange, java.util.EnumSet<com.github.javaparser.ast.Modifier>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getDefaultValue()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getDefaultValue()"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getModifiers()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> getModifiers()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.removeDefaultValue()", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration removeDefaultValue()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setDefaultValue(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration setDefaultValue(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration setModifiers(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration setType(com.github.javaparser.ast.type.Type)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration clone()"], ["com.github.javaparser.metamodel.AnnotationMemberDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.AnnotationMemberDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.AnnotationMemberDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.replaceDefaultValue(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.body.AnnotationMemberDeclaration replaceDefaultValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.BodyDeclarationMetaModel", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.BodyDeclarationMetaModel getMetaModel()"], ["com.github.javaparser.ast.body.BodyDeclaration", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()", "public com.github.javaparser.ast.body.BodyDeclaration clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.body.AnnotationMemberDeclaration.setModifiers(java.util.EnumSet)", "public com.github.javaparser.ast.Node setModifiers(java.util.EnumSet)"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection()", "public com.github.javaparser.ast.comments.CommentsCollection()"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection(java.util.Collection<com.github.javaparser.ast.comments.Comment>)", "public com.github.javaparser.ast.comments.CommentsCollection(java.util.Collection<com.github.javaparser.ast.comments.Comment>)"], ["java.util.Set<com.github.javaparser.ast.comments.LineComment>", "com.github.javaparser.ast.comments.CommentsCollection.getLineComments()", "public java.util.Set<com.github.javaparser.ast.comments.LineComment> getLineComments()"], ["java.util.Set<com.github.javaparser.ast.comments.BlockComment>", "com.github.javaparser.ast.comments.CommentsCollection.getBlockComments()", "public java.util.Set<com.github.javaparser.ast.comments.BlockComment> getBlockComments()"], ["java.util.Set<com.github.javaparser.ast.comments.JavadocComment>", "com.github.javaparser.ast.comments.CommentsCollection.getJavadocComments()", "public java.util.Set<com.github.javaparser.ast.comments.JavadocComment> getJavadocComments()"], ["void", "com.github.javaparser.ast.comments.CommentsCollection.addComment(com.github.javaparser.ast.comments.Comment)", "public void addComment(com.github.javaparser.ast.comments.Comment)"], ["boolean", "com.github.javaparser.ast.comments.CommentsCollection.contains(com.github.javaparser.ast.comments.Comment)", "public boolean contains(com.github.javaparser.ast.comments.Comment)"], ["java.util.TreeSet<com.github.javaparser.ast.comments.Comment>", "com.github.javaparser.ast.comments.CommentsCollection.getComments()", "public java.util.TreeSet<com.github.javaparser.ast.comments.Comment> getComments()"], ["int", "com.github.javaparser.ast.comments.CommentsCollection.size()", "public int size()"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection.minus(com.github.javaparser.ast.comments.CommentsCollection)", "public com.github.javaparser.ast.comments.CommentsCollection minus(com.github.javaparser.ast.comments.CommentsCollection)"], ["com.github.javaparser.ast.comments.CommentsCollection", "com.github.javaparser.ast.comments.CommentsCollection.copy()", "public com.github.javaparser.ast.comments.CommentsCollection copy()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment(java.lang.String)", "public com.github.javaparser.ast.comments.Comment(java.lang.String)"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.comments.Comment(com.github.javaparser.TokenRange, java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.comments.Comment.getContent()", "public java.lang.String getContent()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment.setContent(java.lang.String)", "public com.github.javaparser.ast.comments.Comment setContent(java.lang.String)"], ["boolean", "com.github.javaparser.ast.comments.Comment.isLineComment()", "public boolean isLineComment()"], ["com.github.javaparser.ast.comments.LineComment", "com.github.javaparser.ast.comments.Comment.asLineComment()", "public com.github.javaparser.ast.comments.LineComment asLineComment()"], ["java.util.Optional<com.github.javaparser.ast.Node>", "com.github.javaparser.ast.comments.Comment.getCommentedNode()", "public java.util.Optional<com.github.javaparser.ast.Node> getCommentedNode()"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment.setCommentedNode(com.github.javaparser.ast.Node)", "public com.github.javaparser.ast.comments.Comment setCommentedNode(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.comments.Comment.isOrphan()", "public boolean isOrphan()"], ["boolean", "com.github.javaparser.ast.comments.Comment.remove()", "public boolean remove()"], ["boolean", "com.github.javaparser.ast.comments.Comment.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.comments.Comment", "com.github.javaparser.ast.comments.Comment.clone()", "public com.github.javaparser.ast.comments.Comment clone()"], ["com.github.javaparser.metamodel.CommentMetaModel", "com.github.javaparser.ast.comments.Comment.getMetaModel()", "public com.github.javaparser.metamodel.CommentMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.comments.Comment.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.comments.Comment.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.comments.Comment.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.comments.Comment.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.visitor.CloneVisitor", "com.github.javaparser.ast.visitor.CloneVisitor()", "public com.github.javaparser.ast.visitor.CloneVisitor()"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public com.github.javaparser.ast.Node visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["com.github.javaparser.ast.visitor.Visitable", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public com.github.javaparser.ast.visitor.Visitable visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.UnparsableStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleOpensStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleUsesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleProvidesStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleExportsStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleRequiresStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.modules.ModuleDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ImportDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SimpleName, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.Name, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.Name, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.NodeList, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.NodeList, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.TypeExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodReferenceExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LambdaExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.CatchClause, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.TryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SynchronizedStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ThrowStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ForeachStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.DoStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ContinueStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.WhileStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.IfStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ReturnStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BreakStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchEntryStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.SwitchStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExpressionStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.EmptyStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LabeledStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.BlockStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.AssertStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.LocalClassDeclarationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MemberValuePair, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NormalAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SingleMemberAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MarkerAnnotationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.VariableDeclarationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.UnaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.SuperExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ThisExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ObjectCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NameExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.MethodCallExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.NullLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BooleanLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.DoubleLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CharLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.StringLiteralExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.InstanceOfExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.FieldAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.EnclosedExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ConditionalExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ClassExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.CastExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.BinaryExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.AssignExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayInitializerExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayCreationExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.expr.ArrayAccessExpr, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnknownType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.WildcardType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.VoidType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.UnionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.IntersectionType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.ArrayCreationLevel, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ArrayType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.PrimitiveType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.JavadocComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.InitializerDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.Parameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.MethodDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ConstructorDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.VariableDeclarator, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.FieldDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationMemberDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.AnnotationDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumConstantDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.EnumDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.body.ClassOrInterfaceDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.BlockComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.comments.LineComment, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.type.TypeParameter, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.PackageDeclaration, java.lang.Object)"], ["java.lang.Object", "com.github.javaparser.ast.visitor.CloneVisitor.visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)", "public java.lang.Object visit(com.github.javaparser.ast.CompilationUnit, java.lang.Object)"], ["com.github.javaparser.ast.DataKey", "com.github.javaparser.ast.DataKey()", "public com.github.javaparser.ast.DataKey()"], ["int", "com.github.javaparser.ast.DataKey.hashCode()", "public int hashCode()"], ["boolean", "com.github.javaparser.ast.DataKey.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["com.github.javaparser.ast.observer.AstObserverAdapter", "com.github.javaparser.ast.observer.AstObserverAdapter()", "public com.github.javaparser.ast.observer.AstObserverAdapter()"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public void propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.listChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)", "public void listChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.AstObserverAdapter.listReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void listReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver$1.concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public void concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver$1.concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)", "public void concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver$1.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.validator.Java9Validator", "com.github.javaparser.ast.validator.Java9Validator()", "public com.github.javaparser.ast.validator.Java9Validator()"], ["default", "com.github.javaparser.ast.validator.Validator.void accept(java.lang.Object, java.lang.Object)", "public default void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr()", "public com.github.javaparser.ast.expr.StringLiteralExpr()"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr(java.lang.String)", "public com.github.javaparser.ast.expr.StringLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.escape(java.lang.String)", "public static com.github.javaparser.ast.expr.StringLiteralExpr escape(java.lang.String)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.StringLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.StringLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.StringLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.StringLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.setEscapedValue(java.lang.String)", "public com.github.javaparser.ast.expr.StringLiteralExpr setEscapedValue(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.StringLiteralExpr.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.setString(java.lang.String)", "public com.github.javaparser.ast.expr.StringLiteralExpr setString(java.lang.String)"], ["com.github.javaparser.ast.expr.StringLiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()", "public com.github.javaparser.ast.expr.StringLiteralExpr clone()"], ["com.github.javaparser.metamodel.StringLiteralExprMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.StringLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.StringLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralStringValueExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralStringValueExpr clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.StringLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.StringLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name()", "public com.github.javaparser.ast.expr.Name()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(java.lang.String)", "public com.github.javaparser.ast.expr.Name(java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(com.github.javaparser.ast.expr.Name, java.lang.String)", "public com.github.javaparser.ast.expr.Name(com.github.javaparser.ast.expr.Name, java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(com.github.javaparser.ast.expr.Name, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.expr.Name(com.github.javaparser.ast.expr.Name, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.expr.Name(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, java.lang.String, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.expr.Name.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.Name.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.lang.String", "com.github.javaparser.ast.expr.Name.getIdentifier()", "public java.lang.String getIdentifier()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.setIdentifier(java.lang.String)", "public com.github.javaparser.ast.expr.Name setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.parse(java.lang.String)", "public static com.github.javaparser.ast.expr.Name parse(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.expr.Name.asString()", "public java.lang.String asString()"], ["java.util.Optional<com.github.javaparser.ast.expr.Name>", "com.github.javaparser.ast.expr.Name.getQualifier()", "public java.util.Optional<com.github.javaparser.ast.expr.Name> getQualifier()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.setQualifier(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.Name setQualifier(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.Name.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.removeQualifier()", "public com.github.javaparser.ast.expr.Name removeQualifier()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.expr.Name.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.expr.Name setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.Name.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.clone()", "public com.github.javaparser.ast.expr.Name clone()"], ["com.github.javaparser.metamodel.NameMetaModel", "com.github.javaparser.ast.expr.Name.getMetaModel()", "public com.github.javaparser.metamodel.NameMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.Name.replaceQualifier(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.Name replaceQualifier(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.Name.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.Name.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Name.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.Name.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Name.setIdentifier(java.lang.String)", "public com.github.javaparser.ast.Node setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.Name.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["java.lang.Object", "com.github.javaparser.Token.getValue()", "public java.lang.Object getValue()"], ["com.github.javaparser.Token", "com.github.javaparser.Token()", "public com.github.javaparser.Token()"], ["com.github.javaparser.Token", "com.github.javaparser.Token(int)", "public com.github.javaparser.Token(int)"], ["com.github.javaparser.Token", "com.github.javaparser.Token(int, java.lang.String)", "public com.github.javaparser.Token(int, java.lang.String)"], ["java.lang.String", "com.github.javaparser.Token.toString()", "public java.lang.String toString()"], ["com.github.javaparser.Token", "com.github.javaparser.Token.newToken(int, java.lang.String)", "public static com.github.javaparser.Token newToken(int, java.lang.String)"], ["com.github.javaparser.Token", "com.github.javaparser.Token.newToken(int)", "public static com.github.javaparser.Token newToken(int)"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$2.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["java.nio.file.FileVisitResult", "com.github.javaparser.utils.SourceRoot$2.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)", "public java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException"], ["com.github.javaparser.metamodel.PropertyMetaModel", "com.github.javaparser.metamodel.PropertyMetaModel(com.github.javaparser.metamodel.BaseNodeMetaModel, java.lang.String, java.lang.Class<?>, java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>, boolean, boolean, boolean, boolean, boolean)", "public com.github.javaparser.metamodel.PropertyMetaModel(com.github.javaparser.metamodel.BaseNodeMetaModel, java.lang.String, java.lang.Class<?>, java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>, boolean, boolean, boolean, boolean, boolean)"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.is(java.lang.Class<? extends com.github.javaparser.ast.Node>, java.lang.String)", "public boolean is(java.lang.Class<? extends com.github.javaparser.ast.Node>, java.lang.String)"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.is(java.lang.String)", "public boolean is(java.lang.String)"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getSetterMethodName()", "public java.lang.String getSetterMethodName()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getGetterMethodName()", "public java.lang.String getGetterMethodName()"], ["com.github.javaparser.metamodel.BaseNodeMetaModel", "com.github.javaparser.metamodel.PropertyMetaModel.getContainingNodeMetaModel()", "public com.github.javaparser.metamodel.BaseNodeMetaModel getContainingNodeMetaModel()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getName()", "public java.lang.String getName()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isNonEmpty()", "public boolean isNonEmpty()"], ["java.lang.Class<?>", "com.github.javaparser.metamodel.PropertyMetaModel.getType()", "public java.lang.Class<?> getType()"], ["java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>", "com.github.javaparser.metamodel.PropertyMetaModel.getNodeReference()", "public java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel> getNodeReference()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isOptional()", "public boolean isOptional()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isRequired()", "public boolean isRequired()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isNodeList()", "public boolean isNodeList()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isEnumSet()", "public boolean isEnumSet()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.hasWildcard()", "public boolean hasWildcard()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isSingular()", "public boolean isSingular()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.metamodel.PropertyMetaModel.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameGenerified()", "public java.lang.String getTypeNameGenerified()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeName()", "public java.lang.String getTypeName()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForGetter()", "public java.lang.String getTypeNameForGetter()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getTypeNameForSetter()", "public java.lang.String getTypeNameForSetter()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isNode()", "public boolean isNode()"], ["java.lang.String", "com.github.javaparser.metamodel.PropertyMetaModel.getMetaModelFieldName()", "public java.lang.String getMetaModelFieldName()"], ["boolean", "com.github.javaparser.metamodel.PropertyMetaModel.isAttribute()", "public boolean isAttribute()"], ["java.lang.Object", "com.github.javaparser.metamodel.PropertyMetaModel.getValue(com.github.javaparser.ast.Node)", "public java.lang.Object getValue(com.github.javaparser.ast.Node)"], ["long", "com.github.javaparser.printer.lexicalpreservation.Difference.cost()", "public long cost()"], ["java.lang.String", "com.github.javaparser.printer.lexicalpreservation.Difference.toString()", "public java.lang.String toString()"], ["java.util.List<com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement>", "com.github.javaparser.printer.lexicalpreservation.Difference.getElements()", "public java.util.List<com.github.javaparser.printer.lexicalpreservation.Difference$DifferenceElement> getElements()"], ["java.util.Optional<com.github.javaparser.ast.comments.Comment>", "com.github.javaparser.ast.Node.getComment()", "public java.util.Optional<com.github.javaparser.ast.comments.Comment> getComment()"], ["java.util.Optional<com.github.javaparser.Range>", "com.github.javaparser.ast.Node.getRange()", "public java.util.Optional<com.github.javaparser.Range> getRange()"], ["java.util.Optional<com.github.javaparser.TokenRange>", "com.github.javaparser.ast.Node.getTokenRange()", "public java.util.Optional<com.github.javaparser.TokenRange> getTokenRange()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setTokenRange(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.Node setTokenRange(com.github.javaparser.TokenRange)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setRange(com.github.javaparser.Range)", "public com.github.javaparser.ast.Node setRange(com.github.javaparser.Range)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setComment(com.github.javaparser.ast.comments.Comment)", "public final com.github.javaparser.ast.Node setComment(com.github.javaparser.ast.comments.Comment)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setLineComment(java.lang.String)", "public final com.github.javaparser.ast.Node setLineComment(java.lang.String)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setBlockComment(java.lang.String)", "public final com.github.javaparser.ast.Node setBlockComment(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.Node.toString()", "public final java.lang.String toString()"], ["java.lang.String", "com.github.javaparser.ast.Node.toString(com.github.javaparser.printer.PrettyPrinterConfiguration)", "public final java.lang.String toString(com.github.javaparser.printer.PrettyPrinterConfiguration)"], ["int", "com.github.javaparser.ast.Node.hashCode()", "public final int hashCode()"], ["boolean", "com.github.javaparser.ast.Node.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["java.util.Optional<com.github.javaparser.ast.Node>", "com.github.javaparser.ast.Node.getParentNode()", "public java.util.Optional<com.github.javaparser.ast.Node> getParentNode()"], ["java.util.List<com.github.javaparser.ast.Node>", "com.github.javaparser.ast.Node.getChildNodes()", "public java.util.List<com.github.javaparser.ast.Node> getChildNodes()"], ["void", "com.github.javaparser.ast.Node.addOrphanComment(com.github.javaparser.ast.comments.Comment)", "public void addOrphanComment(com.github.javaparser.ast.comments.Comment)"], ["boolean", "com.github.javaparser.ast.Node.removeOrphanComment(com.github.javaparser.ast.comments.Comment)", "public boolean removeOrphanComment(com.github.javaparser.ast.comments.Comment)"], ["java.util.List<com.github.javaparser.ast.comments.Comment>", "com.github.javaparser.ast.Node.getOrphanComments()", "public java.util.List<com.github.javaparser.ast.comments.Comment> getOrphanComments()"], ["java.util.List<com.github.javaparser.ast.comments.Comment>", "com.github.javaparser.ast.Node.getAllContainedComments()", "public java.util.List<com.github.javaparser.ast.comments.Comment> getAllContainedComments()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)", "public com.github.javaparser.ast.Node setParentNode(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.Node.hasComment()", "public boolean hasComment()"], ["void", "com.github.javaparser.ast.Node.tryAddImportToParentCompilationUnit(java.lang.Class<?>)", "public void tryAddImportToParentCompilationUnit(java.lang.Class<?>)"], ["<N extends com.github.javaparser.ast.Node> java.util.List<N>", "com.github.javaparser.ast.Node.getChildNodesByType(java.lang.Class<N>)", "public <N extends com.github.javaparser.ast.Node> java.util.List<N> getChildNodesByType(java.lang.Class<N>)"], ["<N extends com.github.javaparser.ast.Node> java.util.List<N>", "com.github.javaparser.ast.Node.getNodesByType(java.lang.Class<N>)", "public <N extends com.github.javaparser.ast.Node> java.util.List<N> getNodesByType(java.lang.Class<N>)"], ["<M> M", "com.github.javaparser.ast.Node.getData(com.github.javaparser.ast.DataKey<M>)", "public <M> M getData(com.github.javaparser.ast.DataKey<M>)"], ["<M> void", "com.github.javaparser.ast.Node.setData(com.github.javaparser.ast.DataKey<M>, M)", "public <M> void setData(com.github.javaparser.ast.DataKey<M>, M)"], ["boolean", "com.github.javaparser.ast.Node.remove()", "public boolean remove()"], ["void", "com.github.javaparser.ast.Node.removeForced()", "public void removeForced()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.getParentNodeForChildren()", "public com.github.javaparser.ast.Node getParentNodeForChildren()"], ["<P> void", "com.github.javaparser.ast.Node.notifyPropertyChange(com.github.javaparser.ast.observer.ObservableProperty, P, P)", "public <P> void notifyPropertyChange(com.github.javaparser.ast.observer.ObservableProperty, P, P)"], ["void", "com.github.javaparser.ast.Node.unregister(com.github.javaparser.ast.observer.AstObserver)", "public void unregister(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.Node.register(com.github.javaparser.ast.observer.AstObserver)", "public void register(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.Node.register(com.github.javaparser.ast.observer.AstObserver, com.github.javaparser.ast.Node$ObserverRegistrationMode)", "public void register(com.github.javaparser.ast.observer.AstObserver, com.github.javaparser.ast.Node$ObserverRegistrationMode)"], ["void", "com.github.javaparser.ast.Node.registerForSubtree(com.github.javaparser.ast.observer.AstObserver)", "public void registerForSubtree(com.github.javaparser.ast.observer.AstObserver)"], ["boolean", "com.github.javaparser.ast.Node.isRegistered(com.github.javaparser.ast.observer.AstObserver)", "public boolean isRegistered(com.github.javaparser.ast.observer.AstObserver)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.Node.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.Node.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.removeComment()", "public com.github.javaparser.ast.Node removeComment()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.clone()", "public com.github.javaparser.ast.Node clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.Node.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node$Parsedness", "com.github.javaparser.ast.Node.getParsed()", "public com.github.javaparser.ast.Node$Parsedness getParsed()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.setParsed(com.github.javaparser.ast.Node$Parsedness)", "public com.github.javaparser.ast.Node setParsed(com.github.javaparser.ast.Node$Parsedness)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.Node.replaceComment(com.github.javaparser.ast.comments.Comment)", "public com.github.javaparser.ast.Node replaceComment(com.github.javaparser.ast.comments.Comment)"], ["boolean", "com.github.javaparser.ast.Node.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.ast.Node.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["java.lang.Object", "com.github.javaparser.ast.Node.setParentNode(com.github.javaparser.ast.Node)", "public java.lang.Object setParentNode(com.github.javaparser.ast.Node)"], ["java.lang.Object", "com.github.javaparser.ast.Node.setRange(com.github.javaparser.Range)", "public java.lang.Object setRange(com.github.javaparser.Range)"], ["java.lang.Object", "com.github.javaparser.ast.Node.setTokenRange(com.github.javaparser.TokenRange)", "public java.lang.Object setTokenRange(com.github.javaparser.TokenRange)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel()", "public com.github.javaparser.ast.ArrayCreationLevel()"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(int)", "public com.github.javaparser.ast.ArrayCreationLevel(int)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.ArrayCreationLevel(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.ArrayCreationLevel.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.ArrayCreationLevel.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.setDimension(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.ArrayCreationLevel setDimension(com.github.javaparser.ast.expr.Expression)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.ArrayCreationLevel.getDimension()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getDimension()"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.ArrayCreationLevel.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.ArrayCreationLevel setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.ArrayCreationLevel.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.removeDimension()", "public com.github.javaparser.ast.ArrayCreationLevel removeDimension()"], ["boolean", "com.github.javaparser.ast.ArrayCreationLevel.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.clone()", "public com.github.javaparser.ast.ArrayCreationLevel clone()"], ["com.github.javaparser.metamodel.ArrayCreationLevelMetaModel", "com.github.javaparser.ast.ArrayCreationLevel.getMetaModel()", "public com.github.javaparser.metamodel.ArrayCreationLevelMetaModel getMetaModel()"], ["com.github.javaparser.ast.ArrayCreationLevel", "com.github.javaparser.ast.ArrayCreationLevel.replaceDimension(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.ArrayCreationLevel replaceDimension(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.ArrayCreationLevel.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.ArrayCreationLevel.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ArrayCreationLevel.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.ArrayCreationLevel.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.ArrayCreationLevel.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Modifier[]", "com.github.javaparser.ast.Modifier.values()", "public static com.github.javaparser.ast.Modifier[] values()"], ["com.github.javaparser.ast.Modifier", "com.github.javaparser.ast.Modifier.valueOf(java.lang.String)", "public static com.github.javaparser.ast.Modifier valueOf(java.lang.String)"], ["java.lang.String", "com.github.javaparser.ast.Modifier.asString()", "public java.lang.String asString()"], ["java.util.EnumSet<com.github.javaparser.ast.Modifier>", "com.github.javaparser.ast.Modifier.toEnumSet()", "public java.util.EnumSet<com.github.javaparser.ast.Modifier> toEnumSet()"], ["com.github.javaparser.ast.AccessSpecifier", "com.github.javaparser.ast.Modifier.getAccessSpecifier(java.util.EnumSet<com.github.javaparser.ast.Modifier>)", "public static com.github.javaparser.ast.AccessSpecifier getAccessSpecifier(java.util.EnumSet<com.github.javaparser.ast.Modifier>)"], ["com.github.javaparser.ast.modules.ModuleOpensStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt()", "public com.github.javaparser.ast.modules.ModuleOpensStmt()"], ["com.github.javaparser.ast.modules.ModuleOpensStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)", "public com.github.javaparser.ast.modules.ModuleOpensStmt(com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["com.github.javaparser.ast.modules.ModuleOpensStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)", "public com.github.javaparser.ast.modules.ModuleOpensStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleOpensStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleOpensStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleOpensStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleOpensStmt.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["com.github.javaparser.ast.modules.ModuleOpensStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.modules.ModuleOpensStmt setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>", "com.github.javaparser.ast.modules.ModuleOpensStmt.getModuleNames()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name> getModuleNames()"], ["com.github.javaparser.ast.modules.ModuleOpensStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt.setModuleNames(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)", "public com.github.javaparser.ast.modules.ModuleOpensStmt setModuleNames(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Name>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.modules.ModuleOpensStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["com.github.javaparser.ast.modules.ModuleOpensStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt.clone()", "public com.github.javaparser.ast.modules.ModuleOpensStmt clone()"], ["com.github.javaparser.metamodel.ModuleOpensStmtMetaModel", "com.github.javaparser.ast.modules.ModuleOpensStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleOpensStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleOpensStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ModuleStmtMetaModel", "com.github.javaparser.ast.modules.ModuleOpensStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleOpensStmt.clone()", "public com.github.javaparser.ast.modules.ModuleStmt clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleOpensStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleOpensStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleOpensStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleOpensStmt.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.modules.ModuleUsesStmt", "com.github.javaparser.ast.modules.ModuleUsesStmt()", "public com.github.javaparser.ast.modules.ModuleUsesStmt()"], ["com.github.javaparser.ast.modules.ModuleUsesStmt", "com.github.javaparser.ast.modules.ModuleUsesStmt(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.modules.ModuleUsesStmt(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.modules.ModuleUsesStmt", "com.github.javaparser.ast.modules.ModuleUsesStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.modules.ModuleUsesStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleUsesStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleUsesStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleUsesStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.modules.ModuleUsesStmt.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.modules.ModuleUsesStmt", "com.github.javaparser.ast.modules.ModuleUsesStmt.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.modules.ModuleUsesStmt setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.modules.ModuleUsesStmt", "com.github.javaparser.ast.modules.ModuleUsesStmt.clone()", "public com.github.javaparser.ast.modules.ModuleUsesStmt clone()"], ["com.github.javaparser.metamodel.ModuleUsesStmtMetaModel", "com.github.javaparser.ast.modules.ModuleUsesStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleUsesStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleUsesStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ModuleStmtMetaModel", "com.github.javaparser.ast.modules.ModuleUsesStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleUsesStmt.clone()", "public com.github.javaparser.ast.modules.ModuleStmt clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleUsesStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleUsesStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleUsesStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleUsesStmt.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.modules.ModuleProvidesStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt()", "public com.github.javaparser.ast.modules.ModuleProvidesStmt()"], ["com.github.javaparser.ast.modules.ModuleProvidesStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.modules.ModuleProvidesStmt(com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["com.github.javaparser.ast.modules.ModuleProvidesStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.modules.ModuleProvidesStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleProvidesStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleProvidesStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.modules.ModuleProvidesStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.modules.ModuleProvidesStmt.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.modules.ModuleProvidesStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.modules.ModuleProvidesStmt setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>", "com.github.javaparser.ast.modules.ModuleProvidesStmt.getWithTypes()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type> getWithTypes()"], ["com.github.javaparser.ast.modules.ModuleProvidesStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt.setWithTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.modules.ModuleProvidesStmt setWithTypes(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.modules.ModuleProvidesStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["com.github.javaparser.ast.modules.ModuleProvidesStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt.clone()", "public com.github.javaparser.ast.modules.ModuleProvidesStmt clone()"], ["com.github.javaparser.metamodel.ModuleProvidesStmtMetaModel", "com.github.javaparser.ast.modules.ModuleProvidesStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleProvidesStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleProvidesStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ModuleStmtMetaModel", "com.github.javaparser.ast.modules.ModuleProvidesStmt.getMetaModel()", "public com.github.javaparser.metamodel.ModuleStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.modules.ModuleStmt", "com.github.javaparser.ast.modules.ModuleProvidesStmt.clone()", "public com.github.javaparser.ast.modules.ModuleStmt clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleProvidesStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleProvidesStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleProvidesStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleProvidesStmt.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration()", "public com.github.javaparser.ast.modules.ModuleDeclaration()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.ast.expr.Name, boolean)", "public com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.ast.expr.Name, boolean)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>)", "public com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>)", "public com.github.javaparser.ast.modules.ModuleDeclaration(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>, com.github.javaparser.ast.expr.Name, boolean, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>)"], ["<R, A> R", "com.github.javaparser.ast.modules.ModuleDeclaration.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.modules.ModuleDeclaration.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.modules.ModuleDeclaration.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.modules.ModuleDeclaration setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.modules.ModuleDeclaration.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.modules.ModuleDeclaration setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.modules.ModuleDeclaration.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDeclaration.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["boolean", "com.github.javaparser.ast.modules.ModuleDeclaration.isOpen()", "public boolean isOpen()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setOpen(boolean)", "public com.github.javaparser.ast.modules.ModuleDeclaration setOpen(boolean)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>", "com.github.javaparser.ast.modules.ModuleDeclaration.getModuleStmts()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt> getModuleStmts()"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.setModuleStmts(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>)", "public com.github.javaparser.ast.modules.ModuleDeclaration setModuleStmts(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.modules.ModuleStmt>)"], ["com.github.javaparser.ast.modules.ModuleDeclaration", "com.github.javaparser.ast.modules.ModuleDeclaration.clone()", "public com.github.javaparser.ast.modules.ModuleDeclaration clone()"], ["com.github.javaparser.metamodel.ModuleDeclarationMetaModel", "com.github.javaparser.ast.modules.ModuleDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.ModuleDeclarationMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.modules.ModuleDeclaration.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.modules.ModuleDeclaration.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDeclaration.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.modules.ModuleDeclaration.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDeclaration.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.modules.ModuleDeclaration.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.observer.PropagatingAstObserver", "com.github.javaparser.ast.observer.PropagatingAstObserver()", "public com.github.javaparser.ast.observer.PropagatingAstObserver()"], ["com.github.javaparser.ast.observer.PropagatingAstObserver", "com.github.javaparser.ast.observer.PropagatingAstObserver.transformInPropagatingObserver(com.github.javaparser.ast.observer.AstObserver)", "public static com.github.javaparser.ast.observer.PropagatingAstObserver transformInPropagatingObserver(com.github.javaparser.ast.observer.AstObserver)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public final void propertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.listChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)", "public final void listChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.listReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void listReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)", "public void concretePropertyChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.observer.ObservableProperty, java.lang.Object, java.lang.Object)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)", "public void concreteListChange(com.github.javaparser.ast.NodeList, com.github.javaparser.ast.observer.AstObserver$ListChangeType, int, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.concreteListReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void concreteListReplacement(com.github.javaparser.ast.NodeList, int, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["void", "com.github.javaparser.ast.observer.PropagatingAstObserver.parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public void parentChange(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.validator.TreeVisitorValidator", "com.github.javaparser.ast.validator.TreeVisitorValidator(com.github.javaparser.ast.validator.Validator)", "public com.github.javaparser.ast.validator.TreeVisitorValidator(com.github.javaparser.ast.validator.Validator)"], ["void", "com.github.javaparser.ast.validator.TreeVisitorValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)", "public final void accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.TreeVisitorValidator.accept(java.lang.Object, java.lang.Object)", "public void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator()", "public com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator()"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.NoBinaryIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator()", "public com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator()"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.LongLiteralExpr, java.lang.Object)"], ["void", "com.github.javaparser.ast.validator.chunks.NoUnderscoresInIntegerLiteralsValidator.visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)", "public void visit(com.github.javaparser.ast.expr.IntegerLiteralExpr, java.lang.Object)"], ["com.github.javaparser.ast.validator.VisitorValidator", "com.github.javaparser.ast.validator.VisitorValidator()", "public com.github.javaparser.ast.validator.VisitorValidator()"], ["void", "com.github.javaparser.ast.validator.VisitorValidator.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)", "public void accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.VisitorValidator.accept(java.lang.Object, java.lang.Object)", "public void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators(com.github.javaparser.ast.validator.Validator...)", "public com.github.javaparser.ast.validator.Validators(com.github.javaparser.ast.validator.Validator...)"], ["java.util.List<com.github.javaparser.ast.validator.Validator>", "com.github.javaparser.ast.validator.Validators.getValidators()", "public java.util.List<com.github.javaparser.ast.validator.Validator> getValidators()"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators.remove(com.github.javaparser.ast.validator.Validator)", "public com.github.javaparser.ast.validator.Validators remove(com.github.javaparser.ast.validator.Validator)"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators.replace(com.github.javaparser.ast.validator.Validator, com.github.javaparser.ast.validator.Validator)", "public com.github.javaparser.ast.validator.Validators replace(com.github.javaparser.ast.validator.Validator, com.github.javaparser.ast.validator.Validator)"], ["com.github.javaparser.ast.validator.Validators", "com.github.javaparser.ast.validator.Validators.add(com.github.javaparser.ast.validator.Validator)", "public com.github.javaparser.ast.validator.Validators add(com.github.javaparser.ast.validator.Validator)"], ["void", "com.github.javaparser.ast.validator.Validators.accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)", "public void accept(com.github.javaparser.ast.Node, com.github.javaparser.ast.validator.ProblemReporter)"], ["void", "com.github.javaparser.ast.validator.Validators.accept(java.lang.Object, java.lang.Object)", "public void accept(java.lang.Object, java.lang.Object)"], ["com.github.javaparser.ast.validator.Java1_1Validator", "com.github.javaparser.ast.validator.Java1_1Validator()", "public com.github.javaparser.ast.validator.Java1_1Validator()"], ["com.github.javaparser.ast.validator.Java8Validator", "com.github.javaparser.ast.validator.Java8Validator()", "public com.github.javaparser.ast.validator.Java8Validator()"], ["com.github.javaparser.ast.Node$ObserverRegistrationMode[]", "com.github.javaparser.ast.Node$ObserverRegistrationMode.values()", "public static com.github.javaparser.ast.Node$ObserverRegistrationMode[] values()"], ["com.github.javaparser.ast.Node$ObserverRegistrationMode", "com.github.javaparser.ast.Node$ObserverRegistrationMode.valueOf(java.lang.String)", "public static com.github.javaparser.ast.Node$ObserverRegistrationMode valueOf(java.lang.String)"], ["com.github.javaparser.ast.type.PrimitiveType$Primitive[]", "com.github.javaparser.ast.type.PrimitiveType$Primitive.values()", "public static com.github.javaparser.ast.type.PrimitiveType$Primitive[] values()"], ["com.github.javaparser.ast.type.PrimitiveType$Primitive", "com.github.javaparser.ast.type.PrimitiveType$Primitive.valueOf(java.lang.String)", "public static com.github.javaparser.ast.type.PrimitiveType$Primitive valueOf(java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.PrimitiveType$Primitive.toBoxedType()", "public com.github.javaparser.ast.type.ClassOrInterfaceType toBoxedType()"], ["java.lang.String", "com.github.javaparser.ast.type.PrimitiveType$Primitive.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType()", "public com.github.javaparser.ast.type.UnknownType()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.type.UnknownType(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.type.UnknownType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.UnknownType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.UnknownType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.UnknownType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.UnknownType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.UnknownType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.UnknownType", "com.github.javaparser.ast.type.UnknownType.clone()", "public com.github.javaparser.ast.type.UnknownType clone()"], ["com.github.javaparser.metamodel.UnknownTypeMetaModel", "com.github.javaparser.ast.type.UnknownType.getMetaModel()", "public com.github.javaparser.metamodel.UnknownTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.UnknownType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.UnknownType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnknownType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.UnknownType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.UnknownType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.UnknownType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.UnknownType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ArrayType$ArrayBracketPair(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.getAnnotations()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr> getAnnotations()"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ArrayType$ArrayBracketPair setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ArrayType$ArrayBracketPair", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.setTokenRange(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.type.ArrayType$ArrayBracketPair setTokenRange(com.github.javaparser.TokenRange)"], ["java.util.Optional<com.github.javaparser.TokenRange>", "com.github.javaparser.ast.type.ArrayType$ArrayBracketPair.getTokenRange()", "public java.util.Optional<com.github.javaparser.TokenRange> getTokenRange()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType()", "public com.github.javaparser.ast.type.ClassOrInterfaceType()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(java.lang.String)", "public com.github.javaparser.ast.type.ClassOrInterfaceType(java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.String)", "public com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, java.lang.String)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ClassOrInterfaceType(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["<R, A> R", "com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.ClassOrInterfaceType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.type.ClassOrInterfaceType.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["java.util.Optional<com.github.javaparser.ast.type.ClassOrInterfaceType>", "com.github.javaparser.ast.type.ClassOrInterfaceType.getScope()", "public java.util.Optional<com.github.javaparser.ast.type.ClassOrInterfaceType> getScope()"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.isBoxedType()", "public boolean isBoxedType()"], ["com.github.javaparser.ast.type.PrimitiveType", "com.github.javaparser.ast.type.ClassOrInterfaceType.toUnboxedType()", "public com.github.javaparser.ast.type.PrimitiveType toUnboxedType() throws java.lang.UnsupportedOperationException"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.type.ClassOrInterfaceType setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setScope(com.github.javaparser.ast.type.ClassOrInterfaceType)", "public com.github.javaparser.ast.type.ClassOrInterfaceType setScope(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>>", "com.github.javaparser.ast.type.ClassOrInterfaceType.getTypeArguments()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>> getTypeArguments()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.type.ClassOrInterfaceType setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.ClassOrInterfaceType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.ClassOrInterfaceType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.ClassOrInterfaceType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.removeScope()", "public com.github.javaparser.ast.type.ClassOrInterfaceType removeScope()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()", "public com.github.javaparser.ast.type.ClassOrInterfaceType clone()"], ["com.github.javaparser.metamodel.ClassOrInterfaceTypeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()", "public com.github.javaparser.metamodel.ClassOrInterfaceTypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.replaceScope(com.github.javaparser.ast.type.ClassOrInterfaceType)", "public com.github.javaparser.ast.type.ClassOrInterfaceType replaceScope(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["boolean", "com.github.javaparser.ast.type.ClassOrInterfaceType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ReferenceTypeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()", "public com.github.javaparser.metamodel.ReferenceTypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.ReferenceType", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()", "public com.github.javaparser.ast.type.ReferenceType clone()"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.ClassOrInterfaceType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.ClassOrInterfaceType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.ClassOrInterfaceType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.ClassOrInterfaceType.setTypeArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType()", "public com.github.javaparser.ast.type.VoidType()"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.type.VoidType(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.type.VoidType.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.type.VoidType.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType.setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)", "public com.github.javaparser.ast.type.VoidType setAnnotations(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.AnnotationExpr>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.type.VoidType.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.type.VoidType.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.type.VoidType.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.type.VoidType", "com.github.javaparser.ast.type.VoidType.clone()", "public com.github.javaparser.ast.type.VoidType clone()"], ["com.github.javaparser.metamodel.VoidTypeMetaModel", "com.github.javaparser.ast.type.VoidType.getMetaModel()", "public com.github.javaparser.metamodel.VoidTypeMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.type.VoidType.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.TypeMetaModel", "com.github.javaparser.ast.type.VoidType.getMetaModel()", "public com.github.javaparser.metamodel.TypeMetaModel getMetaModel()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.VoidType.clone()", "public com.github.javaparser.ast.type.Type clone()"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.type.VoidType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.type.Type setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.type.VoidType.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.VoidType.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.type.VoidType.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.type.VoidType.setAnnotations(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setAnnotations(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt()", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt(com.github.javaparser.TokenRange, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, boolean, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["<R, A> R", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getArguments()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getArguments()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getArgument(int)", "public com.github.javaparser.ast.expr.Expression getArgument(int)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setArgument(int, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt setArgument(int, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.addArgument(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt addArgument(com.github.javaparser.ast.expr.Expression)"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getExpression()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getExpression()"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.isThis()", "public boolean isThis()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt setExpression(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setThis(boolean)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt setThis(boolean)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>>", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getTypeArguments()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>> getTypeArguments()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.removeExpression()", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt removeExpression()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt clone()"], ["com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getMetaModel()", "public com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.replaceExpression(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt replaceExpression(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.ExplicitConstructorInvocationStmt.setTypeArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt()", "public com.github.javaparser.ast.stmt.EmptyStmt()"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.stmt.EmptyStmt(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.stmt.EmptyStmt.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.stmt.EmptyStmt.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.stmt.EmptyStmt.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.stmt.EmptyStmt", "com.github.javaparser.ast.stmt.EmptyStmt.clone()", "public com.github.javaparser.ast.stmt.EmptyStmt clone()"], ["com.github.javaparser.metamodel.EmptyStmtMetaModel", "com.github.javaparser.ast.stmt.EmptyStmt.getMetaModel()", "public com.github.javaparser.metamodel.EmptyStmtMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.stmt.EmptyStmt.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.StatementMetaModel", "com.github.javaparser.ast.stmt.EmptyStmt.getMetaModel()", "public com.github.javaparser.metamodel.StatementMetaModel getMetaModel()"], ["com.github.javaparser.ast.stmt.Statement", "com.github.javaparser.ast.stmt.EmptyStmt.clone()", "public com.github.javaparser.ast.stmt.Statement clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.stmt.EmptyStmt.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.stmt.EmptyStmt.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.stmt.EmptyStmt.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr()", "public com.github.javaparser.ast.expr.NullLiteralExpr()"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr(com.github.javaparser.TokenRange)", "public com.github.javaparser.ast.expr.NullLiteralExpr(com.github.javaparser.TokenRange)"], ["<R, A> R", "com.github.javaparser.ast.expr.NullLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.NullLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.NullLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.NullLiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()", "public com.github.javaparser.ast.expr.NullLiteralExpr clone()"], ["com.github.javaparser.metamodel.NullLiteralExprMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NullLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.NullLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.NullLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.NullLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr()", "public com.github.javaparser.ast.expr.AnnotationExpr()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.AnnotationExpr(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.AnnotationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.Name", "com.github.javaparser.ast.expr.AnnotationExpr.getName()", "public com.github.javaparser.ast.expr.Name getName()"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.expr.AnnotationExpr setName(com.github.javaparser.ast.expr.Name)"], ["boolean", "com.github.javaparser.ast.expr.AnnotationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.AnnotationExpr", "com.github.javaparser.ast.expr.AnnotationExpr.clone()", "public com.github.javaparser.ast.expr.AnnotationExpr clone()"], ["com.github.javaparser.metamodel.AnnotationExprMetaModel", "com.github.javaparser.ast.expr.AnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.AnnotationExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.AnnotationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.AnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.AnnotationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.AnnotationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.AnnotationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.AnnotationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.AnnotationExpr.setName(com.github.javaparser.ast.expr.Name)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.Name)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName()", "public com.github.javaparser.ast.expr.SimpleName()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName(java.lang.String)", "public com.github.javaparser.ast.expr.SimpleName(java.lang.String)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.SimpleName(com.github.javaparser.TokenRange, java.lang.String)"], ["<R, A> R", "com.github.javaparser.ast.expr.SimpleName.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.SimpleName.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.lang.String", "com.github.javaparser.ast.expr.SimpleName.getIdentifier()", "public java.lang.String getIdentifier()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName.setIdentifier(java.lang.String)", "public com.github.javaparser.ast.expr.SimpleName setIdentifier(java.lang.String)"], ["boolean", "com.github.javaparser.ast.expr.SimpleName.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["java.lang.String", "com.github.javaparser.ast.expr.SimpleName.asString()", "public java.lang.String asString()"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.SimpleName.clone()", "public com.github.javaparser.ast.expr.SimpleName clone()"], ["com.github.javaparser.metamodel.SimpleNameMetaModel", "com.github.javaparser.ast.expr.SimpleName.getMetaModel()", "public com.github.javaparser.metamodel.SimpleNameMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.SimpleName.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.SimpleName.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SimpleName.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.SimpleName.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.SimpleName.setIdentifier(java.lang.String)", "public com.github.javaparser.ast.Node setIdentifier(java.lang.String)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr()", "public com.github.javaparser.ast.expr.ObjectCreationExpr()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.expr.ObjectCreationExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.Expression, com.github.javaparser.ast.type.ClassOrInterfaceType, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>, com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["<R, A> R", "com.github.javaparser.ast.expr.ObjectCreationExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ObjectCreationExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>>", "com.github.javaparser.ast.expr.ObjectCreationExpr.getAnonymousClassBody()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>> getAnonymousClassBody()"], ["void", "com.github.javaparser.ast.expr.ObjectCreationExpr.addAnonymousClassBody(com.github.javaparser.ast.body.BodyDeclaration<?>)", "public void addAnonymousClassBody(com.github.javaparser.ast.body.BodyDeclaration<?>)"], ["com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.ObjectCreationExpr.getArguments()", "public com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression> getArguments()"], ["java.util.Optional<com.github.javaparser.ast.expr.Expression>", "com.github.javaparser.ast.expr.ObjectCreationExpr.getScope()", "public java.util.Optional<com.github.javaparser.ast.expr.Expression> getScope()"], ["com.github.javaparser.ast.type.ClassOrInterfaceType", "com.github.javaparser.ast.expr.ObjectCreationExpr.getType()", "public com.github.javaparser.ast.type.ClassOrInterfaceType getType()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setAnonymousClassBody(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)", "public com.github.javaparser.ast.expr.ObjectCreationExpr setAnonymousClassBody(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.body.BodyDeclaration<?>>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)", "public com.github.javaparser.ast.expr.ObjectCreationExpr setArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.expr.Expression>)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ObjectCreationExpr setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setType(com.github.javaparser.ast.type.ClassOrInterfaceType)", "public com.github.javaparser.ast.expr.ObjectCreationExpr setType(com.github.javaparser.ast.type.ClassOrInterfaceType)"], ["java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>>", "com.github.javaparser.ast.expr.ObjectCreationExpr.getTypeArguments()", "public java.util.Optional<com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>> getTypeArguments()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)", "public com.github.javaparser.ast.expr.ObjectCreationExpr setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)"], ["java.util.List<com.github.javaparser.ast.NodeList<?>>", "com.github.javaparser.ast.expr.ObjectCreationExpr.getNodeLists()", "public java.util.List<com.github.javaparser.ast.NodeList<?>> getNodeLists()"], ["boolean", "com.github.javaparser.ast.expr.ObjectCreationExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.removeScope()", "public com.github.javaparser.ast.expr.ObjectCreationExpr removeScope()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()", "public com.github.javaparser.ast.expr.ObjectCreationExpr clone()"], ["com.github.javaparser.metamodel.ObjectCreationExprMetaModel", "com.github.javaparser.ast.expr.ObjectCreationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ObjectCreationExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.ObjectCreationExpr", "com.github.javaparser.ast.expr.ObjectCreationExpr.replaceScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.ObjectCreationExpr replaceScope(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.ObjectCreationExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ObjectCreationExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ObjectCreationExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ObjectCreationExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setTypeArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setTypeArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ObjectCreationExpr.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setArguments(com.github.javaparser.ast.NodeList)", "public com.github.javaparser.ast.Node setArguments(com.github.javaparser.ast.NodeList)"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.removeScope()", "public com.github.javaparser.ast.Node removeScope()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ObjectCreationExpr.setScope(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.Node setScope(com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair()", "public com.github.javaparser.ast.expr.MemberValuePair()"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair(java.lang.String, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MemberValuePair(java.lang.String, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MemberValuePair(com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MemberValuePair(com.github.javaparser.TokenRange, com.github.javaparser.ast.expr.SimpleName, com.github.javaparser.ast.expr.Expression)"], ["<R, A> R", "com.github.javaparser.ast.expr.MemberValuePair.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.MemberValuePair.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.expr.SimpleName", "com.github.javaparser.ast.expr.MemberValuePair.getName()", "public com.github.javaparser.ast.expr.SimpleName getName()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.MemberValuePair.getValue()", "public com.github.javaparser.ast.expr.Expression getValue()"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.expr.MemberValuePair setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair.setValue(com.github.javaparser.ast.expr.Expression)", "public com.github.javaparser.ast.expr.MemberValuePair setValue(com.github.javaparser.ast.expr.Expression)"], ["boolean", "com.github.javaparser.ast.expr.MemberValuePair.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.MemberValuePair", "com.github.javaparser.ast.expr.MemberValuePair.clone()", "public com.github.javaparser.ast.expr.MemberValuePair clone()"], ["com.github.javaparser.metamodel.MemberValuePairMetaModel", "com.github.javaparser.ast.expr.MemberValuePair.getMetaModel()", "public com.github.javaparser.metamodel.MemberValuePairMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.MemberValuePair.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.MemberValuePair.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MemberValuePair.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.MemberValuePair.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.MemberValuePair.setName(com.github.javaparser.ast.expr.SimpleName)", "public com.github.javaparser.ast.Node setName(com.github.javaparser.ast.expr.SimpleName)"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr()", "public com.github.javaparser.ast.expr.ClassExpr()"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.ClassExpr(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.ClassExpr(com.github.javaparser.TokenRange, com.github.javaparser.ast.type.Type)"], ["<R, A> R", "com.github.javaparser.ast.expr.ClassExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.ClassExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["com.github.javaparser.ast.type.Type", "com.github.javaparser.ast.expr.ClassExpr.getType()", "public com.github.javaparser.ast.type.Type getType()"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.expr.ClassExpr setType(com.github.javaparser.ast.type.Type)"], ["boolean", "com.github.javaparser.ast.expr.ClassExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["com.github.javaparser.ast.expr.ClassExpr", "com.github.javaparser.ast.expr.ClassExpr.clone()", "public com.github.javaparser.ast.expr.ClassExpr clone()"], ["com.github.javaparser.metamodel.ClassExprMetaModel", "com.github.javaparser.ast.expr.ClassExpr.getMetaModel()", "public com.github.javaparser.metamodel.ClassExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.ClassExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.ClassExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.ClassExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.ClassExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ClassExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.ClassExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.ClassExpr.setType(com.github.javaparser.ast.type.Type)", "public com.github.javaparser.ast.Node setType(com.github.javaparser.ast.type.Type)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr()", "public com.github.javaparser.ast.expr.LongLiteralExpr()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr(java.lang.String)", "public com.github.javaparser.ast.expr.LongLiteralExpr(java.lang.String)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)", "public com.github.javaparser.ast.expr.LongLiteralExpr(com.github.javaparser.TokenRange, java.lang.String)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr(long)", "public com.github.javaparser.ast.expr.LongLiteralExpr(long)"], ["<R, A> R", "com.github.javaparser.ast.expr.LongLiteralExpr.accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)", "public <R, A> R accept(com.github.javaparser.ast.visitor.GenericVisitor<R, A>, A)"], ["<A> void", "com.github.javaparser.ast.expr.LongLiteralExpr.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)", "public <A> void accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)"], ["boolean", "com.github.javaparser.ast.expr.LongLiteralExpr.remove(com.github.javaparser.ast.Node)", "public boolean remove(com.github.javaparser.ast.Node)"], ["long", "com.github.javaparser.ast.expr.LongLiteralExpr.asLong()", "public long asLong()"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.setLong(long)", "public com.github.javaparser.ast.expr.LongLiteralExpr setLong(long)"], ["com.github.javaparser.ast.expr.LongLiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LongLiteralExpr clone()"], ["com.github.javaparser.metamodel.LongLiteralExprMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LongLiteralExprMetaModel getMetaModel()"], ["boolean", "com.github.javaparser.ast.expr.LongLiteralExpr.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)", "public boolean replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)"], ["com.github.javaparser.metamodel.LiteralStringValueExprMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralStringValueExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralStringValueExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralStringValueExpr clone()"], ["com.github.javaparser.metamodel.LiteralExprMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.LiteralExprMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.LiteralExpr", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()", "public com.github.javaparser.ast.expr.LiteralExpr clone()"], ["com.github.javaparser.metamodel.ExpressionMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.ExpressionMetaModel getMetaModel()"], ["com.github.javaparser.ast.expr.Expression", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()", "public com.github.javaparser.ast.expr.Expression clone()"], ["com.github.javaparser.metamodel.NodeMetaModel", "com.github.javaparser.ast.expr.LongLiteralExpr.getMetaModel()", "public com.github.javaparser.metamodel.NodeMetaModel getMetaModel()"], ["com.github.javaparser.ast.Node", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()", "public com.github.javaparser.ast.Node clone()"], ["java.lang.Object", "com.github.javaparser.ast.expr.LongLiteralExpr.clone()", "public java.lang.Object clone() throws java.lang.CloneNotSupportedException"], ["com.github.javaparser.ParseResult", "com.github.javaparser.ParseResult(T, java.util.List<com.github.javaparser.Problem>, java.util.List<com.github.javaparser.JavaToken>, com.github.javaparser.ast.comments.CommentsCollection)", "public com.github.javaparser.ParseResult(T, java.util.List<com.github.javaparser.Problem>, java.util.List<com.github.javaparser.JavaToken>, com.github.javaparser.ast.comments.CommentsCollection)"], ["boolean", "com.github.javaparser.ParseResult.isSuccessful()", "public boolean isSuccessful()"], ["java.util.List<com.github.javaparser.Problem>", "com.github.javaparser.ParseResult.getProblems()", "public java.util.List<com.github.javaparser.Problem> getProblems()"], ["com.github.javaparser.Problem", "com.github.javaparser.ParseResult.getProblem(int)", "public com.github.javaparser.Problem getProblem(int)"], ["java.util.Optional<java.util.List<com.github.javaparser.JavaToken>>", "com.github.javaparser.ParseResult.getTokens()", "public java.util.Optional<java.util.List<com.github.javaparser.JavaToken>> getTokens()"], ["java.util.Optional<com.github.javaparser.ast.comments.CommentsCollection>", "com.github.javaparser.ParseResult.getCommentsCollection()", "public java.util.Optional<com.github.javaparser.ast.comments.CommentsCollection> getCommentsCollection()"], ["java.util.Optional<T>", "com.github.javaparser.ParseResult.getResult()", "public java.util.Optional<T> getResult()"], ["java.lang.String", "com.github.javaparser.ParseResult.toString()", "public java.lang.String toString()"], ["com.github.javaparser.utils.Log$DefaultAdapter", "com.github.javaparser.utils.Log$DefaultAdapter()", "public com.github.javaparser.utils.Log$DefaultAdapter()"], ["void", "com.github.javaparser.utils.Log$DefaultAdapter.info(java.lang.String)", "public void info(java.lang.String)"], ["void", "com.github.javaparser.utils.Log$DefaultAdapter.trace(java.lang.String)", "public void trace(java.lang.String)"], ["void", "com.github.javaparser.utils.Log$DefaultAdapter.error(java.lang.Throwable, java.lang.String)", "public void error(java.lang.Throwable, java.lang.String)"], ["com.github.javaparser.utils.Log", "com.github.javaparser.utils.Log()", "public com.github.javaparser.utils.Log()"], ["void", "com.github.javaparser.utils.Log.setAdapter(com.github.javaparser.utils.Log$Adapter)", "public static void setAdapter(com.github.javaparser.utils.Log$Adapter)"], ["void", "com.github.javaparser.utils.Log.trace(java.lang.String, java.lang.Object...)", "public static void trace(java.lang.String, java.lang.Object...)"], ["void", "com.github.javaparser.utils.Log.info(java.lang.String, java.lang.Object...)", "public static void info(java.lang.String, java.lang.Object...)"], ["void", "com.github.javaparser.utils.Log.error(java.lang.Throwable)", "public static void error(java.lang.Throwable)"], ["void", "com.github.javaparser.utils.Log.error(java.lang.Throwable, java.lang.String, java.lang.Object...)", "public static void error(java.lang.Throwable, java.lang.String, java.lang.Object...)"], ["void", "com.github.javaparser.utils.Log.error(java.lang.String, java.lang.Object...)", "public static void error(java.lang.String, java.lang.Object...)"], ["com.github.javaparser.JavaParserBuild", "com.github.javaparser.JavaParserBuild()", "public com.github.javaparser.JavaParserBuild()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken(com.github.javaparser.Token, java.util.List<com.github.javaparser.JavaToken>)", "public com.github.javaparser.JavaToken(com.github.javaparser.Token, java.util.List<com.github.javaparser.JavaToken>)"], ["com.github.javaparser.Range", "com.github.javaparser.JavaToken.getRange()", "public com.github.javaparser.Range getRange()"], ["int", "com.github.javaparser.JavaToken.getKind()", "public int getKind()"], ["java.lang.String", "com.github.javaparser.JavaToken.getText()", "public java.lang.String getText()"], ["java.util.Optional<com.github.javaparser.JavaToken>", "com.github.javaparser.JavaToken.getNextToken()", "public java.util.Optional<com.github.javaparser.JavaToken> getNextToken()"], ["java.util.Optional<com.github.javaparser.JavaToken>", "com.github.javaparser.JavaToken.getPreviousToken()", "public java.util.Optional<com.github.javaparser.JavaToken> getPreviousToken()"], ["java.lang.String", "com.github.javaparser.JavaToken.toString()", "public java.lang.String toString()"], ["boolean", "com.github.javaparser.JavaToken.valid()", "public boolean valid()"], ["boolean", "com.github.javaparser.JavaToken.invalid()", "public boolean invalid()"], ["com.github.javaparser.JavaToken", "com.github.javaparser.JavaToken.orIfInvalid(com.github.javaparser.JavaToken)", "public com.github.javaparser.JavaToken orIfInvalid(com.github.javaparser.JavaToken)"], ["com.github.javaparser.Range", "com.github.javaparser.Range(com.github.javaparser.Position, com.github.javaparser.Position)", "public com.github.javaparser.Range(com.github.javaparser.Position, com.github.javaparser.Position)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.range(com.github.javaparser.Position, com.github.javaparser.Position)", "public static com.github.javaparser.Range range(com.github.javaparser.Position, com.github.javaparser.Position)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.range(int, int, int, int)", "public static com.github.javaparser.Range range(int, int, int, int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withBeginColumn(int)", "public com.github.javaparser.Range withBeginColumn(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withBeginLine(int)", "public com.github.javaparser.Range withBeginLine(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withEndColumn(int)", "public com.github.javaparser.Range withEndColumn(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withEndLine(int)", "public com.github.javaparser.Range withEndLine(int)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withBegin(com.github.javaparser.Position)", "public com.github.javaparser.Range withBegin(com.github.javaparser.Position)"], ["com.github.javaparser.Range", "com.github.javaparser.Range.withEnd(com.github.javaparser.Position)", "public com.github.javaparser.Range withEnd(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Range.contains(com.github.javaparser.Range)", "public boolean contains(com.github.javaparser.Range)"], ["boolean", "com.github.javaparser.Range.strictlyContains(com.github.javaparser.Range)", "public boolean strictlyContains(com.github.javaparser.Range)"], ["boolean", "com.github.javaparser.Range.isBefore(com.github.javaparser.Position)", "public boolean isBefore(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Range.isAfter(com.github.javaparser.Position)", "public boolean isAfter(com.github.javaparser.Position)"], ["boolean", "com.github.javaparser.Range.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.Range.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.Range.toString()", "public java.lang.String toString()"], ["com.github.javaparser.TokenTypes", "com.github.javaparser.TokenTypes()", "public com.github.javaparser.TokenTypes()"], ["boolean", "com.github.javaparser.TokenTypes.isWhitespace(int)", "public static boolean isWhitespace(int)"], ["boolean", "com.github.javaparser.TokenTypes.isEndOfLineCharacter(int)", "public static boolean isEndOfLineCharacter(int)"], ["boolean", "com.github.javaparser.TokenTypes.isWhitespaceOrComment(int)", "public static boolean isWhitespaceOrComment(int)"], ["boolean", "com.github.javaparser.TokenTypes.isSpaceOrTab(int)", "public static boolean isSpaceOrTab(int)"], ["boolean", "com.github.javaparser.TokenTypes.isComment(int)", "public static boolean isComment(int)"], ["int", "com.github.javaparser.TokenTypes.eolToken()", "public static int eolToken()"], ["int", "com.github.javaparser.TokenTypes.spaceToken()", "public static int spaceToken()"], ["com.github.javaparser.javadoc.JavadocBlockTag$Type[]", "com.github.javaparser.javadoc.JavadocBlockTag$Type.values()", "public static com.github.javaparser.javadoc.JavadocBlockTag$Type[] values()"], ["com.github.javaparser.javadoc.JavadocBlockTag$Type", "com.github.javaparser.javadoc.JavadocBlockTag$Type.valueOf(java.lang.String)", "public static com.github.javaparser.javadoc.JavadocBlockTag$Type valueOf(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocDescriptionElement", "com.github.javaparser.javadoc.description.JavadocInlineTag.fromText(java.lang.String)", "public static com.github.javaparser.javadoc.description.JavadocDescriptionElement fromText(java.lang.String)"], ["com.github.javaparser.javadoc.description.JavadocInlineTag", "com.github.javaparser.javadoc.description.JavadocInlineTag(java.lang.String, com.github.javaparser.javadoc.description.JavadocInlineTag$Type, java.lang.String)", "public com.github.javaparser.javadoc.description.JavadocInlineTag(java.lang.String, com.github.javaparser.javadoc.description.JavadocInlineTag$Type, java.lang.String)"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocInlineTag.toText()", "public java.lang.String toText()"], ["boolean", "com.github.javaparser.javadoc.description.JavadocInlineTag.equals(java.lang.Object)", "public boolean equals(java.lang.Object)"], ["int", "com.github.javaparser.javadoc.description.JavadocInlineTag.hashCode()", "public int hashCode()"], ["java.lang.String", "com.github.javaparser.javadoc.description.JavadocInlineTag.toString()", "public java.lang.String toString()"], ["com.github.javaparser.javadoc.description.JavadocInlineTag$Type[]", "com.github.javaparser.javadoc.description.JavadocInlineTag$Type.values()", "public static com.github.javaparser.javadoc.description.JavadocInlineTag$Type[] values()"], ["com.github.javaparser.javadoc.description.JavadocInlineTag$Type", "com.github.javaparser.javadoc.description.JavadocInlineTag$Type.valueOf(java.lang.String)", "public static com.github.javaparser.javadoc.description.JavadocInlineTag$Type valueOf(java.lang.String)"], ["com.github.javaparser.ParseProblemException", "com.github.javaparser.ParseProblemException(java.util.List<com.github.javaparser.Problem>)", "public com.github.javaparser.ParseProblemException(java.util.List<com.github.javaparser.Problem>)"], ["com.github.javaparser.ParseProblemException", "com.github.javaparser.ParseProblemException(java.lang.Throwable)", "public com.github.javaparser.ParseProblemException(java.lang.Throwable)"], ["java.util.List<com.github.javaparser.Problem>", "com.github.javaparser.ParseProblemException.getProblems()", "public java.util.List<com.github.javaparser.Problem> getProblems()"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.Reader)", "public static com.github.javaparser.Provider provider(java.io.Reader)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.InputStream, java.nio.charset.Charset)", "public static com.github.javaparser.Provider provider(java.io.InputStream, java.nio.charset.Charset)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.InputStream)", "public static com.github.javaparser.Provider provider(java.io.InputStream)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.File, java.nio.charset.Charset)", "public static com.github.javaparser.Provider provider(java.io.File, java.nio.charset.Charset) throws java.io.FileNotFoundException"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.io.File)", "public static com.github.javaparser.Provider provider(java.io.File) throws java.io.FileNotFoundException"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.nio.file.Path, java.nio.charset.Charset)", "public static com.github.javaparser.Provider provider(java.nio.file.Path, java.nio.charset.Charset) throws java.io.IOException"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.nio.file.Path)", "public static com.github.javaparser.Provider provider(java.nio.file.Path) throws java.io.IOException"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.provider(java.lang.String)", "public static com.github.javaparser.Provider provider(java.lang.String)"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.resourceProvider(java.lang.ClassLoader, java.lang.String, java.nio.charset.Charset)", "public static com.github.javaparser.Provider resourceProvider(java.lang.ClassLoader, java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.resourceProvider(java.lang.String, java.nio.charset.Charset)", "public static com.github.javaparser.Provider resourceProvider(java.lang.String, java.nio.charset.Charset) throws java.io.IOException"], ["com.github.javaparser.Provider", "com.github.javaparser.Providers.resourceProvider(java.lang.String)", "public static com.github.javaparser.Provider resourceProvider(java.lang.String) throws java.io.IOException"]]}