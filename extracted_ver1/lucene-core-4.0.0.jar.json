{
    "lucene-core-4.0.0.jar": [
        [
            "java.lang.Package",
            "org.apache.lucene.LucenePackage.get()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy",
            "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy.getReusableComponents(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer$GlobalReuseStrategy.setReusableComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy",
            "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy.getReusableComponents(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer$PerFieldReuseStrategy.setReusableComponents(java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$ReuseStrategy",
            "org.apache.lucene.analysis.Analyzer$ReuseStrategy()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer$ReuseStrategy.close()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer)"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenStream()"
        ],
        [
            "org.apache.lucene.analysis.Tokenizer",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenizer()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.analysis.Analyzer()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.analysis.Analyzer(org.apache.lucene.analysis.Analyzer$ReuseStrategy)"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.analysis.Analyzer.tokenStream(java.lang.String, java.io.Reader)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Analyzer.getOffsetGap(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer.close()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.AnalyzerWrapper.getPositionIncrementGap(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.AnalyzerWrapper.getOffsetGap(java.lang.String)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.analysis.AnalyzerWrapper.initReader(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.analysis.CachingTokenFilter",
            "org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.CachingTokenFilter.incrementToken()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.CachingTokenFilter.end()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.CachingTokenFilter.reset()"
        ],
        [
            "org.apache.lucene.analysis.CharFilter",
            "org.apache.lucene.analysis.CharFilter(java.io.Reader)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.CharFilter.close()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.CharFilter.correctOffset(int)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.NumericTokenStream$NumericAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getBytesRef()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.fillBytesRef()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getShift()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.setShift(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.incShift()"
        ],
        [
            "long",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getRawValue()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getValueSize()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.init(long, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream()"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream(int)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeSource$AttributeFactory, int)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setLongValue(long)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setIntValue(int)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setDoubleValue(double)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setFloatValue(float)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream.reset()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.NumericTokenStream.incrementToken()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream.getPrecisionStep()"
        ],
        [
            "org.apache.lucene.analysis.Token$TokenAttributeFactory",
            "org.apache.lucene.analysis.Token$TokenAttributeFactory(org.apache.lucene.util.AttributeSource$AttributeFactory)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.Token$TokenAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.Token$TokenAttributeFactory.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token$TokenAttributeFactory.hashCode()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(int, int)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(int, int, java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(int, int, int)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(java.lang.String, int, int)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(java.lang.String, int, int, java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(java.lang.String, int, int, int)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(char[], int, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setPositionIncrement(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.getPositionIncrement()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setPositionLength(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.getPositionLength()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.endOffset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setOffset(int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.Token.type()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setType(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.getFlags()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setFlags(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.Token.getPayload()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setPayload(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.clear()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.clone(char[], int, int, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.Token.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.hashCode()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.reinit(char[], int, int, int, int, java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.reinit(char[], int, int, int, int)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, int, int, java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int)"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.reinit(java.lang.String, int, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token, char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenFilter.end()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenFilter.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenFilter.reset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStream.end()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStream.reset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStream.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Tokenizer.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Tokenizer.setReader(java.io.Reader)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyBuffer(char[], int, int)"
        ],
        [
            "char[]",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.buffer()"
        ],
        [
            "char[]",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeBuffer(int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setLength(int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setEmpty()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.fillBytesRef()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.getBytesRef()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.length()"
        ],
        [
            "char",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.charAt(int)"
        ],
        [
            "java.lang.CharSequence",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.subSequence(int, int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.StringBuilder)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clear()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.toString()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.isKeyword()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.setKeyword(boolean)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.setPositionLength(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.getPositionLength()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTermState.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.BlockTermState.toString()"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.setState(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.nextLeaf()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.nextNonLeaf()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.getTermBlockOrd()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum$Frame.decodeMetaData()"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader, org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.termState()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.ord()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$IntersectEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.setFloorData(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.getTermBlockOrd()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.nextLeaf()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.nextNonLeaf()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToFloorFrame(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.decodeMetaData()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToSubBlock(long)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToTerm(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToTermLeaf(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum$Frame.scanToTermNonLeaf(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum(org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader)"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader$Stats",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.computeBlockStats()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.termState()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader$SegmentTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader$Stats",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.computeStats()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.hasPayloads()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.getDocCount()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.BlockTreeTermsReader$FieldReader.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.BlockTreeTermsReader$Stats.toString()"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsReader",
            "org.apache.lucene.codecs.BlockTreeTermsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.codecs.PostingsReaderBase, org.apache.lucene.store.IOContext, java.lang.String, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsReader.close()"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.BlockTreeTermsReader.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.BlockTreeTermsReader.size()"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List<org.apache.lucene.util.fst.FST<org.apache.lucene.util.BytesRef>>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock.compileIndex(java.util.List<org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock>, org.apache.lucene.store.RAMOutputStream)"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter$FindBlocks.freeze(org.apache.lucene.util.fst.Builder$UnCompiledNode<java.lang.Object>[], int, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.codecs.PostingsConsumer",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.startTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.finishTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.TermStats)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.finish(long, long, int)"
        ],
        [
            "org.apache.lucene.codecs.BlockTreeTermsWriter",
            "org.apache.lucene.codecs.BlockTreeTermsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int)"
        ],
        [
            "org.apache.lucene.codecs.TermsConsumer",
            "org.apache.lucene.codecs.BlockTreeTermsWriter.addField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTreeTermsWriter.close()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.Codec.getName()"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.codecs.Codec.forName(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.Codec.reloadCodecs(java.lang.ClassLoader)"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.codecs.Codec.getDefault()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.Codec.setDefault(org.apache.lucene.codecs.Codec)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.Codec.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.CodecUtil.writeHeader(org.apache.lucene.store.DataOutput, java.lang.String, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.headerLength(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.checkHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.checkHeaderNoMagic(org.apache.lucene.store.DataInput, java.lang.String, int, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getArray()"
        ],
        [
            "double",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getInt(int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.newFromInput(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.newFromArray(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.toBytes(long, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesArraySource$ByteValues.getArray()"
        ],
        [
            "double[]",
            "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getArray()"
        ],
        [
            "double",
            "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getFloat(int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.newFromInput(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.newFromArray(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesArraySource$DoubleValues.getArray()"
        ],
        [
            "float[]",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getArray()"
        ],
        [
            "double",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getFloat(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.toBytes(double, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.newFromInput(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.newFromArray(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesArraySource$FloatValues.getArray()"
        ],
        [
            "int[]",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getArray()"
        ],
        [
            "double",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getInt(int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.newFromInput(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.toBytes(long, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.newFromArray(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesArraySource$IntValues.getArray()"
        ],
        [
            "long[]",
            "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getArray()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getInt(int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$LongValues.newFromInput(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$LongValues.newFromArray(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesArraySource$LongValues.getArray()"
        ],
        [
            "short[]",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getArray()"
        ],
        [
            "double",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getInt(int)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.newFromInput(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.toBytes(long, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.newFromArray(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesArraySource$ShortValues.getArray()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesArraySource",
            "org.apache.lucene.codecs.DocValuesArraySource.forType(org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesArraySource.hasArray()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource.toBytes(long, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource.toBytes(double, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource.copyLong(org.apache.lucene.util.BytesRef, long)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource.copyInt(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesArraySource.copyShort(org.apache.lucene.util.BytesRef, short)"
        ],
        [
            "short",
            "org.apache.lucene.codecs.DocValuesArraySource.asShort(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.DocValuesArraySource.asInt(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.DocValuesArraySource.asLong(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[])"
        ],
        [
            "void",
            "org.apache.lucene.codecs.FieldsConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.Fields)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.FilterCodec.docValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosFormat",
            "org.apache.lucene.codecs.FilterCodec.fieldInfosFormat()"
        ],
        [
            "org.apache.lucene.codecs.LiveDocsFormat",
            "org.apache.lucene.codecs.FilterCodec.liveDocsFormat()"
        ],
        [
            "org.apache.lucene.codecs.NormsFormat",
            "org.apache.lucene.codecs.FilterCodec.normsFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.FilterCodec.postingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoFormat",
            "org.apache.lucene.codecs.FilterCodec.segmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsFormat",
            "org.apache.lucene.codecs.FilterCodec.storedFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsFormat",
            "org.apache.lucene.codecs.FilterCodec.termVectorsFormat()"
        ],
        [
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.setMergeState(org.apache.lucene.index.MergeState)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.getNumSubs()"
        ],
        [
            "org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[]",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.getSubs()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.MappingMultiDocsAndPositionsEnum.getPayload()"
        ],
        [
            "org.apache.lucene.codecs.MappingMultiDocsEnum",
            "org.apache.lucene.codecs.MappingMultiDocsEnum()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.setMergeState(org.apache.lucene.index.MergeState)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.getNumSubs()"
        ],
        [
            "org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[]",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.getSubs()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MappingMultiDocsEnum.nextDoc()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.close()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.length()"
        ],
        [
            "byte",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.seek(long)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.getDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.skipTo(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.init(long, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListWriter.bufferSkip(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.MultiLevelSkipListWriter.writeSkip(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.PerDocConsumer.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.PerDocProducerBase.close()"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.codecs.PerDocProducerBase.docValues(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.PerDocProducerBase.docValuesId(java.lang.String, int)"
        ],
        [
            "org.apache.lucene.codecs.TermStats",
            "org.apache.lucene.codecs.PostingsConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocsEnum, org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.PostingsFormat.getName()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.PostingsFormat.toString()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.PostingsFormat.forName(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.PostingsFormat.reloadPostingsFormats(java.lang.ClassLoader)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.StoredFieldsReader.clone()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.StoredFieldsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.TermStats",
            "org.apache.lucene.codecs.TermStats(int, long)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.TermVectorsReader.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.TermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.TermVectorsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.TermsConsumer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.codecs.PerDocConsumer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec$1.docsConsumer(org.apache.lucene.index.PerDocWriteState)"
        ],
        [
            "org.apache.lucene.codecs.PerDocProducer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec$1.docsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.postingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.docValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.storedFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.termVectorsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.fieldInfosFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.segmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.NormsFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.normsFormat()"
        ],
        [
            "org.apache.lucene.codecs.LiveDocsFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xCodec.liveDocsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFieldInfosFormat.getFieldInfosReader()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosWriter",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFieldInfosFormat.getFieldInfosWriter()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFieldInfosReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.reset(org.apache.lucene.codecs.lucene3x.SegmentTermEnum, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsAndPositionsEnum.getPayload()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.reset(org.apache.lucene.codecs.lucene3x.SegmentTermEnum, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreDocsEnum.docID()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTerms.hasPayloads()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields$PreTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext, int)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields.getUniqueTermCount()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xFields.close()"
        ],
        [
            "org.apache.lucene.codecs.PerDocConsumer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsFormat.docsConsumer(org.apache.lucene.index.PerDocWriteState)"
        ],
        [
            "org.apache.lucene.codecs.PerDocProducer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsFormat.docsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.getInt(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.hasArray()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormSource.getArray()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues(org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer, org.apache.lucene.store.IndexInput, long)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.getDirectSource()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.getType()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues.getValueSize()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer.docValues(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldsConsumer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.lucene3x.Lucene3xPostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getSegmentInfoReader()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoWriter",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getSegmentInfoWriter()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getDocStoreOffset(org.apache.lucene.index.SegmentInfo)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getDocStoreSegment(org.apache.lucene.index.SegmentInfo)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat.getDocStoreIsCompoundFile(org.apache.lucene.index.SegmentInfo)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader.readLegacyInfos(org.apache.lucene.index.SegmentInfos, org.apache.lucene.store.Directory, org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "org.apache.lucene.index.SegmentInfo",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader(org.apache.lucene.store.IndexInput, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.init(long, long, long, int, boolean)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.getFreqPointer()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.getProxPointer()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xSkipListReader.getPayloadLength()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsWriter",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.checkCodeVersion(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene3x.Lucene3xStoredFieldsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat.vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsWriter",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsFormat.vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.advance(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsAndPositionsEnum.endOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.advance(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVDocsEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields$1.next()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader, int)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVFields.size()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader, long)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTerms.hasPayloads()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum$1.compare(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings, org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TermAndPostings)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum(org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.canReuse(org.apache.lucene.store.IndexInput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.reset(int, long, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader$TVTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.close()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.get(int)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene3x.Lucene3xTermVectorsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs(org.apache.lucene.store.IndexInput, org.apache.lucene.codecs.lucene3x.TermInfosReader, org.apache.lucene.index.FieldInfos)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.seek(org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.setLiveDocs(org.apache.lucene.util.Bits)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.seek(org.apache.lucene.codecs.lucene3x.SegmentTermEnum)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.close()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.doc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.freq()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.next()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.read(int[], int[])"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.SegmentTermDocs.skipTo(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.next()"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.docFreq()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.SegmentTermEnum.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput, org.apache.lucene.codecs.lucene3x.TermInfosReader, org.apache.lucene.index.FieldInfos)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.close()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.nextPosition()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.next()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.read(int[], int[])"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.getPayloadLength()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.getPayload()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.SegmentTermPositions.isPayloadAvailable()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.TermBuffer.compareTo(org.apache.lucene.codecs.lucene3x.TermBuffer)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermBuffer.read(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfos)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermBuffer.set(org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermBuffer.set(org.apache.lucene.codecs.lucene3x.TermBuffer)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermBuffer.reset()"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.codecs.lucene3x.TermBuffer.toTerm()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.TermInfo",
            "org.apache.lucene.codecs.lucene3x.TermInfo()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.TermInfo",
            "org.apache.lucene.codecs.lucene3x.TermInfo(int, long, long)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.TermInfo",
            "org.apache.lucene.codecs.lucene3x.TermInfo(org.apache.lucene.codecs.lucene3x.TermInfo)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermInfo.set(int, long, long, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermInfo.set(org.apache.lucene.codecs.lucene3x.TermInfo)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm(org.apache.lucene.index.Term)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.hashCode()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.clone()"
        ],
        [
            "org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$CloneableTerm.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$TermInfoAndOrd",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader$TermInfoAndOrd(org.apache.lucene.codecs.lucene3x.TermInfo, long)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader.getSkipInterval()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader.getMaxSkipLevels()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader.cacheCurrentTerm(org.apache.lucene.codecs.lucene3x.SegmentTermEnum)"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.SegmentTermEnum",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader.terms()"
        ],
        [
            "org.apache.lucene.codecs.lucene3x.SegmentTermEnum",
            "org.apache.lucene.codecs.lucene3x.TermInfosReader.terms(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.BitVector",
            "org.apache.lucene.codecs.lucene40.BitVector(int)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.BitVector",
            "org.apache.lucene.codecs.lucene40.BitVector.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.BitVector.set(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.BitVector.getAndSet(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.BitVector.clear(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.BitVector.getAndClear(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.BitVector.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.BitVector.size()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.BitVector.length()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.BitVector.count()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.BitVector.getRecomputedCount()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.BitVector.getVersion()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.BitVector.write(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.BitVector.invertAll()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.BitVector.setAll()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.BitVector",
            "org.apache.lucene.codecs.lucene40.BitVector(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene40.BitVector.clone()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec$1.getPostingsFormatForField(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40Codec",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.storedFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.termVectorsFormat()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.docValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.postingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.fieldInfosFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.segmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.NormsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.normsFormat()"
        ],
        [
            "org.apache.lucene.codecs.LiveDocsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.liveDocsFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40Codec.getPostingsFormatForField(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer(org.apache.lucene.index.PerDocWriteState, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesConsumer.abort()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.PerDocConsumer",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat.docsConsumer(org.apache.lucene.index.PerDocWriteState)"
        ],
        [
            "org.apache.lucene.codecs.PerDocProducer",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesFormat.docsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesProducer",
            "org.apache.lucene.codecs.lucene40.Lucene40DocValuesProducer(org.apache.lucene.index.SegmentReadState, java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosReader",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat.getFieldInfosReader()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosFormat.getFieldInfosWriter()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter.write(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "byte",
            "org.apache.lucene.codecs.lucene40.Lucene40FieldInfosWriter.docValuesByte(org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat()"
        ],
        [
            "org.apache.lucene.util.MutableBits",
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.newLiveDocs(int)"
        ],
        [
            "org.apache.lucene.util.MutableBits",
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.newLiveDocs(org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.readLiveDocs(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.writeLiveDocs(org.apache.lucene.util.MutableBits, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfoPerCommit, int, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat.files(org.apache.lucene.index.SegmentInfoPerCommit, java.util.Collection<java.lang.String>)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesConsumer(org.apache.lucene.index.PerDocWriteState, java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesProducer",
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat$Lucene40NormsDocValuesProducer(org.apache.lucene.index.SegmentReadState, java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat()"
        ],
        [
            "org.apache.lucene.codecs.PerDocConsumer",
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat.docsConsumer(org.apache.lucene.index.PerDocWriteState)"
        ],
        [
            "org.apache.lucene.codecs.PerDocProducer",
            "org.apache.lucene.codecs.lucene40.Lucene40NormsFormat.docsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsReaderBase",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat.postingsReaderBase(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.PostingsWriterBase",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsBaseFormat.postingsWriterBase(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat(int, int)"
        ],
        [
            "org.apache.lucene.codecs.FieldsConsumer",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat.toString()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$AllDocsSegmentDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$LiveDocsSegmentDocsEnum.nextDoc()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum(org.apache.lucene.codecs.lucene40.Lucene40PostingsReader, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.reset(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsAndPositionsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsEnumBase.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsEnumBase.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentDocsEnumBase.advance(int)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum(org.apache.lucene.codecs.lucene40.Lucene40PostingsReader, org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.reset(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$SegmentFullPositionsEnum.getPayload()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.toString()"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader$StandardTermState.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.init(org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.codecs.BlockTermState",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.newTermState()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.readTermsBlock(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.nextTerm(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.docs(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsReader.docsAndPositions(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter$PendingTerm",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter$PendingTerm(long, long, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter(org.apache.lucene.index.SegmentWriteState, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.start(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.startTerm()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.setField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.startDoc(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.addPosition(int, org.apache.lucene.util.BytesRef, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.finishDoc()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.finishTerm(org.apache.lucene.codecs.TermStats)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.flushTermsBlock(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40PostingsWriter.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoReader",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat.getSegmentInfoReader()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat.getSegmentInfoWriter()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader()"
        ],
        [
            "org.apache.lucene.index.SegmentInfo",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader.read(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoWriter.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader(org.apache.lucene.store.IndexInput, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.init(long, long, long, int, boolean, boolean)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getFreqPointer()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getProxPointer()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getPayloadLength()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListReader.getOffsetLength()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter(int, int, int, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter.setSkipData(int, boolean, int, boolean, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40SkipListWriter.resetSkip()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.close()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.size()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.rawDocs(int[], int, int)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.startDocument(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.abort()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.IndexableField)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.addRawDocuments(org.apache.lucene.store.IndexInput, int[], int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.finish(org.apache.lucene.index.FieldInfos, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat.vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat.vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.advance(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.reset(org.apache.lucene.util.Bits, int[], int[], int[], int[], byte[])"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsAndPositionsEnum.endOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.advance(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVDocsEnum.reset(org.apache.lucene.util.Bits, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields$1.next()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader, int)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVFields.size()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader, long)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTerms.hasPayloads()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum(org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.canReuse(org.apache.lucene.store.IndexInput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.reset(int, long, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader$TVTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.close()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.get(int)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.startDocument(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.startTerm(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.addPosition(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.abort()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.finish(org.apache.lucene.index.FieldInfos, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.Lucene40TermVectorsWriter.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.Bytes$BytesReaderBase.close()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.Bytes$BytesReaderBase.getType()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.values.Bytes$BytesSortedSourceBase.hasPackedDocToOrd()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.codecs.lucene40.values.Bytes$BytesSortedSourceBase.getDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.Bytes$BytesSortedSourceBase.ord(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.Bytes$DerefBytesWriterBase.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.Bytes$DerefBytesWriterBase.getValueSize()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.Bytes$DerefBytesWriterBase.finish(int)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.Bytes$Mode[]",
            "org.apache.lucene.codecs.lucene40.values.Bytes$Mode.values()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.Bytes$Mode",
            "org.apache.lucene.codecs.lucene40.values.Bytes$Mode.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.values.Bytes.getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.codecs.lucene40.values.Bytes$Mode, boolean, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.codecs.lucene40.values.Bytes.getValues(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.codecs.lucene40.values.Bytes$Mode, boolean, int, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.DirectSource",
            "org.apache.lucene.codecs.lucene40.values.DirectSource(org.apache.lucene.store.IndexInput, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.DirectSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.values.DirectSource.getInt(int)"
        ],
        [
            "double",
            "org.apache.lucene.codecs.lucene40.values.DirectSource.getFloat(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.DocValuesWriterBase.close()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.values.DocValuesWriterBase.addValuesField(org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.getDirectSource()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.getValueSize()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.getType()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefReader.close()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$FixedDerefSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer.finish(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer.getValueSize()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedDerefBytesImpl$Writer.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.ord(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.hasPackedDocToOrd()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.getDocToOrd()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$DirectFixedSortedSource.getValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$FixedSortedSource.getValueCount()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$FixedSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type, java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader.getDirectSource()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Reader.getValueSize()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[])"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedSortedBytesImpl$Writer.finishInternal(int)"
        ],
        [
            "double",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getInt(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$DirectFixedStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedBytesWriterBase.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedBytesWriterBase.getValueSize()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.load()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.close()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.getDirectSource()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.getValueSize()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightReader.getType()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource(org.apache.lucene.store.IndexInput, int, int, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$FixedStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource(org.apache.lucene.store.IndexInput, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource.hasArray()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource.getArray()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$SingleByteSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer.finish(int)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.Floats$FloatsReader.load()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter",
            "org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.Floats$FloatsWriter.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.values.Floats.getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.codecs.lucene40.values.Floats.getValues(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.Ints$IntsReader.load()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter",
            "org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.Ints$IntsWriter.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.values.Ints.getWriter(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.index.DocValues$Type, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.codecs.lucene40.values.Ints.getValues(org.apache.lucene.store.Directory, java.lang.String, int, org.apache.lucene.index.DocValues$Type, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.load()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.close()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.getType()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsReader.getDirectSource()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource(org.apache.lucene.store.IndexInput, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsSource.getInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.PackedIntValues$PackedIntsWriter.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.getDirectSource()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.getType()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefReader.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput, long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$VarDerefSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarDerefBytesImpl$Writer.finishInternal(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.ord(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.hasPackedDocToOrd()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.getDocToOrd()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$DirectSortedSource.getValueCount()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.getDirectSource()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.getType()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Reader.close()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$VarSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$VarSortedSource.getValueCount()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer.merge(org.apache.lucene.index.MergeState, org.apache.lucene.index.DocValues[])"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarSortedBytesImpl$Writer.finishInternal(int)"
        ],
        [
            "double",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$DirectVarStraightSource.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$DirectVarStraightSource.getInt(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$DirectVarStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.getDirectSource()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.getType()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightReader.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource(org.apache.lucene.store.IndexInput, org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$VarStraightSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.add(int, org.apache.lucene.index.IndexableField)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.finish(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.ramBytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene40.values.VarStraightBytesImpl$Writer.getValueSize()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.lucene40.values.Writer.create(org.apache.lucene.index.DocValues$Type, java.lang.String, org.apache.lucene.store.Directory, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.Counter, org.apache.lucene.store.IOContext, float)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsConsumerAndSuffix.close()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.size()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.close()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.TermsConsumer",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.addField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.close()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldsConsumer",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.document.ByteDocValuesField",
            "org.apache.lucene.document.ByteDocValuesField(java.lang.String, byte)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compress(byte[], int, int, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compress(byte[], int, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compress(byte[])"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compressString(java.lang.String)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compressString(java.lang.String, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.decompress(org.apache.lucene.util.BytesRef)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.decompress(byte[])"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.decompress(byte[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.CompressionTools.decompressString(byte[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.CompressionTools.decompressString(byte[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.CompressionTools.decompressString(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.DateTools$Resolution[]",
            "org.apache.lucene.document.DateTools$Resolution.values()"
        ],
        [
            "org.apache.lucene.document.DateTools$Resolution",
            "org.apache.lucene.document.DateTools$Resolution.valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.DateTools$Resolution.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.DateTools.dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.DateTools.timeToString(long, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "long",
            "org.apache.lucene.document.DateTools.stringToTime(java.lang.String)"
        ],
        [
            "java.util.Date",
            "org.apache.lucene.document.DateTools.stringToDate(java.lang.String)"
        ],
        [
            "java.util.Date",
            "org.apache.lucene.document.DateTools.round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "long",
            "org.apache.lucene.document.DateTools.round(long, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "org.apache.lucene.document.DerefBytesDocValuesField",
            "org.apache.lucene.document.DerefBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.DerefBytesDocValuesField",
            "org.apache.lucene.document.DerefBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.document.Document()"
        ],
        [
            "void",
            "org.apache.lucene.document.Document.add(org.apache.lucene.index.IndexableField)"
        ],
        [
            "void",
            "org.apache.lucene.document.Document.removeField(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.document.Document.removeFields(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.BytesRef[]",
            "org.apache.lucene.document.Document.getBinaryValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.document.Document.getBinaryValue(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexableField",
            "org.apache.lucene.document.Document.getField(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexableField[]",
            "org.apache.lucene.document.Document.getFields(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.document.Document.getValues(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Document.get(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Document.toString()"
        ],
        [
            "org.apache.lucene.document.DocumentStoredFieldVisitor",
            "org.apache.lucene.document.DocumentStoredFieldVisitor(java.util.Set<java.lang.String>)"
        ],
        [
            "org.apache.lucene.document.DocumentStoredFieldVisitor",
            "org.apache.lucene.document.DocumentStoredFieldVisitor(java.lang.String...)"
        ],
        [
            "org.apache.lucene.document.DocumentStoredFieldVisitor",
            "org.apache.lucene.document.DocumentStoredFieldVisitor()"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.needsField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument()"
        ],
        [
            "org.apache.lucene.document.DoubleDocValuesField",
            "org.apache.lucene.document.DoubleDocValuesField(java.lang.String, double)"
        ],
        [
            "org.apache.lucene.document.DoubleField",
            "org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.DoubleField",
            "org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.FieldType)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$1.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$1.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$1.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$2.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$2.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$2.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$3.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$3.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$3.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$4.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$4.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$4.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$5.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$5.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$5.omitNorms()"
        ],
        [
            "org.apache.lucene.document.Field$Index[]",
            "org.apache.lucene.document.Field$Index.values()"
        ],
        [
            "org.apache.lucene.document.Field$Index",
            "org.apache.lucene.document.Field$Index.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.document.Field$Index",
            "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean)"
        ],
        [
            "org.apache.lucene.document.Field$Index",
            "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.document.Field$ReusableStringReader.read()"
        ],
        [
            "int",
            "org.apache.lucene.document.Field$ReusableStringReader.read(char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$ReusableStringReader.close()"
        ],
        [
            "org.apache.lucene.document.Field$Store[]",
            "org.apache.lucene.document.Field$Store.values()"
        ],
        [
            "org.apache.lucene.document.Field$Store",
            "org.apache.lucene.document.Field$Store.valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$StringTokenStream.incrementToken()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$StringTokenStream.end()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$StringTokenStream.reset()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$StringTokenStream.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$1.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$1.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$1.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$2.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$2.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$2.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$3.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$3.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$3.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$4.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$4.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$4.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$5.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$5.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$5.withOffsets()"
        ],
        [
            "org.apache.lucene.document.Field$TermVector[]",
            "org.apache.lucene.document.Field$TermVector.values()"
        ],
        [
            "org.apache.lucene.document.Field$TermVector",
            "org.apache.lucene.document.Field$TermVector.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.document.Field$TermVector",
            "org.apache.lucene.document.Field$TermVector.toTermVector(boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Field.stringValue()"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.document.Field.readerValue()"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.document.Field.tokenStreamValue()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setStringValue(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setReaderValue(java.io.Reader)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setBytesValue(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setBytesValue(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setByteValue(byte)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setShortValue(short)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setIntValue(int)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setLongValue(long)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setFloatValue(float)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setDoubleValue(double)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setTokenStream(org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Field.name()"
        ],
        [
            "float",
            "org.apache.lucene.document.Field.boost()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setBoost(float)"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.document.Field.numericValue()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.document.Field.binaryValue()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Field.toString()"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.Field.fieldType()"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.document.Field.tokenStream(org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.Field.translateFieldType(org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[])"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[], int, int)"
        ],
        [
            "org.apache.lucene.index.IndexableFieldType",
            "org.apache.lucene.document.Field.fieldType()"
        ],
        [
            "org.apache.lucene.document.FieldType$NumericType[]",
            "org.apache.lucene.document.FieldType$NumericType.values()"
        ],
        [
            "org.apache.lucene.document.FieldType$NumericType",
            "org.apache.lucene.document.FieldType$NumericType.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.FieldType(org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.FieldType()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.freeze()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.indexed()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setIndexed(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.stored()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStored(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.tokenized()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setTokenized(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectors()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectors(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectorOffsets()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectorOffsets(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectorPositions()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectorPositions(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectorPayloads()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectorPayloads(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.omitNorms()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setOmitNorms(boolean)"
        ],
        [
            "org.apache.lucene.index.FieldInfo$IndexOptions",
            "org.apache.lucene.document.FieldType.indexOptions()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setIndexOptions(org.apache.lucene.index.FieldInfo$IndexOptions)"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setDocValueType(org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.document.FieldType.docValueType()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setNumericType(org.apache.lucene.document.FieldType$NumericType)"
        ],
        [
            "org.apache.lucene.document.FieldType$NumericType",
            "org.apache.lucene.document.FieldType.numericType()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setNumericPrecisionStep(int)"
        ],
        [
            "int",
            "org.apache.lucene.document.FieldType.numericPrecisionStep()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.FieldType.toString()"
        ],
        [
            "org.apache.lucene.document.FloatDocValuesField",
            "org.apache.lucene.document.FloatDocValuesField(java.lang.String, float)"
        ],
        [
            "org.apache.lucene.document.FloatField",
            "org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.FloatField",
            "org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.IntDocValuesField",
            "org.apache.lucene.document.IntDocValuesField(java.lang.String, int)"
        ],
        [
            "org.apache.lucene.document.IntField",
            "org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.IntField",
            "org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.LongDocValuesField",
            "org.apache.lucene.document.LongDocValuesField(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.document.LongField",
            "org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.LongField",
            "org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.PackedLongDocValuesField",
            "org.apache.lucene.document.PackedLongDocValuesField(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.document.ShortDocValuesField",
            "org.apache.lucene.document.ShortDocValuesField(java.lang.String, short)"
        ],
        [
            "org.apache.lucene.document.SortedBytesDocValuesField",
            "org.apache.lucene.document.SortedBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.SortedBytesDocValuesField",
            "org.apache.lucene.document.SortedBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, byte[])"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, byte[], int, int)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, int)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, float)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, double)"
        ],
        [
            "org.apache.lucene.document.StraightBytesDocValuesField",
            "org.apache.lucene.document.StraightBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.StraightBytesDocValuesField",
            "org.apache.lucene.document.StraightBytesDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.document.StringField",
            "org.apache.lucene.document.StringField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.TextField",
            "org.apache.lucene.document.TextField(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.document.TextField",
            "org.apache.lucene.document.TextField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.TextField",
            "org.apache.lucene.document.TextField(java.lang.String, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.index.AtomicReaderContext",
            "org.apache.lucene.index.AtomicReader.getContext()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.AtomicReader.hasNorms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.AtomicReader.docFreq(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.AtomicReader.totalTermFreq(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.AtomicReader.terms(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.AtomicReader.termDocsEnum(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.AtomicReader.termPositionsEnum(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.index.AtomicReader.getContext()"
        ],
        [
            "org.apache.lucene.index.AtomicReader",
            "org.apache.lucene.index.AtomicReaderContext.reader()"
        ],
        [
            "org.apache.lucene.index.IndexReader",
            "org.apache.lucene.index.AtomicReaderContext.reader()"
        ],
        [
            "org.apache.lucene.index.AutomatonTermsEnum",
            "org.apache.lucene.index.AutomatonTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.BaseCompositeReader.getTermVectors(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.BaseCompositeReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BaseCompositeReader.hasDeletions()"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.docFreq(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.BaseCompositeReader.totalTermFreq(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.BitsSlice",
            "org.apache.lucene.index.BitsSlice(org.apache.lucene.util.Bits, org.apache.lucene.index.ReaderSlice)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BitsSlice.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.BitsSlice.length()"
        ],
        [
            "org.apache.lucene.index.BufferedDeletes",
            "org.apache.lucene.index.BufferedDeletes()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.BufferedDeletes.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedDeletes.addQuery(org.apache.lucene.search.Query, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedDeletes.addDocID(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedDeletes.addTerm(org.apache.lucene.index.Term, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.BufferedDeletesStream$1.compare(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "int",
            "org.apache.lucene.index.BufferedDeletesStream$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit",
            "org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit(org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.index.BufferedDeletesStream",
            "org.apache.lucene.index.BufferedDeletesStream(org.apache.lucene.util.InfoStream)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedDeletesStream.long push(org.apache.lucene.index.FrozenBufferedDeletes)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedDeletesStream.void clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BufferedDeletesStream.any()"
        ],
        [
            "int",
            "org.apache.lucene.index.BufferedDeletesStream.numTerms()"
        ],
        [
            "long",
            "org.apache.lucene.index.BufferedDeletesStream.bytesUsed()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedDeletesStream.org.apache.lucene.index.BufferedDeletesStream$ApplyDeletesResult applyDeletes(org.apache.lucene.index.IndexWriter$ReaderPool, java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedDeletesStream.void prune(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceReader.init(org.apache.lucene.util.ByteBlockPool, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.ByteSliceReader.eof()"
        ],
        [
            "byte",
            "org.apache.lucene.index.ByteSliceReader.readByte()"
        ],
        [
            "long",
            "org.apache.lucene.index.ByteSliceReader.writeTo(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceReader.nextSlice()"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceReader.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.index.ByteSliceWriter",
            "org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.util.ByteBlockPool)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceWriter.init(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceWriter.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.ByteSliceWriter.getAddress()"
        ],
        [
            "org.apache.lucene.index.CheckIndex",
            "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setCrossCheckTermVectors(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.CheckIndex.getCrossCheckTermVectors()"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status",
            "org.apache.lucene.index.CheckIndex.checkIndex()"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status",
            "org.apache.lucene.index.CheckIndex.checkIndex(java.util.List<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.fixIndex(org.apache.lucene.index.CheckIndex$Status, org.apache.lucene.codecs.Codec)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.main(java.lang.String[])"
        ],
        [
            "boolean",
            "org.apache.lucene.index.CoalescedDeletes$2$1.hasNext()"
        ],
        [
            "org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit",
            "org.apache.lucene.index.CoalescedDeletes$2$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.CoalescedDeletes$2$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.CoalescedDeletes$2$1.next()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.CoalescedDeletes.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.CompositeReader.toString()"
        ],
        [
            "org.apache.lucene.index.CompositeReaderContext",
            "org.apache.lucene.index.CompositeReader.getContext()"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.index.CompositeReader.getContext()"
        ],
        [
            "org.apache.lucene.index.CompositeReaderContext$Builder",
            "org.apache.lucene.index.CompositeReaderContext$Builder(org.apache.lucene.index.CompositeReader)"
        ],
        [
            "org.apache.lucene.index.CompositeReaderContext",
            "org.apache.lucene.index.CompositeReaderContext$Builder.build()"
        ],
        [
            "org.apache.lucene.index.CompositeReader",
            "org.apache.lucene.index.CompositeReaderContext.reader()"
        ],
        [
            "org.apache.lucene.index.IndexReader",
            "org.apache.lucene.index.CompositeReaderContext.reader()"
        ],
        [
            "int",
            "org.apache.lucene.index.ConcurrentMergeScheduler$1.compare(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread, org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread)"
        ],
        [
            "int",
            "org.apache.lucene.index.ConcurrentMergeScheduler$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.void setRunningMerge(org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.org.apache.lucene.index.MergePolicy$OneMerge getRunningMerge()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.org.apache.lucene.index.MergePolicy$OneMerge getCurrentMerge()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.setThreadPriority(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run()"
        ],
        [
            "org.apache.lucene.index.ConcurrentMergeScheduler",
            "org.apache.lucene.index.ConcurrentMergeScheduler()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.setMaxThreadCount(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.ConcurrentMergeScheduler.getMaxThreadCount()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.setMaxMergeCount(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.ConcurrentMergeScheduler.getMaxMergeCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.int getMergeThreadPriority()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void setMergeThreadPriority(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.sync()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.merge(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.store.Directory, int)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexCommit, int)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DirectoryReader.indexExists(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.DirectoryReader.directory()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocFieldProcessor$1.compare(org.apache.lucene.index.DocFieldProcessorPerField, org.apache.lucene.index.DocFieldProcessorPerField)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocFieldProcessor$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.DocFieldProcessor$DocValuesConsumerHolder",
            "org.apache.lucene.index.DocFieldProcessor$DocValuesConsumerHolder(org.apache.lucene.codecs.DocValuesConsumer)"
        ],
        [
            "org.apache.lucene.index.DocFieldProcessor",
            "org.apache.lucene.index.DocFieldProcessor(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.DocFieldConsumer)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocFieldProcessor.flush(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocFieldProcessor.abort()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocFieldProcessor.freeRAM()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocFieldProcessor.processDocument(org.apache.lucene.index.FieldInfos$Builder)"
        ],
        [
            "org.apache.lucene.index.DocFieldProcessorPerField",
            "org.apache.lucene.index.DocFieldProcessorPerField(org.apache.lucene.index.DocFieldProcessor, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocFieldProcessorPerField.addField(org.apache.lucene.index.IndexableField)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocFieldProcessorPerField.abort()"
        ],
        [
            "org.apache.lucene.index.DocInverter",
            "org.apache.lucene.index.DocInverter(org.apache.lucene.index.DocumentsWriterPerThread$DocState, org.apache.lucene.index.InvertedDocConsumer, org.apache.lucene.index.InvertedDocEndConsumer)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocInverter.startDocument()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocInverter.finishDocument()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocInverter.freeRAM()"
        ],
        [
            "org.apache.lucene.index.DocFieldConsumerPerField",
            "org.apache.lucene.index.DocInverter.addField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.DocInverterPerField",
            "org.apache.lucene.index.DocInverterPerField(org.apache.lucene.index.DocInverter, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocInverterPerField.processFields(org.apache.lucene.index.IndexableField[], int)"
        ],
        [
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum(org.apache.lucene.index.DocTermOrds, org.apache.lucene.index.AtomicReader)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.term()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.next()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.totalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocTermOrds$OrdWrappedTermsEnum.seekExact(long)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocTermOrds$TermOrdsIterator.read(int[])"
        ],
        [
            "org.apache.lucene.index.DocTermOrds$TermOrdsIterator",
            "org.apache.lucene.index.DocTermOrds$TermOrdsIterator.reset(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.DocTermOrds.ramUsedInBytes()"
        ],
        [
            "org.apache.lucene.index.DocTermOrds",
            "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocTermOrds",
            "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocTermOrds",
            "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "org.apache.lucene.index.DocTermOrds",
            "org.apache.lucene.index.DocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.util.BytesRef, int, int)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.DocTermOrds.getOrdTermsEnum(org.apache.lucene.index.AtomicReader)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocTermOrds.numTerms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocTermOrds.isEmpty()"
        ],
        [
            "org.apache.lucene.index.DocTermOrds$TermOrdsIterator",
            "org.apache.lucene.index.DocTermOrds.lookup(int, org.apache.lucene.index.DocTermOrds$TermOrdsIterator)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocTermOrds.lookupTerm(org.apache.lucene.index.TermsEnum, int)"
        ],
        [
            "long",
            "org.apache.lucene.index.DocValues$1.getInt(int)"
        ],
        [
            "double",
            "org.apache.lucene.index.DocValues$1.getFloat(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$1.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.index.DocValues$2.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$2.getBitsPerValue()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$2.size()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$2.hasArray()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.DocValues$2.getArray()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$2.get(int, long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.index.DocValues$2.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$3.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$3.ord(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$3.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$3.hasPackedDocToOrd()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.index.DocValues$3.getDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$3.getOrdByValue(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$3.getValueCount()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$SortedSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$SortedSource.hasPackedDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$SortedSource.getOrdByValue(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocValues$SortedSource",
            "org.apache.lucene.index.DocValues$SortedSource.asSortedSource()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocValues$Source.getInt(int)"
        ],
        [
            "double",
            "org.apache.lucene.index.DocValues$Source.getFloat(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$Source.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.DocValues$Source.getType()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$Source.hasArray()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.DocValues$Source.getArray()"
        ],
        [
            "org.apache.lucene.index.DocValues$SortedSource",
            "org.apache.lucene.index.DocValues$Source.asSortedSource()"
        ],
        [
            "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache",
            "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache.org.apache.lucene.index.DocValues$Source load(org.apache.lucene.index.DocValues)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocValues$SourceCache$DirectSourceCache.void invalidate(org.apache.lucene.index.DocValues)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocValues$SourceCache.void close(org.apache.lucene.index.DocValues)"
        ],
        [
            "org.apache.lucene.index.DocValues$Type[]",
            "org.apache.lucene.index.DocValues$Type.values()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.DocValues$Type.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.DocValues.getSource()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocValues.close()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues.getValueSize()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocValues.setCache(org.apache.lucene.index.DocValues$SourceCache)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.DocValues.getDefaultSource(org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.index.DocValues$SortedSource",
            "org.apache.lucene.index.DocValues.getDefaultSortedSource(org.apache.lucene.index.DocValues$Type, int)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.DocsEnum.attributes()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriter.anyDeletions()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermArrayNode.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermNode.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.numGlobalTermDeletes()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.getBufferedDeleteTermsSize()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.bytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.hasNext()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.long activeBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.long flushBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.long netBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.void waitForFlush()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.void setFlushPending(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterFlushControl.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterFlushControl.getNumGlobalTermDeletes()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterFlushControl.getDeleteBytesUsed()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterFlushControl.doApplyAllDeletes()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterFlushControl.setApplyAllDeletes()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterFlushQueue.getTicketCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterPerThread$DocState.testPoint(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterPerThread$DocState.clear()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThread",
            "org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.store.Directory, org.apache.lucene.index.DocumentsWriter, org.apache.lucene.index.FieldInfos$Builder, org.apache.lucene.index.DocumentsWriterPerThread$IndexingChain)"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThread",
            "org.apache.lucene.index.DocumentsWriterPerThread(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.FieldInfos$Builder)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterPerThread.updateDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterPerThread.numDeleteTerms()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterPerThread.toString()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getBytesUsedPerThread()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThread",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getDocumentsWriterPerThread()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.isFlushPending()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThreadPool",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool.clone()"
        ],
        [
            "org.apache.lucene.index.FieldInfo$IndexOptions[]",
            "org.apache.lucene.index.FieldInfo$IndexOptions.values()"
        ],
        [
            "org.apache.lucene.index.FieldInfo$IndexOptions",
            "org.apache.lucene.index.FieldInfo$IndexOptions.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfo(java.lang.String, boolean, int, boolean, boolean, boolean, org.apache.lucene.index.FieldInfo$IndexOptions, org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.DocValues$Type, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "org.apache.lucene.index.FieldInfo$IndexOptions",
            "org.apache.lucene.index.FieldInfo.getIndexOptions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasDocValues()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.FieldInfo.getDocValuesType()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.FieldInfo.getNormType()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.omitsNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasPayloads()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasVectors()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FieldInfo.getAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FieldInfo.putAttribute(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.FieldInfo.attributes()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfos)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos$Builder.addOrUpdate(java.lang.String, org.apache.lucene.index.IndexableFieldType)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos$Builder.fieldInfo(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.FieldInfos(org.apache.lucene.index.FieldInfo[])"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasFreq()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasProx()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasPayloads()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasVectors()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasDocValues()"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInfos.size()"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos.fieldInfo(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos.fieldInfo(int)"
        ],
        [
            "org.apache.lucene.index.FieldInvertState",
            "org.apache.lucene.index.FieldInvertState(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInvertState",
            "org.apache.lucene.index.FieldInvertState(java.lang.String, int, int, int, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getLength()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInvertState.setLength(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getNumOverlap()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInvertState.setNumOverlap(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getOffset()"
        ],
        [
            "float",
            "org.apache.lucene.index.FieldInvertState.getBoost()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInvertState.setBoost(float)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getMaxTermFrequency()"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getUniqueTermCount()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FieldInvertState.getAttributeSource()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FieldInvertState.getName()"
        ],
        [
            "long",
            "org.apache.lucene.index.Fields.getUniqueTermCount()"
        ],
        [
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum(org.apache.lucene.index.DocsAndPositionsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.getPayload()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsAndPositionsEnum.attributes()"
        ],
        [
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum(org.apache.lucene.index.DocsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.advance(int)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilterAtomicReader$FilterDocsEnum.attributes()"
        ],
        [
            "org.apache.lucene.index.FilterAtomicReader$FilterFields",
            "org.apache.lucene.index.FilterAtomicReader$FilterFields(org.apache.lucene.index.Fields)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.FilterAtomicReader$FilterFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterFields.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterAtomicReader$FilterFields.getUniqueTermCount()"
        ],
        [
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms(org.apache.lucene.index.Terms)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.getDocCount()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterAtomicReader$FilterTerms.hasPayloads()"
        ],
        [
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.termState()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilterAtomicReader$FilterTermsEnum.attributes()"
        ],
        [
            "org.apache.lucene.index.FilterAtomicReader",
            "org.apache.lucene.index.FilterAtomicReader(org.apache.lucene.index.AtomicReader)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.FilterAtomicReader.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.FilterAtomicReader.getFieldInfos()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.FilterAtomicReader.getTermVectors(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterAtomicReader.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterAtomicReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterAtomicReader.hasDeletions()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.FilterAtomicReader.fields()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.FilterAtomicReader.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.FilterAtomicReader.getCombinedCoreAndDeletesKey()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FilterAtomicReader.toString()"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.FilterAtomicReader.docValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.FilterAtomicReader.normValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus[]",
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.values()"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus",
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum",
            "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum",
            "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum, boolean)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilteredTermsEnum.attributes()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilteredTermsEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilteredTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilteredTermsEnum.totalTermFreq()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.FilteredTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilteredTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.FilteredTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.FilteredTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.FilteredTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.FilteredTermsEnum.termState()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilteredTermsEnum.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.FlushByRamOrCountsPolicy.onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "void",
            "org.apache.lucene.index.FlushByRamOrCountsPolicy.onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "void",
            "org.apache.lucene.index.FlushPolicy.onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "org.apache.lucene.index.FlushPolicy",
            "org.apache.lucene.index.FlushPolicy.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.FlushPolicy.clone()"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxTermsWriter.flush(java.util.Map<java.lang.String, org.apache.lucene.index.TermsHashConsumerPerField>, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.index.TermsHashConsumerPerField",
            "org.apache.lucene.index.FreqProxTermsWriter.addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray",
            "org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray(int, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.FreqProxTermsWriterPerField",
            "org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FreqProxTermsWriter, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(org.apache.lucene.index.FreqProxTermsWriterPerField)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxTermsWriterPerField.abort()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxTermsWriterPerField.compareTo(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FrozenBufferedDeletes$2$1.hasNext()"
        ],
        [
            "org.apache.lucene.index.BufferedDeletesStream$QueryAndLimit",
            "org.apache.lucene.index.FrozenBufferedDeletes$2$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.FrozenBufferedDeletes$2$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.FrozenBufferedDeletes$2$1.next()"
        ],
        [
            "org.apache.lucene.index.FrozenBufferedDeletes",
            "org.apache.lucene.index.FrozenBufferedDeletes(org.apache.lucene.index.BufferedDeletes, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.FrozenBufferedDeletes.setDelGen(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.FrozenBufferedDeletes.delGen()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FrozenBufferedDeletes.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexCommit.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexCommit.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexCommit.compareTo(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexCommit.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentsFileName()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getDirectory()"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getGeneration()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getUserData()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.delete()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.isDeleted()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexFileDeleter$RefCount.IncRef()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexFileDeleter$RefCount.DecRef()"
        ],
        [
            "org.apache.lucene.index.IndexFileDeleter",
            "org.apache.lucene.index.IndexFileDeleter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, org.apache.lucene.util.InfoStream, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.refresh(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.refresh()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.deletePendingFiles()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.checkpoint(org.apache.lucene.index.SegmentInfos, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexFileDeleter.exists(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.fileNameFromGeneration(java.lang.String, java.lang.String, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.segmentFileName(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexFileNames.matchesExtension(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.stripSegmentName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.parseSegmentName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.stripExtension(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooNewException",
            "org.apache.lucene.index.IndexFormatTooNewException(java.lang.String, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooNewException",
            "org.apache.lucene.index.IndexFormatTooNewException(org.apache.lucene.store.DataInput, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexNotFoundException",
            "org.apache.lucene.index.IndexNotFoundException(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.removeReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.registerParentReader(org.apache.lucene.index.IndexReader)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexReader.getRefCount()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.incRef()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexReader.tryIncRef()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.decRef()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexReader.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexReader.hashCode()"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.IndexReader.open(org.apache.lucene.store.Directory, int)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.IndexReader.open(org.apache.lucene.index.IndexCommit, int)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.IndexReader.getTermVector(int, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexReader.numDeletedDocs()"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.index.IndexReader.document(int)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.index.IndexReader.document(int, java.util.Set<java.lang.String>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexReader.void close()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.IndexReader.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.IndexReader.getCombinedCoreAndDeletesKey()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexUpgrader.main(java.lang.String[])"
        ],
        [
            "org.apache.lucene.index.IndexUpgrader",
            "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.Version)"
        ],
        [
            "org.apache.lucene.index.IndexUpgrader",
            "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.Version, java.io.PrintStream, boolean)"
        ],
        [
            "org.apache.lucene.index.IndexUpgrader",
            "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexUpgrader.upgrade()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.boolean infoIsLive(org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void drop(org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.ReadersAndLiveDocs)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void commit(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriter.numDeletedDocs(org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "org.apache.lucene.index.IndexWriter",
            "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriter.getConfig()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.close(boolean)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.IndexWriter.getDirectory()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.index.IndexWriter.getAnalyzer()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.int maxDoc()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.int numDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.boolean hasDeletions()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.boolean tryDeleteDocument(org.apache.lucene.index.IndexReader, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMerge(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMerge(int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMergeDeletes()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.maybeMerge()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.rollback()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.void deleteAll()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.void waitForMerges()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.store.Directory...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.index.IndexReader...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.prepareCommit()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.prepareCommit(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.commit()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.commit(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexWriter.ramSizeInBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.int numRamDocs()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.merge(org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.java.lang.String segString()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.java.lang.String segString(java.lang.Iterable<org.apache.lucene.index.SegmentInfoPerCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.java.lang.String segString(org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexWriter.isLocked(org.apache.lucene.store.Directory)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.unlock(org.apache.lucene.store.Directory)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.void deleteUnusedFiles()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode[]",
            "org.apache.lucene.index.IndexWriterConfig$OpenMode.values()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode",
            "org.apache.lucene.index.IndexWriterConfig$OpenMode.valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriterConfig.setDefaultWriteLockTimeout(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexWriterConfig.getDefaultWriteLockTimeout()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig(org.apache.lucene.util.Version, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.clone()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode",
            "org.apache.lucene.index.IndexWriterConfig.getOpenMode()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"
        ],
        [
            "org.apache.lucene.index.IndexDeletionPolicy",
            "org.apache.lucene.index.IndexWriterConfig.getIndexDeletionPolicy()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setIndexCommit(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.IndexWriterConfig.getIndexCommit()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setSimilarity(org.apache.lucene.search.similarities.Similarity)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.index.IndexWriterConfig.getSimilarity()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(org.apache.lucene.index.MergeScheduler)"
        ],
        [
            "org.apache.lucene.index.MergeScheduler",
            "org.apache.lucene.index.IndexWriterConfig.getMergeScheduler()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setWriteLockTimeout(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexWriterConfig.getWriteLockTimeout()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setCodec(org.apache.lucene.codecs.Codec)"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.index.IndexWriterConfig.getCodec()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.IndexWriterConfig.getMergePolicy()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxThreadStates(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getMaxThreadStates()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexWriterConfig.getReaderPooling()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setRAMPerThreadHardLimitMB(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getRAMPerThreadHardLimitMB()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.index.IndexWriterConfig.getInfoStream()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.index.IndexWriterConfig.getAnalyzer()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDeleteTerms()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs()"
        ],
        [
            "org.apache.lucene.index.IndexWriter$IndexReaderWarmer",
            "org.apache.lucene.index.IndexWriterConfig.getMergedSegmentWarmer()"
        ],
        [
            "double",
            "org.apache.lucene.index.IndexWriterConfig.getRAMBufferSizeMB()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getReaderTermsIndexDivisor()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getTermIndexInterval()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setInfoStream(org.apache.lucene.util.InfoStream)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setInfoStream(java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setReaderTermsIndexDivisor(int)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setTermIndexInterval(int)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setReaderTermsIndexDivisor(int)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setTermIndexInterval(int)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.IndexWriterConfig.clone()"
        ],
        [
            "org.apache.lucene.index.IntBlockPool",
            "org.apache.lucene.index.IntBlockPool(org.apache.lucene.index.DocumentsWriterPerThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.IntBlockPool.reset()"
        ],
        [
            "void",
            "org.apache.lucene.index.IntBlockPool.nextBuffer()"
        ],
        [
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy",
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.index.LiveIndexWriterConfig.getAnalyzer()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setTermIndexInterval(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getTermIndexInterval()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setMaxBufferedDeleteTerms(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDeleteTerms()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setRAMBufferSizeMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setMaxBufferedDocs(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDocs()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"
        ],
        [
            "org.apache.lucene.index.IndexWriter$IndexReaderWarmer",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setReaderTermsIndexDivisor(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getReaderTermsIndexDivisor()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode",
            "org.apache.lucene.index.LiveIndexWriterConfig.getOpenMode()"
        ],
        [
            "org.apache.lucene.index.IndexDeletionPolicy",
            "org.apache.lucene.index.LiveIndexWriterConfig.getIndexDeletionPolicy()"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.LiveIndexWriterConfig.getIndexCommit()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.index.LiveIndexWriterConfig.getSimilarity()"
        ],
        [
            "org.apache.lucene.index.MergeScheduler",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMergeScheduler()"
        ],
        [
            "long",
            "org.apache.lucene.index.LiveIndexWriterConfig.getWriteLockTimeout()"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.index.LiveIndexWriterConfig.getCodec()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy()"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMaxThreadStates()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LiveIndexWriterConfig.getReaderPooling()"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getRAMPerThreadHardLimitMB()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.index.LiveIndexWriterConfig.getInfoStream()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.LiveIndexWriterConfig.toString()"
        ],
        [
            "org.apache.lucene.index.LogByteSizeMergePolicy",
            "org.apache.lucene.index.LogByteSizeMergePolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForForcedMerge()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()"
        ],
        [
            "org.apache.lucene.index.LogDocMergePolicy",
            "org.apache.lucene.index.LogDocMergePolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()"
        ],
        [
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel",
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel(org.apache.lucene.index.SegmentInfoPerCommit, float, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.LogMergePolicy",
            "org.apache.lucene.index.LogMergePolicy()"
        ],
        [
            "double",
            "org.apache.lucene.index.LogMergePolicy.getNoCFSRatio()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setNoCFSRatio(double)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy.getMergeFactor()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LogMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setUseCompoundFile(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LogMergePolicy.getUseCompoundFile()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.close()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.LogMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.LogMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.LogMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.LogMergePolicy.toString()"
        ],
        [
            "double",
            "org.apache.lucene.index.LogMergePolicy.getMaxCFSSegmentSizeMB()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setMaxCFSSegmentSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeAbortedException",
            "org.apache.lucene.index.MergePolicy$MergeAbortedException()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeAbortedException",
            "org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeException",
            "org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeException",
            "org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.MergePolicy$MergeException.getDirectory()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.MergePolicy$MergeSpecification()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy$MergeSpecification.add(org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MergePolicy$MergeSpecification.segString(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$OneMerge",
            "org.apache.lucene.index.MergePolicy$OneMerge(java.util.List<org.apache.lucene.index.SegmentInfoPerCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergePolicy$OneMerge.void checkAborted(org.apache.lucene.store.Directory)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergePolicy$OneMerge.void setPause(boolean)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergePolicy$OneMerge.boolean getPause()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MergePolicy$OneMerge.segString(org.apache.lucene.store.Directory)"
        ],
        [
            "long",
            "org.apache.lucene.index.MergePolicy$OneMerge.totalBytesSize()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergePolicy$OneMerge.totalNumDocs()"
        ],
        [
            "org.apache.lucene.store.MergeInfo",
            "org.apache.lucene.index.MergePolicy$OneMerge.getMergeInfo()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.MergePolicy.clone()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.MergePolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy.setIndexWriter(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.MergePolicy.clone()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergeState$CheckAbort$1.work(double)"
        ],
        [
            "org.apache.lucene.index.MergeState$CheckAbort",
            "org.apache.lucene.index.MergeState$CheckAbort(org.apache.lucene.index.MergePolicy$OneMerge, org.apache.lucene.store.Directory)"
        ],
        [
            "void",
            "org.apache.lucene.index.MergeState$CheckAbort.work(double)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DelCountDocMap.remap(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DelCountDocMap.maxDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DelCountDocMap.numDeletedDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DirectDocMap.remap(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DirectDocMap.maxDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DirectDocMap.numDeletedDocs()"
        ],
        [
            "org.apache.lucene.index.MergeState$DocMap",
            "org.apache.lucene.index.MergeState$DocMap.build(org.apache.lucene.index.AtomicReader)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DocMap.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DocMap.numDocs()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MergeState$DocMap.hasDeletions()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$NoDelDocMap.remap(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$NoDelDocMap.maxDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$NoDelDocMap.numDeletedDocs()"
        ],
        [
            "org.apache.lucene.index.MergedIterator",
            "org.apache.lucene.index.MergedIterator(java.util.Iterator<T>...)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MergedIterator.hasNext()"
        ],
        [
            "T",
            "org.apache.lucene.index.MergedIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergedIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.MergedIterator.next()"
        ],
        [
            "org.apache.lucene.index.MultiBits$SubResult",
            "org.apache.lucene.index.MultiBits$SubResult()"
        ],
        [
            "org.apache.lucene.index.MultiBits",
            "org.apache.lucene.index.MultiBits(org.apache.lucene.util.Bits[], int[], boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiBits.get(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiBits.toString()"
        ],
        [
            "org.apache.lucene.index.MultiBits$SubResult",
            "org.apache.lucene.index.MultiBits.getMatchingSub(org.apache.lucene.index.ReaderSlice)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiBits.length()"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.MultiDocValues$1.pull(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiDocValues$1.stopLoadingOnNull(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$DocValuesPuller",
            "org.apache.lucene.index.MultiDocValues$DocValuesPuller()"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.MultiDocValues$DocValuesPuller.pull(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiDocValues$DocValuesPuller.stopLoadingOnNull(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$DocValuesSlice",
            "org.apache.lucene.index.MultiDocValues$DocValuesSlice(org.apache.lucene.index.DocValues, int, int)"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$EmptyDocValues",
            "org.apache.lucene.index.MultiDocValues$EmptyDocValues(int, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.MultiDocValues$EmptyDocValues.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.MultiDocValues$EmptyDocValues.getType()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.MultiDocValues$EmptyDocValues.getDirectSource()"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues(int, org.apache.lucene.index.DocValues$Type, int)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.getType()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.getValueSize()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedDocValues.getDirectSource()"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$EmptyFixedSource",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedSource(org.apache.lucene.index.DocValues$Type, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "double",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getInt(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$EmptyFixedSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$EmptySource",
            "org.apache.lucene.index.MultiDocValues$EmptySource(org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$EmptySource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "double",
            "org.apache.lucene.index.MultiDocValues$EmptySource.getFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$EmptySource.getInt(int)"
        ],
        [
            "org.apache.lucene.index.DocValues$SortedSource",
            "org.apache.lucene.index.MultiDocValues$EmptySource.asSortedSource()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$EmptySource.ord(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$EmptySource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.index.MultiDocValues$EmptySource.getDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$EmptySource.getValueCount()"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$MultiSortedSource",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSource(org.apache.lucene.index.DocValues$Type, java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.PagedBytes, int, int, int[], long[])"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSource.ord(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSource.getDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSource.getValueCount()"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$MultiSource",
            "org.apache.lucene.index.MultiDocValues$MultiSource(org.apache.lucene.index.MultiDocValues$DocValuesSlice[], int[], boolean, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$MultiSource.getInt(int)"
        ],
        [
            "double",
            "org.apache.lucene.index.MultiDocValues$MultiSource.getFloat(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$MultiSource.getBytes(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocValues$SortedSource",
            "org.apache.lucene.index.MultiDocValues$MultiSource.asSortedSource()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiDocValues$MultiSource.hasArray()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.MultiDocValues$MultiSource.getArray()"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer",
            "org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer(org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiDocValues$RecordingBytesRefConsumer.consume(org.apache.lucene.util.BytesRef, int, long)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.MultiDocValues.getDocValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.MultiDocValues.getNormDocValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.MultiDocValues.load()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.MultiDocValues.getType()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues.getValueSize()"
        ],
        [
            "org.apache.lucene.index.DocValues$Source",
            "org.apache.lucene.index.MultiDocValues.getDirectSource()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice.toString()"
        ],
        [
            "org.apache.lucene.index.MultiDocsAndPositionsEnum",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum(org.apache.lucene.index.MultiTermsEnum, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.canReuse(org.apache.lucene.index.MultiTermsEnum)"
        ],
        [
            "org.apache.lucene.index.MultiDocsAndPositionsEnum",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.reset(org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[], int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.getNumSubs()"
        ],
        [
            "org.apache.lucene.index.MultiDocsAndPositionsEnum$EnumWithSlice[]",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.getSubs()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.getPayload()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiDocsAndPositionsEnum.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiDocsEnum$EnumWithSlice.toString()"
        ],
        [
            "org.apache.lucene.index.MultiDocsEnum",
            "org.apache.lucene.index.MultiDocsEnum(org.apache.lucene.index.MultiTermsEnum, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiDocsEnum.canReuse(org.apache.lucene.index.MultiTermsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsEnum.getNumSubs()"
        ],
        [
            "org.apache.lucene.index.MultiDocsEnum$EnumWithSlice[]",
            "org.apache.lucene.index.MultiDocsEnum.getSubs()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocsEnum.nextDoc()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiDocsEnum.toString()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.MultiFields.getFields(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.MultiFields.getLiveDocs(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.MultiFields.getTerms(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "org.apache.lucene.index.MultiFields",
            "org.apache.lucene.index.MultiFields(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.MultiFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiFields.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiFields.totalTermFreq(org.apache.lucene.index.IndexReader, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.MultiFields.getMergedFieldInfos(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.index.MultiReader",
            "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)"
        ],
        [
            "org.apache.lucene.index.MultiReader",
            "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)"
        ],
        [
            "org.apache.lucene.index.MultiTerms",
            "org.apache.lucene.index.MultiTerms(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[])"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MultiTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MultiTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasPayloads()"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex(org.apache.lucene.index.TermsEnum, int)"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice(int, org.apache.lucene.index.ReaderSlice)"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.reset(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiTermsEnum.getMatchCount()"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[]",
            "org.apache.lucene.index.MultiTermsEnum.getMatchArray()"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum",
            "org.apache.lucene.index.MultiTermsEnum(org.apache.lucene.index.ReaderSlice[])"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiTermsEnum.term()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MultiTermsEnum.reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.MultiTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiTermsEnum.next()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.MultiTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.MultiTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiTermsEnum.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.NoDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.NoDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.NoMergePolicy.close()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.NoMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.NoMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.NoMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.NoMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.NoMergePolicy.setIndexWriter(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.NoMergePolicy.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.NoMergeScheduler.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.NoMergeScheduler.merge(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.Norm",
            "org.apache.lucene.index.Norm()"
        ],
        [
            "org.apache.lucene.index.IndexableField",
            "org.apache.lucene.index.Norm.field()"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.Norm.type()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.Norm.getSpare()"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setFloat(float)"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setDouble(double)"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setShort(short)"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setLong(long)"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.index.Norm.setBytes(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.NormsConsumer",
            "org.apache.lucene.index.NormsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.NormsConsumer.abort()"
        ],
        [
            "void",
            "org.apache.lucene.index.NormsConsumer.flush(java.util.Map<java.lang.String, org.apache.lucene.index.InvertedDocEndConsumerPerField>, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.index.NormsConsumerPerField",
            "org.apache.lucene.index.NormsConsumerPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.FieldInfo, org.apache.lucene.index.NormsConsumer)"
        ],
        [
            "int",
            "org.apache.lucene.index.NormsConsumerPerField.compareTo(org.apache.lucene.index.NormsConsumerPerField)"
        ],
        [
            "int",
            "org.apache.lucene.index.NormsConsumerPerField.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.OrdTermState",
            "org.apache.lucene.index.OrdTermState()"
        ],
        [
            "void",
            "org.apache.lucene.index.OrdTermState.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.OrdTermState.toString()"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.ParallelAtomicReader$ParallelFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.ParallelAtomicReader$ParallelFields.size()"
        ],
        [
            "org.apache.lucene.index.ParallelAtomicReader",
            "org.apache.lucene.index.ParallelAtomicReader(org.apache.lucene.index.AtomicReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelAtomicReader",
            "org.apache.lucene.index.ParallelAtomicReader(boolean, org.apache.lucene.index.AtomicReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelAtomicReader",
            "org.apache.lucene.index.ParallelAtomicReader(boolean, org.apache.lucene.index.AtomicReader[], org.apache.lucene.index.AtomicReader[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ParallelAtomicReader.toString()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.ParallelAtomicReader.getFieldInfos()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.ParallelAtomicReader.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.ParallelAtomicReader.fields()"
        ],
        [
            "int",
            "org.apache.lucene.index.ParallelAtomicReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.ParallelAtomicReader.maxDoc()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.ParallelAtomicReader.hasDeletions()"
        ],
        [
            "void",
            "org.apache.lucene.index.ParallelAtomicReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.ParallelAtomicReader.getTermVectors(int)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.ParallelAtomicReader.docValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.ParallelAtomicReader.normValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.ParallelCompositeReader",
            "org.apache.lucene.index.ParallelCompositeReader(org.apache.lucene.index.CompositeReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelCompositeReader",
            "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelCompositeReader",
            "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ParallelCompositeReader.toString()"
        ],
        [
            "org.apache.lucene.index.PerDocWriteState",
            "org.apache.lucene.index.PerDocWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.util.Counter, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.PerDocWriteState",
            "org.apache.lucene.index.PerDocWriteState(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.index.PerDocWriteState",
            "org.apache.lucene.index.PerDocWriteState(org.apache.lucene.index.PerDocWriteState, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.readSnapshotsInfo(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig$OpenMode, org.apache.lucene.util.Version)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void release(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.close()"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms$Builder",
            "org.apache.lucene.index.PrefixCodedTerms$Builder()"
        ],
        [
            "void",
            "org.apache.lucene.index.PrefixCodedTerms$Builder.add(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms",
            "org.apache.lucene.index.PrefixCodedTerms$Builder.finish()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.hasNext()"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.PrefixCodedTerms$PrefixCodedTermsIterator.next()"
        ],
        [
            "long",
            "org.apache.lucene.index.PrefixCodedTerms.getSizeInBytes()"
        ],
        [
            "org.apache.lucene.index.ReaderManager",
            "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "org.apache.lucene.index.ReaderManager",
            "org.apache.lucene.index.ReaderManager(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.ReaderSlice",
            "org.apache.lucene.index.ReaderSlice(int, int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ReaderSlice.toString()"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.index.ReaderUtil.getTopLevelContext(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "int",
            "org.apache.lucene.index.ReaderUtil.subIndex(int, int[])"
        ],
        [
            "int",
            "org.apache.lucene.index.ReaderUtil.subIndex(int, java.util.List<org.apache.lucene.index.AtomicReaderContext>)"
        ],
        [
            "org.apache.lucene.index.ReadersAndLiveDocs",
            "org.apache.lucene.index.ReadersAndLiveDocs(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.ReadersAndLiveDocs.incRef()"
        ],
        [
            "void",
            "org.apache.lucene.index.ReadersAndLiveDocs.decRef()"
        ],
        [
            "int",
            "org.apache.lucene.index.ReadersAndLiveDocs.refCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.int getPendingDeleteCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.boolean verifyDocCounts()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.index.SegmentReader getReader(org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.index.SegmentReader getMergeReader(org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.void release(org.apache.lucene.index.SegmentReader)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.boolean delete(int)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.void dropReaders()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.void initWritableLiveDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.util.Bits getLiveDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.org.apache.lucene.util.Bits getReadOnlyLiveDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.void dropChanges()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndLiveDocs.boolean writeLiveDocs(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ReadersAndLiveDocs.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentCoreReaders.toString()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SegmentInfo.getDiagnostics()"
        ],
        [
            "org.apache.lucene.index.SegmentInfo",
            "org.apache.lucene.index.SegmentInfo(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, int, boolean, org.apache.lucene.codecs.Codec, java.util.Map<java.lang.String, java.lang.String>, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfo.sizeInBytes()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentInfo.getUseCompoundFile()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.setCodec(org.apache.lucene.codecs.Codec)"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.index.SegmentInfo.getCodec()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfo.getDocCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.toString(org.apache.lucene.store.Directory, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentInfo.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfo.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.setVersion(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.getVersion()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.setFiles(java.util.Set<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.addFiles(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.addFile(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.getAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.putAttribute(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SegmentInfo.attributes()"
        ],
        [
            "org.apache.lucene.index.SegmentInfoPerCommit",
            "org.apache.lucene.index.SegmentInfoPerCommit(org.apache.lucene.index.SegmentInfo, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfoPerCommit.sizeInBytes()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfoPerCommit.setDelGen(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentInfoPerCommit.hasDeletions()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfoPerCommit.getNextDelGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfoPerCommit.getDelGen()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfoPerCommit.getDelCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfoPerCommit.toString(org.apache.lucene.store.Directory, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfoPerCommit.toString()"
        ],
        [
            "org.apache.lucene.index.SegmentInfoPerCommit",
            "org.apache.lucene.index.SegmentInfoPerCommit.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentInfoPerCommit.clone()"
        ],
        [
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile",
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.SegmentInfos()"
        ],
        [
            "org.apache.lucene.index.SegmentInfoPerCommit",
            "org.apache.lucene.index.SegmentInfos.info(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(java.lang.String[])"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(java.lang.String[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getSegmentsFileName()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getNextSegmentFileName()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.read(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.read(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.write3xInfo(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.SegmentInfos.clone()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getVersion()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getGeneration()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getLastGeneration()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.setInfoStream(java.io.PrintStream)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.setDefaultGenLookaheadCount(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfos.getDefaultGenLookahedCount()"
        ],
        [
            "java.io.PrintStream",
            "org.apache.lucene.index.SegmentInfos.getInfoStream()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.toString(org.apache.lucene.store.Directory)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SegmentInfos.getUserData()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfos.totalDocCount()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.changed()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfos.size()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.add(org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable<org.apache.lucene.index.SegmentInfoPerCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.clear()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.remove(org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentInfos.clone()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentMerger.mergeDocValuesAndNormsFieldInfos()"
        ],
        [
            "org.apache.lucene.index.SegmentReadState",
            "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, int)"
        ],
        [
            "org.apache.lucene.index.SegmentReadState",
            "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, int, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SegmentReadState",
            "org.apache.lucene.index.SegmentReadState(org.apache.lucene.index.SegmentReadState, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SegmentReader",
            "org.apache.lucene.index.SegmentReader(org.apache.lucene.index.SegmentInfoPerCommit, int, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SegmentReader.getLiveDocs()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentReader.hasDeletions()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.SegmentReader.getFieldInfos()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.index.SegmentReader.getFieldsReader()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SegmentReader.fields()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentReader.maxDoc()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.index.SegmentReader.getTermVectorsReader()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SegmentReader.getTermVectors(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentReader.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentReader.getSegmentName()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.SegmentReader.directory()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentReader.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentReader.getCombinedCoreAndDeletesKey()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentReader.getTermInfosIndexDivisor()"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.SegmentReader.docValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.SegmentReader.normValues(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentReader.addCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentReader.removeCoreClosedListener(org.apache.lucene.index.SegmentReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.index.SegmentWriteState",
            "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, int, org.apache.lucene.index.BufferedDeletes, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.SegmentWriteState",
            "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.SegmentWriteState, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SerialMergeScheduler",
            "org.apache.lucene.index.SerialMergeScheduler()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SerialMergeScheduler.void merge(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "void",
            "org.apache.lucene.index.SerialMergeScheduler.close()"
        ],
        [
            "org.apache.lucene.index.SingleTermsEnum",
            "org.apache.lucene.index.SingleTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.AtomicReader",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.wrap(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.index.SlowCompositeReaderWrapper",
            "org.apache.lucene.index.SlowCompositeReaderWrapper(org.apache.lucene.index.CompositeReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.toString()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.fields()"
        ],
        [
            "org.apache.lucene.index.DocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.docValues(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.org.apache.lucene.index.DocValues normValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getTermVectors(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getFieldInfos()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.hasDeletions()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getCombinedCoreAndDeletesKey()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.delete()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getDirectory()"
        ],
        [
            "long",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getGeneration()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentsFileName()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getUserData()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.isDeleted()"
        ],
        [
            "int",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentCount()"
        ],
        [
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo(java.lang.String, java.lang.String, org.apache.lucene.index.IndexCommit)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotInfo.toString()"
        ],
        [
            "org.apache.lucene.index.SnapshotDeletionPolicy",
            "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"
        ],
        [
            "org.apache.lucene.index.SnapshotDeletionPolicy",
            "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit getSnapshot(java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SnapshotDeletionPolicy.getSnapshots()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SnapshotDeletionPolicy.isSnapshotted(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.void release(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer",
            "org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedBytesMergeUtils$IndexOutputBytesRefConsumer.consume(org.apache.lucene.util.BytesRef, int, long)"
        ],
        [
            "org.apache.lucene.index.SortedBytesMergeUtils$MergeContext",
            "org.apache.lucene.index.SortedBytesMergeUtils$MergeContext(java.util.Comparator<org.apache.lucene.util.BytesRef>, int, int, org.apache.lucene.index.DocValues$Type)"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedBytesMergeUtils$MergeContext.getMergeDocCount()"
        ],
        [
            "org.apache.lucene.index.SortedBytesMergeUtils$MergeQueue",
            "org.apache.lucene.index.SortedBytesMergeUtils$MergeQueue(int, java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource",
            "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource(org.apache.lucene.index.SortedBytesMergeUtils$MergeContext)"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.ord(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.getByOrd(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.getDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedBytesMergeUtils$MissingValueSource.getValueCount()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice.toAbsolutOrds(int[])"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice.writeOrds(org.apache.lucene.util.packed.PackedInts$Writer)"
        ],
        [
            "org.apache.lucene.index.SortedBytesMergeUtils$MergeContext",
            "org.apache.lucene.index.SortedBytesMergeUtils.init(org.apache.lucene.index.DocValues$Type, org.apache.lucene.index.DocValues[], java.util.Comparator<org.apache.lucene.util.BytesRef>, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedBytesMergeUtils.mergeRecords(org.apache.lucene.index.SortedBytesMergeUtils$MergeContext, org.apache.lucene.index.SortedBytesMergeUtils$BytesRefConsumer, java.util.List<org.apache.lucene.index.SortedBytesMergeUtils$SortedSourceSlice>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentsFileName()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getDirectory()"
        ],
        [
            "long",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getGeneration()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.isDeleted()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getUserData()"
        ],
        [
            "void",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.delete()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.StandardDirectoryReader.toString()"
        ],
        [
            "long",
            "org.apache.lucene.index.StandardDirectoryReader.getVersion()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.StandardDirectoryReader.isCurrent()"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.StandardDirectoryReader.getIndexCommit()"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status[]",
            "org.apache.lucene.index.StoredFieldVisitor$Status.values()"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status",
            "org.apache.lucene.index.StoredFieldVisitor$Status.valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)"
        ],
        [
            "org.apache.lucene.index.StoredFieldsConsumer",
            "org.apache.lucene.index.StoredFieldsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldsConsumer.reset()"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldsConsumer.startDocument()"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldsConsumer.flush(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldsConsumer.addField(org.apache.lucene.index.IndexableField, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.Term(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.Term(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.field()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.text()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.Term.bytes()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.Term.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.Term.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.index.Term.compareTo(org.apache.lucene.index.Term)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.Term.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.TermContext",
            "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "org.apache.lucene.index.TermContext",
            "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)"
        ],
        [
            "org.apache.lucene.index.TermContext",
            "org.apache.lucene.index.TermContext.build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermContext.clear()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermContext.register(org.apache.lucene.index.TermState, int, int, long)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermContext.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TermContext.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.TermContext.totalTermFreq()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermContext.setDocFreq(int)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermState.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TermState.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.TermState.clone()"
        ],
        [
            "org.apache.lucene.index.TermVectorsConsumer",
            "org.apache.lucene.index.TermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermVectorsConsumer.abort()"
        ],
        [
            "org.apache.lucene.index.TermsHashConsumerPerField",
            "org.apache.lucene.index.TermVectorsConsumer.addField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray",
            "org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray(int)"
        ],
        [
            "org.apache.lucene.index.TermVectorsConsumerPerField",
            "org.apache.lucene.index.TermVectorsConsumerPerField(org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermVectorsConsumerPerField.abort()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.Terms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum$1.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.TermsEnum$2.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum$2.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.TermsEnum$2.term()"
        ],
        [
            "int",
            "org.apache.lucene.index.TermsEnum$2.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.TermsEnum$2.totalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.TermsEnum$2.ord()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.TermsEnum$2.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.TermsEnum$2.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.TermsEnum$2.next()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.TermsEnum$2.org.apache.lucene.util.AttributeSource attributes()"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermsEnum$2.termState()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum$2.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus[]",
            "org.apache.lucene.index.TermsEnum$SeekStatus.values()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.TermsEnum$SeekStatus.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.TermsEnum.attributes()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.TermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.TermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.TermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermsEnum.termState()"
        ],
        [
            "org.apache.lucene.index.TermsHash",
            "org.apache.lucene.index.TermsHash(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHashConsumer, boolean, org.apache.lucene.index.TermsHash)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHash.abort()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.TermsHash.freeRAM()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.init()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.clear()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.bytesUsed()"
        ],
        [
            "org.apache.lucene.index.TermsHashPerField",
            "org.apache.lucene.index.TermsHashPerField(org.apache.lucene.index.DocInverterPerField, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHash, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.reset()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.abort()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.initReader(org.apache.lucene.index.ByteSliceReader, int, int)"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField.sortPostings(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.add(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.writeBytes(int, byte[], int, int)"
        ],
        [
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool",
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool(int)"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState",
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.getAndLock(java.lang.Thread, org.apache.lucene.index.DocumentsWriter)"
        ],
        [
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool",
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.clone()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThreadPool",
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.ThreadAffinityDocumentsWriterThreadPool.clone()"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy$1.getScore()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TieredMergePolicy$1.getExplanation()"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(org.apache.lucene.index.SegmentInfoPerCommit, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnceExplicit()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getReclaimDeletesWeight()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getForceMergeDeletesPctAllowed()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setUseCompoundFile(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.TieredMergePolicy.getUseCompoundFile()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setNoCFSRatio(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getNoCFSRatio()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.TieredMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.TieredMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.TieredMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.TieredMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.TieredMergePolicy.close()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TieredMergePolicy.toString()"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getMaxCFSSegmentSizeMB()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxCFSSegmentSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException",
            "org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"
        ],
        [
            "org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException",
            "org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"
        ],
        [
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper",
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper(org.apache.lucene.index.TwoPhaseCommit, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.prepareCommit()"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.prepareCommit(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.commit()"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.commit(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool$TwoPhaseCommitWrapper.rollback()"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool.execute(org.apache.lucene.index.TwoPhaseCommit...)"
        ],
        [
            "org.apache.lucene.index.TypePromoter$IdentityTypePromoter",
            "org.apache.lucene.index.TypePromoter$IdentityTypePromoter()"
        ],
        [
            "org.apache.lucene.index.TypePromoter",
            "org.apache.lucene.index.TypePromoter$IdentityTypePromoter.promote(org.apache.lucene.index.TypePromoter)"
        ],
        [
            "int",
            "org.apache.lucene.index.TypePromoter.getValueSize()"
        ],
        [
            "org.apache.lucene.index.TypePromoter",
            "org.apache.lucene.index.TypePromoter.promote(org.apache.lucene.index.TypePromoter)"
        ],
        [
            "org.apache.lucene.index.DocValues$Type",
            "org.apache.lucene.index.TypePromoter.type()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TypePromoter.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.TypePromoter.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.TypePromoter.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.TypePromoter",
            "org.apache.lucene.index.TypePromoter.create(org.apache.lucene.index.DocValues$Type, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TypePromoter.getValueSize(org.apache.lucene.index.DocValues$Type, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TypePromoter",
            "org.apache.lucene.index.TypePromoter.getIdentityPromoter()"
        ],
        [
            "org.apache.lucene.index.UpgradeIndexMergePolicy",
            "org.apache.lucene.index.UpgradeIndexMergePolicy(org.apache.lucene.index.MergePolicy)"
        ],
        [
            "void",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.setIndexWriter(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.findMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentInfoPerCommit, java.lang.Boolean>)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.close()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.toString()"
        ],
        [
            "org.apache.lucene.search.AutomatonQuery",
            "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "int",
            "org.apache.lucene.search.AutomatonQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.AutomatonQuery.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.AutomatonQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.BitsFilteredDocIdSet.wrap(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.BitsFilteredDocIdSet",
            "org.apache.lucene.search.BitsFilteredDocIdSet(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$1.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$2.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$3.toString()"
        ],
        [
            "org.apache.lucene.search.BooleanClause$Occur[]",
            "org.apache.lucene.search.BooleanClause$Occur.values()"
        ],
        [
            "org.apache.lucene.search.BooleanClause$Occur",
            "org.apache.lucene.search.BooleanClause$Occur.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.BooleanClause",
            "org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "org.apache.lucene.search.BooleanClause$Occur",
            "org.apache.lucene.search.BooleanClause.getOccur()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanClause.setOccur(org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanClause.getQuery()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanClause.setQuery(org.apache.lucene.search.Query)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.isProhibited()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.isRequired()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanClause.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause.toString()"
        ],
        [
            "org.apache.lucene.search.BooleanQuery$BooleanWeight",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight(org.apache.lucene.search.BooleanQuery, org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.getValueForNormalization()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.coord(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanQuery$BooleanWeight.scoresDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.BooleanQuery$TooManyClauses",
            "org.apache.lucene.search.BooleanQuery$TooManyClauses()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanQuery.getMaxClauseCount()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)"
        ],
        [
            "org.apache.lucene.search.BooleanQuery",
            "org.apache.lucene.search.BooleanQuery()"
        ],
        [
            "org.apache.lucene.search.BooleanQuery",
            "org.apache.lucene.search.BooleanQuery(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanQuery.isCoordDisabled()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.setMinimumNumberShouldMatch(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.BooleanClause)"
        ],
        [
            "org.apache.lucene.search.BooleanClause[]",
            "org.apache.lucene.search.BooleanQuery.getClauses()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.BooleanQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.BooleanQuery",
            "org.apache.lucene.search.BooleanQuery.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.BooleanQuery.clone()"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector",
            "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector(int, org.apache.lucene.search.BooleanScorer$BucketTable)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanScorer$BooleanScorerCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$BucketScorer",
            "org.apache.lucene.search.BooleanScorer$BucketScorer(org.apache.lucene.search.Weight)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer$BucketScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer$BucketScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer$BucketScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer$BucketScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer$BucketScorer.score()"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$BucketTable",
            "org.apache.lucene.search.BooleanScorer$BucketTable()"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.BooleanScorer$BucketTable.newCollector(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer$BucketTable.size()"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$SubScorer",
            "org.apache.lucene.search.BooleanScorer$SubScorer(org.apache.lucene.search.Scorer, boolean, boolean, org.apache.lucene.search.Collector, org.apache.lucene.search.BooleanScorer$SubScorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.Collector, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer.freq()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.Collector)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanScorer.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer2$1.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer2$2.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer2$SingleMatchScorer.advance(int)"
        ],
        [
            "org.apache.lucene.search.BooleanScorer2",
            "org.apache.lucene.search.BooleanScorer2(org.apache.lucene.search.BooleanQuery$BooleanWeight, boolean, int, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, java.util.List<org.apache.lucene.search.Scorer>, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer2.score(org.apache.lucene.search.Collector)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanScorer2.score(org.apache.lucene.search.Collector, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer2.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer2.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer2.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanScorer2.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer2.advance(int)"
        ],
        [
            "org.apache.lucene.search.BoostAttributeImpl",
            "org.apache.lucene.search.BoostAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.search.BoostAttributeImpl.setBoost(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.BoostAttributeImpl.getBoost()"
        ],
        [
            "void",
            "org.apache.lucene.search.BoostAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.search.BoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingCollector$1.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$1.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$1.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$1.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "float",
            "org.apache.lucene.search.CachingCollector$CachedScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.CachingCollector$CachedScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.nextDoc()"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.replay(org.apache.lucene.search.Collector)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.toString()"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.replay(org.apache.lucene.search.Collector)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CachingCollector$ScoreCachingCollector.toString()"
        ],
        [
            "org.apache.lucene.search.CachingCollector$SegStart",
            "org.apache.lucene.search.CachingCollector$SegStart(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.CachingCollector",
            "org.apache.lucene.search.CachingCollector.create(boolean, boolean, double)"
        ],
        [
            "org.apache.lucene.search.CachingCollector",
            "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, double)"
        ],
        [
            "org.apache.lucene.search.CachingCollector",
            "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingCollector.isCached()"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.CachingWrapperFilter",
            "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter)"
        ],
        [
            "org.apache.lucene.search.CachingWrapperFilter",
            "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter, boolean)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.CachingWrapperFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CachingWrapperFilter.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperFilter.hashCode()"
        ],
        [
            "org.apache.lucene.search.CollectionStatistics",
            "org.apache.lucene.search.CollectionStatistics(java.lang.String, long, long, long, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CollectionStatistics.field()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.maxDoc()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.docCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.sumDocFreq()"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.Collector()"
        ],
        [
            "org.apache.lucene.search.ComplexExplanation",
            "org.apache.lucene.search.ComplexExplanation()"
        ],
        [
            "org.apache.lucene.search.ComplexExplanation",
            "org.apache.lucene.search.ComplexExplanation(boolean, float, java.lang.String)"
        ],
        [
            "java.lang.Boolean",
            "org.apache.lucene.search.ComplexExplanation.getMatch()"
        ],
        [
            "void",
            "org.apache.lucene.search.ComplexExplanation.setMatch(java.lang.Boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ComplexExplanation.isMatch()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer$1.compare(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.ConjunctionScorer",
            "org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Weight, java.util.Collection<org.apache.lucene.search.Scorer>)"
        ],
        [
            "org.apache.lucene.search.ConjunctionScorer",
            "org.apache.lucene.search.ConjunctionScorer(org.apache.lucene.search.Weight, org.apache.lucene.search.Scorer...)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConjunctionScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConjunctionScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionTermScorer$1.compare(org.apache.lucene.search.ConjunctionTermScorer$DocsAndFreqs, org.apache.lucene.search.ConjunctionTermScorer$DocsAndFreqs)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionTermScorer$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionTermScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionTermScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionTermScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConjunctionTermScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConjunctionTermScorer.freq()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector.setNextEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreAutoRewrite$CutOffTermCollector.collect(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart",
            "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart(int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart.init()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ConstantScoreAutoRewrite$TermStateByteStart.clear()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.setTermCountCutoff(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.getTermCountCutoff()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.setDocCountPercent(double)"
        ],
        [
            "double",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.getDocCountPercent()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreAutoRewrite.equals(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer$1.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.Weight, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.advance(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score(org.apache.lucene.search.Collector)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScorer.score(org.apache.lucene.search.Collector, int, int)"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scoresDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery",
            "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery",
            "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Filter)"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.ConstantScoreQuery.getFilter()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ConstantScoreQuery.getQuery()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ConstantScoreQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.ConstantScoreQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.ConstantScoreQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery",
            "org.apache.lucene.search.DisjunctionMaxQuery(float)"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery",
            "org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery.add(org.apache.lucene.search.Query)"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery.add(java.util.Collection<org.apache.lucene.search.Query>)"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionMaxQuery.getTieBreakerMultiplier()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.DisjunctionMaxQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DisjunctionMaxQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery",
            "org.apache.lucene.search.DisjunctionMaxQuery.clone()"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DisjunctionMaxQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DisjunctionMaxQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionMaxQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DisjunctionMaxQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.DisjunctionMaxQuery.clone()"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxScorer",
            "org.apache.lucene.search.DisjunctionMaxScorer(org.apache.lucene.search.Weight, float, org.apache.lucene.search.Scorer[], int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionMaxScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionMaxScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionMaxScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionMaxScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionMaxScorer.advance(int)"
        ],
        [
            "org.apache.lucene.search.DisjunctionSumScorer",
            "org.apache.lucene.search.DisjunctionSumScorer(org.apache.lucene.search.Weight, java.util.List<org.apache.lucene.search.Scorer>, int)"
        ],
        [
            "org.apache.lucene.search.DisjunctionSumScorer",
            "org.apache.lucene.search.DisjunctionSumScorer(org.apache.lucene.search.Weight, java.util.List<org.apache.lucene.search.Scorer>)"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionSumScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionSumScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionSumScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionSumScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionSumScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSet$1$1.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSet$1$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSet$1$1.nextDoc()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocIdSet$1.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocIdSet$1.isCacheable()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.DocIdSet$1.bits()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocIdSet()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.DocIdSet.bits()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocIdSet.isCacheable()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocIdSetIterator()"
        ],
        [
            "org.apache.lucene.search.ExactPhraseScorer$ChunkState",
            "org.apache.lucene.search.ExactPhraseScorer$ChunkState(org.apache.lucene.index.DocsAndPositionsEnum, int, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.advance(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.ExactPhraseScorer.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.ExactPhraseScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ExactPhraseScorer.score()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.Explanation()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.Explanation(float, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Explanation.isMatch()"
        ],
        [
            "float",
            "org.apache.lucene.search.Explanation.getValue()"
        ],
        [
            "void",
            "org.apache.lucene.search.Explanation.setValue(float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Explanation.getDescription()"
        ],
        [
            "void",
            "org.apache.lucene.search.Explanation.setDescription(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Explanation[]",
            "org.apache.lucene.search.Explanation.getDetails()"
        ],
        [
            "void",
            "org.apache.lucene.search.Explanation.addDetail(org.apache.lucene.search.Explanation)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Explanation.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Explanation.toHtml()"
        ],
        [
            "byte",
            "org.apache.lucene.search.FieldCache$1.parseByte(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$1.toString()"
        ],
        [
            "double",
            "org.apache.lucene.search.FieldCache$10.parseDouble(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$10.toString()"
        ],
        [
            "short",
            "org.apache.lucene.search.FieldCache$2.parseShort(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$2.toString()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCache$3.parseInt(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$3.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.FieldCache$4.parseFloat(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$4.toString()"
        ],
        [
            "long",
            "org.apache.lucene.search.FieldCache$5.parseLong(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$5.toString()"
        ],
        [
            "double",
            "org.apache.lucene.search.FieldCache$6.parseDouble(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$6.toString()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCache$7.parseInt(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$7.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.FieldCache$8.parseFloat(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$8.toString()"
        ],
        [
            "long",
            "org.apache.lucene.search.FieldCache$9.parseLong(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$9.toString()"
        ],
        [
            "org.apache.lucene.search.FieldCache$CacheEntry",
            "org.apache.lucene.search.FieldCache$CacheEntry()"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCache$CacheEntry.estimateSize()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$CacheEntry.getEstimatedSize()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCache$CacheEntry.toString()"
        ],
        [
            "org.apache.lucene.search.FieldCache$CreationPlaceholder",
            "org.apache.lucene.search.FieldCache$CreationPlaceholder()"
        ],
        [
            "org.apache.lucene.search.FieldCache$DocTerms",
            "org.apache.lucene.search.FieldCache$DocTerms()"
        ],
        [
            "org.apache.lucene.search.FieldCache$DocTermsIndex",
            "org.apache.lucene.search.FieldCache$DocTermsIndex()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCache$DocTermsIndex.binarySearchLookup(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldCache$DocTermsIndex.getTerm(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.FieldCache$StopFillCacheException",
            "org.apache.lucene.search.FieldCache$StopFillCacheException()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheDocIdSet$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$1.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheDocIdSet$2.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$2.length()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$3.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$3.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$3.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$5.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$5.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheDocIdSet$5.advance(int)"
        ],
        [
            "org.apache.lucene.search.FieldCacheDocIdSet",
            "org.apache.lucene.search.FieldCacheDocIdSet(int, org.apache.lucene.util.Bits)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheDocIdSet.isCacheable()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.FieldCacheDocIdSet.bits()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.FieldCacheDocIdSet.iterator()"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl$1.onClose(org.apache.lucene.index.SegmentReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl$2.onClose(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl$Cache.purge(org.apache.lucene.index.AtomicReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl$Cache.put(org.apache.lucene.index.AtomicReader, org.apache.lucene.search.FieldCacheImpl$Entry, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldCacheImpl$Cache.get(org.apache.lucene.index.AtomicReader, org.apache.lucene.search.FieldCacheImpl$Entry, boolean)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getReaderKey()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getFieldName()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getCustom()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldCacheImpl$CacheEntryImpl.getValue()"
        ],
        [
            "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl(org.apache.lucene.util.PagedBytes$Reader, org.apache.lucene.util.packed.PackedInts$Reader)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl.size()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl.exists(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsImpl.getTerm(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum(org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl$DocTermsIndexEnum.termState()"
        ],
        [
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl(org.apache.lucene.util.PagedBytes$Reader, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.util.packed.PackedInts$Reader, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.getDocToOrd()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.numOrd()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.getOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.size()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.lookup(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.search.FieldCacheImpl$DocTermsIndexImpl.getTermsEnum()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheImpl$Entry.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheImpl$Entry.hashCode()"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.FieldCacheImpl.void purgeAllCaches()"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.FieldCacheImpl.void purge(org.apache.lucene.index.AtomicReader)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.FieldCacheImpl.org.apache.lucene.search.FieldCache$CacheEntry[] getCacheEntries()"
        ],
        [
            "byte[]",
            "org.apache.lucene.search.FieldCacheImpl.getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)"
        ],
        [
            "byte[]",
            "org.apache.lucene.search.FieldCacheImpl.getBytes(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ByteParser, boolean)"
        ],
        [
            "short[]",
            "org.apache.lucene.search.FieldCacheImpl.getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)"
        ],
        [
            "short[]",
            "org.apache.lucene.search.FieldCacheImpl.getShorts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$ShortParser, boolean)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.FieldCacheImpl.getInts(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.FieldCacheImpl.getInts(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$IntParser, boolean)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.FieldCacheImpl.getDocsWithField(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "float[]",
            "org.apache.lucene.search.FieldCacheImpl.getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)"
        ],
        [
            "float[]",
            "org.apache.lucene.search.FieldCacheImpl.getFloats(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$FloatParser, boolean)"
        ],
        [
            "long[]",
            "org.apache.lucene.search.FieldCacheImpl.getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)"
        ],
        [
            "long[]",
            "org.apache.lucene.search.FieldCacheImpl.getLongs(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$LongParser, boolean)"
        ],
        [
            "double[]",
            "org.apache.lucene.search.FieldCacheImpl.getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, boolean)"
        ],
        [
            "double[]",
            "org.apache.lucene.search.FieldCacheImpl.getDoubles(org.apache.lucene.index.AtomicReader, java.lang.String, org.apache.lucene.search.FieldCache$DoubleParser, boolean)"
        ],
        [
            "org.apache.lucene.search.FieldCache$DocTermsIndex",
            "org.apache.lucene.search.FieldCacheImpl.getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.search.FieldCache$DocTermsIndex",
            "org.apache.lucene.search.FieldCacheImpl.getTermsIndex(org.apache.lucene.index.AtomicReader, java.lang.String, float)"
        ],
        [
            "org.apache.lucene.search.FieldCache$DocTerms",
            "org.apache.lucene.search.FieldCacheImpl.getTerms(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.search.FieldCache$DocTerms",
            "org.apache.lucene.search.FieldCacheImpl.getTerms(org.apache.lucene.index.AtomicReader, java.lang.String, float)"
        ],
        [
            "org.apache.lucene.index.DocTermOrds",
            "org.apache.lucene.search.FieldCacheImpl.getDocTermOrds(org.apache.lucene.index.AtomicReader, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldCacheImpl.setInfoStream(java.io.PrintStream)"
        ],
        [
            "java.io.PrintStream",
            "org.apache.lucene.search.FieldCacheImpl.getInfoStream()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$1.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$2.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$3.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$4.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$5.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$6.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheRangeFilter$7.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCacheRangeFilter.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheRangeFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldCacheRangeFilter.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldCacheRangeFilter.getField()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheRangeFilter.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldCacheRangeFilter.includesUpper()"
        ],
        [
            "T",
            "org.apache.lucene.search.FieldCacheRangeFilter.getLowerVal()"
        ],
        [
            "T",
            "org.apache.lucene.search.FieldCacheRangeFilter.getUpperVal()"
        ],
        [
            "org.apache.lucene.search.FieldCache$Parser",
            "org.apache.lucene.search.FieldCacheRangeFilter.getParser()"
        ],
        [
            "org.apache.lucene.search.FieldCacheTermsFilter",
            "org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, org.apache.lucene.util.BytesRef...)"
        ],
        [
            "org.apache.lucene.search.FieldCacheTermsFilter",
            "org.apache.lucene.search.FieldCacheTermsFilter(java.lang.String, java.lang.String...)"
        ],
        [
            "org.apache.lucene.search.FieldCache",
            "org.apache.lucene.search.FieldCacheTermsFilter.getFieldCache()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldCacheTermsFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ByteComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ByteComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$ByteComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$ByteComparator.setBottom(int)"
        ],
        [
            "java.lang.Byte",
            "org.apache.lucene.search.FieldComparator$ByteComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ByteComparator.compareDocToValue(int, java.lang.Byte)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ByteComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$ByteComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.setBottom(int)"
        ],
        [
            "java.lang.Integer",
            "org.apache.lucene.search.FieldComparator$DocComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compareDocToValue(int, java.lang.Integer)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$DocComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.setBottom(int)"
        ],
        [
            "java.lang.Double",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compareDocToValue(int, java.lang.Double)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatComparator.setBottom(int)"
        ],
        [
            "java.lang.Float",
            "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compareDocToValue(int, java.lang.Float)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.setBottom(int)"
        ],
        [
            "java.lang.Double",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compareDocToValue(int, java.lang.Double)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$FloatDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntComparator.setBottom(int)"
        ],
        [
            "java.lang.Integer",
            "org.apache.lucene.search.FieldComparator$IntComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compareDocToValue(int, java.lang.Integer)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$IntComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.setBottom(int)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compareDocToValue(int, java.lang.Long)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$IntDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$LongComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$LongComparator.setBottom(int)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.search.FieldComparator$LongComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compareDocToValue(int, java.lang.Long)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$LongComparator.value(int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$NumericComparator",
            "org.apache.lucene.search.FieldComparator$NumericComparator(java.lang.String, T)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "java.lang.Float",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Float, java.lang.Float)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareDocToValue(int, java.lang.Float)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ShortComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ShortComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$ShortComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$ShortComparator.setBottom(int)"
        ],
        [
            "java.lang.Short",
            "org.apache.lucene.search.FieldComparator$ShortComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ShortComparator.compareDocToValue(int, java.lang.Short)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$ShortComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$ShortComparator.value(int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, org.apache.lucene.util.packed.PackedInts$Reader, org.apache.lucene.search.FieldCache$DocTermsIndex, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$AnyOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, byte[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ByteOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, int[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$IntOrdComparator.copy(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compare(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.setBottom(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$PerSegmentComparator.value(int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValComparator, short[], org.apache.lucene.search.FieldCache$DocTermsIndex, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator$ShortOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.copy(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setBottom(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, org.apache.lucene.util.packed.PackedInts$Reader, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$AnyPackedDocToOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, byte[], org.apache.lucene.index.DocValues$SortedSource, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ByteOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, int[], org.apache.lucene.index.DocValues$SortedSource, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$IntOrdComparator.copy(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compare(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.setBottom(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$PerSegmentComparator.value(int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator(org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator, short[], org.apache.lucene.index.DocValues$SortedSource, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator$ShortOrdComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator(int, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.copy(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.setBottom(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermOrdValDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.setBottom(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.setBottom(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareDocToValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareDocToValue(int, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermValDocValuesComparator.value(int)"
        ],
        [
            "org.apache.lucene.search.FieldComparator",
            "org.apache.lucene.search.FieldComparator()"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator.compareValues(T, T)"
        ],
        [
            "org.apache.lucene.search.FieldComparatorSource",
            "org.apache.lucene.search.FieldComparatorSource()"
        ],
        [
            "org.apache.lucene.search.FieldDoc",
            "org.apache.lucene.search.FieldDoc(int, float)"
        ],
        [
            "org.apache.lucene.search.FieldDoc",
            "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[])"
        ],
        [
            "org.apache.lucene.search.FieldDoc",
            "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[], int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldDoc.toString()"
        ],
        [
            "org.apache.lucene.search.FieldValueFilter",
            "org.apache.lucene.search.FieldValueFilter(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.FieldValueFilter",
            "org.apache.lucene.search.FieldValueFilter(java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueFilter.field()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldValueFilter.negate()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldValueFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueFilter.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldValueFilter.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueFilter.toString()"
        ],
        [
            "org.apache.lucene.search.FieldValueHitQueue$Entry",
            "org.apache.lucene.search.FieldValueHitQueue$Entry(int, int, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueHitQueue$Entry.toString()"
        ],
        [
            "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue",
            "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int)"
        ],
        [
            "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue",
            "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int)"
        ],
        [
            "<T extends org.apache.lucene.search.FieldValueHitQueue$Entry> org.apache.lucene.search.FieldValueHitQueue<T>",
            "org.apache.lucene.search.FieldValueHitQueue.create(org.apache.lucene.search.SortField[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.FieldValueHitQueue.getReverseMul()"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldValueHitQueue.setComparator(int, org.apache.lucene.search.FieldComparator<?>)"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.Filter()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredDocIdSet$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSet$1.length()"
        ],
        [
            "org.apache.lucene.search.FilteredDocIdSet",
            "org.apache.lucene.search.FilteredDocIdSet(org.apache.lucene.search.DocIdSet)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredDocIdSet.isCacheable()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.FilteredDocIdSet.bits()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.FilteredDocIdSet.iterator()"
        ],
        [
            "org.apache.lucene.search.FilteredDocIdSetIterator",
            "org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSetIterator.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FilteredQuery$1$1.score(org.apache.lucene.search.Collector)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$1$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$1$1.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$1$1.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.FilteredQuery$1$1.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.FilteredQuery$1$1.freq()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredQuery$1.scoresDocsOutOfOrder()"
        ],
        [
            "float",
            "org.apache.lucene.search.FilteredQuery$1.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.FilteredQuery$1.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.FilteredQuery$1.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.FilteredQuery$1.getQuery()"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.FilteredQuery$1.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.FilteredQuery",
            "org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.FilteredQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.FilteredQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.FilteredQuery.getQuery()"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.FilteredQuery.getFilter()"
        ],
        [
            "void",
            "org.apache.lucene.search.FilteredQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FilteredQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int, int, boolean)"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int)"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.getMaxEdits()"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.getPrefixLength()"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.FuzzyQuery.getTerm()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FuzzyQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.floatToEdits(float, int)"
        ],
        [
            "org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum(org.apache.lucene.search.FuzzyTermsEnum, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton[])"
        ],
        [
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.clear()"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.search.FuzzyTermsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource, org.apache.lucene.index.Term, float, int, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FuzzyTermsEnum.next()"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.FuzzyTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.search.FuzzyTermsEnum.termState()"
        ],
        [
            "long",
            "org.apache.lucene.search.FuzzyTermsEnum.ord()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.search.FuzzyTermsEnum.seekCeil(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FuzzyTermsEnum.term()"
        ],
        [
            "float",
            "org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.IndexSearcher$ExecutionHelper.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher$ExecutionHelper.submit(java.util.concurrent.Callable<T>)"
        ],
        [
            "T",
            "org.apache.lucene.search.IndexSearcher$ExecutionHelper.next()"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher$ExecutionHelper.remove()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher$LeafSlice",
            "org.apache.lucene.search.IndexSearcher$LeafSlice(org.apache.lucene.index.AtomicReaderContext...)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.IndexSearcher$LeafSlice, org.apache.lucene.search.Weight, org.apache.lucene.search.ScoreDoc, int, org.apache.lucene.search.HitQueue)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort.call()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableNoSort.call()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer(org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort)"
        ],
        [
            "int",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort$FakeScorer.score()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort(java.util.concurrent.locks.Lock, org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.IndexSearcher$LeafSlice, org.apache.lucene.search.Weight, org.apache.lucene.search.FieldDoc, int, org.apache.lucene.search.TopFieldCollector, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort.call()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.IndexSearcher$SearcherCallableWithSort.call()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.search.IndexSearcher.getDefaultSimilarity()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, java.util.concurrent.ExecutorService)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext, java.util.concurrent.ExecutorService)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "org.apache.lucene.index.IndexReader",
            "org.apache.lucene.search.IndexSearcher.getIndexReader()"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.search.IndexSearcher.doc(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.doc(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.search.IndexSearcher.document(int, java.util.Set<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.setSimilarity(org.apache.lucene.search.similarities.Similarity)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.search.IndexSearcher.getSimilarity()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.IndexSearcher.rewrite(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.IndexSearcher.explain(org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.IndexSearcher.createNormalizedWeight(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.search.IndexSearcher.getTopReaderContext()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.IndexSearcher.toString()"
        ],
        [
            "org.apache.lucene.search.TermStatistics",
            "org.apache.lucene.search.IndexSearcher.termStatistics(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"
        ],
        [
            "org.apache.lucene.search.CollectionStatistics",
            "org.apache.lucene.search.IndexSearcher.collectionStatistics(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight(org.apache.lucene.search.MatchAllDocsQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.toString()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.advance(int)"
        ],
        [
            "org.apache.lucene.search.MatchAllDocsQuery",
            "org.apache.lucene.search.MatchAllDocsQuery()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.MatchAllDocsQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "void",
            "org.apache.lucene.search.MatchAllDocsQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MatchAllDocsQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MatchAllDocsQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setMaxNonCompetitiveBoost(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getMaxNonCompetitiveBoost()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setCompetitiveTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getCompetitiveTerm()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.MultiCollector.wrap(org.apache.lucene.search.Collector...)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.MultiPhraseQuery",
            "org.apache.lucene.search.MultiPhraseQuery()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.setSlop(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiPhraseQuery.getSlop()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[])"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.MultiPhraseQuery.getPositions()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.MultiPhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiPhraseQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiPhraseQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiPhraseQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiTermQuery$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQuery$2.setTermCountCutoff(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQuery$2.setDocCountPercent(double)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "double",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.getDocCountPercent()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.setDocCountPercent(double)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.getTermCountCutoff()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.setTermCountCutoff(int)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$RewriteMethod",
            "org.apache.lucene.search.MultiTermQuery$RewriteMethod()"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite",
            "org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(int)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite",
            "org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite(int)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery",
            "org.apache.lucene.search.MultiTermQuery(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQuery.getField()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiTermQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$RewriteMethod",
            "org.apache.lucene.search.MultiTermQuery.getRewriteMethod()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQuery.setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiTermQuery.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.getField()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.NGramPhraseQuery",
            "org.apache.lucene.search.NGramPhraseQuery(int)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.NGramPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NGramPhraseQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.NGramPhraseQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.index.Term...)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.search.Query)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteDocuments(org.apache.lucene.search.Query...)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.deleteAll()"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addIndexes(org.apache.lucene.store.Directory...)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.addIndexes(org.apache.lucene.index.IndexReader...)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.getGeneration()"
        ],
        [
            "org.apache.lucene.index.IndexWriter",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.getIndexWriter()"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager$TrackingIndexWriter.tryDeleteDocument(org.apache.lucene.index.IndexReader, int)"
        ],
        [
            "org.apache.lucene.search.NRTManager",
            "org.apache.lucene.search.NRTManager(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory)"
        ],
        [
            "org.apache.lucene.search.NRTManager",
            "org.apache.lucene.search.NRTManager(org.apache.lucene.search.NRTManager$TrackingIndexWriter, org.apache.lucene.search.SearcherFactory, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.NRTManager.addWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)"
        ],
        [
            "void",
            "org.apache.lucene.search.NRTManager.removeWaitingListener(org.apache.lucene.search.NRTManager$WaitingListener)"
        ],
        [
            "void",
            "org.apache.lucene.search.NRTManager.waitForGeneration(long)"
        ],
        [
            "void",
            "org.apache.lucene.search.NRTManager.waitForGeneration(long, long, java.util.concurrent.TimeUnit)"
        ],
        [
            "long",
            "org.apache.lucene.search.NRTManager.getCurrentSearchingGen()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NRTManager.isSearcherCurrent()"
        ],
        [
            "org.apache.lucene.search.NRTManagerReopenThread",
            "org.apache.lucene.search.NRTManagerReopenThread(org.apache.lucene.search.NRTManager, double, double)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.NRTManagerReopenThread.void close()"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.NRTManagerReopenThread.void waiting(long)"
        ],
        [
            "void",
            "org.apache.lucene.search.NRTManagerReopenThread.run()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeFilter.includesMin()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeFilter.includesMax()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeFilter.getMin()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeFilter.getMax()"
        ],
        [
            "int",
            "org.apache.lucene.search.NumericRangeFilter.getPrecisionStep()"
        ],
        [
            "void",
            "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum$1.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum$2.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeQuery.includesMin()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeQuery.includesMax()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeQuery.getMin()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeQuery.getMax()"
        ],
        [
            "int",
            "org.apache.lucene.search.NumericRangeQuery.getPrecisionStep()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.NumericRangeQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.NumericRangeQuery.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhrasePositions.toString()"
        ],
        [
            "org.apache.lucene.search.PhraseQuery$PhraseWeight",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.toString()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq(org.apache.lucene.index.DocsAndPositionsEnum, int, int, org.apache.lucene.index.Term...)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.PhraseQuery",
            "org.apache.lucene.search.PhraseQuery()"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.setSlop(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery.getSlop()"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.index.Term[]",
            "org.apache.lucene.search.PhraseQuery.getTerms()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.PhraseQuery.getPositions()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.PhraseQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.PhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhraseQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PhraseQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.PhraseScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseScorer.advance(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.PhraseScorer.freq()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhraseScorer.toString()"
        ],
        [
            "org.apache.lucene.search.PositiveScoresOnlyCollector",
            "org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)"
        ],
        [
            "void",
            "org.apache.lucene.search.PositiveScoresOnlyCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.PositiveScoresOnlyCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.PositiveScoresOnlyCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PositiveScoresOnlyCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.PrefixFilter",
            "org.apache.lucene.search.PrefixFilter(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.PrefixFilter.getPrefix()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PrefixFilter.toString()"
        ],
        [
            "org.apache.lucene.search.PrefixQuery",
            "org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.PrefixQuery.getPrefix()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PrefixQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.PrefixQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PrefixQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.PrefixTermsEnum",
            "org.apache.lucene.search.PrefixTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Query()"
        ],
        [
            "void",
            "org.apache.lucene.search.Query.setBoost(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.Query.getBoost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Query.toString()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.Query.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Query.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.Query.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Query.clone()"
        ],
        [
            "int",
            "org.apache.lucene.search.Query.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Query.equals(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.Query.clone()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.QueryWrapperFilter$1.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.QueryWrapperFilter$1.isCacheable()"
        ],
        [
            "org.apache.lucene.search.QueryWrapperFilter",
            "org.apache.lucene.search.QueryWrapperFilter(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.QueryWrapperFilter.getQuery()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.QueryWrapperFilter.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.QueryWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.QueryWrapperFilter.hashCode()"
        ],
        [
            "org.apache.lucene.search.ReferenceManager",
            "org.apache.lucene.search.ReferenceManager()"
        ],
        [
            "G",
            "org.apache.lucene.search.ReferenceManager.acquire()"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.ReferenceManager.void close()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ReferenceManager.maybeRefresh()"
        ],
        [
            "void",
            "org.apache.lucene.search.ReferenceManager.maybeRefreshBlocking()"
        ],
        [
            "void",
            "org.apache.lucene.search.ReferenceManager.release(G)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.search.RegexpQuery$1.getAutomaton(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, org.apache.lucene.util.automaton.AutomatonProvider)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.RegexpQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.ReqExclScorer",
            "org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ReqExclScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.ReqExclScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.advance(int)"
        ],
        [
            "org.apache.lucene.search.ReqOptSumScorer",
            "org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ReqOptSumScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.ReqOptSumScorer.freq()"
        ],
        [
            "org.apache.lucene.search.ScoreCachingWrappingScorer",
            "org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.score(org.apache.lucene.search.Collector, int, int)"
        ],
        [
            "float",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.nextDoc()"
        ],
        [
            "void",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.score(org.apache.lucene.search.Collector)"
        ],
        [
            "int",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.advance(int)"
        ],
        [
            "org.apache.lucene.search.ScoreDoc",
            "org.apache.lucene.search.ScoreDoc(int, float)"
        ],
        [
            "org.apache.lucene.search.ScoreDoc",
            "org.apache.lucene.search.ScoreDoc(int, float, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.ScoreDoc.toString()"
        ],
        [
            "org.apache.lucene.search.Scorer$ChildScorer",
            "org.apache.lucene.search.Scorer$ChildScorer(org.apache.lucene.search.Scorer, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.search.Scorer.score(org.apache.lucene.search.Collector)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Scorer.score(org.apache.lucene.search.Collector, int, int)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.Scorer.getWeight()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ScoringRewrite$2.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "void",
            "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.setNextEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.collect(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart(int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.init()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.clear()"
        ],
        [
            "org.apache.lucene.search.ScoringRewrite",
            "org.apache.lucene.search.ScoringRewrite()"
        ],
        [
            "Q",
            "org.apache.lucene.search.ScoringRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.SearcherFactory",
            "org.apache.lucene.search.SearcherFactory()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.SearcherFactory.newSearcher(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge",
            "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge(double)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge.doPrune(double, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "int",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.void close()"
        ],
        [
            "int",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.SearcherLifetimeManager",
            "org.apache.lucene.search.SearcherLifetimeManager()"
        ],
        [
            "long",
            "org.apache.lucene.search.SearcherLifetimeManager.record(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.SearcherLifetimeManager.acquire(long)"
        ],
        [
            "void",
            "org.apache.lucene.search.SearcherLifetimeManager.release(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.SearcherLifetimeManager.void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.SearcherLifetimeManager.void close()"
        ],
        [
            "org.apache.lucene.search.SearcherManager",
            "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, boolean, org.apache.lucene.search.SearcherFactory)"
        ],
        [
            "org.apache.lucene.search.SearcherManager",
            "org.apache.lucene.search.SearcherManager(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SearcherManager.isSearcherCurrent()"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer$1.compare(org.apache.lucene.search.PhrasePositions, org.apache.lucene.search.PhrasePositions)"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort()"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)"
        ],
        [
            "void",
            "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField)"
        ],
        [
            "void",
            "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField...)"
        ],
        [
            "org.apache.lucene.search.SortField[]",
            "org.apache.lucene.search.Sort.getSort()"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort.rewrite(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Sort.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Sort.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.Sort.hashCode()"
        ],
        [
            "org.apache.lucene.search.SortField$Type[]",
            "org.apache.lucene.search.SortField$Type.values()"
        ],
        [
            "org.apache.lucene.search.SortField$Type",
            "org.apache.lucene.search.SortField$Type.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldCache$Parser, boolean)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField.setMissingValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortField.getField()"
        ],
        [
            "org.apache.lucene.search.SortField$Type",
            "org.apache.lucene.search.SortField.getType()"
        ],
        [
            "org.apache.lucene.search.FieldCache$Parser",
            "org.apache.lucene.search.SortField.getParser()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortField.getReverse()"
        ],
        [
            "org.apache.lucene.search.FieldComparatorSource",
            "org.apache.lucene.search.SortField.getComparatorSource()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortField.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortField.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortField.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.search.SortField.setUseIndexValues(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortField.getUseIndexValues()"
        ],
        [
            "void",
            "org.apache.lucene.search.SortField.setBytesComparator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField.rewrite(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "void",
            "org.apache.lucene.search.TermCollectingRewrite$TermCollector.setReaderContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.TermQuery$TermWeight",
            "org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.IndexSearcher, org.apache.lucene.index.TermContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermQuery$TermWeight.toString()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.TermQuery$TermWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.TermQuery$TermWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.TermQuery$TermWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.TermQuery$TermWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.TermQuery$TermWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.TermQuery",
            "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.search.TermQuery",
            "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.search.TermQuery",
            "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.TermQuery.getTerm()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.TermQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "void",
            "org.apache.lucene.search.TermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.TermQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter.Less(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter.More(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeFilter.getLowerTerm()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeFilter.getUpperTerm()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeFilter.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeFilter.includesUpper()"
        ],
        [
            "org.apache.lucene.search.TermRangeQuery",
            "org.apache.lucene.search.TermRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TermRangeQuery",
            "org.apache.lucene.search.TermRangeQuery.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeQuery.getLowerTerm()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeQuery.getUpperTerm()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeQuery.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeQuery.includesUpper()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermRangeQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.TermRangeQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TermRangeTermsEnum",
            "org.apache.lucene.search.TermRangeTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.TermScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.TermScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.advance(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermScorer.toString()"
        ],
        [
            "org.apache.lucene.search.TermStatistics",
            "org.apache.lucene.search.TermStatistics(org.apache.lucene.util.BytesRef, long, long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermStatistics.term()"
        ],
        [
            "long",
            "org.apache.lucene.search.TermStatistics.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.TermStatistics.totalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeAllowed()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeElapsed()"
        ],
        [
            "int",
            "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getLastDocCollected()"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread(long, org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread(org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.run()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getMilliseconds()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.stopTimer()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getResolution()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.setResolution(long)"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector",
            "org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, org.apache.lucene.util.Counter, long)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setBaseline(long)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setBaseline()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TimeLimitingCollector.isGreedy()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TimeLimitingCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setCollector(org.apache.lucene.search.Collector)"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.search.TimeLimitingCollector.getGlobalCounter()"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread",
            "org.apache.lucene.search.TimeLimitingCollector.getGlobalTimerThread()"
        ],
        [
            "org.apache.lucene.search.TopDocs$MergeSortQueue",
            "org.apache.lucene.search.TopDocs$MergeSortQueue(org.apache.lucene.search.Sort, org.apache.lucene.search.TopDocs[])"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue",
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue(org.apache.lucene.search.TopDocs[])"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopDocs$ShardRef",
            "org.apache.lucene.search.TopDocs$ShardRef(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TopDocs$ShardRef.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.TopDocs.getMaxScore()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopDocs.setMaxScore(float)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocs(int, org.apache.lucene.search.ScoreDoc[], float)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocs.merge(org.apache.lucene.search.Sort, int, org.apache.lucene.search.TopDocs[])"
        ],
        [
            "int",
            "org.apache.lucene.search.TopDocsCollector.getTotalHits()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocsCollector.topDocs()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocsCollector.topDocs(int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocsCollector.topDocs(int, int)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorNonScoringCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorNonScoringCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorNonScoringCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderMultiComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorNonScoringCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringMaxScoreCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$OutOfOrderOneComparatorScoringNoMaxScoreCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector(org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, org.apache.lucene.search.FieldDoc, int, boolean, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector",
            "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector",
            "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, org.apache.lucene.search.FieldDoc, boolean, boolean, boolean, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.TopFieldDocs(int, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$InOrderPagingScoreDocCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopScoreDocCollector$InOrderTopScoreDocCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderPagingScoreDocCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopScoreDocCollector$OutOfOrderTopScoreDocCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.TopScoreDocCollector",
            "org.apache.lucene.search.TopScoreDocCollector.create(int, boolean)"
        ],
        [
            "org.apache.lucene.search.TopScoreDocCollector",
            "org.apache.lucene.search.TopScoreDocCollector.create(int, org.apache.lucene.search.ScoreDoc, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopTermsRewrite$1.setNextEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopTermsRewrite$1.collect(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$2.compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$2.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm",
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm(java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.index.TermContext)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopTermsRewrite",
            "org.apache.lucene.search.TopTermsRewrite(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite.getSize()"
        ],
        [
            "Q",
            "org.apache.lucene.search.TopTermsRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopTermsRewrite.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TotalHitCountCollector",
            "org.apache.lucene.search.TotalHitCountCollector()"
        ],
        [
            "int",
            "org.apache.lucene.search.TotalHitCountCollector.getTotalHits()"
        ],
        [
            "void",
            "org.apache.lucene.search.TotalHitCountCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.TotalHitCountCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TotalHitCountCollector.setNextReader(org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TotalHitCountCollector.acceptsDocsOutOfOrder()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum$DocsQueue.lessThan(org.apache.lucene.index.DocsAndPositionsEnum, org.apache.lucene.index.DocsAndPositionsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum$DocsQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.UnionDocsAndPositionsEnum",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum(org.apache.lucene.util.Bits, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.index.Term[], java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.index.TermsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionDocsAndPositionsEnum.docID()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.Weight()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Weight.scoresDocsOutOfOrder()"
        ],
        [
            "org.apache.lucene.search.WildcardQuery",
            "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.search.WildcardQuery.toAutomaton(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.WildcardQuery.getTerm()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.WildcardQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.payloads.AveragePayloadFunction",
            "org.apache.lucene.search.payloads.AveragePayloadFunction()"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.docScore(int, java.lang.String, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.payloads.MaxPayloadFunction",
            "org.apache.lucene.search.payloads.MaxPayloadFunction()"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.docScore(int, java.lang.String, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.payloads.MinPayloadFunction",
            "org.apache.lucene.search.payloads.MinPayloadFunction()"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MinPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MinPayloadFunction.docScore(int, java.lang.String, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.MinPayloadFunction.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.MinPayloadFunction.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadFunction",
            "org.apache.lucene.search.payloads.PayloadFunction()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.payloads.PayloadFunction.explain(int, java.lang.String, int, float)"
        ],
        [
            "void",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.getPayloads(org.apache.lucene.search.spans.Spans[])"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.score()"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight(org.apache.lucene.search.payloads.PayloadNearQuery, org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, org.apache.lucene.search.payloads.PayloadFunction)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.payloads.PayloadNearQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.payloads.PayloadNearQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.PayloadNearQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.PayloadNearQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadSpanUtil",
            "org.apache.lucene.search.payloads.PayloadSpanUtil(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer(org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight, org.apache.lucene.search.spans.TermSpans, org.apache.lucene.search.Weight, org.apache.lucene.search.similarities.Similarity$SloppySimScorer)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer.score()"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight(org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery",
            "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery",
            "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction, boolean)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.payloads.PayloadTermQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.PayloadTermQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.PayloadTermQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffect",
            "org.apache.lucene.search.similarities.AfterEffect()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffectB",
            "org.apache.lucene.search.similarities.AfterEffectB()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.AfterEffectB.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.AfterEffectB.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.AfterEffectB.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffectL",
            "org.apache.lucene.search.similarities.AfterEffectL()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.AfterEffectL.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.AfterEffectL.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.AfterEffectL.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25Stats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25Stats.normalize(float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorer.score(int, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorerNoNorms.score(int, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity$ExactBM25DocScorerNoNorms.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.score(int, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$SloppyBM25DocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.similarities.BM25Similarity",
            "org.apache.lucene.search.similarities.BM25Similarity(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.BM25Similarity",
            "org.apache.lucene.search.similarities.BM25Similarity()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BM25Similarity.setDiscountOverlaps(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.similarities.BM25Similarity.getDiscountOverlaps()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BM25Similarity.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.BM25Similarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer",
            "org.apache.lucene.search.similarities.BM25Similarity.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer",
            "org.apache.lucene.search.similarities.BM25Similarity.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BM25Similarity.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity.getK1()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity.getB()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModel",
            "org.apache.lucene.search.similarities.BasicModel()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BasicModel.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelBE",
            "org.apache.lucene.search.similarities.BasicModelBE()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelBE.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelBE.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelD",
            "org.apache.lucene.search.similarities.BasicModelD()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelD.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelD.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelG",
            "org.apache.lucene.search.similarities.BasicModelG()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelG.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelG.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelIF",
            "org.apache.lucene.search.similarities.BasicModelIF()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelIF.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelIF.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelIn",
            "org.apache.lucene.search.similarities.BasicModelIn()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelIn.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BasicModelIn.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelIn.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelIne",
            "org.apache.lucene.search.similarities.BasicModelIne()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelIne.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelIne.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelP",
            "org.apache.lucene.search.similarities.BasicModelP()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelP.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelP.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicStats",
            "org.apache.lucene.search.similarities.BasicStats(java.lang.String, float)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getNumberOfDocuments()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setNumberOfDocuments(long)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getNumberOfFieldTokens()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setNumberOfFieldTokens(long)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicStats.getAvgFieldLength()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setAvgFieldLength(float)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getDocFreq()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setDocFreq(long)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getTotalTermFreq()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setTotalTermFreq(long)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicStats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.normalize(float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicStats.getTotalBoost()"
        ],
        [
            "org.apache.lucene.search.similarities.DFRSimilarity",
            "org.apache.lucene.search.similarities.DFRSimilarity(org.apache.lucene.search.similarities.BasicModel, org.apache.lucene.search.similarities.AfterEffect, org.apache.lucene.search.similarities.Normalization)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DFRSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModel",
            "org.apache.lucene.search.similarities.DFRSimilarity.getBasicModel()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffect",
            "org.apache.lucene.search.similarities.DFRSimilarity.getAfterEffect()"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization",
            "org.apache.lucene.search.similarities.DFRSimilarity.getNormalization()"
        ],
        [
            "org.apache.lucene.search.similarities.DefaultSimilarity",
            "org.apache.lucene.search.similarities.DefaultSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.coord(int, int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.queryNorm(float)"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.DefaultSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.tf(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.sloppyFreq(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.scorePayload(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.idf(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.DefaultSimilarity.setDiscountOverlaps(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.similarities.DefaultSimilarity.getDiscountOverlaps()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DefaultSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Distribution",
            "org.apache.lucene.search.similarities.Distribution()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Distribution.explain(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.DistributionLL",
            "org.apache.lucene.search.similarities.DistributionLL()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DistributionLL.score(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DistributionLL.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.DistributionSPL",
            "org.apache.lucene.search.similarities.DistributionSPL()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DistributionSPL.score(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DistributionSPL.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.IBSimilarity",
            "org.apache.lucene.search.similarities.IBSimilarity(org.apache.lucene.search.similarities.Distribution, org.apache.lucene.search.similarities.Lambda, org.apache.lucene.search.similarities.Normalization)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.IBSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Distribution",
            "org.apache.lucene.search.similarities.IBSimilarity.getDistribution()"
        ],
        [
            "org.apache.lucene.search.similarities.Lambda",
            "org.apache.lucene.search.similarities.IBSimilarity.getLambda()"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization",
            "org.apache.lucene.search.similarities.IBSimilarity.getNormalization()"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity(float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity.getMu()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity.getName()"
        ],
        [
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getLambda()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getName()"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel",
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.computeProbability(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.getName()"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats",
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats(java.lang.String, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats.getCollectionProbability()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats.setCollectionProbability(float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity",
            "org.apache.lucene.search.similarities.LMSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity",
            "org.apache.lucene.search.similarities.LMSimilarity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Lambda",
            "org.apache.lucene.search.similarities.Lambda()"
        ],
        [
            "org.apache.lucene.search.similarities.LambdaDF",
            "org.apache.lucene.search.similarities.LambdaDF()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LambdaDF.lambda(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.LambdaDF.explain(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LambdaDF.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.LambdaTTF",
            "org.apache.lucene.search.similarities.LambdaTTF()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LambdaTTF.lambda(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.LambdaTTF.explain(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LambdaTTF.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiExactDocScorer.score(int, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiExactDocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.score(int, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSloppyDocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiStats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiStats.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.MultiSimilarity",
            "org.apache.lucene.search.similarities.MultiSimilarity(org.apache.lucene.search.similarities.Similarity[])"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.MultiSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.MultiSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer",
            "org.apache.lucene.search.similarities.MultiSimilarity.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer",
            "org.apache.lucene.search.similarities.MultiSimilarity.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization$NoNormalization",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization",
            "org.apache.lucene.search.similarities.Normalization()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Normalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH1",
            "org.apache.lucene.search.similarities.NormalizationH1(float)"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH1",
            "org.apache.lucene.search.similarities.NormalizationH1()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH1.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationH1.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH1.getC()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH2",
            "org.apache.lucene.search.similarities.NormalizationH2(float)"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH2",
            "org.apache.lucene.search.similarities.NormalizationH2()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH2.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationH2.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH2.getC()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH3",
            "org.apache.lucene.search.similarities.NormalizationH3()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH3",
            "org.apache.lucene.search.similarities.NormalizationH3(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH3.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationH3.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH3.getMu()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationZ",
            "org.apache.lucene.search.similarities.NormalizationZ()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationZ",
            "org.apache.lucene.search.similarities.NormalizationZ(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationZ.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationZ.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationZ.getZ()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper$PerFieldSimWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper$PerFieldSimWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer",
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.Similarity$SimWeight()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer",
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.search.similarities.Similarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.Similarity.coord(int, int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.Similarity.queryNorm(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicExactDocScorer.score(int, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicExactDocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.score(int, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSloppyDocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.similarities.SimilarityBase",
            "org.apache.lucene.search.similarities.SimilarityBase()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.SimilarityBase.setDiscountOverlaps(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.similarities.SimilarityBase.getDiscountOverlaps()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.SimilarityBase.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer",
            "org.apache.lucene.search.similarities.SimilarityBase.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer",
            "org.apache.lucene.search.similarities.SimilarityBase.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.SimilarityBase.computeNorm(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.Norm)"
        ],
        [
            "double",
            "org.apache.lucene.search.similarities.SimilarityBase.log2(double)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$ExactTFIDFDocScorer.score(int, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$ExactTFIDFDocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats(java.lang.String, org.apache.lucene.search.Explanation, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats.normalize(float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.score(int, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$SloppyTFIDFDocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "org.apache.lucene.search.similarities.TFIDFSimilarity",
            "org.apache.lucene.search.similarities.TFIDFSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.tf(int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.decodeNormValue(byte)"
        ],
        [
            "byte",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.encodeNormValue(float)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$ExactSimScorer",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.exactSimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SloppySimScorer",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.sloppySimScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.AtomicReaderContext)"
        ],
        [
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered$1.compare(org.apache.lucene.search.spans.Spans, org.apache.lucene.search.spans.Spans)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansOrdered",
            "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansOrdered",
            "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered.end()"
        ],
        [
            "org.apache.lucene.search.spans.Spans[]",
            "org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansOrdered.isPayloadAvailable()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansOrdered.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansOrdered.skipTo(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.NearSpansOrdered.toString()"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansUnordered$CellQueue",
            "org.apache.lucene.search.spans.NearSpansUnordered$CellQueue(org.apache.lucene.search.spans.NearSpansUnordered, int)"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.Spans, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.toString()"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansUnordered",
            "org.apache.lucene.search.spans.NearSpansUnordered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.spans.Spans[]",
            "org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.NearSpansUnordered.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanFirstQuery",
            "org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanFirstQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanFirstQuery",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanFirstQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanFirstQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionRangeQuery",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.getSize()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper(Q)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getRewriteMethod()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getField()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery(org.apache.lucene.search.spans.SpanNearQuery, java.util.Collection<byte[]>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery[]",
            "org.apache.lucene.search.spans.SpanNearQuery.getClauses()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNearQuery.getSlop()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNearQuery.isInOrder()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNearQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanNearQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNearQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanNearQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNearQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.spans.SpanNearQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNearQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNearQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNearQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanNearQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery$1.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery$1.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery$1.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery$1.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery$1.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNotQuery$1.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanNotQuery",
            "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanNotQuery.getInclude()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanNotQuery.getExclude()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNotQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanNotQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNotQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNotQuery",
            "org.apache.lucene.search.spans.SpanNotQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanNotQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNotQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNotQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanNotQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery$1.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery$1.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery$1.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery$1.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery$1.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanOrQuery$1.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanOrQuery$SpanQueue",
            "org.apache.lucene.search.spans.SpanOrQuery$SpanQueue(org.apache.lucene.search.spans.SpanOrQuery, int)"
        ],
        [
            "org.apache.lucene.search.spans.SpanOrQuery",
            "org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanOrQuery.addClause(org.apache.lucene.search.spans.SpanQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery[]",
            "org.apache.lucene.search.spans.SpanOrQuery.getClauses()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanOrQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanOrQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.spans.SpanOrQuery",
            "org.apache.lucene.search.spans.SpanOrQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanOrQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanOrQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanOrQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanOrQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanOrQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery(org.apache.lucene.search.spans.SpanQuery, java.util.Collection<byte[]>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus[]",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus.values()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery(org.apache.lucene.search.spans.SpanQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.getMatch()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionRangeQuery",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery(org.apache.lucene.search.spans.SpanQuery, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.getStart()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.getEnd()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionRangeQuery",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanQuery()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.spans.SpanQuery.createWeight(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.spans.SpanScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.spans.SpanScorer.freq()"
        ],
        [
            "org.apache.lucene.search.spans.SpanTermQuery",
            "org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.spans.SpanTermQuery.getTerm()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanTermQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanTermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanTermQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanTermQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanTermQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanTermQuery.getSpans(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.spans.SpanWeight",
            "org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanWeight.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.spans.SpanWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.spans.SpanWeight.scorer(org.apache.lucene.index.AtomicReaderContext, boolean, boolean, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.spans.SpanWeight.explain(org.apache.lucene.index.AtomicReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.Spans()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.isPayloadAvailable()"
        ],
        [
            "org.apache.lucene.search.spans.TermSpans",
            "org.apache.lucene.search.spans.TermSpans(org.apache.lucene.index.DocsAndPositionsEnum, org.apache.lucene.index.Term)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.TermSpans.toString()"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.search.spans.TermSpans.getPostings()"
        ],
        [
            "org.apache.lucene.store.AlreadyClosedException",
            "org.apache.lucene.store.AlreadyClosedException(java.lang.String)"
        ],
        [
            "byte",
            "org.apache.lucene.store.BufferedIndexInput.readByte()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput(java.lang.String, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.getBufferSize()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int, boolean)"
        ],
        [
            "short",
            "org.apache.lucene.store.BufferedIndexInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.readInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.readLong()"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.readVInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.readVLong()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.seek(long)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.bufferSize(org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexOutput",
            "org.apache.lucene.store.BufferedIndexOutput()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexOutput.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexOutput.flush()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexOutput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexOutput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexOutput.seek(long)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataInput",
            "org.apache.lucene.store.ByteArrayDataInput(byte[])"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataInput",
            "org.apache.lucene.store.ByteArrayDataInput(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataInput",
            "org.apache.lucene.store.ByteArrayDataInput()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.reset(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.rewind()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.setPosition(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.reset(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.ByteArrayDataInput.eof()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.skipBytes(int)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteArrayDataInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.readInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteArrayDataInput.readLong()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.readVInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteArrayDataInput.readVLong()"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteArrayDataInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataOutput",
            "org.apache.lucene.store.ByteArrayDataOutput(byte[])"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataOutput",
            "org.apache.lucene.store.ByteArrayDataOutput(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataOutput",
            "org.apache.lucene.store.ByteArrayDataOutput()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataOutput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteBufferIndexInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput.readBytes(byte[], int, int)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteBufferIndexInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteBufferIndexInput.readInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.readLong()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.ByteBufferIndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.ByteBufferIndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput.close()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.ByteBufferIndexInput.toString()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.ChecksumIndexInput",
            "org.apache.lucene.store.ChecksumIndexInput(org.apache.lucene.store.IndexInput)"
        ],
        [
            "byte",
            "org.apache.lucene.store.ChecksumIndexInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexInput.readBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.ChecksumIndexInput.getChecksum()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexInput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.ChecksumIndexInput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexInput.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ChecksumIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.ChecksumIndexOutput",
            "org.apache.lucene.store.ChecksumIndexOutput(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexOutput.writeBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.ChecksumIndexOutput.getChecksum()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexOutput.flush()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexOutput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.ChecksumIndexOutput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexOutput.seek(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexOutput.finishCommit()"
        ],
        [
            "long",
            "org.apache.lucene.store.ChecksumIndexOutput.length()"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileDirectory$1.close()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.CompoundFileDirectory$1.openSlice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.CompoundFileDirectory$1.openFullSlice()"
        ],
        [
            "org.apache.lucene.store.CompoundFileDirectory$FileEntry",
            "org.apache.lucene.store.CompoundFileDirectory$FileEntry()"
        ],
        [
            "org.apache.lucene.store.CompoundFileDirectory",
            "org.apache.lucene.store.CompoundFileDirectory(org.apache.lucene.store.Directory, java.lang.String, org.apache.lucene.store.IOContext, boolean)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.CompoundFileDirectory.getDirectory()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.CompoundFileDirectory.getName()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.CompoundFileDirectory.void close()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.CompoundFileDirectory.org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.CompoundFileDirectory.listAll()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.CompoundFileDirectory.fileExists(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileDirectory.deleteFile(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileDirectory.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.CompoundFileDirectory.fileLength(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.CompoundFileDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.CompoundFileDirectory.makeLock(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.CompoundFileDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.CompoundFileDirectory.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.flush()"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.length()"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileWriter$DirectCFSIndexOutput.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.CompoundFileWriter.close()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.DataInput()"
        ],
        [
            "void",
            "org.apache.lucene.store.DataInput.readBytes(byte[], int, int, boolean)"
        ],
        [
            "short",
            "org.apache.lucene.store.DataInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.DataInput.readInt()"
        ],
        [
            "int",
            "org.apache.lucene.store.DataInput.readVInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.DataInput.readLong()"
        ],
        [
            "long",
            "org.apache.lucene.store.DataInput.readVLong()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.DataInput.readString()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.DataInput.clone()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.store.DataInput.readStringStringMap()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.DataInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataOutput",
            "org.apache.lucene.store.DataOutput()"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeBytes(byte[], int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeShort(short)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeVInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeLong(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeVLong(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeString(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.copyBytes(org.apache.lucene.store.DataInput, long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeStringStringMap(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeStringSet(java.util.Set<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.Directory$1.openSlice(java.lang.String, long, long)"
        ],
        [
            "void",
            "org.apache.lucene.store.Directory$1.close()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.Directory$1.openFullSlice()"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.Directory$IndexInputSlicer(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.store.Directory$SlicedIndexInput",
            "org.apache.lucene.store.Directory$SlicedIndexInput.clone()"
        ],
        [
            "void",
            "org.apache.lucene.store.Directory$SlicedIndexInput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.Directory$SlicedIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.Directory$SlicedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.Directory$SlicedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.Directory$SlicedIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.Directory$SlicedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.Directory()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.Directory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.Directory.clearLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.Directory.setLockFactory(org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.LockFactory",
            "org.apache.lucene.store.Directory.getLockFactory()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.Directory.getLockID()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.Directory.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.Directory.copy(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.Directory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.FSDirectory$1.accept(java.io.File, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.close()"
        ],
        [
            "org.apache.lucene.store.FSDirectory$FSIndexInput",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()"
        ],
        [
            "long",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.FSDirectory$FSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.FSDirectory$FSIndexOutput",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput(org.apache.lucene.store.FSDirectory, java.lang.String, org.apache.lucene.store.RateLimiter)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput.flushBuffer(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput.close()"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput.length()"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput.setLength(long)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.store.FSDirectory.open(java.io.File)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.store.FSDirectory.open(java.io.File, org.apache.lucene.store.LockFactory)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.setLockFactory(org.apache.lucene.store.LockFactory)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FSDirectory.listAll(java.io.File)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FSDirectory.listAll()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.FSDirectory.fileExists(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.FSDirectory.fileModified(java.io.File, java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.FSDirectory.fileLength(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.deleteFile(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.FSDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.setMaxMergeWriteMBPerSec(java.lang.Double)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.setMaxMergeWriteLimiter(org.apache.lucene.store.RateLimiter)"
        ],
        [
            "java.lang.Double",
            "org.apache.lucene.store.FSDirectory.getMaxMergeWriteMBPerSec()"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FSDirectory.getLockID()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.FSDirectory.void close()"
        ],
        [
            "java.io.File",
            "org.apache.lucene.store.FSDirectory.getDirectory()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FSDirectory.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.setReadChunkSize(int)"
        ],
        [
            "int",
            "org.apache.lucene.store.FSDirectory.getReadChunkSize()"
        ],
        [
            "org.apache.lucene.store.FSLockFactory",
            "org.apache.lucene.store.FSLockFactory()"
        ],
        [
            "java.io.File",
            "org.apache.lucene.store.FSLockFactory.getLockDir()"
        ],
        [
            "org.apache.lucene.store.FileSwitchDirectory",
            "org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.close()"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FileSwitchDirectory.listAll()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FileSwitchDirectory.getExtension(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.FileSwitchDirectory.fileExists(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.deleteFile(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.FileSwitchDirectory.fileLength(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.FileSwitchDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.FileSwitchDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.FileSwitchDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.FlushInfo",
            "org.apache.lucene.store.FlushInfo(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.store.FlushInfo.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.FlushInfo.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FlushInfo.toString()"
        ],
        [
            "org.apache.lucene.store.IOContext$Context[]",
            "org.apache.lucene.store.IOContext$Context.values()"
        ],
        [
            "org.apache.lucene.store.IOContext$Context",
            "org.apache.lucene.store.IOContext$Context.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext()"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.FlushInfo)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext$Context)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.MergeInfo)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.store.IOContext.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.IOContext.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.IOContext.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.IndexInput.toString()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.IndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.IndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.IndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.IndexOutput()"
        ],
        [
            "void",
            "org.apache.lucene.store.IndexOutput.setLength(long)"
        ],
        [
            "org.apache.lucene.store.InputStreamDataInput",
            "org.apache.lucene.store.InputStreamDataInput(java.io.InputStream)"
        ],
        [
            "byte",
            "org.apache.lucene.store.InputStreamDataInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.InputStreamDataInput.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.InputStreamDataInput.close()"
        ],
        [
            "org.apache.lucene.store.Lock$With",
            "org.apache.lucene.store.Lock$With(org.apache.lucene.store.Lock, long)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.Lock$With.run()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.Lock()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.Lock.obtain(long)"
        ],
        [
            "org.apache.lucene.store.LockFactory",
            "org.apache.lucene.store.LockFactory()"
        ],
        [
            "void",
            "org.apache.lucene.store.LockFactory.setLockPrefix(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.LockFactory.getLockPrefix()"
        ],
        [
            "org.apache.lucene.store.LockObtainFailedException",
            "org.apache.lucene.store.LockObtainFailedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.LockReleaseFailedException",
            "org.apache.lucene.store.LockReleaseFailedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.LockStressTest",
            "org.apache.lucene.store.LockStressTest()"
        ],
        [
            "void",
            "org.apache.lucene.store.LockStressTest.main(java.lang.String[])"
        ],
        [
            "org.apache.lucene.store.LockVerifyServer",
            "org.apache.lucene.store.LockVerifyServer()"
        ],
        [
            "void",
            "org.apache.lucene.store.LockVerifyServer.main(java.lang.String[])"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.MMapDirectory$1.run()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.MMapDirectory$2.openSlice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.MMapDirectory$2.openFullSlice()"
        ],
        [
            "void",
            "org.apache.lucene.store.MMapDirectory$2.close()"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.io.File)"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.io.File, org.apache.lucene.store.LockFactory, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.MMapDirectory.getUseUnmap()"
        ],
        [
            "int",
            "org.apache.lucene.store.MMapDirectory.getMaxChunkSize()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.MMapDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.MMapDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.MergeInfo",
            "org.apache.lucene.store.MergeInfo(int, long, boolean, int)"
        ],
        [
            "int",
            "org.apache.lucene.store.MergeInfo.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.MergeInfo.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.MergeInfo.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.NIOFSDirectory$1.close()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.NIOFSDirectory$1.openSlice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.NIOFSDirectory$1.openFullSlice()"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.io.File, org.apache.lucene.store.IOContext, int)"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.io.File, java.io.RandomAccessFile, java.nio.channels.FileChannel, long, long, int, int)"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory",
            "org.apache.lucene.store.NIOFSDirectory(java.io.File, org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory",
            "org.apache.lucene.store.NIOFSDirectory(java.io.File)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.NIOFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.NIOFSDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.NRTCachingDirectory",
            "org.apache.lucene.store.NRTCachingDirectory(org.apache.lucene.store.Directory, double, double)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.NRTCachingDirectory.getDelegate()"
        ],
        [
            "org.apache.lucene.store.LockFactory",
            "org.apache.lucene.store.NRTCachingDirectory.getLockFactory()"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.setLockFactory(org.apache.lucene.store.LockFactory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NRTCachingDirectory.getLockID()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.NRTCachingDirectory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.clearLock(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NRTCachingDirectory.toString()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.java.lang.String[] listAll()"
        ],
        [
            "long",
            "org.apache.lucene.store.NRTCachingDirectory.sizeInBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.boolean fileExists(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.void deleteFile(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.long fileLength(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.NRTCachingDirectory.listCachedFiles()"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.NRTCachingDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.close()"
        ],
        [
            "org.apache.lucene.store.NativeFSLock",
            "org.apache.lucene.store.NativeFSLock(java.io.File, java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLock.boolean obtain()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLock.void release()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLock.boolean isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NativeFSLock.toString()"
        ],
        [
            "org.apache.lucene.store.NativeFSLockFactory",
            "org.apache.lucene.store.NativeFSLockFactory()"
        ],
        [
            "org.apache.lucene.store.NativeFSLockFactory",
            "org.apache.lucene.store.NativeFSLockFactory(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.NativeFSLockFactory",
            "org.apache.lucene.store.NativeFSLockFactory(java.io.File)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLockFactory.org.apache.lucene.store.Lock makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.NativeFSLockFactory.clearLock(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.NoLock.obtain()"
        ],
        [
            "void",
            "org.apache.lucene.store.NoLock.release()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.NoLock.isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NoLock.toString()"
        ],
        [
            "org.apache.lucene.store.NoLockFactory",
            "org.apache.lucene.store.NoLockFactory.getNoLockFactory()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.NoLockFactory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.NoLockFactory.clearLock(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.NoSuchDirectoryException",
            "org.apache.lucene.store.NoSuchDirectoryException(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.OutputStreamDataOutput",
            "org.apache.lucene.store.OutputStreamDataOutput(java.io.OutputStream)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamDataOutput.close()"
        ],
        [
            "org.apache.lucene.store.RAMDirectory",
            "org.apache.lucene.store.RAMDirectory()"
        ],
        [
            "org.apache.lucene.store.RAMDirectory",
            "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.Directory, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.RAMDirectory.listAll()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.RAMDirectory.fileExists(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMDirectory.fileLength(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMDirectory.sizeInBytes()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.deleteFile(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.RAMDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.RAMDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.close()"
        ],
        [
            "org.apache.lucene.store.RAMFile",
            "org.apache.lucene.store.RAMFile()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.RAMFile.long getLength()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.RAMFile.long getSizeInBytes()"
        ],
        [
            "org.apache.lucene.store.RAMInputStream",
            "org.apache.lucene.store.RAMInputStream(java.lang.String, org.apache.lucene.store.RAMFile)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMInputStream.length()"
        ],
        [
            "byte",
            "org.apache.lucene.store.RAMInputStream.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream.readBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMInputStream.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream.seek(long)"
        ],
        [
            "org.apache.lucene.store.RAMOutputStream",
            "org.apache.lucene.store.RAMOutputStream()"
        ],
        [
            "org.apache.lucene.store.RAMOutputStream",
            "org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeTo(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeTo(byte[], int)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.reset()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.close()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMOutputStream.length()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.flush()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMOutputStream.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMOutputStream.sizeInBytes()"
        ],
        [
            "org.apache.lucene.store.RateLimiter",
            "org.apache.lucene.store.RateLimiter(double)"
        ],
        [
            "void",
            "org.apache.lucene.store.RateLimiter.setMbPerSec(double)"
        ],
        [
            "double",
            "org.apache.lucene.store.RateLimiter.getMbPerSec()"
        ],
        [
            "void",
            "org.apache.lucene.store.RateLimiter.pause(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.SimpleFSDirectory$1.close()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$1.openSlice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$1.openFullSlice()"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.io.File, org.apache.lucene.store.IOContext, int)"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.io.RandomAccessFile, long, long, int, int)"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory",
            "org.apache.lucene.store.SimpleFSDirectory(java.io.File, org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory",
            "org.apache.lucene.store.SimpleFSDirectory(java.io.File)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.SimpleFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.SimpleFSDirectory.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.SimpleFSLock",
            "org.apache.lucene.store.SimpleFSLock(java.io.File, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SimpleFSLock.obtain()"
        ],
        [
            "void",
            "org.apache.lucene.store.SimpleFSLock.release()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SimpleFSLock.isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.SimpleFSLock.toString()"
        ],
        [
            "org.apache.lucene.store.SimpleFSLockFactory",
            "org.apache.lucene.store.SimpleFSLockFactory()"
        ],
        [
            "org.apache.lucene.store.SimpleFSLockFactory",
            "org.apache.lucene.store.SimpleFSLockFactory(java.io.File)"
        ],
        [
            "org.apache.lucene.store.SimpleFSLockFactory",
            "org.apache.lucene.store.SimpleFSLockFactory(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.SimpleFSLockFactory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.SimpleFSLockFactory.clearLock(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.SingleInstanceLock",
            "org.apache.lucene.store.SingleInstanceLock(java.util.HashSet<java.lang.String>, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SingleInstanceLock.obtain()"
        ],
        [
            "void",
            "org.apache.lucene.store.SingleInstanceLock.release()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SingleInstanceLock.isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.SingleInstanceLock.toString()"
        ],
        [
            "org.apache.lucene.store.SingleInstanceLockFactory",
            "org.apache.lucene.store.SingleInstanceLockFactory()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.SingleInstanceLockFactory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.SingleInstanceLockFactory.clearLock(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.TrackingDirectoryWrapper",
            "org.apache.lucene.store.TrackingDirectoryWrapper(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.TrackingDirectoryWrapper.listAll()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.TrackingDirectoryWrapper.fileExists(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.TrackingDirectoryWrapper.fileLength(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.TrackingDirectoryWrapper.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.TrackingDirectoryWrapper.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.TrackingDirectoryWrapper.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.clearLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.close()"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.setLockFactory(org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.LockFactory",
            "org.apache.lucene.store.TrackingDirectoryWrapper.getLockFactory()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.TrackingDirectoryWrapper.getLockID()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.TrackingDirectoryWrapper.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.copy(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory$IndexInputSlicer",
            "org.apache.lucene.store.TrackingDirectoryWrapper.createSlicer(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain(long)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean isLocked()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.void release()"
        ],
        [
            "org.apache.lucene.store.VerifyingLockFactory",
            "org.apache.lucene.store.VerifyingLockFactory(byte, org.apache.lucene.store.LockFactory, java.lang.String, int)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory.org.apache.lucene.store.Lock makeLock(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory.void clearLock(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.parseInt(char[])"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.oversize(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.getShrinkSize(int, int, int)"
        ],
        [
            "short[]",
            "org.apache.lucene.util.ArrayUtil.grow(short[], int)"
        ],
        [
            "short[]",
            "org.apache.lucene.util.ArrayUtil.grow(short[])"
        ],
        [
            "float[]",
            "org.apache.lucene.util.ArrayUtil.grow(float[], int)"
        ],
        [
            "float[]",
            "org.apache.lucene.util.ArrayUtil.grow(float[])"
        ],
        [
            "double[]",
            "org.apache.lucene.util.ArrayUtil.grow(double[], int)"
        ],
        [
            "double[]",
            "org.apache.lucene.util.ArrayUtil.grow(double[])"
        ],
        [
            "short[]",
            "org.apache.lucene.util.ArrayUtil.shrink(short[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.grow(int[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.grow(int[])"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.shrink(int[], int)"
        ],
        [
            "long[]",
            "org.apache.lucene.util.ArrayUtil.grow(long[], int)"
        ],
        [
            "long[]",
            "org.apache.lucene.util.ArrayUtil.grow(long[])"
        ],
        [
            "long[]",
            "org.apache.lucene.util.ArrayUtil.shrink(long[], int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ArrayUtil.grow(byte[], int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ArrayUtil.grow(byte[])"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ArrayUtil.shrink(byte[], int)"
        ],
        [
            "boolean[]",
            "org.apache.lucene.util.ArrayUtil.grow(boolean[], int)"
        ],
        [
            "boolean[]",
            "org.apache.lucene.util.ArrayUtil.grow(boolean[])"
        ],
        [
            "boolean[]",
            "org.apache.lucene.util.ArrayUtil.shrink(boolean[], int)"
        ],
        [
            "char[]",
            "org.apache.lucene.util.ArrayUtil.grow(char[], int)"
        ],
        [
            "char[]",
            "org.apache.lucene.util.ArrayUtil.grow(char[])"
        ],
        [
            "char[]",
            "org.apache.lucene.util.ArrayUtil.shrink(char[], int)"
        ],
        [
            "int[][]",
            "org.apache.lucene.util.ArrayUtil.grow(int[][], int)"
        ],
        [
            "int[][]",
            "org.apache.lucene.util.ArrayUtil.grow(int[][])"
        ],
        [
            "int[][]",
            "org.apache.lucene.util.ArrayUtil.shrink(int[][], int)"
        ],
        [
            "float[][]",
            "org.apache.lucene.util.ArrayUtil.grow(float[][], int)"
        ],
        [
            "float[][]",
            "org.apache.lucene.util.ArrayUtil.grow(float[][])"
        ],
        [
            "float[][]",
            "org.apache.lucene.util.ArrayUtil.shrink(float[][], int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.hashCode(char[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.hashCode(byte[], int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.ArrayUtil.equals(char[], int, char[], int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.ArrayUtil.equals(byte[], int, byte[], int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.ArrayUtil.equals(int[], int, int[], int, int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.toIntArray(java.util.Collection<java.lang.Integer>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.quickSort(T[], int, int, java.util.Comparator<? super T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.quickSort(T[], java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.quickSort(T[], int, int)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.quickSort(T[])"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.mergeSort(T[], int, int, java.util.Comparator<? super T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.mergeSort(T[], java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.mergeSort(T[], int, int)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.mergeSort(T[])"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.insertionSort(T[], int, int, java.util.Comparator<? super T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.insertionSort(T[], java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.insertionSort(T[], int, int)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.insertionSort(T[])"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeImpl$1.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeImpl()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.AttributeImpl.reflectAsString(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.AttributeImpl.clone()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource$1.remove()"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeSource$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource$1.hasNext()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.AttributeSource$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource$2.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeSource$AttributeFactory$DefaultAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "org.apache.lucene.util.AttributeSource$AttributeFactory",
            "org.apache.lucene.util.AttributeSource$AttributeFactory()"
        ],
        [
            "org.apache.lucene.util.AttributeSource$State",
            "org.apache.lucene.util.AttributeSource$State()"
        ],
        [
            "org.apache.lucene.util.AttributeSource$State",
            "org.apache.lucene.util.AttributeSource$State.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.AttributeSource$State.clone()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource$AttributeFactory)"
        ],
        [
            "org.apache.lucene.util.AttributeSource$AttributeFactory",
            "org.apache.lucene.util.AttributeSource.getAttributeFactory()"
        ],
        [
            "java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>>",
            "org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.addAttributeImpl(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "<A extends org.apache.lucene.util.Attribute> A",
            "org.apache.lucene.util.AttributeSource.addAttribute(java.lang.Class<A>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource.hasAttributes()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource.hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "<A extends org.apache.lucene.util.Attribute> A",
            "org.apache.lucene.util.AttributeSource.getAttribute(java.lang.Class<A>)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.clearAttributes()"
        ],
        [
            "org.apache.lucene.util.AttributeSource$State",
            "org.apache.lucene.util.AttributeSource.captureState()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.restoreState(org.apache.lucene.util.AttributeSource$State)"
        ],
        [
            "int",
            "org.apache.lucene.util.AttributeSource.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.AttributeSource.reflectAsString(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource.cloneAttributes()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.copyTo(org.apache.lucene.util.AttributeSource)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.pop(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_array(long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_intersect(long[], long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_union(long[], long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_andnot(long[], long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_xor(long[], long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.ntz(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.ntz(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.ntz2(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.ntz3(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.nlz(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BitUtil.isPowerOfTwo(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BitUtil.isPowerOfTwo(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)"
        ],
        [
            "org.apache.lucene.util.Bits$MatchAllBits",
            "org.apache.lucene.util.Bits$MatchAllBits(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Bits$MatchAllBits.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.Bits$MatchAllBits.length()"
        ],
        [
            "org.apache.lucene.util.Bits$MatchNoBits",
            "org.apache.lucene.util.Bits$MatchNoBits(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Bits$MatchNoBits.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.Bits$MatchNoBits.length()"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$Allocator",
            "org.apache.lucene.util.ByteBlockPool$Allocator(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool$Allocator.recycleByteBlocks(java.util.List<byte[]>)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ByteBlockPool$Allocator.getByteBlock()"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator()"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator.recycleByteBlocks(byte[][], int, int)"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(int, org.apache.lucene.util.Counter)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.getByteBlock()"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.recycleByteBlocks(byte[][], int, int)"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool",
            "org.apache.lucene.util.ByteBlockPool(org.apache.lucene.util.ByteBlockPool$Allocator)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.dropBuffersAndReset()"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.reset()"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.nextBuffer()"
        ],
        [
            "int",
            "org.apache.lucene.util.ByteBlockPool.newSlice(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ByteBlockPool.allocSlice(byte[], int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.ByteBlockPool.setBytesRef(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.ByteBlockPool.deref(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.copy(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.ByteBlockPool.copyFrom(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.writePool(org.apache.lucene.store.DataOutput)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(byte[])"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRef.copyChars(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BytesRef.bytesEquals(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BytesRef.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.BytesRef.utf8ToString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.BytesRef.toString()"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRef.copyBytes(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRef.append(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRef.grow(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef.compareTo(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef.deepCopyOf(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.BytesRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRefHash$BytesStartArray",
            "org.apache.lucene.util.BytesRefHash$BytesStartArray()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.clear()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.init()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.bytesUsed()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray",
            "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray(int, org.apache.lucene.util.Counter)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.clear()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.init()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.BytesRefHash$TrackingDirectBytesStartArray.bytesUsed()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash",
            "org.apache.lucene.util.BytesRefHash()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash",
            "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool)"
        ],
        [
            "org.apache.lucene.util.BytesRefHash",
            "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.size()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefHash.get(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash.compact()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash.sort(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.clear(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.clear()"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.close()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.add(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.add(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.addByPoolOffset(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.reinit()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.byteStart(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefIterator$1.next()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef()"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef(int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef(char[], int, int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.CharsRef.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.CharsRef.charsEquals(org.apache.lucene.util.CharsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.compareTo(org.apache.lucene.util.CharsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRef.copyChars(org.apache.lucene.util.CharsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRef.grow(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRef.copyChars(char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRef.append(char[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.CharsRef.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.length()"
        ],
        [
            "char",
            "org.apache.lucene.util.CharsRef.charAt(int)"
        ],
        [
            "java.lang.CharSequence",
            "org.apache.lucene.util.CharsRef.subSequence(int, int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef.deepCopyOf(org.apache.lucene.util.CharsRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.CharsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.CloseableThreadLocal",
            "org.apache.lucene.util.CloseableThreadLocal()"
        ],
        [
            "T",
            "org.apache.lucene.util.CloseableThreadLocal.get()"
        ],
        [
            "void",
            "org.apache.lucene.util.CloseableThreadLocal.set(T)"
        ],
        [
            "void",
            "org.apache.lucene.util.CloseableThreadLocal.close()"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.CollectionUtil.quickSort(java.util.List<T>, java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.CollectionUtil.quickSort(java.util.List<T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.CollectionUtil.mergeSort(java.util.List<T>, java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.CollectionUtil.mergeSort(java.util.List<T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.CollectionUtil.insertionSort(java.util.List<T>, java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.CollectionUtil.insertionSort(java.util.List<T>)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.String, java.io.File)"
        ],
        [
            "java.lang.Class<? extends org.apache.lucene.store.Directory>",
            "org.apache.lucene.util.CommandLineUtil.loadDirectoryClass(java.lang.String)"
        ],
        [
            "java.lang.Class<? extends org.apache.lucene.store.FSDirectory>",
            "org.apache.lucene.util.CommandLineUtil.loadFSDirectoryClass(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.io.File)"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$AtomicCounter.addAndGet(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$AtomicCounter.get()"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$SerialCounter.addAndGet(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$SerialCounter.get()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.Counter()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.Counter.newCounter()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.Counter.newCounter(boolean)"
        ],
        [
            "int",
            "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.docID()"
        ],
        [
            "int",
            "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.DocIdBitSet$DocIdBitSetIterator.advance(int)"
        ],
        [
            "org.apache.lucene.util.DocIdBitSet",
            "org.apache.lucene.util.DocIdBitSet(java.util.BitSet)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.DocIdBitSet.iterator()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.util.DocIdBitSet.bits()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.DocIdBitSet.isCacheable()"
        ],
        [
            "java.util.BitSet",
            "org.apache.lucene.util.DocIdBitSet.getBitSet()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.DocIdBitSet.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.DocIdBitSet.length()"
        ],
        [
            "org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey",
            "org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.DoubleBarrelLRUCache$CloneableKey.clone()"
        ],
        [
            "org.apache.lucene.util.DoubleBarrelLRUCache",
            "org.apache.lucene.util.DoubleBarrelLRUCache(int)"
        ],
        [
            "V",
            "org.apache.lucene.util.DoubleBarrelLRUCache.get(K)"
        ],
        [
            "void",
            "org.apache.lucene.util.DoubleBarrelLRUCache.put(K, V)"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity",
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity(org.apache.lucene.util.FieldCacheSanityChecker$InsanityType, java.lang.String, org.apache.lucene.search.FieldCache$CacheEntry...)"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker$InsanityType",
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getType()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getMsg()"
        ],
        [
            "org.apache.lucene.search.FieldCache$CacheEntry[]",
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.getCacheEntries()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.FieldCacheSanityChecker$InsanityType.toString()"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField",
            "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField(java.lang.Object, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.FieldCacheSanityChecker$ReaderField.toString()"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker",
            "org.apache.lucene.util.FieldCacheSanityChecker()"
        ],
        [
            "void",
            "org.apache.lucene.util.FieldCacheSanityChecker.setRamUsageEstimator(boolean)"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]",
            "org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(org.apache.lucene.search.FieldCache)"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]",
            "org.apache.lucene.util.FieldCacheSanityChecker.checkSanity(org.apache.lucene.search.FieldCache$CacheEntry...)"
        ],
        [
            "org.apache.lucene.util.FieldCacheSanityChecker$Insanity[]",
            "org.apache.lucene.util.FieldCacheSanityChecker.check(org.apache.lucene.search.FieldCache$CacheEntry...)"
        ],
        [
            "org.apache.lucene.util.FilterIterator",
            "org.apache.lucene.util.FilterIterator(java.util.Iterator<T>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FilterIterator.hasNext()"
        ],
        [
            "T",
            "org.apache.lucene.util.FilterIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.FilterIterator.remove()"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.bits2words(int)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet(int)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet(long[], int)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.FixedBitSet.iterator()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.util.FixedBitSet.bits()"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.isCacheable()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.FixedBitSet.getBits()"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.cardinality()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.set(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.getAndSet(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.clear(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.getAndClear(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.nextSetBit(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.prevSetBit(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.flip(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.set(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.clear(int, int)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.hashCode()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.FixedBitSet.clone()"
        ],
        [
            "<E extends java.lang.Exception> void",
            "org.apache.lucene.util.IOUtils.closeWhileHandlingException(E, java.io.Closeable...)"
        ],
        [
            "<E extends java.lang.Exception> void",
            "org.apache.lucene.util.IOUtils.closeWhileHandlingException(E, java.lang.Iterable<? extends java.io.Closeable>)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.close(java.io.Closeable...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.close(java.lang.Iterable<? extends java.io.Closeable>)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.io.Closeable...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.lang.Iterable<? extends java.io.Closeable>)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.util.IOUtils.getDecodingReader(java.io.InputStream, java.nio.charset.Charset)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.util.IOUtils.getDecodingReader(java.io.File, java.nio.charset.Charset)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.util.IOUtils.getDecodingReader(java.lang.Class<?>, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.lang.String...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.copy(java.io.File, java.io.File)"
        ],
        [
            "int",
            "org.apache.lucene.util.IndexableBinaryStringTools.getEncodedLength(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.IndexableBinaryStringTools.getDecodedLength(char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IndexableBinaryStringTools.encode(byte[], int, int, char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IndexableBinaryStringTools.decode(char[], int, int, byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.InfoStream$NoOutput.message(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.InfoStream$NoOutput.isEnabled(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.util.InfoStream$NoOutput.close()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.util.InfoStream()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.InfoStream.org.apache.lucene.util.InfoStream getDefault()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.InfoStream.void setDefault(org.apache.lucene.util.InfoStream)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef(int)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef(int[], int, int)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntsRef.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntsRef.intsEquals(org.apache.lucene.util.IntsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRef.compareTo(org.apache.lucene.util.IntsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRef.copyInts(org.apache.lucene.util.IntsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRef.grow(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.IntsRef.toString()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef.deepCopyOf(org.apache.lucene.util.IntsRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.IntsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef()"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef(int)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef(long[], int, int)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.LongsRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongsRef.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongsRef.longsEquals(org.apache.lucene.util.LongsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.LongsRef.compareTo(org.apache.lucene.util.LongsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongsRef.copyLongs(org.apache.lucene.util.LongsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongsRef.grow(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.LongsRef.toString()"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef.deepCopyOf(org.apache.lucene.util.LongsRef)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.LongsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.LongsRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.MapOfSets",
            "org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)"
        ],
        [
            "java.util.Map<K, java.util.Set<V>>",
            "org.apache.lucene.util.MapOfSets.getMap()"
        ],
        [
            "int",
            "org.apache.lucene.util.MapOfSets.put(K, V)"
        ],
        [
            "int",
            "org.apache.lucene.util.MapOfSets.putAll(K, java.util.Collection<? extends V>)"
        ],
        [
            "int",
            "org.apache.lucene.util.MathUtil.log(long, int)"
        ],
        [
            "org.apache.lucene.util.NamedSPILoader",
            "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>)"
        ],
        [
            "org.apache.lucene.util.NamedSPILoader",
            "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>, java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.apache.lucene.util.NamedSPILoader.reload(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.apache.lucene.util.NamedSPILoader.checkServiceName(java.lang.String)"
        ],
        [
            "S",
            "org.apache.lucene.util.NamedSPILoader.lookup(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.NamedThreadFactory",
            "org.apache.lucene.util.NamedThreadFactory(java.lang.String)"
        ],
        [
            "java.lang.Thread",
            "org.apache.lucene.util.NamedThreadFactory.newThread(java.lang.Runnable)"
        ],
        [
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder",
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder()"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(int, int, int)"
        ],
        [
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder",
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder()"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(long, long, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.longToPrefixCoded(long, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.intToPrefixCoded(int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.getPrefixCodedLongShift(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.getPrefixCodedIntShift(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.prefixCodedToLong(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.prefixCodedToInt(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)"
        ],
        [
            "double",
            "org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.floatToSortableInt(float)"
        ],
        [
            "float",
            "org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder, int, long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder, int, int, int)"
        ],
        [
            "org.apache.lucene.util.OpenBitSet",
            "org.apache.lucene.util.OpenBitSet(long)"
        ],
        [
            "org.apache.lucene.util.OpenBitSet",
            "org.apache.lucene.util.OpenBitSet()"
        ],
        [
            "org.apache.lucene.util.OpenBitSet",
            "org.apache.lucene.util.OpenBitSet(long[], int)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.OpenBitSet.iterator()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.util.OpenBitSet.bits()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.isCacheable()"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.capacity()"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.size()"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.isEmpty()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.OpenBitSet.getBits()"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.setBits(long[])"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.getNumWords()"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.setNumWords(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.get(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.fastGet(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.get(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.fastGet(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.getBit(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.set(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.fastSet(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.fastSet(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.set(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.fastClear(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.fastClear(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.clear(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.clear(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.clear(long, long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.getAndSet(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.getAndSet(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.fastFlip(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.fastFlip(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.flip(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.flipAndGet(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.flipAndGet(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.flip(long, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.cardinality()"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.intersectionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.unionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.andNotCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.xorCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.nextSetBit(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.nextSetBit(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.prevSetBit(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.OpenBitSet.prevSetBit(long)"
        ],
        [
            "org.apache.lucene.util.OpenBitSet",
            "org.apache.lucene.util.OpenBitSet.clone()"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.intersect(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.union(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.remove(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.xor(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.and(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.or(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.andNot(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.intersects(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.ensureCapacityWords(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.ensureCapacity(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSet.trimTrailingZeros()"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.bits2words(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OpenBitSet.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSet.hashCode()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.OpenBitSet.clone()"
        ],
        [
            "org.apache.lucene.util.OpenBitSetDISI",
            "org.apache.lucene.util.OpenBitSetDISI(org.apache.lucene.search.DocIdSetIterator, int)"
        ],
        [
            "org.apache.lucene.util.OpenBitSetDISI",
            "org.apache.lucene.util.OpenBitSetDISI(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSetDISI.inPlaceOr(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSetDISI.inPlaceAnd(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSetDISI.inPlaceNot(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.OpenBitSetDISI.inPlaceXor(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.util.OpenBitSetIterator",
            "org.apache.lucene.util.OpenBitSetIterator(org.apache.lucene.util.OpenBitSet)"
        ],
        [
            "org.apache.lucene.util.OpenBitSetIterator",
            "org.apache.lucene.util.OpenBitSetIterator(long[], int)"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSetIterator.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSetIterator.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.OpenBitSetIterator.docID()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.setPosition(long)"
        ],
        [
            "byte",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput(org.apache.lucene.util.PagedBytes)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.getPosition()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$Reader",
            "org.apache.lucene.util.PagedBytes$Reader(org.apache.lucene.util.PagedBytes)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.PagedBytes$Reader.fillSlice(org.apache.lucene.util.BytesRef, long, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.PagedBytes$Reader.fill(org.apache.lucene.util.BytesRef, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.PagedBytes$Reader.fillAndGetIndex(org.apache.lucene.util.BytesRef, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes$Reader.fillAndGetStart(org.apache.lucene.util.BytesRef, long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.PagedBytes$Reader.fillSliceWithPrefix(org.apache.lucene.util.BytesRef, long)"
        ],
        [
            "byte[][]",
            "org.apache.lucene.util.PagedBytes$Reader.getBlocks()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.PagedBytes$Reader.getBlockEnds()"
        ],
        [
            "org.apache.lucene.util.PagedBytes",
            "org.apache.lucene.util.PagedBytes(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.store.IndexInput, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.PagedBytes$Reader",
            "org.apache.lucene.util.PagedBytes.freeze(boolean)"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes.getPointer()"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput",
            "org.apache.lucene.util.PagedBytes.getDataInput()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput",
            "org.apache.lucene.util.PagedBytes.getDataOutput()"
        ],
        [
            "org.apache.lucene.util.PrintStreamInfoStream",
            "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.util.PrintStreamInfoStream",
            "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.PrintStreamInfoStream.message(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.PrintStreamInfoStream.isEnabled(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.util.PrintStreamInfoStream.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.PrintStreamInfoStream.isSystemStream()"
        ],
        [
            "org.apache.lucene.util.PriorityQueue",
            "org.apache.lucene.util.PriorityQueue(int)"
        ],
        [
            "org.apache.lucene.util.PriorityQueue",
            "org.apache.lucene.util.PriorityQueue(int, boolean)"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.add(T)"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.top()"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.pop()"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.updateTop()"
        ],
        [
            "int",
            "org.apache.lucene.util.PriorityQueue.size()"
        ],
        [
            "void",
            "org.apache.lucene.util.PriorityQueue.clear()"
        ],
        [
            "org.apache.lucene.util.RamUsageEstimator$ClassCache",
            "org.apache.lucene.util.RamUsageEstimator$ClassCache(long, java.lang.reflect.Field[])"
        ],
        [
            "boolean",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1.hasNext()"
        ],
        [
            "KType",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1.remove()"
        ],
        [
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet()"
        ],
        [
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet(int)"
        ],
        [
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet(int, float)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.add(KType)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.contains(KType)"
        ],
        [
            "void",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.size()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.RamUsageEstimator$IdentityHashSet.isEmpty()"
        ],
        [
            "org.apache.lucene.util.RamUsageEstimator$JvmFeature[]",
            "org.apache.lucene.util.RamUsageEstimator$JvmFeature.values()"
        ],
        [
            "org.apache.lucene.util.RamUsageEstimator$JvmFeature",
            "org.apache.lucene.util.RamUsageEstimator$JvmFeature.valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RamUsageEstimator$JvmFeature.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.RamUsageEstimator.isSupportedJVM()"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.alignObjectSize(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(byte[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(boolean[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(char[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(short[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(int[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(float[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(long[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(double[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(java.lang.Object)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(java.lang.Object)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.shallowSizeOfInstance(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long, java.text.DecimalFormat)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RamUsageEstimator.humanSizeOf(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.RecyclingByteBlockAllocator",
            "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int, java.util.concurrent.atomic.AtomicLong)"
        ],
        [
            "org.apache.lucene.util.RecyclingByteBlockAllocator",
            "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int)"
        ],
        [
            "org.apache.lucene.util.RecyclingByteBlockAllocator",
            "org.apache.lucene.util.RecyclingByteBlockAllocator()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.byte[] getByteBlock()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.void recycleByteBlocks(byte[][], int, int)"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.int numBufferedBlocks()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.long bytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.maxBufferedBlocks()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.int freeBlocks(int)"
        ],
        [
            "<S> org.apache.lucene.util.SPIClassIterator<S>",
            "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>)"
        ],
        [
            "<S> org.apache.lucene.util.SPIClassIterator<S>",
            "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>, java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.SPIClassIterator.hasNext()"
        ],
        [
            "java.lang.Class<? extends S>",
            "org.apache.lucene.util.SPIClassIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.SPIClassIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.SPIClassIterator.next()"
        ],
        [
            "org.apache.lucene.util.SentinelIntSet",
            "org.apache.lucene.util.SentinelIntSet(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SentinelIntSet.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.hash(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.size()"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.getSlot(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.find(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.SentinelIntSet.exists(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.put(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SentinelIntSet.rehash()"
        ],
        [
            "org.apache.lucene.util.SetOnce$AlreadySetException",
            "org.apache.lucene.util.SetOnce$AlreadySetException()"
        ],
        [
            "org.apache.lucene.util.SetOnce",
            "org.apache.lucene.util.SetOnce()"
        ],
        [
            "org.apache.lucene.util.SetOnce",
            "org.apache.lucene.util.SetOnce(T)"
        ],
        [
            "void",
            "org.apache.lucene.util.SetOnce.set(T)"
        ],
        [
            "T",
            "org.apache.lucene.util.SetOnce.get()"
        ],
        [
            "byte",
            "org.apache.lucene.util.SmallFloat.floatToByte(float, int, int)"
        ],
        [
            "float",
            "org.apache.lucene.util.SmallFloat.byteToFloat(byte, int, int)"
        ],
        [
            "byte",
            "org.apache.lucene.util.SmallFloat.floatToByte315(float)"
        ],
        [
            "float",
            "org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)"
        ],
        [
            "byte",
            "org.apache.lucene.util.SmallFloat.floatToByte52(float)"
        ],
        [
            "float",
            "org.apache.lucene.util.SmallFloat.byte52ToFloat(byte)"
        ],
        [
            "org.apache.lucene.util.SorterTemplate",
            "org.apache.lucene.util.SorterTemplate()"
        ],
        [
            "void",
            "org.apache.lucene.util.SorterTemplate.insertionSort(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SorterTemplate.quickSort(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SorterTemplate.mergeSort(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper$1.compare(java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper.bytesDifference(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.equals(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.startsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.endsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.ThreadInterruptedException",
            "org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.ToStringUtils.boost(float)"
        ],
        [
            "void",
            "org.apache.lucene.util.ToStringUtils.byteArray(java.lang.StringBuilder, byte[])"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8WithHash(char[], int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[], int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(java.lang.CharSequence, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.UnicodeUtil.validUTF16String(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.UnicodeUtil.validUTF16String(char[], int)"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.codePointCount(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.UnicodeUtil.UTF8toUTF32(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.UnicodeUtil.newString(int[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.UnicodeUtil.toHexString(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[], int, int, org.apache.lucene.util.CharsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(org.apache.lucene.util.BytesRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.Version[]",
            "org.apache.lucene.util.Version.values()"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.util.Version.valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Version.onOrAfter(org.apache.lucene.util.Version)"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.util.Version.parseLeniently(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.VirtualMethod",
            "org.apache.lucene.util.VirtualMethod(java.lang.Class<C>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "int",
            "org.apache.lucene.util.VirtualMethod.getImplementationDistance(java.lang.Class<? extends C>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.VirtualMethod.isOverriddenAsOf(java.lang.Class<? extends C>)"
        ],
        [
            "<C> int",
            "org.apache.lucene.util.VirtualMethod.compareImplementationDistance(java.lang.Class<? extends C>, org.apache.lucene.util.VirtualMethod<C>, org.apache.lucene.util.VirtualMethod<C>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap$1.hasNext()"
        ],
        [
            "K",
            "org.apache.lucene.util.WeakIdentityMap$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.WeakIdentityMap$1.remove()"
        ],
        [
            "int",
            "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.equals(java.lang.Object)"
        ],
        [
            "<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>",
            "org.apache.lucene.util.WeakIdentityMap.newHashMap()"
        ],
        [
            "<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>",
            "org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap()"
        ],
        [
            "void",
            "org.apache.lucene.util.WeakIdentityMap.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap.containsKey(java.lang.Object)"
        ],
        [
            "V",
            "org.apache.lucene.util.WeakIdentityMap.get(java.lang.Object)"
        ],
        [
            "V",
            "org.apache.lucene.util.WeakIdentityMap.put(K, V)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap.isEmpty()"
        ],
        [
            "V",
            "org.apache.lucene.util.WeakIdentityMap.remove(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.WeakIdentityMap.size()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton(org.apache.lucene.util.automaton.State)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setMinimization(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setMinimizeAlways(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.setAllowMutate(boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Automaton.getSingleton()"
        ],
        [
            "org.apache.lucene.util.automaton.State",
            "org.apache.lucene.util.automaton.Automaton.getInitialState()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.isDeterministic()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setDeterministic(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setInfo(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.automaton.Automaton.getInfo()"
        ],
        [
            "org.apache.lucene.util.automaton.State[]",
            "org.apache.lucene.util.automaton.Automaton.getNumberedStates()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setNumberedStates(org.apache.lucene.util.automaton.State[])"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setNumberedStates(org.apache.lucene.util.automaton.State[], int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.clearNumberedStates()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.restoreInvariant()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.reduce()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.removeDeadTransitions()"
        ],
        [
            "org.apache.lucene.util.automaton.Transition[][]",
            "org.apache.lucene.util.automaton.Automaton.getSortedTransitions()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.expandSingleton()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.getNumberOfStates()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.getNumberOfTransitions()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Automaton.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Automaton.toDot()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.clone()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.concatenate(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.optional()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.repeat()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.repeat(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.repeat(int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.complement()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.minus(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.intersection(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.subsetOf(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.union(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.determinize()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.isEmptyString()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton.minimize(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.automaton.Automaton.clone()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeEmpty()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeEmptyString()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeAnyString()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeAnyChar()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeChar(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeCharRange(int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeInterval(int, int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeString(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicAutomata.makeStringUnion(java.util.Collection<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.reset()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.sort()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.add(org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitionSet.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.compareTo(org.apache.lucene.util.automaton.BasicOperations$PointTransitions)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.reset(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.BasicOperations$PointTransitions.compareTo(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations$TransitionList.add(org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.optional(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.repeat(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.repeat(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.repeat(org.apache.lucene.util.automaton.Automaton, int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.complement(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations.sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations.subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.BasicOperations.union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations.determinize(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.BasicOperations.addEpsilons(org.apache.lucene.util.automaton.Automaton, java.util.Collection<org.apache.lucene.util.automaton.StatePair>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations.isEmptyString(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations.isEmpty(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations.isTotal(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.BasicOperations.run(org.apache.lucene.util.automaton.Automaton, java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.ByteRunAutomaton",
            "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.ByteRunAutomaton",
            "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.ByteRunAutomaton.run(byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.CharacterRunAutomaton",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(char[], int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE[]",
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.values()"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE",
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton",
            "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton",
            "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.util.automaton.CompiledAutomaton.getTermsEnum(org.apache.lucene.index.Terms)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.automaton.CompiledAutomaton.floor(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.add(org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.complete()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.build(java.util.Collection<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev1ParametricDescription",
            "org.apache.lucene.util.automaton.Lev1ParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev1TParametricDescription",
            "org.apache.lucene.util.automaton.Lev1TParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev2ParametricDescription",
            "org.apache.lucene.util.automaton.Lev2ParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev2TParametricDescription",
            "org.apache.lucene.util.automaton.Lev2TParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.LevenshteinAutomata",
            "org.apache.lucene.util.automaton.LevenshteinAutomata(java.lang.String, boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.MinimizationOperations.minimize(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.MinimizationOperations.minimizeHopcroft(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp$Kind[]",
            "org.apache.lucene.util.automaton.RegExp$Kind.values()"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp$Kind",
            "org.apache.lucene.util.automaton.RegExp$Kind.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp",
            "org.apache.lucene.util.automaton.RegExp(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp",
            "org.apache.lucene.util.automaton.RegExp(java.lang.String, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton(java.util.Map<java.lang.String, org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.RegExp.setAllowMutate(boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.RegExp.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.RunAutomaton.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.getSize()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.RunAutomaton.isAccept(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.getInitialState()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.automaton.RunAutomaton.getCharIntervals()"
        ],
        [
            "org.apache.lucene.util.automaton.RunAutomaton",
            "org.apache.lucene.util.automaton.RunAutomaton(org.apache.lucene.util.automaton.Automaton, int, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.step(int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int[], int, org.apache.lucene.util.automaton.State)"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int, org.apache.lucene.util.automaton.State)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.SortedIntSet.incr(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.SortedIntSet.decr(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.SortedIntSet.computeHash()"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet.freeze(org.apache.lucene.util.automaton.State)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.SortedIntSet.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.SortedIntSet.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.SortedIntSet.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.SpecialOperations.isFinite(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.SpecialOperations.getCommonPrefix(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.automaton.SpecialOperations.getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.SpecialOperations.getCommonSuffix(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.automaton.SpecialOperations.getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.State$TransitionsIterable$1.hasNext()"
        ],
        [
            "org.apache.lucene.util.automaton.Transition",
            "org.apache.lucene.util.automaton.State$TransitionsIterable$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State$TransitionsIterable$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.automaton.State$TransitionsIterable$1.next()"
        ],
        [
            "org.apache.lucene.util.automaton.State",
            "org.apache.lucene.util.automaton.State()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.State.numTransitions()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.setTransitions(org.apache.lucene.util.automaton.Transition[])"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.addTransition(org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.setAccept(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.State.isAccept()"
        ],
        [
            "org.apache.lucene.util.automaton.State",
            "org.apache.lucene.util.automaton.State.step(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.step(int, java.util.Collection<org.apache.lucene.util.automaton.State>)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.trimTransitionsArray()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.reduce()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.State.sortTransitions(java.util.Comparator<org.apache.lucene.util.automaton.Transition>)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.State.getNumber()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.State.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.State.compareTo(org.apache.lucene.util.automaton.State)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.State.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.State.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.automaton.StatePair",
            "org.apache.lucene.util.automaton.StatePair(org.apache.lucene.util.automaton.State, org.apache.lucene.util.automaton.State)"
        ],
        [
            "org.apache.lucene.util.automaton.State",
            "org.apache.lucene.util.automaton.StatePair.getFirstState()"
        ],
        [
            "org.apache.lucene.util.automaton.State",
            "org.apache.lucene.util.automaton.StatePair.getSecondState()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.StatePair.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.StatePair.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle.compare(org.apache.lucene.util.automaton.Transition, org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition$CompareByDestThenMinMaxSingle.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle.compare(org.apache.lucene.util.automaton.Transition, org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition$CompareByMinMaxThenDestSingle.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.automaton.Transition",
            "org.apache.lucene.util.automaton.Transition(int, org.apache.lucene.util.automaton.State)"
        ],
        [
            "org.apache.lucene.util.automaton.Transition",
            "org.apache.lucene.util.automaton.Transition(int, int, org.apache.lucene.util.automaton.State)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition.getMin()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition.getMax()"
        ],
        [
            "org.apache.lucene.util.automaton.State",
            "org.apache.lucene.util.automaton.Transition.getDest()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Transition.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Transition.hashCode()"
        ],
        [
            "org.apache.lucene.util.automaton.Transition",
            "org.apache.lucene.util.automaton.Transition.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Transition.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.automaton.Transition.clone()"
        ],
        [
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.byteAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.numBits(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.UTF32ToUTF8",
            "org.apache.lucene.util.automaton.UTF32ToUTF8()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.UTF32ToUTF8.convert(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.fst.Builder$Arc",
            "org.apache.lucene.util.fst.Builder$Arc()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.Builder$CompiledNode.isCompiled()"
        ],
        [
            "org.apache.lucene.util.fst.Builder$FreezeTail",
            "org.apache.lucene.util.fst.Builder$FreezeTail()"
        ],
        [
            "org.apache.lucene.util.fst.Builder$UnCompiledNode",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode(org.apache.lucene.util.fst.Builder<T>, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.isCompiled()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.clear()"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.getLastOutput(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.addArc(int, org.apache.lucene.util.fst.Builder$Node)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.replaceLast(int, org.apache.lucene.util.fst.Builder$Node, T, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.deleteLast(int, org.apache.lucene.util.fst.Builder$Node)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.setLastOutput(int, T)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.prependOutput(T)"
        ],
        [
            "org.apache.lucene.util.fst.Builder",
            "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs<T>)"
        ],
        [
            "org.apache.lucene.util.fst.Builder",
            "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, org.apache.lucene.util.fst.Builder$FreezeTail<T>, boolean)"
        ],
        [
            "org.apache.lucene.util.fst.Builder",
            "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, org.apache.lucene.util.fst.Builder$FreezeTail<T>, boolean, float)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Builder.getTotStateCount()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.Builder.getTermCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Builder.getMappedStateCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder.setAllowArrayArcs(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder.add(org.apache.lucene.util.IntsRef, T)"
        ],
        [
            "org.apache.lucene.util.fst.ByteSequenceOutputs",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.common(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.add(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.write(org.apache.lucene.util.BytesRef, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput",
            "org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput()"
        ],
        [
            "org.apache.lucene.util.fst.BytesRefFSTEnum",
            "org.apache.lucene.util.fst.BytesRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"
        ],
        [
            "org.apache.lucene.util.fst.CharSequenceOutputs",
            "org.apache.lucene.util.fst.CharSequenceOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.CharSequenceOutputs.write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(org.apache.lucene.util.CharsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.CharSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.FST$Arc",
            "org.apache.lucene.util.fst.FST$Arc()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$Arc.isLast()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$Arc.isFinal()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.FST$Arc.toString()"
        ],
        [
            "org.apache.lucene.util.fst.FST$ArcAndState",
            "org.apache.lucene.util.fst.FST$ArcAndState(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.fst.FST$BytesWriter",
            "org.apache.lucene.util.fst.FST$BytesWriter(org.apache.lucene.util.fst.FST)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$BytesWriter.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$BytesWriter.setPosWrite(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$BytesWriter.writeBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.fst.FST$ForwardBytesReader",
            "org.apache.lucene.util.fst.FST$ForwardBytesReader(byte[], int)"
        ],
        [
            "byte",
            "org.apache.lucene.util.fst.FST$ForwardBytesReader.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$ForwardBytesReader.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$ForwardBytesReader.skip(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$ForwardBytesReader.skip(int, int)"
        ],
        [
            "org.apache.lucene.util.fst.FST$INPUT_TYPE[]",
            "org.apache.lucene.util.fst.FST$INPUT_TYPE.values()"
        ],
        [
            "org.apache.lucene.util.fst.FST$INPUT_TYPE",
            "org.apache.lucene.util.fst.FST$INPUT_TYPE.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.fst.FST$NodeAndInCount",
            "org.apache.lucene.util.fst.FST$NodeAndInCount(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST$NodeAndInCount.compareTo(org.apache.lucene.util.fst.FST$NodeAndInCount)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST$NodeAndInCount.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.FST$NodeQueue",
            "org.apache.lucene.util.fst.FST$NodeQueue(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$NodeQueue.lessThan(org.apache.lucene.util.fst.FST$NodeAndInCount, org.apache.lucene.util.fst.FST$NodeAndInCount)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$NodeQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.FST$ReverseBytesReader",
            "org.apache.lucene.util.fst.FST$ReverseBytesReader(byte[], int)"
        ],
        [
            "byte",
            "org.apache.lucene.util.fst.FST$ReverseBytesReader.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$ReverseBytesReader.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$ReverseBytesReader.skip(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST$ReverseBytesReader.skip(int, int)"
        ],
        [
            "org.apache.lucene.util.fst.FST",
            "org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>)"
        ],
        [
            "org.apache.lucene.util.fst.FST$INPUT_TYPE",
            "org.apache.lucene.util.fst.FST.getInputType()"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.sizeInBytes()"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.FST.getEmptyOutput()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST.save(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST.save(java.io.File)"
        ],
        [
            "<T> org.apache.lucene.util.fst.FST<T>",
            "org.apache.lucene.util.fst.FST.read(java.io.File, org.apache.lucene.util.fst.Outputs<T>)"
        ],
        [
            "<T> boolean",
            "org.apache.lucene.util.fst.FST.targetHasArcs(org.apache.lucene.util.fst.FST$Arc<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.readNextArcLabel(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.getNodeCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.getArcCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.getArcWithOutputCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST.setAllowArrayArcs(boolean)"
        ],
        [
            "org.apache.lucene.util.fst.FST$BytesReader",
            "org.apache.lucene.util.fst.FST.getBytesReader(int)"
        ],
        [
            "org.apache.lucene.util.fst.IntSequenceOutputs",
            "org.apache.lucene.util.fst.IntSequenceOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.common(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.add(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.IntSequenceOutputs.write(org.apache.lucene.util.IntsRef, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(org.apache.lucene.util.IntsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.IntSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput",
            "org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput()"
        ],
        [
            "org.apache.lucene.util.fst.IntsRefFSTEnum",
            "org.apache.lucene.util.fst.IntsRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.NoOutputs$1.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.NoOutputs$1.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.NoOutputs",
            "org.apache.lucene.util.fst.NoOutputs.getSingleton()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.NoOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.NoOutputs.outputToString(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.NodeHash",
            "org.apache.lucene.util.fst.NodeHash(org.apache.lucene.util.fst.FST<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.NodeHash.add(org.apache.lucene.util.fst.Builder$UnCompiledNode<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.NodeHash.count()"
        ],
        [
            "org.apache.lucene.util.fst.Outputs",
            "org.apache.lucene.util.fst.Outputs()"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.Outputs.merge(T, T)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.PairOutputs$Pair.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.PairOutputs$Pair.hashCode()"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs",
            "org.apache.lucene.util.fst.PairOutputs(org.apache.lucene.util.fst.Outputs<A>, org.apache.lucene.util.fst.Outputs<B>)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.newPair(A, B)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.common(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.subtract(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.add(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PairOutputs.write(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs.outputToString(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PairOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.PositiveIntOutputs",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.fst.PositiveIntOutputs",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton(boolean)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Long, java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Long, java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Long, java.lang.Long)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Long, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PositiveIntOutputs.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs(long, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs.hashCode()"
        ],
        [
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getSingleton(boolean)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long)"
        ],
        [
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs$TwoLongs",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.get(long, long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.merge(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.UpToTwoPositiveIntOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.Util$FSTPath",
            "org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, java.util.Comparator<T>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.Util$FSTPath.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Util$FSTPath.compareTo(org.apache.lucene.util.fst.Util$FSTPath<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Util$FSTPath.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.Util$MinResult",
            "org.apache.lucene.util.fst.Util$MinResult(org.apache.lucene.util.IntsRef, T, java.util.Comparator<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Util$MinResult.compareTo(org.apache.lucene.util.fst.Util$MinResult<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Util$MinResult.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.Util$TopNSearcher",
            "org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, int, java.util.Comparator<T>)"
        ],
        [
            "<T> T",
            "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.IntsRef)"
        ],
        [
            "<T> T",
            "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long)"
        ],
        [
            "<T> org.apache.lucene.util.fst.Util$MinResult<T>[]",
            "org.apache.lucene.util.fst.Util.shortestPaths(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, java.util.Comparator<T>, int)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.fst.Util.toDot(org.apache.lucene.util.fst.FST<T>, java.io.Writer, boolean, boolean)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toUTF32(char[], int, int, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.Util.toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValue()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValue.exists()"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValue.compareTo(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValue.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.mutable.MutableValue.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValue.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueBool",
            "org.apache.lucene.util.mutable.MutableValueBool()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueBool.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueBool.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueBool.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueBool.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueBool.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueBool.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueDate",
            "org.apache.lucene.util.mutable.MutableValueDate()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueDate.toObject()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueDate.duplicate()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueDouble",
            "org.apache.lucene.util.mutable.MutableValueDouble()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueDouble.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueDouble.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueDouble.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueDouble.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueDouble.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueDouble.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueFloat",
            "org.apache.lucene.util.mutable.MutableValueFloat()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueFloat.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueFloat.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueFloat.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueFloat.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueFloat.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueFloat.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueInt",
            "org.apache.lucene.util.mutable.MutableValueInt()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueInt.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueInt.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueInt.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueInt.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueInt.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueInt.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueLong",
            "org.apache.lucene.util.mutable.MutableValueLong()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueLong.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueLong.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueLong.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueLong.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueLong.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueLong.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueStr",
            "org.apache.lucene.util.mutable.MutableValueStr()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueStr.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueStr.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueStr.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueStr.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueStr.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueStr.hashCode()"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperation",
            "org.apache.lucene.util.packed.BulkOperation.of(org.apache.lucene.util.packed.PackedInts$Format, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperation.computeIterations(int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked",
            "org.apache.lucene.util.packed.BulkOperationPacked(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPacked.blockCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPacked.valueCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked1",
            "org.apache.lucene.util.packed.BulkOperationPacked1()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked10",
            "org.apache.lucene.util.packed.BulkOperationPacked10()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked11",
            "org.apache.lucene.util.packed.BulkOperationPacked11()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked12",
            "org.apache.lucene.util.packed.BulkOperationPacked12()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked13",
            "org.apache.lucene.util.packed.BulkOperationPacked13()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked14",
            "org.apache.lucene.util.packed.BulkOperationPacked14()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked15",
            "org.apache.lucene.util.packed.BulkOperationPacked15()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked16",
            "org.apache.lucene.util.packed.BulkOperationPacked16()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked17",
            "org.apache.lucene.util.packed.BulkOperationPacked17()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked18",
            "org.apache.lucene.util.packed.BulkOperationPacked18()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked19",
            "org.apache.lucene.util.packed.BulkOperationPacked19()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked2",
            "org.apache.lucene.util.packed.BulkOperationPacked2()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked20",
            "org.apache.lucene.util.packed.BulkOperationPacked20()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked21",
            "org.apache.lucene.util.packed.BulkOperationPacked21()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked22",
            "org.apache.lucene.util.packed.BulkOperationPacked22()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked23",
            "org.apache.lucene.util.packed.BulkOperationPacked23()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked24",
            "org.apache.lucene.util.packed.BulkOperationPacked24()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked3",
            "org.apache.lucene.util.packed.BulkOperationPacked3()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked4",
            "org.apache.lucene.util.packed.BulkOperationPacked4()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked5",
            "org.apache.lucene.util.packed.BulkOperationPacked5()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked6",
            "org.apache.lucene.util.packed.BulkOperationPacked6()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked7",
            "org.apache.lucene.util.packed.BulkOperationPacked7()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked8",
            "org.apache.lucene.util.packed.BulkOperationPacked8()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked9",
            "org.apache.lucene.util.packed.BulkOperationPacked9()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.blockCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.valueCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct16.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct16.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct16.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct16.clear()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.packed.Direct16.getArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.Direct16.hasArray()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct16.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct16.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct16.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct32.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct32.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct32.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct32.clear()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.packed.Direct32.getArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.Direct32.hasArray()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct32.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct32.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct32.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct64.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct64.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct64.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct64.clear()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.packed.Direct64.getArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.Direct64.hasArray()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct64.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct64.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct64.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct8.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct8.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct8.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct8.clear()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.packed.Direct8.getArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.Direct8.hasArray()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct8.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct8.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct8.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.DirectPackedReader",
            "org.apache.lucene.util.packed.DirectPackedReader(int, int, org.apache.lucene.store.IndexInput)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPackedReader.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPackedReader.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.GrowableWriter",
            "org.apache.lucene.util.packed.GrowableWriter(int, int, float)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.GrowableWriter.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.size()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.getBitsPerValue()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Mutable",
            "org.apache.lucene.util.packed.GrowableWriter.getMutable()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.packed.GrowableWriter.getArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.GrowableWriter.hasArray()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.set(int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.clear()"
        ],
        [
            "org.apache.lucene.util.packed.GrowableWriter",
            "org.apache.lucene.util.packed.GrowableWriter.resize(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.save(org.apache.lucene.store.DataOutput)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.toString()"
        ],
        [
            "org.apache.lucene.util.packed.Packed64",
            "org.apache.lucene.util.packed.Packed64(int, int)"
        ],
        [
            "org.apache.lucene.util.packed.Packed64",
            "org.apache.lucene.util.packed.Packed64(long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.Packed64",
            "org.apache.lucene.util.packed.Packed64(org.apache.lucene.store.DataInput, int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64.get(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64.set(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64.set(int, long[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed64.toString()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.set(int, long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.Packed64SingleBlock.isSupported(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock.ramBytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64SingleBlock.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64SingleBlock.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock.fill(int, int, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed64SingleBlock.toString()"
        ],
        [
            "org.apache.lucene.util.packed.Packed64SingleBlock",
            "org.apache.lucene.util.packed.Packed64SingleBlock.create(org.apache.lucene.store.DataInput, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.Packed64SingleBlock",
            "org.apache.lucene.util.packed.Packed64SingleBlock.create(int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Format$1.nblocks(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Format$2.nblocks(int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.PackedInts$Format$2.isSupported(int)"
        ],
        [
            "float",
            "org.apache.lucene.util.packed.PackedInts$Format$2.overheadPerValue(int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Format[]",
            "org.apache.lucene.util.packed.PackedInts$Format.values()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Format",
            "org.apache.lucene.util.packed.PackedInts$Format.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Format",
            "org.apache.lucene.util.packed.PackedInts$Format.byId(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Format.getId()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.PackedInts$Format.isSupported(int)"
        ],
        [
            "float",
            "org.apache.lucene.util.packed.PackedInts$Format.overheadPerValue(int)"
        ],
        [
            "float",
            "org.apache.lucene.util.packed.PackedInts$Format.overheadRatio(int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits",
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits(org.apache.lucene.util.packed.PackedInts$Format, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$MutableImpl.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts$MutableImpl.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts$MutableImpl.save(org.apache.lucene.store.DataOutput)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderImpl.getBitsPerValue()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderImpl.size()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.packed.PackedInts$ReaderImpl.getArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.PackedInts$ReaderImpl.hasArray()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderImpl.get(int, long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.next()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.getBitsPerValue()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.size()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.close()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Writer.bitsPerValue()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts",
            "org.apache.lucene.util.packed.PackedInts()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits",
            "org.apache.lucene.util.packed.PackedInts.fastestFormatAndBits(int, int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Decoder",
            "org.apache.lucene.util.packed.PackedInts.getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Encoder",
            "org.apache.lucene.util.packed.PackedInts.getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getReader(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$ReaderIterator",
            "org.apache.lucene.util.packed.PackedInts.getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$ReaderIterator",
            "org.apache.lucene.util.packed.PackedInts.getReaderIterator(org.apache.lucene.store.DataInput, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getDirectReader(org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Mutable",
            "org.apache.lucene.util.packed.PackedInts.getMutable(int, int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Writer",
            "org.apache.lucene.util.packed.PackedInts.getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Writer",
            "org.apache.lucene.util.packed.PackedInts.getWriter(org.apache.lucene.store.DataOutput, int, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts.bitsRequired(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts.maxValue(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts.copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.packed.PackedReaderIterator.next(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedReaderIterator.ord()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedWriter.add(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedWriter.finish()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedWriter.ord()"
        ]
    ]
}