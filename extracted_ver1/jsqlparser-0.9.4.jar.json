{"jsqlparser-0.9.4.jar": [["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.expression.Alias(java.lang.String)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.expression.Alias(java.lang.String, boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.Alias.getName()"], ["void", "net.sf.jsqlparser.expression.Alias.setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.Alias.isUseAs()"], ["void", "net.sf.jsqlparser.expression.Alias.setUseAs(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.Alias.toString()"], ["net.sf.jsqlparser.expression.AllComparisonExpression", "net.sf.jsqlparser.expression.AllComparisonExpression(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.expression.AllComparisonExpression.getSubSelect()"], ["void", "net.sf.jsqlparser.expression.AllComparisonExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.AllComparisonExpression.toString()"], ["net.sf.jsqlparser.expression.AnalyticExpression", "net.sf.jsqlparser.expression.AnalyticExpression()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.expression.AnalyticExpression.getKeep()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setKeep(net.sf.jsqlparser.expression.KeepExpression)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.AnalyticExpression.getPartitionExpressionList()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setPartitionExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["java.lang.String", "net.sf.jsqlparser.expression.AnalyticExpression.getName()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.AnalyticExpression.getExpression()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.AnalyticExpression.getOffset()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setOffset(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.AnalyticExpression.getDefaultValue()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setDefaultValue(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.WindowElement", "net.sf.jsqlparser.expression.AnalyticExpression.getWindowElement()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setWindowElement(net.sf.jsqlparser.expression.WindowElement)"], ["java.lang.String", "net.sf.jsqlparser.expression.AnalyticExpression.toString()"], ["boolean", "net.sf.jsqlparser.expression.AnalyticExpression.isAllColumns()"], ["void", "net.sf.jsqlparser.expression.AnalyticExpression.setAllColumns(boolean)"], ["net.sf.jsqlparser.expression.AnyComparisonExpression", "net.sf.jsqlparser.expression.AnyComparisonExpression(net.sf.jsqlparser.expression.AnyType, net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.expression.AnyComparisonExpression.getSubSelect()"], ["void", "net.sf.jsqlparser.expression.AnyComparisonExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.AnyType", "net.sf.jsqlparser.expression.AnyComparisonExpression.getAnyType()"], ["java.lang.String", "net.sf.jsqlparser.expression.AnyComparisonExpression.toString()"], ["net.sf.jsqlparser.expression.AnyType[]", "net.sf.jsqlparser.expression.AnyType.values()"], ["net.sf.jsqlparser.expression.AnyType", "net.sf.jsqlparser.expression.AnyType.valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.BinaryExpression", "net.sf.jsqlparser.expression.BinaryExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.BinaryExpression.getLeftExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.BinaryExpression.getRightExpression()"], ["void", "net.sf.jsqlparser.expression.BinaryExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.BinaryExpression.setRightExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.BinaryExpression.setNot()"], ["boolean", "net.sf.jsqlparser.expression.BinaryExpression.isNot()"], ["java.lang.String", "net.sf.jsqlparser.expression.BinaryExpression.toString()"], ["net.sf.jsqlparser.expression.CaseExpression", "net.sf.jsqlparser.expression.CaseExpression()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.CaseExpression.getSwitchExpression()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.setSwitchExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.CaseExpression.getElseExpression()"], ["void", "net.sf.jsqlparser.expression.CaseExpression.setElseExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.CaseExpression.setWhenClauses(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["java.lang.String", "net.sf.jsqlparser.expression.CaseExpression.toString()"], ["net.sf.jsqlparser.expression.CastExpression", "net.sf.jsqlparser.expression.CastExpression()"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.expression.CastExpression.getType()"], ["void", "net.sf.jsqlparser.expression.CastExpression.setType(net.sf.jsqlparser.statement.create.table.ColDataType)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.CastExpression.getLeftExpression()"], ["void", "net.sf.jsqlparser.expression.CastExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.CastExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["boolean", "net.sf.jsqlparser.expression.CastExpression.isUseCastKeyword()"], ["void", "net.sf.jsqlparser.expression.CastExpression.setUseCastKeyword(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.CastExpression.toString()"], ["net.sf.jsqlparser.expression.DateValue", "net.sf.jsqlparser.expression.DateValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.DateValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.sql.Date", "net.sf.jsqlparser.expression.DateValue.getValue()"], ["void", "net.sf.jsqlparser.expression.DateValue.setValue(java.sql.Date)"], ["net.sf.jsqlparser.expression.DoubleValue", "net.sf.jsqlparser.expression.DoubleValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.DoubleValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["double", "net.sf.jsqlparser.expression.DoubleValue.getValue()"], ["void", "net.sf.jsqlparser.expression.DoubleValue.setValue(double)"], ["java.lang.String", "net.sf.jsqlparser.expression.DoubleValue.toString()"], ["net.sf.jsqlparser.expression.ExpressionVisitorAdapter", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter()"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.getSelectVisitor()"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.NullValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.Function)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.SignedExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.JdbcParameter)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.JdbcNamedParameter)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.DoubleValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.LongValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.DateValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.TimeValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.TimestampValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.Parenthesis)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.StringValue)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.Between)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.InExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.CaseExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.WhenClause)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.AllComparisonExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.AnyComparisonExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.Matches)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.CastExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.AnalyticExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.ExtractExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.IntervalExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.JsonExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.WithinGroupExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.UserVariable)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.NumericBind)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.KeepExpression)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.MySQLGroupConcat)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.Pivot)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.PivotXml)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.RowConstructor)"], ["void", "net.sf.jsqlparser.expression.ExpressionVisitorAdapter.visit(net.sf.jsqlparser.expression.HexValue)"], ["net.sf.jsqlparser.expression.ExtractExpression", "net.sf.jsqlparser.expression.ExtractExpression()"], ["void", "net.sf.jsqlparser.expression.ExtractExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.ExtractExpression.getName()"], ["void", "net.sf.jsqlparser.expression.ExtractExpression.setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.ExtractExpression.getExpression()"], ["void", "net.sf.jsqlparser.expression.ExtractExpression.setExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.expression.ExtractExpression.toString()"], ["net.sf.jsqlparser.expression.Function", "net.sf.jsqlparser.expression.Function()"], ["void", "net.sf.jsqlparser.expression.Function.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.Function.getName()"], ["void", "net.sf.jsqlparser.expression.Function.setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.Function.isAllColumns()"], ["void", "net.sf.jsqlparser.expression.Function.setAllColumns(boolean)"], ["boolean", "net.sf.jsqlparser.expression.Function.isDistinct()"], ["void", "net.sf.jsqlparser.expression.Function.setDistinct(boolean)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.Function.getParameters()"], ["void", "net.sf.jsqlparser.expression.Function.setParameters(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["boolean", "net.sf.jsqlparser.expression.Function.isEscaped()"], ["void", "net.sf.jsqlparser.expression.Function.setEscaped(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.Function.getAttribute()"], ["void", "net.sf.jsqlparser.expression.Function.setAttribute(java.lang.String)"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.expression.Function.getKeep()"], ["void", "net.sf.jsqlparser.expression.Function.setKeep(net.sf.jsqlparser.expression.KeepExpression)"], ["java.lang.String", "net.sf.jsqlparser.expression.Function.toString()"], ["net.sf.jsqlparser.expression.HexValue", "net.sf.jsqlparser.expression.HexValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.HexValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.HexValue.getValue()"], ["void", "net.sf.jsqlparser.expression.HexValue.setValue(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.HexValue.toString()"], ["net.sf.jsqlparser.expression.IntervalExpression", "net.sf.jsqlparser.expression.IntervalExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.IntervalExpression.getParameter()"], ["void", "net.sf.jsqlparser.expression.IntervalExpression.setParameter(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.IntervalExpression.getIntervalType()"], ["void", "net.sf.jsqlparser.expression.IntervalExpression.setIntervalType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.IntervalExpression.toString()"], ["void", "net.sf.jsqlparser.expression.IntervalExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.JdbcNamedParameter", "net.sf.jsqlparser.expression.JdbcNamedParameter()"], ["java.lang.String", "net.sf.jsqlparser.expression.JdbcNamedParameter.getName()"], ["void", "net.sf.jsqlparser.expression.JdbcNamedParameter.setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.JdbcNamedParameter.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.JdbcNamedParameter.toString()"], ["net.sf.jsqlparser.expression.JdbcParameter", "net.sf.jsqlparser.expression.JdbcParameter()"], ["java.lang.Integer", "net.sf.jsqlparser.expression.JdbcParameter.getIndex()"], ["void", "net.sf.jsqlparser.expression.JdbcParameter.setIndex(java.lang.Integer)"], ["void", "net.sf.jsqlparser.expression.JdbcParameter.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.JdbcParameter.toString()"], ["net.sf.jsqlparser.expression.JsonExpression", "net.sf.jsqlparser.expression.JsonExpression()"], ["void", "net.sf.jsqlparser.expression.JsonExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.expression.JsonExpression.getColumn()"], ["void", "net.sf.jsqlparser.expression.JsonExpression.setColumn(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.expression.JsonExpression.setIdents(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.expression.JsonExpression.addIdent(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.JsonExpression.toString()"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.expression.KeepExpression()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.expression.KeepExpression.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.expression.KeepExpression.getName()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.KeepExpression.isFirst()"], ["void", "net.sf.jsqlparser.expression.KeepExpression.setFirst(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.KeepExpression.toString()"], ["net.sf.jsqlparser.expression.LongValue", "net.sf.jsqlparser.expression.LongValue(java.lang.String)"], ["net.sf.jsqlparser.expression.LongValue", "net.sf.jsqlparser.expression.LongValue(long)"], ["void", "net.sf.jsqlparser.expression.LongValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["long", "net.sf.jsqlparser.expression.LongValue.getValue()"], ["void", "net.sf.jsqlparser.expression.LongValue.setValue(long)"], ["java.lang.String", "net.sf.jsqlparser.expression.LongValue.getStringValue()"], ["void", "net.sf.jsqlparser.expression.LongValue.setStringValue(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.LongValue.toString()"], ["net.sf.jsqlparser.expression.MySQLGroupConcat", "net.sf.jsqlparser.expression.MySQLGroupConcat()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.MySQLGroupConcat.getExpressionList()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["boolean", "net.sf.jsqlparser.expression.MySQLGroupConcat.isDistinct()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setDistinct(boolean)"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.expression.MySQLGroupConcat.getSeparator()"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.setSeparator(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.MySQLGroupConcat.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.MySQLGroupConcat.toString()"], ["net.sf.jsqlparser.expression.NullValue", "net.sf.jsqlparser.expression.NullValue()"], ["void", "net.sf.jsqlparser.expression.NullValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.NullValue.toString()"], ["net.sf.jsqlparser.expression.NumericBind", "net.sf.jsqlparser.expression.NumericBind()"], ["int", "net.sf.jsqlparser.expression.NumericBind.getBindId()"], ["void", "net.sf.jsqlparser.expression.NumericBind.setBindId(int)"], ["void", "net.sf.jsqlparser.expression.NumericBind.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.NumericBind.toString()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Addition", "net.sf.jsqlparser.expression.operators.arithmetic.Addition()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Addition.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Addition.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Concat", "net.sf.jsqlparser.expression.operators.arithmetic.Concat()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Concat.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Concat.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Division", "net.sf.jsqlparser.expression.operators.arithmetic.Division()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Division.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Division.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Modulo", "net.sf.jsqlparser.expression.operators.arithmetic.Modulo()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Modulo.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Modulo.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Multiplication", "net.sf.jsqlparser.expression.operators.arithmetic.Multiplication()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Multiplication.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Multiplication.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.arithmetic.Subtraction", "net.sf.jsqlparser.expression.operators.arithmetic.Subtraction()"], ["void", "net.sf.jsqlparser.expression.operators.arithmetic.Subtraction.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.arithmetic.Subtraction.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.conditional.AndExpression", "net.sf.jsqlparser.expression.operators.conditional.AndExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.conditional.AndExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.conditional.AndExpression.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.conditional.OrExpression", "net.sf.jsqlparser.expression.operators.conditional.OrExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.conditional.OrExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.conditional.OrExpression.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.Between", "net.sf.jsqlparser.expression.operators.relational.Between()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.Between.getBetweenExpressionEnd()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.Between.getBetweenExpressionStart()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.Between.getLeftExpression()"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.Between.isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setBetweenExpressionEnd(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setBetweenExpressionStart(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.Between.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.Between.toString()"], ["net.sf.jsqlparser.expression.operators.relational.EqualsTo", "net.sf.jsqlparser.expression.operators.relational.EqualsTo()"], ["void", "net.sf.jsqlparser.expression.operators.relational.EqualsTo.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.EqualsTo.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.ExistsExpression", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.getRightExpression()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.setRightExpression(net.sf.jsqlparser.expression.Expression)"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.getStringExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.ExistsExpression.toString()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.operators.relational.ExpressionList()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.operators.relational.ExpressionList(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.ExpressionList.toString()"], ["net.sf.jsqlparser.expression.operators.relational.GreaterThan", "net.sf.jsqlparser.expression.operators.relational.GreaterThan()"], ["void", "net.sf.jsqlparser.expression.operators.relational.GreaterThan.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.GreaterThan.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals", "net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals()"], ["void", "net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.InExpression", "net.sf.jsqlparser.expression.operators.relational.InExpression()"], ["net.sf.jsqlparser.expression.operators.relational.InExpression", "net.sf.jsqlparser.expression.operators.relational.InExpression(net.sf.jsqlparser.expression.Expression, net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setOldOracleJoinSyntax(int)"], ["int", "net.sf.jsqlparser.expression.operators.relational.InExpression.getOldOracleJoinSyntax()"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.expression.operators.relational.InExpression.getRightItemsList()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.InExpression.getLeftExpression()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setRightItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.InExpression.isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setNot(boolean)"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.expression.operators.relational.InExpression.getLeftItemsList()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setLeftItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.InExpression.toString()"], ["int", "net.sf.jsqlparser.expression.operators.relational.InExpression.getOraclePriorPosition()"], ["void", "net.sf.jsqlparser.expression.operators.relational.InExpression.setOraclePriorPosition(int)"], ["net.sf.jsqlparser.expression.operators.relational.IsNullExpression", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.getLeftExpression()"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.setLeftExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.IsNullExpression.toString()"], ["net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter()"], ["void", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.ItemsListVisitorAdapter.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["net.sf.jsqlparser.expression.operators.relational.LikeExpression", "net.sf.jsqlparser.expression.operators.relational.LikeExpression()"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.isNot()"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.setNot(boolean)"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.getStringExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.toString()"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.getEscape()"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.setEscape(java.lang.String)"], ["boolean", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.isCaseInsensitive()"], ["void", "net.sf.jsqlparser.expression.operators.relational.LikeExpression.setCaseInsensitive(boolean)"], ["net.sf.jsqlparser.expression.operators.relational.Matches", "net.sf.jsqlparser.expression.operators.relational.Matches()"], ["void", "net.sf.jsqlparser.expression.operators.relational.Matches.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.Matches.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.MinorThan", "net.sf.jsqlparser.expression.operators.relational.MinorThan()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MinorThan.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.MinorThan.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.MinorThanEquals", "net.sf.jsqlparser.expression.operators.relational.MinorThanEquals()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MinorThanEquals.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.MinorThanEquals.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.MultiExpressionList", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList()"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.addExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.addExpressionList(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.addExpressionList(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.MultiExpressionList.toString()"], ["net.sf.jsqlparser.expression.operators.relational.NotEqualsTo", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo()"], ["net.sf.jsqlparser.expression.operators.relational.NotEqualsTo", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.NotEqualsTo.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression()"], ["void", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.setOldOracleJoinSyntax(int)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.toString()"], ["int", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.getOldOracleJoinSyntax()"], ["int", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.getOraclePriorPosition()"], ["void", "net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression.setOraclePriorPosition(int)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator.getOperatorType()"], ["void", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator.getStringExpression()"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType[]", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType.values()"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType", "net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType.valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType)"], ["net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperatorType", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator.getOperatorType()"], ["void", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator.getStringExpression()"], ["net.sf.jsqlparser.expression.OracleHierarchicalExpression", "net.sf.jsqlparser.expression.OracleHierarchicalExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.getStartExpression()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setStartExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.getConnectExpression()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setConnectExpression(net.sf.jsqlparser.expression.Expression)"], ["boolean", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.isNoCycle()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setNoCycle(boolean)"], ["boolean", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.isConnectFirst()"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.setConnectFirst(boolean)"], ["void", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.OracleHierarchicalExpression.toString()"], ["net.sf.jsqlparser.expression.Parenthesis", "net.sf.jsqlparser.expression.Parenthesis()"], ["net.sf.jsqlparser.expression.Parenthesis", "net.sf.jsqlparser.expression.Parenthesis(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.Parenthesis.getExpression()"], ["void", "net.sf.jsqlparser.expression.Parenthesis.setExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.Parenthesis.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.expression.Parenthesis.setNot()"], ["boolean", "net.sf.jsqlparser.expression.Parenthesis.isNot()"], ["java.lang.String", "net.sf.jsqlparser.expression.Parenthesis.toString()"], ["net.sf.jsqlparser.expression.RowConstructor", "net.sf.jsqlparser.expression.RowConstructor()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.RowConstructor.getExprList()"], ["void", "net.sf.jsqlparser.expression.RowConstructor.setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["java.lang.String", "net.sf.jsqlparser.expression.RowConstructor.getName()"], ["void", "net.sf.jsqlparser.expression.RowConstructor.setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.RowConstructor.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.RowConstructor.toString()"], ["net.sf.jsqlparser.expression.SignedExpression", "net.sf.jsqlparser.expression.SignedExpression(char, net.sf.jsqlparser.expression.Expression)"], ["char", "net.sf.jsqlparser.expression.SignedExpression.getSign()"], ["void", "net.sf.jsqlparser.expression.SignedExpression.setSign(char)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.SignedExpression.getExpression()"], ["void", "net.sf.jsqlparser.expression.SignedExpression.setExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.expression.SignedExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.SignedExpression.toString()"], ["net.sf.jsqlparser.expression.StringValue", "net.sf.jsqlparser.expression.StringValue(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.expression.StringValue.getValue()"], ["java.lang.String", "net.sf.jsqlparser.expression.StringValue.getNotExcapedValue()"], ["void", "net.sf.jsqlparser.expression.StringValue.setValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.StringValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.StringValue.toString()"], ["net.sf.jsqlparser.expression.TimestampValue", "net.sf.jsqlparser.expression.TimestampValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.TimestampValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.sql.Timestamp", "net.sf.jsqlparser.expression.TimestampValue.getValue()"], ["void", "net.sf.jsqlparser.expression.TimestampValue.setValue(java.sql.Timestamp)"], ["java.lang.String", "net.sf.jsqlparser.expression.TimestampValue.toString()"], ["net.sf.jsqlparser.expression.TimeValue", "net.sf.jsqlparser.expression.TimeValue(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.TimeValue.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.sql.Time", "net.sf.jsqlparser.expression.TimeValue.getValue()"], ["void", "net.sf.jsqlparser.expression.TimeValue.setValue(java.sql.Time)"], ["java.lang.String", "net.sf.jsqlparser.expression.TimeValue.toString()"], ["net.sf.jsqlparser.expression.UserVariable", "net.sf.jsqlparser.expression.UserVariable()"], ["java.lang.String", "net.sf.jsqlparser.expression.UserVariable.getName()"], ["void", "net.sf.jsqlparser.expression.UserVariable.setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.UserVariable.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["boolean", "net.sf.jsqlparser.expression.UserVariable.isDoubleAdd()"], ["void", "net.sf.jsqlparser.expression.UserVariable.setDoubleAdd(boolean)"], ["java.lang.String", "net.sf.jsqlparser.expression.UserVariable.toString()"], ["net.sf.jsqlparser.expression.WhenClause", "net.sf.jsqlparser.expression.WhenClause()"], ["void", "net.sf.jsqlparser.expression.WhenClause.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.WhenClause.getThenExpression()"], ["void", "net.sf.jsqlparser.expression.WhenClause.setThenExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.WhenClause.getWhenExpression()"], ["void", "net.sf.jsqlparser.expression.WhenClause.setWhenExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.expression.WhenClause.toString()"], ["net.sf.jsqlparser.expression.WindowElement$Type[]", "net.sf.jsqlparser.expression.WindowElement$Type.values()"], ["net.sf.jsqlparser.expression.WindowElement$Type", "net.sf.jsqlparser.expression.WindowElement$Type.valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.WindowElement", "net.sf.jsqlparser.expression.WindowElement()"], ["net.sf.jsqlparser.expression.WindowElement$Type", "net.sf.jsqlparser.expression.WindowElement.getType()"], ["void", "net.sf.jsqlparser.expression.WindowElement.setType(net.sf.jsqlparser.expression.WindowElement$Type)"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowElement.getOffset()"], ["void", "net.sf.jsqlparser.expression.WindowElement.setOffset(net.sf.jsqlparser.expression.WindowOffset)"], ["net.sf.jsqlparser.expression.WindowRange", "net.sf.jsqlparser.expression.WindowElement.getRange()"], ["void", "net.sf.jsqlparser.expression.WindowElement.setRange(net.sf.jsqlparser.expression.WindowRange)"], ["java.lang.String", "net.sf.jsqlparser.expression.WindowElement.toString()"], ["net.sf.jsqlparser.expression.WindowOffset$Type[]", "net.sf.jsqlparser.expression.WindowOffset$Type.values()"], ["net.sf.jsqlparser.expression.WindowOffset$Type", "net.sf.jsqlparser.expression.WindowOffset$Type.valueOf(java.lang.String)"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowOffset()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.expression.WindowOffset.getExpression()"], ["void", "net.sf.jsqlparser.expression.WindowOffset.setExpression(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.WindowOffset$Type", "net.sf.jsqlparser.expression.WindowOffset.getType()"], ["void", "net.sf.jsqlparser.expression.WindowOffset.setType(net.sf.jsqlparser.expression.WindowOffset$Type)"], ["java.lang.String", "net.sf.jsqlparser.expression.WindowOffset.toString()"], ["net.sf.jsqlparser.expression.WindowRange", "net.sf.jsqlparser.expression.WindowRange()"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowRange.getEnd()"], ["void", "net.sf.jsqlparser.expression.WindowRange.setEnd(net.sf.jsqlparser.expression.WindowOffset)"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.expression.WindowRange.getStart()"], ["void", "net.sf.jsqlparser.expression.WindowRange.setStart(net.sf.jsqlparser.expression.WindowOffset)"], ["java.lang.String", "net.sf.jsqlparser.expression.WindowRange.toString()"], ["net.sf.jsqlparser.expression.WithinGroupExpression", "net.sf.jsqlparser.expression.WithinGroupExpression()"], ["java.lang.String", "net.sf.jsqlparser.expression.WithinGroupExpression.getName()"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.setName(java.lang.String)"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.expression.WithinGroupExpression.getExprList()"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.expression.WithinGroupExpression.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.expression.WithinGroupExpression.toString()"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException()"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException(java.lang.String)"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException(java.lang.Throwable)"], ["net.sf.jsqlparser.JSQLParserException", "net.sf.jsqlparser.JSQLParserException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "net.sf.jsqlparser.JSQLParserException.getCause()"], ["void", "net.sf.jsqlparser.JSQLParserException.printStackTrace()"], ["void", "net.sf.jsqlparser.JSQLParserException.printStackTrace(java.io.PrintWriter)"], ["void", "net.sf.jsqlparser.JSQLParserException.printStackTrace(java.io.PrintStream)"], ["net.sf.jsqlparser.parser.ASTNodeAccessImpl", "net.sf.jsqlparser.parser.ASTNodeAccessImpl()"], ["net.sf.jsqlparser.parser.SimpleNode", "net.sf.jsqlparser.parser.ASTNodeAccessImpl.getASTNode()"], ["void", "net.sf.jsqlparser.parser.ASTNodeAccessImpl.setASTNode(net.sf.jsqlparser.parser.SimpleNode)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.CCJSqlParser.getASTRoot()"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParser.Statement()"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParser.SingleStatement()"], ["net.sf.jsqlparser.statement.Statements", "net.sf.jsqlparser.parser.CCJSqlParser.Statements()"], ["net.sf.jsqlparser.statement.SetStatement", "net.sf.jsqlparser.parser.CCJSqlParser.Set()"], ["net.sf.jsqlparser.statement.update.Update", "net.sf.jsqlparser.parser.CCJSqlParser.Update()"], ["net.sf.jsqlparser.statement.replace.Replace", "net.sf.jsqlparser.parser.CCJSqlParser.Replace()"], ["net.sf.jsqlparser.statement.insert.Insert", "net.sf.jsqlparser.parser.CCJSqlParser.Insert()"], ["net.sf.jsqlparser.statement.delete.Delete", "net.sf.jsqlparser.parser.CCJSqlParser.Delete()"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.parser.CCJSqlParser.Column()"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.RelObjectName()"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.RelObjectNameExt()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.parser.CCJSqlParser.Table()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.parser.CCJSqlParser.TableWithAlias()"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.parser.CCJSqlParser.Select()"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.parser.CCJSqlParser.SelectBody()"], ["net.sf.jsqlparser.statement.select.PlainSelect", "net.sf.jsqlparser.parser.CCJSqlParser.PlainSelect()"], ["net.sf.jsqlparser.statement.select.SetOperationList", "net.sf.jsqlparser.parser.CCJSqlParser.SetOperationList()"], ["net.sf.jsqlparser.statement.select.WithItem", "net.sf.jsqlparser.parser.CCJSqlParser.WithItem()"], ["net.sf.jsqlparser.statement.select.SelectExpressionItem", "net.sf.jsqlparser.parser.CCJSqlParser.SelectExpressionItem()"], ["net.sf.jsqlparser.statement.select.SelectItem", "net.sf.jsqlparser.parser.CCJSqlParser.SelectItem()"], ["net.sf.jsqlparser.statement.select.AllTableColumns", "net.sf.jsqlparser.parser.CCJSqlParser.AllTableColumns()"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.parser.CCJSqlParser.Alias()"], ["net.sf.jsqlparser.statement.select.FunctionItem", "net.sf.jsqlparser.parser.CCJSqlParser.FunctionItem()"], ["net.sf.jsqlparser.statement.select.ExpressionListItem", "net.sf.jsqlparser.parser.CCJSqlParser.ExpressionListItem()"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.parser.CCJSqlParser.Pivot()"], ["net.sf.jsqlparser.statement.select.PivotXml", "net.sf.jsqlparser.parser.CCJSqlParser.PivotXml()"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.parser.CCJSqlParser.FromItem()"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.parser.CCJSqlParser.ValuesList()"], ["net.sf.jsqlparser.statement.select.LateralSubSelect", "net.sf.jsqlparser.parser.CCJSqlParser.LateralSubSelect()"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.parser.CCJSqlParser.SubJoin()"], ["java.util.List", "net.sf.jsqlparser.parser.CCJSqlParser.JoinsList()"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.parser.CCJSqlParser.JoinerExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.WhereClause()"], ["net.sf.jsqlparser.expression.OracleHierarchicalExpression", "net.sf.jsqlparser.parser.CCJSqlParser.OracleHierarchicalQueryClause()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Having()"], ["net.sf.jsqlparser.statement.select.OrderByElement", "net.sf.jsqlparser.parser.CCJSqlParser.OrderByElement()"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.parser.CCJSqlParser.Limit()"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.parser.CCJSqlParser.Offset()"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.parser.CCJSqlParser.Fetch()"], ["net.sf.jsqlparser.statement.select.Top", "net.sf.jsqlparser.parser.CCJSqlParser.Top()"], ["net.sf.jsqlparser.statement.select.Skip", "net.sf.jsqlparser.parser.CCJSqlParser.Skip()"], ["net.sf.jsqlparser.statement.select.First", "net.sf.jsqlparser.parser.CCJSqlParser.First()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Expression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.OrExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AndExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Condition()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.RegularCondition()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.SQLCondition()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.InExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.Between()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.LikeExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.IsNullExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.ExistsExpression()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.parser.CCJSqlParser.SQLExpressionList()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.parser.CCJSqlParser.SimpleExpressionList()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.parser.CCJSqlParser.SimpleExpressionListAtLeastTwoItems()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.ComparisonItem()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AllComparisonExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AnyComparisonExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.SimpleExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.ConcatExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.BitwiseAndOr()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.AdditiveExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.MultiplicativeExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.BitwiseXor()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.PrimaryExpression()"], ["net.sf.jsqlparser.expression.JdbcNamedParameter", "net.sf.jsqlparser.parser.CCJSqlParser.JdbcNamedParameter()"], ["net.sf.jsqlparser.expression.UserVariable", "net.sf.jsqlparser.parser.CCJSqlParser.UserVariable()"], ["net.sf.jsqlparser.expression.NumericBind", "net.sf.jsqlparser.parser.CCJSqlParser.NumericBind()"], ["net.sf.jsqlparser.expression.JsonExpression", "net.sf.jsqlparser.parser.CCJSqlParser.JsonExpression()"], ["net.sf.jsqlparser.expression.IntervalExpression", "net.sf.jsqlparser.parser.CCJSqlParser.IntervalExpression()"], ["net.sf.jsqlparser.expression.WithinGroupExpression", "net.sf.jsqlparser.parser.CCJSqlParser.WithinGroupExpression()"], ["net.sf.jsqlparser.expression.KeepExpression", "net.sf.jsqlparser.parser.CCJSqlParser.KeepExpression()"], ["net.sf.jsqlparser.expression.AnalyticExpression", "net.sf.jsqlparser.parser.CCJSqlParser.AnalyticExpression()"], ["net.sf.jsqlparser.expression.WindowElement", "net.sf.jsqlparser.parser.CCJSqlParser.WindowElement()"], ["net.sf.jsqlparser.expression.WindowOffset", "net.sf.jsqlparser.parser.CCJSqlParser.WindowOffset()"], ["net.sf.jsqlparser.expression.ExtractExpression", "net.sf.jsqlparser.parser.CCJSqlParser.ExtractExpression()"], ["net.sf.jsqlparser.expression.CastExpression", "net.sf.jsqlparser.parser.CCJSqlParser.CastExpression()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParser.CaseWhenExpression()"], ["net.sf.jsqlparser.expression.WhenClause", "net.sf.jsqlparser.parser.CCJSqlParser.WhenThenSearchCondition()"], ["net.sf.jsqlparser.expression.WhenClause", "net.sf.jsqlparser.parser.CCJSqlParser.WhenThenValue()"], ["net.sf.jsqlparser.expression.RowConstructor", "net.sf.jsqlparser.parser.CCJSqlParser.RowConstructor()"], ["net.sf.jsqlparser.statement.execute.Execute", "net.sf.jsqlparser.parser.CCJSqlParser.Execute()"], ["net.sf.jsqlparser.expression.Function", "net.sf.jsqlparser.parser.CCJSqlParser.Function()"], ["net.sf.jsqlparser.expression.MySQLGroupConcat", "net.sf.jsqlparser.parser.CCJSqlParser.MySQLGroupConcat()"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.parser.CCJSqlParser.SubSelect()"], ["net.sf.jsqlparser.statement.create.index.CreateIndex", "net.sf.jsqlparser.parser.CCJSqlParser.CreateIndex()"], ["net.sf.jsqlparser.statement.create.table.CreateTable", "net.sf.jsqlparser.parser.CCJSqlParser.CreateTable()"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.parser.CCJSqlParser.ColDataType()"], ["net.sf.jsqlparser.statement.create.view.CreateView", "net.sf.jsqlparser.parser.CCJSqlParser.CreateView()"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.CreateParameter()"], ["java.lang.String", "net.sf.jsqlparser.parser.CCJSqlParser.AList()"], ["net.sf.jsqlparser.statement.drop.Drop", "net.sf.jsqlparser.parser.CCJSqlParser.Drop()"], ["net.sf.jsqlparser.statement.truncate.Truncate", "net.sf.jsqlparser.parser.CCJSqlParser.Truncate()"], ["net.sf.jsqlparser.statement.alter.Alter", "net.sf.jsqlparser.parser.CCJSqlParser.Alter()"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(java.io.InputStream)"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(java.io.InputStream, java.lang.String)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(java.io.InputStream)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(java.io.InputStream, java.lang.String)"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(java.io.Reader)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(java.io.Reader)"], ["net.sf.jsqlparser.parser.CCJSqlParser", "net.sf.jsqlparser.parser.CCJSqlParser(net.sf.jsqlparser.parser.CCJSqlParserTokenManager)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.ReInit(net.sf.jsqlparser.parser.CCJSqlParserTokenManager)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.CCJSqlParser.getNextToken()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.CCJSqlParser.getToken(int)"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.CCJSqlParser.generateParseException()"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.enable_tracing()"], ["void", "net.sf.jsqlparser.parser.CCJSqlParser.disable_tracing()"], ["net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor", "net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor()"], ["java.lang.Object", "net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor.defaultVisit(net.sf.jsqlparser.parser.SimpleNode, java.lang.Object)"], ["java.lang.Object", "net.sf.jsqlparser.parser.CCJSqlParserDefaultVisitor.visit(net.sf.jsqlparser.parser.SimpleNode, java.lang.Object)"], ["net.sf.jsqlparser.parser.CCJSqlParserManager", "net.sf.jsqlparser.parser.CCJSqlParserManager()"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserManager.parse(java.io.Reader)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.setDebugStream(java.io.PrintStream)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.getNextToken()"], ["net.sf.jsqlparser.parser.CCJSqlParserTokenManager", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager(net.sf.jsqlparser.parser.SimpleCharStream)"], ["net.sf.jsqlparser.parser.CCJSqlParserTokenManager", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager(net.sf.jsqlparser.parser.SimpleCharStream, int)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.ReInit(net.sf.jsqlparser.parser.SimpleCharStream)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.ReInit(net.sf.jsqlparser.parser.SimpleCharStream, int)"], ["void", "net.sf.jsqlparser.parser.CCJSqlParserTokenManager.SwitchTo(int)"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.io.Reader)"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.lang.String)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseAST(java.lang.String)"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.io.InputStream)"], ["net.sf.jsqlparser.statement.Statement", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parse(java.io.InputStream, java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseExpression(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseCondExpression(java.lang.String)"], ["net.sf.jsqlparser.statement.Statements", "net.sf.jsqlparser.parser.CCJSqlParserUtil.parseStatements(java.lang.String)"], ["net.sf.jsqlparser.parser.JJTCCJSqlParserState", "net.sf.jsqlparser.parser.JJTCCJSqlParserState()"], ["boolean", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.nodeCreated()"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.reset()"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.rootNode()"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.pushNode(net.sf.jsqlparser.parser.Node)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.popNode()"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.peekNode()"], ["int", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.nodeArity()"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.clearNodeScope(net.sf.jsqlparser.parser.Node)"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.openNodeScope(net.sf.jsqlparser.parser.Node)"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.closeNodeScope(net.sf.jsqlparser.parser.Node, int)"], ["void", "net.sf.jsqlparser.parser.JJTCCJSqlParserState.closeNodeScope(net.sf.jsqlparser.parser.Node, boolean)"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.ParseException(net.sf.jsqlparser.parser.Token, int[][], java.lang.String[])"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.ParseException()"], ["net.sf.jsqlparser.parser.ParseException", "net.sf.jsqlparser.parser.ParseException(java.lang.String)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.setTabSize(int)"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getTabSize()"], ["char", "net.sf.jsqlparser.parser.SimpleCharStream.BeginToken()"], ["char", "net.sf.jsqlparser.parser.SimpleCharStream.readChar()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getColumn()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getLine()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getEndColumn()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getEndLine()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getBeginColumn()"], ["int", "net.sf.jsqlparser.parser.SimpleCharStream.getBeginLine()"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.backup(int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader, int, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.Reader)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.Reader, int, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.Reader, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.Reader)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, int, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, int, int)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream, java.lang.String)"], ["net.sf.jsqlparser.parser.SimpleCharStream", "net.sf.jsqlparser.parser.SimpleCharStream(java.io.InputStream)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, java.lang.String, int, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, int, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, java.lang.String)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, java.lang.String, int, int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.ReInit(java.io.InputStream, int, int)"], ["java.lang.String", "net.sf.jsqlparser.parser.SimpleCharStream.GetImage()"], ["char[]", "net.sf.jsqlparser.parser.SimpleCharStream.GetSuffix(int)"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.Done()"], ["void", "net.sf.jsqlparser.parser.SimpleCharStream.adjustBeginLineColumn(int, int)"], ["net.sf.jsqlparser.parser.SimpleNode", "net.sf.jsqlparser.parser.SimpleNode(int)"], ["net.sf.jsqlparser.parser.SimpleNode", "net.sf.jsqlparser.parser.SimpleNode(net.sf.jsqlparser.parser.CCJSqlParser, int)"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtOpen()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtClose()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetParent(net.sf.jsqlparser.parser.Node)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.SimpleNode.jjtGetParent()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtAddChild(net.sf.jsqlparser.parser.Node, int)"], ["net.sf.jsqlparser.parser.Node", "net.sf.jsqlparser.parser.SimpleNode.jjtGetChild(int)"], ["int", "net.sf.jsqlparser.parser.SimpleNode.jjtGetNumChildren()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetValue(java.lang.Object)"], ["java.lang.Object", "net.sf.jsqlparser.parser.SimpleNode.jjtGetValue()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.SimpleNode.jjtGetFirstToken()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetFirstToken(net.sf.jsqlparser.parser.Token)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.SimpleNode.jjtGetLastToken()"], ["void", "net.sf.jsqlparser.parser.SimpleNode.jjtSetLastToken(net.sf.jsqlparser.parser.Token)"], ["java.lang.Object", "net.sf.jsqlparser.parser.SimpleNode.jjtAccept(net.sf.jsqlparser.parser.CCJSqlParserVisitor, java.lang.Object)"], ["java.lang.Object", "net.sf.jsqlparser.parser.SimpleNode.childrenAccept(net.sf.jsqlparser.parser.CCJSqlParserVisitor, java.lang.Object)"], ["java.lang.String", "net.sf.jsqlparser.parser.SimpleNode.toString()"], ["java.lang.String", "net.sf.jsqlparser.parser.SimpleNode.toString(java.lang.String)"], ["void", "net.sf.jsqlparser.parser.SimpleNode.dump(java.lang.String)"], ["int", "net.sf.jsqlparser.parser.SimpleNode.getId()"], ["java.lang.Object", "net.sf.jsqlparser.parser.Token.getValue()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token(int)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token(int, java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.parser.Token.toString()"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token.newToken(int, java.lang.String)"], ["net.sf.jsqlparser.parser.Token", "net.sf.jsqlparser.parser.Token.newToken(int)"], ["java.lang.String", "net.sf.jsqlparser.parser.TokenMgrError.getMessage()"], ["net.sf.jsqlparser.parser.TokenMgrError", "net.sf.jsqlparser.parser.TokenMgrError()"], ["net.sf.jsqlparser.parser.TokenMgrError", "net.sf.jsqlparser.parser.TokenMgrError(java.lang.String, int)"], ["net.sf.jsqlparser.parser.TokenMgrError", "net.sf.jsqlparser.parser.TokenMgrError(boolean, int, int, int, java.lang.String, int, int)"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.schema.Column()"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.schema.Column(net.sf.jsqlparser.schema.Table, java.lang.String)"], ["net.sf.jsqlparser.schema.Column", "net.sf.jsqlparser.schema.Column(java.lang.String)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Column.getTable()"], ["void", "net.sf.jsqlparser.schema.Column.setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.schema.Column.getColumnName()"], ["void", "net.sf.jsqlparser.schema.Column.setColumnName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Column.getFullyQualifiedName()"], ["void", "net.sf.jsqlparser.schema.Column.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["java.lang.String", "net.sf.jsqlparser.schema.Column.toString()"], ["net.sf.jsqlparser.schema.Database", "net.sf.jsqlparser.schema.Database(java.lang.String)"], ["net.sf.jsqlparser.schema.Database", "net.sf.jsqlparser.schema.Database(net.sf.jsqlparser.schema.Server, java.lang.String)"], ["net.sf.jsqlparser.schema.Server", "net.sf.jsqlparser.schema.Database.getServer()"], ["void", "net.sf.jsqlparser.schema.Database.setServer(net.sf.jsqlparser.schema.Server)"], ["java.lang.String", "net.sf.jsqlparser.schema.Database.getDatabaseName()"], ["void", "net.sf.jsqlparser.schema.Database.setDatabaseName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Database.getFullyQualifiedName()"], ["java.lang.String", "net.sf.jsqlparser.schema.Database.toString()"], ["net.sf.jsqlparser.schema.Server", "net.sf.jsqlparser.schema.Server(java.lang.String)"], ["net.sf.jsqlparser.schema.Server", "net.sf.jsqlparser.schema.Server(java.lang.String, java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.getServerName()"], ["void", "net.sf.jsqlparser.schema.Server.setServerName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.getInstanceName()"], ["void", "net.sf.jsqlparser.schema.Server.setInstanceName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.getFullyQualifiedName()"], ["java.lang.String", "net.sf.jsqlparser.schema.Server.toString()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table(java.lang.String)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table(java.lang.String, java.lang.String)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.schema.Table(net.sf.jsqlparser.schema.Database, java.lang.String, java.lang.String)"], ["net.sf.jsqlparser.schema.Database", "net.sf.jsqlparser.schema.Table.getDatabase()"], ["void", "net.sf.jsqlparser.schema.Table.setDatabase(net.sf.jsqlparser.schema.Database)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.getSchemaName()"], ["void", "net.sf.jsqlparser.schema.Table.setSchemaName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.getName()"], ["void", "net.sf.jsqlparser.schema.Table.setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.schema.Table.getAlias()"], ["void", "net.sf.jsqlparser.schema.Table.setAlias(net.sf.jsqlparser.expression.Alias)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.getFullyQualifiedName()"], ["void", "net.sf.jsqlparser.schema.Table.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["void", "net.sf.jsqlparser.schema.Table.accept(net.sf.jsqlparser.statement.select.IntoTableVisitor)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.schema.Table.getPivot()"], ["void", "net.sf.jsqlparser.schema.Table.setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["java.lang.String", "net.sf.jsqlparser.schema.Table.toString()"], ["net.sf.jsqlparser.statement.alter.Alter", "net.sf.jsqlparser.statement.alter.Alter()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.alter.Alter.getTable()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.alter.Alter.getColumnName()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setColumnName(java.lang.String)"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.statement.alter.Alter.getDataType()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setDataType(net.sf.jsqlparser.statement.create.table.ColDataType)"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setPkColumns(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setUkColumns(java.util.List<java.lang.String>)"], ["java.lang.String", "net.sf.jsqlparser.statement.alter.Alter.getUkName()"], ["void", "net.sf.jsqlparser.statement.alter.Alter.setUkName(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.alter.Alter.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.alter.Alter.toString()"], ["net.sf.jsqlparser.statement.create.index.CreateIndex", "net.sf.jsqlparser.statement.create.index.CreateIndex()"], ["void", "net.sf.jsqlparser.statement.create.index.CreateIndex.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.statement.create.table.Index", "net.sf.jsqlparser.statement.create.index.CreateIndex.getIndex()"], ["void", "net.sf.jsqlparser.statement.create.index.CreateIndex.setIndex(net.sf.jsqlparser.statement.create.table.Index)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.index.CreateIndex.getTable()"], ["void", "net.sf.jsqlparser.statement.create.index.CreateIndex.setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.index.CreateIndex.toString()"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.statement.create.table.ColDataType()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColDataType.getDataType()"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setArgumentsStringList(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setDataType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColDataType.getCharacterSet()"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setCharacterSet(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.create.table.ColDataType.setArrayData(java.util.List<java.lang.Integer>)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColDataType.toString()"], ["net.sf.jsqlparser.statement.create.table.ColumnDefinition", "net.sf.jsqlparser.statement.create.table.ColumnDefinition()"], ["void", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.setColumnSpecStrings(java.util.List<java.lang.String>)"], ["net.sf.jsqlparser.statement.create.table.ColDataType", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.getColDataType()"], ["void", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.setColDataType(net.sf.jsqlparser.statement.create.table.ColDataType)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.getColumnName()"], ["void", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.setColumnName(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ColumnDefinition.toString()"], ["net.sf.jsqlparser.statement.create.table.CreateTable", "net.sf.jsqlparser.statement.create.table.CreateTable()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.table.CreateTable.getTable()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setTable(net.sf.jsqlparser.schema.Table)"], ["boolean", "net.sf.jsqlparser.statement.create.table.CreateTable.isUnlogged()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setUnlogged(boolean)"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setColumnDefinitions(java.util.List<net.sf.jsqlparser.statement.create.table.ColumnDefinition>)"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setTableOptionsStrings(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setCreateOptionsStrings(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setIndexes(java.util.List<net.sf.jsqlparser.statement.create.table.Index>)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.create.table.CreateTable.getSelect()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setSelect(net.sf.jsqlparser.statement.select.Select)"], ["boolean", "net.sf.jsqlparser.statement.create.table.CreateTable.isIfNotExists()"], ["void", "net.sf.jsqlparser.statement.create.table.CreateTable.setIfNotExists(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.CreateTable.toString()"], ["net.sf.jsqlparser.statement.create.table.ForeignKeyIndex", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex()"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.getTable()"], ["void", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.setTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.setReferencedColumnNames(java.util.List<java.lang.String>)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.ForeignKeyIndex.toString()"], ["net.sf.jsqlparser.statement.create.table.Index", "net.sf.jsqlparser.statement.create.table.Index()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.Index.getName()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.Index.getType()"], ["void", "net.sf.jsqlparser.statement.create.table.Index.setColumnsNames(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.create.table.Index.setName(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.create.table.Index.setType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.Index.toString()"], ["net.sf.jsqlparser.statement.create.table.NamedConstraint", "net.sf.jsqlparser.statement.create.table.NamedConstraint()"], ["java.lang.String", "net.sf.jsqlparser.statement.create.table.NamedConstraint.toString()"], ["net.sf.jsqlparser.statement.create.view.CreateView", "net.sf.jsqlparser.statement.create.view.CreateView()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.create.view.CreateView.getView()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setView(net.sf.jsqlparser.schema.Table)"], ["boolean", "net.sf.jsqlparser.statement.create.view.CreateView.isOrReplace()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setOrReplace(boolean)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.create.view.CreateView.getSelectBody()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setColumnNames(java.util.List<java.lang.String>)"], ["boolean", "net.sf.jsqlparser.statement.create.view.CreateView.isMaterialized()"], ["void", "net.sf.jsqlparser.statement.create.view.CreateView.setMaterialized(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.create.view.CreateView.toString()"], ["net.sf.jsqlparser.statement.delete.Delete", "net.sf.jsqlparser.statement.delete.Delete()"], ["void", "net.sf.jsqlparser.statement.delete.Delete.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.delete.Delete.getTable()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.delete.Delete.getWhere()"], ["void", "net.sf.jsqlparser.statement.delete.Delete.setTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.delete.Delete.setWhere(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.delete.Delete.toString()"], ["net.sf.jsqlparser.statement.drop.Drop", "net.sf.jsqlparser.statement.drop.Drop()"], ["void", "net.sf.jsqlparser.statement.drop.Drop.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.drop.Drop.getName()"], ["java.lang.String", "net.sf.jsqlparser.statement.drop.Drop.getType()"], ["void", "net.sf.jsqlparser.statement.drop.Drop.setName(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.drop.Drop.setParameters(java.util.List<java.lang.String>)"], ["void", "net.sf.jsqlparser.statement.drop.Drop.setType(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.drop.Drop.toString()"], ["net.sf.jsqlparser.statement.execute.Execute", "net.sf.jsqlparser.statement.execute.Execute()"], ["java.lang.String", "net.sf.jsqlparser.statement.execute.Execute.getName()"], ["void", "net.sf.jsqlparser.statement.execute.Execute.setName(java.lang.String)"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.statement.execute.Execute.getExprList()"], ["void", "net.sf.jsqlparser.statement.execute.Execute.setExprList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.statement.execute.Execute.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.execute.Execute.toString()"], ["net.sf.jsqlparser.statement.insert.Insert", "net.sf.jsqlparser.statement.insert.Insert()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.insert.Insert.getTable()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.statement.insert.Insert.getItemsList()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["boolean", "net.sf.jsqlparser.statement.insert.Insert.isUseValues()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setUseValues(boolean)"], ["boolean", "net.sf.jsqlparser.statement.insert.Insert.isReturningAllColumns()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setReturningAllColumns(boolean)"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setReturningExpressionList(java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.insert.Insert.getSelect()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setSelect(net.sf.jsqlparser.statement.select.Select)"], ["boolean", "net.sf.jsqlparser.statement.insert.Insert.isUseSelectBrackets()"], ["void", "net.sf.jsqlparser.statement.insert.Insert.setUseSelectBrackets(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.insert.Insert.toString()"], ["net.sf.jsqlparser.statement.replace.Replace", "net.sf.jsqlparser.statement.replace.Replace()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.replace.Replace.getTable()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setTable(net.sf.jsqlparser.schema.Table)"], ["net.sf.jsqlparser.expression.operators.relational.ItemsList", "net.sf.jsqlparser.statement.replace.Replace.getItemsList()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setItemsList(net.sf.jsqlparser.expression.operators.relational.ItemsList)"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["boolean", "net.sf.jsqlparser.statement.replace.Replace.isUseValues()"], ["void", "net.sf.jsqlparser.statement.replace.Replace.setUseValues(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.replace.Replace.toString()"], ["net.sf.jsqlparser.statement.select.AllColumns", "net.sf.jsqlparser.statement.select.AllColumns()"], ["void", "net.sf.jsqlparser.statement.select.AllColumns.accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.AllColumns.toString()"], ["net.sf.jsqlparser.statement.select.AllTableColumns", "net.sf.jsqlparser.statement.select.AllTableColumns()"], ["net.sf.jsqlparser.statement.select.AllTableColumns", "net.sf.jsqlparser.statement.select.AllTableColumns(net.sf.jsqlparser.schema.Table)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.select.AllTableColumns.getTable()"], ["void", "net.sf.jsqlparser.statement.select.AllTableColumns.setTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.select.AllTableColumns.accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.AllTableColumns.toString()"], ["net.sf.jsqlparser.statement.select.Distinct", "net.sf.jsqlparser.statement.select.Distinct()"], ["void", "net.sf.jsqlparser.statement.select.Distinct.setOnSelectItems(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Distinct.toString()"], ["net.sf.jsqlparser.statement.select.ExceptOp", "net.sf.jsqlparser.statement.select.ExceptOp()"], ["net.sf.jsqlparser.statement.select.ExpressionListItem", "net.sf.jsqlparser.statement.select.ExpressionListItem()"], ["net.sf.jsqlparser.expression.operators.relational.ExpressionList", "net.sf.jsqlparser.statement.select.ExpressionListItem.getExpressionList()"], ["void", "net.sf.jsqlparser.statement.select.ExpressionListItem.setExpressionList(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.ExpressionListItem.getAlias()"], ["void", "net.sf.jsqlparser.statement.select.ExpressionListItem.setAlias(net.sf.jsqlparser.expression.Alias)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.ExpressionListItem.toString()"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.statement.select.Fetch()"], ["long", "net.sf.jsqlparser.statement.select.Fetch.getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setRowCount(long)"], ["boolean", "net.sf.jsqlparser.statement.select.Fetch.isFetchJdbcParameter()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Fetch.getFetchParam()"], ["boolean", "net.sf.jsqlparser.statement.select.Fetch.isFetchParamFirst()"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setFetchJdbcParameter(boolean)"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setFetchParam(java.lang.String)"], ["void", "net.sf.jsqlparser.statement.select.Fetch.setFetchParamFirst(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Fetch.toString()"], ["net.sf.jsqlparser.statement.select.First$Keyword[]", "net.sf.jsqlparser.statement.select.First$Keyword.values()"], ["net.sf.jsqlparser.statement.select.First$Keyword", "net.sf.jsqlparser.statement.select.First$Keyword.valueOf(java.lang.String)"], ["net.sf.jsqlparser.statement.select.First", "net.sf.jsqlparser.statement.select.First()"], ["java.lang.Long", "net.sf.jsqlparser.statement.select.First.getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.First.setRowCount(java.lang.Long)"], ["net.sf.jsqlparser.expression.JdbcParameter", "net.sf.jsqlparser.statement.select.First.getJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.First.setJdbcParameter(net.sf.jsqlparser.expression.JdbcParameter)"], ["net.sf.jsqlparser.statement.select.First$Keyword", "net.sf.jsqlparser.statement.select.First.getKeyword()"], ["void", "net.sf.jsqlparser.statement.select.First.setKeyword(net.sf.jsqlparser.statement.select.First$Keyword)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.First.getVariable()"], ["void", "net.sf.jsqlparser.statement.select.First.setVariable(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.First.toString()"], ["net.sf.jsqlparser.statement.select.FromItemVisitorAdapter", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SubJoin)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.LateralSubSelect)"], ["void", "net.sf.jsqlparser.statement.select.FromItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.ValuesList)"], ["net.sf.jsqlparser.statement.select.FunctionItem", "net.sf.jsqlparser.statement.select.FunctionItem()"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.FunctionItem.getAlias()"], ["void", "net.sf.jsqlparser.statement.select.FunctionItem.setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.expression.Function", "net.sf.jsqlparser.statement.select.FunctionItem.getFunction()"], ["void", "net.sf.jsqlparser.statement.select.FunctionItem.setFunction(net.sf.jsqlparser.expression.Function)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.FunctionItem.toString()"], ["net.sf.jsqlparser.statement.select.IntersectOp", "net.sf.jsqlparser.statement.select.IntersectOp()"], ["net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter", "net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.IntoTableVisitorAdapter.visit(net.sf.jsqlparser.schema.Table)"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.statement.select.Join()"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isSimple()"], ["void", "net.sf.jsqlparser.statement.select.Join.setSimple(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isInner()"], ["void", "net.sf.jsqlparser.statement.select.Join.setInner(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isOuter()"], ["void", "net.sf.jsqlparser.statement.select.Join.setOuter(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isLeft()"], ["void", "net.sf.jsqlparser.statement.select.Join.setLeft(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isRight()"], ["void", "net.sf.jsqlparser.statement.select.Join.setRight(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isNatural()"], ["void", "net.sf.jsqlparser.statement.select.Join.setNatural(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isFull()"], ["void", "net.sf.jsqlparser.statement.select.Join.setFull(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Join.isCross()"], ["void", "net.sf.jsqlparser.statement.select.Join.setCross(boolean)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.select.Join.getRightItem()"], ["void", "net.sf.jsqlparser.statement.select.Join.setRightItem(net.sf.jsqlparser.statement.select.FromItem)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.Join.getOnExpression()"], ["void", "net.sf.jsqlparser.statement.select.Join.setOnExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.statement.select.Join.setUsingColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Join.toString()"], ["net.sf.jsqlparser.statement.select.LateralSubSelect", "net.sf.jsqlparser.statement.select.LateralSubSelect()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.setSubSelect(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.statement.select.LateralSubSelect.getSubSelect()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.LateralSubSelect.getAlias()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.LateralSubSelect.getPivot()"], ["void", "net.sf.jsqlparser.statement.select.LateralSubSelect.setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.LateralSubSelect.toString()"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.statement.select.Limit()"], ["long", "net.sf.jsqlparser.statement.select.Limit.getOffset()"], ["long", "net.sf.jsqlparser.statement.select.Limit.getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setOffset(long)"], ["void", "net.sf.jsqlparser.statement.select.Limit.setRowCount(long)"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isOffsetJdbcParameter()"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isRowCountJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setOffsetJdbcParameter(boolean)"], ["void", "net.sf.jsqlparser.statement.select.Limit.setRowCountJdbcParameter(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isLimitAll()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setLimitAll(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Limit.isLimitNull()"], ["void", "net.sf.jsqlparser.statement.select.Limit.setLimitNull(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Limit.toString()"], ["net.sf.jsqlparser.statement.select.MinusOp", "net.sf.jsqlparser.statement.select.MinusOp()"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.statement.select.Offset()"], ["long", "net.sf.jsqlparser.statement.select.Offset.getOffset()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Offset.getOffsetParam()"], ["void", "net.sf.jsqlparser.statement.select.Offset.setOffset(long)"], ["void", "net.sf.jsqlparser.statement.select.Offset.setOffsetParam(java.lang.String)"], ["boolean", "net.sf.jsqlparser.statement.select.Offset.isOffsetJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Offset.setOffsetJdbcParameter(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Offset.toString()"], ["net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering[]", "net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering.values()"], ["net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering", "net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering.valueOf(java.lang.String)"], ["net.sf.jsqlparser.statement.select.OrderByElement", "net.sf.jsqlparser.statement.select.OrderByElement()"], ["boolean", "net.sf.jsqlparser.statement.select.OrderByElement.isAsc()"], ["net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering", "net.sf.jsqlparser.statement.select.OrderByElement.getNullOrdering()"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setNullOrdering(net.sf.jsqlparser.statement.select.OrderByElement$NullOrdering)"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setAsc(boolean)"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setAscDescPresent(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.OrderByElement.isAscDescPresent()"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.accept(net.sf.jsqlparser.statement.select.OrderByVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.OrderByElement.getExpression()"], ["void", "net.sf.jsqlparser.statement.select.OrderByElement.setExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.OrderByElement.toString()"], ["net.sf.jsqlparser.statement.select.OrderByVisitorAdapter", "net.sf.jsqlparser.statement.select.OrderByVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.OrderByVisitorAdapter.visit(net.sf.jsqlparser.statement.select.OrderByElement)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.Pivot()"], ["void", "net.sf.jsqlparser.statement.select.Pivot.accept(net.sf.jsqlparser.statement.select.PivotVisitor)"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setSingleInItems(java.util.List<net.sf.jsqlparser.statement.select.SelectExpressionItem>)"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setMultiInItems(java.util.List<net.sf.jsqlparser.statement.select.ExpressionListItem>)"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setFunctionItems(java.util.List<net.sf.jsqlparser.statement.select.FunctionItem>)"], ["void", "net.sf.jsqlparser.statement.select.Pivot.setForColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Pivot.toString()"], ["net.sf.jsqlparser.statement.select.PivotVisitorAdapter", "net.sf.jsqlparser.statement.select.PivotVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.PivotVisitorAdapter.visit(net.sf.jsqlparser.statement.select.Pivot)"], ["void", "net.sf.jsqlparser.statement.select.PivotVisitorAdapter.visit(net.sf.jsqlparser.statement.select.PivotXml)"], ["net.sf.jsqlparser.statement.select.PivotXml", "net.sf.jsqlparser.statement.select.PivotXml()"], ["void", "net.sf.jsqlparser.statement.select.PivotXml.accept(net.sf.jsqlparser.statement.select.PivotVisitor)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.PivotXml.getInSelect()"], ["void", "net.sf.jsqlparser.statement.select.PivotXml.setInSelect(net.sf.jsqlparser.statement.select.SelectBody)"], ["boolean", "net.sf.jsqlparser.statement.select.PivotXml.isInAny()"], ["void", "net.sf.jsqlparser.statement.select.PivotXml.setInAny(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PivotXml.toString()"], ["net.sf.jsqlparser.statement.select.PlainSelect", "net.sf.jsqlparser.statement.select.PlainSelect()"], ["boolean", "net.sf.jsqlparser.statement.select.PlainSelect.isUseBrackets()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setUseBrackets(boolean)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.select.PlainSelect.getFromItem()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.PlainSelect.getWhere()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setFromItem(net.sf.jsqlparser.statement.select.FromItem)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setIntoTables(java.util.List<net.sf.jsqlparser.schema.Table>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setSelectItems(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.addSelectItems(net.sf.jsqlparser.statement.select.SelectItem...)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setWhere(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setJoins(java.util.List<net.sf.jsqlparser.statement.select.Join>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.accept(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.statement.select.PlainSelect.getLimit()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setLimit(net.sf.jsqlparser.statement.select.Limit)"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.statement.select.PlainSelect.getOffset()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOffset(net.sf.jsqlparser.statement.select.Offset)"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.statement.select.PlainSelect.getFetch()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setFetch(net.sf.jsqlparser.statement.select.Fetch)"], ["net.sf.jsqlparser.statement.select.Top", "net.sf.jsqlparser.statement.select.PlainSelect.getTop()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setTop(net.sf.jsqlparser.statement.select.Top)"], ["net.sf.jsqlparser.statement.select.Skip", "net.sf.jsqlparser.statement.select.PlainSelect.getSkip()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setSkip(net.sf.jsqlparser.statement.select.Skip)"], ["net.sf.jsqlparser.statement.select.First", "net.sf.jsqlparser.statement.select.PlainSelect.getFirst()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setFirst(net.sf.jsqlparser.statement.select.First)"], ["net.sf.jsqlparser.statement.select.Distinct", "net.sf.jsqlparser.statement.select.PlainSelect.getDistinct()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setDistinct(net.sf.jsqlparser.statement.select.Distinct)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.PlainSelect.getHaving()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setHaving(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setGroupByColumnReferences(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.addGroupByColumnReference(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.OracleHierarchicalExpression", "net.sf.jsqlparser.statement.select.PlainSelect.getOracleHierarchical()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOracleHierarchical(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["boolean", "net.sf.jsqlparser.statement.select.PlainSelect.isOracleSiblings()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setOracleSiblings(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.PlainSelect.isForUpdate()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setForUpdate(boolean)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.select.PlainSelect.getForUpdateTable()"], ["void", "net.sf.jsqlparser.statement.select.PlainSelect.setForUpdateTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.toString()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.orderByToString(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.orderByToString(boolean, java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getFormatedList(java.util.List<?>, java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getFormatedList(java.util.List<?>, java.lang.String, boolean, boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getStringList(java.util.List<?>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.PlainSelect.getStringList(java.util.List<?>, boolean, boolean)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.select.Select()"], ["void", "net.sf.jsqlparser.statement.select.Select.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.Select.getSelectBody()"], ["void", "net.sf.jsqlparser.statement.select.Select.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Select.toString()"], ["void", "net.sf.jsqlparser.statement.select.Select.setWithItemsList(java.util.List<net.sf.jsqlparser.statement.select.WithItem>)"], ["net.sf.jsqlparser.statement.select.SelectExpressionItem", "net.sf.jsqlparser.statement.select.SelectExpressionItem()"], ["net.sf.jsqlparser.statement.select.SelectExpressionItem", "net.sf.jsqlparser.statement.select.SelectExpressionItem(net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.SelectExpressionItem.getAlias()"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.select.SelectExpressionItem.getExpression()"], ["void", "net.sf.jsqlparser.statement.select.SelectExpressionItem.setAlias(net.sf.jsqlparser.expression.Alias)"], ["void", "net.sf.jsqlparser.statement.select.SelectExpressionItem.setExpression(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.statement.select.SelectExpressionItem.accept(net.sf.jsqlparser.statement.select.SelectItemVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SelectExpressionItem.toString()"], ["net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.statement.select.SelectItemVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["net.sf.jsqlparser.statement.select.SelectVisitorAdapter", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.statement.select.SelectVisitorAdapter.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["net.sf.jsqlparser.statement.select.SetOperation", "net.sf.jsqlparser.statement.select.SetOperation(net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SetOperation.toString()"], ["net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType[]", "net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType.values()"], ["net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType", "net.sf.jsqlparser.statement.select.SetOperationList$SetOperationType.valueOf(java.lang.String)"], ["net.sf.jsqlparser.statement.select.SetOperationList", "net.sf.jsqlparser.statement.select.SetOperationList()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.accept(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setOrderByElements(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setOpsAndSelects(java.util.List<net.sf.jsqlparser.statement.select.SelectBody>, java.util.List<net.sf.jsqlparser.statement.select.SetOperation>)"], ["net.sf.jsqlparser.statement.select.Limit", "net.sf.jsqlparser.statement.select.SetOperationList.getLimit()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setLimit(net.sf.jsqlparser.statement.select.Limit)"], ["net.sf.jsqlparser.statement.select.Offset", "net.sf.jsqlparser.statement.select.SetOperationList.getOffset()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setOffset(net.sf.jsqlparser.statement.select.Offset)"], ["net.sf.jsqlparser.statement.select.Fetch", "net.sf.jsqlparser.statement.select.SetOperationList.getFetch()"], ["void", "net.sf.jsqlparser.statement.select.SetOperationList.setFetch(net.sf.jsqlparser.statement.select.Fetch)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SetOperationList.toString()"], ["net.sf.jsqlparser.statement.select.Skip", "net.sf.jsqlparser.statement.select.Skip()"], ["java.lang.Long", "net.sf.jsqlparser.statement.select.Skip.getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Skip.setRowCount(java.lang.Long)"], ["net.sf.jsqlparser.expression.JdbcParameter", "net.sf.jsqlparser.statement.select.Skip.getJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Skip.setJdbcParameter(net.sf.jsqlparser.expression.JdbcParameter)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Skip.getVariable()"], ["void", "net.sf.jsqlparser.statement.select.Skip.setVariable(java.lang.String)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Skip.toString()"], ["net.sf.jsqlparser.statement.select.SubJoin", "net.sf.jsqlparser.statement.select.SubJoin()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.select.SubJoin.getLeft()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setLeft(net.sf.jsqlparser.statement.select.FromItem)"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.statement.select.SubJoin.getJoin()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setJoin(net.sf.jsqlparser.statement.select.Join)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.SubJoin.getPivot()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.SubJoin.getAlias()"], ["void", "net.sf.jsqlparser.statement.select.SubJoin.setAlias(net.sf.jsqlparser.expression.Alias)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SubJoin.toString()"], ["net.sf.jsqlparser.statement.select.SubSelect", "net.sf.jsqlparser.statement.select.SubSelect()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.SubSelect.getSelectBody()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.accept(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.SubSelect.getAlias()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.SubSelect.getPivot()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["boolean", "net.sf.jsqlparser.statement.select.SubSelect.isUseBrackets()"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setUseBrackets(boolean)"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.setWithItemsList(java.util.List<net.sf.jsqlparser.statement.select.WithItem>)"], ["void", "net.sf.jsqlparser.statement.select.SubSelect.accept(net.sf.jsqlparser.expression.operators.relational.ItemsListVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.SubSelect.toString()"], ["net.sf.jsqlparser.statement.select.Top", "net.sf.jsqlparser.statement.select.Top()"], ["long", "net.sf.jsqlparser.statement.select.Top.getRowCount()"], ["void", "net.sf.jsqlparser.statement.select.Top.setRowCount(long)"], ["boolean", "net.sf.jsqlparser.statement.select.Top.isRowCountJdbcParameter()"], ["void", "net.sf.jsqlparser.statement.select.Top.setRowCountJdbcParameter(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Top.hasParenthesis()"], ["void", "net.sf.jsqlparser.statement.select.Top.setParenthesis(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.Top.isPercentage()"], ["void", "net.sf.jsqlparser.statement.select.Top.setPercentage(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.Top.toString()"], ["net.sf.jsqlparser.statement.select.UnionOp", "net.sf.jsqlparser.statement.select.UnionOp()"], ["boolean", "net.sf.jsqlparser.statement.select.UnionOp.isAll()"], ["void", "net.sf.jsqlparser.statement.select.UnionOp.setAll(boolean)"], ["boolean", "net.sf.jsqlparser.statement.select.UnionOp.isDistinct()"], ["void", "net.sf.jsqlparser.statement.select.UnionOp.setDistinct(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.UnionOp.toString()"], ["net.sf.jsqlparser.statement.select.ValuesList", "net.sf.jsqlparser.statement.select.ValuesList()"], ["net.sf.jsqlparser.statement.select.ValuesList", "net.sf.jsqlparser.statement.select.ValuesList(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.accept(net.sf.jsqlparser.statement.select.FromItemVisitor)"], ["net.sf.jsqlparser.expression.Alias", "net.sf.jsqlparser.statement.select.ValuesList.getAlias()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setAlias(net.sf.jsqlparser.expression.Alias)"], ["net.sf.jsqlparser.statement.select.Pivot", "net.sf.jsqlparser.statement.select.ValuesList.getPivot()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setPivot(net.sf.jsqlparser.statement.select.Pivot)"], ["net.sf.jsqlparser.expression.operators.relational.MultiExpressionList", "net.sf.jsqlparser.statement.select.ValuesList.getMultiExpressionList()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setMultiExpressionList(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["boolean", "net.sf.jsqlparser.statement.select.ValuesList.isNoBrackets()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setNoBrackets(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.ValuesList.toString()"], ["void", "net.sf.jsqlparser.statement.select.ValuesList.setColumnNames(java.util.List<java.lang.String>)"], ["net.sf.jsqlparser.statement.select.WithItem", "net.sf.jsqlparser.statement.select.WithItem()"], ["java.lang.String", "net.sf.jsqlparser.statement.select.WithItem.getName()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setName(java.lang.String)"], ["boolean", "net.sf.jsqlparser.statement.select.WithItem.isRecursive()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setRecursive(boolean)"], ["net.sf.jsqlparser.statement.select.SelectBody", "net.sf.jsqlparser.statement.select.WithItem.getSelectBody()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setSelectBody(net.sf.jsqlparser.statement.select.SelectBody)"], ["void", "net.sf.jsqlparser.statement.select.WithItem.setWithItemList(java.util.List<net.sf.jsqlparser.statement.select.SelectItem>)"], ["java.lang.String", "net.sf.jsqlparser.statement.select.WithItem.toString()"], ["void", "net.sf.jsqlparser.statement.select.WithItem.accept(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["net.sf.jsqlparser.statement.SetStatement", "net.sf.jsqlparser.statement.SetStatement(java.lang.String, net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.SetStatement.getName()"], ["void", "net.sf.jsqlparser.statement.SetStatement.setName(java.lang.String)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.SetStatement.getExpression()"], ["void", "net.sf.jsqlparser.statement.SetStatement.setExpression(net.sf.jsqlparser.expression.Expression)"], ["java.lang.String", "net.sf.jsqlparser.statement.SetStatement.toString()"], ["void", "net.sf.jsqlparser.statement.SetStatement.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.statement.Statements", "net.sf.jsqlparser.statement.Statements()"], ["void", "net.sf.jsqlparser.statement.Statements.setStatements(java.util.List<net.sf.jsqlparser.statement.Statement>)"], ["void", "net.sf.jsqlparser.statement.Statements.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["java.lang.String", "net.sf.jsqlparser.statement.Statements.toString()"], ["net.sf.jsqlparser.statement.StatementVisitorAdapter", "net.sf.jsqlparser.statement.StatementVisitorAdapter()"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.select.Select)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.delete.Delete)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.update.Update)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.drop.Drop)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.truncate.Truncate)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.create.view.CreateView)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.alter.Alter)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.Statements)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.execute.Execute)"], ["void", "net.sf.jsqlparser.statement.StatementVisitorAdapter.visit(net.sf.jsqlparser.statement.SetStatement)"], ["net.sf.jsqlparser.statement.truncate.Truncate", "net.sf.jsqlparser.statement.truncate.Truncate()"], ["void", "net.sf.jsqlparser.statement.truncate.Truncate.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.schema.Table", "net.sf.jsqlparser.statement.truncate.Truncate.getTable()"], ["void", "net.sf.jsqlparser.statement.truncate.Truncate.setTable(net.sf.jsqlparser.schema.Table)"], ["java.lang.String", "net.sf.jsqlparser.statement.truncate.Truncate.toString()"], ["net.sf.jsqlparser.statement.update.Update", "net.sf.jsqlparser.statement.update.Update()"], ["void", "net.sf.jsqlparser.statement.update.Update.accept(net.sf.jsqlparser.statement.StatementVisitor)"], ["net.sf.jsqlparser.expression.Expression", "net.sf.jsqlparser.statement.update.Update.getWhere()"], ["void", "net.sf.jsqlparser.statement.update.Update.setTables(java.util.List<net.sf.jsqlparser.schema.Table>)"], ["void", "net.sf.jsqlparser.statement.update.Update.setWhere(net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.statement.update.Update.setColumns(java.util.List<net.sf.jsqlparser.schema.Column>)"], ["void", "net.sf.jsqlparser.statement.update.Update.setExpressions(java.util.List<net.sf.jsqlparser.expression.Expression>)"], ["net.sf.jsqlparser.statement.select.FromItem", "net.sf.jsqlparser.statement.update.Update.getFromItem()"], ["void", "net.sf.jsqlparser.statement.update.Update.setFromItem(net.sf.jsqlparser.statement.select.FromItem)"], ["void", "net.sf.jsqlparser.statement.update.Update.setJoins(java.util.List<net.sf.jsqlparser.statement.select.Join>)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.statement.update.Update.getSelect()"], ["void", "net.sf.jsqlparser.statement.update.Update.setSelect(net.sf.jsqlparser.statement.select.Select)"], ["boolean", "net.sf.jsqlparser.statement.update.Update.isUseColumnsBrackets()"], ["void", "net.sf.jsqlparser.statement.update.Update.setUseColumnsBrackets(boolean)"], ["boolean", "net.sf.jsqlparser.statement.update.Update.isUseSelect()"], ["void", "net.sf.jsqlparser.statement.update.Update.setUseSelect(boolean)"], ["java.lang.String", "net.sf.jsqlparser.statement.update.Update.toString()"], ["net.sf.jsqlparser.util.AddAliasesVisitor", "net.sf.jsqlparser.util.AddAliasesVisitor()"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.setPrefix(java.lang.String)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.AddAliasesVisitor.visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["net.sf.jsqlparser.util.ConnectExpressionsVisitor", "net.sf.jsqlparser.util.ConnectExpressionsVisitor()"], ["net.sf.jsqlparser.util.ConnectExpressionsVisitor", "net.sf.jsqlparser.util.ConnectExpressionsVisitor(java.lang.String)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.util.ConnectExpressionsVisitor.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["net.sf.jsqlparser.util.deparser.AlterDeParser", "net.sf.jsqlparser.util.deparser.AlterDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.AlterDeParser.deParse(net.sf.jsqlparser.statement.alter.Alter)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.AlterDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.AlterDeParser.setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.CreateIndexDeParser", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser.deParse(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.CreateIndexDeParser.setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.CreateTableDeParser", "net.sf.jsqlparser.util.deparser.CreateTableDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.CreateTableDeParser.deParse(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.CreateTableDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.CreateTableDeParser.setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.CreateViewDeParser", "net.sf.jsqlparser.util.deparser.CreateViewDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.CreateViewDeParser.deParse(net.sf.jsqlparser.statement.create.view.CreateView)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.CreateViewDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.CreateViewDeParser.setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.util.deparser.DeleteDeParser", "net.sf.jsqlparser.util.deparser.DeleteDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.DeleteDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.DeleteDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.DeleteDeParser.deParse(net.sf.jsqlparser.statement.delete.Delete)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.DeleteDeParser.getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.DeleteDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.util.deparser.ExecuteDeParser", "net.sf.jsqlparser.util.deparser.ExecuteDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.deParse(net.sf.jsqlparser.statement.execute.Execute)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.ExecuteDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.util.deparser.ExpressionDeParser", "net.sf.jsqlparser.util.deparser.ExpressionDeParser()"], ["net.sf.jsqlparser.util.deparser.ExpressionDeParser", "net.sf.jsqlparser.util.deparser.ExpressionDeParser(net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.Between)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.DoubleValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.HexValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visitOldOracleJoinBinaryExpression(net.sf.jsqlparser.expression.operators.relational.OldOracleJoinBinaryExpression, java.lang.String)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.InExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.SignedExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.JdbcParameter)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.LongValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.NullValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.Parenthesis)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.StringValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.Function)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.getSelectVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.DateValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.TimestampValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.TimeValue)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.CaseExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.WhenClause)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.AllComparisonExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.AnyComparisonExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.Matches)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.CastExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.AnalyticExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.ExtractExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.IntervalExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.JdbcNamedParameter)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.JsonExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.WithinGroupExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.UserVariable)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.NumericBind)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.KeepExpression)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.MySQLGroupConcat)"], ["void", "net.sf.jsqlparser.util.deparser.ExpressionDeParser.visit(net.sf.jsqlparser.expression.RowConstructor)"], ["net.sf.jsqlparser.util.deparser.InsertDeParser", "net.sf.jsqlparser.util.deparser.InsertDeParser()"], ["net.sf.jsqlparser.util.deparser.InsertDeParser", "net.sf.jsqlparser.util.deparser.InsertDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.InsertDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.deParse(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.InsertDeParser.getExpressionVisitor()"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.util.deparser.InsertDeParser.getSelectVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.InsertDeParser.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["net.sf.jsqlparser.util.deparser.ReplaceDeParser", "net.sf.jsqlparser.util.deparser.ReplaceDeParser()"], ["net.sf.jsqlparser.util.deparser.ReplaceDeParser", "net.sf.jsqlparser.util.deparser.ReplaceDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.deParse(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.getExpressionVisitor()"], ["net.sf.jsqlparser.statement.select.SelectVisitor", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.getSelectVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.setSelectVisitor(net.sf.jsqlparser.statement.select.SelectVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.ReplaceDeParser.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["net.sf.jsqlparser.util.deparser.SelectDeParser", "net.sf.jsqlparser.util.deparser.SelectDeParser()"], ["net.sf.jsqlparser.util.deparser.SelectDeParser", "net.sf.jsqlparser.util.deparser.SelectDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.OrderByElement)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.Pivot)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.PivotXml)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseOrderBy(java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseOrderBy(boolean, java.util.List<net.sf.jsqlparser.statement.select.OrderByElement>)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseLimit(net.sf.jsqlparser.statement.select.Limit)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseOffset(net.sf.jsqlparser.statement.select.Offset)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseFetch(net.sf.jsqlparser.statement.select.Fetch)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.SelectDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.setBuffer(java.lang.StringBuilder)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.SelectDeParser.getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SubJoin)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.deparseJoin(net.sf.jsqlparser.statement.select.Join)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.LateralSubSelect)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.ValuesList)"], ["void", "net.sf.jsqlparser.util.deparser.SelectDeParser.visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["net.sf.jsqlparser.util.deparser.SetStatementDeParser", "net.sf.jsqlparser.util.deparser.SetStatementDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.deParse(net.sf.jsqlparser.statement.SetStatement)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.SetStatementDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["net.sf.jsqlparser.util.deparser.StatementDeParser", "net.sf.jsqlparser.util.deparser.StatementDeParser(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.create.view.CreateView)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.delete.Delete)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.drop.Drop)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.select.Select)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.truncate.Truncate)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.update.Update)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.StatementDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.alter.Alter)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.Statements)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.execute.Execute)"], ["void", "net.sf.jsqlparser.util.deparser.StatementDeParser.visit(net.sf.jsqlparser.statement.SetStatement)"], ["net.sf.jsqlparser.util.deparser.UpdateDeParser", "net.sf.jsqlparser.util.deparser.UpdateDeParser(net.sf.jsqlparser.expression.ExpressionVisitor, net.sf.jsqlparser.statement.select.SelectVisitor, java.lang.StringBuilder)"], ["java.lang.StringBuilder", "net.sf.jsqlparser.util.deparser.UpdateDeParser.getBuffer()"], ["void", "net.sf.jsqlparser.util.deparser.UpdateDeParser.setBuffer(java.lang.StringBuilder)"], ["void", "net.sf.jsqlparser.util.deparser.UpdateDeParser.deParse(net.sf.jsqlparser.statement.update.Update)"], ["net.sf.jsqlparser.expression.ExpressionVisitor", "net.sf.jsqlparser.util.deparser.UpdateDeParser.getExpressionVisitor()"], ["void", "net.sf.jsqlparser.util.deparser.UpdateDeParser.setExpressionVisitor(net.sf.jsqlparser.expression.ExpressionVisitor)"], ["void", "net.sf.jsqlparser.util.SelectUtils$1.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.SelectUtils$1.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.SelectUtils$1.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.SelectUtils$2.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.SelectUtils$2.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.SelectUtils$2.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTableAndExpressions(net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.expression.Expression...)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTableAndExpressions(net.sf.jsqlparser.schema.Table, java.lang.String...)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTableAndSelectItems(net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.statement.select.SelectItem...)"], ["net.sf.jsqlparser.statement.select.Select", "net.sf.jsqlparser.util.SelectUtils.buildSelectFromTable(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.util.SelectUtils.addExpression(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.statement.select.Join", "net.sf.jsqlparser.util.SelectUtils.addJoin(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.schema.Table, net.sf.jsqlparser.expression.Expression)"], ["void", "net.sf.jsqlparser.util.SelectUtils.addGroupBy(net.sf.jsqlparser.statement.select.Select, net.sf.jsqlparser.expression.Expression)"], ["net.sf.jsqlparser.util.TablesNamesFinder", "net.sf.jsqlparser.util.TablesNamesFinder()"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.Select)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.WithItem)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.PlainSelect)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.schema.Table)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SubSelect)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Addition)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.conditional.AndExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.Between)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.schema.Column)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Division)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.DoubleValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.EqualsTo)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.Function)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThan)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.InExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.SignedExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.IsNullExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.JdbcParameter)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.LikeExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.ExistsExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.LongValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.MinorThan)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.MinorThanEquals)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Multiplication)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.NotEqualsTo)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.NullValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.conditional.OrExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.Parenthesis)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.StringValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Subtraction)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visitBinaryExpression(net.sf.jsqlparser.expression.BinaryExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.ExpressionList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.DateValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.TimestampValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.TimeValue)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.CaseExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.WhenClause)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.AllComparisonExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.AnyComparisonExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SubJoin)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Concat)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.Matches)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.CastExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.arithmetic.Modulo)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.AnalyticExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SetOperationList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.ExtractExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.LateralSubSelect)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.MultiExpressionList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.ValuesList)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.IntervalExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.JdbcNamedParameter)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.OracleHierarchicalExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMatchOperator)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.operators.relational.RegExpMySQLOperator)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.JsonExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.AllColumns)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.AllTableColumns)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.select.SelectExpressionItem)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.WithinGroupExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.UserVariable)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.NumericBind)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.KeepExpression)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.MySQLGroupConcat)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.delete.Delete)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.update.Update)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.insert.Insert)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.replace.Replace)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.drop.Drop)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.truncate.Truncate)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.create.index.CreateIndex)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.create.table.CreateTable)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.create.view.CreateView)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.alter.Alter)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.Statements)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.execute.Execute)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.statement.SetStatement)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.RowConstructor)"], ["void", "net.sf.jsqlparser.util.TablesNamesFinder.visit(net.sf.jsqlparser.expression.HexValue)"]]}