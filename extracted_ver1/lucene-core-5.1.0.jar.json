{
    "lucene-core-5.1.0.jar": [
        [
            "java.lang.Package",
            "org.apache.lucene.LucenePackage.get()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$1.getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer$1.setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$2.getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer$2.setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$ReuseStrategy",
            "org.apache.lucene.analysis.Analyzer$ReuseStrategy()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents(org.apache.lucene.analysis.Tokenizer)"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenStream()"
        ],
        [
            "org.apache.lucene.analysis.Tokenizer",
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents.getTokenizer()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.analysis.Analyzer()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.analysis.Analyzer(org.apache.lucene.analysis.Analyzer$ReuseStrategy)"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.analysis.Analyzer.tokenStream(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.analysis.Analyzer.tokenStream(java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Analyzer.getPositionIncrementGap(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Analyzer.getOffsetGap(java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$ReuseStrategy",
            "org.apache.lucene.analysis.Analyzer.getReuseStrategy()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer.setVersion(org.apache.lucene.util.Version)"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.analysis.Analyzer.getVersion()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Analyzer.close()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.AnalyzerWrapper.getPositionIncrementGap(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.AnalyzerWrapper.getOffsetGap(java.lang.String)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.analysis.AnalyzerWrapper.initReader(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.analysis.CachingTokenFilter",
            "org.apache.lucene.analysis.CachingTokenFilter(org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.CachingTokenFilter.reset()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.CachingTokenFilter.incrementToken()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.CachingTokenFilter.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.CachingTokenFilter.isCached()"
        ],
        [
            "org.apache.lucene.analysis.CharFilter",
            "org.apache.lucene.analysis.CharFilter(java.io.Reader)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.CharFilter.close()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.CharFilter.correctOffset(int)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer$TokenStreamComponents",
            "org.apache.lucene.analysis.DelegatingAnalyzerWrapper$DelegatingReuseStrategy.getReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.DelegatingAnalyzerWrapper$DelegatingReuseStrategy.setReusableComponents(org.apache.lucene.analysis.Analyzer, java.lang.String, org.apache.lucene.analysis.Analyzer$TokenStreamComponents)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.NumericTokenStream$NumericAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getBytesRef()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.fillBytesRef()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getShift()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.setShift(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.incShift()"
        ],
        [
            "long",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getRawValue()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.getValueSize()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.init(long, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.clone()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.NumericTokenStream$NumericTermAttributeImpl.clone()"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream()"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream(int)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream(org.apache.lucene.util.AttributeFactory, int)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setLongValue(long)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setIntValue(int)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setDoubleValue(double)"
        ],
        [
            "org.apache.lucene.analysis.NumericTokenStream",
            "org.apache.lucene.analysis.NumericTokenStream.setFloatValue(float)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.NumericTokenStream.reset()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.NumericTokenStream.incrementToken()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.NumericTokenStream.getPrecisionStep()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.NumericTokenStream.toString()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.ReusableStringReader.read()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.ReusableStringReader.read(char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.ReusableStringReader.close()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token(java.lang.CharSequence, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.getFlags()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setFlags(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.Token.getPayload()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.setPayload(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.Token.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Token.hashCode()"
        ],
        [
            "org.apache.lucene.analysis.Token",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.reinit(org.apache.lucene.analysis.Token)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Token.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.Token.clone()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenFilter.end()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenFilter.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenFilter.reset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStream.end()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStream.reset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStream.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStreamToAutomaton$Position.reset()"
        ],
        [
            "org.apache.lucene.analysis.TokenStreamToAutomaton",
            "org.apache.lucene.analysis.TokenStreamToAutomaton()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStreamToAutomaton.setPreservePositionIncrements(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.TokenStreamToAutomaton.setUnicodeArcs(boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.analysis.TokenStreamToAutomaton.toAutomaton(org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.Tokenizer$1.read(char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Tokenizer$1.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Tokenizer.close()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Tokenizer.setReader(java.io.Reader)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.Tokenizer.reset()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyBuffer(char[], int, int)"
        ],
        [
            "char[]",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.buffer()"
        ],
        [
            "char[]",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.resizeBuffer(int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setLength(int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.setEmpty()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.fillBytesRef()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.getBytesRef()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.length()"
        ],
        [
            "char",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.charAt(int)"
        ],
        [
            "java.lang.CharSequence",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.subSequence(int, int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.String)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.StringBuilder)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttribute",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clear()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.toString()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.clone()"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(char)"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence, int, int)"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl.append(java.lang.CharSequence)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.getFlags()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.setFlags(int)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.FlagsAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.isKeyword()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.KeywordAttributeImpl.setKeyword(boolean)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.startOffset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.endOffset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setPositionIncrement(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.getPositionIncrement()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setPositionLength(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.getPositionLength()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.endOffset()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setOffset(int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.type()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.setType(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clear()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.CharTermAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.tokenattributes.PackedTokenAttributeImpl.clone()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.getPayload()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.setPayload(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clear()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.analysis.tokenattributes.PayloadAttributeImpl.clone()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.setPositionIncrement(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.getPositionIncrement()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionIncrementAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.setPositionLength(int)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.getPositionLength()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.PositionLengthAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl()"
        ],
        [
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.type()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.setType(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.analysis.tokenattributes.TypeAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.BlockTermState.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.BlockTermState.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.Codec.getName()"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.codecs.Codec.forName(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.Codec.reloadCodecs(java.lang.ClassLoader)"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.codecs.Codec.getDefault()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.Codec.setDefault(org.apache.lucene.codecs.Codec)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.Codec.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.CodecUtil.writeHeader(org.apache.lucene.store.DataOutput, java.lang.String, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.CodecUtil.writeIndexHeader(org.apache.lucene.store.DataOutput, java.lang.String, int, byte[], java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.headerLength(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.indexHeaderLength(java.lang.String, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.checkHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.checkHeaderNoMagic(org.apache.lucene.store.DataInput, java.lang.String, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.checkIndexHeader(org.apache.lucene.store.DataInput, java.lang.String, int, int, byte[], java.lang.String)"
        ],
        [
            "byte[]",
            "org.apache.lucene.codecs.CodecUtil.checkIndexHeaderID(org.apache.lucene.store.DataInput, byte[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.CodecUtil.checkIndexHeaderSuffix(org.apache.lucene.store.DataInput, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.CodecUtil.writeFooter(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.CodecUtil.footerLength()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.CodecUtil.checkFooter(org.apache.lucene.store.ChecksumIndexInput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.CodecUtil.checkFooter(org.apache.lucene.store.ChecksumIndexInput, java.lang.Throwable)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.CodecUtil.retrieveChecksum(org.apache.lucene.store.IndexInput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.CodecUtil.checkEOF(org.apache.lucene.store.IndexInput)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.CodecUtil.checksumEntireFile(org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.codecs.CompoundFormat",
            "org.apache.lucene.codecs.CompoundFormat()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$1$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$1$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$1$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$1$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$10$1.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$10$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$10$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$10$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$2$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$2$1.remove()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesConsumer$2$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$2$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$3$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$3$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$3$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$3$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$4$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$4$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$4$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$4$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$5$1.hasNext()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesConsumer$5$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$5$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$5$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$6$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$6$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$6$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$6$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$7$1.hasNext()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.DocValuesConsumer$7$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$7$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$7$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$8$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$8$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$8$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$8$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer$9$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer$9$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.DocValuesConsumer$9$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.DocValuesConsumer$9$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.mergeNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState, java.util.List<org.apache.lucene.index.NumericDocValues>, java.util.List<org.apache.lucene.util.Bits>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.mergeBinaryField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState, java.util.List<org.apache.lucene.index.BinaryDocValues>, java.util.List<org.apache.lucene.util.Bits>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.mergeSortedNumericField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState, java.util.List<org.apache.lucene.index.SortedNumericDocValues>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.mergeSortedField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState, java.util.List<org.apache.lucene.index.SortedDocValues>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesConsumer.mergeSortedSetField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState, java.util.List<org.apache.lucene.index.SortedSetDocValues>)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.DocValuesConsumer.isSingleValued(java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.DocValuesFormat.getName()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.DocValuesFormat.toString()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.DocValuesFormat.forName(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.DocValuesFormat.reloadDocValuesFormats(java.lang.ClassLoader)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.codecs.DocValuesProducer.getMergeInstance()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.FieldsConsumer.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.FieldsProducer.getMergeInstance()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.FilterCodec.docValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosFormat",
            "org.apache.lucene.codecs.FilterCodec.fieldInfosFormat()"
        ],
        [
            "org.apache.lucene.codecs.LiveDocsFormat",
            "org.apache.lucene.codecs.FilterCodec.liveDocsFormat()"
        ],
        [
            "org.apache.lucene.codecs.NormsFormat",
            "org.apache.lucene.codecs.FilterCodec.normsFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.FilterCodec.postingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoFormat",
            "org.apache.lucene.codecs.FilterCodec.segmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsFormat",
            "org.apache.lucene.codecs.FilterCodec.storedFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsFormat",
            "org.apache.lucene.codecs.FilterCodec.termVectorsFormat()"
        ],
        [
            "org.apache.lucene.codecs.CompoundFormat",
            "org.apache.lucene.codecs.FilterCodec.compoundFormat()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.close()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.length()"
        ],
        [
            "byte",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.seek(long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.codecs.MultiLevelSkipListReader$SkipBuffer.slice(java.lang.String, long, long)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.getDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.skipTo(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListReader.init(long, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.MultiLevelSkipListWriter.bufferSkip(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.MultiLevelSkipListWriter.writeSkip(org.apache.lucene.store.IndexOutput)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.NormsConsumer$1$1.hasNext()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.NormsConsumer$1$1.remove()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.NormsConsumer$1$1.next()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.NormsConsumer$1$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.NormsConsumer.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.NormsConsumer.mergeNormsField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.MergeState, java.util.List<org.apache.lucene.index.NumericDocValues>)"
        ],
        [
            "org.apache.lucene.codecs.NormsProducer",
            "org.apache.lucene.codecs.NormsProducer.getMergeInstance()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.PostingsFormat.getName()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.PostingsFormat.toString()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.PostingsFormat.forName(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.PostingsFormat.reloadPostingsFormats(java.lang.ClassLoader)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.PushPostingsWriterBase.setField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.codecs.BlockTermState",
            "org.apache.lucene.codecs.PushPostingsWriterBase.writeTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.StoredFieldsReader.getMergeInstance()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.StoredFieldsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor(org.apache.lucene.codecs.StoredFieldsWriter, org.apache.lucene.index.MergeState, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.intField(org.apache.lucene.index.FieldInfo, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.longField(org.apache.lucene.index.FieldInfo, long)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.floatField(org.apache.lucene.index.FieldInfo, float)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.needsField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.name()"
        ],
        [
            "org.apache.lucene.index.IndexableFieldType",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.fieldType()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.binaryValue()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.stringValue()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.numericValue()"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.readerValue()"
        ],
        [
            "float",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.boost()"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.codecs.StoredFieldsWriter$MergeVisitor.tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.StoredFieldsWriter.finishDocument()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.StoredFieldsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.TermStats",
            "org.apache.lucene.codecs.TermStats(int, long)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.TermVectorsReader.getMergeInstance()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.TermVectorsReader.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.TermVectorsWriter.finishDocument()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.TermVectorsWriter.finishField()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.TermVectorsWriter.finishTerm()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.TermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.TermVectorsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader(org.apache.lucene.codecs.PostingsReaderBase, org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.close()"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.toString()"
        ],
        [
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$FieldMetaData",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$FieldMetaData(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.BytesRef, long, long, long, long, int, int, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock(org.apache.lucene.util.BytesRef, long, boolean, boolean, int, java.util.List<org.apache.lucene.util.fst.FST<org.apache.lucene.util.BytesRef>>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock.compileIndex(java.util.List<org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingBlock>, org.apache.lucene.store.RAMOutputStream, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm(org.apache.lucene.util.BytesRef, org.apache.lucene.codecs.BlockTermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$PendingTerm.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$TermsWriter.write(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermsEnum)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter$TermsWriter.finish()"
        ],
        [
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter.validateSettings(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter.write(org.apache.lucene.index.Fields)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.BlockTreeTermsWriter.close()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.blocktree.FieldReader.getMin()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.blocktree.FieldReader.getMax()"
        ],
        [
            "org.apache.lucene.codecs.blocktree.Stats",
            "org.apache.lucene.codecs.blocktree.FieldReader.getStats()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.FieldReader.hasFreqs()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.FieldReader.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.FieldReader.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.FieldReader.hasPayloads()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.blocktree.FieldReader.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.FieldReader.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.FieldReader.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.FieldReader.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.blocktree.FieldReader.getDocCount()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.blocktree.FieldReader.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.FieldReader.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.blocktree.FieldReader.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.blocktree.FieldReader.getStats()"
        ],
        [
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum(org.apache.lucene.codecs.blocktree.FieldReader, org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.termState()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame(org.apache.lucene.codecs.blocktree.IntersectTermsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.setState(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.nextLeaf()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.nextNonLeaf()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.getTermBlockOrd()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.IntersectTermsEnumFrame.decodeMetaData()"
        ],
        [
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum(org.apache.lucene.codecs.blocktree.FieldReader)"
        ],
        [
            "org.apache.lucene.codecs.blocktree.Stats",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.computeBlockStats()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.termState()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame(org.apache.lucene.codecs.blocktree.SegmentTermsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.setFloorData(org.apache.lucene.store.ByteArrayDataInput, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.getTermBlockOrd()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.nextLeaf()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.nextNonLeaf()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToFloorFrame(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.decodeMetaData()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToSubBlock(long)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTerm(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTermLeaf(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.scanToTermNonLeaf(org.apache.lucene.util.BytesRef, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.blocktree.Stats.toString()"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat(java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat(java.lang.String, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsWriter",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.toString()"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.clone()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexReader.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsIndexWriter.close()"
        ],
        [
            "byte",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$BlockState$1.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader$BlockState$1.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.getMergeInstance()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.startDocument()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.finishDocument()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.writeField(org.apache.lucene.index.FieldInfo, org.apache.lucene.index.IndexableField)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.finish(org.apache.lucene.index.FieldInfos, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat(java.lang.String, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat.vectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsWriter",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat.vectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsFormat.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.hasNext()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields$1.next()"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields(org.apache.lucene.codecs.compressing.CompressingTermVectorsReader, int[], int[], int[], int[], int[], int[][], int[][], int[][], int[][], int[][], int[][], int[][], org.apache.lucene.util.BytesRef, int[][], org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVFields.size()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.reset(org.apache.lucene.util.Bits, int, int, int[], int[], int[], org.apache.lucene.util.BytesRef, int[])"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVPostingsEnum.cost()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasFreqs()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTerms.hasPayloads()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.next()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader$TVTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.close()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.clone()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.clone()"
        ],
        [
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext, java.lang.String, org.apache.lucene.codecs.compressing.CompressionMode, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.startDocument(int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.finishDocument()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.startField(org.apache.lucene.index.FieldInfo, int, boolean, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.finishField()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.startTerm(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.addPosition(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.finish(org.apache.lucene.index.FieldInfos, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.addProx(int, org.apache.lucene.store.DataInput, org.apache.lucene.store.DataInput)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.CompressingTermVectorsWriter.merge(org.apache.lucene.index.MergeState)"
        ],
        [
            "org.apache.lucene.codecs.compressing.Compressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$1.newCompressor()"
        ],
        [
            "org.apache.lucene.codecs.compressing.Decompressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$1.newDecompressor()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressionMode$1.toString()"
        ],
        [
            "org.apache.lucene.codecs.compressing.Compressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$2.newCompressor()"
        ],
        [
            "org.apache.lucene.codecs.compressing.Decompressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$2.newDecompressor()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressionMode$2.toString()"
        ],
        [
            "org.apache.lucene.codecs.compressing.Compressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$3.newCompressor()"
        ],
        [
            "org.apache.lucene.codecs.compressing.Decompressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$3.newDecompressor()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.compressing.CompressionMode$3.toString()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressionMode$4.decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.compressing.Decompressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$4.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.CompressionMode$4.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressionMode$DeflateCompressor.compress(byte[], int, int, org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor.decompress(org.apache.lucene.store.DataInput, int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.codecs.compressing.Decompressor",
            "org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.CompressionMode$DeflateDecompressor.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressionMode$LZ4FastCompressor.compress(byte[], int, int, org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.CompressionMode$LZ4HighCompressor.compress(byte[], int, int, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.compressing.Decompressor.clone()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.compressing.LZ4.decompress(org.apache.lucene.store.DataInput, int, byte[], int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.LZ4.compress(byte[], int, int, org.apache.lucene.store.DataOutput, org.apache.lucene.codecs.compressing.LZ4$HashTable)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.compressing.LZ4.compressHC(byte[], int, int, org.apache.lucene.store.DataOutput, org.apache.lucene.codecs.compressing.LZ4$HCHashTable)"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec$1.getPostingsFormatForField(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec$2.getDocValuesFormatForField(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50Codec",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50Codec",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec(org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.storedFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.termVectorsFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.postingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldInfosFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.fieldInfosFormat()"
        ],
        [
            "org.apache.lucene.codecs.SegmentInfoFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.segmentInfoFormat()"
        ],
        [
            "org.apache.lucene.codecs.LiveDocsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.liveDocsFormat()"
        ],
        [
            "org.apache.lucene.codecs.CompoundFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.compoundFormat()"
        ],
        [
            "org.apache.lucene.codecs.PostingsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.getPostingsFormatForField(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.getDocValuesFormatForField(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.docValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.NormsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50Codec.normsFormat()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat.getCompoundReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader$FileEntry",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader$FileEntry()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.close()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.listAll()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.deleteFile(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.fileLength(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.makeLock(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.toString()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer(org.apache.lucene.index.SegmentWriteState, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer.addNumericField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer.addBinaryField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer.addSortedField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<org.apache.lucene.util.BytesRef>, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer.addSortedNumericField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<java.lang.Number>, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer.addSortedSetField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<org.apache.lucene.util.BytesRef>, java.lang.Iterable<java.lang.Number>, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesConsumer.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$1.get(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$10.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$10.length()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$2.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$3.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$4.get(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$5.get(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$6.get(long)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$7.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$7.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$7.getValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$7.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$7.termsEnum()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$8.setDocument(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$8.valueAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$8.count()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.nextOrd()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.setDocument(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.lookupOrd(long)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.getValueCount()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.termsEnum()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.ordAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$9.cardinality()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.next()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues$CompressedBinaryTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues(org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$BinaryEntry, org.apache.lucene.util.packed.MonotonicBlockPackedReader, org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$ReverseTermsIndex, org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$CompressedBinaryDocValues.get(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$LongBinaryDocValues.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$ReverseTermsIndex.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer$ReverseTermsIndex.toString()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.getNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.toString()"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.getBinary(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.getSorted(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.getSortedNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.getSortedSet(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.getDocsWithField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "synchronized",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.org.apache.lucene.codecs.DocValuesProducer getMergeInstance()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50DocValuesProducer.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat.read(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50FieldInfosFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, java.lang.String, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat()"
        ],
        [
            "org.apache.lucene.util.MutableBits",
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.newLiveDocs(int)"
        ],
        [
            "org.apache.lucene.util.MutableBits",
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.newLiveDocs(org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.readLiveDocs(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.writeLiveDocs(org.apache.lucene.util.MutableBits, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentCommitInfo, int, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50LiveDocsFormat.files(org.apache.lucene.index.SegmentCommitInfo, java.util.Collection<java.lang.String>)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer$NormMap.add(byte)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer$NormMap.ord(byte)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer$NormMap.optimizeOrdinals()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer.addNormsField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsConsumer.close()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50NormsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsFormat()"
        ],
        [
            "org.apache.lucene.codecs.NormsConsumer",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsFormat.normsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.NormsProducer",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsFormat.normsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$1.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$1.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$1.toString()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$2.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$2.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$2.toString()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$3.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$3.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$3.toString()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$4.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$4.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$4.toString()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$5.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$5.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$5.toString()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$6.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$6.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$6.toString()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$7.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$7.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer$7.toString()"
        ],
        [
            "synchronized",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer.org.apache.lucene.index.NumericDocValues getNorms(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer.close()"
        ],
        [
            "synchronized",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer.org.apache.lucene.codecs.NormsProducer getMergeInstance()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50NormsProducer.toString()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.clone()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.toString()"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState.clone()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat(int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.toString()"
        ],
        [
            "org.apache.lucene.codecs.FieldsConsumer",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockDocsEnum.cost()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.getPayload()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.cost()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum(org.apache.lucene.codecs.lucene50.Lucene50PostingsReader, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "boolean",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.canReuse(org.apache.lucene.store.IndexInput, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.reset(org.apache.lucene.util.Bits, org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState, int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.getPayload()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.cost()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.init(org.apache.lucene.store.IndexInput, org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.BlockTermState",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.newTermState()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.close()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.decodeTerm(long[], org.apache.lucene.store.DataInput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, boolean)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.postings(org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.toString()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.newTermState()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.init(org.apache.lucene.store.IndexOutput, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.setField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.startTerm()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.startDoc(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.addPosition(int, org.apache.lucene.util.BytesRef, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.finishDoc()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.finishTerm(org.apache.lucene.codecs.BlockTermState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.encodeTerm(long[], org.apache.lucene.store.DataOutput, org.apache.lucene.index.FieldInfo, org.apache.lucene.codecs.BlockTermState, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.close()"
        ],
        [
            "org.apache.lucene.codecs.BlockTermState",
            "org.apache.lucene.codecs.lucene50.Lucene50PostingsWriter.newTermState()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50SegmentInfoFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50SegmentInfoFormat()"
        ],
        [
            "org.apache.lucene.index.SegmentInfo",
            "org.apache.lucene.codecs.lucene50.Lucene50SegmentInfoFormat.read(org.apache.lucene.store.Directory, java.lang.String, byte[], org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50SegmentInfoFormat.write(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader(org.apache.lucene.store.IndexInput, int, int, boolean, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.init(long, long, long, long, int)"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getDocPointer()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPosPointer()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPosBufferUpto()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPayPointer()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getPayloadByteUpto()"
        ],
        [
            "int",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipReader.getNextSkipDoc()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter(int, int, int, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput, org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.setField(boolean, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.resetSkip()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.initSkip()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.lucene50.Lucene50SkipWriter.bufferSkip(int, int, long, long, int, int)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode[]",
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode.values()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode",
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat()"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat(org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat$Mode)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.fieldsReader(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsWriter",
            "org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.fieldsWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.codecs.lucene50.Lucene50TermVectorsFormat",
            "org.apache.lucene.codecs.lucene50.Lucene50TermVectorsFormat()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$ConsumerAndSuffix.close()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader(org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat, org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getBinary(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSorted(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSortedNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getSortedSet(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getDocsWithField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.close()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.checkIntegrity()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.getMergeInstance()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsReader.toString()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addNumericField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addBinaryField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addSortedField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<org.apache.lucene.util.BytesRef>, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addSortedNumericField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<java.lang.Number>, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addSortedSetField(org.apache.lucene.index.FieldInfo, java.lang.Iterable<org.apache.lucene.util.BytesRef>, java.lang.Iterable<java.lang.Number>, java.lang.Iterable<java.lang.Number>)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.close()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesConsumer",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.size()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.close()"
        ],
        [
            "long",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.checkIntegrity()"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.getMergeInstance()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.toString()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter(org.apache.lucene.codecs.perfield.PerFieldPostingsFormat, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.write(org.apache.lucene.index.Fields)"
        ],
        [
            "void",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.close()"
        ],
        [
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat()"
        ],
        [
            "org.apache.lucene.codecs.FieldsConsumer",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsConsumer(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsProducer(org.apache.lucene.index.SegmentReadState)"
        ],
        [
            "org.apache.lucene.document.BinaryDocValuesField",
            "org.apache.lucene.document.BinaryDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compress(byte[], int, int, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compress(byte[], int, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compress(byte[])"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compressString(java.lang.String)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.compressString(java.lang.String, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.decompress(org.apache.lucene.util.BytesRef)"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.decompress(byte[])"
        ],
        [
            "byte[]",
            "org.apache.lucene.document.CompressionTools.decompress(byte[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.CompressionTools.decompressString(byte[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.CompressionTools.decompressString(byte[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.CompressionTools.decompressString(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.DateTools$Resolution[]",
            "org.apache.lucene.document.DateTools$Resolution.values()"
        ],
        [
            "org.apache.lucene.document.DateTools$Resolution",
            "org.apache.lucene.document.DateTools$Resolution.valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.DateTools$Resolution.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.DateTools.dateToString(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.DateTools.timeToString(long, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "long",
            "org.apache.lucene.document.DateTools.stringToTime(java.lang.String)"
        ],
        [
            "java.util.Date",
            "org.apache.lucene.document.DateTools.stringToDate(java.lang.String)"
        ],
        [
            "java.util.Date",
            "org.apache.lucene.document.DateTools.round(java.util.Date, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "long",
            "org.apache.lucene.document.DateTools.round(long, org.apache.lucene.document.DateTools$Resolution)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.document.Document()"
        ],
        [
            "void",
            "org.apache.lucene.document.Document.add(org.apache.lucene.index.IndexableField)"
        ],
        [
            "void",
            "org.apache.lucene.document.Document.removeField(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.document.Document.removeFields(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.BytesRef[]",
            "org.apache.lucene.document.Document.getBinaryValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.document.Document.getBinaryValue(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexableField",
            "org.apache.lucene.document.Document.getField(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexableField[]",
            "org.apache.lucene.document.Document.getFields(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.document.Document.getValues(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Document.get(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Document.toString()"
        ],
        [
            "org.apache.lucene.document.DocumentStoredFieldVisitor",
            "org.apache.lucene.document.DocumentStoredFieldVisitor(java.util.Set<java.lang.String>)"
        ],
        [
            "org.apache.lucene.document.DocumentStoredFieldVisitor",
            "org.apache.lucene.document.DocumentStoredFieldVisitor(java.lang.String...)"
        ],
        [
            "org.apache.lucene.document.DocumentStoredFieldVisitor",
            "org.apache.lucene.document.DocumentStoredFieldVisitor()"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)"
        ],
        [
            "void",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.needsField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.document.DocumentStoredFieldVisitor.getDocument()"
        ],
        [
            "org.apache.lucene.document.DoubleDocValuesField",
            "org.apache.lucene.document.DoubleDocValuesField(java.lang.String, double)"
        ],
        [
            "void",
            "org.apache.lucene.document.DoubleDocValuesField.setDoubleValue(double)"
        ],
        [
            "void",
            "org.apache.lucene.document.DoubleDocValuesField.setLongValue(long)"
        ],
        [
            "org.apache.lucene.document.DoubleField",
            "org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.DoubleField",
            "org.apache.lucene.document.DoubleField(java.lang.String, double, org.apache.lucene.document.FieldType)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$1.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$1.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$1.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$2.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$2.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$2.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$3.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$3.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$3.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$4.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$4.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$4.omitNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$5.isIndexed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$5.isAnalyzed()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$Index$5.omitNorms()"
        ],
        [
            "org.apache.lucene.document.Field$Index[]",
            "org.apache.lucene.document.Field$Index.values()"
        ],
        [
            "org.apache.lucene.document.Field$Index",
            "org.apache.lucene.document.Field$Index.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.document.Field$Index",
            "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean)"
        ],
        [
            "org.apache.lucene.document.Field$Index",
            "org.apache.lucene.document.Field$Index.toIndex(boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.document.Field$Store[]",
            "org.apache.lucene.document.Field$Store.values()"
        ],
        [
            "org.apache.lucene.document.Field$Store",
            "org.apache.lucene.document.Field$Store.valueOf(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$StringTokenStream.incrementToken()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$StringTokenStream.end()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$StringTokenStream.reset()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field$StringTokenStream.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$1.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$1.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$1.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$2.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$2.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$2.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$3.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$3.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$3.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$4.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$4.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$4.withOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$5.isStored()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$5.withPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.Field$TermVector$5.withOffsets()"
        ],
        [
            "org.apache.lucene.document.Field$TermVector[]",
            "org.apache.lucene.document.Field$TermVector.values()"
        ],
        [
            "org.apache.lucene.document.Field$TermVector",
            "org.apache.lucene.document.Field$TermVector.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.document.Field$TermVector",
            "org.apache.lucene.document.Field$TermVector.toTermVector(boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[], org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[], int, int, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.FieldType)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Field.stringValue()"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.document.Field.readerValue()"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.document.Field.tokenStreamValue()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setStringValue(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setReaderValue(java.io.Reader)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setBytesValue(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setBytesValue(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setByteValue(byte)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setShortValue(short)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setIntValue(int)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setLongValue(long)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setFloatValue(float)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setDoubleValue(double)"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setTokenStream(org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Field.name()"
        ],
        [
            "float",
            "org.apache.lucene.document.Field.boost()"
        ],
        [
            "void",
            "org.apache.lucene.document.Field.setBoost(float)"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.document.Field.numericValue()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.document.Field.binaryValue()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.Field.toString()"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.Field.fieldType()"
        ],
        [
            "org.apache.lucene.analysis.TokenStream",
            "org.apache.lucene.document.Field.tokenStream(org.apache.lucene.analysis.Analyzer, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.Field.translateFieldType(org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store, org.apache.lucene.document.Field$Index, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, java.io.Reader, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, org.apache.lucene.analysis.TokenStream, org.apache.lucene.document.Field$TermVector)"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[])"
        ],
        [
            "org.apache.lucene.document.Field",
            "org.apache.lucene.document.Field(java.lang.String, byte[], int, int)"
        ],
        [
            "org.apache.lucene.index.IndexableFieldType",
            "org.apache.lucene.document.Field.fieldType()"
        ],
        [
            "org.apache.lucene.document.FieldType$NumericType[]",
            "org.apache.lucene.document.FieldType$NumericType.values()"
        ],
        [
            "org.apache.lucene.document.FieldType$NumericType",
            "org.apache.lucene.document.FieldType$NumericType.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.FieldType(org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.FieldType",
            "org.apache.lucene.document.FieldType()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.freeze()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.stored()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStored(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.tokenized()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setTokenized(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectors()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectors(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectorOffsets()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectorOffsets(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectorPositions()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectorPositions(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.storeTermVectorPayloads()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setStoreTermVectorPayloads(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.omitNorms()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setOmitNorms(boolean)"
        ],
        [
            "org.apache.lucene.index.IndexOptions",
            "org.apache.lucene.document.FieldType.indexOptions()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setIndexOptions(org.apache.lucene.index.IndexOptions)"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setNumericType(org.apache.lucene.document.FieldType$NumericType)"
        ],
        [
            "org.apache.lucene.document.FieldType$NumericType",
            "org.apache.lucene.document.FieldType.numericType()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setNumericPrecisionStep(int)"
        ],
        [
            "int",
            "org.apache.lucene.document.FieldType.numericPrecisionStep()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.document.FieldType.toString()"
        ],
        [
            "org.apache.lucene.index.DocValuesType",
            "org.apache.lucene.document.FieldType.docValuesType()"
        ],
        [
            "void",
            "org.apache.lucene.document.FieldType.setDocValuesType(org.apache.lucene.index.DocValuesType)"
        ],
        [
            "int",
            "org.apache.lucene.document.FieldType.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.document.FieldType.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.document.FloatDocValuesField",
            "org.apache.lucene.document.FloatDocValuesField(java.lang.String, float)"
        ],
        [
            "void",
            "org.apache.lucene.document.FloatDocValuesField.setFloatValue(float)"
        ],
        [
            "void",
            "org.apache.lucene.document.FloatDocValuesField.setLongValue(long)"
        ],
        [
            "org.apache.lucene.document.FloatField",
            "org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.FloatField",
            "org.apache.lucene.document.FloatField(java.lang.String, float, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.IntField",
            "org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.IntField",
            "org.apache.lucene.document.IntField(java.lang.String, int, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.LongField",
            "org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.LongField",
            "org.apache.lucene.document.LongField(java.lang.String, long, org.apache.lucene.document.FieldType)"
        ],
        [
            "org.apache.lucene.document.NumericDocValuesField",
            "org.apache.lucene.document.NumericDocValuesField(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.document.SortedDocValuesField",
            "org.apache.lucene.document.SortedDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.SortedNumericDocValuesField",
            "org.apache.lucene.document.SortedNumericDocValuesField(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.document.SortedSetDocValuesField",
            "org.apache.lucene.document.SortedSetDocValuesField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, byte[])"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, byte[], int, int)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, int)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, float)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.document.StoredField",
            "org.apache.lucene.document.StoredField(java.lang.String, double)"
        ],
        [
            "org.apache.lucene.document.StringField",
            "org.apache.lucene.document.StringField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.TextField",
            "org.apache.lucene.document.TextField(java.lang.String, java.io.Reader)"
        ],
        [
            "org.apache.lucene.document.TextField",
            "org.apache.lucene.document.TextField(java.lang.String, java.lang.String, org.apache.lucene.document.Field$Store)"
        ],
        [
            "org.apache.lucene.document.TextField",
            "org.apache.lucene.document.TextField(java.lang.String, org.apache.lucene.analysis.TokenStream)"
        ],
        [
            "org.apache.lucene.index.AbortingException",
            "org.apache.lucene.index.AbortingException.wrap(java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.index.AutomatonTermsEnum",
            "org.apache.lucene.index.AutomatonTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.BaseCompositeReader.getTermVectors(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.BaseCompositeReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.docFreq(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.BaseCompositeReader.totalTermFreq(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.BaseCompositeReader.getSumDocFreq(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.BaseCompositeReader.getDocCount(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.index.BaseCompositeReader.getSumTotalTermFreq(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates(java.lang.String, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates.add(int, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates$Iterator",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates.iterator()"
        ],
        [
            "void",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates.merge(org.apache.lucene.index.DocValuesFieldUpdates)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates.any()"
        ],
        [
            "long",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates.ramBytesPerDoc()"
        ],
        [
            "org.apache.lucene.index.DocValuesFieldUpdates$Iterator",
            "org.apache.lucene.index.BinaryDocValuesFieldUpdates.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BinaryDocValuesWriter$BytesIterator.hasNext()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.BinaryDocValuesWriter$BytesIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.BinaryDocValuesWriter$BytesIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.BinaryDocValuesWriter$BytesIterator.next()"
        ],
        [
            "org.apache.lucene.index.BinaryDocValuesWriter",
            "org.apache.lucene.index.BinaryDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.index.BinaryDocValuesWriter.addValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.BinaryDocValuesWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BinaryDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.DocValuesConsumer)"
        ],
        [
            "org.apache.lucene.index.BitsSlice",
            "org.apache.lucene.index.BitsSlice(org.apache.lucene.util.Bits, org.apache.lucene.index.ReaderSlice)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BitsSlice.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.BitsSlice.length()"
        ],
        [
            "org.apache.lucene.index.BufferedUpdates",
            "org.apache.lucene.index.BufferedUpdates()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.BufferedUpdates.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedUpdates.addQuery(org.apache.lucene.search.Query, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedUpdates.addDocID(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedUpdates.addTerm(org.apache.lucene.index.Term, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedUpdates.addNumericUpdate(org.apache.lucene.index.DocValuesUpdate$NumericDocValuesUpdate, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedUpdates.addBinaryUpdate(org.apache.lucene.index.DocValuesUpdate$BinaryDocValuesUpdate, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.BufferedUpdatesStream$1.compare(org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "int",
            "org.apache.lucene.index.BufferedUpdatesStream$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.BufferedUpdatesStream$QueryAndLimit",
            "org.apache.lucene.index.BufferedUpdatesStream$QueryAndLimit(org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.index.BufferedUpdatesStream$SegmentQueue",
            "org.apache.lucene.index.BufferedUpdatesStream$SegmentQueue(int)"
        ],
        [
            "org.apache.lucene.index.BufferedUpdatesStream$SegmentState",
            "org.apache.lucene.index.BufferedUpdatesStream$SegmentState(org.apache.lucene.index.IndexWriter$ReaderPool, org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.BufferedUpdatesStream$SegmentState.finish(org.apache.lucene.index.IndexWriter$ReaderPool)"
        ],
        [
            "org.apache.lucene.index.BufferedUpdatesStream",
            "org.apache.lucene.index.BufferedUpdatesStream(org.apache.lucene.util.InfoStream)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedUpdatesStream.long push(org.apache.lucene.index.FrozenBufferedUpdates)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedUpdatesStream.void clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.BufferedUpdatesStream.any()"
        ],
        [
            "int",
            "org.apache.lucene.index.BufferedUpdatesStream.numTerms()"
        ],
        [
            "long",
            "org.apache.lucene.index.BufferedUpdatesStream.ramBytesUsed()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedUpdatesStream.org.apache.lucene.index.BufferedUpdatesStream$ApplyDeletesResult applyDeletesAndUpdates(org.apache.lucene.index.IndexWriter$ReaderPool, java.util.List<org.apache.lucene.index.SegmentCommitInfo>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.BufferedUpdatesStream.void prune(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceReader.init(org.apache.lucene.util.ByteBlockPool, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.ByteSliceReader.eof()"
        ],
        [
            "byte",
            "org.apache.lucene.index.ByteSliceReader.readByte()"
        ],
        [
            "long",
            "org.apache.lucene.index.ByteSliceReader.writeTo(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceReader.nextSlice()"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceReader.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.index.ByteSliceWriter",
            "org.apache.lucene.index.ByteSliceWriter(org.apache.lucene.util.ByteBlockPool)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceWriter.init(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceWriter.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.index.ByteSliceWriter.writeBytes(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.ByteSliceWriter.getAddress()"
        ],
        [
            "org.apache.lucene.index.CheckIndex",
            "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.CheckIndex",
            "org.apache.lucene.index.CheckIndex(org.apache.lucene.store.Directory, org.apache.lucene.store.Lock)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setCrossCheckTermVectors(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.CheckIndex.getCrossCheckTermVectors()"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setFailFast(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.CheckIndex.getFailFast()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.CheckIndex.getChecksumsOnly()"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setChecksumsOnly(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.setInfoStream(java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status",
            "org.apache.lucene.index.CheckIndex.checkIndex()"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status",
            "org.apache.lucene.index.CheckIndex.checkIndex(java.util.List<java.lang.String>)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$LiveDocStatus",
            "org.apache.lucene.index.CheckIndex.testLiveDocs(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$FieldInfoStatus",
            "org.apache.lucene.index.CheckIndex.testFieldInfos(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$FieldNormStatus",
            "org.apache.lucene.index.CheckIndex.testFieldNorms(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$TermIndexStatus",
            "org.apache.lucene.index.CheckIndex.testPostings(org.apache.lucene.index.CodecReader, java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$TermIndexStatus",
            "org.apache.lucene.index.CheckIndex.testPostings(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$StoredFieldStatus",
            "org.apache.lucene.index.CheckIndex.testStoredFields(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$DocValuesStatus",
            "org.apache.lucene.index.CheckIndex.testDocValues(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$TermVectorStatus",
            "org.apache.lucene.index.CheckIndex.testTermVectors(org.apache.lucene.index.CodecReader, java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.index.CheckIndex$Status$TermVectorStatus",
            "org.apache.lucene.index.CheckIndex.testTermVectors(org.apache.lucene.index.CodecReader, java.io.PrintStream, boolean, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.exorciseIndex(org.apache.lucene.index.CheckIndex$Status)"
        ],
        [
            "void",
            "org.apache.lucene.index.CheckIndex.main(java.lang.String[])"
        ],
        [
            "boolean",
            "org.apache.lucene.index.CoalescedUpdates$1$1.hasNext()"
        ],
        [
            "org.apache.lucene.index.BufferedUpdatesStream$QueryAndLimit",
            "org.apache.lucene.index.CoalescedUpdates$1$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.CoalescedUpdates$1$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.CoalescedUpdates$1$1.next()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.CoalescedUpdates.toString()"
        ],
        [
            "org.apache.lucene.index.FieldTermIterator",
            "org.apache.lucene.index.CoalescedUpdates.termIterator()"
        ],
        [
            "void",
            "org.apache.lucene.index.CodecReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.CodecReader.getTermVectors(int)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.CodecReader.fields()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.CodecReader.getNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.CodecReader.getDocsWithField(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.CodecReader.getBinaryDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.CodecReader.getSortedDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.CodecReader.getSortedNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.CodecReader.getSortedSetDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.CodecReader.getNormValues(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.index.CodecReader.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.index.CodecReader.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.CompositeReader.toString()"
        ],
        [
            "org.apache.lucene.index.CompositeReaderContext",
            "org.apache.lucene.index.CompositeReader.getContext()"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.index.CompositeReader.getContext()"
        ],
        [
            "org.apache.lucene.index.CompositeReaderContext$Builder",
            "org.apache.lucene.index.CompositeReaderContext$Builder(org.apache.lucene.index.CompositeReader)"
        ],
        [
            "org.apache.lucene.index.CompositeReaderContext",
            "org.apache.lucene.index.CompositeReaderContext$Builder.build()"
        ],
        [
            "org.apache.lucene.index.CompositeReader",
            "org.apache.lucene.index.CompositeReaderContext.reader()"
        ],
        [
            "org.apache.lucene.index.IndexReader",
            "org.apache.lucene.index.CompositeReaderContext.reader()"
        ],
        [
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread(org.apache.lucene.index.ConcurrentMergeScheduler, org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "int",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.compareTo(org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run()"
        ],
        [
            "int",
            "org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.ConcurrentMergeScheduler",
            "org.apache.lucene.index.ConcurrentMergeScheduler()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void setMaxMergesAndThreads(int, int)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void setDefaultMaxMergesAndThreads(boolean)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void setForceMergeMBPerSec(double)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.double getForceMergeMBPerSec()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void enableAutoIOThrottle()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void disableAutoIOThrottle()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.double getIORateLimitMBPerSec()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.int getMaxThreadCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.int getMaxMergeCount()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.ConcurrentMergeScheduler.sync()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.int mergeThreadCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ConcurrentMergeScheduler.void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ConcurrentMergeScheduler.toString()"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataInput, java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String, org.apache.lucene.store.DataOutput, java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.CorruptIndexException",
            "org.apache.lucene.index.CorruptIndexException(java.lang.String, java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.index.DefaultIndexingChain$PerField",
            "org.apache.lucene.index.DefaultIndexingChain$PerField(org.apache.lucene.index.DefaultIndexingChain, org.apache.lucene.index.FieldInfo, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.index.DefaultIndexingChain$PerField.compareTo(org.apache.lucene.index.DefaultIndexingChain$PerField)"
        ],
        [
            "void",
            "org.apache.lucene.index.DefaultIndexingChain$PerField.finish()"
        ],
        [
            "void",
            "org.apache.lucene.index.DefaultIndexingChain$PerField.invert(org.apache.lucene.index.IndexableField, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.index.DefaultIndexingChain$PerField.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.DefaultIndexingChain",
            "org.apache.lucene.index.DefaultIndexingChain(org.apache.lucene.index.DocumentsWriterPerThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.DefaultIndexingChain.flush(org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "void",
            "org.apache.lucene.index.DefaultIndexingChain.abort()"
        ],
        [
            "void",
            "org.apache.lucene.index.DefaultIndexingChain.processDocument()"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.open(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.DirectoryReader.openIfChanged(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DirectoryReader.indexExists(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.DirectoryReader.directory()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$1.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.DocValues$2.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$3.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocValues$3.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$3.getValueCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$4.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$4.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$5.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$5.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocValues$6.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocValues$6.length()"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.DocValues.emptyBinary()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.DocValues.emptyNumeric()"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.DocValues.emptySorted()"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.DocValues.emptySortedNumeric(int)"
        ],
        [
            "org.apache.lucene.index.RandomAccessOrds",
            "org.apache.lucene.index.DocValues.emptySortedSet()"
        ],
        [
            "org.apache.lucene.index.RandomAccessOrds",
            "org.apache.lucene.index.DocValues.singleton(org.apache.lucene.index.SortedDocValues)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.DocValues.unwrapSingleton(org.apache.lucene.index.SortedSetDocValues)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.DocValues.unwrapSingleton(org.apache.lucene.index.SortedNumericDocValues)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.DocValues.unwrapSingletonBits(org.apache.lucene.index.SortedNumericDocValues)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.DocValues.singleton(org.apache.lucene.index.NumericDocValues, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.DocValues.docsWithValue(org.apache.lucene.index.SortedDocValues, int)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.DocValues.docsWithValue(org.apache.lucene.index.SortedSetDocValues, int)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.DocValues.docsWithValue(org.apache.lucene.index.SortedNumericDocValues, int)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.DocValues.getNumeric(org.apache.lucene.index.LeafReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.DocValues.getBinary(org.apache.lucene.index.LeafReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.DocValues.getSorted(org.apache.lucene.index.LeafReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.DocValues.getSortedNumeric(org.apache.lucene.index.LeafReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.DocValues.getSortedSet(org.apache.lucene.index.LeafReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.DocValues.getDocsWithField(org.apache.lucene.index.LeafReader, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocValuesFieldUpdates$Container.toString()"
        ],
        [
            "org.apache.lucene.index.DocValuesType[]",
            "org.apache.lucene.index.DocValuesType.values()"
        ],
        [
            "org.apache.lucene.index.DocValuesType",
            "org.apache.lucene.index.DocValuesType.valueOf(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocValuesUpdate.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.freq()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.attributes()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.DocsAndPositionsEnum$DocsAndPositionsEnumWrapper.cost()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.DocsEnum.getPayload()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriter$ApplyDeletesEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent",
            "org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriter$DeleteNewFilesEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.DocumentsWriter$FlushFailedEvent",
            "org.apache.lucene.index.DocumentsWriter$FlushFailedEvent(org.apache.lucene.index.SegmentInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriter$FlushFailedEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriter$ForcedPurgeEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriter$MergePendingEvent.process(org.apache.lucene.index.IndexWriter, boolean, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriter.getBufferedDeleteTermsSize()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriter.getNumBufferedDeleteTerms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriter.anyDeletions()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriter.close()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.DocumentsWriter.getIndexWriterConfig()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriter.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue$DocValuesUpdatesNode.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermArrayNode.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue$TermNode.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.numGlobalTermDeletes()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.getBufferedUpdatesTermsSize()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterDeleteQueue.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.hasNext()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.DocumentsWriterFlushControl$1.next()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.long activeBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.long flushBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.long netBytes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.void waitForFlush()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.DocumentsWriterFlushControl.void setFlushPending(org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterFlushControl.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterFlushControl.getNumGlobalTermDeletes()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterFlushControl.getDeleteBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterFlushControl.ramBytesUsed()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterFlushControl.getAndResetApplyAllDeletes()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterFlushControl.setApplyAllDeletes()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.index.DocumentsWriterFlushControl.getInfoStream()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterFlushQueue.getTicketCount()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterPerThread$DocState.testPoint(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterPerThread$DocState.clear()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator",
            "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator(org.apache.lucene.util.Counter)"
        ],
        [
            "int[]",
            "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator.getIntBlock()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterPerThread$IntBlockAllocator.recycleIntBlocks(int[][], int, int)"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThread",
            "org.apache.lucene.index.DocumentsWriterPerThread(java.lang.String, org.apache.lucene.store.Directory, org.apache.lucene.index.LiveIndexWriterConfig, org.apache.lucene.util.InfoStream, org.apache.lucene.index.DocumentsWriterDeleteQueue, org.apache.lucene.index.FieldInfos$Builder, java.util.concurrent.atomic.AtomicLong, boolean)"
        ],
        [
            "org.apache.lucene.index.FieldInfos$Builder",
            "org.apache.lucene.index.DocumentsWriterPerThread.getFieldInfosBuilder()"
        ],
        [
            "void",
            "org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterPerThread.updateDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>, org.apache.lucene.analysis.Analyzer, org.apache.lucene.index.Term)"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterPerThread.numDeleteTerms()"
        ],
        [
            "int",
            "org.apache.lucene.index.DocumentsWriterPerThread.getNumDocsInRAM()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.DocumentsWriterPerThread.toString()"
        ],
        [
            "long",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getBytesUsedPerThread()"
        ],
        [
            "org.apache.lucene.index.DocumentsWriterPerThread",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.getDocumentsWriterPerThread()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState.isFlushPending()"
        ],
        [
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFields",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFields(org.apache.lucene.index.Fields, org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFields.terms(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader(org.apache.lucene.index.LeafReader, org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader.fields()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableFilterAtomicReader.getCombinedCoreAndDeletesKey()"
        ],
        [
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper(org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "org.apache.lucene.index.LeafReader",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableSubReaderWrapper.wrap(org.apache.lucene.index.LeafReader)"
        ],
        [
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms(org.apache.lucene.index.Terms, org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.ExitableDirectoryReader$ExitableTermsEnum.next()"
        ],
        [
            "org.apache.lucene.index.ExitableDirectoryReader",
            "org.apache.lucene.index.ExitableDirectoryReader(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.ExitableDirectoryReader.wrap(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.QueryTimeout)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ExitableDirectoryReader.toString()"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfo(java.lang.String, int, boolean, boolean, boolean, org.apache.lucene.index.IndexOptions, org.apache.lucene.index.DocValuesType, long, java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.checkConsistency()"
        ],
        [
            "org.apache.lucene.index.IndexOptions",
            "org.apache.lucene.index.FieldInfo.getIndexOptions()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInfo.setIndexOptions(org.apache.lucene.index.IndexOptions)"
        ],
        [
            "org.apache.lucene.index.DocValuesType",
            "org.apache.lucene.index.FieldInfo.getDocValuesType()"
        ],
        [
            "long",
            "org.apache.lucene.index.FieldInfo.getDocValuesGen()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.omitsNorms()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInfo.setOmitsNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasPayloads()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfo.hasVectors()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FieldInfo.getAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FieldInfo.putAttribute(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.FieldInfo.attributes()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfos)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos$Builder.getOrAdd(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos$Builder.add(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos$Builder.fieldInfo(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.FieldInfos(org.apache.lucene.index.FieldInfo[])"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasFreq()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasProx()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasPayloads()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasVectors()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasNorms()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FieldInfos.hasDocValues()"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInfos.size()"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos.fieldInfo(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInfo",
            "org.apache.lucene.index.FieldInfos.fieldInfo(int)"
        ],
        [
            "org.apache.lucene.index.FieldInvertState",
            "org.apache.lucene.index.FieldInvertState(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FieldInvertState",
            "org.apache.lucene.index.FieldInvertState(java.lang.String, int, int, int, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getLength()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInvertState.setLength(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getNumOverlap()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInvertState.setNumOverlap(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getOffset()"
        ],
        [
            "float",
            "org.apache.lucene.index.FieldInvertState.getBoost()"
        ],
        [
            "void",
            "org.apache.lucene.index.FieldInvertState.setBoost(float)"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getMaxTermFrequency()"
        ],
        [
            "int",
            "org.apache.lucene.index.FieldInvertState.getUniqueTermCount()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FieldInvertState.getAttributeSource()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FieldInvertState.getName()"
        ],
        [
            "org.apache.lucene.index.FilterCodecReader",
            "org.apache.lucene.index.FilterCodecReader(org.apache.lucene.index.CodecReader)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.index.FilterCodecReader.getFieldsReader()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.index.FilterCodecReader.getTermVectorsReader()"
        ],
        [
            "org.apache.lucene.codecs.NormsProducer",
            "org.apache.lucene.index.FilterCodecReader.getNormsReader()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.index.FilterCodecReader.getDocValuesReader()"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.index.FilterCodecReader.getPostingsReader()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.FilterCodecReader.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.FilterCodecReader.getFieldInfos()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterCodecReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterCodecReader.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterCodecReader.addCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterCodecReader.removeCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper",
            "org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper()"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.FilterDirectoryReader.unwrap(org.apache.lucene.index.DirectoryReader)"
        ],
        [
            "org.apache.lucene.index.FilterDirectoryReader",
            "org.apache.lucene.index.FilterDirectoryReader(org.apache.lucene.index.DirectoryReader, org.apache.lucene.index.FilterDirectoryReader$SubReaderWrapper)"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterDirectoryReader.getVersion()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterDirectoryReader.isCurrent()"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.FilterDirectoryReader.getIndexCommit()"
        ],
        [
            "org.apache.lucene.index.DirectoryReader",
            "org.apache.lucene.index.FilterDirectoryReader.getDelegate()"
        ],
        [
            "org.apache.lucene.index.FilterLeafReader$FilterFields",
            "org.apache.lucene.index.FilterLeafReader$FilterFields(org.apache.lucene.index.Fields)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.FilterLeafReader$FilterFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterFields.size()"
        ],
        [
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum(org.apache.lucene.index.PostingsEnum)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.attributes()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.getPayload()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterLeafReader$FilterPostingsEnum.cost()"
        ],
        [
            "org.apache.lucene.index.FilterLeafReader$FilterTerms",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms(org.apache.lucene.index.Terms)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasFreqs()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.hasPayloads()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.FilterLeafReader$FilterTerms.getStats()"
        ],
        [
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.attributes()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.index.LeafReader",
            "org.apache.lucene.index.FilterLeafReader.unwrap(org.apache.lucene.index.LeafReader)"
        ],
        [
            "org.apache.lucene.index.FilterLeafReader",
            "org.apache.lucene.index.FilterLeafReader(org.apache.lucene.index.LeafReader)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterLeafReader.addCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterLeafReader.removeCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.FilterLeafReader.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.FilterLeafReader.getFieldInfos()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.FilterLeafReader.getTermVectors(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilterLeafReader.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterLeafReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.FilterLeafReader.fields()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FilterLeafReader.toString()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.FilterLeafReader.getNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.FilterLeafReader.getBinaryDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.FilterLeafReader.getSortedDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.FilterLeafReader.getSortedNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.FilterLeafReader.getSortedSetDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.FilterLeafReader.getNormValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.FilterLeafReader.getDocsWithField(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilterLeafReader.checkIntegrity()"
        ],
        [
            "org.apache.lucene.index.LeafReader",
            "org.apache.lucene.index.FilterLeafReader.getDelegate()"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus[]",
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.values()"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus",
            "org.apache.lucene.index.FilteredTermsEnum$AcceptStatus.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum",
            "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.index.FilteredTermsEnum",
            "org.apache.lucene.index.FilteredTermsEnum(org.apache.lucene.index.TermsEnum, boolean)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.FilteredTermsEnum.attributes()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilteredTermsEnum.term()"
        ],
        [
            "int",
            "org.apache.lucene.index.FilteredTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FilteredTermsEnum.totalTermFreq()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.FilteredTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilteredTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.FilteredTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.FilteredTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.FilteredTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.FilteredTermsEnum.termState()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FilteredTermsEnum.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.FlushByRamOrCountsPolicy.onDelete(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "void",
            "org.apache.lucene.index.FlushByRamOrCountsPolicy.onInsert(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "void",
            "org.apache.lucene.index.FlushPolicy.onUpdate(org.apache.lucene.index.DocumentsWriterFlushControl, org.apache.lucene.index.DocumentsWriterPerThreadPool$ThreadState)"
        ],
        [
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField, org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.reset(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxDocsEnum.cost()"
        ],
        [
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField, org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.reset(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.cost()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FreqProxFields$FreqProxPostingsEnum.getPayload()"
        ],
        [
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms(org.apache.lucene.index.FreqProxTermsWriterPerField)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasFreqs()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FreqProxFields$FreqProxTerms.hasPayloads()"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum$1.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum(org.apache.lucene.index.FreqProxTermsWriterPerField)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.reset()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.FreqProxFields$FreqProxTermsEnum.termState()"
        ],
        [
            "org.apache.lucene.index.FreqProxFields",
            "org.apache.lucene.index.FreqProxFields(java.util.List<org.apache.lucene.index.FreqProxTermsWriterPerField>)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.FreqProxFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.FreqProxFields.size()"
        ],
        [
            "org.apache.lucene.index.FreqProxTermsWriter",
            "org.apache.lucene.index.FreqProxTermsWriter(org.apache.lucene.index.DocumentsWriterPerThread, org.apache.lucene.index.TermsHash)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxTermsWriter.flush(java.util.Map<java.lang.String, org.apache.lucene.index.TermsHashPerField>, org.apache.lucene.index.SegmentWriteState)"
        ],
        [
            "org.apache.lucene.index.TermsHashPerField",
            "org.apache.lucene.index.FreqProxTermsWriter.addField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray",
            "org.apache.lucene.index.FreqProxTermsWriterPerField$FreqProxPostingsArray(int, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.index.FreqProxTermsWriterPerField",
            "org.apache.lucene.index.FreqProxTermsWriterPerField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermsHash, org.apache.lucene.index.FieldInfo, org.apache.lucene.index.TermsHashPerField)"
        ],
        [
            "void",
            "org.apache.lucene.index.FreqProxTermsWriterPerField.newPostingsArray()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.FrozenBufferedUpdates$1$1.hasNext()"
        ],
        [
            "org.apache.lucene.index.BufferedUpdatesStream$QueryAndLimit",
            "org.apache.lucene.index.FrozenBufferedUpdates$1$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.FrozenBufferedUpdates$1$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.FrozenBufferedUpdates$1$1.next()"
        ],
        [
            "org.apache.lucene.index.FrozenBufferedUpdates",
            "org.apache.lucene.index.FrozenBufferedUpdates(org.apache.lucene.index.BufferedUpdates, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.FrozenBufferedUpdates.setDelGen(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.FrozenBufferedUpdates.delGen()"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator",
            "org.apache.lucene.index.FrozenBufferedUpdates.termIterator()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.FrozenBufferedUpdates.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexCommit.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexCommit.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexCommit.compareTo(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexCommit.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint(java.util.Collection<org.apache.lucene.index.IndexFileDeleter$CommitPoint>, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getSegmentsFileName()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getDirectory()"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getGeneration()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.getUserData()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.delete()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexFileDeleter$CommitPoint.isDeleted()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexFileDeleter$RefCount.IncRef()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexFileDeleter$RefCount.DecRef()"
        ],
        [
            "org.apache.lucene.index.IndexFileDeleter",
            "org.apache.lucene.index.IndexFileDeleter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.index.SegmentInfos, org.apache.lucene.util.InfoStream, org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.IndexFileDeleter.getLastSegmentInfos()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.deletePendingFiles()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexFileDeleter.checkpoint(org.apache.lucene.index.SegmentInfos, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexFileDeleter.exists(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.fileNameFromGeneration(java.lang.String, java.lang.String, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.segmentFileName(java.lang.String, java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexFileNames.matchesExtension(java.lang.String, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.stripSegmentName(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexFileNames.parseGeneration(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.parseSegmentName(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.stripExtension(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexFileNames.getExtension(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooNewException",
            "org.apache.lucene.index.IndexFormatTooNewException(java.lang.String, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooNewException",
            "org.apache.lucene.index.IndexFormatTooNewException(org.apache.lucene.store.DataInput, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(java.lang.String, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexFormatTooOldException",
            "org.apache.lucene.index.IndexFormatTooOldException(org.apache.lucene.store.DataInput, int, int, int)"
        ],
        [
            "org.apache.lucene.index.IndexNotFoundException",
            "org.apache.lucene.index.IndexNotFoundException(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.IndexOptions[]",
            "org.apache.lucene.index.IndexOptions.values()"
        ],
        [
            "org.apache.lucene.index.IndexOptions",
            "org.apache.lucene.index.IndexOptions.valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.addReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.removeReaderClosedListener(org.apache.lucene.index.IndexReader$ReaderClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.registerParentReader(org.apache.lucene.index.IndexReader)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexReader.getRefCount()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.incRef()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexReader.tryIncRef()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexReader.decRef()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexReader.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexReader.hashCode()"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.IndexReader.getTermVector(int, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexReader.numDeletedDocs()"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.index.IndexReader.document(int)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.index.IndexReader.document(int, java.util.Set<java.lang.String>)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexReader.hasDeletions()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexReader.void close()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.IndexReader.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.IndexReader.getCombinedCoreAndDeletesKey()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexUpgrader.main(java.lang.String[])"
        ],
        [
            "org.apache.lucene.index.IndexUpgrader",
            "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.IndexUpgrader",
            "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.util.InfoStream, boolean)"
        ],
        [
            "org.apache.lucene.index.IndexUpgrader",
            "org.apache.lucene.index.IndexUpgrader(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexUpgrader.upgrade()"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.index.IndexWriter$1.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.boolean infoIsLive(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void drop(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.boolean anyPendingDeletes()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.ReadersAndUpdates)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void release(org.apache.lucene.index.ReadersAndUpdates, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter$ReaderPool.close()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.void commit(org.apache.lucene.index.SegmentInfos)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter$ReaderPool.org.apache.lucene.index.ReadersAndUpdates get(org.apache.lucene.index.SegmentCommitInfo, boolean)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexWriter.ramBytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriter.numDeletedDocs(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "org.apache.lucene.index.IndexWriter",
            "org.apache.lucene.index.IndexWriter(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriter.getConfig()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.close()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.IndexWriter.getDirectory()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.index.IndexWriter.getAnalyzer()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.int maxDoc()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.int numDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.boolean hasDeletions()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.boolean tryDeleteDocument(org.apache.lucene.index.IndexReader, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.index.Term...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteDocuments(org.apache.lucene.search.Query...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateNumericDocValue(org.apache.lucene.index.Term, java.lang.String, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateBinaryDocValue(org.apache.lucene.index.Term, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.updateDocValues(org.apache.lucene.index.Term, org.apache.lucene.document.Field...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMerge(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMerge(int, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMergeDeletes(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.forceMergeDeletes()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.maybeMerge()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.org.apache.lucene.index.MergePolicy$OneMerge getNextMerge()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.boolean hasPendingMerges()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.rollback()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.deleteAll()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.store.Directory...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.addIndexes(org.apache.lucene.index.CodecReader...)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.prepareCommit()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.void setCommitData(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.IndexWriter.getCommitData()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.commit()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexWriter.hasUncommittedChanges()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.int numRamDocs()"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriter.merge(org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.java.lang.String segString()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.java.lang.String segString(java.lang.Iterable<org.apache.lucene.index.SegmentCommitInfo>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.java.lang.String segString(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexWriter.isLocked(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.Throwable",
            "org.apache.lucene.index.IndexWriter.getTragicException()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexWriter.isOpen()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.IndexWriter.void deleteUnusedFiles()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode[]",
            "org.apache.lucene.index.IndexWriterConfig$OpenMode.values()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode",
            "org.apache.lucene.index.IndexWriterConfig$OpenMode.valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.IndexWriterConfig.setDefaultWriteLockTimeout(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexWriterConfig.getDefaultWriteLockTimeout()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig(org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setOpenMode(org.apache.lucene.index.IndexWriterConfig$OpenMode)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode",
            "org.apache.lucene.index.IndexWriterConfig.getOpenMode()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setIndexDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"
        ],
        [
            "org.apache.lucene.index.IndexDeletionPolicy",
            "org.apache.lucene.index.IndexWriterConfig.getIndexDeletionPolicy()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setIndexCommit(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.IndexWriterConfig.getIndexCommit()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setSimilarity(org.apache.lucene.search.similarities.Similarity)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.index.IndexWriterConfig.getSimilarity()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergeScheduler(org.apache.lucene.index.MergeScheduler)"
        ],
        [
            "org.apache.lucene.index.MergeScheduler",
            "org.apache.lucene.index.IndexWriterConfig.getMergeScheduler()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setWriteLockTimeout(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.IndexWriterConfig.getWriteLockTimeout()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setCodec(org.apache.lucene.codecs.Codec)"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.index.IndexWriterConfig.getCodec()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.IndexWriterConfig.getMergePolicy()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxThreadStates(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getMaxThreadStates()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setReaderPooling(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.IndexWriterConfig.getReaderPooling()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setRAMPerThreadHardLimitMB(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getRAMPerThreadHardLimitMB()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.index.IndexWriterConfig.getInfoStream()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.index.IndexWriterConfig.getAnalyzer()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDeleteTerms()"
        ],
        [
            "int",
            "org.apache.lucene.index.IndexWriterConfig.getMaxBufferedDocs()"
        ],
        [
            "org.apache.lucene.index.IndexWriter$IndexReaderWarmer",
            "org.apache.lucene.index.IndexWriterConfig.getMergedSegmentWarmer()"
        ],
        [
            "double",
            "org.apache.lucene.index.IndexWriterConfig.getRAMBufferSizeMB()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setInfoStream(org.apache.lucene.util.InfoStream)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setInfoStream(java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean)"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setCommitOnClose(boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.IndexWriterConfig.toString()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setUseCompoundFile(boolean)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDocs(int)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setRAMBufferSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.IndexWriterConfig.setMaxBufferedDeleteTerms(int)"
        ],
        [
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy",
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.KeepOnlyLastCommitDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.LeafReader$CoreClosedListenerWrapper.onClose(org.apache.lucene.index.IndexReader)"
        ],
        [
            "int",
            "org.apache.lucene.index.LeafReader$CoreClosedListenerWrapper.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LeafReader$CoreClosedListenerWrapper.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.LeafReaderContext",
            "org.apache.lucene.index.LeafReader.getContext()"
        ],
        [
            "int",
            "org.apache.lucene.index.LeafReader.docFreq(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.LeafReader.totalTermFreq(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.LeafReader.getSumDocFreq(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.LeafReader.getDocCount(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.index.LeafReader.getSumTotalTermFreq(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.LeafReader.terms(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.LeafReader.postings(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.LeafReader.postings(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.LeafReader.termDocsEnum(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.LeafReader.termPositionsEnum(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.index.LeafReader.getContext()"
        ],
        [
            "org.apache.lucene.index.LeafReader",
            "org.apache.lucene.index.LeafReaderContext.reader()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.LeafReaderContext.toString()"
        ],
        [
            "org.apache.lucene.index.IndexReader",
            "org.apache.lucene.index.LeafReaderContext.reader()"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.index.LiveIndexWriterConfig.getAnalyzer()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setMaxBufferedDeleteTerms(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDeleteTerms()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.LiveIndexWriterConfig.org.apache.lucene.index.LiveIndexWriterConfig setRAMBufferSizeMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LiveIndexWriterConfig.getRAMBufferSizeMB()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.LiveIndexWriterConfig.org.apache.lucene.index.LiveIndexWriterConfig setMaxBufferedDocs(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMaxBufferedDocs()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setMergePolicy(org.apache.lucene.index.MergePolicy)"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setMergedSegmentWarmer(org.apache.lucene.index.IndexWriter$IndexReaderWarmer)"
        ],
        [
            "org.apache.lucene.index.IndexWriter$IndexReaderWarmer",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMergedSegmentWarmer()"
        ],
        [
            "org.apache.lucene.index.IndexWriterConfig$OpenMode",
            "org.apache.lucene.index.LiveIndexWriterConfig.getOpenMode()"
        ],
        [
            "org.apache.lucene.index.IndexDeletionPolicy",
            "org.apache.lucene.index.LiveIndexWriterConfig.getIndexDeletionPolicy()"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.LiveIndexWriterConfig.getIndexCommit()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.index.LiveIndexWriterConfig.getSimilarity()"
        ],
        [
            "org.apache.lucene.index.MergeScheduler",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMergeScheduler()"
        ],
        [
            "long",
            "org.apache.lucene.index.LiveIndexWriterConfig.getWriteLockTimeout()"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.index.LiveIndexWriterConfig.getCodec()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMergePolicy()"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getMaxThreadStates()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LiveIndexWriterConfig.getReaderPooling()"
        ],
        [
            "int",
            "org.apache.lucene.index.LiveIndexWriterConfig.getRAMPerThreadHardLimitMB()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.index.LiveIndexWriterConfig.getInfoStream()"
        ],
        [
            "org.apache.lucene.index.LiveIndexWriterConfig",
            "org.apache.lucene.index.LiveIndexWriterConfig.setUseCompoundFile(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LiveIndexWriterConfig.getUseCompoundFile()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LiveIndexWriterConfig.getCommitOnClose()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.LiveIndexWriterConfig.toString()"
        ],
        [
            "org.apache.lucene.index.LogByteSizeMergePolicy",
            "org.apache.lucene.index.LogByteSizeMergePolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMB()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogByteSizeMergePolicy.setMaxMergeMBForForcedMerge(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LogByteSizeMergePolicy.getMaxMergeMBForForcedMerge()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogByteSizeMergePolicy.setMinMergeMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.LogByteSizeMergePolicy.getMinMergeMB()"
        ],
        [
            "org.apache.lucene.index.LogDocMergePolicy",
            "org.apache.lucene.index.LogDocMergePolicy()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogDocMergePolicy.setMinMergeDocs(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogDocMergePolicy.getMinMergeDocs()"
        ],
        [
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel",
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel(org.apache.lucene.index.SegmentCommitInfo, float, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy$SegmentInfoAndLevel.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.LogMergePolicy",
            "org.apache.lucene.index.LogMergePolicy()"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy.getMergeFactor()"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setMergeFactor(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setCalibrateSizeByDeletes(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.LogMergePolicy.getCalibrateSizeByDeletes()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.LogMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.LogMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.LogMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "void",
            "org.apache.lucene.index.LogMergePolicy.setMaxMergeDocs(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.LogMergePolicy.getMaxMergeDocs()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.LogMergePolicy.toString()"
        ],
        [
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms(org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiTerms)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTerms.getDocCount()"
        ],
        [
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum(org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiTermsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.MappedMultiFields$MappedMultiTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.index.MappedMultiFields",
            "org.apache.lucene.index.MappedMultiFields(org.apache.lucene.index.MergeState, org.apache.lucene.index.MultiFields)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.MappedMultiFields.terms(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MappingMultiPostingsEnum",
            "org.apache.lucene.index.MappingMultiPostingsEnum(org.apache.lucene.index.MergeState)"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.getNumSubs()"
        ],
        [
            "org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[]",
            "org.apache.lucene.index.MappingMultiPostingsEnum.getSubs()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.MappingMultiPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MappingMultiPostingsEnum.getPayload()"
        ],
        [
            "long",
            "org.apache.lucene.index.MappingMultiPostingsEnum.cost()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeAbortedException",
            "org.apache.lucene.index.MergePolicy$MergeAbortedException()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeAbortedException",
            "org.apache.lucene.index.MergePolicy$MergeAbortedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeException",
            "org.apache.lucene.index.MergePolicy$MergeException(java.lang.String, org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeException",
            "org.apache.lucene.index.MergePolicy$MergeException(java.lang.Throwable, org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.MergePolicy$MergeException.getDirectory()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.MergePolicy$MergeSpecification()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy$MergeSpecification.add(org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MergePolicy$MergeSpecification.segString(org.apache.lucene.store.Directory)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergePolicy$OneMerge$1.map(int)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$OneMerge",
            "org.apache.lucene.index.MergePolicy$OneMerge(java.util.List<org.apache.lucene.index.SegmentCommitInfo>)"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy$OneMerge.mergeFinished()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy$OneMerge.setInfo(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$DocMap",
            "org.apache.lucene.index.MergePolicy$OneMerge.getDocMap(org.apache.lucene.index.MergeState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MergePolicy$OneMerge.segString()"
        ],
        [
            "long",
            "org.apache.lucene.index.MergePolicy$OneMerge.totalBytesSize()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergePolicy$OneMerge.totalNumDocs()"
        ],
        [
            "org.apache.lucene.store.MergeInfo",
            "org.apache.lucene.index.MergePolicy$OneMerge.getMergeInfo()"
        ],
        [
            "org.apache.lucene.index.MergePolicy",
            "org.apache.lucene.index.MergePolicy()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "double",
            "org.apache.lucene.index.MergePolicy.getNoCFSRatio()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy.setNoCFSRatio(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.MergePolicy.getMaxCFSSegmentSizeMB()"
        ],
        [
            "void",
            "org.apache.lucene.index.MergePolicy.setMaxCFSSegmentSizeMB(double)"
        ],
        [
            "org.apache.lucene.index.MergeRateLimiter$PauseResult[]",
            "org.apache.lucene.index.MergeRateLimiter$PauseResult.values()"
        ],
        [
            "org.apache.lucene.index.MergeRateLimiter$PauseResult",
            "org.apache.lucene.index.MergeRateLimiter$PauseResult.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MergeRateLimiter",
            "org.apache.lucene.index.MergeRateLimiter(org.apache.lucene.index.MergePolicy$OneMerge)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.void setMBPerSec(double)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.double getMBPerSec()"
        ],
        [
            "long",
            "org.apache.lucene.index.MergeRateLimiter.getTotalBytesWritten()"
        ],
        [
            "long",
            "org.apache.lucene.index.MergeRateLimiter.pause(long)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.long getTotalStoppedNS()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.long getTotalPausedNS()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.void checkAbort()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.void setAbort()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.MergeRateLimiter.boolean getAbort()"
        ],
        [
            "long",
            "org.apache.lucene.index.MergeRateLimiter.getMinPauseCheckBytes()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DocMap$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DocMap$1.maxDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DocMap$1.numDeletedDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$DocMap.numDocs()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MergeState$DocMap.hasDeletions()"
        ],
        [
            "org.apache.lucene.index.MergeState$DocMap",
            "org.apache.lucene.index.MergeState$DocMap.build(org.apache.lucene.index.CodecReader)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$NoDelDocMap.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$NoDelDocMap.maxDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MergeState$NoDelDocMap.numDeletedDocs()"
        ],
        [
            "org.apache.lucene.index.MergeTrigger[]",
            "org.apache.lucene.index.MergeTrigger.values()"
        ],
        [
            "org.apache.lucene.index.MergeTrigger",
            "org.apache.lucene.index.MergeTrigger.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.MergedPrefixCodedTermsIterator",
            "org.apache.lucene.index.MergedPrefixCodedTermsIterator(java.util.List<org.apache.lucene.index.PrefixCodedTerms>)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MergedPrefixCodedTermsIterator.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MergedPrefixCodedTermsIterator.term()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MergedPrefixCodedTermsIterator.field()"
        ],
        [
            "long",
            "org.apache.lucene.index.MergedPrefixCodedTermsIterator.delGen()"
        ],
        [
            "org.apache.lucene.index.MultiBits$SubResult",
            "org.apache.lucene.index.MultiBits$SubResult()"
        ],
        [
            "org.apache.lucene.index.MultiBits",
            "org.apache.lucene.index.MultiBits(org.apache.lucene.util.Bits[], int[], boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiBits.get(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiBits.toString()"
        ],
        [
            "org.apache.lucene.index.MultiBits$SubResult",
            "org.apache.lucene.index.MultiBits.getMatchingSub(org.apache.lucene.index.ReaderSlice)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiBits.length()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$1.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$2.get(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$3.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiDocValues$4.setDocument(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$4.valueAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$4.count()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$MultiSortedDocValues.getValueCount()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.nextOrd()"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.setDocument(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.lookupOrd(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$MultiSortedSetDocValues.getValueCount()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap$1.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap$2.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap$SegmentMap.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$OrdinalMap",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.build(java.lang.Object, org.apache.lucene.index.SortedDocValues[], float)"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$OrdinalMap",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.build(java.lang.Object, org.apache.lucene.index.SortedSetDocValues[], float)"
        ],
        [
            "org.apache.lucene.index.MultiDocValues$OrdinalMap",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.build(java.lang.Object, org.apache.lucene.index.TermsEnum[], long[], float)"
        ],
        [
            "org.apache.lucene.util.LongValues",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.getGlobalOrds(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.getFirstSegmentOrd(long)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.getFirstSegmentNumber(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.getValueCount()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiDocValues$OrdinalMap.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.MultiDocValues.getNormValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.MultiDocValues.getNumericValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.MultiDocValues.getDocsWithField(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.MultiDocValues.getBinaryValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.MultiDocValues.getSortedNumericValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.MultiDocValues.getSortedValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.MultiDocValues.getSortedSetValues(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.MultiFields.getFields(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.MultiFields.getLiveDocs(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.MultiFields.getTerms(org.apache.lucene.index.IndexReader, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.MultiFields.getTermDocsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.MultiFields.getTermPositionsEnum(org.apache.lucene.index.IndexReader, org.apache.lucene.util.Bits, java.lang.String, org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "org.apache.lucene.index.MultiFields",
            "org.apache.lucene.index.MultiFields(org.apache.lucene.index.Fields[], org.apache.lucene.index.ReaderSlice[])"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.MultiFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiFields.size()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.MultiFields.getMergedFieldInfos(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice.toString()"
        ],
        [
            "org.apache.lucene.index.MultiPostingsEnum",
            "org.apache.lucene.index.MultiPostingsEnum(org.apache.lucene.index.MultiTermsEnum, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiPostingsEnum.canReuse(org.apache.lucene.index.MultiTermsEnum)"
        ],
        [
            "org.apache.lucene.index.MultiPostingsEnum",
            "org.apache.lucene.index.MultiPostingsEnum.reset(org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[], int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.getNumSubs()"
        ],
        [
            "org.apache.lucene.index.MultiPostingsEnum$EnumWithSlice[]",
            "org.apache.lucene.index.MultiPostingsEnum.getSubs()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.docID()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiPostingsEnum.getPayload()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiPostingsEnum.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiPostingsEnum.toString()"
        ],
        [
            "org.apache.lucene.index.MultiReader",
            "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader...)"
        ],
        [
            "org.apache.lucene.index.MultiReader",
            "org.apache.lucene.index.MultiReader(org.apache.lucene.index.IndexReader[], boolean)"
        ],
        [
            "org.apache.lucene.index.MultiTerms",
            "org.apache.lucene.index.MultiTerms(org.apache.lucene.index.Terms[], org.apache.lucene.index.ReaderSlice[])"
        ],
        [
            "org.apache.lucene.index.Terms[]",
            "org.apache.lucene.index.MultiTerms.getSubTerms()"
        ],
        [
            "org.apache.lucene.index.ReaderSlice[]",
            "org.apache.lucene.index.MultiTerms.getSubSlices()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MultiTerms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiTerms.getMin()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiTerms.getMax()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MultiTerms.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTerms.size()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTerms.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTerms.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiTerms.getDocCount()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasFreqs()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTerms.hasPayloads()"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex(org.apache.lucene.index.TermsEnum, int)"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice(int, org.apache.lucene.index.ReaderSlice)"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.reset(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiTermsEnum.getMatchCount()"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum$TermsEnumWithSlice[]",
            "org.apache.lucene.index.MultiTermsEnum.getMatchArray()"
        ],
        [
            "org.apache.lucene.index.MultiTermsEnum",
            "org.apache.lucene.index.MultiTermsEnum(org.apache.lucene.index.ReaderSlice[])"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiTermsEnum.term()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.MultiTermsEnum.reset(org.apache.lucene.index.MultiTermsEnum$TermsEnumIndex[])"
        ],
        [
            "boolean",
            "org.apache.lucene.index.MultiTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.MultiTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.MultiTermsEnum.seekExact(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTermsEnum.ord()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.MultiTermsEnum.next()"
        ],
        [
            "int",
            "org.apache.lucene.index.MultiTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.MultiTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.MultiTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.MultiTermsEnum.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.NoDeletionPolicy.onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "void",
            "org.apache.lucene.index.NoDeletionPolicy.onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "org.apache.lucene.index.IndexDeletionPolicy",
            "org.apache.lucene.index.NoDeletionPolicy.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.NoDeletionPolicy.clone()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.NoMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.NoMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.NoMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.NoMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.NoMergePolicy.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.NoMergeScheduler.close()"
        ],
        [
            "void",
            "org.apache.lucene.index.NoMergeScheduler.merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)"
        ],
        [
            "org.apache.lucene.index.MergeScheduler",
            "org.apache.lucene.index.NoMergeScheduler.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.NoMergeScheduler.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.NormValuesWriter$NumericIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.NormValuesWriter$NumericIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.NormValuesWriter$NumericIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.NormValuesWriter$NumericIterator.next()"
        ],
        [
            "org.apache.lucene.index.NormValuesWriter",
            "org.apache.lucene.index.NormValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.index.NormValuesWriter.addValue(int, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.NormValuesWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.NormValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.NormsConsumer)"
        ],
        [
            "org.apache.lucene.index.NumericDocValuesFieldUpdates",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates(java.lang.String, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates.add(int, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.NumericDocValuesFieldUpdates$Iterator",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates.iterator()"
        ],
        [
            "void",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates.merge(org.apache.lucene.index.DocValuesFieldUpdates)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates.any()"
        ],
        [
            "long",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates.ramBytesPerDoc()"
        ],
        [
            "org.apache.lucene.index.DocValuesFieldUpdates$Iterator",
            "org.apache.lucene.index.NumericDocValuesFieldUpdates.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.NumericDocValuesWriter$NumericIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.NumericDocValuesWriter$NumericIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.NumericDocValuesWriter$NumericIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.NumericDocValuesWriter$NumericIterator.next()"
        ],
        [
            "org.apache.lucene.index.NumericDocValuesWriter",
            "org.apache.lucene.index.NumericDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.index.NumericDocValuesWriter.addValue(int, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.NumericDocValuesWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.NumericDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.DocValuesConsumer)"
        ],
        [
            "org.apache.lucene.index.OrdTermState",
            "org.apache.lucene.index.OrdTermState()"
        ],
        [
            "void",
            "org.apache.lucene.index.OrdTermState.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.OrdTermState.toString()"
        ],
        [
            "org.apache.lucene.index.ParallelCompositeReader",
            "org.apache.lucene.index.ParallelCompositeReader(org.apache.lucene.index.CompositeReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelCompositeReader",
            "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelCompositeReader",
            "org.apache.lucene.index.ParallelCompositeReader(boolean, org.apache.lucene.index.CompositeReader[], org.apache.lucene.index.CompositeReader[])"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.ParallelLeafReader$ParallelFields.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.ParallelLeafReader$ParallelFields.size()"
        ],
        [
            "org.apache.lucene.index.ParallelLeafReader",
            "org.apache.lucene.index.ParallelLeafReader(org.apache.lucene.index.LeafReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelLeafReader",
            "org.apache.lucene.index.ParallelLeafReader(boolean, org.apache.lucene.index.LeafReader...)"
        ],
        [
            "org.apache.lucene.index.ParallelLeafReader",
            "org.apache.lucene.index.ParallelLeafReader(boolean, org.apache.lucene.index.LeafReader[], org.apache.lucene.index.LeafReader[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ParallelLeafReader.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.ParallelLeafReader.addCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.ParallelLeafReader.removeCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.ParallelLeafReader.getFieldInfos()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.ParallelLeafReader.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.ParallelLeafReader.fields()"
        ],
        [
            "int",
            "org.apache.lucene.index.ParallelLeafReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.ParallelLeafReader.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.ParallelLeafReader.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.ParallelLeafReader.getTermVectors(int)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.ParallelLeafReader.getNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.ParallelLeafReader.getBinaryDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.ParallelLeafReader.getSortedDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.ParallelLeafReader.getSortedNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.ParallelLeafReader.getSortedSetDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.ParallelLeafReader.getDocsWithField(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.ParallelLeafReader.getNormValues(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.ParallelLeafReader.checkIntegrity()"
        ],
        [
            "org.apache.lucene.index.LeafReader[]",
            "org.apache.lucene.index.ParallelLeafReader.getParallelReaders()"
        ],
        [
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy, org.apache.lucene.store.Directory, org.apache.lucene.index.IndexWriterConfig$OpenMode)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void release(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.void release(long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.PersistentSnapshotDeletionPolicy.getLastSaveFile()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.PostingsEnum.featureRequested(int, short)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.PostingsEnum.attributes()"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms$Builder",
            "org.apache.lucene.index.PrefixCodedTerms$Builder()"
        ],
        [
            "void",
            "org.apache.lucene.index.PrefixCodedTerms$Builder.add(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms",
            "org.apache.lucene.index.PrefixCodedTerms$Builder.finish()"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator",
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator(long, org.apache.lucene.store.RAMFile)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator.term()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator.field()"
        ],
        [
            "long",
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator.delGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.PrefixCodedTerms.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.index.PrefixCodedTerms.setDelGen(long)"
        ],
        [
            "org.apache.lucene.index.PrefixCodedTerms$TermIterator",
            "org.apache.lucene.index.PrefixCodedTerms.iterator()"
        ],
        [
            "org.apache.lucene.index.QueryTimeoutImpl",
            "org.apache.lucene.index.QueryTimeoutImpl(long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.index.QueryTimeoutImpl.getTimeoutAt()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.QueryTimeoutImpl.shouldExit()"
        ],
        [
            "void",
            "org.apache.lucene.index.QueryTimeoutImpl.reset()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.QueryTimeoutImpl.toString()"
        ],
        [
            "org.apache.lucene.index.ReaderManager",
            "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.IndexWriter, boolean)"
        ],
        [
            "org.apache.lucene.index.ReaderManager",
            "org.apache.lucene.index.ReaderManager(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.ReaderManager",
            "org.apache.lucene.index.ReaderManager(org.apache.lucene.index.DirectoryReader)"
        ],
        [
            "org.apache.lucene.index.ReaderSlice",
            "org.apache.lucene.index.ReaderSlice(int, int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ReaderSlice.toString()"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.index.ReaderUtil.getTopLevelContext(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "int",
            "org.apache.lucene.index.ReaderUtil.subIndex(int, int[])"
        ],
        [
            "int",
            "org.apache.lucene.index.ReaderUtil.subIndex(int, java.util.List<org.apache.lucene.index.LeafReaderContext>)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.ReadersAndUpdates$1$1.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.ReadersAndUpdates$1$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.ReadersAndUpdates$1$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.ReadersAndUpdates$1$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.ReadersAndUpdates$2$1.hasNext()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.ReadersAndUpdates$2$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.ReadersAndUpdates$2$1.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.ReadersAndUpdates$2$1.next()"
        ],
        [
            "org.apache.lucene.index.ReadersAndUpdates",
            "org.apache.lucene.index.ReadersAndUpdates(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.ReadersAndUpdates.incRef()"
        ],
        [
            "void",
            "org.apache.lucene.index.ReadersAndUpdates.decRef()"
        ],
        [
            "int",
            "org.apache.lucene.index.ReadersAndUpdates.refCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.int getPendingDeleteCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.boolean verifyDocCounts()"
        ],
        [
            "org.apache.lucene.index.SegmentReader",
            "org.apache.lucene.index.ReadersAndUpdates.getReader(org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.void release(org.apache.lucene.index.SegmentReader)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.boolean delete(int)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.void dropReaders()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.void initWritableLiveDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.util.Bits getLiveDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.org.apache.lucene.util.Bits getReadOnlyLiveDocs()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.void dropChanges()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.boolean writeLiveDocs(org.apache.lucene.store.Directory)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.void writeFieldUpdates(org.apache.lucene.store.Directory, org.apache.lucene.index.DocValuesFieldUpdates$Container)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.ReadersAndUpdates.void dropMergingUpdates()"
        ],
        [
            "java.util.Map<java.lang.String, org.apache.lucene.index.DocValuesFieldUpdates>",
            "org.apache.lucene.index.ReadersAndUpdates.getMergingFieldUpdates()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.ReadersAndUpdates.toString()"
        ],
        [
            "org.apache.lucene.index.SegmentCommitInfo",
            "org.apache.lucene.index.SegmentCommitInfo(org.apache.lucene.index.SegmentInfo, int, long, long, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentCommitInfo.setGenUpdatesFiles(java.util.Map<java.lang.Long, java.util.Set<java.lang.String>>)"
        ],
        [
            "java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>>",
            "org.apache.lucene.index.SegmentCommitInfo.getDocValuesUpdatesFiles()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentCommitInfo.setDocValuesUpdatesFiles(java.util.Map<java.lang.Integer, java.util.Set<java.lang.String>>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentCommitInfo.setFieldInfosFiles(java.util.Set<java.lang.String>)"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.sizeInBytes()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentCommitInfo.hasDeletions()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentCommitInfo.hasFieldUpdates()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.getNextFieldInfosGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.getFieldInfosGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.getNextDocValuesGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.getDocValuesGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.getNextDelGen()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentCommitInfo.getDelGen()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentCommitInfo.getDelCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentCommitInfo.toString(org.apache.lucene.store.Directory, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentCommitInfo.toString(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentCommitInfo.toString()"
        ],
        [
            "org.apache.lucene.index.SegmentCommitInfo",
            "org.apache.lucene.index.SegmentCommitInfo.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentCommitInfo.clone()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.SegmentDocValuesProducer.getNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.SegmentDocValuesProducer.getBinary(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.SegmentDocValuesProducer.getSorted(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.SegmentDocValuesProducer.getSortedNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.SegmentDocValuesProducer.getSortedSet(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SegmentDocValuesProducer.getDocsWithField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentDocValuesProducer.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentDocValuesProducer.close()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentDocValuesProducer.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentDocValuesProducer.toString()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SegmentInfo.getDiagnostics()"
        ],
        [
            "org.apache.lucene.index.SegmentInfo",
            "org.apache.lucene.index.SegmentInfo(org.apache.lucene.store.Directory, org.apache.lucene.util.Version, java.lang.String, int, boolean, org.apache.lucene.codecs.Codec, java.util.Map<java.lang.String, java.lang.String>, byte[], java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentInfo.getUseCompoundFile()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.setCodec(org.apache.lucene.codecs.Codec)"
        ],
        [
            "org.apache.lucene.codecs.Codec",
            "org.apache.lucene.index.SegmentInfo.getCodec()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfo.maxDoc()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.toString(org.apache.lucene.store.Directory, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.toString(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SegmentInfo.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfo.hashCode()"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.index.SegmentInfo.getVersion()"
        ],
        [
            "byte[]",
            "org.apache.lucene.index.SegmentInfo.getId()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.setFiles(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.addFiles(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfo.addFile(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.getAttribute(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfo.putAttribute(java.lang.String, java.lang.String)"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SegmentInfo.getAttributes()"
        ],
        [
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile",
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile(org.apache.lucene.store.Directory)"
        ],
        [
            "T",
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run()"
        ],
        [
            "T",
            "org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.SegmentInfos()"
        ],
        [
            "org.apache.lucene.index.SegmentCommitInfo",
            "org.apache.lucene.index.SegmentInfos.info(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(java.lang.String[])"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getLastCommitGeneration(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(java.lang.String[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getLastCommitSegmentsFileName(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.getSegmentsFileName()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.generationFromSegmentsFileName(java.lang.String)"
        ],
        [
            "byte[]",
            "org.apache.lucene.index.SegmentInfos.getId()"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.SegmentInfos.readCommit(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.SegmentInfos.readLatestCommit(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.index.SegmentInfos",
            "org.apache.lucene.index.SegmentInfos.clone()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getVersion()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getGeneration()"
        ],
        [
            "long",
            "org.apache.lucene.index.SegmentInfos.getLastGeneration()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.setInfoStream(java.io.PrintStream)"
        ],
        [
            "java.io.PrintStream",
            "org.apache.lucene.index.SegmentInfos.getInfoStream()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.toString(org.apache.lucene.store.Directory)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentInfos.toString()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SegmentInfos.getUserData()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfos.totalMaxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.changed()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentInfos.size()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.add(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.addAll(java.lang.Iterable<org.apache.lucene.index.SegmentCommitInfo>)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.clear()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentInfos.remove(org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentInfos.clone()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentMerger.mergeFieldInfos()"
        ],
        [
            "org.apache.lucene.index.SegmentReadState",
            "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.SegmentReadState",
            "org.apache.lucene.index.SegmentReadState(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SegmentReadState",
            "org.apache.lucene.index.SegmentReadState(org.apache.lucene.index.SegmentReadState, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SegmentReader",
            "org.apache.lucene.index.SegmentReader(org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SegmentReader.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.SegmentReader.getFieldInfos()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentReader.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.SegmentReader.maxDoc()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.index.SegmentReader.getTermVectorsReader()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.index.SegmentReader.getFieldsReader()"
        ],
        [
            "org.apache.lucene.codecs.NormsProducer",
            "org.apache.lucene.index.SegmentReader.getNormsReader()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.index.SegmentReader.getDocValuesReader()"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.index.SegmentReader.getPostingsReader()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentReader.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SegmentReader.getSegmentName()"
        ],
        [
            "org.apache.lucene.index.SegmentCommitInfo",
            "org.apache.lucene.index.SegmentReader.getSegmentInfo()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.SegmentReader.directory()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentReader.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SegmentReader.getCombinedCoreAndDeletesKey()"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentReader.addCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.SegmentReader.removeCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.index.SegmentWriteState",
            "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.index.SegmentWriteState",
            "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.util.InfoStream, org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.index.BufferedUpdates, org.apache.lucene.store.IOContext, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SegmentWriteState",
            "org.apache.lucene.index.SegmentWriteState(org.apache.lucene.index.SegmentWriteState, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SerialMergeScheduler",
            "org.apache.lucene.index.SerialMergeScheduler()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SerialMergeScheduler.void merge(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.MergeTrigger, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.index.SerialMergeScheduler.close()"
        ],
        [
            "org.apache.lucene.index.SimpleMergedSegmentWarmer",
            "org.apache.lucene.index.SimpleMergedSegmentWarmer(org.apache.lucene.util.InfoStream)"
        ],
        [
            "void",
            "org.apache.lucene.index.SimpleMergedSegmentWarmer.warm(org.apache.lucene.index.LeafReader)"
        ],
        [
            "org.apache.lucene.index.SingleTermsEnum",
            "org.apache.lucene.index.SingleTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.SingletonSortedNumericDocValues",
            "org.apache.lucene.index.SingletonSortedNumericDocValues(org.apache.lucene.index.NumericDocValues, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.SingletonSortedNumericDocValues.getNumericDocValues()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SingletonSortedNumericDocValues.getDocsWithField()"
        ],
        [
            "void",
            "org.apache.lucene.index.SingletonSortedNumericDocValues.setDocument(int)"
        ],
        [
            "long",
            "org.apache.lucene.index.SingletonSortedNumericDocValues.valueAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SingletonSortedNumericDocValues.count()"
        ],
        [
            "org.apache.lucene.index.SingletonSortedSetDocValues",
            "org.apache.lucene.index.SingletonSortedSetDocValues(org.apache.lucene.index.SortedDocValues)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.SingletonSortedSetDocValues.getSortedDocValues()"
        ],
        [
            "long",
            "org.apache.lucene.index.SingletonSortedSetDocValues.nextOrd()"
        ],
        [
            "void",
            "org.apache.lucene.index.SingletonSortedSetDocValues.setDocument(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SingletonSortedSetDocValues.lookupOrd(long)"
        ],
        [
            "long",
            "org.apache.lucene.index.SingletonSortedSetDocValues.getValueCount()"
        ],
        [
            "long",
            "org.apache.lucene.index.SingletonSortedSetDocValues.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.index.SingletonSortedSetDocValues.ordAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SingletonSortedSetDocValues.cardinality()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.SingletonSortedSetDocValues.termsEnum()"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getTermVectorsReader()"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getFieldsReader()"
        ],
        [
            "org.apache.lucene.codecs.NormsProducer",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getNormsReader()"
        ],
        [
            "org.apache.lucene.codecs.DocValuesProducer",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getDocValuesReader()"
        ],
        [
            "org.apache.lucene.codecs.FieldsProducer",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getPostingsReader()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getFieldInfos()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.getLiveDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.addCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$1.removeCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.SlowCodecReaderWrapper$2.getNorms(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$2.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$2.close()"
        ],
        [
            "long",
            "org.apache.lucene.index.SlowCodecReaderWrapper$2.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.getNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.getBinary(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.getSorted(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.getSortedNumeric(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.getSortedSet(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.getDocsWithField(org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.close()"
        ],
        [
            "long",
            "org.apache.lucene.index.SlowCodecReaderWrapper$3.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$4.visitDocument(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.codecs.StoredFieldsReader",
            "org.apache.lucene.index.SlowCodecReaderWrapper$4.clone()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$4.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$4.close()"
        ],
        [
            "long",
            "org.apache.lucene.index.SlowCodecReaderWrapper$4.ramBytesUsed()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SlowCodecReaderWrapper$4.clone()"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SlowCodecReaderWrapper$5.get(int)"
        ],
        [
            "org.apache.lucene.codecs.TermVectorsReader",
            "org.apache.lucene.index.SlowCodecReaderWrapper$5.clone()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$5.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$5.close()"
        ],
        [
            "long",
            "org.apache.lucene.index.SlowCodecReaderWrapper$5.ramBytesUsed()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SlowCodecReaderWrapper$5.clone()"
        ],
        [
            "org.apache.lucene.index.Terms",
            "org.apache.lucene.index.SlowCodecReaderWrapper$6.terms(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCodecReaderWrapper$6.size()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$6.checkIntegrity()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCodecReaderWrapper$6.close()"
        ],
        [
            "long",
            "org.apache.lucene.index.SlowCodecReaderWrapper$6.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.index.CodecReader",
            "org.apache.lucene.index.SlowCodecReaderWrapper.wrap(org.apache.lucene.index.LeafReader)"
        ],
        [
            "org.apache.lucene.index.LeafReader",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.wrap(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.addCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.removeCoreClosedListener(org.apache.lucene.index.LeafReader$CoreClosedListener)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.fields()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getDocsWithField(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.BinaryDocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getBinaryDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getSortedNumericDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getSortedDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getSortedSetDocValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getNormValues(java.lang.String)"
        ],
        [
            "org.apache.lucene.index.Fields",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getTermVectors(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.numDocs()"
        ],
        [
            "int",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.maxDoc()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.document(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getLiveDocs()"
        ],
        [
            "org.apache.lucene.index.FieldInfos",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getFieldInfos()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getCoreCacheKey()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.getCombinedCoreAndDeletesKey()"
        ],
        [
            "void",
            "org.apache.lucene.index.SlowCompositeReaderWrapper.checkIntegrity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.toString()"
        ],
        [
            "void",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.delete()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getDirectory()"
        ],
        [
            "long",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getGeneration()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentsFileName()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getUserData()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.isDeleted()"
        ],
        [
            "int",
            "org.apache.lucene.index.SnapshotDeletionPolicy$SnapshotCommitPoint.getSegmentCount()"
        ],
        [
            "org.apache.lucene.index.SnapshotDeletionPolicy",
            "org.apache.lucene.index.SnapshotDeletionPolicy(org.apache.lucene.index.IndexDeletionPolicy)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.void onCommit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.void onInit(java.util.List<? extends org.apache.lucene.index.IndexCommit>)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.void release(org.apache.lucene.index.IndexCommit)"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit snapshot()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.int getSnapshotCount()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.SnapshotDeletionPolicy.org.apache.lucene.index.IndexCommit getIndexCommit(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedDocValues.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedDocValues.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.SortedDocValues.termsEnum()"
        ],
        [
            "org.apache.lucene.index.SortedDocValuesTermsEnum",
            "org.apache.lucene.index.SortedDocValuesTermsEnum(org.apache.lucene.index.SortedDocValues)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.SortedDocValuesTermsEnum.termState()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedDocValuesWriter$OrdsIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.SortedDocValuesWriter$OrdsIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesWriter$OrdsIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedDocValuesWriter$OrdsIterator.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedDocValuesWriter$ValuesIterator.hasNext()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedDocValuesWriter$ValuesIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesWriter$ValuesIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedDocValuesWriter$ValuesIterator.next()"
        ],
        [
            "org.apache.lucene.index.SortedDocValuesWriter",
            "org.apache.lucene.index.SortedDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesWriter.addValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.DocValuesConsumer)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$CountIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$CountIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$CountIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$CountIterator.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$ValuesIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$ValuesIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$ValuesIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedNumericDocValuesWriter$ValuesIterator.next()"
        ],
        [
            "org.apache.lucene.index.SortedNumericDocValuesWriter",
            "org.apache.lucene.index.SortedNumericDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedNumericDocValuesWriter.addValue(int, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedNumericDocValuesWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedNumericDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.DocValuesConsumer)"
        ],
        [
            "long",
            "org.apache.lucene.index.SortedSetDocValues.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.SortedSetDocValues.termsEnum()"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum(org.apache.lucene.index.SortedSetDocValues)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.next()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.term()"
        ],
        [
            "long",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.ord()"
        ],
        [
            "int",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.SortedSetDocValuesTermsEnum.termState()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdCountIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdCountIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdCountIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdCountIterator.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdsIterator.hasNext()"
        ],
        [
            "java.lang.Number",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdsIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdsIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedSetDocValuesWriter$OrdsIterator.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.SortedSetDocValuesWriter$ValuesIterator.hasNext()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.SortedSetDocValuesWriter$ValuesIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesWriter$ValuesIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.SortedSetDocValuesWriter$ValuesIterator.next()"
        ],
        [
            "org.apache.lucene.index.SortedSetDocValuesWriter",
            "org.apache.lucene.index.SortedSetDocValuesWriter(org.apache.lucene.index.FieldInfo, org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesWriter.addValue(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesWriter.finish(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.SortedSetDocValuesWriter.flush(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.DocValuesConsumer)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentCount()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getSegmentsFileName()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getDirectory()"
        ],
        [
            "long",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getGeneration()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.isDeleted()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.getUserData()"
        ],
        [
            "void",
            "org.apache.lucene.index.StandardDirectoryReader$ReaderCommit.delete()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.StandardDirectoryReader.toString()"
        ],
        [
            "long",
            "org.apache.lucene.index.StandardDirectoryReader.getVersion()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.StandardDirectoryReader.isCurrent()"
        ],
        [
            "org.apache.lucene.index.IndexCommit",
            "org.apache.lucene.index.StandardDirectoryReader.getIndexCommit()"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status[]",
            "org.apache.lucene.index.StoredFieldVisitor$Status.values()"
        ],
        [
            "org.apache.lucene.index.StoredFieldVisitor$Status",
            "org.apache.lucene.index.StoredFieldVisitor$Status.valueOf(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.binaryField(org.apache.lucene.index.FieldInfo, byte[])"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.stringField(org.apache.lucene.index.FieldInfo, java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.intField(org.apache.lucene.index.FieldInfo, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.longField(org.apache.lucene.index.FieldInfo, long)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.floatField(org.apache.lucene.index.FieldInfo, float)"
        ],
        [
            "void",
            "org.apache.lucene.index.StoredFieldVisitor.doubleField(org.apache.lucene.index.FieldInfo, double)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.Term(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.Term(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.index.Term(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.field()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.text()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.toString(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.Term.bytes()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.Term.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.index.Term.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.index.Term.compareTo(org.apache.lucene.index.Term)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.Term.toString()"
        ],
        [
            "int",
            "org.apache.lucene.index.Term.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.TermContext",
            "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "org.apache.lucene.index.TermContext",
            "org.apache.lucene.index.TermContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.TermState, int, int, long)"
        ],
        [
            "org.apache.lucene.index.TermContext",
            "org.apache.lucene.index.TermContext.build(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermContext.clear()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermContext.register(org.apache.lucene.index.TermState, int, int, long)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermContext.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TermContext.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.TermContext.totalTermFreq()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermContext.setDocFreq(int)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermState.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TermState.toString()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.TermState.clone()"
        ],
        [
            "org.apache.lucene.index.TermVectorsConsumer",
            "org.apache.lucene.index.TermVectorsConsumer(org.apache.lucene.index.DocumentsWriterPerThread)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermVectorsConsumer.abort()"
        ],
        [
            "org.apache.lucene.index.TermsHashPerField",
            "org.apache.lucene.index.TermVectorsConsumer.addField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray",
            "org.apache.lucene.index.TermVectorsConsumerPerField$TermVectorsPostingsArray(int)"
        ],
        [
            "org.apache.lucene.index.TermVectorsConsumerPerField",
            "org.apache.lucene.index.TermVectorsConsumerPerField(org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermVectorsConsumer, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermVectorsConsumerPerField.newPostingsArray()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.index.Terms.intersect(org.apache.lucene.util.automaton.CompiledAutomaton, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.Terms.getMin()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.Terms.getMax()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.index.Terms.getStats()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum$1.copyFrom(org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.TermsEnum$2.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum$2.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.TermsEnum$2.term()"
        ],
        [
            "int",
            "org.apache.lucene.index.TermsEnum$2.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.TermsEnum$2.totalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.index.TermsEnum$2.ord()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.TermsEnum$2.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.index.TermsEnum$2.next()"
        ],
        [
            "synchronized",
            "org.apache.lucene.index.TermsEnum$2.org.apache.lucene.util.AttributeSource attributes()"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermsEnum$2.termState()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum$2.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus[]",
            "org.apache.lucene.index.TermsEnum$SeekStatus.values()"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.index.TermsEnum$SeekStatus.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.index.TermsEnum.attributes()"
        ],
        [
            "boolean",
            "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.index.TermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.index.TermsEnum.termState()"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.TermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum)"
        ],
        [
            "org.apache.lucene.index.DocsEnum",
            "org.apache.lucene.index.TermsEnum.docs(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsEnum, int)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.TermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum)"
        ],
        [
            "org.apache.lucene.index.DocsAndPositionsEnum",
            "org.apache.lucene.index.TermsEnum.docsAndPositions(org.apache.lucene.util.Bits, org.apache.lucene.index.DocsAndPositionsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHash.abort()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.init()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.clear()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.index.TermsHashPerField$PostingsBytesStartArray.bytesUsed()"
        ],
        [
            "org.apache.lucene.index.TermsHashPerField",
            "org.apache.lucene.index.TermsHashPerField(int, org.apache.lucene.index.FieldInvertState, org.apache.lucene.index.TermsHash, org.apache.lucene.index.TermsHashPerField, org.apache.lucene.index.FieldInfo)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.initReader(org.apache.lucene.index.ByteSliceReader, int, int)"
        ],
        [
            "int[]",
            "org.apache.lucene.index.TermsHashPerField.sortPostings()"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.add(int)"
        ],
        [
            "void",
            "org.apache.lucene.index.TermsHashPerField.writeBytes(int, byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TermsHashPerField.compareTo(org.apache.lucene.index.TermsHashPerField)"
        ],
        [
            "int",
            "org.apache.lucene.index.TermsHashPerField.compareTo(java.lang.Object)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy$1.getScore()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TieredMergePolicy$1.getExplanation()"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.SegmentCommitInfo)"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy$SegmentByteSizeDescending.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnce(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnce()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxMergeAtOnceExplicit(int)"
        ],
        [
            "int",
            "org.apache.lucene.index.TieredMergePolicy.getMaxMergeAtOnceExplicit()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setMaxMergedSegmentMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getMaxMergedSegmentMB()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setReclaimDeletesWeight(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getReclaimDeletesWeight()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setFloorSegmentMB(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getFloorSegmentMB()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setForceMergeDeletesPctAllowed(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getForceMergeDeletesPctAllowed()"
        ],
        [
            "org.apache.lucene.index.TieredMergePolicy",
            "org.apache.lucene.index.TieredMergePolicy.setSegmentsPerTier(double)"
        ],
        [
            "double",
            "org.apache.lucene.index.TieredMergePolicy.getSegmentsPerTier()"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.TieredMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.TieredMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.TieredMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.TieredMergePolicy.toString()"
        ],
        [
            "org.apache.lucene.index.TrackingIndexWriter",
            "org.apache.lucene.index.TrackingIndexWriter(org.apache.lucene.index.IndexWriter)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.updateDocument(org.apache.lucene.index.Term, java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.updateDocuments(org.apache.lucene.index.Term, java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.deleteDocuments(org.apache.lucene.index.Term)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.deleteDocuments(org.apache.lucene.index.Term...)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.deleteDocuments(org.apache.lucene.search.Query)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.deleteDocuments(org.apache.lucene.search.Query...)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.deleteAll()"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.addDocument(java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.addDocuments(java.lang.Iterable<? extends java.lang.Iterable<? extends org.apache.lucene.index.IndexableField>>)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.addIndexes(org.apache.lucene.store.Directory...)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.addIndexes(org.apache.lucene.index.CodecReader...)"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.getGeneration()"
        ],
        [
            "org.apache.lucene.index.IndexWriter",
            "org.apache.lucene.index.TrackingIndexWriter.getIndexWriter()"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.getAndIncrementGeneration()"
        ],
        [
            "long",
            "org.apache.lucene.index.TrackingIndexWriter.tryDeleteDocument(org.apache.lucene.index.IndexReader, int)"
        ],
        [
            "org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException",
            "org.apache.lucene.index.TwoPhaseCommitTool$CommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"
        ],
        [
            "org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException",
            "org.apache.lucene.index.TwoPhaseCommitTool$PrepareCommitFailException(java.lang.Throwable, org.apache.lucene.index.TwoPhaseCommit)"
        ],
        [
            "void",
            "org.apache.lucene.index.TwoPhaseCommitTool.execute(org.apache.lucene.index.TwoPhaseCommit...)"
        ],
        [
            "org.apache.lucene.index.UpgradeIndexMergePolicy",
            "org.apache.lucene.index.UpgradeIndexMergePolicy(org.apache.lucene.index.MergePolicy)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.findMerges(org.apache.lucene.index.MergeTrigger, org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map<org.apache.lucene.index.SegmentCommitInfo, java.lang.Boolean>, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "org.apache.lucene.index.MergePolicy$MergeSpecification",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "boolean",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentCommitInfo, org.apache.lucene.index.IndexWriter)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.index.UpgradeIndexMergePolicy.toString()"
        ],
        [
            "org.apache.lucene.search.AutomatonQuery",
            "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.search.AutomatonQuery",
            "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.search.AutomatonQuery",
            "org.apache.lucene.search.AutomatonQuery(org.apache.lucene.index.Term, org.apache.lucene.util.automaton.Automaton, int, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.AutomatonQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.AutomatonQuery.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.AutomatonQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.search.AutomatonQuery.getAutomaton()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.BitsFilteredDocIdSet.wrap(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.BitsFilteredDocIdSet",
            "org.apache.lucene.search.BitsFilteredDocIdSet(org.apache.lucene.search.DocIdSet, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$1.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$2.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$3.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause$Occur$4.toString()"
        ],
        [
            "org.apache.lucene.search.BooleanClause$Occur[]",
            "org.apache.lucene.search.BooleanClause$Occur.values()"
        ],
        [
            "org.apache.lucene.search.BooleanClause$Occur",
            "org.apache.lucene.search.BooleanClause$Occur.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.BooleanClause",
            "org.apache.lucene.search.BooleanClause(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "org.apache.lucene.search.BooleanClause$Occur",
            "org.apache.lucene.search.BooleanClause.getOccur()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanClause.setOccur(org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanClause.getQuery()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanClause.setQuery(org.apache.lucene.search.Query)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.isProhibited()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.isRequired()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.isScoring()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanClause.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanClause.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanClause.toString()"
        ],
        [
            "org.apache.lucene.search.BooleanQuery$TooManyClauses",
            "org.apache.lucene.search.BooleanQuery$TooManyClauses()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanQuery.getMaxClauseCount()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.setMaxClauseCount(int)"
        ],
        [
            "org.apache.lucene.search.BooleanQuery",
            "org.apache.lucene.search.BooleanQuery()"
        ],
        [
            "org.apache.lucene.search.BooleanQuery",
            "org.apache.lucene.search.BooleanQuery(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanQuery.isCoordDisabled()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.setMinimumNumberShouldMatch(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanQuery.getMinimumNumberShouldMatch()"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.Query, org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.add(org.apache.lucene.search.BooleanClause)"
        ],
        [
            "org.apache.lucene.search.BooleanClause[]",
            "org.apache.lucene.search.BooleanQuery.getClauses()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.BooleanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.BooleanQuery",
            "org.apache.lucene.search.BooleanQuery.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.BooleanQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.BooleanQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.BooleanQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.BooleanQuery.clone()"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$HeadPriorityQueue",
            "org.apache.lucene.search.BooleanScorer$HeadPriorityQueue(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer$OrCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanScorer$OrCollector.collect(int)"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$TailPriorityQueue",
            "org.apache.lucene.search.BooleanScorer$TailPriorityQueue(int)"
        ],
        [
            "org.apache.lucene.search.BooleanScorer$BulkScorerAndDoc",
            "org.apache.lucene.search.BooleanScorer$TailPriorityQueue.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.BooleanScorer.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.BooleanScorer.score(org.apache.lucene.search.LeafCollector, int, int)"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanTopLevelScorers$BoostedScorer.score()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanTopLevelScorers$CoordinatingConjunctionScorer.score()"
        ],
        [
            "org.apache.lucene.search.BooleanTopLevelScorers$ReqMultiOptScorer",
            "org.apache.lucene.search.BooleanTopLevelScorers$ReqMultiOptScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer, int, float[])"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanTopLevelScorers$ReqMultiOptScorer.score()"
        ],
        [
            "org.apache.lucene.search.BooleanTopLevelScorers$ReqSingleOptScorer",
            "org.apache.lucene.search.BooleanTopLevelScorers$ReqSingleOptScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanTopLevelScorers$ReqSingleOptScorer.score()"
        ],
        [
            "org.apache.lucene.search.BooleanWeight",
            "org.apache.lucene.search.BooleanWeight(org.apache.lucene.search.BooleanQuery, org.apache.lucene.search.IndexSearcher, boolean, boolean)"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanWeight.getValueForNormalization()"
        ],
        [
            "float",
            "org.apache.lucene.search.BooleanWeight.coord(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.BooleanWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.BooleanWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.BooleanWeight.bulkScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.BooleanWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.BoostAttributeImpl",
            "org.apache.lucene.search.BoostAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.search.BoostAttributeImpl.setBoost(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.BoostAttributeImpl.getBoost()"
        ],
        [
            "void",
            "org.apache.lucene.search.BoostAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.search.BoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.BulkScorer()"
        ],
        [
            "void",
            "org.apache.lucene.search.BulkScorer.score(org.apache.lucene.search.LeafCollector)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$1.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingCollector$1.needsScores()"
        ],
        [
            "float",
            "org.apache.lucene.search.CachingCollector$CachedScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingCollector$CachedScorer.nextDoc()"
        ],
        [
            "long",
            "org.apache.lucene.search.CachingCollector$CachedScorer.cost()"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingCollector.replay(org.apache.lucene.search.Collector)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$NoScoreCachingLeafCollector.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingCollector$ScoreCachingLeafCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.CachingCollector",
            "org.apache.lucene.search.CachingCollector.create(boolean, double)"
        ],
        [
            "org.apache.lucene.search.CachingCollector",
            "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, double)"
        ],
        [
            "org.apache.lucene.search.CachingCollector",
            "org.apache.lucene.search.CachingCollector.create(org.apache.lucene.search.Collector, boolean, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingCollector.isCached()"
        ],
        [
            "org.apache.lucene.search.CachingWrapperFilter",
            "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter, org.apache.lucene.search.FilterCachingPolicy)"
        ],
        [
            "org.apache.lucene.search.CachingWrapperFilter",
            "org.apache.lucene.search.CachingWrapperFilter(org.apache.lucene.search.Filter)"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.CachingWrapperFilter.getFilter()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.CachingWrapperFilter.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CachingWrapperFilter.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperFilter.hashCode()"
        ],
        [
            "long",
            "org.apache.lucene.search.CachingWrapperFilter.ramBytesUsed()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingWrapperQuery$1$1.matches()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.asTwoPhaseIterator()"
        ],
        [
            "float",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.CachingWrapperQuery$1$2.cost()"
        ],
        [
            "org.apache.lucene.search.CachingWrapperQuery",
            "org.apache.lucene.search.CachingWrapperQuery(org.apache.lucene.search.Query, org.apache.lucene.search.QueryCachingPolicy)"
        ],
        [
            "org.apache.lucene.search.CachingWrapperQuery",
            "org.apache.lucene.search.CachingWrapperQuery(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.CachingWrapperQuery",
            "org.apache.lucene.search.CachingWrapperQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.CachingWrapperQuery.getQuery()"
        ],
        [
            "float",
            "org.apache.lucene.search.CachingWrapperQuery.getBoost()"
        ],
        [
            "void",
            "org.apache.lucene.search.CachingWrapperQuery.setBoost(float)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.CachingWrapperQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.CachingWrapperQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CachingWrapperQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.CachingWrapperQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.CachingWrapperQuery.hashCode()"
        ],
        [
            "long",
            "org.apache.lucene.search.CachingWrapperQuery.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.CachingWrapperQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.CachingWrapperQuery.clone()"
        ],
        [
            "org.apache.lucene.search.CollectionStatistics",
            "org.apache.lucene.search.CollectionStatistics(java.lang.String, long, long, long, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.CollectionStatistics.field()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.maxDoc()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.docCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.sumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.CollectionStatistics.sumDocFreq()"
        ],
        [
            "org.apache.lucene.search.CollectionTerminatedException",
            "org.apache.lucene.search.CollectionTerminatedException()"
        ],
        [
            "org.apache.lucene.search.ComplexExplanation",
            "org.apache.lucene.search.ComplexExplanation()"
        ],
        [
            "org.apache.lucene.search.ComplexExplanation",
            "org.apache.lucene.search.ComplexExplanation(boolean, float, java.lang.String)"
        ],
        [
            "java.lang.Boolean",
            "org.apache.lucene.search.ComplexExplanation.getMatch()"
        ],
        [
            "void",
            "org.apache.lucene.search.ComplexExplanation.setMatch(java.lang.Boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ComplexExplanation.isMatch()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionDISI$1.compare(org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionDISI$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.ConjunctionDISI$TwoPhaseConjunctionDISI",
            "org.apache.lucene.search.ConjunctionDISI$TwoPhase.asTwoPhaseIterator()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.ConjunctionDISI$TwoPhase.asTwoPhaseIterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConjunctionDISI$TwoPhaseConjunctionDISI.matches()"
        ],
        [
            "org.apache.lucene.search.ConjunctionDISI",
            "org.apache.lucene.search.ConjunctionDISI.intersect(java.util.List<? extends org.apache.lucene.search.DocIdSetIterator>)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionDISI.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionDISI.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionDISI.nextDoc()"
        ],
        [
            "long",
            "org.apache.lucene.search.ConjunctionDISI.cost()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.ConjunctionScorer.asTwoPhaseIterator()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConjunctionScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConjunctionScorer.freq()"
        ],
        [
            "long",
            "org.apache.lucene.search.ConjunctionScorer.cost()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer$1.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.BulkScorer, org.apache.lucene.search.Weight, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer.score(org.apache.lucene.search.LeafCollector, int, int)"
        ],
        [
            "long",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantBulkScorer.cost()"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.DocIdSetIterator, org.apache.lucene.search.Weight, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantDocIdSetIteratorScorer.cost()"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScoreScorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScoreScorer(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.Scorer, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScoreScorer.freq()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantScoreScorer.score()"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight(org.apache.lucene.search.ConstantScoreQuery, org.apache.lucene.search.Weight)"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.bulkScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.ConstantScoreQuery",
            "org.apache.lucene.search.ConstantScoreQuery(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ConstantScoreQuery.getQuery()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ConstantScoreQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.ConstantScoreQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.ConstantScoreQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ConstantScoreQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.ConstantScoreQuery.hashCode()"
        ],
        [
            "float",
            "org.apache.lucene.search.ConstantScoreWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.ConstantScoreWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.ConstantScoreWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.ConstantScoreWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "void",
            "org.apache.lucene.search.ControlledRealTimeReopenThread$HandleRefresh.beforeRefresh()"
        ],
        [
            "void",
            "org.apache.lucene.search.ControlledRealTimeReopenThread$HandleRefresh.afterRefresh(boolean)"
        ],
        [
            "org.apache.lucene.search.ControlledRealTimeReopenThread",
            "org.apache.lucene.search.ControlledRealTimeReopenThread(org.apache.lucene.index.TrackingIndexWriter, org.apache.lucene.search.ReferenceManager<T>, double, double)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.ControlledRealTimeReopenThread.void close()"
        ],
        [
            "void",
            "org.apache.lucene.search.ControlledRealTimeReopenThread.waitForGeneration(long)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.ControlledRealTimeReopenThread.boolean waitForGeneration(long, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.ControlledRealTimeReopenThread.run()"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight(org.apache.lucene.search.DisjunctionMaxQuery, org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.DisjunctionMaxQuery$DisjunctionMaxWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery",
            "org.apache.lucene.search.DisjunctionMaxQuery(float)"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery",
            "org.apache.lucene.search.DisjunctionMaxQuery(java.util.Collection<org.apache.lucene.search.Query>, float)"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery.add(org.apache.lucene.search.Query)"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery.add(java.util.Collection<org.apache.lucene.search.Query>)"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionMaxQuery.getTieBreakerMultiplier()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.DisjunctionMaxQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DisjunctionMaxQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.DisjunctionMaxQuery",
            "org.apache.lucene.search.DisjunctionMaxQuery.clone()"
        ],
        [
            "void",
            "org.apache.lucene.search.DisjunctionMaxQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DisjunctionMaxQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DisjunctionMaxQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionMaxQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DisjunctionMaxQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.DisjunctionMaxQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DisjunctionScorer$1.matches()"
        ],
        [
            "long",
            "org.apache.lucene.search.DisjunctionScorer$DisjunctionDISIApproximation.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer$DisjunctionDISIApproximation.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer$DisjunctionDISIApproximation.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer$DisjunctionDISIApproximation.advance(int)"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.DisjunctionScorer.asTwoPhaseIterator()"
        ],
        [
            "long",
            "org.apache.lucene.search.DisjunctionScorer.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DisjunctionScorer.freq()"
        ],
        [
            "float",
            "org.apache.lucene.search.DisjunctionScorer.score()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocIdSet$1.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocIdSet$1.isCacheable()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.DocIdSet$1.bits()"
        ],
        [
            "long",
            "org.apache.lucene.search.DocIdSet$1.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocIdSet()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.DocIdSet.bits()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocIdSet.isCacheable()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSetIterator$1.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSetIterator$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSetIterator$1.nextDoc()"
        ],
        [
            "long",
            "org.apache.lucene.search.DocIdSetIterator$1.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSetIterator$2.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSetIterator$2.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocIdSetIterator$2.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocIdSetIterator$2.cost()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocIdSetIterator()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocIdSetIterator.empty()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocIdSetIterator.all(int)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocTermOrdsRangeFilter$1.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocTermOrdsRangeFilter",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.newBytesRefRange(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.getField()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.includesUpper()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.getLowerVal()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.DocTermOrdsRangeFilter.getUpperVal()"
        ],
        [
            "org.apache.lucene.search.DocTermOrdsRewriteMethod",
            "org.apache.lucene.search.DocTermOrdsRewriteMethod()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DocTermOrdsRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocTermOrdsRewriteMethod.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocTermOrdsRewriteMethod.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesDocIdSet$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$1.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesDocIdSet$2.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$2.length()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$3.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$3.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$3.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesDocIdSet$3.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$5.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$5.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesDocIdSet$5.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesDocIdSet$5.cost()"
        ],
        [
            "org.apache.lucene.search.DocValuesDocIdSet",
            "org.apache.lucene.search.DocValuesDocIdSet(int, org.apache.lucene.util.Bits)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesDocIdSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.DocValuesDocIdSet.bits()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.DocValuesDocIdSet.iterator()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesRangeFilter$1.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesRangeFilter$2.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesRangeFilter$3.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesRangeFilter$4.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesRangeFilter$5.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesRangeFilter$6.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesRangeFilter.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRangeFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRangeFilter.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesRangeFilter.getField()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRangeFilter.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRangeFilter.includesUpper()"
        ],
        [
            "T",
            "org.apache.lucene.search.DocValuesRangeFilter.getLowerVal()"
        ],
        [
            "T",
            "org.apache.lucene.search.DocValuesRangeFilter.getUpperVal()"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.DocValuesRangeQuery$1.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, float)"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.asTwoPhaseIterator()"
        ],
        [
            "float",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesRangeQuery$RangeScorer.cost()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRangeQuery$TwoPhaseNumericRange.matches()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRangeQuery$TwoPhaseOrdRange.matches()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DocValuesRangeQuery.newLongRange(java.lang.String, java.lang.Long, java.lang.Long, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DocValuesRangeQuery.newBytesRefRange(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRangeQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRangeQuery.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesRangeQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DocValuesRangeQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.DocValuesRangeQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.getSumTotalTermFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.getSumDocFreq()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.getDocCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.size()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasFreqs()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasOffsets()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasPositions()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$1.hasPayloads()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$2.matches()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.asTwoPhaseIterator()"
        ],
        [
            "float",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper$1$3.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.getField()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.DocValuesRewriteMethod$MultiTermQueryDocValuesWrapper.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.DocValuesRewriteMethod",
            "org.apache.lucene.search.DocValuesRewriteMethod()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.DocValuesRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesRewriteMethod.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesRewriteMethod.hashCode()"
        ],
        [
            "org.apache.lucene.search.DocValuesTermsFilter",
            "org.apache.lucene.search.DocValuesTermsFilter(java.lang.String, org.apache.lucene.util.BytesRef...)"
        ],
        [
            "org.apache.lucene.search.DocValuesTermsFilter",
            "org.apache.lucene.search.DocValuesTermsFilter(java.lang.String, java.lang.String...)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.DocValuesTermsFilter.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesTermsFilter.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.DocValuesTermsQuery$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesTermsQuery$1.size()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.DocValuesTermsQuery$1.get(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesTermsQuery$2$1.matches()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.asTwoPhaseIterator()"
        ],
        [
            "float",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.DocValuesTermsQuery$2$2.cost()"
        ],
        [
            "org.apache.lucene.search.DocValuesTermsQuery",
            "org.apache.lucene.search.DocValuesTermsQuery(java.lang.String, java.util.Collection<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.search.DocValuesTermsQuery",
            "org.apache.lucene.search.DocValuesTermsQuery(java.lang.String, org.apache.lucene.util.BytesRef...)"
        ],
        [
            "org.apache.lucene.search.DocValuesTermsQuery",
            "org.apache.lucene.search.DocValuesTermsQuery(java.lang.String, java.lang.String...)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.DocValuesTermsQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.DocValuesTermsQuery.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.DocValuesTermsQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.DocValuesTermsQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ExactPhraseScorer$1.matches()"
        ],
        [
            "org.apache.lucene.search.ExactPhraseScorer$PostingsAndPosition",
            "org.apache.lucene.search.ExactPhraseScorer$PostingsAndPosition(org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.ExactPhraseScorer.asTwoPhaseIterator()"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.advance(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.ExactPhraseScorer.toString()"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.ExactPhraseScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ExactPhraseScorer.score()"
        ],
        [
            "long",
            "org.apache.lucene.search.ExactPhraseScorer.cost()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.Explanation()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.Explanation(float, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Explanation.isMatch()"
        ],
        [
            "float",
            "org.apache.lucene.search.Explanation.getValue()"
        ],
        [
            "void",
            "org.apache.lucene.search.Explanation.setValue(float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Explanation.getDescription()"
        ],
        [
            "void",
            "org.apache.lucene.search.Explanation.setDescription(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Explanation[]",
            "org.apache.lucene.search.Explanation.getDetails()"
        ],
        [
            "void",
            "org.apache.lucene.search.Explanation.addDetail(org.apache.lucene.search.Explanation)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Explanation.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Explanation.toHtml()"
        ],
        [
            "org.apache.lucene.search.FakeScorer",
            "org.apache.lucene.search.FakeScorer()"
        ],
        [
            "int",
            "org.apache.lucene.search.FakeScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FakeScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.FakeScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.FakeScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.FakeScorer.score()"
        ],
        [
            "long",
            "org.apache.lucene.search.FakeScorer.cost()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.FakeScorer.getWeight()"
        ],
        [
            "org.apache.lucene.search.FieldComparator$DocComparator",
            "org.apache.lucene.search.FieldComparator$DocComparator(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.LeafFieldComparator",
            "org.apache.lucene.search.FieldComparator$DocComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.setTopValue(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.apache.lucene.search.FieldComparator$DocComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DocComparator.compareTop(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$DocComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DocComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$DoubleComparator",
            "org.apache.lucene.search.FieldComparator$DoubleComparator(int, java.lang.String, java.lang.Double)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.setTopValue(java.lang.Double)"
        ],
        [
            "java.lang.Double",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.compareTop(int)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$DoubleComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$FloatComparator",
            "org.apache.lucene.search.FieldComparator$FloatComparator(int, java.lang.String, java.lang.Float)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatComparator.setTopValue(java.lang.Float)"
        ],
        [
            "java.lang.Float",
            "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$FloatComparator.compareTop(int)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$FloatComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$FloatComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$IntComparator",
            "org.apache.lucene.search.FieldComparator$IntComparator(int, java.lang.String, java.lang.Integer)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntComparator.setTopValue(java.lang.Integer)"
        ],
        [
            "java.lang.Integer",
            "org.apache.lucene.search.FieldComparator$IntComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$IntComparator.compareTop(int)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$IntComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$IntComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$LongComparator",
            "org.apache.lucene.search.FieldComparator$LongComparator(int, java.lang.String, java.lang.Long)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$LongComparator.copy(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$LongComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$LongComparator.setTopValue(java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.search.FieldComparator$LongComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$LongComparator.compareTop(int)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$LongComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$LongComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$NumericComparator",
            "org.apache.lucene.search.FieldComparator$NumericComparator(java.lang.String, T)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$RelevanceComparator",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.LeafFieldComparator",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.setTopValue(java.lang.Float)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "java.lang.Float",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Float, java.lang.Float)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareTop(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$RelevanceComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator(int, java.lang.String, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.LeafFieldComparator",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setTopValue(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareTop(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermOrdValComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator$TermValComparator",
            "org.apache.lucene.search.FieldComparator$TermValComparator(int, java.lang.String, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compare(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.copy(int, int)"
        ],
        [
            "org.apache.lucene.search.LeafFieldComparator",
            "org.apache.lucene.search.FieldComparator$TermValComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.setBottom(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.setTopValue(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareTop(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator$TermValComparator.compareValues(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.FieldComparator$TermValComparator.value(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FieldComparator$TermValComparator.setTopValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.FieldComparator",
            "org.apache.lucene.search.FieldComparator()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldComparator.compareValues(T, T)"
        ],
        [
            "org.apache.lucene.search.FieldComparatorSource",
            "org.apache.lucene.search.FieldComparatorSource()"
        ],
        [
            "org.apache.lucene.search.FieldDoc",
            "org.apache.lucene.search.FieldDoc(int, float)"
        ],
        [
            "org.apache.lucene.search.FieldDoc",
            "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[])"
        ],
        [
            "org.apache.lucene.search.FieldDoc",
            "org.apache.lucene.search.FieldDoc(int, float, java.lang.Object[], int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldDoc.toString()"
        ],
        [
            "org.apache.lucene.search.FieldValueFilter",
            "org.apache.lucene.search.FieldValueFilter(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.FieldValueFilter",
            "org.apache.lucene.search.FieldValueFilter(java.lang.String, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueFilter.field()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldValueFilter.negate()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FieldValueFilter.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueFilter.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldValueFilter.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueFilter.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.FieldValueHitQueue$Entry",
            "org.apache.lucene.search.FieldValueHitQueue$Entry(int, int, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueHitQueue$Entry.toString()"
        ],
        [
            "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue",
            "org.apache.lucene.search.FieldValueHitQueue$MultiComparatorsFieldValueHitQueue(org.apache.lucene.search.SortField[], int)"
        ],
        [
            "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue",
            "org.apache.lucene.search.FieldValueHitQueue$OneComparatorFieldValueHitQueue(org.apache.lucene.search.SortField[], int)"
        ],
        [
            "<T extends org.apache.lucene.search.FieldValueHitQueue$Entry> org.apache.lucene.search.FieldValueHitQueue<T>",
            "org.apache.lucene.search.FieldValueHitQueue.create(org.apache.lucene.search.SortField[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.FieldValueHitQueue.getReverseMul()"
        ],
        [
            "org.apache.lucene.search.LeafFieldComparator[]",
            "org.apache.lucene.search.FieldValueHitQueue.getComparators(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldValueQuery$1$1.matches()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.FieldValueQuery$1$2.asTwoPhaseIterator()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueQuery$1$2.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueQuery$1$2.docID()"
        ],
        [
            "long",
            "org.apache.lucene.search.FieldValueQuery$1$2.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueQuery$1$2.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueQuery$1$2.freq()"
        ],
        [
            "float",
            "org.apache.lucene.search.FieldValueQuery$1$2.score()"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.FieldValueQuery$1.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, float)"
        ],
        [
            "org.apache.lucene.search.FieldValueQuery",
            "org.apache.lucene.search.FieldValueQuery(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FieldValueQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FieldValueQuery.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FieldValueQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.FieldValueQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "float",
            "org.apache.lucene.search.Filter$1$1.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.Filter$1$1.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.Filter$1$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.Filter$1$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.Filter$1$1.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.Filter$1$1.cost()"
        ],
        [
            "float",
            "org.apache.lucene.search.Filter$1.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.Filter$1.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.Filter$1.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.Filter$1.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.Filter()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Filter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.Filter.hashCode()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.Filter.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.FilterCachingPolicy$1.onUse(org.apache.lucene.search.Filter)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilterCachingPolicy$1.shouldCache(org.apache.lucene.search.Filter, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.FilterCachingPolicy$CacheOnLargeSegments",
            "org.apache.lucene.search.FilterCachingPolicy$CacheOnLargeSegments(float)"
        ],
        [
            "void",
            "org.apache.lucene.search.FilterCachingPolicy$CacheOnLargeSegments.onUse(org.apache.lucene.search.Filter)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilterCachingPolicy$CacheOnLargeSegments.shouldCache(org.apache.lucene.search.Filter, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.FilterCollector",
            "org.apache.lucene.search.FilterCollector(org.apache.lucene.search.Collector)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.FilterCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FilterCollector.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilterCollector.needsScores()"
        ],
        [
            "org.apache.lucene.search.FilterLeafCollector",
            "org.apache.lucene.search.FilterLeafCollector(org.apache.lucene.search.LeafCollector)"
        ],
        [
            "void",
            "org.apache.lucene.search.FilterLeafCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.FilterLeafCollector.collect(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FilterLeafCollector.toString()"
        ],
        [
            "org.apache.lucene.search.FilterScorer",
            "org.apache.lucene.search.FilterScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.FilterScorer",
            "org.apache.lucene.search.FilterScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Weight)"
        ],
        [
            "float",
            "org.apache.lucene.search.FilterScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilterScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilterScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilterScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilterScorer.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.FilterScorer.cost()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.FilterScorer.asTwoPhaseIterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredDocIdSet$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSet$1.length()"
        ],
        [
            "org.apache.lucene.search.FilteredDocIdSet",
            "org.apache.lucene.search.FilteredDocIdSet(org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.FilteredDocIdSet.getDelegate()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredDocIdSet.isCacheable()"
        ],
        [
            "long",
            "org.apache.lucene.search.FilteredDocIdSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.search.FilteredDocIdSet.bits()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.FilteredDocIdSet.iterator()"
        ],
        [
            "org.apache.lucene.search.FilteredDocIdSetIterator",
            "org.apache.lucene.search.FilteredDocIdSetIterator(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.FilteredDocIdSetIterator.getDelegate()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSetIterator.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSetIterator.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredDocIdSetIterator.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.FilteredDocIdSetIterator.cost()"
        ],
        [
            "float",
            "org.apache.lucene.search.FilteredQuery$1.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.FilteredQuery$1.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.FilteredQuery$1.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.FilteredQuery$1.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.FilteredQuery$1.bulkScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.FilteredQuery$FilterStrategy",
            "org.apache.lucene.search.FilteredQuery$FilterStrategy()"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.FilteredQuery$FilterStrategy.filteredBulkScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.Weight, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.FilteredQuery$LeapFrogFilterStrategy.filteredScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.Weight, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.docID()"
        ],
        [
            "long",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.cost()"
        ],
        [
            "float",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.freq()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.FilteredQuery$LeapFrogScorer.asTwoPhaseIterator()"
        ],
        [
            "org.apache.lucene.search.FilteredQuery$QueryFirstBulkScorer",
            "org.apache.lucene.search.FilteredQuery$QueryFirstBulkScorer(org.apache.lucene.search.Scorer, org.apache.lucene.util.Bits)"
        ],
        [
            "long",
            "org.apache.lucene.search.FilteredQuery$QueryFirstBulkScorer.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$QueryFirstBulkScorer.score(org.apache.lucene.search.LeafCollector, int, int)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.FilteredQuery$QueryFirstFilterStrategy.filteredScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.Weight, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.FilteredQuery$QueryFirstFilterStrategy.filteredBulkScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.Weight, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer$1.matches()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer$2.matches()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.freq()"
        ],
        [
            "long",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.cost()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.FilteredQuery$QueryFirstScorer.asTwoPhaseIterator()"
        ],
        [
            "org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy",
            "org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy()"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.FilteredQuery$RandomAccessFilterStrategy.filteredScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.Weight, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.FilteredQuery",
            "org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter)"
        ],
        [
            "org.apache.lucene.search.FilteredQuery",
            "org.apache.lucene.search.FilteredQuery(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.FilteredQuery$FilterStrategy)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.FilteredQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.FilteredQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.FilteredQuery.getQuery()"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.FilteredQuery.getFilter()"
        ],
        [
            "org.apache.lucene.search.FilteredQuery$FilterStrategy",
            "org.apache.lucene.search.FilteredQuery.getFilterStrategy()"
        ],
        [
            "void",
            "org.apache.lucene.search.FilteredQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FilteredQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FilteredQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FilteredQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int, int, boolean)"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int, int)"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.search.FuzzyQuery",
            "org.apache.lucene.search.FuzzyQuery(org.apache.lucene.index.Term)"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.getMaxEdits()"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.getPrefixLength()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyQuery.getTranspositions()"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.FuzzyQuery.getTerm()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.FuzzyQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyQuery.floatToEdits(float, int)"
        ],
        [
            "org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum$AutomatonFuzzyTermsEnum(org.apache.lucene.search.FuzzyTermsEnum, org.apache.lucene.index.TermsEnum, org.apache.lucene.util.automaton.CompiledAutomaton[])"
        ],
        [
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.clear()"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.equals(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "org.apache.lucene.search.FuzzyTermsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum(org.apache.lucene.index.Terms, org.apache.lucene.util.AttributeSource, org.apache.lucene.index.Term, float, int, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FuzzyTermsEnum.next()"
        ],
        [
            "int",
            "org.apache.lucene.search.FuzzyTermsEnum.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.FuzzyTermsEnum.totalTermFreq()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.search.FuzzyTermsEnum.postings(org.apache.lucene.util.Bits, org.apache.lucene.index.PostingsEnum, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef, org.apache.lucene.index.TermState)"
        ],
        [
            "org.apache.lucene.index.TermState",
            "org.apache.lucene.search.FuzzyTermsEnum.termState()"
        ],
        [
            "long",
            "org.apache.lucene.search.FuzzyTermsEnum.ord()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.FuzzyTermsEnum.seekExact(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.search.FuzzyTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.search.FuzzyTermsEnum.seekExact(long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.FuzzyTermsEnum.term()"
        ],
        [
            "float",
            "org.apache.lucene.search.FuzzyTermsEnum.getMinSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.FuzzyTermsEnum.getScaleFactor()"
        ],
        [
            "org.apache.lucene.search.TotalHitCountCollector",
            "org.apache.lucene.search.IndexSearcher$1.newCollector()"
        ],
        [
            "java.lang.Integer",
            "org.apache.lucene.search.IndexSearcher$1.reduce(java.util.Collection<org.apache.lucene.search.TotalHitCountCollector>)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.IndexSearcher$1.reduce(java.util.Collection)"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.IndexSearcher$1.newCollector()"
        ],
        [
            "org.apache.lucene.search.TopScoreDocCollector",
            "org.apache.lucene.search.IndexSearcher$2.newCollector()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher$2.reduce(java.util.Collection<org.apache.lucene.search.TopScoreDocCollector>)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.IndexSearcher$2.reduce(java.util.Collection)"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.IndexSearcher$2.newCollector()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector",
            "org.apache.lucene.search.IndexSearcher$3.newCollector()"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher$3.reduce(java.util.Collection<org.apache.lucene.search.TopFieldCollector>)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.IndexSearcher$3.reduce(java.util.Collection)"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.IndexSearcher$3.newCollector()"
        ],
        [
            "C",
            "org.apache.lucene.search.IndexSearcher$4.call()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.IndexSearcher$4.call()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher$LeafSlice",
            "org.apache.lucene.search.IndexSearcher$LeafSlice(org.apache.lucene.index.LeafReaderContext...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.search.IndexSearcher.getDefaultSimilarity()"
        ],
        [
            "org.apache.lucene.search.QueryCache",
            "org.apache.lucene.search.IndexSearcher.getDefaultQueryCache()"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.setDefaultQueryCache(org.apache.lucene.search.QueryCache)"
        ],
        [
            "org.apache.lucene.search.QueryCachingPolicy",
            "org.apache.lucene.search.IndexSearcher.getDefaultQueryCachingPolicy()"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.setDefaultQueryCachingPolicy(org.apache.lucene.search.QueryCachingPolicy)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReader, java.util.concurrent.ExecutorService)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext, java.util.concurrent.ExecutorService)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.IndexSearcher(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.setQueryCache(org.apache.lucene.search.QueryCache)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.setQueryCachingPolicy(org.apache.lucene.search.QueryCachingPolicy)"
        ],
        [
            "org.apache.lucene.index.IndexReader",
            "org.apache.lucene.search.IndexSearcher.getIndexReader()"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.search.IndexSearcher.doc(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.doc(int, org.apache.lucene.index.StoredFieldVisitor)"
        ],
        [
            "org.apache.lucene.document.Document",
            "org.apache.lucene.search.IndexSearcher.doc(int, java.util.Set<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.setSimilarity(org.apache.lucene.search.similarities.Similarity)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.search.IndexSearcher.getSimilarity()"
        ],
        [
            "int",
            "org.apache.lucene.search.IndexSearcher.count(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, org.apache.lucene.search.Collector)"
        ],
        [
            "void",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Collector)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, org.apache.lucene.search.Filter, int, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.IndexSearcher.searchAfter(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.Query, int, org.apache.lucene.search.Sort, boolean, boolean)"
        ],
        [
            "<C extends org.apache.lucene.search.Collector, T> T",
            "org.apache.lucene.search.IndexSearcher.search(org.apache.lucene.search.Query, org.apache.lucene.search.CollectorManager<C, T>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.IndexSearcher.rewrite(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.IndexSearcher.explain(org.apache.lucene.search.Query, int)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.IndexSearcher.createNormalizedWeight(org.apache.lucene.search.Query, boolean)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.IndexSearcher.createWeight(org.apache.lucene.search.Query, boolean)"
        ],
        [
            "org.apache.lucene.index.IndexReaderContext",
            "org.apache.lucene.search.IndexSearcher.getTopReaderContext()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.IndexSearcher.toString()"
        ],
        [
            "org.apache.lucene.search.TermStatistics",
            "org.apache.lucene.search.IndexSearcher.termStatistics(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"
        ],
        [
            "org.apache.lucene.search.CollectionStatistics",
            "org.apache.lucene.search.IndexSearcher.collectionStatistics(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.search.LRUFilterCache$1.onClose(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.LRUFilterCache$CachingWrapperFilter.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.LRUFilterCache$CachingWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.LRUFilterCache$CachingWrapperFilter.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.LRUFilterCache$CachingWrapperFilter.toString(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache$LeafCache.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.LRUFilterCache",
            "org.apache.lucene.search.LRUFilterCache(int, long)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.LRUFilterCache.void clearCoreCacheKey(java.lang.Object)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.LRUFilterCache.void clearFilter(org.apache.lucene.search.Filter)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.LRUFilterCache.void clear()"
        ],
        [
            "org.apache.lucene.search.Filter",
            "org.apache.lucene.search.LRUFilterCache.doCache(org.apache.lucene.search.Filter, org.apache.lucene.search.FilterCachingPolicy)"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.getTotalCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.getHitCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.getMissCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.getCacheSize()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.getCacheCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUFilterCache.getEvictionCount()"
        ],
        [
            "void",
            "org.apache.lucene.search.LRUQueryCache$1.onClose(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$1.matches()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.asTwoPhaseIterator()"
        ],
        [
            "float",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$2.cost()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache$LeafCache.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.LRUQueryCache",
            "org.apache.lucene.search.LRUQueryCache(int, long)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.LRUQueryCache.void clearCoreCacheKey(java.lang.Object)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.LRUQueryCache.void clearQuery(org.apache.lucene.search.Query)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.LRUQueryCache.void clear()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.LRUQueryCache.doCache(org.apache.lucene.search.Weight, org.apache.lucene.search.QueryCachingPolicy)"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.getTotalCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.getHitCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.getMissCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.getCacheSize()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.getCacheCount()"
        ],
        [
            "long",
            "org.apache.lucene.search.LRUQueryCache.getEvictionCount()"
        ],
        [
            "org.apache.lucene.search.LiveFieldValues",
            "org.apache.lucene.search.LiveFieldValues(org.apache.lucene.search.ReferenceManager<S>, T)"
        ],
        [
            "void",
            "org.apache.lucene.search.LiveFieldValues.close()"
        ],
        [
            "void",
            "org.apache.lucene.search.LiveFieldValues.beforeRefresh()"
        ],
        [
            "void",
            "org.apache.lucene.search.LiveFieldValues.afterRefresh(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.LiveFieldValues.add(java.lang.String, T)"
        ],
        [
            "void",
            "org.apache.lucene.search.LiveFieldValues.delete(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.LiveFieldValues.size()"
        ],
        [
            "T",
            "org.apache.lucene.search.LiveFieldValues.get(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight(org.apache.lucene.search.MatchAllDocsQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllDocsWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.MatchAllDocsQuery$MatchAllScorer.cost()"
        ],
        [
            "org.apache.lucene.search.MatchAllDocsQuery",
            "org.apache.lucene.search.MatchAllDocsQuery()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.MatchAllDocsQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.MatchAllDocsQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MatchAllDocsQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.MatchNoDocsQuery",
            "org.apache.lucene.search.MatchNoDocsQuery()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MatchNoDocsQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MatchNoDocsQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setMaxNonCompetitiveBoost(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getMaxNonCompetitiveBoost()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.setCompetitiveTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.getCompetitiveTerm()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.clear()"
        ],
        [
            "void",
            "org.apache.lucene.search.MaxNonCompetitiveBoostAttributeImpl.copyTo(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "long",
            "org.apache.lucene.search.MinShouldMatchSumScorer.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.MinShouldMatchSumScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.MinShouldMatchSumScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.MinShouldMatchSumScorer.freq()"
        ],
        [
            "float",
            "org.apache.lucene.search.MinShouldMatchSumScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.MinShouldMatchSumScorer.docID()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiCollector$MultiLeafCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiCollector$MultiLeafCollector.collect(int)"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.MultiCollector.wrap(org.apache.lucene.search.Collector...)"
        ],
        [
            "org.apache.lucene.search.Collector",
            "org.apache.lucene.search.MultiCollector.wrap(java.lang.Iterable<? extends org.apache.lucene.search.Collector>)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiCollector.needsScores()"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.MultiCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight(org.apache.lucene.search.MultiPhraseQuery, org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "float",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.MultiPhraseQuery$MultiPhraseWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.MultiPhraseQuery",
            "org.apache.lucene.search.MultiPhraseQuery()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.setSlop(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiPhraseQuery.getSlop()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[])"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.add(org.apache.lucene.index.Term[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.MultiPhraseQuery.getPositions()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiPhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.MultiPhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiPhraseQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiPhraseQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiPhraseQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiTermQuery$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$RewriteMethod",
            "org.apache.lucene.search.MultiTermQuery$RewriteMethod()"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite",
            "org.apache.lucene.search.MultiTermQuery$TopTermsBoostOnlyBooleanQueryRewrite(int)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite",
            "org.apache.lucene.search.MultiTermQuery$TopTermsScoringBooleanQueryRewrite(int)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery",
            "org.apache.lucene.search.MultiTermQuery(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQuery.getField()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.MultiTermQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.MultiTermQuery$RewriteMethod",
            "org.apache.lucene.search.MultiTermQuery.getRewriteMethod()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQuery.setRewriteMethod(org.apache.lucene.search.MultiTermQuery$RewriteMethod)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiTermQuery.equals(java.lang.Object)"
        ],
        [
            "float",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1$1.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1$1.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1$1.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper$1$1.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.getField()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.MultiTermQueryConstantScoreWrapper.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.getField()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.NGramPhraseQuery",
            "org.apache.lucene.search.NGramPhraseQuery(int)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.NGramPhraseQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NGramPhraseQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.NGramPhraseQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeFilter.includesMin()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeFilter.includesMax()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeFilter.getMin()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeFilter.getMax()"
        ],
        [
            "int",
            "org.apache.lucene.search.NumericRangeFilter.getPrecisionStep()"
        ],
        [
            "void",
            "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum$1.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.search.NumericRangeQuery$NumericRangeTermsEnum$2.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeQuery.includesMin()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeQuery.includesMax()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeQuery.getMin()"
        ],
        [
            "T",
            "org.apache.lucene.search.NumericRangeQuery.getMax()"
        ],
        [
            "int",
            "org.apache.lucene.search.NumericRangeQuery.getPrecisionStep()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.NumericRangeQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.NumericRangeQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.NumericRangeQuery.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhrasePositions.toString()"
        ],
        [
            "org.apache.lucene.search.PhraseQuery$PhraseWeight",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight(org.apache.lucene.search.PhraseQuery, org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.PhraseQuery$PhraseWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq(org.apache.lucene.index.PostingsEnum, int, int, org.apache.lucene.index.Term...)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(org.apache.lucene.search.PhraseQuery$PostingsAndFreq)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery$PostingsAndFreq.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.PhraseQuery",
            "org.apache.lucene.search.PhraseQuery()"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.setSlop(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery.getSlop()"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term)"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.add(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.index.Term[]",
            "org.apache.lucene.search.PhraseQuery.getTerms()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.PhraseQuery.getPositions()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.PhraseQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.PhraseQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.PhraseQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PhraseQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PhraseQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.PhraseQuery.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.search.PositiveScoresOnlyCollector$1.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.PositiveScoresOnlyCollector$1.collect(int)"
        ],
        [
            "org.apache.lucene.search.PositiveScoresOnlyCollector",
            "org.apache.lucene.search.PositiveScoresOnlyCollector(org.apache.lucene.search.Collector)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.PositiveScoresOnlyCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.PrefixFilter",
            "org.apache.lucene.search.PrefixFilter(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.PrefixFilter.getPrefix()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PrefixFilter.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.PrefixQuery",
            "org.apache.lucene.search.PrefixQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.search.PrefixQuery.toAutomaton(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.PrefixQuery.getPrefix()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.PrefixQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.PrefixQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.PrefixQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Query()"
        ],
        [
            "void",
            "org.apache.lucene.search.Query.setBoost(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.Query.getBoost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Query.toString()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.Query.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Query.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "void",
            "org.apache.lucene.search.Query.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Query.clone()"
        ],
        [
            "int",
            "org.apache.lucene.search.Query.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Query.equals(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.Query.clone()"
        ],
        [
            "void",
            "org.apache.lucene.search.QueryCachingPolicy$1.onUse(org.apache.lucene.search.Query)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.QueryCachingPolicy$1.shouldCache(org.apache.lucene.search.Query, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.QueryCachingPolicy$CacheOnLargeSegments",
            "org.apache.lucene.search.QueryCachingPolicy$CacheOnLargeSegments(float)"
        ],
        [
            "void",
            "org.apache.lucene.search.QueryCachingPolicy$CacheOnLargeSegments.onUse(org.apache.lucene.search.Query)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.QueryCachingPolicy$CacheOnLargeSegments.shouldCache(org.apache.lucene.search.Query, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "int",
            "org.apache.lucene.search.QueryRescorer$1.compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)"
        ],
        [
            "int",
            "org.apache.lucene.search.QueryRescorer$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.QueryRescorer$2.compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)"
        ],
        [
            "int",
            "org.apache.lucene.search.QueryRescorer$2.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.QueryRescorer",
            "org.apache.lucene.search.QueryRescorer(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.QueryRescorer.rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.QueryRescorer.explain(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.Explanation, int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.QueryRescorer.rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, org.apache.lucene.search.Query, double, int)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.QueryWrapperFilter$1.iterator()"
        ],
        [
            "long",
            "org.apache.lucene.search.QueryWrapperFilter$1.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.QueryWrapperFilter",
            "org.apache.lucene.search.QueryWrapperFilter(org.apache.lucene.search.Query)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.QueryWrapperFilter.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.QueryWrapperFilter.getQuery()"
        ],
        [
            "org.apache.lucene.search.DocIdSet",
            "org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.QueryWrapperFilter.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.QueryWrapperFilter.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.QueryWrapperFilter.hashCode()"
        ],
        [
            "org.apache.lucene.search.ReferenceManager",
            "org.apache.lucene.search.ReferenceManager()"
        ],
        [
            "G",
            "org.apache.lucene.search.ReferenceManager.acquire()"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.ReferenceManager.void close()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ReferenceManager.maybeRefresh()"
        ],
        [
            "void",
            "org.apache.lucene.search.ReferenceManager.maybeRefreshBlocking()"
        ],
        [
            "void",
            "org.apache.lucene.search.ReferenceManager.release(G)"
        ],
        [
            "void",
            "org.apache.lucene.search.ReferenceManager.addListener(org.apache.lucene.search.ReferenceManager$RefreshListener)"
        ],
        [
            "void",
            "org.apache.lucene.search.ReferenceManager.removeListener(org.apache.lucene.search.ReferenceManager$RefreshListener)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.search.RegexpQuery$1.getAutomaton(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, int)"
        ],
        [
            "org.apache.lucene.search.RegexpQuery",
            "org.apache.lucene.search.RegexpQuery(org.apache.lucene.index.Term, int, org.apache.lucene.util.automaton.AutomatonProvider, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.RegexpQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ReqExclScorer$1.matches()"
        ],
        [
            "org.apache.lucene.search.ReqExclScorer",
            "org.apache.lucene.search.ReqExclScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.freq()"
        ],
        [
            "long",
            "org.apache.lucene.search.ReqExclScorer.cost()"
        ],
        [
            "float",
            "org.apache.lucene.search.ReqExclScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqExclScorer.advance(int)"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.ReqExclScorer.asTwoPhaseIterator()"
        ],
        [
            "org.apache.lucene.search.ReqOptSumScorer",
            "org.apache.lucene.search.ReqOptSumScorer(org.apache.lucene.search.Scorer, org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.ReqOptSumScorer.asTwoPhaseIterator()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.ReqOptSumScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.ReqOptSumScorer.freq()"
        ],
        [
            "long",
            "org.apache.lucene.search.ReqOptSumScorer.cost()"
        ],
        [
            "org.apache.lucene.search.Rescorer",
            "org.apache.lucene.search.Rescorer()"
        ],
        [
            "org.apache.lucene.search.ScoreCachingWrappingScorer",
            "org.apache.lucene.search.ScoreCachingWrappingScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "float",
            "org.apache.lucene.search.ScoreCachingWrappingScorer.score()"
        ],
        [
            "org.apache.lucene.search.ScoreDoc",
            "org.apache.lucene.search.ScoreDoc(int, float)"
        ],
        [
            "org.apache.lucene.search.ScoreDoc",
            "org.apache.lucene.search.ScoreDoc(int, float, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.ScoreDoc.toString()"
        ],
        [
            "org.apache.lucene.search.Scorer$ChildScorer",
            "org.apache.lucene.search.Scorer$ChildScorer(org.apache.lucene.search.Scorer, java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.Scorer.getWeight()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.Scorer.asTwoPhaseIterator()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.ScoringRewrite$2.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "void",
            "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.setNextEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.ScoringRewrite$ParallelArraysTermCollector.collect(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart(int)"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.init()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.search.ScoringRewrite$TermFreqBoostByteStart.clear()"
        ],
        [
            "org.apache.lucene.search.ScoringRewrite",
            "org.apache.lucene.search.ScoringRewrite()"
        ],
        [
            "Q",
            "org.apache.lucene.search.ScoringRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.SearcherFactory",
            "org.apache.lucene.search.SearcherFactory()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.SearcherFactory.newSearcher(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge",
            "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge(double)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SearcherLifetimeManager$PruneByAge.doPrune(double, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "int",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.void close()"
        ],
        [
            "int",
            "org.apache.lucene.search.SearcherLifetimeManager$SearcherTracker.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.SearcherLifetimeManager",
            "org.apache.lucene.search.SearcherLifetimeManager()"
        ],
        [
            "long",
            "org.apache.lucene.search.SearcherLifetimeManager.record(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.SearcherLifetimeManager.acquire(long)"
        ],
        [
            "void",
            "org.apache.lucene.search.SearcherLifetimeManager.release(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.SearcherLifetimeManager.void prune(org.apache.lucene.search.SearcherLifetimeManager$Pruner)"
        ],
        [
            "synchronized",
            "org.apache.lucene.search.SearcherLifetimeManager.void close()"
        ],
        [
            "org.apache.lucene.search.SearcherManager",
            "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.IndexWriter, boolean, org.apache.lucene.search.SearcherFactory)"
        ],
        [
            "org.apache.lucene.search.SearcherManager",
            "org.apache.lucene.search.SearcherManager(org.apache.lucene.store.Directory, org.apache.lucene.search.SearcherFactory)"
        ],
        [
            "org.apache.lucene.search.SearcherManager",
            "org.apache.lucene.search.SearcherManager(org.apache.lucene.index.DirectoryReader, org.apache.lucene.search.SearcherFactory)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SearcherManager.isSearcherCurrent()"
        ],
        [
            "org.apache.lucene.search.IndexSearcher",
            "org.apache.lucene.search.SearcherManager.getSearcher(org.apache.lucene.search.SearcherFactory, org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.SimpleCollector",
            "org.apache.lucene.search.SimpleCollector()"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.SimpleCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.SimpleCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "org.apache.lucene.search.SimpleFieldComparator",
            "org.apache.lucene.search.SimpleFieldComparator()"
        ],
        [
            "org.apache.lucene.search.LeafFieldComparator",
            "org.apache.lucene.search.SimpleFieldComparator.getLeafComparator(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.SimpleFieldComparator.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer$1.compare(org.apache.lucene.search.PhrasePositions, org.apache.lucene.search.PhrasePositions)"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SloppyPhraseScorer$2.matches()"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.SloppyPhraseScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.SloppyPhraseScorer.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.SloppyPhraseScorer.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SloppyPhraseScorer.toString()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseIterator",
            "org.apache.lucene.search.SloppyPhraseScorer.asTwoPhaseIterator()"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort()"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField)"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort(org.apache.lucene.search.SortField...)"
        ],
        [
            "void",
            "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField)"
        ],
        [
            "void",
            "org.apache.lucene.search.Sort.setSort(org.apache.lucene.search.SortField...)"
        ],
        [
            "org.apache.lucene.search.SortField[]",
            "org.apache.lucene.search.Sort.getSort()"
        ],
        [
            "org.apache.lucene.search.Sort",
            "org.apache.lucene.search.Sort.rewrite(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.Sort.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Sort.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.Sort.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.Sort.needsScores()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortField$1.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortField$2.toString()"
        ],
        [
            "org.apache.lucene.search.SortField$Type[]",
            "org.apache.lucene.search.SortField$Type.values()"
        ],
        [
            "org.apache.lucene.search.SortField$Type",
            "org.apache.lucene.search.SortField$Type.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.SortField.setMissingValue(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField(java.lang.String, org.apache.lucene.search.FieldComparatorSource, boolean)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortField.getField()"
        ],
        [
            "org.apache.lucene.search.SortField$Type",
            "org.apache.lucene.search.SortField.getType()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortField.getReverse()"
        ],
        [
            "org.apache.lucene.search.FieldComparatorSource",
            "org.apache.lucene.search.SortField.getComparatorSource()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortField.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortField.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortField.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.search.SortField.setBytesComparator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.search.SortField",
            "org.apache.lucene.search.SortField.rewrite(org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortField.needsScores()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortRescorer$1.compare(org.apache.lucene.search.ScoreDoc, org.apache.lucene.search.ScoreDoc)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortRescorer$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.SortRescorer",
            "org.apache.lucene.search.SortRescorer(org.apache.lucene.search.Sort)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.SortRescorer.rescore(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.TopDocs, int)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.SortRescorer.explain(org.apache.lucene.search.IndexSearcher, org.apache.lucene.search.Explanation, int)"
        ],
        [
            "long",
            "org.apache.lucene.search.SortedNumericSelector$1.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.SortedNumericSelector$2.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.SortedNumericSelector$MaxValue.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.SortedNumericSelector$MinValue.get(int)"
        ],
        [
            "org.apache.lucene.search.SortedNumericSelector$Type[]",
            "org.apache.lucene.search.SortedNumericSelector$Type.values()"
        ],
        [
            "org.apache.lucene.search.SortedNumericSelector$Type",
            "org.apache.lucene.search.SortedNumericSelector$Type.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.SortedNumericSelector",
            "org.apache.lucene.search.SortedNumericSelector()"
        ],
        [
            "org.apache.lucene.index.NumericDocValues",
            "org.apache.lucene.search.SortedNumericSelector.wrap(org.apache.lucene.index.SortedNumericDocValues, org.apache.lucene.search.SortedNumericSelector$Type, org.apache.lucene.search.SortField$Type)"
        ],
        [
            "org.apache.lucene.search.SortedNumericSortField",
            "org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type)"
        ],
        [
            "org.apache.lucene.search.SortedNumericSortField",
            "org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean)"
        ],
        [
            "org.apache.lucene.search.SortedNumericSortField",
            "org.apache.lucene.search.SortedNumericSortField(java.lang.String, org.apache.lucene.search.SortField$Type, boolean, org.apache.lucene.search.SortedNumericSelector$Type)"
        ],
        [
            "org.apache.lucene.search.SortedNumericSelector$Type",
            "org.apache.lucene.search.SortedNumericSortField.getSelector()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedNumericSortField.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortedNumericSortField.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortedNumericSortField.toString()"
        ],
        [
            "void",
            "org.apache.lucene.search.SortedNumericSortField.setMissingValue(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MaxValue.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.SortedSetSelector$MaxValue.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MaxValue.getValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MaxValue.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.getValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MiddleMaxValue.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.getValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MiddleMinValue.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MinValue.getOrd(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.SortedSetSelector$MinValue.lookupOrd(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MinValue.getValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSelector$MinValue.lookupTerm(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.SortedSetSelector$Type[]",
            "org.apache.lucene.search.SortedSetSelector$Type.values()"
        ],
        [
            "org.apache.lucene.search.SortedSetSelector$Type",
            "org.apache.lucene.search.SortedSetSelector$Type.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.SortedSetSelector",
            "org.apache.lucene.search.SortedSetSelector()"
        ],
        [
            "org.apache.lucene.index.SortedDocValues",
            "org.apache.lucene.search.SortedSetSelector.wrap(org.apache.lucene.index.SortedSetDocValues, org.apache.lucene.search.SortedSetSelector$Type)"
        ],
        [
            "org.apache.lucene.search.SortedSetSortField",
            "org.apache.lucene.search.SortedSetSortField(java.lang.String, boolean)"
        ],
        [
            "org.apache.lucene.search.SortedSetSortField",
            "org.apache.lucene.search.SortedSetSortField(java.lang.String, boolean, org.apache.lucene.search.SortedSetSelector$Type)"
        ],
        [
            "org.apache.lucene.search.SortedSetSelector$Type",
            "org.apache.lucene.search.SortedSetSortField.getSelector()"
        ],
        [
            "int",
            "org.apache.lucene.search.SortedSetSortField.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.SortedSetSortField.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.SortedSetSortField.toString()"
        ],
        [
            "void",
            "org.apache.lucene.search.SortedSetSortField.setMissingValue(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.search.TermCollectingRewrite$TermCollector.setReaderContext(org.apache.lucene.index.IndexReaderContext, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.TermQuery$TermWeight",
            "org.apache.lucene.search.TermQuery$TermWeight(org.apache.lucene.search.TermQuery, org.apache.lucene.search.IndexSearcher, boolean, org.apache.lucene.index.TermContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermQuery$TermWeight.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.TermQuery$TermWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.TermQuery$TermWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.TermQuery$TermWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.TermQuery$TermWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.TermQuery",
            "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.search.TermQuery",
            "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.search.TermQuery",
            "org.apache.lucene.search.TermQuery(org.apache.lucene.index.Term, org.apache.lucene.index.TermContext)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.TermQuery.getTerm()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.TermQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.search.TermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.TermQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter.Less(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.TermRangeFilter",
            "org.apache.lucene.search.TermRangeFilter.More(java.lang.String, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeFilter.getLowerTerm()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeFilter.getUpperTerm()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeFilter.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeFilter.includesUpper()"
        ],
        [
            "org.apache.lucene.search.TermRangeQuery",
            "org.apache.lucene.search.TermRangeQuery(java.lang.String, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TermRangeQuery",
            "org.apache.lucene.search.TermRangeQuery.newStringRange(java.lang.String, java.lang.String, java.lang.String, boolean, boolean)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeQuery.getLowerTerm()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermRangeQuery.getUpperTerm()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeQuery.includesLower()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeQuery.includesUpper()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermRangeQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.TermRangeQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TermRangeQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TermRangeTermsEnum",
            "org.apache.lucene.search.TermRangeTermsEnum(org.apache.lucene.index.TermsEnum, org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef, boolean, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.nextDoc()"
        ],
        [
            "float",
            "org.apache.lucene.search.TermScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.TermScorer.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.TermScorer.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TermScorer.toString()"
        ],
        [
            "org.apache.lucene.search.TermStatistics",
            "org.apache.lucene.search.TermStatistics(org.apache.lucene.util.BytesRef, long, long)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.TermStatistics.term()"
        ],
        [
            "long",
            "org.apache.lucene.search.TermStatistics.docFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.TermStatistics.totalTermFreq()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$1.collect(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeAllowed()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getTimeElapsed()"
        ],
        [
            "int",
            "org.apache.lucene.search.TimeLimitingCollector$TimeExceededException.getLastDocCollected()"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread(long, org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread(org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.run()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getMilliseconds()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.stopTimer()"
        ],
        [
            "long",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.getResolution()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread.setResolution(long)"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector",
            "org.apache.lucene.search.TimeLimitingCollector(org.apache.lucene.search.Collector, org.apache.lucene.util.Counter, long)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setBaseline(long)"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setBaseline()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TimeLimitingCollector.isGreedy()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setGreedy(boolean)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TimeLimitingCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TimeLimitingCollector.needsScores()"
        ],
        [
            "void",
            "org.apache.lucene.search.TimeLimitingCollector.setCollector(org.apache.lucene.search.Collector)"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.search.TimeLimitingCollector.getGlobalCounter()"
        ],
        [
            "org.apache.lucene.search.TimeLimitingCollector$TimerThread",
            "org.apache.lucene.search.TimeLimitingCollector.getGlobalTimerThread()"
        ],
        [
            "org.apache.lucene.search.TopDocs$MergeSortQueue",
            "org.apache.lucene.search.TopDocs$MergeSortQueue(org.apache.lucene.search.Sort, org.apache.lucene.search.TopDocs[])"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$MergeSortQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue",
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue(org.apache.lucene.search.TopDocs[])"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopDocs$ScoreMergeSortQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopDocs$ShardRef",
            "org.apache.lucene.search.TopDocs$ShardRef(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.TopDocs$ShardRef.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.TopDocs.getMaxScore()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopDocs.setMaxScore(float)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocs(int, org.apache.lucene.search.ScoreDoc[], float)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocs.merge(int, org.apache.lucene.search.TopDocs[])"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocs.merge(int, int, org.apache.lucene.search.TopDocs[])"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.TopDocs.merge(org.apache.lucene.search.Sort, int, org.apache.lucene.search.TopFieldDocs[])"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.TopDocs.merge(org.apache.lucene.search.Sort, int, int, org.apache.lucene.search.TopFieldDocs[])"
        ],
        [
            "int",
            "org.apache.lucene.search.TopDocsCollector.getTotalHits()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocsCollector.topDocs()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocsCollector.topDocs(int)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopDocsCollector.topDocs(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$MultiComparatorLeafCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$NonScoringCollector$1.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$NonScoringCollector$2.collect(int)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$NonScoringCollector",
            "org.apache.lucene.search.TopFieldCollector$NonScoringCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TopFieldCollector$NonScoringCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopFieldCollector$NonScoringCollector.topDocs()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$OneComparatorLeafCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector$1.collect(int)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, org.apache.lucene.search.FieldDoc, int, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopFieldCollector$PagingFieldCollector.topDocs()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$ScoringMaxScoreCollector$1.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$ScoringMaxScoreCollector$2.collect(int)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$ScoringMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$ScoringMaxScoreCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TopFieldCollector$ScoringMaxScoreCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopFieldCollector$ScoringMaxScoreCollector.topDocs()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$ScoringNoMaxScoreCollector$1.collect(int)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopFieldCollector$ScoringNoMaxScoreCollector$2.collect(int)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector$ScoringNoMaxScoreCollector",
            "org.apache.lucene.search.TopFieldCollector$ScoringNoMaxScoreCollector(org.apache.lucene.search.Sort, org.apache.lucene.search.FieldValueHitQueue<org.apache.lucene.search.FieldValueHitQueue$Entry>, int, boolean)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TopFieldCollector$ScoringNoMaxScoreCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopFieldCollector$ScoringNoMaxScoreCollector.topDocs()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopFieldCollector.needsScores()"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector",
            "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldCollector",
            "org.apache.lucene.search.TopFieldCollector.create(org.apache.lucene.search.Sort, int, org.apache.lucene.search.FieldDoc, boolean, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.TopFieldCollector.topDocs()"
        ],
        [
            "org.apache.lucene.search.TopDocs",
            "org.apache.lucene.search.TopFieldCollector.topDocs()"
        ],
        [
            "org.apache.lucene.search.TopFieldDocs",
            "org.apache.lucene.search.TopFieldDocs(int, org.apache.lucene.search.ScoreDoc[], org.apache.lucene.search.SortField[], float)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$PagingTopScoreDocCollector$1.collect(int)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TopScoreDocCollector$PagingTopScoreDocCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$ScorerLeafCollector.setScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "void",
            "org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector$1.collect(int)"
        ],
        [
            "org.apache.lucene.search.LeafCollector",
            "org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector.getLeafCollector(org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.TopScoreDocCollector",
            "org.apache.lucene.search.TopScoreDocCollector.create(int)"
        ],
        [
            "org.apache.lucene.search.TopScoreDocCollector",
            "org.apache.lucene.search.TopScoreDocCollector.create(int, org.apache.lucene.search.ScoreDoc)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopScoreDocCollector.needsScores()"
        ],
        [
            "void",
            "org.apache.lucene.search.TopTermsRewrite$1.setNextEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopTermsRewrite$1.collect(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$2.compare(org.apache.lucene.search.TopTermsRewrite$ScoreTerm, org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$2.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm",
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm(org.apache.lucene.index.TermContext)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(org.apache.lucene.search.TopTermsRewrite$ScoreTerm)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite$ScoreTerm.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TopTermsRewrite",
            "org.apache.lucene.search.TopTermsRewrite(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite.getSize()"
        ],
        [
            "Q",
            "org.apache.lucene.search.TopTermsRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "int",
            "org.apache.lucene.search.TopTermsRewrite.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TopTermsRewrite.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.TotalHitCountCollector",
            "org.apache.lucene.search.TotalHitCountCollector()"
        ],
        [
            "int",
            "org.apache.lucene.search.TotalHitCountCollector.getTotalHits()"
        ],
        [
            "void",
            "org.apache.lucene.search.TotalHitCountCollector.collect(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.TotalHitCountCollector.needsScores()"
        ],
        [
            "int",
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator$1.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator$1.cost()"
        ],
        [
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator",
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.TwoPhaseDocIdSetIterator.asDocIdSetIterator(org.apache.lucene.search.TwoPhaseDocIdSetIterator)"
        ],
        [
            "int",
            "org.apache.lucene.search.TwoPhaseIterator$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.search.TwoPhaseIterator$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.TwoPhaseIterator$1.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.search.TwoPhaseIterator$1.cost()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.TwoPhaseIterator.asDocIdSetIterator(org.apache.lucene.search.TwoPhaseIterator)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.search.TwoPhaseIterator.approximation()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.UnionPostingsEnum$DocsQueue.lessThan(org.apache.lucene.index.PostingsEnum, org.apache.lucene.index.PostingsEnum)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.UnionPostingsEnum$DocsQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.UnionPostingsEnum",
            "org.apache.lucene.search.UnionPostingsEnum(org.apache.lucene.util.Bits, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.index.Term[], java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, org.apache.lucene.index.TermsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.nextPosition()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.startOffset()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.endOffset()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.search.UnionPostingsEnum.getPayload()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.freq()"
        ],
        [
            "int",
            "org.apache.lucene.search.UnionPostingsEnum.docID()"
        ],
        [
            "long",
            "org.apache.lucene.search.UnionPostingsEnum.cost()"
        ],
        [
            "org.apache.lucene.search.UsageTrackingFilterCachingPolicy",
            "org.apache.lucene.search.UsageTrackingFilterCachingPolicy(float, int, int, int, int)"
        ],
        [
            "org.apache.lucene.search.UsageTrackingFilterCachingPolicy",
            "org.apache.lucene.search.UsageTrackingFilterCachingPolicy()"
        ],
        [
            "void",
            "org.apache.lucene.search.UsageTrackingFilterCachingPolicy.onUse(org.apache.lucene.search.Filter)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.UsageTrackingFilterCachingPolicy.shouldCache(org.apache.lucene.search.Filter, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "org.apache.lucene.search.UsageTrackingQueryCachingPolicy",
            "org.apache.lucene.search.UsageTrackingQueryCachingPolicy(float, int)"
        ],
        [
            "org.apache.lucene.search.UsageTrackingQueryCachingPolicy",
            "org.apache.lucene.search.UsageTrackingQueryCachingPolicy()"
        ],
        [
            "void",
            "org.apache.lucene.search.UsageTrackingQueryCachingPolicy.onUse(org.apache.lucene.search.Query)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.UsageTrackingQueryCachingPolicy.shouldCache(org.apache.lucene.search.Query, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.Weight$DefaultBulkScorer",
            "org.apache.lucene.search.Weight$DefaultBulkScorer(org.apache.lucene.search.Scorer)"
        ],
        [
            "long",
            "org.apache.lucene.search.Weight$DefaultBulkScorer.cost()"
        ],
        [
            "int",
            "org.apache.lucene.search.Weight$DefaultBulkScorer.score(org.apache.lucene.search.LeafCollector, int, int)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.Weight.getQuery()"
        ],
        [
            "org.apache.lucene.search.BulkScorer",
            "org.apache.lucene.search.Weight.bulkScorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.WildcardQuery",
            "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.search.WildcardQuery",
            "org.apache.lucene.search.WildcardQuery(org.apache.lucene.index.Term, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.search.WildcardQuery.toAutomaton(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.WildcardQuery.getTerm()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.WildcardQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.payloads.AveragePayloadFunction",
            "org.apache.lucene.search.payloads.AveragePayloadFunction()"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.docScore(int, java.lang.String, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.AveragePayloadFunction.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.payloads.MaxPayloadFunction",
            "org.apache.lucene.search.payloads.MaxPayloadFunction()"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.docScore(int, java.lang.String, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.MaxPayloadFunction.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.payloads.MinPayloadFunction",
            "org.apache.lucene.search.payloads.MinPayloadFunction()"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MinPayloadFunction.currentScore(int, java.lang.String, int, int, int, float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.MinPayloadFunction.docScore(int, java.lang.String, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.MinPayloadFunction.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.MinPayloadFunction.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadFunction",
            "org.apache.lucene.search.payloads.PayloadFunction()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.payloads.PayloadFunction.explain(int, java.lang.String, int, float)"
        ],
        [
            "void",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.getPayloads(org.apache.lucene.search.spans.Spans[])"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanScorer.score()"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight(org.apache.lucene.search.payloads.PayloadNearQuery, org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.payloads.PayloadNearQuery$PayloadNearSpanWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, org.apache.lucene.search.payloads.PayloadFunction)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.payloads.PayloadNearQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.payloads.PayloadNearQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.PayloadNearQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.PayloadNearQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.payloads.PayloadNearQuery.clone()"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadSpanUtil",
            "org.apache.lucene.search.payloads.PayloadSpanUtil(org.apache.lucene.index.IndexReaderContext)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer(org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight, org.apache.lucene.search.spans.TermSpans, org.apache.lucene.search.Weight, org.apache.lucene.search.similarities.Similarity$SimScorer)"
        ],
        [
            "float",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight$PayloadTermSpanScorer.score()"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight(org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.payloads.PayloadTermQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.payloads.PayloadTermQuery$PayloadTermWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery",
            "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction)"
        ],
        [
            "org.apache.lucene.search.payloads.PayloadTermQuery",
            "org.apache.lucene.search.payloads.PayloadTermQuery(org.apache.lucene.index.Term, org.apache.lucene.search.payloads.PayloadFunction, boolean)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.payloads.PayloadTermQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.payloads.PayloadTermQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.payloads.PayloadTermQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.AfterEffect$NoAfterEffect.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffect",
            "org.apache.lucene.search.similarities.AfterEffect()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffectB",
            "org.apache.lucene.search.similarities.AfterEffectB()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.AfterEffectB.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.AfterEffectB.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.AfterEffectB.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffectL",
            "org.apache.lucene.search.similarities.AfterEffectL()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.AfterEffectL.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.AfterEffectL.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.AfterEffectL.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.score(int, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25DocScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25Stats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BM25Similarity$BM25Stats.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.BM25Similarity",
            "org.apache.lucene.search.similarities.BM25Similarity(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.BM25Similarity",
            "org.apache.lucene.search.similarities.BM25Similarity()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BM25Similarity.setDiscountOverlaps(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.similarities.BM25Similarity.getDiscountOverlaps()"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BM25Similarity.computeNorm(org.apache.lucene.index.FieldInvertState)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BM25Similarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.BM25Similarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimScorer",
            "org.apache.lucene.search.similarities.BM25Similarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BM25Similarity.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity.getK1()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BM25Similarity.getB()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModel",
            "org.apache.lucene.search.similarities.BasicModel()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BasicModel.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelBE",
            "org.apache.lucene.search.similarities.BasicModelBE()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelBE.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelBE.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelD",
            "org.apache.lucene.search.similarities.BasicModelD()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelD.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelD.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelG",
            "org.apache.lucene.search.similarities.BasicModelG()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelG.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelG.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelIF",
            "org.apache.lucene.search.similarities.BasicModelIF()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelIF.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelIF.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelIn",
            "org.apache.lucene.search.similarities.BasicModelIn()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelIn.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.BasicModelIn.explain(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelIn.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelIne",
            "org.apache.lucene.search.similarities.BasicModelIne()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelIne.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelIne.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModelP",
            "org.apache.lucene.search.similarities.BasicModelP()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicModelP.score(org.apache.lucene.search.similarities.BasicStats, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.BasicModelP.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicStats",
            "org.apache.lucene.search.similarities.BasicStats(java.lang.String, float)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getNumberOfDocuments()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setNumberOfDocuments(long)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getNumberOfFieldTokens()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setNumberOfFieldTokens(long)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicStats.getAvgFieldLength()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setAvgFieldLength(float)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getDocFreq()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setDocFreq(long)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.BasicStats.getTotalTermFreq()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.setTotalTermFreq(long)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicStats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.BasicStats.normalize(float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.BasicStats.getTotalBoost()"
        ],
        [
            "org.apache.lucene.search.similarities.DFRSimilarity",
            "org.apache.lucene.search.similarities.DFRSimilarity(org.apache.lucene.search.similarities.BasicModel, org.apache.lucene.search.similarities.AfterEffect, org.apache.lucene.search.similarities.Normalization)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DFRSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.BasicModel",
            "org.apache.lucene.search.similarities.DFRSimilarity.getBasicModel()"
        ],
        [
            "org.apache.lucene.search.similarities.AfterEffect",
            "org.apache.lucene.search.similarities.DFRSimilarity.getAfterEffect()"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization",
            "org.apache.lucene.search.similarities.DFRSimilarity.getNormalization()"
        ],
        [
            "org.apache.lucene.search.similarities.DefaultSimilarity",
            "org.apache.lucene.search.similarities.DefaultSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.coord(int, int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.queryNorm(float)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.DefaultSimilarity.encodeNormValue(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.decodeNormValue(long)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.lengthNorm(org.apache.lucene.index.FieldInvertState)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.tf(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.sloppyFreq(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.scorePayload(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DefaultSimilarity.idf(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.DefaultSimilarity.setDiscountOverlaps(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.similarities.DefaultSimilarity.getDiscountOverlaps()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DefaultSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Distribution",
            "org.apache.lucene.search.similarities.Distribution()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Distribution.explain(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.DistributionLL",
            "org.apache.lucene.search.similarities.DistributionLL()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DistributionLL.score(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DistributionLL.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.DistributionSPL",
            "org.apache.lucene.search.similarities.DistributionSPL()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.DistributionSPL.score(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.DistributionSPL.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.IBSimilarity",
            "org.apache.lucene.search.similarities.IBSimilarity(org.apache.lucene.search.similarities.Distribution, org.apache.lucene.search.similarities.Lambda, org.apache.lucene.search.similarities.Normalization)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.IBSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Distribution",
            "org.apache.lucene.search.similarities.IBSimilarity.getDistribution()"
        ],
        [
            "org.apache.lucene.search.similarities.Lambda",
            "org.apache.lucene.search.similarities.IBSimilarity.getLambda()"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization",
            "org.apache.lucene.search.similarities.IBSimilarity.getNormalization()"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity(float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"
        ],
        [
            "org.apache.lucene.search.similarities.LMDirichletSimilarity",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity.getMu()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMDirichletSimilarity.getName()"
        ],
        [
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel, float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getLambda()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMJelinekMercerSimilarity.getName()"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel",
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.computeProbability(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMSimilarity$DefaultCollectionModel.getName()"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats",
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats(java.lang.String, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats.getCollectionProbability()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.LMSimilarity$LMStats.setCollectionProbability(float)"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity",
            "org.apache.lucene.search.similarities.LMSimilarity(org.apache.lucene.search.similarities.LMSimilarity$CollectionModel)"
        ],
        [
            "org.apache.lucene.search.similarities.LMSimilarity",
            "org.apache.lucene.search.similarities.LMSimilarity()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LMSimilarity.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Lambda",
            "org.apache.lucene.search.similarities.Lambda()"
        ],
        [
            "org.apache.lucene.search.similarities.LambdaDF",
            "org.apache.lucene.search.similarities.LambdaDF()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LambdaDF.lambda(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.LambdaDF.explain(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LambdaDF.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.LambdaTTF",
            "org.apache.lucene.search.similarities.LambdaTTF()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.LambdaTTF.lambda(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.LambdaTTF.explain(org.apache.lucene.search.similarities.BasicStats)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.LambdaTTF.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.score(int, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiSimScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiStats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.MultiSimilarity$MultiStats.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.MultiSimilarity",
            "org.apache.lucene.search.similarities.MultiSimilarity(org.apache.lucene.search.similarities.Similarity[])"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.MultiSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.MultiSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimScorer",
            "org.apache.lucene.search.similarities.MultiSimilarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization$NoNormalization",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.Normalization$NoNormalization.toString()"
        ],
        [
            "org.apache.lucene.search.similarities.Normalization",
            "org.apache.lucene.search.similarities.Normalization()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Normalization.explain(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH1",
            "org.apache.lucene.search.similarities.NormalizationH1(float)"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH1",
            "org.apache.lucene.search.similarities.NormalizationH1()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH1.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationH1.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH1.getC()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH2",
            "org.apache.lucene.search.similarities.NormalizationH2(float)"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH2",
            "org.apache.lucene.search.similarities.NormalizationH2()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH2.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationH2.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH2.getC()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH3",
            "org.apache.lucene.search.similarities.NormalizationH3()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationH3",
            "org.apache.lucene.search.similarities.NormalizationH3(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH3.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationH3.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationH3.getMu()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationZ",
            "org.apache.lucene.search.similarities.NormalizationZ()"
        ],
        [
            "org.apache.lucene.search.similarities.NormalizationZ",
            "org.apache.lucene.search.similarities.NormalizationZ(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationZ.tfn(org.apache.lucene.search.similarities.BasicStats, float, float)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.similarities.NormalizationZ.toString()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.NormalizationZ.getZ()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper$PerFieldSimWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper$PerFieldSimWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper()"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeNorm(org.apache.lucene.index.FieldInvertState)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimScorer",
            "org.apache.lucene.search.similarities.PerFieldSimilarityWrapper.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimScorer",
            "org.apache.lucene.search.similarities.Similarity$SimScorer()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.Similarity$SimScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.Similarity$SimWeight()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity",
            "org.apache.lucene.search.similarities.Similarity()"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.Similarity.coord(int, int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.Similarity.queryNorm(float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.score(int, float)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.SimilarityBase$BasicSimScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.similarities.SimilarityBase",
            "org.apache.lucene.search.similarities.SimilarityBase()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.SimilarityBase.setDiscountOverlaps(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.similarities.SimilarityBase.getDiscountOverlaps()"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.SimilarityBase.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimScorer",
            "org.apache.lucene.search.similarities.SimilarityBase.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.SimilarityBase.computeNorm(org.apache.lucene.index.FieldInvertState)"
        ],
        [
            "double",
            "org.apache.lucene.search.similarities.SimilarityBase.log2(double)"
        ],
        [
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats(java.lang.String, org.apache.lucene.search.Explanation, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$IDFStats.normalize(float, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.score(int, float)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.computeSlopFactor(int)"
        ],
        [
            "float",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.computePayloadFactor(int, int, int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity$TFIDFSimScorer.explain(int, org.apache.lucene.search.Explanation)"
        ],
        [
            "org.apache.lucene.search.similarities.TFIDFSimilarity",
            "org.apache.lucene.search.similarities.TFIDFSimilarity()"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.idfExplain(org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics[])"
        ],
        [
            "long",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.computeNorm(org.apache.lucene.index.FieldInvertState)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimWeight",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.computeWeight(float, org.apache.lucene.search.CollectionStatistics, org.apache.lucene.search.TermStatistics...)"
        ],
        [
            "org.apache.lucene.search.similarities.Similarity$SimScorer",
            "org.apache.lucene.search.similarities.TFIDFSimilarity.simScorer(org.apache.lucene.search.similarities.Similarity$SimWeight, org.apache.lucene.index.LeafReaderContext)"
        ],
        [
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery(org.apache.lucene.search.spans.SpanQuery, java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getField()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getMaskedQuery()"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.FieldMaskingSpanQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.spans.FilterSpans",
            "org.apache.lucene.search.spans.FilterSpans(org.apache.lucene.search.spans.Spans)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.FilterSpans.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.FilterSpans.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.FilterSpans.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.FilterSpans.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.FilterSpans.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.FilterSpans.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.FilterSpans.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.FilterSpans.toString()"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansOrdered",
            "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansOrdered",
            "org.apache.lucene.search.spans.NearSpansOrdered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansOrdered.end()"
        ],
        [
            "org.apache.lucene.search.spans.Spans[]",
            "org.apache.lucene.search.spans.NearSpansOrdered.getSubSpans()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansOrdered.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.NearSpansOrdered.cost()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansOrdered.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansOrdered.skipTo(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.NearSpansOrdered.toString()"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansUnordered$CellQueue",
            "org.apache.lucene.search.spans.NearSpansUnordered$CellQueue(org.apache.lucene.search.spans.NearSpansUnordered, int)"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell(org.apache.lucene.search.spans.NearSpansUnordered, org.apache.lucene.search.spans.Spans, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.NearSpansUnordered$SpansCell.toString()"
        ],
        [
            "org.apache.lucene.search.spans.NearSpansUnordered",
            "org.apache.lucene.search.spans.NearSpansUnordered(org.apache.lucene.search.spans.SpanNearQuery, org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.spans.Spans[]",
            "org.apache.lucene.search.spans.NearSpansUnordered.getSubSpans()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.NearSpansUnordered.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.NearSpansUnordered.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.NearSpansUnordered.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.NearSpansUnordered.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanFirstQuery",
            "org.apache.lucene.search.spans.SpanFirstQuery(org.apache.lucene.search.spans.SpanQuery, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanFirstQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanFirstQuery",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanFirstQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanFirstQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionRangeQuery",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanFirstQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$1.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.getSize()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$TopTermsSpanBooleanQueryRewrite.rewrite(org.apache.lucene.index.IndexReader, org.apache.lucene.search.MultiTermQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper(Q)"
        ],
        [
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getRewriteMethod()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.setRewriteMethod(org.apache.lucene.search.spans.SpanMultiTermQueryWrapper$SpanRewriteMethod)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getField()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.getWrappedQuery()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanMultiTermQueryWrapper.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery(org.apache.lucene.search.spans.SpanNearQuery, java.util.Collection<byte[]>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanNearPayloadCheckQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.spans.SpanNearQuery(org.apache.lucene.search.spans.SpanQuery[], int, boolean, boolean)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery[]",
            "org.apache.lucene.search.spans.SpanNearQuery.getClauses()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNearQuery.getSlop()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNearQuery.isInOrder()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNearQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanNearQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNearQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanNearQuery.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNearQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNearQuery",
            "org.apache.lucene.search.spans.SpanNearQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNearQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNearQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNearQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanNearQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery$1.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery$1.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery$1.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery$1.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery$1.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.SpanNotQuery$1.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNotQuery$1.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanNotQuery",
            "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNotQuery",
            "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery, int)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNotQuery",
            "org.apache.lucene.search.spans.SpanNotQuery(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.spans.SpanQuery, int, int)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanNotQuery.getInclude()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanNotQuery.getExclude()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNotQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanNotQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanNotQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanNotQuery",
            "org.apache.lucene.search.spans.SpanNotQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanNotQuery.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNotQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanNotQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanNotQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanNotQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanNotQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery$1.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery$1.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery$1.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery$1.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery$1.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanOrQuery$1.toString()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.SpanOrQuery$1.cost()"
        ],
        [
            "org.apache.lucene.search.spans.SpanOrQuery$SpanQueue",
            "org.apache.lucene.search.spans.SpanOrQuery$SpanQueue(org.apache.lucene.search.spans.SpanOrQuery, int)"
        ],
        [
            "org.apache.lucene.search.spans.SpanOrQuery",
            "org.apache.lucene.search.spans.SpanOrQuery(org.apache.lucene.search.spans.SpanQuery...)"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanOrQuery.addClause(org.apache.lucene.search.spans.SpanQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery[]",
            "org.apache.lucene.search.spans.SpanOrQuery.getClauses()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanOrQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanOrQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.spans.SpanOrQuery",
            "org.apache.lucene.search.spans.SpanOrQuery.clone()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanOrQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanOrQuery.toString(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanOrQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanOrQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanOrQuery.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanOrQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanOrQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery(org.apache.lucene.search.spans.SpanQuery, java.util.Collection<byte[]>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanPayloadCheckQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus[]",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus.values()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$AcceptStatus.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.cost()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery$PositionCheckSpan.toString()"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionCheckQuery",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery(org.apache.lucene.search.spans.SpanQuery)"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.getMatch()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanPositionCheckQuery.rewrite(org.apache.lucene.index.IndexReader)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionRangeQuery",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery(org.apache.lucene.search.spans.SpanQuery, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.getStart()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.getEnd()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.toString(java.lang.String)"
        ],
        [
            "org.apache.lucene.search.spans.SpanPositionRangeQuery",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.hashCode()"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.search.spans.SpanPositionRangeQuery.clone()"
        ],
        [
            "org.apache.lucene.search.spans.SpanQuery",
            "org.apache.lucene.search.spans.SpanQuery()"
        ],
        [
            "org.apache.lucene.search.Weight",
            "org.apache.lucene.search.spans.SpanQuery.createWeight(org.apache.lucene.search.IndexSearcher, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.docID()"
        ],
        [
            "float",
            "org.apache.lucene.search.spans.SpanScorer.score()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanScorer.freq()"
        ],
        [
            "float",
            "org.apache.lucene.search.spans.SpanScorer.sloppyFreq()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.SpanScorer.cost()"
        ],
        [
            "org.apache.lucene.search.spans.SpanTermQuery",
            "org.apache.lucene.search.spans.SpanTermQuery(org.apache.lucene.index.Term)"
        ],
        [
            "org.apache.lucene.index.Term",
            "org.apache.lucene.search.spans.SpanTermQuery.getTerm()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanTermQuery.getField()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanTermQuery.extractTerms(java.util.Set<org.apache.lucene.index.Term>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.SpanTermQuery.toString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.SpanTermQuery.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.SpanTermQuery.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.SpanTermQuery.getSpans(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits, java.util.Map<org.apache.lucene.index.Term, org.apache.lucene.index.TermContext>)"
        ],
        [
            "org.apache.lucene.search.spans.SpanWeight",
            "org.apache.lucene.search.spans.SpanWeight(org.apache.lucene.search.spans.SpanQuery, org.apache.lucene.search.IndexSearcher)"
        ],
        [
            "float",
            "org.apache.lucene.search.spans.SpanWeight.getValueForNormalization()"
        ],
        [
            "void",
            "org.apache.lucene.search.spans.SpanWeight.normalize(float, float)"
        ],
        [
            "org.apache.lucene.search.Scorer",
            "org.apache.lucene.search.spans.SpanWeight.scorer(org.apache.lucene.index.LeafReaderContext, org.apache.lucene.util.Bits)"
        ],
        [
            "org.apache.lucene.search.Explanation",
            "org.apache.lucene.search.spans.SpanWeight.explain(org.apache.lucene.index.LeafReaderContext, int)"
        ],
        [
            "org.apache.lucene.search.spans.Spans",
            "org.apache.lucene.search.spans.Spans()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.end()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.isPayloadAvailable()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.TermSpans$EmptyTermSpans.cost()"
        ],
        [
            "org.apache.lucene.search.spans.TermSpans",
            "org.apache.lucene.search.spans.TermSpans(org.apache.lucene.index.PostingsEnum, org.apache.lucene.index.Term)"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans.skipTo(int)"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans.doc()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans.start()"
        ],
        [
            "int",
            "org.apache.lucene.search.spans.TermSpans.end()"
        ],
        [
            "long",
            "org.apache.lucene.search.spans.TermSpans.cost()"
        ],
        [
            "boolean",
            "org.apache.lucene.search.spans.TermSpans.isPayloadAvailable()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.search.spans.TermSpans.toString()"
        ],
        [
            "org.apache.lucene.index.PostingsEnum",
            "org.apache.lucene.search.spans.TermSpans.getPostings()"
        ],
        [
            "org.apache.lucene.store.AlreadyClosedException",
            "org.apache.lucene.store.AlreadyClosedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.AlreadyClosedException",
            "org.apache.lucene.store.AlreadyClosedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.BaseDirectory.makeLock(java.lang.String)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.BaseDirectory.toString()"
        ],
        [
            "org.apache.lucene.store.BufferedChecksum",
            "org.apache.lucene.store.BufferedChecksum(java.util.zip.Checksum)"
        ],
        [
            "org.apache.lucene.store.BufferedChecksum",
            "org.apache.lucene.store.BufferedChecksum(java.util.zip.Checksum, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedChecksum.update(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedChecksum.update(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedChecksum.getValue()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedChecksum.reset()"
        ],
        [
            "org.apache.lucene.store.BufferedChecksumIndexInput",
            "org.apache.lucene.store.BufferedChecksumIndexInput(org.apache.lucene.store.IndexInput)"
        ],
        [
            "byte",
            "org.apache.lucene.store.BufferedChecksumIndexInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedChecksumIndexInput.readBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedChecksumIndexInput.getChecksum()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedChecksumIndexInput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedChecksumIndexInput.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedChecksumIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.BufferedChecksumIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.BufferedChecksumIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.BufferedChecksumIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.BufferedChecksumIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.BufferedIndexInput$SlicedIndexInput.clone()"
        ],
        [
            "byte",
            "org.apache.lucene.store.BufferedIndexInput.readByte()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput(java.lang.String, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.setBufferSize(int)"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.getBufferSize()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.readBytes(byte[], int, int, boolean)"
        ],
        [
            "short",
            "org.apache.lucene.store.BufferedIndexInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.readInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.readLong()"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.readVInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.readVLong()"
        ],
        [
            "byte",
            "org.apache.lucene.store.BufferedIndexInput.readByte(long)"
        ],
        [
            "short",
            "org.apache.lucene.store.BufferedIndexInput.readShort(long)"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.readInt(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.readLong(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.BufferedIndexInput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.BufferedIndexInput.seek(long)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.BufferedIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "int",
            "org.apache.lucene.store.BufferedIndexInput.bufferSize(org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.BufferedIndexInput.wrap(java.lang.String, org.apache.lucene.store.IndexInput, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.BufferedIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataInput",
            "org.apache.lucene.store.ByteArrayDataInput(byte[])"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataInput",
            "org.apache.lucene.store.ByteArrayDataInput(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataInput",
            "org.apache.lucene.store.ByteArrayDataInput()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.reset(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.rewind()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.setPosition(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.reset(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.length()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.ByteArrayDataInput.eof()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.skipBytes(long)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteArrayDataInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.readInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteArrayDataInput.readLong()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataInput.readVInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteArrayDataInput.readVLong()"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteArrayDataInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataInput.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataOutput",
            "org.apache.lucene.store.ByteArrayDataOutput(byte[])"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataOutput",
            "org.apache.lucene.store.ByteArrayDataOutput(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.ByteArrayDataOutput",
            "org.apache.lucene.store.ByteArrayDataOutput()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.reset(byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteArrayDataOutput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteArrayDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput$DefaultImpl.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput$DefaultImpl.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.ByteBufferIndexInput$DefaultImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.ByteBufferIndexInput$DefaultImpl.clone()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.getFilePointer()"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readByte(long)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readShort(long)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readInt(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.readLong(long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.ByteBufferIndexInput$SingleBufferImpl.clone()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.getFilePointer()"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.readByte(long)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.readShort(long)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.readInt(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.readLong(long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.ByteBufferIndexInput$WithOffsetImpl.clone()"
        ],
        [
            "org.apache.lucene.store.ByteBufferIndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.newInstance(java.lang.String, java.nio.ByteBuffer[], long, int, org.apache.lucene.store.ByteBufferIndexInput$BufferCleaner, boolean)"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteBufferIndexInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput.readBytes(byte[], int, int)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteBufferIndexInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteBufferIndexInput.readInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.readLong()"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput.seek(long)"
        ],
        [
            "byte",
            "org.apache.lucene.store.ByteBufferIndexInput.readByte(long)"
        ],
        [
            "short",
            "org.apache.lucene.store.ByteBufferIndexInput.readShort(long)"
        ],
        [
            "int",
            "org.apache.lucene.store.ByteBufferIndexInput.readInt(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.readLong(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.ByteBufferIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.ByteBufferIndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.ByteBufferIndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "void",
            "org.apache.lucene.store.ByteBufferIndexInput.close()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.ByteBufferIndexInput.clone()"
        ],
        [
            "void",
            "org.apache.lucene.store.ChecksumIndexInput.seek(long)"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.DataInput()"
        ],
        [
            "void",
            "org.apache.lucene.store.DataInput.readBytes(byte[], int, int, boolean)"
        ],
        [
            "short",
            "org.apache.lucene.store.DataInput.readShort()"
        ],
        [
            "int",
            "org.apache.lucene.store.DataInput.readInt()"
        ],
        [
            "int",
            "org.apache.lucene.store.DataInput.readVInt()"
        ],
        [
            "int",
            "org.apache.lucene.store.DataInput.readZInt()"
        ],
        [
            "long",
            "org.apache.lucene.store.DataInput.readLong()"
        ],
        [
            "long",
            "org.apache.lucene.store.DataInput.readVLong()"
        ],
        [
            "long",
            "org.apache.lucene.store.DataInput.readZLong()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.DataInput.readString()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.DataInput.clone()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.store.DataInput.readStringStringMap()"
        ],
        [
            "java.util.Map<java.lang.String, java.lang.String>",
            "org.apache.lucene.store.DataInput.readMapOfStrings()"
        ],
        [
            "void",
            "org.apache.lucene.store.DataInput.skipBytes(long)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.DataInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataOutput",
            "org.apache.lucene.store.DataOutput()"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeBytes(byte[], int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeShort(short)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeVInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeZInt(int)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeLong(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeVLong(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeZLong(long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeString(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.copyBytes(org.apache.lucene.store.DataInput, long)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeStringStringMap(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeMapOfStrings(java.util.Map<java.lang.String, java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeStringSet(java.util.Set<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.DataOutput.writeSetOfStrings(java.util.Set<java.lang.String>)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.Directory()"
        ],
        [
            "org.apache.lucene.store.ChecksumIndexInput",
            "org.apache.lucene.store.Directory.openChecksumInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.Directory.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.Directory.copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput$1.write(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.FSDirectory$FSIndexOutput",
            "org.apache.lucene.store.FSDirectory$FSIndexOutput(org.apache.lucene.store.FSDirectory, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.store.FSDirectory.open(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.store.FSDirectory.open(java.nio.file.Path, org.apache.lucene.store.LockFactory)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FSDirectory.listAll(java.nio.file.Path)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FSDirectory.listAll()"
        ],
        [
            "long",
            "org.apache.lucene.store.FSDirectory.fileLength(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.deleteFile(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.FSDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.FSDirectory.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.FSDirectory.void close()"
        ],
        [
            "java.nio.file.Path",
            "org.apache.lucene.store.FSDirectory.getDirectory()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FSDirectory.toString()"
        ],
        [
            "org.apache.lucene.store.FSLockFactory",
            "org.apache.lucene.store.FSLockFactory()"
        ],
        [
            "org.apache.lucene.store.FSLockFactory",
            "org.apache.lucene.store.FSLockFactory.getDefault()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.FSLockFactory.makeLock(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.FileSwitchDirectory",
            "org.apache.lucene.store.FileSwitchDirectory(java.util.Set<java.lang.String>, org.apache.lucene.store.Directory, org.apache.lucene.store.Directory, boolean)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.FileSwitchDirectory.getPrimaryDir()"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.FileSwitchDirectory.getSecondaryDir()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.FileSwitchDirectory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.close()"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FileSwitchDirectory.listAll()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FileSwitchDirectory.getExtension(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.deleteFile(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.FileSwitchDirectory.fileLength(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.FileSwitchDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.FileSwitchDirectory.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.FileSwitchDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.FilterDirectory.unwrap(org.apache.lucene.store.Directory)"
        ],
        [
            "org.apache.lucene.store.Directory",
            "org.apache.lucene.store.FilterDirectory.getDelegate()"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.FilterDirectory.listAll()"
        ],
        [
            "void",
            "org.apache.lucene.store.FilterDirectory.deleteFile(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.FilterDirectory.fileLength(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.FilterDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.FilterDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.FilterDirectory.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.FilterDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.FilterDirectory.makeLock(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.store.FilterDirectory.close()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FilterDirectory.toString()"
        ],
        [
            "org.apache.lucene.store.FlushInfo",
            "org.apache.lucene.store.FlushInfo(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.store.FlushInfo.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.FlushInfo.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.FlushInfo.toString()"
        ],
        [
            "org.apache.lucene.store.IOContext$Context[]",
            "org.apache.lucene.store.IOContext$Context.values()"
        ],
        [
            "org.apache.lucene.store.IOContext$Context",
            "org.apache.lucene.store.IOContext$Context.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext()"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.FlushInfo)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext$Context)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.MergeInfo)"
        ],
        [
            "org.apache.lucene.store.IOContext",
            "org.apache.lucene.store.IOContext(org.apache.lucene.store.IOContext, boolean)"
        ],
        [
            "int",
            "org.apache.lucene.store.IOContext.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.IOContext.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.IOContext.toString()"
        ],
        [
            "byte",
            "org.apache.lucene.store.IndexInput$1.readByte(long)"
        ],
        [
            "short",
            "org.apache.lucene.store.IndexInput$1.readShort(long)"
        ],
        [
            "int",
            "org.apache.lucene.store.IndexInput$1.readInt(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.IndexInput$1.readLong(long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.IndexInput.toString()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.IndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.RandomAccessInput",
            "org.apache.lucene.store.IndexInput.randomAccessSlice(long, long)"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.IndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.IndexInput.clone()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.IndexOutput.toString()"
        ],
        [
            "org.apache.lucene.store.InputStreamDataInput",
            "org.apache.lucene.store.InputStreamDataInput(java.io.InputStream)"
        ],
        [
            "byte",
            "org.apache.lucene.store.InputStreamDataInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.InputStreamDataInput.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.InputStreamDataInput.close()"
        ],
        [
            "org.apache.lucene.store.Lock$With",
            "org.apache.lucene.store.Lock$With(org.apache.lucene.store.Lock, long)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.Lock$With.run()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.Lock()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.Lock.obtain(long)"
        ],
        [
            "org.apache.lucene.store.LockFactory",
            "org.apache.lucene.store.LockFactory()"
        ],
        [
            "org.apache.lucene.store.LockObtainFailedException",
            "org.apache.lucene.store.LockObtainFailedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.LockObtainFailedException",
            "org.apache.lucene.store.LockObtainFailedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.store.LockReleaseFailedException",
            "org.apache.lucene.store.LockReleaseFailedException(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.LockReleaseFailedException",
            "org.apache.lucene.store.LockReleaseFailedException(java.lang.String, java.lang.Throwable)"
        ],
        [
            "org.apache.lucene.store.LockStressTest",
            "org.apache.lucene.store.LockStressTest()"
        ],
        [
            "void",
            "org.apache.lucene.store.LockStressTest.main(java.lang.String[])"
        ],
        [
            "void",
            "org.apache.lucene.store.LockVerifyServer$1.run()"
        ],
        [
            "org.apache.lucene.store.LockVerifyServer",
            "org.apache.lucene.store.LockVerifyServer()"
        ],
        [
            "void",
            "org.apache.lucene.store.LockVerifyServer.main(java.lang.String[])"
        ],
        [
            "java.lang.Boolean",
            "org.apache.lucene.store.MMapDirectory$1.run()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.MMapDirectory$1.run()"
        ],
        [
            "java.lang.Void",
            "org.apache.lucene.store.MMapDirectory$2$1.run()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.MMapDirectory$2$1.run()"
        ],
        [
            "void",
            "org.apache.lucene.store.MMapDirectory$2.freeBuffer(org.apache.lucene.store.ByteBufferIndexInput, java.nio.ByteBuffer)"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.nio.file.Path, int)"
        ],
        [
            "org.apache.lucene.store.MMapDirectory",
            "org.apache.lucene.store.MMapDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.MMapDirectory.setUseUnmap(boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.MMapDirectory.getUseUnmap()"
        ],
        [
            "int",
            "org.apache.lucene.store.MMapDirectory.getMaxChunkSize()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.MMapDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.MergeInfo",
            "org.apache.lucene.store.MergeInfo(int, long, boolean, int)"
        ],
        [
            "int",
            "org.apache.lucene.store.MergeInfo.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.MergeInfo.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.MergeInfo.toString()"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.nio.channels.FileChannel, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput(java.lang.String, java.nio.channels.FileChannel, long, long, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.close()"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "long",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory",
            "org.apache.lucene.store.NIOFSDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.NIOFSDirectory",
            "org.apache.lucene.store.NIOFSDirectory(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.NIOFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.NRTCachingDirectory",
            "org.apache.lucene.store.NRTCachingDirectory(org.apache.lucene.store.Directory, double, double)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NRTCachingDirectory.toString()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.java.lang.String[] listAll()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.void deleteFile(java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.long fileLength(java.lang.String)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.NRTCachingDirectory.listCachedFiles()"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.NRTCachingDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NRTCachingDirectory.org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.NRTCachingDirectory.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.NRTCachingDirectory.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock",
            "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock(java.nio.file.Path, java.lang.String)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.boolean obtain()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.void close()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.boolean isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.NoLockFactory$NoLock.obtain()"
        ],
        [
            "void",
            "org.apache.lucene.store.NoLockFactory$NoLock.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.NoLockFactory$NoLock.isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.NoLockFactory$NoLock.toString()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.NoLockFactory.makeLock(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.OutputStreamDataOutput",
            "org.apache.lucene.store.OutputStreamDataOutput(java.io.OutputStream)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamDataOutput.close()"
        ],
        [
            "org.apache.lucene.store.OutputStreamIndexOutput",
            "org.apache.lucene.store.OutputStreamIndexOutput(java.lang.String, java.io.OutputStream, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamIndexOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamIndexOutput.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.OutputStreamIndexOutput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.OutputStreamIndexOutput.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.store.OutputStreamIndexOutput.getChecksum()"
        ],
        [
            "org.apache.lucene.store.RAMDirectory",
            "org.apache.lucene.store.RAMDirectory()"
        ],
        [
            "org.apache.lucene.store.RAMDirectory",
            "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.RAMDirectory",
            "org.apache.lucene.store.RAMDirectory(org.apache.lucene.store.FSDirectory, org.apache.lucene.store.IOContext)"
        ],
        [
            "java.lang.String[]",
            "org.apache.lucene.store.RAMDirectory.listAll()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.RAMDirectory.fileNameExists(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMDirectory.fileLength(java.lang.String)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMDirectory.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.deleteFile(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.RAMDirectory.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.sync(java.util.Collection<java.lang.String>)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.RAMDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMDirectory.close()"
        ],
        [
            "org.apache.lucene.store.RAMFile",
            "org.apache.lucene.store.RAMFile()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.RAMFile.long getLength()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.RAMFile.long ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.RAMFile.toString()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream$1.seek(long)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMInputStream$1.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMInputStream$1.length()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.RAMInputStream$1.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.RAMInputStream",
            "org.apache.lucene.store.RAMInputStream(java.lang.String, org.apache.lucene.store.RAMFile)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMInputStream.length()"
        ],
        [
            "byte",
            "org.apache.lucene.store.RAMInputStream.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream.readBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMInputStream.getFilePointer()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMInputStream.seek(long)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.RAMInputStream.slice(java.lang.String, long, long)"
        ],
        [
            "org.apache.lucene.store.RAMOutputStream",
            "org.apache.lucene.store.RAMOutputStream()"
        ],
        [
            "org.apache.lucene.store.RAMOutputStream",
            "org.apache.lucene.store.RAMOutputStream(org.apache.lucene.store.RAMFile, boolean)"
        ],
        [
            "org.apache.lucene.store.RAMOutputStream",
            "org.apache.lucene.store.RAMOutputStream(java.lang.String, org.apache.lucene.store.RAMFile, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeTo(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeTo(byte[], int)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.reset()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.close()"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.RAMOutputStream.writeBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMOutputStream.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMOutputStream.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.store.RAMOutputStream.getChecksum()"
        ],
        [
            "org.apache.lucene.store.RateLimitedIndexOutput",
            "org.apache.lucene.store.RateLimitedIndexOutput(org.apache.lucene.store.RateLimiter, org.apache.lucene.store.IndexOutput)"
        ],
        [
            "void",
            "org.apache.lucene.store.RateLimitedIndexOutput.close()"
        ],
        [
            "long",
            "org.apache.lucene.store.RateLimitedIndexOutput.getFilePointer()"
        ],
        [
            "long",
            "org.apache.lucene.store.RateLimitedIndexOutput.getChecksum()"
        ],
        [
            "void",
            "org.apache.lucene.store.RateLimitedIndexOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.store.RateLimitedIndexOutput.writeBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.RateLimiter$SimpleRateLimiter",
            "org.apache.lucene.store.RateLimiter$SimpleRateLimiter(double)"
        ],
        [
            "void",
            "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.setMBPerSec(double)"
        ],
        [
            "long",
            "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.getMinPauseCheckBytes()"
        ],
        [
            "double",
            "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.getMBPerSec()"
        ],
        [
            "long",
            "org.apache.lucene.store.RateLimiter$SimpleRateLimiter.pause(long)"
        ],
        [
            "org.apache.lucene.store.RateLimiter",
            "org.apache.lucene.store.RateLimiter()"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.nio.channels.SeekableByteChannel, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput(java.lang.String, java.nio.channels.SeekableByteChannel, long, long, int)"
        ],
        [
            "void",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.close()"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.slice(java.lang.String, long, long)"
        ],
        [
            "long",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.length()"
        ],
        [
            "org.apache.lucene.store.BufferedIndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.clone()"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory",
            "org.apache.lucene.store.SimpleFSDirectory(java.nio.file.Path, org.apache.lucene.store.LockFactory)"
        ],
        [
            "org.apache.lucene.store.SimpleFSDirectory",
            "org.apache.lucene.store.SimpleFSDirectory(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.store.IndexInput",
            "org.apache.lucene.store.SimpleFSDirectory.openInput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock",
            "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock(java.nio.file.Path, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.obtain()"
        ],
        [
            "void",
            "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.SimpleFSLockFactory$SimpleFSLock.toString()"
        ],
        [
            "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock",
            "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock(java.util.HashSet<java.lang.String>, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.obtain()"
        ],
        [
            "void",
            "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.isLocked()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.store.SingleInstanceLockFactory$SingleInstanceLock.toString()"
        ],
        [
            "org.apache.lucene.store.SingleInstanceLockFactory",
            "org.apache.lucene.store.SingleInstanceLockFactory()"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.SingleInstanceLockFactory.makeLock(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.TrackingDirectoryWrapper",
            "org.apache.lucene.store.TrackingDirectoryWrapper(org.apache.lucene.store.Directory)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.deleteFile(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.IndexOutput",
            "org.apache.lucene.store.TrackingDirectoryWrapper.createOutput(java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.copyFrom(org.apache.lucene.store.Directory, java.lang.String, java.lang.String, org.apache.lucene.store.IOContext)"
        ],
        [
            "void",
            "org.apache.lucene.store.TrackingDirectoryWrapper.renameFile(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock(org.apache.lucene.store.VerifyingLockFactory, org.apache.lucene.store.Lock)"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean obtain()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.boolean isLocked()"
        ],
        [
            "synchronized",
            "org.apache.lucene.store.VerifyingLockFactory$CheckedLock.void close()"
        ],
        [
            "org.apache.lucene.store.VerifyingLockFactory",
            "org.apache.lucene.store.VerifyingLockFactory(org.apache.lucene.store.LockFactory, java.io.InputStream, java.io.OutputStream)"
        ],
        [
            "org.apache.lucene.store.Lock",
            "org.apache.lucene.store.VerifyingLockFactory.makeLock(org.apache.lucene.store.Directory, java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.util.Accountables$1.compare(org.apache.lucene.util.Accountable, org.apache.lucene.util.Accountable)"
        ],
        [
            "int",
            "org.apache.lucene.util.Accountables$1.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "long",
            "org.apache.lucene.util.Accountables$2.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.Accountables$2.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.Accountables.toString(org.apache.lucene.util.Accountable)"
        ],
        [
            "org.apache.lucene.util.Accountable",
            "org.apache.lucene.util.Accountables.namedAccountable(java.lang.String, org.apache.lucene.util.Accountable)"
        ],
        [
            "org.apache.lucene.util.Accountable",
            "org.apache.lucene.util.Accountables.namedAccountable(java.lang.String, long)"
        ],
        [
            "org.apache.lucene.util.Accountable",
            "org.apache.lucene.util.Accountables.namedAccountable(java.lang.String, java.util.Collection<org.apache.lucene.util.Accountable>, long)"
        ],
        [
            "org.apache.lucene.util.ArrayInPlaceMergeSorter",
            "org.apache.lucene.util.ArrayInPlaceMergeSorter(T[], java.util.Comparator<? super T>)"
        ],
        [
            "org.apache.lucene.util.ArrayIntroSorter",
            "org.apache.lucene.util.ArrayIntroSorter(T[], java.util.Comparator<? super T>)"
        ],
        [
            "org.apache.lucene.util.ArrayTimSorter",
            "org.apache.lucene.util.ArrayTimSorter(T[], java.util.Comparator<? super T>, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil$NaturalComparator.compare(T, T)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil$NaturalComparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.parseInt(char[])"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.parseInt(char[], int, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.oversize(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.getShrinkSize(int, int, int)"
        ],
        [
            "short[]",
            "org.apache.lucene.util.ArrayUtil.grow(short[], int)"
        ],
        [
            "short[]",
            "org.apache.lucene.util.ArrayUtil.grow(short[])"
        ],
        [
            "float[]",
            "org.apache.lucene.util.ArrayUtil.grow(float[], int)"
        ],
        [
            "float[]",
            "org.apache.lucene.util.ArrayUtil.grow(float[])"
        ],
        [
            "double[]",
            "org.apache.lucene.util.ArrayUtil.grow(double[], int)"
        ],
        [
            "double[]",
            "org.apache.lucene.util.ArrayUtil.grow(double[])"
        ],
        [
            "short[]",
            "org.apache.lucene.util.ArrayUtil.shrink(short[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.grow(int[], int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.grow(int[])"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.shrink(int[], int)"
        ],
        [
            "long[]",
            "org.apache.lucene.util.ArrayUtil.grow(long[], int)"
        ],
        [
            "long[]",
            "org.apache.lucene.util.ArrayUtil.grow(long[])"
        ],
        [
            "long[]",
            "org.apache.lucene.util.ArrayUtil.shrink(long[], int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ArrayUtil.grow(byte[], int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ArrayUtil.grow(byte[])"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ArrayUtil.shrink(byte[], int)"
        ],
        [
            "boolean[]",
            "org.apache.lucene.util.ArrayUtil.grow(boolean[], int)"
        ],
        [
            "boolean[]",
            "org.apache.lucene.util.ArrayUtil.grow(boolean[])"
        ],
        [
            "boolean[]",
            "org.apache.lucene.util.ArrayUtil.shrink(boolean[], int)"
        ],
        [
            "char[]",
            "org.apache.lucene.util.ArrayUtil.grow(char[], int)"
        ],
        [
            "char[]",
            "org.apache.lucene.util.ArrayUtil.grow(char[])"
        ],
        [
            "char[]",
            "org.apache.lucene.util.ArrayUtil.shrink(char[], int)"
        ],
        [
            "int[][]",
            "org.apache.lucene.util.ArrayUtil.grow(int[][], int)"
        ],
        [
            "int[][]",
            "org.apache.lucene.util.ArrayUtil.grow(int[][])"
        ],
        [
            "int[][]",
            "org.apache.lucene.util.ArrayUtil.shrink(int[][], int)"
        ],
        [
            "float[][]",
            "org.apache.lucene.util.ArrayUtil.grow(float[][], int)"
        ],
        [
            "float[][]",
            "org.apache.lucene.util.ArrayUtil.grow(float[][])"
        ],
        [
            "float[][]",
            "org.apache.lucene.util.ArrayUtil.shrink(float[][], int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.hashCode(char[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ArrayUtil.hashCode(byte[], int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.ArrayUtil.equals(char[], int, char[], int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.ArrayUtil.equals(byte[], int, byte[], int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.ArrayUtil.equals(int[], int, int[], int, int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.ArrayUtil.toIntArray(java.util.Collection<java.lang.Integer>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> java.util.Comparator<T>",
            "org.apache.lucene.util.ArrayUtil.naturalComparator()"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.swap(T[], int, int)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.introSort(T[], int, int, java.util.Comparator<? super T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.introSort(T[], java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.introSort(T[], int, int)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.introSort(T[])"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.timSort(T[], int, int, java.util.Comparator<? super T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.ArrayUtil.timSort(T[], java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.timSort(T[], int, int)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.ArrayUtil.timSort(T[])"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeFactory$DefaultAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory",
            "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory(org.apache.lucene.util.AttributeFactory, java.lang.Class<A>)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory.createAttributeInstance(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.AttributeFactory$StaticImplementationAttributeFactory.hashCode()"
        ],
        [
            "org.apache.lucene.util.AttributeFactory",
            "org.apache.lucene.util.AttributeFactory()"
        ],
        [
            "<A extends org.apache.lucene.util.AttributeImpl> org.apache.lucene.util.AttributeFactory",
            "org.apache.lucene.util.AttributeFactory.getStaticImplementation(org.apache.lucene.util.AttributeFactory, java.lang.Class<A>)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeImpl$1.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeImpl()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.AttributeImpl.reflectAsString(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeImpl.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeImpl.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.AttributeImpl.clone()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource$1.remove()"
        ],
        [
            "org.apache.lucene.util.AttributeImpl",
            "org.apache.lucene.util.AttributeSource$1.next()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource$1.hasNext()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.AttributeSource$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource$3.reflect(java.lang.Class<? extends org.apache.lucene.util.Attribute>, java.lang.String, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.AttributeSource$State",
            "org.apache.lucene.util.AttributeSource$State()"
        ],
        [
            "org.apache.lucene.util.AttributeSource$State",
            "org.apache.lucene.util.AttributeSource$State.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.AttributeSource$State.clone()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource()"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeSource)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource(org.apache.lucene.util.AttributeFactory)"
        ],
        [
            "org.apache.lucene.util.AttributeFactory",
            "org.apache.lucene.util.AttributeSource.getAttributeFactory()"
        ],
        [
            "java.util.Iterator<java.lang.Class<? extends org.apache.lucene.util.Attribute>>",
            "org.apache.lucene.util.AttributeSource.getAttributeClassesIterator()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.addAttributeImpl(org.apache.lucene.util.AttributeImpl)"
        ],
        [
            "<T extends org.apache.lucene.util.Attribute> T",
            "org.apache.lucene.util.AttributeSource.addAttribute(java.lang.Class<T>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource.hasAttributes()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource.hasAttribute(java.lang.Class<? extends org.apache.lucene.util.Attribute>)"
        ],
        [
            "<T extends org.apache.lucene.util.Attribute> T",
            "org.apache.lucene.util.AttributeSource.getAttribute(java.lang.Class<T>)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.clearAttributes()"
        ],
        [
            "org.apache.lucene.util.AttributeSource$State",
            "org.apache.lucene.util.AttributeSource.captureState()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.restoreState(org.apache.lucene.util.AttributeSource$State)"
        ],
        [
            "int",
            "org.apache.lucene.util.AttributeSource.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.AttributeSource.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.AttributeSource.reflectAsString(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.reflectWith(org.apache.lucene.util.AttributeReflector)"
        ],
        [
            "org.apache.lucene.util.AttributeSource",
            "org.apache.lucene.util.AttributeSource.cloneAttributes()"
        ],
        [
            "void",
            "org.apache.lucene.util.AttributeSource.copyTo(org.apache.lucene.util.AttributeSource)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.AttributeSource.toString()"
        ],
        [
            "org.apache.lucene.util.BitDocIdSet$Builder",
            "org.apache.lucene.util.BitDocIdSet$Builder(int, boolean)"
        ],
        [
            "org.apache.lucene.util.BitDocIdSet$Builder",
            "org.apache.lucene.util.BitDocIdSet$Builder(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BitDocIdSet$Builder.or(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.BitDocIdSet$Builder.and(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.BitDocIdSet$Builder.andNot(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.util.BitDocIdSet",
            "org.apache.lucene.util.BitDocIdSet$Builder.build()"
        ],
        [
            "org.apache.lucene.util.BitDocIdSet",
            "org.apache.lucene.util.BitDocIdSet(org.apache.lucene.util.BitSet, long)"
        ],
        [
            "org.apache.lucene.util.BitDocIdSet",
            "org.apache.lucene.util.BitDocIdSet(org.apache.lucene.util.BitSet)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.BitDocIdSet.iterator()"
        ],
        [
            "org.apache.lucene.util.BitSet",
            "org.apache.lucene.util.BitDocIdSet.bits()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BitDocIdSet.isCacheable()"
        ],
        [
            "long",
            "org.apache.lucene.util.BitDocIdSet.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.BitDocIdSet.toString()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.util.BitDocIdSet.bits()"
        ],
        [
            "void",
            "org.apache.lucene.util.BitSet$1.onMatch(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BitSet$1.finish()"
        ],
        [
            "void",
            "org.apache.lucene.util.BitSet$2.onMatch(int)"
        ],
        [
            "org.apache.lucene.util.BitSet",
            "org.apache.lucene.util.BitSet()"
        ],
        [
            "int",
            "org.apache.lucene.util.BitSet.approximateCardinality()"
        ],
        [
            "void",
            "org.apache.lucene.util.BitSet.or(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.BitSet.and(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.BitSet.andNot(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.BitSetIterator.getFixedBitSetOrNull(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.util.SparseFixedBitSet",
            "org.apache.lucene.util.BitSetIterator.getSparseFixedBitSetOrNull(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.util.BitSetIterator",
            "org.apache.lucene.util.BitSetIterator(org.apache.lucene.util.BitSet, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitSetIterator.docID()"
        ],
        [
            "int",
            "org.apache.lucene.util.BitSetIterator.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.BitSetIterator.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitSetIterator.cost()"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.bitCount(byte)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.bitList(byte)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_array(long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_intersect(long[], long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_union(long[], long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_andnot(long[], long[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.pop_xor(long[], long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.nextHighestPowerOfTwo(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.zigZagEncode(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.zigZagEncode(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.zigZagDecode(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.BitUtil.zigZagDecode(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.select(long, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BitUtil.selectNaive(long, int)"
        ],
        [
            "org.apache.lucene.util.Bits$MatchAllBits",
            "org.apache.lucene.util.Bits$MatchAllBits(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Bits$MatchAllBits.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.Bits$MatchAllBits.length()"
        ],
        [
            "org.apache.lucene.util.Bits$MatchNoBits",
            "org.apache.lucene.util.Bits$MatchNoBits(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Bits$MatchNoBits.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.Bits$MatchNoBits.length()"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$Allocator",
            "org.apache.lucene.util.ByteBlockPool$Allocator(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool$Allocator.recycleByteBlocks(java.util.List<byte[]>)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ByteBlockPool$Allocator.getByteBlock()"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator()"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool$DirectAllocator.recycleByteBlocks(byte[][], int, int)"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator(int, org.apache.lucene.util.Counter)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.getByteBlock()"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.recycleByteBlocks(byte[][], int, int)"
        ],
        [
            "org.apache.lucene.util.ByteBlockPool",
            "org.apache.lucene.util.ByteBlockPool(org.apache.lucene.util.ByteBlockPool$Allocator)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.reset()"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.reset(boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.nextBuffer()"
        ],
        [
            "int",
            "org.apache.lucene.util.ByteBlockPool.newSlice(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.ByteBlockPool.allocSlice(byte[], int)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.setBytesRef(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.append(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.ByteBlockPool.readBytes(long, byte[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUTF16Comparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator.compare(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef$UTF8SortedAsUnicodeComparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(byte[])"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BytesRef.bytesEquals(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BytesRef.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.BytesRef.utf8ToString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.BytesRef.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef.compareTo(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRef.deepCopyOf(org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BytesRef.isValid()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.BytesRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefArray$2.next()"
        ],
        [
            "org.apache.lucene.util.BytesRefArray",
            "org.apache.lucene.util.BytesRefArray(org.apache.lucene.util.Counter)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefArray.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefArray.append(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefArray.size()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefArray.get(org.apache.lucene.util.BytesRefBuilder, int)"
        ],
        [
            "org.apache.lucene.util.BytesRefIterator",
            "org.apache.lucene.util.BytesRefArray.iterator()"
        ],
        [
            "org.apache.lucene.util.BytesRefIterator",
            "org.apache.lucene.util.BytesRefArray.iterator(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.util.BytesRefBuilder",
            "org.apache.lucene.util.BytesRefBuilder()"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.BytesRefBuilder.bytes()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefBuilder.length()"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.setLength(int)"
        ],
        [
            "byte",
            "org.apache.lucene.util.BytesRefBuilder.byteAt(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.setByteAt(int, byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.grow(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.append(byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.append(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.append(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.append(org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.clear()"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.copyBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.copyBytes(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.copyBytes(org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.copyChars(java.lang.CharSequence)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.copyChars(java.lang.CharSequence, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefBuilder.copyChars(char[], int, int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefBuilder.get()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefBuilder.toBytesRef()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.BytesRefBuilder.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefBuilder.hashCode()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash$BytesStartArray",
            "org.apache.lucene.util.BytesRefHash$BytesStartArray()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int, org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray(int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.clear()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.grow()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.init()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.BytesRefHash$DirectBytesStartArray.bytesUsed()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash",
            "org.apache.lucene.util.BytesRefHash()"
        ],
        [
            "org.apache.lucene.util.BytesRefHash",
            "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool)"
        ],
        [
            "org.apache.lucene.util.BytesRefHash",
            "org.apache.lucene.util.BytesRefHash(org.apache.lucene.util.ByteBlockPool, int, org.apache.lucene.util.BytesRefHash$BytesStartArray)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.size()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefHash.get(int, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.BytesRefHash.sort(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.clear(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.clear()"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.close()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.add(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.find(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.addByPoolOffset(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.BytesRefHash.reinit()"
        ],
        [
            "int",
            "org.apache.lucene.util.BytesRefHash.byteStart(int)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.BytesRefIterator$1.next()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef$UTF16SortedAsUTF8Comparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef()"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef(int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef(char[], int, int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.CharsRef.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.CharsRef.charsEquals(org.apache.lucene.util.CharsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.compareTo(org.apache.lucene.util.CharsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.CharsRef.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.length()"
        ],
        [
            "char",
            "org.apache.lucene.util.CharsRef.charAt(int)"
        ],
        [
            "java.lang.CharSequence",
            "org.apache.lucene.util.CharsRef.subSequence(int, int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRef.deepCopyOf(org.apache.lucene.util.CharsRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.CharsRef.isValid()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.CharsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.CharsRefBuilder",
            "org.apache.lucene.util.CharsRefBuilder()"
        ],
        [
            "char[]",
            "org.apache.lucene.util.CharsRefBuilder.chars()"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRefBuilder.length()"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.setLength(int)"
        ],
        [
            "char",
            "org.apache.lucene.util.CharsRefBuilder.charAt(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.setCharAt(int, char)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.clear()"
        ],
        [
            "org.apache.lucene.util.CharsRefBuilder",
            "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence)"
        ],
        [
            "org.apache.lucene.util.CharsRefBuilder",
            "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence, int, int)"
        ],
        [
            "org.apache.lucene.util.CharsRefBuilder",
            "org.apache.lucene.util.CharsRefBuilder.append(char)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.copyChars(org.apache.lucene.util.CharsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.grow(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.copyUTF8Bytes(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.copyChars(char[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.CharsRefBuilder.append(char[], int, int)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRefBuilder.get()"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.CharsRefBuilder.toCharsRef()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.CharsRefBuilder.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.CharsRefBuilder.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.CharsRefBuilder.hashCode()"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.util.CharsRefBuilder.append(char)"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence, int, int)"
        ],
        [
            "java.lang.Appendable",
            "org.apache.lucene.util.CharsRefBuilder.append(java.lang.CharSequence)"
        ],
        [
            "org.apache.lucene.util.CloseableThreadLocal",
            "org.apache.lucene.util.CloseableThreadLocal()"
        ],
        [
            "T",
            "org.apache.lucene.util.CloseableThreadLocal.get()"
        ],
        [
            "void",
            "org.apache.lucene.util.CloseableThreadLocal.set(T)"
        ],
        [
            "void",
            "org.apache.lucene.util.CloseableThreadLocal.close()"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.CollectionUtil.introSort(java.util.List<T>, java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.CollectionUtil.introSort(java.util.List<T>)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.CollectionUtil.timSort(java.util.List<T>, java.util.Comparator<? super T>)"
        ],
        [
            "<T extends java.lang.Comparable<? super T>> void",
            "org.apache.lucene.util.CollectionUtil.timSort(java.util.List<T>)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.String, java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.String, java.nio.file.Path, org.apache.lucene.store.LockFactory)"
        ],
        [
            "java.lang.Class<? extends org.apache.lucene.store.Directory>",
            "org.apache.lucene.util.CommandLineUtil.loadDirectoryClass(java.lang.String)"
        ],
        [
            "java.lang.Class<? extends org.apache.lucene.store.FSDirectory>",
            "org.apache.lucene.util.CommandLineUtil.loadFSDirectoryClass(java.lang.String)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.store.FSDirectory",
            "org.apache.lucene.util.CommandLineUtil.newFSDirectory(java.lang.Class<? extends org.apache.lucene.store.FSDirectory>, java.nio.file.Path, org.apache.lucene.store.LockFactory)"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$AtomicCounter.addAndGet(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$AtomicCounter.get()"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$SerialCounter.addAndGet(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.Counter$SerialCounter.get()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.Counter()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.Counter.newCounter()"
        ],
        [
            "org.apache.lucene.util.Counter",
            "org.apache.lucene.util.Counter.newCounter(boolean)"
        ],
        [
            "org.apache.lucene.util.FilterIterator",
            "org.apache.lucene.util.FilterIterator(java.util.Iterator<InnerT>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FilterIterator.hasNext()"
        ],
        [
            "T",
            "org.apache.lucene.util.FilterIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.FilterIterator.remove()"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet.ensureCapacity(org.apache.lucene.util.FixedBitSet, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.bits2words(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.FixedBitSet.intersectionCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "long",
            "org.apache.lucene.util.FixedBitSet.unionCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "long",
            "org.apache.lucene.util.FixedBitSet.andNotCount(org.apache.lucene.util.FixedBitSet, org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet(int)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet(long[], int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.length()"
        ],
        [
            "long",
            "org.apache.lucene.util.FixedBitSet.ramBytesUsed()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.FixedBitSet.getBits()"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.cardinality()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.set(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.getAndSet(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.clear(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.getAndClear(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.nextSetBit(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.prevSetBit(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.or(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.xor(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.xor(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.intersects(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.and(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.andNot(org.apache.lucene.util.FixedBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.flip(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.flip(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.set(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.FixedBitSet.clear(int, int)"
        ],
        [
            "org.apache.lucene.util.FixedBitSet",
            "org.apache.lucene.util.FixedBitSet.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.FixedBitSet.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.FixedBitSet.hashCode()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.FixedBitSet.clone()"
        ],
        [
            "long",
            "org.apache.lucene.util.FrequencyTrackingRingBuffer$IntBag.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.FrequencyTrackingRingBuffer",
            "org.apache.lucene.util.FrequencyTrackingRingBuffer(int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.FrequencyTrackingRingBuffer.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.FrequencyTrackingRingBuffer.add(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.FrequencyTrackingRingBuffer.frequency(int)"
        ],
        [
            "org.apache.lucene.util.GrowableByteArrayDataOutput",
            "org.apache.lucene.util.GrowableByteArrayDataOutput(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.GrowableByteArrayDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.GrowableByteArrayDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.postVisitDirectory(java.nio.file.Path, java.io.IOException)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.visitFileFailed(java.nio.file.Path, java.io.IOException)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.postVisitDirectory(java.lang.Object, java.io.IOException)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.visitFileFailed(java.lang.Object, java.io.IOException)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"
        ],
        [
            "java.nio.file.FileVisitResult",
            "org.apache.lucene.util.IOUtils$1.preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.close(java.io.Closeable...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.close(java.lang.Iterable<? extends java.io.Closeable>)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.io.Closeable...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.closeWhileHandlingException(java.lang.Iterable<? extends java.io.Closeable>)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.util.IOUtils.getDecodingReader(java.io.InputStream, java.nio.charset.Charset)"
        ],
        [
            "java.io.Reader",
            "org.apache.lucene.util.IOUtils.getDecodingReader(java.lang.Class<?>, java.lang.String, java.nio.charset.Charset)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(org.apache.lucene.store.Directory, java.lang.String...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(java.nio.file.Path...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.deleteFilesIgnoringExceptions(java.util.Collection<? extends java.nio.file.Path>)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.deleteFilesIfExist(java.nio.file.Path...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.deleteFilesIfExist(java.util.Collection<? extends java.nio.file.Path>)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.rm(java.nio.file.Path...)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.reThrow(java.lang.Throwable)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.reThrowUnchecked(java.lang.Throwable)"
        ],
        [
            "void",
            "org.apache.lucene.util.IOUtils.fsync(java.nio.file.Path, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IOUtils.spins(org.apache.lucene.store.Directory)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IOUtils.spins(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.util.InPlaceMergeSorter",
            "org.apache.lucene.util.InPlaceMergeSorter()"
        ],
        [
            "void",
            "org.apache.lucene.util.InPlaceMergeSorter.sort(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.InfoStream$NoOutput.message(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.InfoStream$NoOutput.isEnabled(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.util.InfoStream$NoOutput.close()"
        ],
        [
            "org.apache.lucene.util.InfoStream",
            "org.apache.lucene.util.InfoStream()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.InfoStream.org.apache.lucene.util.InfoStream getDefault()"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.InfoStream.void setDefault(org.apache.lucene.util.InfoStream)"
        ],
        [
            "org.apache.lucene.util.IntBlockPool$Allocator",
            "org.apache.lucene.util.IntBlockPool$Allocator(int)"
        ],
        [
            "int[]",
            "org.apache.lucene.util.IntBlockPool$Allocator.getIntBlock()"
        ],
        [
            "org.apache.lucene.util.IntBlockPool$DirectAllocator",
            "org.apache.lucene.util.IntBlockPool$DirectAllocator()"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool$DirectAllocator.recycleIntBlocks(int[][], int, int)"
        ],
        [
            "org.apache.lucene.util.IntBlockPool$SliceReader",
            "org.apache.lucene.util.IntBlockPool$SliceReader(org.apache.lucene.util.IntBlockPool)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool$SliceReader.reset(int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntBlockPool$SliceReader.endOfSlice()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntBlockPool$SliceReader.readInt()"
        ],
        [
            "org.apache.lucene.util.IntBlockPool$SliceWriter",
            "org.apache.lucene.util.IntBlockPool$SliceWriter(org.apache.lucene.util.IntBlockPool)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool$SliceWriter.reset(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool$SliceWriter.writeInt(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.IntBlockPool$SliceWriter.startNewSlice()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntBlockPool$SliceWriter.getCurrentOffset()"
        ],
        [
            "org.apache.lucene.util.IntBlockPool",
            "org.apache.lucene.util.IntBlockPool()"
        ],
        [
            "org.apache.lucene.util.IntBlockPool",
            "org.apache.lucene.util.IntBlockPool(org.apache.lucene.util.IntBlockPool$Allocator)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool.reset()"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool.reset(boolean, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntBlockPool.nextBuffer()"
        ],
        [
            "org.apache.lucene.util.IntroSorter",
            "org.apache.lucene.util.IntroSorter()"
        ],
        [
            "void",
            "org.apache.lucene.util.IntroSorter.sort(int, int)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef(int)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef(int[], int, int)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntsRef.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntsRef.intsEquals(org.apache.lucene.util.IntsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRef.compareTo(org.apache.lucene.util.IntsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.IntsRef.toString()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRef.deepCopyOf(org.apache.lucene.util.IntsRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntsRef.isValid()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.IntsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.IntsRefBuilder",
            "org.apache.lucene.util.IntsRefBuilder()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.IntsRefBuilder.ints()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRefBuilder.length()"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.setLength(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRefBuilder.intAt(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.setIntAt(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.append(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.grow(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.copyInts(int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.copyInts(org.apache.lucene.util.IntsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.IntsRefBuilder.copyUTF8Bytes(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRefBuilder.get()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.IntsRefBuilder.toIntsRef()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.IntsRefBuilder.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.IntsRefBuilder.hashCode()"
        ],
        [
            "org.apache.lucene.util.LongBitSet",
            "org.apache.lucene.util.LongBitSet.ensureCapacity(org.apache.lucene.util.LongBitSet, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.LongBitSet.bits2words(long)"
        ],
        [
            "org.apache.lucene.util.LongBitSet",
            "org.apache.lucene.util.LongBitSet(long)"
        ],
        [
            "org.apache.lucene.util.LongBitSet",
            "org.apache.lucene.util.LongBitSet(long[], long)"
        ],
        [
            "long",
            "org.apache.lucene.util.LongBitSet.length()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.LongBitSet.getBits()"
        ],
        [
            "long",
            "org.apache.lucene.util.LongBitSet.cardinality()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongBitSet.get(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.set(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongBitSet.getAndSet(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.clear(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongBitSet.getAndClear(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.LongBitSet.nextSetBit(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.LongBitSet.prevSetBit(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.or(org.apache.lucene.util.LongBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.xor(org.apache.lucene.util.LongBitSet)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongBitSet.intersects(org.apache.lucene.util.LongBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.and(org.apache.lucene.util.LongBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.andNot(org.apache.lucene.util.LongBitSet)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.flip(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.set(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.LongBitSet.clear(long, long)"
        ],
        [
            "org.apache.lucene.util.LongBitSet",
            "org.apache.lucene.util.LongBitSet.clone()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongBitSet.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.LongBitSet.hashCode()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.LongBitSet.clone()"
        ],
        [
            "long",
            "org.apache.lucene.util.LongValues$1.get(long)"
        ],
        [
            "org.apache.lucene.util.LongValues",
            "org.apache.lucene.util.LongValues()"
        ],
        [
            "long",
            "org.apache.lucene.util.LongValues.get(int)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef()"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef(int)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef(long[], int, int)"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.LongsRef.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongsRef.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongsRef.longsEquals(org.apache.lucene.util.LongsRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.LongsRef.compareTo(org.apache.lucene.util.LongsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.LongsRef.toString()"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.LongsRef.deepCopyOf(org.apache.lucene.util.LongsRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.LongsRef.isValid()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.LongsRef.clone()"
        ],
        [
            "int",
            "org.apache.lucene.util.LongsRef.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.MapOfSets",
            "org.apache.lucene.util.MapOfSets(java.util.Map<K, java.util.Set<V>>)"
        ],
        [
            "java.util.Map<K, java.util.Set<V>>",
            "org.apache.lucene.util.MapOfSets.getMap()"
        ],
        [
            "int",
            "org.apache.lucene.util.MapOfSets.put(K, V)"
        ],
        [
            "int",
            "org.apache.lucene.util.MapOfSets.putAll(K, java.util.Collection<? extends V>)"
        ],
        [
            "int",
            "org.apache.lucene.util.MathUtil.log(long, int)"
        ],
        [
            "double",
            "org.apache.lucene.util.MathUtil.log(double, double)"
        ],
        [
            "long",
            "org.apache.lucene.util.MathUtil.gcd(long, long)"
        ],
        [
            "double",
            "org.apache.lucene.util.MathUtil.asinh(double)"
        ],
        [
            "double",
            "org.apache.lucene.util.MathUtil.acosh(double)"
        ],
        [
            "double",
            "org.apache.lucene.util.MathUtil.atanh(double)"
        ],
        [
            "org.apache.lucene.util.MergedIterator",
            "org.apache.lucene.util.MergedIterator(java.util.Iterator<T>...)"
        ],
        [
            "org.apache.lucene.util.MergedIterator",
            "org.apache.lucene.util.MergedIterator(boolean, java.util.Iterator<T>...)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.MergedIterator.hasNext()"
        ],
        [
            "T",
            "org.apache.lucene.util.MergedIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.MergedIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.MergedIterator.next()"
        ],
        [
            "org.apache.lucene.util.NamedSPILoader",
            "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>)"
        ],
        [
            "org.apache.lucene.util.NamedSPILoader",
            "org.apache.lucene.util.NamedSPILoader(java.lang.Class<S>, java.lang.ClassLoader)"
        ],
        [
            "synchronized",
            "org.apache.lucene.util.NamedSPILoader.void reload(java.lang.ClassLoader)"
        ],
        [
            "void",
            "org.apache.lucene.util.NamedSPILoader.checkServiceName(java.lang.String)"
        ],
        [
            "S",
            "org.apache.lucene.util.NamedSPILoader.lookup(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.NamedThreadFactory",
            "org.apache.lucene.util.NamedThreadFactory(java.lang.String)"
        ],
        [
            "java.lang.Thread",
            "org.apache.lucene.util.NamedThreadFactory.newThread(java.lang.Runnable)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.NotDocIdSet$1.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.NotDocIdSet$1.length()"
        ],
        [
            "int",
            "org.apache.lucene.util.NotDocIdSet$2.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.NotDocIdSet$2.advance(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.NotDocIdSet$2.docID()"
        ],
        [
            "long",
            "org.apache.lucene.util.NotDocIdSet$2.cost()"
        ],
        [
            "org.apache.lucene.util.NotDocIdSet",
            "org.apache.lucene.util.NotDocIdSet(int, org.apache.lucene.search.DocIdSet)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.NotDocIdSet.isCacheable()"
        ],
        [
            "org.apache.lucene.util.Bits",
            "org.apache.lucene.util.NotDocIdSet.bits()"
        ],
        [
            "long",
            "org.apache.lucene.util.NotDocIdSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.NotDocIdSet.iterator()"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.util.NumericUtils$3.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.util.NumericUtils$4.iterator(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder",
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder()"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$IntRangeBuilder.addRange(int, int, int)"
        ],
        [
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder",
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder()"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils$LongRangeBuilder.addRange(long, long, int)"
        ],
        [
            "org.apache.lucene.util.NumericUtils$SeekingNumericFilteredTermsEnum",
            "org.apache.lucene.util.NumericUtils$SeekingNumericFilteredTermsEnum(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.index.TermsEnum$SeekStatus",
            "org.apache.lucene.util.NumericUtils$SeekingNumericFilteredTermsEnum.seekCeil(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.longToPrefixCoded(long, int, org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.intToPrefixCoded(int, int, org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.longToPrefixCodedBytes(long, int, org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.intToPrefixCodedBytes(int, int, org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.getPrefixCodedLongShift(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.getPrefixCodedIntShift(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.prefixCodedToLong(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.prefixCodedToInt(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.doubleToSortableLong(double)"
        ],
        [
            "double",
            "org.apache.lucene.util.NumericUtils.sortableLongToDouble(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.floatToSortableInt(float)"
        ],
        [
            "float",
            "org.apache.lucene.util.NumericUtils.sortableIntToFloat(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.sortableDoubleBits(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.sortableFloatBits(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.splitLongRange(org.apache.lucene.util.NumericUtils$LongRangeBuilder, int, long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.NumericUtils.splitIntRange(org.apache.lucene.util.NumericUtils$IntRangeBuilder, int, int, int)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.util.NumericUtils.filterPrefixCodedLongs(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.util.NumericUtils.filterPrefixCodedInts(org.apache.lucene.index.TermsEnum)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.getMinInt(org.apache.lucene.index.Terms)"
        ],
        [
            "int",
            "org.apache.lucene.util.NumericUtils.getMaxInt(org.apache.lucene.index.Terms)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.getMinLong(org.apache.lucene.index.Terms)"
        ],
        [
            "long",
            "org.apache.lucene.util.NumericUtils.getMaxLong(org.apache.lucene.index.Terms)"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$BufferSize",
            "org.apache.lucene.util.OfflineSorter$BufferSize.megabytes(long)"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$BufferSize",
            "org.apache.lucene.util.OfflineSorter$BufferSize.automatic()"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader(java.io.DataInput)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader.read(org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader.read()"
        ],
        [
            "void",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesReader.close()"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter(java.nio.file.Path)"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter(java.io.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.write(org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.write(byte[])"
        ],
        [
            "void",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.write(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.OfflineSorter$ByteSequencesWriter.close()"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$SortInfo",
            "org.apache.lucene.util.OfflineSorter$SortInfo(org.apache.lucene.util.OfflineSorter)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.OfflineSorter$SortInfo.toString()"
        ],
        [
            "org.apache.lucene.util.OfflineSorter",
            "org.apache.lucene.util.OfflineSorter()"
        ],
        [
            "org.apache.lucene.util.OfflineSorter",
            "org.apache.lucene.util.OfflineSorter(java.util.Comparator<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.util.OfflineSorter",
            "org.apache.lucene.util.OfflineSorter(java.util.Comparator<org.apache.lucene.util.BytesRef>, org.apache.lucene.util.OfflineSorter$BufferSize, java.nio.file.Path, int)"
        ],
        [
            "org.apache.lucene.util.OfflineSorter$SortInfo",
            "org.apache.lucene.util.OfflineSorter.sort(java.nio.file.Path, java.nio.file.Path)"
        ],
        [
            "java.nio.file.Path",
            "org.apache.lucene.util.OfflineSorter.defaultTempDir()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.setPosition(long)"
        ],
        [
            "byte",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.readBytes(byte[], int, int)"
        ],
        [
            "org.apache.lucene.store.DataInput",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput.clone()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput(org.apache.lucene.util.PagedBytes)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.writeBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$Reader.fillSlice(org.apache.lucene.util.BytesRef, long, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes$Reader.fill(org.apache.lucene.util.BytesRef, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes$Reader.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.PagedBytes$Reader.toString()"
        ],
        [
            "org.apache.lucene.util.PagedBytes",
            "org.apache.lucene.util.PagedBytes(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.store.IndexInput, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.PagedBytes.copy(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.PagedBytes$Reader",
            "org.apache.lucene.util.PagedBytes.freeze(boolean)"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes.getPointer()"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.util.PagedBytes.copyUsingLengthPrefix(org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataInput",
            "org.apache.lucene.util.PagedBytes.getDataInput()"
        ],
        [
            "org.apache.lucene.util.PagedBytes$PagedBytesDataOutput",
            "org.apache.lucene.util.PagedBytes.getDataOutput()"
        ],
        [
            "org.apache.lucene.util.PrintStreamInfoStream",
            "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream)"
        ],
        [
            "org.apache.lucene.util.PrintStreamInfoStream",
            "org.apache.lucene.util.PrintStreamInfoStream(java.io.PrintStream, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.PrintStreamInfoStream.message(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.PrintStreamInfoStream.isEnabled(java.lang.String)"
        ],
        [
            "void",
            "org.apache.lucene.util.PrintStreamInfoStream.close()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.PrintStreamInfoStream.isSystemStream()"
        ],
        [
            "org.apache.lucene.util.PriorityQueue",
            "org.apache.lucene.util.PriorityQueue(int)"
        ],
        [
            "org.apache.lucene.util.PriorityQueue",
            "org.apache.lucene.util.PriorityQueue(int, boolean)"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.add(T)"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.insertWithOverflow(T)"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.top()"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.pop()"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.updateTop()"
        ],
        [
            "T",
            "org.apache.lucene.util.PriorityQueue.updateTop(T)"
        ],
        [
            "int",
            "org.apache.lucene.util.PriorityQueue.size()"
        ],
        [
            "void",
            "org.apache.lucene.util.PriorityQueue.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.PriorityQueue.remove(T)"
        ],
        [
            "org.apache.lucene.util.QueryBuilder",
            "org.apache.lucene.util.QueryBuilder(org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.util.QueryBuilder.createBooleanQuery(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.util.QueryBuilder.createBooleanQuery(java.lang.String, java.lang.String, org.apache.lucene.search.BooleanClause$Occur)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.util.QueryBuilder.createPhraseQuery(java.lang.String, java.lang.String)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.util.QueryBuilder.createPhraseQuery(java.lang.String, java.lang.String, int)"
        ],
        [
            "org.apache.lucene.search.Query",
            "org.apache.lucene.util.QueryBuilder.createMinShouldMatchQuery(java.lang.String, java.lang.String, float)"
        ],
        [
            "org.apache.lucene.analysis.Analyzer",
            "org.apache.lucene.util.QueryBuilder.getAnalyzer()"
        ],
        [
            "void",
            "org.apache.lucene.util.QueryBuilder.setAnalyzer(org.apache.lucene.analysis.Analyzer)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.QueryBuilder.getEnablePositionIncrements()"
        ],
        [
            "void",
            "org.apache.lucene.util.QueryBuilder.setEnablePositionIncrements(boolean)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.alignObjectSize(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(java.lang.Long)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(byte[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(boolean[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(char[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(short[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(int[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(float[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(long[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(double[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(java.lang.Object[])"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.shallowSizeOf(java.lang.Object)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.shallowSizeOfInstance(java.lang.Class<?>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RamUsageEstimator.humanReadableUnits(long, java.text.DecimalFormat)"
        ],
        [
            "long",
            "org.apache.lucene.util.RamUsageEstimator.sizeOf(org.apache.lucene.util.Accountable[])"
        ],
        [
            "org.apache.lucene.util.RecyclingByteBlockAllocator",
            "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int, org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.util.RecyclingByteBlockAllocator",
            "org.apache.lucene.util.RecyclingByteBlockAllocator(int, int)"
        ],
        [
            "org.apache.lucene.util.RecyclingByteBlockAllocator",
            "org.apache.lucene.util.RecyclingByteBlockAllocator()"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.getByteBlock()"
        ],
        [
            "void",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.recycleByteBlocks(byte[][], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.numBufferedBlocks()"
        ],
        [
            "long",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.bytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.maxBufferedBlocks()"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingByteBlockAllocator.freeBlocks(int)"
        ],
        [
            "org.apache.lucene.util.RecyclingIntBlockAllocator",
            "org.apache.lucene.util.RecyclingIntBlockAllocator(int, int, org.apache.lucene.util.Counter)"
        ],
        [
            "org.apache.lucene.util.RecyclingIntBlockAllocator",
            "org.apache.lucene.util.RecyclingIntBlockAllocator(int, int)"
        ],
        [
            "org.apache.lucene.util.RecyclingIntBlockAllocator",
            "org.apache.lucene.util.RecyclingIntBlockAllocator()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.RecyclingIntBlockAllocator.getIntBlock()"
        ],
        [
            "void",
            "org.apache.lucene.util.RecyclingIntBlockAllocator.recycleIntBlocks(int[][], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingIntBlockAllocator.numBufferedBlocks()"
        ],
        [
            "long",
            "org.apache.lucene.util.RecyclingIntBlockAllocator.bytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingIntBlockAllocator.maxBufferedBlocks()"
        ],
        [
            "int",
            "org.apache.lucene.util.RecyclingIntBlockAllocator.freeBlocks(int)"
        ],
        [
            "org.apache.lucene.util.RefCount",
            "org.apache.lucene.util.RefCount(T)"
        ],
        [
            "void",
            "org.apache.lucene.util.RefCount.decRef()"
        ],
        [
            "T",
            "org.apache.lucene.util.RefCount.get()"
        ],
        [
            "int",
            "org.apache.lucene.util.RefCount.getRefCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.RefCount.incRef()"
        ],
        [
            "org.apache.lucene.util.RoaringDocIdSet$Builder",
            "org.apache.lucene.util.RoaringDocIdSet$Builder(int)"
        ],
        [
            "org.apache.lucene.util.RoaringDocIdSet$Builder",
            "org.apache.lucene.util.RoaringDocIdSet$Builder.add(int)"
        ],
        [
            "org.apache.lucene.util.RoaringDocIdSet$Builder",
            "org.apache.lucene.util.RoaringDocIdSet$Builder.add(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.util.RoaringDocIdSet",
            "org.apache.lucene.util.RoaringDocIdSet$Builder.build()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet$Iterator.docID()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet$Iterator.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet$Iterator.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.RoaringDocIdSet$Iterator.cost()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.docID()"
        ],
        [
            "long",
            "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.cost()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet$1.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.RoaringDocIdSet$ShortArrayDocIdSet.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.RoaringDocIdSet.isCacheable()"
        ],
        [
            "long",
            "org.apache.lucene.util.RoaringDocIdSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.RoaringDocIdSet.iterator()"
        ],
        [
            "int",
            "org.apache.lucene.util.RoaringDocIdSet.cardinality()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.RoaringDocIdSet.toString()"
        ],
        [
            "org.apache.lucene.util.RollingBuffer",
            "org.apache.lucene.util.RollingBuffer()"
        ],
        [
            "void",
            "org.apache.lucene.util.RollingBuffer.reset()"
        ],
        [
            "T",
            "org.apache.lucene.util.RollingBuffer.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.RollingBuffer.getMaxPos()"
        ],
        [
            "void",
            "org.apache.lucene.util.RollingBuffer.freeBefore(int)"
        ],
        [
            "<S> org.apache.lucene.util.SPIClassIterator<S>",
            "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>)"
        ],
        [
            "<S> org.apache.lucene.util.SPIClassIterator<S>",
            "org.apache.lucene.util.SPIClassIterator.get(java.lang.Class<S>, java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.SPIClassIterator.isParentClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.SPIClassIterator.hasNext()"
        ],
        [
            "java.lang.Class<? extends S>",
            "org.apache.lucene.util.SPIClassIterator.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.SPIClassIterator.remove()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.SPIClassIterator.next()"
        ],
        [
            "org.apache.lucene.util.SentinelIntSet",
            "org.apache.lucene.util.SentinelIntSet(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SentinelIntSet.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.hash(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.size()"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.getSlot(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.find(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.SentinelIntSet.exists(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SentinelIntSet.put(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SentinelIntSet.rehash()"
        ],
        [
            "long",
            "org.apache.lucene.util.SentinelIntSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.SetOnce$AlreadySetException",
            "org.apache.lucene.util.SetOnce$AlreadySetException()"
        ],
        [
            "org.apache.lucene.util.SetOnce",
            "org.apache.lucene.util.SetOnce()"
        ],
        [
            "org.apache.lucene.util.SetOnce",
            "org.apache.lucene.util.SetOnce(T)"
        ],
        [
            "void",
            "org.apache.lucene.util.SetOnce.set(T)"
        ],
        [
            "T",
            "org.apache.lucene.util.SetOnce.get()"
        ],
        [
            "org.apache.lucene.util.SloppyMath",
            "org.apache.lucene.util.SloppyMath()"
        ],
        [
            "double",
            "org.apache.lucene.util.SloppyMath.haversin(double, double, double, double)"
        ],
        [
            "double",
            "org.apache.lucene.util.SloppyMath.cos(double)"
        ],
        [
            "double",
            "org.apache.lucene.util.SloppyMath.asin(double)"
        ],
        [
            "double",
            "org.apache.lucene.util.SloppyMath.earthDiameter(double)"
        ],
        [
            "byte",
            "org.apache.lucene.util.SmallFloat.floatToByte(float, int, int)"
        ],
        [
            "float",
            "org.apache.lucene.util.SmallFloat.byteToFloat(byte, int, int)"
        ],
        [
            "byte",
            "org.apache.lucene.util.SmallFloat.floatToByte315(float)"
        ],
        [
            "float",
            "org.apache.lucene.util.SmallFloat.byte315ToFloat(byte)"
        ],
        [
            "byte",
            "org.apache.lucene.util.SmallFloat.floatToByte52(float)"
        ],
        [
            "float",
            "org.apache.lucene.util.SmallFloat.byte52ToFloat(byte)"
        ],
        [
            "org.apache.lucene.util.SparseFixedBitSet",
            "org.apache.lucene.util.SparseFixedBitSet(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SparseFixedBitSet.length()"
        ],
        [
            "int",
            "org.apache.lucene.util.SparseFixedBitSet.cardinality()"
        ],
        [
            "int",
            "org.apache.lucene.util.SparseFixedBitSet.approximateCardinality()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.SparseFixedBitSet.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SparseFixedBitSet.set(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SparseFixedBitSet.clear(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SparseFixedBitSet.clear(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SparseFixedBitSet.nextSetBit(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.SparseFixedBitSet.prevSetBit(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.SparseFixedBitSet.or(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "void",
            "org.apache.lucene.util.SparseFixedBitSet.and(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "long",
            "org.apache.lucene.util.SparseFixedBitSet.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.SparseFixedBitSet.toString()"
        ],
        [
            "org.apache.lucene.util.StrictStringTokenizer",
            "org.apache.lucene.util.StrictStringTokenizer(java.lang.String, char)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.StrictStringTokenizer.nextToken()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StrictStringTokenizer.hasMoreTokens()"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper.bytesDifference(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper.sortKeyLength(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.equals(java.lang.String, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.startsWith(byte[], org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.startsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.StringHelper.endsWith(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper.murmurhash3_x86_32(byte[], int, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.StringHelper.murmurhash3_x86_32(org.apache.lucene.util.BytesRef, int)"
        ],
        [
            "byte[]",
            "org.apache.lucene.util.StringHelper.randomId()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.StringHelper.idToString(byte[])"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.StringHelper.intsRefToBytesRef(org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.ThreadInterruptedException",
            "org.apache.lucene.util.ThreadInterruptedException(java.lang.InterruptedException)"
        ],
        [
            "void",
            "org.apache.lucene.util.TimSorter.sort(int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.ToStringUtils.boost(float)"
        ],
        [
            "void",
            "org.apache.lucene.util.ToStringUtils.byteArray(java.lang.StringBuilder, byte[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.ToStringUtils.longHex(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(char[], int, int, byte[])"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.UTF16toUTF8(java.lang.CharSequence, int, int, byte[])"
        ],
        [
            "boolean",
            "org.apache.lucene.util.UnicodeUtil.validUTF16String(java.lang.CharSequence)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.UnicodeUtil.validUTF16String(char[], int)"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.codePointCount(org.apache.lucene.util.BytesRef)"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.UTF8toUTF32(org.apache.lucene.util.BytesRef, int[])"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.UnicodeUtil.newString(int[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.UnicodeUtil.toHexString(java.lang.String)"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(byte[], int, int, char[])"
        ],
        [
            "int",
            "org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(org.apache.lucene.util.BytesRef, char[])"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.util.Version.parse(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.util.Version.parseLeniently(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.Version",
            "org.apache.lucene.util.Version.fromBits(int, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Version.onOrAfter(org.apache.lucene.util.Version)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.Version.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.Version.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.Version.hashCode()"
        ],
        [
            "org.apache.lucene.util.VirtualMethod",
            "org.apache.lucene.util.VirtualMethod(java.lang.Class<C>, java.lang.String, java.lang.Class<?>...)"
        ],
        [
            "int",
            "org.apache.lucene.util.VirtualMethod.getImplementationDistance(java.lang.Class<? extends C>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.VirtualMethod.isOverriddenAsOf(java.lang.Class<? extends C>)"
        ],
        [
            "<C> int",
            "org.apache.lucene.util.VirtualMethod.compareImplementationDistance(java.lang.Class<? extends C>, org.apache.lucene.util.VirtualMethod<C>, org.apache.lucene.util.VirtualMethod<C>)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap$1.hasNext()"
        ],
        [
            "K",
            "org.apache.lucene.util.WeakIdentityMap$1.next()"
        ],
        [
            "void",
            "org.apache.lucene.util.WeakIdentityMap$1.remove()"
        ],
        [
            "int",
            "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap$IdentityWeakReference.equals(java.lang.Object)"
        ],
        [
            "<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>",
            "org.apache.lucene.util.WeakIdentityMap.newHashMap()"
        ],
        [
            "<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>",
            "org.apache.lucene.util.WeakIdentityMap.newHashMap(boolean)"
        ],
        [
            "<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>",
            "org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap()"
        ],
        [
            "<K, V> org.apache.lucene.util.WeakIdentityMap<K, V>",
            "org.apache.lucene.util.WeakIdentityMap.newConcurrentHashMap(boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.WeakIdentityMap.clear()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap.containsKey(java.lang.Object)"
        ],
        [
            "V",
            "org.apache.lucene.util.WeakIdentityMap.get(java.lang.Object)"
        ],
        [
            "V",
            "org.apache.lucene.util.WeakIdentityMap.put(K, V)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.WeakIdentityMap.isEmpty()"
        ],
        [
            "V",
            "org.apache.lucene.util.WeakIdentityMap.remove(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.WeakIdentityMap.size()"
        ],
        [
            "void",
            "org.apache.lucene.util.WeakIdentityMap.reap()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeEmpty()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeEmptyString()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeAnyString()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeAnyChar()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automata.appendAnyChar(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeChar(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automata.appendChar(org.apache.lucene.util.automaton.Automaton, int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeCharRange(int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeInterval(int, int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeString(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeString(int[], int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automata.makeStringUnion(java.util.Collection<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton$Builder",
            "org.apache.lucene.util.automaton.Automaton$Builder()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton$Builder",
            "org.apache.lucene.util.automaton.Automaton$Builder(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton$Builder.addTransition(int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton$Builder.addTransition(int, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton$Builder.addEpsilon(int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton$Builder.finish()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton$Builder.createState()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton$Builder.setAccept(int, boolean)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton$Builder.isAccept(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton$Builder.getNumStates()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton$Builder.copy(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton$Builder.copyStates(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Automaton(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.createState()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.setAccept(int, boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.Transition[][]",
            "org.apache.lucene.util.automaton.Automaton.getSortedTransitions()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.isAccept(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.addTransition(int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.addTransition(int, int, int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.addEpsilon(int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.copy(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Automaton.isDeterministic()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.finishState()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.getNumStates()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.getNumTransitions()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.getNumTransitions(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.initTransition(int, org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.getNextTransition(org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Automaton.getTransition(int, int, org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Automaton.toDot()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Automaton.step(int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.automaton.Automaton.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.automaton.ByteRunAutomaton",
            "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.ByteRunAutomaton",
            "org.apache.lucene.util.automaton.ByteRunAutomaton(org.apache.lucene.util.automaton.Automaton, boolean, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.ByteRunAutomaton.run(byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.CharacterRunAutomaton",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.CharacterRunAutomaton",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.CharacterRunAutomaton.run(char[], int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE[]",
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.values()"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE",
            "org.apache.lucene.util.automaton.CompiledAutomaton$AUTOMATON_TYPE.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton",
            "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton",
            "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.CompiledAutomaton",
            "org.apache.lucene.util.automaton.CompiledAutomaton(org.apache.lucene.util.automaton.Automaton, java.lang.Boolean, boolean, int, boolean)"
        ],
        [
            "org.apache.lucene.index.TermsEnum",
            "org.apache.lucene.util.automaton.CompiledAutomaton.getTermsEnum(org.apache.lucene.index.Terms)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.automaton.CompiledAutomaton.floor(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.CompiledAutomaton.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.CompiledAutomaton.equals(java.lang.Object)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State.hashCode()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.add(org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder$State",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.complete()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.DaciukMihovAutomatonBuilder.build(java.util.Collection<org.apache.lucene.util.BytesRef>)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev1ParametricDescription",
            "org.apache.lucene.util.automaton.Lev1ParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev1TParametricDescription",
            "org.apache.lucene.util.automaton.Lev1TParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev2ParametricDescription",
            "org.apache.lucene.util.automaton.Lev2ParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Lev2TParametricDescription",
            "org.apache.lucene.util.automaton.Lev2TParametricDescription(int)"
        ],
        [
            "org.apache.lucene.util.automaton.LevenshteinAutomata",
            "org.apache.lucene.util.automaton.LevenshteinAutomata(java.lang.String, boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.LevenshteinAutomata",
            "org.apache.lucene.util.automaton.LevenshteinAutomata(int[], int, boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.LevenshteinAutomata.toAutomaton(int, java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.MinimizationOperations.minimize(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Operations$PathNode.resetState(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Operations$PathNode.nextLabel(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Operations$PointTransitionSet.reset()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Operations$PointTransitionSet.sort()"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Operations$PointTransitionSet.add(org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Operations$PointTransitionSet.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Operations$PointTransitions.compareTo(org.apache.lucene.util.automaton.Operations$PointTransitions)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Operations$PointTransitions.reset(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations$PointTransitions.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Operations$PointTransitions.hashCode()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.Operations$PointTransitions.compareTo(java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.Operations$TransitionList.add(org.apache.lucene.util.automaton.Transition)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.concatenate(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.concatenate(java.util.List<org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.optional(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.repeat(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.repeat(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.repeat(org.apache.lucene.util.automaton.Automaton, int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.complement(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.minus(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.intersection(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.sameLanguage(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.hasDeadStates(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.hasDeadStatesFromInitial(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.hasDeadStatesToAccept(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.subsetOf(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.union(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.union(java.util.Collection<org.apache.lucene.util.automaton.Automaton>)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.determinize(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.isEmpty(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.isTotal(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.isTotal(org.apache.lucene.util.automaton.Automaton, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.run(org.apache.lucene.util.automaton.Automaton, java.lang.String)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.run(org.apache.lucene.util.automaton.Automaton, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.removeDeadStates(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.Operations.isFinite(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Operations.getCommonPrefix(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.automaton.Operations.getCommonPrefixBytesRef(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.automaton.Operations.getSingleton(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.automaton.Operations.getCommonSuffixBytesRef(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.Operations.reverse(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp$Kind[]",
            "org.apache.lucene.util.automaton.RegExp$Kind.values()"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp$Kind",
            "org.apache.lucene.util.automaton.RegExp$Kind.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp",
            "org.apache.lucene.util.automaton.RegExp(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp",
            "org.apache.lucene.util.automaton.RegExp(java.lang.String, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton(int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton(org.apache.lucene.util.automaton.AutomatonProvider, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.RegExp.toAutomaton(java.util.Map<java.lang.String, org.apache.lucene.util.automaton.Automaton>, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.RegExp.getOriginalString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.RegExp.toString()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.RegExp.toStringTree()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.RunAutomaton.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.getSize()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.RunAutomaton.isAccept(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.getInitialState()"
        ],
        [
            "int[]",
            "org.apache.lucene.util.automaton.RunAutomaton.getCharIntervals()"
        ],
        [
            "org.apache.lucene.util.automaton.RunAutomaton",
            "org.apache.lucene.util.automaton.RunAutomaton(org.apache.lucene.util.automaton.Automaton, int, boolean)"
        ],
        [
            "org.apache.lucene.util.automaton.RunAutomaton",
            "org.apache.lucene.util.automaton.RunAutomaton(org.apache.lucene.util.automaton.Automaton, int, boolean, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.step(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.RunAutomaton.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.RunAutomaton.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int[], int, int)"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.SortedIntSet.incr(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.SortedIntSet.decr(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.automaton.SortedIntSet.computeHash()"
        ],
        [
            "org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet",
            "org.apache.lucene.util.automaton.SortedIntSet.freeze(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.SortedIntSet.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.SortedIntSet.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.SortedIntSet.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.StatePair",
            "org.apache.lucene.util.automaton.StatePair(int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.automaton.StatePair.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.StatePair.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.StatePair.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException",
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException(org.apache.lucene.util.automaton.RegExp, org.apache.lucene.util.automaton.TooComplexToDeterminizeException)"
        ],
        [
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException",
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException(org.apache.lucene.util.automaton.Automaton, int)"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException.getAutomaton()"
        ],
        [
            "org.apache.lucene.util.automaton.RegExp",
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException.getRegExp()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.TooComplexToDeterminizeException.getMaxDeterminizedStates()"
        ],
        [
            "org.apache.lucene.util.automaton.Transition",
            "org.apache.lucene.util.automaton.Transition()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.Transition.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence()"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.byteAt(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.numBits(int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.automaton.UTF32ToUTF8$UTF8Sequence.toString()"
        ],
        [
            "org.apache.lucene.util.automaton.UTF32ToUTF8",
            "org.apache.lucene.util.automaton.UTF32ToUTF8()"
        ],
        [
            "org.apache.lucene.util.automaton.Automaton",
            "org.apache.lucene.util.automaton.UTF32ToUTF8.convert(org.apache.lucene.util.automaton.Automaton)"
        ],
        [
            "org.apache.lucene.util.fst.Builder$Arc",
            "org.apache.lucene.util.fst.Builder$Arc()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.Builder$CompiledNode.isCompiled()"
        ],
        [
            "org.apache.lucene.util.fst.Builder$UnCompiledNode",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode(org.apache.lucene.util.fst.Builder<T>, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.isCompiled()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.clear()"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.getLastOutput(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.addArc(int, org.apache.lucene.util.fst.Builder$Node)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.replaceLast(int, org.apache.lucene.util.fst.Builder$Node, T, boolean)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.deleteLast(int, org.apache.lucene.util.fst.Builder$Node)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.setLastOutput(int, T)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder$UnCompiledNode.prependOutput(T)"
        ],
        [
            "org.apache.lucene.util.fst.Builder",
            "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, org.apache.lucene.util.fst.Outputs<T>)"
        ],
        [
            "org.apache.lucene.util.fst.Builder",
            "org.apache.lucene.util.fst.Builder(org.apache.lucene.util.fst.FST$INPUT_TYPE, int, int, boolean, boolean, int, org.apache.lucene.util.fst.Outputs<T>, boolean, float, boolean, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.Builder.getTotStateCount()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.Builder.getTermCount()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.Builder.getMappedStateCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Builder.add(org.apache.lucene.util.IntsRef, T)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.Builder.fstRamBytesUsed()"
        ],
        [
            "org.apache.lucene.util.fst.ByteSequenceOutputs",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.common(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.add(org.apache.lucene.util.BytesRef, org.apache.lucene.util.BytesRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.write(org.apache.lucene.util.BytesRef, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.skipOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(org.apache.lucene.util.BytesRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.ramBytesUsed(org.apache.lucene.util.BytesRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.toString()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.ramBytesUsed(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.ByteSequenceOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput",
            "org.apache.lucene.util.fst.BytesRefFSTEnum$InputOutput()"
        ],
        [
            "org.apache.lucene.util.fst.BytesRefFSTEnum",
            "org.apache.lucene.util.fst.BytesRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"
        ],
        [
            "byte",
            "org.apache.lucene.util.fst.BytesStore$1.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore$1.skipBytes(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore$1.readBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.BytesStore$1.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore$1.setPosition(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.BytesStore$1.reversed()"
        ],
        [
            "byte",
            "org.apache.lucene.util.fst.BytesStore$2.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore$2.skipBytes(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore$2.readBytes(byte[], int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.BytesStore$2.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore$2.setPosition(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.BytesStore$2.reversed()"
        ],
        [
            "org.apache.lucene.util.fst.BytesStore",
            "org.apache.lucene.util.fst.BytesStore(int)"
        ],
        [
            "org.apache.lucene.util.fst.BytesStore",
            "org.apache.lucene.util.fst.BytesStore(org.apache.lucene.store.DataInput, long, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.writeByte(int, byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.writeByte(byte)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.writeBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.copyBytes(long, long, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.writeInt(long, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.reverse(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.skipBytes(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.BytesStore.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.truncate(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.finish()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.BytesStore.writeTo(org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.fst.FST$BytesReader",
            "org.apache.lucene.util.fst.BytesStore.getForwardReader()"
        ],
        [
            "org.apache.lucene.util.fst.FST$BytesReader",
            "org.apache.lucene.util.fst.BytesStore.getReverseReader()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.BytesStore.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.BytesStore.toString()"
        ],
        [
            "org.apache.lucene.util.fst.CharSequenceOutputs",
            "org.apache.lucene.util.fst.CharSequenceOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.common(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.add(org.apache.lucene.util.CharsRef, org.apache.lucene.util.CharsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.CharSequenceOutputs.write(org.apache.lucene.util.CharsRef, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.CharSequenceOutputs.skipOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.CharsRef",
            "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(org.apache.lucene.util.CharsRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.CharSequenceOutputs.ramBytesUsed(org.apache.lucene.util.CharsRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.CharSequenceOutputs.ramBytesUsed(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.CharSequenceOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.CharSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.CharSequenceOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.FST$Arc",
            "org.apache.lucene.util.fst.FST$Arc()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$Arc.isLast()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$Arc.isFinal()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.FST$Arc.toString()"
        ],
        [
            "org.apache.lucene.util.fst.FST$BytesReader",
            "org.apache.lucene.util.fst.FST$BytesReader()"
        ],
        [
            "org.apache.lucene.util.fst.FST$INPUT_TYPE[]",
            "org.apache.lucene.util.fst.FST$INPUT_TYPE.values()"
        ],
        [
            "org.apache.lucene.util.fst.FST$INPUT_TYPE",
            "org.apache.lucene.util.fst.FST$INPUT_TYPE.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.fst.FST$NodeAndInCount",
            "org.apache.lucene.util.fst.FST$NodeAndInCount(int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST$NodeAndInCount.compareTo(org.apache.lucene.util.fst.FST$NodeAndInCount)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST$NodeAndInCount.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.FST$NodeQueue",
            "org.apache.lucene.util.fst.FST$NodeQueue(int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$NodeQueue.lessThan(org.apache.lucene.util.fst.FST$NodeAndInCount, org.apache.lucene.util.fst.FST$NodeAndInCount)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.FST$NodeQueue.lessThan(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.FST",
            "org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>)"
        ],
        [
            "org.apache.lucene.util.fst.FST",
            "org.apache.lucene.util.fst.FST(org.apache.lucene.store.DataInput, org.apache.lucene.util.fst.Outputs<T>, int)"
        ],
        [
            "org.apache.lucene.util.fst.FST$INPUT_TYPE",
            "org.apache.lucene.util.fst.FST.getInputType()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.FST.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.FST.toString()"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.FST.getEmptyOutput()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST.save(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.FST.save(java.nio.file.Path)"
        ],
        [
            "<T> org.apache.lucene.util.fst.FST<T>",
            "org.apache.lucene.util.fst.FST.read(java.nio.file.Path, org.apache.lucene.util.fst.Outputs<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.readLabel(org.apache.lucene.store.DataInput)"
        ],
        [
            "<T> boolean",
            "org.apache.lucene.util.fst.FST.targetHasArcs(org.apache.lucene.util.fst.FST$Arc<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.FST.readNextArcLabel(org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.FST.getNodeCount()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.FST.getArcCount()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.FST.getArcWithOutputCount()"
        ],
        [
            "org.apache.lucene.util.fst.FST$BytesReader",
            "org.apache.lucene.util.fst.FST.getBytesReader()"
        ],
        [
            "org.apache.lucene.util.fst.ForwardBytesReader",
            "org.apache.lucene.util.fst.ForwardBytesReader(byte[])"
        ],
        [
            "byte",
            "org.apache.lucene.util.fst.ForwardBytesReader.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ForwardBytesReader.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ForwardBytesReader.skipBytes(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.ForwardBytesReader.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ForwardBytesReader.setPosition(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.ForwardBytesReader.reversed()"
        ],
        [
            "org.apache.lucene.util.fst.IntSequenceOutputs",
            "org.apache.lucene.util.fst.IntSequenceOutputs.getSingleton()"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.common(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.add(org.apache.lucene.util.IntsRef, org.apache.lucene.util.IntsRef)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.IntSequenceOutputs.write(org.apache.lucene.util.IntsRef, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.IntSequenceOutputs.skipOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(org.apache.lucene.util.IntsRef)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.IntSequenceOutputs.ramBytesUsed(org.apache.lucene.util.IntsRef)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.IntSequenceOutputs.toString()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.IntSequenceOutputs.ramBytesUsed(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.IntSequenceOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.IntSequenceOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.IntSequenceOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput",
            "org.apache.lucene.util.fst.IntsRefFSTEnum$InputOutput()"
        ],
        [
            "org.apache.lucene.util.fst.IntsRefFSTEnum",
            "org.apache.lucene.util.fst.IntsRefFSTEnum(org.apache.lucene.util.fst.FST<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.NoOutputs$1.hashCode()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.NoOutputs$1.equals(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.NoOutputs",
            "org.apache.lucene.util.fst.NoOutputs.getSingleton()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.merge(java.lang.Object, java.lang.Object)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.NoOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.NoOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.NoOutputs.outputToString(java.lang.Object)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.NoOutputs.ramBytesUsed(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.NoOutputs.toString()"
        ],
        [
            "org.apache.lucene.util.fst.NodeHash",
            "org.apache.lucene.util.fst.NodeHash(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$BytesReader)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.NodeHash.add(org.apache.lucene.util.fst.Builder$UnCompiledNode<T>)"
        ],
        [
            "org.apache.lucene.util.fst.Outputs",
            "org.apache.lucene.util.fst.Outputs()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Outputs.writeFinalOutput(T, org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Outputs.skipOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.Outputs.readFinalOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Outputs.skipFinalOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "T",
            "org.apache.lucene.util.fst.Outputs.merge(T, T)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.PairOutputs$Pair.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.PairOutputs$Pair.hashCode()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs$Pair.toString()"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs",
            "org.apache.lucene.util.fst.PairOutputs(org.apache.lucene.util.fst.Outputs<A>, org.apache.lucene.util.fst.Outputs<B>)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.newPair(A, B)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.common(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.subtract(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.add(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PairOutputs.write(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>, org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PairOutputs.skipOutput(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.fst.PairOutputs$Pair<A, B>",
            "org.apache.lucene.util.fst.PairOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs.outputToString(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs.toString()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.PairOutputs.ramBytesUsed(org.apache.lucene.util.fst.PairOutputs$Pair<A, B>)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.PairOutputs.ramBytesUsed(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PairOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PairOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PairOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.PositiveIntOutputs",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getSingleton()"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Long, java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Long, java.lang.Long)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Long, java.lang.Long)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Long, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "java.lang.Long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PositiveIntOutputs.toString()"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.ramBytesUsed(java.lang.Long)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.PositiveIntOutputs.ramBytesUsed(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.PositiveIntOutputs.outputToString(java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.getNoOutput()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.read(org.apache.lucene.store.DataInput)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.PositiveIntOutputs.write(java.lang.Object, org.apache.lucene.store.DataOutput)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.add(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.subtract(java.lang.Object, java.lang.Object)"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.fst.PositiveIntOutputs.common(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.ReverseBytesReader",
            "org.apache.lucene.util.fst.ReverseBytesReader(byte[])"
        ],
        [
            "byte",
            "org.apache.lucene.util.fst.ReverseBytesReader.readByte()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ReverseBytesReader.readBytes(byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ReverseBytesReader.skipBytes(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.fst.ReverseBytesReader.getPosition()"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.ReverseBytesReader.setPosition(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.fst.ReverseBytesReader.reversed()"
        ],
        [
            "org.apache.lucene.util.fst.Util$FSTPath",
            "org.apache.lucene.util.fst.Util$FSTPath(T, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.fst.Util$FSTPath.toString()"
        ],
        [
            "org.apache.lucene.util.fst.Util$Result",
            "org.apache.lucene.util.fst.Util$Result(org.apache.lucene.util.IntsRef, T)"
        ],
        [
            "org.apache.lucene.util.fst.Util$TieBreakByInputComparator",
            "org.apache.lucene.util.fst.Util$TieBreakByInputComparator(java.util.Comparator<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Util$TieBreakByInputComparator.compare(org.apache.lucene.util.fst.Util$FSTPath<T>, org.apache.lucene.util.fst.Util$FSTPath<T>)"
        ],
        [
            "int",
            "org.apache.lucene.util.fst.Util$TieBreakByInputComparator.compare(java.lang.Object, java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.fst.Util$TopNSearcher",
            "org.apache.lucene.util.fst.Util$TopNSearcher(org.apache.lucene.util.fst.FST<T>, int, int, java.util.Comparator<T>)"
        ],
        [
            "void",
            "org.apache.lucene.util.fst.Util$TopNSearcher.addStartPaths(org.apache.lucene.util.fst.FST$Arc<T>, T, boolean, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "<T> T",
            "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.IntsRef)"
        ],
        [
            "<T> T",
            "org.apache.lucene.util.fst.Util.get(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.BytesRef)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.getByOutput(org.apache.lucene.util.fst.FST<java.lang.Long>, long, org.apache.lucene.util.fst.FST$BytesReader, org.apache.lucene.util.fst.FST$Arc<java.lang.Long>, org.apache.lucene.util.fst.FST$Arc<java.lang.Long>, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "<T> org.apache.lucene.util.fst.Util$TopResults<T>",
            "org.apache.lucene.util.fst.Util.shortestPaths(org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, T, java.util.Comparator<T>, int, boolean)"
        ],
        [
            "<T> void",
            "org.apache.lucene.util.fst.Util.toDot(org.apache.lucene.util.fst.FST<T>, java.io.Writer, boolean, boolean)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toUTF16(java.lang.CharSequence, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toUTF32(java.lang.CharSequence, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toUTF32(char[], int, int, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "org.apache.lucene.util.IntsRef",
            "org.apache.lucene.util.fst.Util.toIntsRef(org.apache.lucene.util.BytesRef, org.apache.lucene.util.IntsRefBuilder)"
        ],
        [
            "org.apache.lucene.util.BytesRef",
            "org.apache.lucene.util.fst.Util.toBytesRef(org.apache.lucene.util.IntsRef, org.apache.lucene.util.BytesRefBuilder)"
        ],
        [
            "<T> org.apache.lucene.util.fst.FST$Arc<T>",
            "org.apache.lucene.util.fst.Util.readCeilArc(int, org.apache.lucene.util.fst.FST<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$Arc<T>, org.apache.lucene.util.fst.FST$BytesReader)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValue()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValue.exists()"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValue.compareTo(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValue.equals(java.lang.Object)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.mutable.MutableValue.toString()"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValue.compareTo(java.lang.Object)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueBool",
            "org.apache.lucene.util.mutable.MutableValueBool()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueBool.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueBool.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueBool.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueBool.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueBool.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueBool.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueDate",
            "org.apache.lucene.util.mutable.MutableValueDate()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueDate.toObject()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueDate.duplicate()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueDouble",
            "org.apache.lucene.util.mutable.MutableValueDouble()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueDouble.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueDouble.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueDouble.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueDouble.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueDouble.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueDouble.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueFloat",
            "org.apache.lucene.util.mutable.MutableValueFloat()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueFloat.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueFloat.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueFloat.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueFloat.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueFloat.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueFloat.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueInt",
            "org.apache.lucene.util.mutable.MutableValueInt()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueInt.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueInt.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueInt.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueInt.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueInt.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueInt.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueLong",
            "org.apache.lucene.util.mutable.MutableValueLong()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueLong.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueLong.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueLong.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueLong.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueLong.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueLong.hashCode()"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValueStr",
            "org.apache.lucene.util.mutable.MutableValueStr()"
        ],
        [
            "java.lang.Object",
            "org.apache.lucene.util.mutable.MutableValueStr.toObject()"
        ],
        [
            "void",
            "org.apache.lucene.util.mutable.MutableValueStr.copy(org.apache.lucene.util.mutable.MutableValue)"
        ],
        [
            "org.apache.lucene.util.mutable.MutableValue",
            "org.apache.lucene.util.mutable.MutableValueStr.duplicate()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.mutable.MutableValueStr.equalsSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueStr.compareSameType(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.mutable.MutableValueStr.hashCode()"
        ],
        [
            "org.apache.lucene.util.packed.AbstractBlockPackedWriter",
            "org.apache.lucene.util.packed.AbstractBlockPackedWriter(org.apache.lucene.store.DataOutput, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.AbstractBlockPackedWriter.reset(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.AbstractBlockPackedWriter.add(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.AbstractBlockPackedWriter.finish()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.AbstractBlockPackedWriter.ord()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.AbstractPagedMutable.size()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.AbstractPagedMutable.get(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.AbstractPagedMutable.set(long, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.AbstractPagedMutable.ramBytesUsed()"
        ],
        [
            "T",
            "org.apache.lucene.util.packed.AbstractPagedMutable.resize(long)"
        ],
        [
            "T",
            "org.apache.lucene.util.packed.AbstractPagedMutable.grow(long)"
        ],
        [
            "T",
            "org.apache.lucene.util.packed.AbstractPagedMutable.grow()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.AbstractPagedMutable.toString()"
        ],
        [
            "org.apache.lucene.util.packed.BlockPackedReader",
            "org.apache.lucene.util.packed.BlockPackedReader(org.apache.lucene.store.IndexInput, int, int, long, boolean)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.BlockPackedReader.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.BlockPackedReader.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.BlockPackedReader.toString()"
        ],
        [
            "org.apache.lucene.util.packed.BlockPackedReaderIterator",
            "org.apache.lucene.util.packed.BlockPackedReaderIterator(org.apache.lucene.store.DataInput, int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BlockPackedReaderIterator.reset(org.apache.lucene.store.DataInput, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BlockPackedReaderIterator.skip(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.BlockPackedReaderIterator.next()"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.packed.BlockPackedReaderIterator.next(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.BlockPackedReaderIterator.ord()"
        ],
        [
            "org.apache.lucene.util.packed.BlockPackedWriter",
            "org.apache.lucene.util.packed.BlockPackedWriter(org.apache.lucene.store.DataOutput, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.BlockPackedWriter.ord()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BlockPackedWriter.finish()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BlockPackedWriter.add(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BlockPackedWriter.reset(org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperation",
            "org.apache.lucene.util.packed.BulkOperation.of(org.apache.lucene.util.packed.PackedInts$Format, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperation.computeIterations(int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked",
            "org.apache.lucene.util.packed.BulkOperationPacked(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPacked.longBlockCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPacked.longValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPacked.byteBlockCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPacked.byteValueCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(long[], int, byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked.encode(int[], int, byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked1",
            "org.apache.lucene.util.packed.BulkOperationPacked1()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked1.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked10",
            "org.apache.lucene.util.packed.BulkOperationPacked10()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked10.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked11",
            "org.apache.lucene.util.packed.BulkOperationPacked11()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked11.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked12",
            "org.apache.lucene.util.packed.BulkOperationPacked12()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked12.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked13",
            "org.apache.lucene.util.packed.BulkOperationPacked13()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked13.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked14",
            "org.apache.lucene.util.packed.BulkOperationPacked14()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked14.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked15",
            "org.apache.lucene.util.packed.BulkOperationPacked15()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked15.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked16",
            "org.apache.lucene.util.packed.BulkOperationPacked16()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked16.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked17",
            "org.apache.lucene.util.packed.BulkOperationPacked17()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked17.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked18",
            "org.apache.lucene.util.packed.BulkOperationPacked18()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked18.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked19",
            "org.apache.lucene.util.packed.BulkOperationPacked19()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked19.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked2",
            "org.apache.lucene.util.packed.BulkOperationPacked2()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked2.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked20",
            "org.apache.lucene.util.packed.BulkOperationPacked20()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked20.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked21",
            "org.apache.lucene.util.packed.BulkOperationPacked21()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked21.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked22",
            "org.apache.lucene.util.packed.BulkOperationPacked22()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked22.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked23",
            "org.apache.lucene.util.packed.BulkOperationPacked23()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked23.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked24",
            "org.apache.lucene.util.packed.BulkOperationPacked24()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked24.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked3",
            "org.apache.lucene.util.packed.BulkOperationPacked3()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked3.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked4",
            "org.apache.lucene.util.packed.BulkOperationPacked4()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked4.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked5",
            "org.apache.lucene.util.packed.BulkOperationPacked5()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked5.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked6",
            "org.apache.lucene.util.packed.BulkOperationPacked6()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked6.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked7",
            "org.apache.lucene.util.packed.BulkOperationPacked7()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked7.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked8",
            "org.apache.lucene.util.packed.BulkOperationPacked8()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked8.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPacked9",
            "org.apache.lucene.util.packed.BulkOperationPacked9()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPacked9.decode(byte[], int, long[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.longBlockCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.byteBlockCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.longValueCount()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.byteValueCount()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(long[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.decode(byte[], int, int[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(long[], int, byte[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.BulkOperationPackedSingleBlock.encode(int[], int, byte[], int, int)"
        ],
        [
            "org.apache.lucene.util.packed.DeltaPackedLongValues",
            "org.apache.lucene.util.packed.DeltaPackedLongValues$Builder.build()"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues",
            "org.apache.lucene.util.packed.DeltaPackedLongValues$Builder.build()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct16.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct16.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct16.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct16.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct16.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct16.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct16.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct32.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct32.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct32.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct32.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct32.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct32.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct32.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct64.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct64.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct64.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct64.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct64.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct64.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct64.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct8.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct8.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Direct8.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct8.clear()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct8.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Direct8.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Direct8.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPacked64SingleBlockReader.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPackedReader.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectPackedReader.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader1.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader12.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader16.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader2.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader20.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader24.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader28.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader32.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader4.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader40.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader48.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader56.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader64.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.DirectReader$DirectPackedReader8.get(long)"
        ],
        [
            "org.apache.lucene.util.packed.DirectReader",
            "org.apache.lucene.util.packed.DirectReader()"
        ],
        [
            "org.apache.lucene.util.LongValues",
            "org.apache.lucene.util.packed.DirectReader.getInstance(org.apache.lucene.store.RandomAccessInput, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.DirectWriter.add(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.DirectWriter.finish()"
        ],
        [
            "org.apache.lucene.util.packed.DirectWriter",
            "org.apache.lucene.util.packed.DirectWriter.getInstance(org.apache.lucene.store.IndexOutput, long, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.DirectWriter.bitsRequired(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.DirectWriter.unsignedBitsRequired(long)"
        ],
        [
            "org.apache.lucene.util.packed.EliasFanoDecoder",
            "org.apache.lucene.util.packed.EliasFanoDecoder(org.apache.lucene.util.packed.EliasFanoEncoder)"
        ],
        [
            "org.apache.lucene.util.packed.EliasFanoEncoder",
            "org.apache.lucene.util.packed.EliasFanoDecoder.getEliasFanoEncoder()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.numEncoded()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.currentIndex()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.currentValue()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.EliasFanoDecoder.toBeforeSequence()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.nextValue()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.EliasFanoDecoder.advanceToIndex(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.advanceToValue(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.EliasFanoDecoder.toAfterSequence()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.previousValue()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDecoder.backToValue(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet$1.docID()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet$1.nextDoc()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet$1.advance(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet$1.cost()"
        ],
        [
            "org.apache.lucene.util.packed.EliasFanoDocIdSet",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet(int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.sufficientlySmallerThanBitSet(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.encodeFromDisi(org.apache.lucene.search.DocIdSetIterator)"
        ],
        [
            "org.apache.lucene.search.DocIdSetIterator",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.iterator()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.isCacheable()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.hashCode()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoDocIdSet.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.EliasFanoEncoder",
            "org.apache.lucene.util.packed.EliasFanoEncoder(long, long, long)"
        ],
        [
            "org.apache.lucene.util.packed.EliasFanoEncoder",
            "org.apache.lucene.util.packed.EliasFanoEncoder(long, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.EliasFanoEncoder.encodeNext(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.EliasFanoEncoder.sufficientlySmallerThanBitSet(long, long)"
        ],
        [
            "org.apache.lucene.util.packed.EliasFanoDecoder",
            "org.apache.lucene.util.packed.EliasFanoEncoder.getDecoder()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.packed.EliasFanoEncoder.getLowerBits()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.packed.EliasFanoEncoder.getUpperBits()"
        ],
        [
            "long[]",
            "org.apache.lucene.util.packed.EliasFanoEncoder.getIndexBits()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.EliasFanoEncoder.toString()"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.EliasFanoEncoder.equals(java.lang.Object)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.EliasFanoEncoder.hashCode()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.EliasFanoEncoder.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.GrowableWriter",
            "org.apache.lucene.util.packed.GrowableWriter(int, int, float)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.GrowableWriter.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.size()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.getBitsPerValue()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Mutable",
            "org.apache.lucene.util.packed.GrowableWriter.getMutable()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.set(int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.clear()"
        ],
        [
            "org.apache.lucene.util.packed.GrowableWriter",
            "org.apache.lucene.util.packed.GrowableWriter.resize(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.GrowableWriter.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.fill(int, int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.GrowableWriter.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.GrowableWriter.save(org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.packed.MonotonicBlockPackedReader",
            "org.apache.lucene.util.packed.MonotonicBlockPackedReader.of(org.apache.lucene.store.IndexInput, int, int, long, boolean)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.MonotonicBlockPackedReader.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.MonotonicBlockPackedReader.size()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.MonotonicBlockPackedReader.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.MonotonicBlockPackedReader.toString()"
        ],
        [
            "org.apache.lucene.util.packed.MonotonicBlockPackedWriter",
            "org.apache.lucene.util.packed.MonotonicBlockPackedWriter(org.apache.lucene.store.DataOutput, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.add(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.ord()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.finish()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.MonotonicBlockPackedWriter.reset(org.apache.lucene.store.DataOutput)"
        ],
        [
            "org.apache.lucene.util.packed.MonotonicLongValues",
            "org.apache.lucene.util.packed.MonotonicLongValues$Builder.build()"
        ],
        [
            "org.apache.lucene.util.packed.DeltaPackedLongValues",
            "org.apache.lucene.util.packed.MonotonicLongValues$Builder.build()"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues",
            "org.apache.lucene.util.packed.MonotonicLongValues$Builder.build()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.get(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed16ThreeBlocks.toString()"
        ],
        [
            "org.apache.lucene.util.packed.Packed64",
            "org.apache.lucene.util.packed.Packed64(int, int)"
        ],
        [
            "org.apache.lucene.util.packed.Packed64",
            "org.apache.lucene.util.packed.Packed64(int, org.apache.lucene.store.DataInput, int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64.get(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64.set(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64.set(int, long[], int, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed64.toString()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64.ramBytesUsed()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock1.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock10.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock12.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock16.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock2.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock21.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock3.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock32.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock4.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock5.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock6.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock7.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock8.set(int, long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.get(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock$Packed64SingleBlock9.set(int, long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.Packed64SingleBlock.isSupported(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed64SingleBlock.ramBytesUsed()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64SingleBlock.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed64SingleBlock.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed64SingleBlock.fill(int, int, long)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed64SingleBlock.toString()"
        ],
        [
            "org.apache.lucene.util.packed.Packed64SingleBlock",
            "org.apache.lucene.util.packed.Packed64SingleBlock.create(org.apache.lucene.store.DataInput, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.Packed64SingleBlock",
            "org.apache.lucene.util.packed.Packed64SingleBlock.create(int, int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.get(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.clear()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.ramBytesUsed()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.Packed8ThreeBlocks.toString()"
        ],
        [
            "org.apache.lucene.util.packed.PackedDataInput",
            "org.apache.lucene.util.packed.PackedDataInput(org.apache.lucene.store.DataInput)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedDataInput.readLong(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedDataInput.skipToNextByte()"
        ],
        [
            "org.apache.lucene.util.packed.PackedDataOutput",
            "org.apache.lucene.util.packed.PackedDataOutput(org.apache.lucene.store.DataOutput)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedDataOutput.writeLong(long, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedDataOutput.flush()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$1.get(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$Format$1.byteCount(int, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Format$2.longCount(int, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.PackedInts$Format$2.isSupported(int)"
        ],
        [
            "float",
            "org.apache.lucene.util.packed.PackedInts$Format$2.overheadPerValue(int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Format[]",
            "org.apache.lucene.util.packed.PackedInts$Format.values()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Format",
            "org.apache.lucene.util.packed.PackedInts$Format.valueOf(java.lang.String)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Format",
            "org.apache.lucene.util.packed.PackedInts$Format.byId(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Format.getId()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$Format.byteCount(int, int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Format.longCount(int, int, int)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.PackedInts$Format.isSupported(int)"
        ],
        [
            "float",
            "org.apache.lucene.util.packed.PackedInts$Format.overheadPerValue(int)"
        ],
        [
            "float",
            "org.apache.lucene.util.packed.PackedInts$Format.overheadRatio(int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits",
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits(org.apache.lucene.util.packed.PackedInts$Format, int)"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits.toString()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Mutable",
            "org.apache.lucene.util.packed.PackedInts$Mutable()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Mutable.set(int, long[], int, int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts$Mutable.fill(int, int, long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts$Mutable.clear()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts$Mutable.save(org.apache.lucene.store.DataOutput)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$MutableImpl.getBitsPerValue()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$MutableImpl.size()"
        ],
        [
            "java.lang.String",
            "org.apache.lucene.util.packed.PackedInts$MutableImpl.toString()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$NullReader",
            "org.apache.lucene.util.packed.PackedInts$NullReader(int)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$NullReader.get(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$NullReader.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$NullReader.size()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$NullReader.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts$Reader()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Reader.get(int, long[], int, int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderImpl.size()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.next()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.getBitsPerValue()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$ReaderIteratorImpl.size()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts$Writer.bitsPerValue()"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts",
            "org.apache.lucene.util.packed.PackedInts()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts.checkVersion(int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$FormatAndBits",
            "org.apache.lucene.util.packed.PackedInts.fastestFormatAndBits(int, int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Decoder",
            "org.apache.lucene.util.packed.PackedInts.getDecoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Encoder",
            "org.apache.lucene.util.packed.PackedInts.getEncoder(org.apache.lucene.util.packed.PackedInts$Format, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getReaderNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getReader(org.apache.lucene.store.DataInput)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$ReaderIterator",
            "org.apache.lucene.util.packed.PackedInts.getReaderIteratorNoHeader(org.apache.lucene.store.DataInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$ReaderIterator",
            "org.apache.lucene.util.packed.PackedInts.getReaderIterator(org.apache.lucene.store.DataInput, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getDirectReaderNoHeader(org.apache.lucene.store.IndexInput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Reader",
            "org.apache.lucene.util.packed.PackedInts.getDirectReader(org.apache.lucene.store.IndexInput)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Mutable",
            "org.apache.lucene.util.packed.PackedInts.getMutable(int, int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Mutable",
            "org.apache.lucene.util.packed.PackedInts.getMutable(int, int, org.apache.lucene.util.packed.PackedInts$Format)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Writer",
            "org.apache.lucene.util.packed.PackedInts.getWriterNoHeader(org.apache.lucene.store.DataOutput, org.apache.lucene.util.packed.PackedInts$Format, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedInts$Writer",
            "org.apache.lucene.util.packed.PackedInts.getWriter(org.apache.lucene.store.DataOutput, int, int, float)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts.bitsRequired(long)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedInts.unsignedBitsRequired(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedInts.maxValue(int)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedInts.copy(org.apache.lucene.util.packed.PackedInts$Reader, int, org.apache.lucene.util.packed.PackedInts$Mutable, int, int, int)"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues",
            "org.apache.lucene.util.packed.PackedLongValues$Builder.build()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedLongValues$Builder.ramBytesUsed()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedLongValues$Builder.size()"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues$Builder.add(long)"
        ],
        [
            "boolean",
            "org.apache.lucene.util.packed.PackedLongValues$Iterator.hasNext()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedLongValues$Iterator.next()"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues.packedBuilder(int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues.packedBuilder(float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues.deltaPackedBuilder(int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues.deltaPackedBuilder(float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues.monotonicBuilder(int, float)"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Builder",
            "org.apache.lucene.util.packed.PackedLongValues.monotonicBuilder(float)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedLongValues.size()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedLongValues.get(long)"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PackedLongValues.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.PackedLongValues$Iterator",
            "org.apache.lucene.util.packed.PackedLongValues.iterator()"
        ],
        [
            "org.apache.lucene.util.LongsRef",
            "org.apache.lucene.util.packed.PackedReaderIterator.next(int)"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedReaderIterator.ord()"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedWriter.add(long)"
        ],
        [
            "void",
            "org.apache.lucene.util.packed.PackedWriter.finish()"
        ],
        [
            "int",
            "org.apache.lucene.util.packed.PackedWriter.ord()"
        ],
        [
            "org.apache.lucene.util.packed.PagedGrowableWriter",
            "org.apache.lucene.util.packed.PagedGrowableWriter(long, int, int, float)"
        ],
        [
            "java.util.Collection",
            "org.apache.lucene.util.packed.PagedGrowableWriter.getChildResources()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PagedGrowableWriter.ramBytesUsed()"
        ],
        [
            "org.apache.lucene.util.packed.PagedMutable",
            "org.apache.lucene.util.packed.PagedMutable(long, int, int, float)"
        ],
        [
            "java.util.Collection",
            "org.apache.lucene.util.packed.PagedMutable.getChildResources()"
        ],
        [
            "long",
            "org.apache.lucene.util.packed.PagedMutable.ramBytesUsed()"
        ]
    ]
}