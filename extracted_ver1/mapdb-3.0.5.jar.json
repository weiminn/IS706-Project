{"mapdb-3.0.5.jar": [["void", "org.mapdb.AbstractMutableLongCollection$collect$1.value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$hashCode$1.value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$reject$1.value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$select$1.value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$sum$1.value(long)"], ["void", "org.mapdb.AbstractMutableLongCollection$toArray$1.value(long)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.allSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["void", "org.mapdb.AbstractMutableLongCollection.appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)"], ["long[]", "org.mapdb.AbstractMutableLongCollection.toArray()"], ["long", "org.mapdb.AbstractMutableLongCollection.sum()"], ["boolean", "org.mapdb.AbstractMutableLongCollection.noneSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["<T> T", "org.mapdb.AbstractMutableLongCollection.injectInto(T, org.eclipse.collections.api.block.function.primitive.ObjectLongToObjectFunction<? super T, ? extends T>)"], ["void", "org.mapdb.AbstractMutableLongCollection.each(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["long", "org.mapdb.AbstractMutableLongCollection.detectIfNone(org.eclipse.collections.api.block.predicate.primitive.LongPredicate, long)"], ["int", "org.mapdb.AbstractMutableLongCollection.count(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.anySatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["<V> org.eclipse.collections.api.set.MutableSet<V>", "org.mapdb.AbstractMutableLongCollection.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction<? extends V>)"], ["org.eclipse.collections.api.RichIterable", "org.mapdb.AbstractMutableLongCollection.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.collection.MutableCollection", "org.mapdb.AbstractMutableLongCollection.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.AbstractMutableLongCollection.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.AbstractMutableLongCollection.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.add(long)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.addAll(long...)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.addAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.with(long)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.with(long)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.without(long)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.without(long)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.withAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.withAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.AbstractMutableLongCollection.withoutAll(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.AbstractMutableLongCollection.withoutAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.AbstractMutableLongCollection.equals(java.lang.Object)"], ["int", "org.mapdb.AbstractMutableLongCollection.hashCode()"], ["org.mapdb.AbstractMutableLongCollection", "org.mapdb.AbstractMutableLongCollection()"], ["org.mapdb.Atomic$Boolean", "org.mapdb.Atomic$Boolean(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$Boolean.getRecid()"], ["boolean", "org.mapdb.Atomic$Boolean.get()"], ["boolean", "org.mapdb.Atomic$Boolean.compareAndSet(boolean, boolean)"], ["void", "org.mapdb.Atomic$Boolean.set(boolean)"], ["boolean", "org.mapdb.Atomic$Boolean.getAndSet(boolean)"], ["java.lang.String", "org.mapdb.Atomic$Boolean.toString()"], ["org.mapdb.Atomic$Integer", "org.mapdb.Atomic$Integer(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$Integer.getRecid()"], ["int", "org.mapdb.Atomic$Integer.get()"], ["void", "org.mapdb.Atomic$Integer.set(int)"], ["int", "org.mapdb.Atomic$Integer.getAndSet(int)"], ["boolean", "org.mapdb.Atomic$Integer.compareAndSet(int, int)"], ["int", "org.mapdb.Atomic$Integer.getAndIncrement()"], ["int", "org.mapdb.Atomic$Integer.getAndDecrement()"], ["int", "org.mapdb.Atomic$Integer.getAndAdd(int)"], ["int", "org.mapdb.Atomic$Integer.incrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.decrementAndGet()"], ["int", "org.mapdb.Atomic$Integer.addAndGet(int)"], ["java.lang.String", "org.mapdb.Atomic$Integer.toString()"], ["int", "org.mapdb.Atomic$Integer.intValue()"], ["long", "org.mapdb.Atomic$Integer.longValue()"], ["float", "org.mapdb.Atomic$Integer.floatValue()"], ["double", "org.mapdb.Atomic$Integer.doubleValue()"], ["org.mapdb.Atomic$Long", "org.mapdb.Atomic$Long(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$Long.getRecid()"], ["long", "org.mapdb.Atomic$Long.get()"], ["void", "org.mapdb.Atomic$Long.set(long)"], ["long", "org.mapdb.Atomic$Long.getAndSet(long)"], ["boolean", "org.mapdb.Atomic$Long.compareAndSet(long, long)"], ["long", "org.mapdb.Atomic$Long.getAndIncrement()"], ["long", "org.mapdb.Atomic$Long.getAndDecrement()"], ["long", "org.mapdb.Atomic$Long.getAndAdd(long)"], ["long", "org.mapdb.Atomic$Long.incrementAndGet()"], ["long", "org.mapdb.Atomic$Long.decrementAndGet()"], ["long", "org.mapdb.Atomic$Long.addAndGet(long)"], ["java.lang.String", "org.mapdb.Atomic$Long.toString()"], ["int", "org.mapdb.Atomic$Long.intValue()"], ["long", "org.mapdb.Atomic$Long.longValue()"], ["float", "org.mapdb.Atomic$Long.floatValue()"], ["double", "org.mapdb.Atomic$Long.doubleValue()"], ["org.mapdb.Atomic$String", "org.mapdb.Atomic$String(org.mapdb.Store, long)"], ["long", "org.mapdb.Atomic$String.getRecid()"], ["java.lang.String", "org.mapdb.Atomic$String.toString()"], ["java.lang.String", "org.mapdb.Atomic$String.get()"], ["boolean", "org.mapdb.Atomic$String.compareAndSet(java.lang.String, java.lang.String)"], ["void", "org.mapdb.Atomic$String.set(java.lang.String)"], ["java.lang.String", "org.mapdb.Atomic$String.getAndSet(java.lang.String)"], ["org.mapdb.Atomic$Var", "org.mapdb.Atomic$Var(org.mapdb.Store, long, org.mapdb.Serializer<E>)"], ["long", "org.mapdb.Atomic$Var.getRecid()"], ["java.lang.String", "org.mapdb.Atomic$Var.toString()"], ["E", "org.mapdb.Atomic$Var.get()"], ["boolean", "org.mapdb.Atomic$Var.compareAndSet(E, E)"], ["void", "org.mapdb.Atomic$Var.set(E)"], ["E", "org.mapdb.Atomic$Var.getAndSet(E)"], ["boolean", "org.mapdb.BTreeMap$BTreeBoundIterator.hasNext()"], ["void", "org.mapdb.BTreeMap$BTreeBoundIterator.remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$BTreeBoundIterator.getM()"], ["K", "org.mapdb.BTreeMap$BTreeBoundIterator.getLo()"], ["boolean", "org.mapdb.BTreeMap$BTreeBoundIterator.getLoInclusive()"], ["K", "org.mapdb.BTreeMap$BTreeBoundIterator.getHi()"], ["boolean", "org.mapdb.BTreeMap$BTreeBoundIterator.getHiInclusive()"], ["org.mapdb.BTreeMap$BTreeBoundIterator", "org.mapdb.BTreeMap$BTreeBoundIterator(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$BTreeIterator.hasNext()"], ["void", "org.mapdb.BTreeMap$BTreeIterator.remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$BTreeIterator.getM()"], ["org.mapdb.BTreeMap$BTreeIterator", "org.mapdb.BTreeMap$BTreeIterator(org.mapdb.BTreeMap<K, V>)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayEmpty()"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Boolean", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayGet(java.lang.Object, int)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayPut(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Boolean)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Boolean, java.util.Comparator<?>)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["void", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["int", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArraySize(java.lang.Object)"], ["java.lang.Integer", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayUpdateVal(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Boolean", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.serialize(org.mapdb.DataOutput2, boolean)"], ["void", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$Companion$NO_VAL_SERIALIZER$1.isTrusted()"], ["<K, V> org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$Companion.make(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, org.mapdb.Store, boolean, long, int, java.util.Comparator<K>, boolean, long, boolean, org.mapdb.MapModificationListener<K, V>[])"], ["org.mapdb.BTreeMap", "org.mapdb.BTreeMap$Companion.make$default(org.mapdb.BTreeMap$Companion, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, org.mapdb.Store, boolean, long, int, java.util.Comparator, boolean, long, boolean, org.mapdb.MapModificationListener[], int, java.lang.Object)"], ["<K, V> long", "org.mapdb.BTreeMap$Companion.putEmptyRoot$mapdb(org.mapdb.Store, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["org.mapdb.BTreeMap$Companion", "org.mapdb.BTreeMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["boolean", "org.mapdb.BTreeMap$DescendingBoundIterator.hasNext()"], ["void", "org.mapdb.BTreeMap$DescendingBoundIterator.remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$DescendingBoundIterator.getM()"], ["K", "org.mapdb.BTreeMap$DescendingBoundIterator.getLo()"], ["boolean", "org.mapdb.BTreeMap$DescendingBoundIterator.getLoInclusive()"], ["K", "org.mapdb.BTreeMap$DescendingBoundIterator.getHi()"], ["boolean", "org.mapdb.BTreeMap$DescendingBoundIterator.getHiInclusive()"], ["org.mapdb.BTreeMap$DescendingBoundIterator", "org.mapdb.BTreeMap$DescendingBoundIterator(org.mapdb.BTreeMap<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMap$DescendingIterator.hasNext()"], ["void", "org.mapdb.BTreeMap$DescendingIterator.remove()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.BTreeMap$DescendingIterator.getM()"], ["org.mapdb.BTreeMap$DescendingIterator", "org.mapdb.BTreeMap$DescendingIterator(org.mapdb.BTreeMap<K, V>)"], ["K", "org.mapdb.BTreeMap$btreeEntry$1.getKey()"], ["V", "org.mapdb.BTreeMap$btreeEntry$1.getValue()"], ["int", "org.mapdb.BTreeMap$btreeEntry$1.hashCode()"], ["V", "org.mapdb.BTreeMap$btreeEntry$1.setValue(V)"], ["boolean", "org.mapdb.BTreeMap$btreeEntry$1.equals(java.lang.Object)"], ["java.lang.String", "org.mapdb.BTreeMap$btreeEntry$1.toString()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$descendingEntryIterator$1.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingEntryIterator$1.next()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$descendingEntryIterator$2.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingEntryIterator$2.next()"], ["K", "org.mapdb.BTreeMap$descendingKeyIterator$1.next()"], ["K", "org.mapdb.BTreeMap$descendingKeyIterator$2.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingLeafIterator$1$advance$1.invoke()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1$advance$1.invoke()"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap$descendingLeafIterator$1.getNextNode()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.setNextNode(org.mapdb.BTreeMapJava$Node)"], ["long", "org.mapdb.BTreeMap$descendingLeafIterator$1.getLinkRecidLimit()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.setLinkRecidLimit(long)"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.init()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.init(K)"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.advance()"], ["boolean", "org.mapdb.BTreeMap$descendingLeafIterator$1.hasNext()"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap$descendingLeafIterator$1.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$descendingLeafIterator$1.next()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$1.remove()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setLinked(java.util.Deque<org.mapdb.BTreeMapJava$Node>)"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getNode()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setNode(org.mapdb.BTreeMapJava$Node)"], ["int", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getNodePos()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setNodePos(int)"], ["long", "org.mapdb.BTreeMap$descendingLeafIterator$INode.getLinkLimit()"], ["void", "org.mapdb.BTreeMap$descendingLeafIterator$INode.setLinkLimit(long)"], ["org.mapdb.BTreeMap$descendingLeafIterator$INode", "org.mapdb.BTreeMap$descendingLeafIterator$INode(java.util.Deque<org.mapdb.BTreeMapJava$Node>, org.mapdb.BTreeMapJava$Node, int, long)"], ["org.mapdb.BTreeMap$descendingLeafIterator$INode", "org.mapdb.BTreeMap$descendingLeafIterator$INode(java.util.Deque, org.mapdb.BTreeMapJava$Node, int, long, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["V", "org.mapdb.BTreeMap$descendingValueIterator$1.next()"], ["V", "org.mapdb.BTreeMap$descendingValueIterator$2.next()"], ["boolean", "org.mapdb.BTreeMap$entries$1.add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.BTreeMap$entries$1.add(java.lang.Object)"], ["void", "org.mapdb.BTreeMap$entries$1.clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap$entries$1.iterator()"], ["boolean", "org.mapdb.BTreeMap$entries$1.remove(java.util.Map$Entry)"], ["boolean", "org.mapdb.BTreeMap$entries$1.remove(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$entries$1.contains(java.util.Map$Entry)"], ["boolean", "org.mapdb.BTreeMap$entries$1.contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap$entries$1.isEmpty()"], ["int", "org.mapdb.BTreeMap$entries$1.getSize()"], ["int", "org.mapdb.BTreeMap$entries$1.size()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$entryIterator$1.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$entryIterator$1.next()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap$entryIterator$2.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$entryIterator$2.next()"], ["K", "org.mapdb.BTreeMap$keyIterator$1.next()"], ["K", "org.mapdb.BTreeMap$keyIterator$2.next()"], ["java.lang.Object", "org.mapdb.BTreeMap$printStructure$1.invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.BTreeMap$printStructure$1.invoke(long, java.lang.String)"], ["V", "org.mapdb.BTreeMap$valueIterator$1.next()"], ["V", "org.mapdb.BTreeMap$valueIterator$2.next()"], ["void", "org.mapdb.BTreeMap$values$1.clear()"], ["boolean", "org.mapdb.BTreeMap$values$1.isEmpty()"], ["int", "org.mapdb.BTreeMap$values$1.getSize()"], ["int", "org.mapdb.BTreeMap$values$1.size()"], ["boolean", "org.mapdb.BTreeMap$values$1.contains(java.lang.Object)"], ["java.lang.Object", "org.mapdb.BTreeMap$verify$1.invoke(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.BTreeMap$verify$1.invoke(org.mapdb.BTreeMapJava$Node, boolean, boolean, org.eclipse.collections.impl.set.mutable.primitive.LongHashSet, long)"], ["void", "org.mapdb.BTreeMap$writeReplace$1.accept(K, V)"], ["V", "org.mapdb.BTreeMap.get(java.lang.Object)"], ["V", "org.mapdb.BTreeMap.put(K, V)"], ["V", "org.mapdb.BTreeMap.remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMap.lock(long)"], ["void", "org.mapdb.BTreeMap.unlock(long)"], ["void", "org.mapdb.BTreeMap.unlockAllCurrentThread()"], ["void", "org.mapdb.BTreeMap.assertCurrentThreadUnlocked()"], ["void", "org.mapdb.BTreeMap.close()"], ["void", "org.mapdb.BTreeMap.verify()"], ["void", "org.mapdb.BTreeMap.printStructure(java.io.PrintStream)"], ["void", "org.mapdb.BTreeMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "org.mapdb.BTreeMap.putIfAbsentBoolean(K, V)"], ["V", "org.mapdb.BTreeMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.replace(K, V, V)"], ["V", "org.mapdb.BTreeMap.replace(K, V)"], ["boolean", "org.mapdb.BTreeMap.containsKey(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.containsValue(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.isEmpty()"], ["int", "org.mapdb.BTreeMap.getSize()"], ["int", "org.mapdb.BTreeMap.size()"], ["long", "org.mapdb.BTreeMap.sizeLong()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.descendingMap()"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.getEntries()"], ["java.util.Set", "org.mapdb.BTreeMap.entrySet()"], ["java.util.NavigableSet", "org.mapdb.BTreeMap.keySet()"], ["java.util.Set", "org.mapdb.BTreeMap.keySet()"], ["java.util.Collection", "org.mapdb.BTreeMap.values()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.entryIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.entryIterator(K, boolean, K, boolean)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.descendingEntryIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMap.descendingEntryIterator(K, boolean, K, boolean)"], ["int", "org.mapdb.BTreeMap.hashCode()"], ["boolean", "org.mapdb.BTreeMap.equals(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMap.isClosed()"], ["void", "org.mapdb.BTreeMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["void", "org.mapdb.BTreeMap.forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)"], ["void", "org.mapdb.BTreeMap.forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.prefixSubMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.prefixSubMap(K, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.subMap(K, K)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.headMap(K)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMap.tailMap(K)"], ["java.util.SortedMap", "org.mapdb.BTreeMap.tailMap(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMap.comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lastEntry()"], ["K", "org.mapdb.BTreeMap.firstKey2()"], ["K", "org.mapdb.BTreeMap.lastKey2()"], ["K", "org.mapdb.BTreeMap.firstKey()"], ["K", "org.mapdb.BTreeMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.pollLastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.findHigher(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.findLower(K, boolean)"], ["K", "org.mapdb.BTreeMap.findHigherKey(K, boolean)"], ["K", "org.mapdb.BTreeMap.findLowerKey(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.lowerEntry(K)"], ["K", "org.mapdb.BTreeMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.floorEntry(K)"], ["K", "org.mapdb.BTreeMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.ceilingEntry(K)"], ["K", "org.mapdb.BTreeMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMap.higherEntry(K)"], ["K", "org.mapdb.BTreeMap.higherKey(K)"], ["void", "org.mapdb.BTreeMap.clear()"], ["void", "org.mapdb.BTreeMap.checkThreadSafe()"], ["org.mapdb.Serializer", "org.mapdb.BTreeMap.getKeySerializer()"], ["org.mapdb.Serializer", "org.mapdb.BTreeMap.getValueSerializer()"], ["long", "org.mapdb.BTreeMap.getRootRecidRecid()"], ["org.mapdb.Store", "org.mapdb.BTreeMap.getStore()"], ["boolean", "org.mapdb.BTreeMap.getValueInline()"], ["int", "org.mapdb.BTreeMap.getMaxNodeSize()"], ["boolean", "org.mapdb.BTreeMap.isThreadSafe()"], ["long", "org.mapdb.BTreeMap.getCounterRecid()"], ["boolean", "org.mapdb.BTreeMap.getHasValues()"], ["org.mapdb.BTreeMap", "org.mapdb.BTreeMap(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, long, org.mapdb.Store, boolean, int, java.util.Comparator<K>, boolean, long, boolean, org.mapdb.MapModificationListener<K, V>[])"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMap.access$getNode(org.mapdb.BTreeMap, long)"], ["java.lang.String", "org.mapdb.BTreeMap.access$nodeToString(org.mapdb.BTreeMap, java.lang.Long, org.mapdb.BTreeMapJava$Node)"], ["org.mapdb.serializer.GroupSerializer", "org.mapdb.BTreeMap.access$getNO_VAL_SERIALIZER$cp()"], ["int", "org.mapdb.BTreeMapJava$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.mapdb.BTreeMapJava$1.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.mapdb.BTreeMapJava$2.toString()"], ["org.mapdb.BTreeMapJava$BinaryGet", "org.mapdb.BTreeMapJava$BinaryGet(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, java.util.Comparator<K>, K)"], ["long", "org.mapdb.BTreeMapJava$BinaryGet.get(org.mapdb.DataInput2, int)"], ["org.mapdb.BTreeMapJava$DescendingMap", "org.mapdb.BTreeMapJava$DescendingMap(org.mapdb.ConcurrentNavigableMapExtra<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.get(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.put(K, V)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMapJava$DescendingMap.size()"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.isEmpty()"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMapJava$DescendingMap.clear()"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$DescendingMap.replace(K, V, V)"], ["V", "org.mapdb.BTreeMapJava$DescendingMap.replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMapJava$DescendingMap.comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.higherEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.ceilingEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.floorEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.lowerEntry(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.higherKey(K)"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.firstKey2()"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.lastKey2()"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.firstKey()"], ["K", "org.mapdb.BTreeMapJava$DescendingMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.pollLastEntry()"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.headMap(K, boolean)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(K, boolean)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.subMap(K, K)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.headMap(K)"], ["org.mapdb.BTreeMapJava$DescendingMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMapJava$DescendingMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMapJava$DescendingMap.entrySet()"], ["java.util.Set", "org.mapdb.BTreeMapJava$DescendingMap.keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$DescendingMap.descendingMap()"], ["java.util.Iterator<java.util.Map$Entry<K1, V1>>", "org.mapdb.BTreeMapJava$EntrySet.iterator()"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.remove(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.isEmpty()"], ["int", "org.mapdb.BTreeMapJava$EntrySet.size()"], ["void", "org.mapdb.BTreeMapJava$EntrySet.clear()"], ["boolean", "org.mapdb.BTreeMapJava$EntrySet.equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMapJava$EntrySet.toArray()"], ["<T> T[]", "org.mapdb.BTreeMapJava$EntrySet.toArray(T[])"], ["int", "org.mapdb.BTreeMapJava$KeySet.size()"], ["long", "org.mapdb.BTreeMapJava$KeySet.sizeLong()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.isEmpty()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.contains(java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.remove(java.lang.Object)"], ["void", "org.mapdb.BTreeMapJava$KeySet.clear()"], ["E", "org.mapdb.BTreeMapJava$KeySet.lower(E)"], ["E", "org.mapdb.BTreeMapJava$KeySet.floor(E)"], ["E", "org.mapdb.BTreeMapJava$KeySet.ceiling(E)"], ["E", "org.mapdb.BTreeMapJava$KeySet.higher(E)"], ["java.util.Comparator<? super E>", "org.mapdb.BTreeMapJava$KeySet.comparator()"], ["E", "org.mapdb.BTreeMapJava$KeySet.first()"], ["E", "org.mapdb.BTreeMapJava$KeySet.last()"], ["E", "org.mapdb.BTreeMapJava$KeySet.pollFirst()"], ["E", "org.mapdb.BTreeMapJava$KeySet.pollLast()"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.equals(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.BTreeMapJava$KeySet.toArray()"], ["<T> T[]", "org.mapdb.BTreeMapJava$KeySet.toArray(T[])"], ["boolean", "org.mapdb.BTreeMapJava$KeySet.add(E)"], ["void", "org.mapdb.BTreeMapJava$KeySet.close()"], ["java.util.SortedSet", "org.mapdb.BTreeMapJava$KeySet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMapJava$KeySet.headSet(java.lang.Object)"], ["java.util.SortedSet", "org.mapdb.BTreeMapJava$KeySet.subSet(java.lang.Object, java.lang.Object)"], ["<K> K", "org.mapdb.BTreeMapJava$Node.highKey(org.mapdb.serializer.GroupSerializer<K>)"], ["long[]", "org.mapdb.BTreeMapJava$Node.getChildren()"], ["void", "org.mapdb.BTreeMapJava$Node.verifyNode(org.mapdb.serializer.GroupSerializer, java.util.Comparator, org.mapdb.serializer.GroupSerializer)"], ["void", "org.mapdb.BTreeMapJava$NodeSerializer.serialize(org.mapdb.DataOutput2, org.mapdb.BTreeMapJava$Node)"], ["org.mapdb.BTreeMapJava$Node", "org.mapdb.BTreeMapJava$NodeSerializer.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.BTreeMapJava$NodeSerializer.isTrusted()"], ["java.lang.Object", "org.mapdb.BTreeMapJava$NodeSerializer.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.BTreeMapJava$NodeSerializer.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.BTreeMapJava$SubMap", "org.mapdb.BTreeMapJava$SubMap(org.mapdb.ConcurrentNavigableMapExtra<K, V>, K, boolean, K, boolean)"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.containsKey(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$SubMap.get(java.lang.Object)"], ["V", "org.mapdb.BTreeMapJava$SubMap.put(K, V)"], ["V", "org.mapdb.BTreeMapJava$SubMap.remove(java.lang.Object)"], ["int", "org.mapdb.BTreeMapJava$SubMap.size()"], ["long", "org.mapdb.BTreeMapJava$SubMap.sizeLong()"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.isEmpty()"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.containsValue(java.lang.Object)"], ["void", "org.mapdb.BTreeMapJava$SubMap.clear()"], ["V", "org.mapdb.BTreeMapJava$SubMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.BTreeMapJava$SubMap.replace(K, V, V)"], ["V", "org.mapdb.BTreeMapJava$SubMap.replace(K, V)"], ["java.util.Comparator<? super K>", "org.mapdb.BTreeMapJava$SubMap.comparator()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.lowerEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.floorEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.ceilingEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.higherEntry(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.higherKey(K)"], ["K", "org.mapdb.BTreeMapJava$SubMap.firstKey2()"], ["K", "org.mapdb.BTreeMapJava$SubMap.lastKey2()"], ["K", "org.mapdb.BTreeMapJava$SubMap.firstKey()"], ["K", "org.mapdb.BTreeMapJava$SubMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.BTreeMapJava$SubMap.pollLastEntry()"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.subMap(K, boolean, K, boolean)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.headMap(K, boolean)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.tailMap(K, boolean)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.subMap(K, K)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.headMap(K)"], ["org.mapdb.BTreeMapJava$SubMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.tailMap(K)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.BTreeMapJava$SubMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.BTreeMapJava$SubMap.entrySet()"], ["java.util.Set", "org.mapdb.BTreeMapJava$SubMap.keySet()"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.mapdb.BTreeMapJava$SubMap.descendingMap()"], ["org.mapdb.BTreeMapJava", "org.mapdb.BTreeMapJava()"], ["void", "org.mapdb.ConcurrencyAware$DefaultImpls.checkThreadSafe(org.mapdb.ConcurrencyAware)"], ["java.lang.Object", "org.mapdb.DB$AtomicBooleanMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicBooleanMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB$AtomicBooleanMaker(org.mapdb.DB, java.lang.String, boolean)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB$AtomicBooleanMaker(org.mapdb.DB, java.lang.String, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicIntegerMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicIntegerMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB$AtomicIntegerMaker(org.mapdb.DB, java.lang.String, int)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB$AtomicIntegerMaker(org.mapdb.DB, java.lang.String, int, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicLongMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicLongMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB$AtomicLongMaker(org.mapdb.DB, java.lang.String, long)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB$AtomicLongMaker(org.mapdb.DB, java.lang.String, long, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicStringMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicStringMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB$AtomicStringMaker(org.mapdb.DB, java.lang.String, java.lang.String)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB$AtomicStringMaker(org.mapdb.DB, java.lang.String, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$AtomicVarMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$AtomicVarMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$AtomicVarMaker", "org.mapdb.DB$AtomicVarMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer<E>, E)"], ["org.mapdb.DB$AtomicVarMaker", "org.mapdb.DB$AtomicVarMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer, java.lang.Object, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["kotlin.jvm.functions.Function1<java.lang.String, java.lang.String>", "org.mapdb.DB$CatVal.getMsg()"], ["boolean", "org.mapdb.DB$CatVal.getRequired()"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String>, boolean)"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal(kotlin.jvm.functions.Function1, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["kotlin.jvm.functions.Function1<java.lang.String, java.lang.String>", "org.mapdb.DB$CatVal.component1()"], ["boolean", "org.mapdb.DB$CatVal.component2()"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal.copy(kotlin.jvm.functions.Function1<? super java.lang.String, java.lang.String>, boolean)"], ["org.mapdb.DB$CatVal", "org.mapdb.DB$CatVal.copy$default(org.mapdb.DB$CatVal, kotlin.jvm.functions.Function1, boolean, int, java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$CatVal.toString()"], ["int", "org.mapdb.DB$CatVal.hashCode()"], ["boolean", "org.mapdb.DB$CatVal.equals(java.lang.Object)"], ["java.util.SortedMap<java.lang.String, java.lang.String>", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.serialize(org.mapdb.DataOutput2, java.util.SortedMap<java.lang.String, java.lang.String>)"], ["void", "org.mapdb.DB$Companion$NAME_CATALOG_SERIALIZER$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["void", "org.mapdb.DB$Companion$addShutdownHook$1.run()"], ["java.util.Map", "org.mapdb.DB$Companion.access$getShutdownHooks$p(org.mapdb.DB$Companion)"], ["org.mapdb.DB$Companion", "org.mapdb.DB$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$1.invoke(java.lang.Object)"], ["org.mapdb.Store", "org.mapdb.DB$HashMapMaker$1.invoke(int)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$create2$1.invoke(java.lang.Object, java.lang.Object)"], ["org.mapdb.QueueLong", "org.mapdb.DB$HashMapMaker$create2$1.invoke(int, org.eclipse.collections.impl.list.mutable.primitive.LongArrayList)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$layout$1.invoke(java.lang.Object)"], ["int", "org.mapdb.DB$HashMapMaker$layout$1.invoke(int)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$open2$1.invoke(java.lang.Object, java.lang.Object)"], ["org.mapdb.QueueLong[]", "org.mapdb.DB$HashMapMaker$open2$1.invoke(long, java.lang.String)"], ["V", "org.mapdb.DB$HashMapMaker$verify$1.invoke(K)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker$verify$listener$1$1.get()"], ["java.lang.String", "org.mapdb.DB$HashMapMaker$verify$listener$1$1.get()"], ["void", "org.mapdb.DB$HashMapMaker$verify$listener$1.modify(K, V, V, boolean)"], ["<A> org.mapdb.DB$HashMapMaker<A, V>", "org.mapdb.DB$HashMapMaker.keySerializer(org.mapdb.Serializer<A>)"], ["<A> org.mapdb.DB$HashMapMaker<K, A>", "org.mapdb.DB$HashMapMaker.valueSerializer(org.mapdb.Serializer<A>)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.valueInline()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.removeCollapsesIndexTreeDisable()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.hashSeed(int)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.layout(int, int, int)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterCreate()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterCreate(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterCreate(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterUpdate()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterUpdate(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterUpdate(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterGet()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterGet(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireAfterGet(long, java.util.concurrent.TimeUnit)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireExecutor(java.util.concurrent.ScheduledExecutorService)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireExecutorPeriod(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireCompactThreshold(double)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireMaxSize(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireStoreSize(long)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.expireOverflow(java.util.Map<K, V>)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.valueLoader(kotlin.jvm.functions.Function1<? super K, ? extends V>)"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.counterEnable()"], ["org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB$HashMapMaker.modificationListener(org.mapdb.MapModificationListener<K, V>)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.open2(java.util.SortedMap)"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HashMapMaker.create()"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.create()"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HashMapMaker.createOrOpen()"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.createOrOpen()"], ["org.mapdb.HTreeMap<K, V>", "org.mapdb.DB$HashMapMaker.open()"], ["java.lang.Object", "org.mapdb.DB$HashMapMaker.open()"], ["org.mapdb.DB$HashMapMaker", "org.mapdb.DB$HashMapMaker(org.mapdb.DB, java.lang.String, boolean, kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends org.mapdb.Store>)"], ["org.mapdb.DB$HashMapMaker", "org.mapdb.DB$HashMapMaker(org.mapdb.DB, java.lang.String, boolean, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Serializer", "org.mapdb.DB$HashMapMaker.access$get_valueSerializer$p(org.mapdb.DB$HashMapMaker)"], ["void", "org.mapdb.DB$HashMapMaker.access$set_valueSerializer$p(org.mapdb.DB$HashMapMaker, org.mapdb.Serializer)"], ["java.lang.Object", "org.mapdb.DB$HashSetMaker$1.invoke(java.lang.Object)"], ["org.mapdb.Store", "org.mapdb.DB$HashSetMaker$1.invoke(int)"], ["<A> org.mapdb.DB$HashSetMaker<A>", "org.mapdb.DB$HashSetMaker.serializer(org.mapdb.Serializer<A>)"], ["java.lang.Object", "org.mapdb.DB$HashSetMaker.open2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$HashSetMaker.create2(java.util.SortedMap)"], ["org.mapdb.DB$HashSetMaker", "org.mapdb.DB$HashSetMaker(org.mapdb.DB, java.lang.String, kotlin.jvm.functions.Function1<? super java.lang.Integer, ? extends org.mapdb.Store>)"], ["org.mapdb.DB$HashSetMaker", "org.mapdb.DB$HashSetMaker(org.mapdb.DB, java.lang.String, kotlin.jvm.functions.Function1, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeListMaker$layout$1.invoke(java.lang.Object)"], ["int", "org.mapdb.DB$IndexTreeListMaker$layout$1.invoke(int)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeListMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeListMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$IndexTreeListMaker", "org.mapdb.DB$IndexTreeListMaker(org.mapdb.DB, java.lang.String, org.mapdb.Serializer<E>)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeLongLongMapMaker$layout$1.invoke(java.lang.Object)"], ["int", "org.mapdb.DB$IndexTreeLongLongMapMaker$layout$1.invoke(int)"], ["org.mapdb.DB$IndexTreeLongLongMapMaker", "org.mapdb.DB$IndexTreeLongLongMapMaker.layout(int, int)"], ["org.mapdb.DB$IndexTreeLongLongMapMaker", "org.mapdb.DB$IndexTreeLongLongMapMaker.removeCollapsesIndexTreeDisable()"], ["java.lang.Object", "org.mapdb.DB$IndexTreeLongLongMapMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$IndexTreeLongLongMapMaker.open2(java.util.SortedMap)"], ["org.mapdb.DB$IndexTreeLongLongMapMaker", "org.mapdb.DB$IndexTreeLongLongMapMaker(org.mapdb.DB, java.lang.String)"], ["java.lang.String", "org.mapdb.DB$Keys.getType()"], ["java.lang.String", "org.mapdb.DB$Keys.getKeySerializer()"], ["java.lang.String", "org.mapdb.DB$Keys.getValueSerializer()"], ["java.lang.String", "org.mapdb.DB$Keys.getSerializer()"], ["java.lang.String", "org.mapdb.DB$Keys.getValueInline()"], ["java.lang.String", "org.mapdb.DB$Keys.getCounterRecids()"], ["java.lang.String", "org.mapdb.DB$Keys.getHashSeed()"], ["java.lang.String", "org.mapdb.DB$Keys.getSegmentRecids()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireCreateTTL()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireUpdateTTL()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireGetTTL()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireCreateQueue()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireUpdateQueue()"], ["java.lang.String", "org.mapdb.DB$Keys.getExpireGetQueue()"], ["java.lang.String", "org.mapdb.DB$Keys.getRootRecids()"], ["java.lang.String", "org.mapdb.DB$Keys.getRootRecid()"], ["java.lang.String", "org.mapdb.DB$Keys.getConcShift()"], ["java.lang.String", "org.mapdb.DB$Keys.getDirShift()"], ["java.lang.String", "org.mapdb.DB$Keys.getLevels()"], ["java.lang.String", "org.mapdb.DB$Keys.getRemoveCollapsesIndexTree()"], ["java.lang.String", "org.mapdb.DB$Keys.getRootRecidRecid()"], ["java.lang.String", "org.mapdb.DB$Keys.getCounterRecid()"], ["java.lang.String", "org.mapdb.DB$Keys.getMaxNodeSize()"], ["java.lang.String", "org.mapdb.DB$Keys.getSize()"], ["java.lang.String", "org.mapdb.DB$Keys.getRecid()"], ["E", "org.mapdb.DB$Maker.create()"], ["E", "org.mapdb.DB$Maker.make()"], ["E", "org.mapdb.DB$Maker.makeOrGet()"], ["E", "org.mapdb.DB$Maker.createOrOpen()"], ["E", "org.mapdb.DB$Maker.open()"], ["void", "org.mapdb.DB$Maker.%%%verify$mapdb()"], ["E", "org.mapdb.DB$Maker.%%%create2$mapdb(java.util.SortedMap<java.lang.String, java.lang.String>)"], ["E", "org.mapdb.DB$Maker.%%%open2$mapdb(java.util.SortedMap<java.lang.String, java.lang.String>)"], ["org.mapdb.DB$Maker", "org.mapdb.DB$Maker()"], ["void", "org.mapdb.DB$TreeMapMaker$createFromSink$1.put(kotlin.Pair<? extends K, ? extends V>)"], ["void", "org.mapdb.DB$TreeMapMaker$createFromSink$1.put(java.lang.Object)"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker$createFromSink$1.create()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker$createFromSink$1.create()"], ["<A> org.mapdb.DB$TreeMapMaker<A, V>", "org.mapdb.DB$TreeMapMaker.keySerializer(org.mapdb.serializer.GroupSerializer<A>)"], ["<A> org.mapdb.DB$TreeMapMaker<K, A>", "org.mapdb.DB$TreeMapMaker.valueSerializer(org.mapdb.serializer.GroupSerializer<A>)"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.maxNodeSize(int)"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.counterEnable()"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.valuesOutsideNodesEnable()"], ["org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB$TreeMapMaker.modificationListener(org.mapdb.MapModificationListener<K, V>)"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.createFrom(java.util.Iterator<? extends kotlin.Pair<? extends K, ? extends V>>)"], ["org.mapdb.DB$TreeMapSink<K, V>", "org.mapdb.DB$TreeMapMaker.createFromSink()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.create2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.open2(java.util.SortedMap)"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.create()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.create()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.createOrOpen()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.createOrOpen()"], ["org.mapdb.BTreeMap<K, V>", "org.mapdb.DB$TreeMapMaker.open()"], ["java.lang.Object", "org.mapdb.DB$TreeMapMaker.open()"], ["org.mapdb.DB$TreeMapMaker", "org.mapdb.DB$TreeMapMaker(org.mapdb.DB, java.lang.String, boolean)"], ["org.mapdb.DB$TreeMapMaker", "org.mapdb.DB$TreeMapMaker(org.mapdb.DB, java.lang.String, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Long", "org.mapdb.DB$TreeMapMaker.access$get_rootRecidRecid$p(org.mapdb.DB$TreeMapMaker)"], ["void", "org.mapdb.DB$TreeMapMaker.access$set_rootRecidRecid$p(org.mapdb.DB$TreeMapMaker, java.lang.Long)"], ["java.lang.Long", "org.mapdb.DB$TreeMapMaker.access$get_counterRecid$p(org.mapdb.DB$TreeMapMaker)"], ["void", "org.mapdb.DB$TreeMapMaker.access$set_counterRecid$p(org.mapdb.DB$TreeMapMaker, java.lang.Long)"], ["boolean", "org.mapdb.DB$TreeMapMaker.access$get_counterEnable$p(org.mapdb.DB$TreeMapMaker)"], ["void", "org.mapdb.DB$TreeMapMaker.access$set_counterEnable$p(org.mapdb.DB$TreeMapMaker, boolean)"], ["void", "org.mapdb.DB$TreeMapSink.put(K, V)"], ["void", "org.mapdb.DB$TreeMapSink.putAll(java.util.SortedMap<K, V>)"], ["org.mapdb.DB$TreeMapSink", "org.mapdb.DB$TreeMapSink()"], ["<A> org.mapdb.DB$TreeSetMaker<A>", "org.mapdb.DB$TreeSetMaker.serializer(org.mapdb.serializer.GroupSerializer<A>)"], ["java.lang.Object", "org.mapdb.DB$TreeSetMaker.open2(java.util.SortedMap)"], ["java.lang.Object", "org.mapdb.DB$TreeSetMaker.create2(java.util.SortedMap)"], ["org.mapdb.DB$TreeSetMaker", "org.mapdb.DB$TreeSetMaker(org.mapdb.DB, java.lang.String)"], ["void", "org.mapdb.DB$classInfoSerializer$1.serialize(org.mapdb.DataOutput2, org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[])"], ["void", "org.mapdb.DB$classInfoSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[]", "org.mapdb.DB$classInfoSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.DB$classInfoSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.DB$defaultSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.DB$defaultSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["void", "org.mapdb.DB$elsaSerializer$3.classMissing(java.lang.Class<java.lang.Object>)"], ["int", "org.mapdb.DB$elsaSerializer$4.classToId(java.lang.String)"], ["org.mapdb.elsa.ElsaSerializerPojo$ClassInfo", "org.mapdb.DB$elsaSerializer$4.getClassInfo(int)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$all$1.invoke(java.lang.Object)"], ["java.lang.Void", "org.mapdb.DB$nameCatalogVerifyTree$all$1.invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$boolean$1.invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$boolean$1.invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$int$1.invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$int$1.invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$long$1.invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$long$1.invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$recid$1.invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$recid$1.invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameCatalogVerifyTree$recidOptional$1.invoke(java.lang.Object)"], ["java.lang.String", "org.mapdb.DB$nameCatalogVerifyTree$recidOptional$1.invoke(java.lang.String)"], ["java.lang.Object", "org.mapdb.DB$nameDeser$1.deserialize(java.io.DataInput, org.mapdb.elsa.ElsaStack)"], ["void", "org.mapdb.DB$nameSer$1.serialize(java.io.DataOutput, java.lang.Object, org.mapdb.elsa.ElsaStack)"], ["org.mapdb.Store", "org.mapdb.DB.getStore()"], ["java.util.SortedMap<java.lang.String, java.lang.String>", "org.mapdb.DB.nameCatalogLoad()"], ["void", "org.mapdb.DB.nameCatalogSave(java.util.SortedMap<java.lang.String, java.lang.String>)"], ["void", "org.mapdb.DB.nameCatalogPutClass(java.util.SortedMap<java.lang.String, java.lang.String>, java.lang.String, java.lang.Object)"], ["<E> E", "org.mapdb.DB.nameCatalogGetClass(java.util.SortedMap<java.lang.String, java.lang.String>, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.mapdb.DB.nameCatalogParamsFor(java.lang.String)"], ["void", "org.mapdb.DB.commit()"], ["void", "org.mapdb.DB.rollback()"], ["boolean", "org.mapdb.DB.isClosed()"], ["void", "org.mapdb.DB.close()"], ["<E> E", "org.mapdb.DB.get(java.lang.String)"], ["java.lang.String", "org.mapdb.DB.getNameForObject(java.lang.Object)"], ["boolean", "org.mapdb.DB.exists(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Object>", "org.mapdb.DB.getAll()"], ["org.mapdb.DB$HashMapMaker<?, ?>", "org.mapdb.DB.hashMap(java.lang.String)"], ["<K, V> org.mapdb.DB$HashMapMaker<K, V>", "org.mapdb.DB.hashMap(java.lang.String, org.mapdb.Serializer<K>, org.mapdb.Serializer<V>)"], ["org.mapdb.DB$TreeMapMaker<?, ?>", "org.mapdb.DB.treeMap(java.lang.String)"], ["<K, V> org.mapdb.DB$TreeMapMaker<K, V>", "org.mapdb.DB.treeMap(java.lang.String, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<E> org.mapdb.DB$TreeSetMaker<E>", "org.mapdb.DB.treeSet(java.lang.String, org.mapdb.serializer.GroupSerializer<E>)"], ["<E> org.mapdb.DB$HashSetMaker<E>", "org.mapdb.DB.hashSet(java.lang.String, org.mapdb.Serializer<E>)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB.atomicInteger(java.lang.String)"], ["org.mapdb.DB$AtomicIntegerMaker", "org.mapdb.DB.atomicInteger(java.lang.String, int)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB.atomicLong(java.lang.String)"], ["org.mapdb.DB$AtomicLongMaker", "org.mapdb.DB.atomicLong(java.lang.String, long)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB.atomicBoolean(java.lang.String)"], ["org.mapdb.DB$AtomicBooleanMaker", "org.mapdb.DB.atomicBoolean(java.lang.String, boolean)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB.atomicString(java.lang.String)"], ["org.mapdb.DB$AtomicStringMaker", "org.mapdb.DB.atomicString(java.lang.String, java.lang.String)"], ["<E> org.mapdb.DB$AtomicVarMaker<E>", "org.mapdb.DB.atomicVar(java.lang.String, org.mapdb.Serializer<E>)"], ["<E> org.mapdb.DB$AtomicVarMaker<E>", "org.mapdb.DB.atomicVar(java.lang.String, org.mapdb.Serializer<E>, E)"], ["<E> org.mapdb.DB$IndexTreeListMaker<E>", "org.mapdb.DB.indexTreeList(java.lang.String, org.mapdb.Serializer<E>)"], ["void", "org.mapdb.DB.checkThreadSafe()"], ["void", "org.mapdb.DB.defaultSerializerRegisterClass(java.lang.Class<?>)"], ["boolean", "org.mapdb.DB.isThreadSafe()"], ["java.lang.ClassLoader", "org.mapdb.DB.getClassLoader()"], ["int", "org.mapdb.DB.getShutdownHook()"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Store, boolean, boolean, java.lang.ClassLoader, int)"], ["org.mapdb.DB", "org.mapdb.DB(org.mapdb.Store, boolean, boolean, java.lang.ClassLoader, int, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Store", "org.mapdb.DB.access$getStore$p(org.mapdb.DB)"], ["java.util.Set", "org.mapdb.DB.access$getUnknownClasses$p(org.mapdb.DB)"], ["org.mapdb.elsa.ElsaSerializerPojo$ClassInfo[]", "org.mapdb.DB.access$loadClassInfos(org.mapdb.DB)"], ["org.mapdb.elsa.ElsaSerializerPojo", "org.mapdb.DB.access$getElsaSerializer$p(org.mapdb.DB)"], ["org.mapdb.Serializer", "org.mapdb.DB.access$getNAME_CATALOG_SERIALIZER$cp()"], ["int", "org.mapdb.DB.access$getNAMED_SERIALIZATION_HEADER$cp()"], ["java.util.Map", "org.mapdb.DB.access$getShutdownHooks$cp()"], ["java.util.concurrent.atomic.AtomicBoolean", "org.mapdb.DB.access$getShutdownHookInstalled$cp()"], ["void", "org.mapdb.DB.access$setShutdownHookInstalled$cp(java.util.concurrent.atomic.AtomicBoolean)"], ["org.mapdb.DBException$DataCorruption", "org.mapdb.DBException$DataCorruption(java.lang.String)"], ["org.mapdb.DBException$FileLocked", "org.mapdb.DBException$FileLocked(java.nio.file.Path, java.lang.Exception)"], ["org.mapdb.DBException$GetVoid", "org.mapdb.DBException$GetVoid(long)"], ["org.mapdb.DBException$Interrupted", "org.mapdb.DBException$Interrupted(java.lang.InterruptedException)"], ["org.mapdb.DBException$NewMapDBFormat", "org.mapdb.DBException$NewMapDBFormat(java.lang.String)"], ["org.mapdb.DBException$NewMapDBFormat", "org.mapdb.DBException$NewMapDBFormat(java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.DBException$NewMapDBFormat", "org.mapdb.DBException$NewMapDBFormat()"], ["org.mapdb.DBException$NotSorted", "org.mapdb.DBException$NotSorted()"], ["org.mapdb.DBException$OutOfMemory", "org.mapdb.DBException$OutOfMemory(java.lang.Throwable)"], ["org.mapdb.DBException$PointerChecksumBroken", "org.mapdb.DBException$PointerChecksumBroken()"], ["org.mapdb.DBException$SerializationError", "org.mapdb.DBException$SerializationError(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException$SerializationError", "org.mapdb.DBException$SerializationError(java.lang.Throwable)"], ["org.mapdb.DBException$SerializationError", "org.mapdb.DBException$SerializationError(java.lang.String)"], ["org.mapdb.DBException$VolumeClosed", "org.mapdb.DBException$VolumeClosed(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException$VolumeClosed", "org.mapdb.DBException$VolumeClosed(java.lang.Throwable)"], ["org.mapdb.DBException$VolumeClosed", "org.mapdb.DBException$VolumeClosed(java.lang.String)"], ["org.mapdb.DBException$VolumeClosedByInterrupt", "org.mapdb.DBException$VolumeClosedByInterrupt(java.lang.Throwable)"], ["org.mapdb.DBException$VolumeEOF", "org.mapdb.DBException$VolumeEOF(java.lang.String, java.io.IOException)"], ["org.mapdb.DBException$VolumeEOF", "org.mapdb.DBException$VolumeEOF(java.io.IOException)"], ["org.mapdb.DBException$VolumeEOF", "org.mapdb.DBException$VolumeEOF(java.lang.String)"], ["org.mapdb.DBException$VolumeIOError", "org.mapdb.DBException$VolumeIOError(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException$VolumeIOError", "org.mapdb.DBException$VolumeIOError(java.io.IOException)"], ["org.mapdb.DBException$VolumeIOError", "org.mapdb.DBException$VolumeIOError(java.lang.String)"], ["org.mapdb.DBException$VolumeMaxSizeExceeded", "org.mapdb.DBException$VolumeMaxSizeExceeded(long, long)"], ["org.mapdb.DBException$WrongConfiguration", "org.mapdb.DBException$WrongConfiguration(java.lang.String)"], ["org.mapdb.DBException$WrongFormat", "org.mapdb.DBException$WrongFormat(java.lang.String)"], ["org.mapdb.DBException", "org.mapdb.DBException(java.lang.String, java.lang.Throwable)"], ["org.mapdb.DBException", "org.mapdb.DBException(java.lang.String)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.transactionEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.allocateStartSize(long)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.allocateIncrement(long)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.deleteFilesAfterClose()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileDeleteAfterClose()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileDeleteAfterOpen()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.executorEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.concurrencyDisable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.concurrencyScale(int)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileMmapEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.cleanerHackEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileMmapPreclearDisable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileLockDisable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileLockWait(long)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileLockWait()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.checksumStoreEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.checksumHeaderBypass()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileMmapEnableIfSupported()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.fileChannelEnable()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.closeOnJvmShutdown()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.closeOnJvmShutdownWeakReference()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker.readOnly()"], ["org.mapdb.DB", "org.mapdb.DBMaker$Maker.make()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker(org.mapdb.DBMaker$StoreType, org.mapdb.volume.Volume, java.lang.Boolean, java.lang.String)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker$Maker(org.mapdb.DBMaker$StoreType, org.mapdb.volume.Volume, java.lang.Boolean, java.lang.String, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.DBMaker$StoreType[]", "org.mapdb.DBMaker$StoreType.values()"], ["org.mapdb.DBMaker$StoreType", "org.mapdb.DBMaker$StoreType.valueOf(java.lang.String)"], ["java.lang.Object", "org.mapdb.DBMaker$heapShardedHashMap$1.invoke(java.lang.Object)"], ["org.mapdb.StoreOnHeap", "org.mapdb.DBMaker$heapShardedHashMap$1.invoke(int)"], ["java.lang.Object", "org.mapdb.DBMaker$heapShardedHashSet$1.invoke(java.lang.Object)"], ["org.mapdb.StoreOnHeap", "org.mapdb.DBMaker$heapShardedHashSet$1.invoke(int)"], ["java.lang.Object", "org.mapdb.DBMaker$memoryShardedHashMap$1.invoke(java.lang.Object)"], ["org.mapdb.StoreDirect", "org.mapdb.DBMaker$memoryShardedHashMap$1.invoke(int)"], ["java.lang.Object", "org.mapdb.DBMaker$memoryShardedHashSet$1.invoke(java.lang.Object)"], ["org.mapdb.StoreDirect", "org.mapdb.DBMaker$memoryShardedHashSet$1.invoke(int)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.tempFileDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.fileDB(java.lang.String)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.fileDB(java.io.File)"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.heapDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.memoryDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.memoryDirectDB()"], ["org.mapdb.DBMaker$Maker", "org.mapdb.DBMaker.volumeDB(org.mapdb.volume.Volume, boolean)"], ["org.mapdb.DB$HashMapMaker<?, ?>", "org.mapdb.DBMaker.memoryShardedHashMap(int)"], ["org.mapdb.DB$HashMapMaker<?, ?>", "org.mapdb.DBMaker.heapShardedHashMap(int)"], ["int", "org.mapdb.DataIO.unpackInt(java.io.DataInput)"], ["long", "org.mapdb.DataIO.unpackLong(java.io.DataInput)"], ["int", "org.mapdb.DataIO.unpackInt(java.io.InputStream)"], ["long", "org.mapdb.DataIO.unpackLong(java.io.InputStream)"], ["void", "org.mapdb.DataIO.packLong(java.io.DataOutput, long)"], ["void", "org.mapdb.DataIO.packLong(java.io.OutputStream, long)"], ["int", "org.mapdb.DataIO.packLongSize(long)"], ["long", "org.mapdb.DataIO.unpackRecid(org.mapdb.DataInput2)"], ["void", "org.mapdb.DataIO.packRecid(org.mapdb.DataOutput2, long)"], ["void", "org.mapdb.DataIO.packInt(java.io.DataOutput, int)"], ["void", "org.mapdb.DataIO.packIntBigger(java.io.DataOutput, int)"], ["int", "org.mapdb.DataIO.longHash(long)"], ["int", "org.mapdb.DataIO.intHash(int)"], ["int", "org.mapdb.DataIO.getInt(byte[], int)"], ["void", "org.mapdb.DataIO.putInt(byte[], int, int)"], ["long", "org.mapdb.DataIO.getLong(byte[], int)"], ["void", "org.mapdb.DataIO.putLong(byte[], int, long)"], ["void", "org.mapdb.DataIO.putLong(byte[], int, long, int)"], ["int", "org.mapdb.DataIO.packInt(byte[], int, int)"], ["int", "org.mapdb.DataIO.packLong(byte[], int, long)"], ["int", "org.mapdb.DataIO.unpackInt(byte[], int)"], ["long", "org.mapdb.DataIO.unpackLong(byte[], int)"], ["long", "org.mapdb.DataIO.getSixLong(byte[], int)"], ["void", "org.mapdb.DataIO.putSixLong(byte[], int, long)"], ["long", "org.mapdb.DataIO.nextPowTwo(long)"], ["int", "org.mapdb.DataIO.nextPowTwo(int)"], ["void", "org.mapdb.DataIO.readFully(java.io.InputStream, byte[], int, int)"], ["void", "org.mapdb.DataIO.readFully(java.io.InputStream, byte[])"], ["void", "org.mapdb.DataIO.writeFully(java.nio.channels.FileChannel, java.nio.ByteBuffer)"], ["void", "org.mapdb.DataIO.skipFully(java.io.InputStream, long)"], ["long", "org.mapdb.DataIO.fillLowBits(int)"], ["long", "org.mapdb.DataIO.parity1Set(long)"], ["int", "org.mapdb.DataIO.parity1Set(int)"], ["long", "org.mapdb.DataIO.parity1Get(long)"], ["int", "org.mapdb.DataIO.parity1Get(int)"], ["long", "org.mapdb.DataIO.parity3Set(long)"], ["long", "org.mapdb.DataIO.parity3Get(long)"], ["long", "org.mapdb.DataIO.parity4Set(long)"], ["long", "org.mapdb.DataIO.parity4Get(long)"], ["long", "org.mapdb.DataIO.parity16Set(long)"], ["long", "org.mapdb.DataIO.parity16Get(long)"], ["java.lang.String", "org.mapdb.DataIO.toHexa(byte[])"], ["byte[]", "org.mapdb.DataIO.fromHexa(java.lang.String)"], ["java.lang.Object[]", "org.mapdb.DataIO.arrayPut(java.lang.Object[], int, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.DataIO.arrayDelete(java.lang.Object[], int, int)"], ["long[]", "org.mapdb.DataIO.arrayDelete(long[], int, int)"], ["long", "org.mapdb.DataIO.intToLong(int)"], ["long", "org.mapdb.DataIO.roundUp(long, long)"], ["long", "org.mapdb.DataIO.roundDown(long, long)"], ["int", "org.mapdb.DataIO.roundUp(int, int)"], ["int", "org.mapdb.DataIO.roundDown(int, int)"], ["int", "org.mapdb.DataIO.shift(int)"], ["org.mapdb.DataInput2$ByteArray", "org.mapdb.DataInput2$ByteArray(byte[])"], ["org.mapdb.DataInput2$ByteArray", "org.mapdb.DataInput2$ByteArray(byte[], int)"], ["void", "org.mapdb.DataInput2$ByteArray.readFully(byte[], int, int)"], ["int", "org.mapdb.DataInput2$ByteArray.skipBytes(int)"], ["boolean", "org.mapdb.DataInput2$ByteArray.readBoolean()"], ["byte", "org.mapdb.DataInput2$ByteArray.readByte()"], ["int", "org.mapdb.DataInput2$ByteArray.readUnsignedByte()"], ["short", "org.mapdb.DataInput2$ByteArray.readShort()"], ["char", "org.mapdb.DataInput2$ByteArray.readChar()"], ["int", "org.mapdb.DataInput2$ByteArray.readInt()"], ["long", "org.mapdb.DataInput2$ByteArray.readLong()"], ["int", "org.mapdb.DataInput2$ByteArray.getPos()"], ["void", "org.mapdb.DataInput2$ByteArray.setPos(int)"], ["byte[]", "org.mapdb.DataInput2$ByteArray.internalByteArray()"], ["java.nio.ByteBuffer", "org.mapdb.DataInput2$ByteArray.internalByteBuffer()"], ["void", "org.mapdb.DataInput2$ByteArray.close()"], ["long", "org.mapdb.DataInput2$ByteArray.unpackLong()"], ["void", "org.mapdb.DataInput2$ByteArray.unpackLongSkip(int)"], ["int", "org.mapdb.DataInput2$ByteArray.unpackInt()"], ["long[]", "org.mapdb.DataInput2$ByteArray.unpackLongArrayDeltaCompression(int)"], ["void", "org.mapdb.DataInput2$ByteArray.unpackLongArray(long[], int, int)"], ["void", "org.mapdb.DataInput2$ByteArray.unpackIntArray(int[], int, int)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.DataInput2$ByteBuffer(java.nio.ByteBuffer, int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.readFully(byte[], int, int)"], ["int", "org.mapdb.DataInput2$ByteBuffer.skipBytes(int)"], ["boolean", "org.mapdb.DataInput2$ByteBuffer.readBoolean()"], ["byte", "org.mapdb.DataInput2$ByteBuffer.readByte()"], ["int", "org.mapdb.DataInput2$ByteBuffer.readUnsignedByte()"], ["short", "org.mapdb.DataInput2$ByteBuffer.readShort()"], ["char", "org.mapdb.DataInput2$ByteBuffer.readChar()"], ["int", "org.mapdb.DataInput2$ByteBuffer.readInt()"], ["long", "org.mapdb.DataInput2$ByteBuffer.readLong()"], ["int", "org.mapdb.DataInput2$ByteBuffer.getPos()"], ["void", "org.mapdb.DataInput2$ByteBuffer.setPos(int)"], ["byte[]", "org.mapdb.DataInput2$ByteBuffer.internalByteArray()"], ["java.nio.ByteBuffer", "org.mapdb.DataInput2$ByteBuffer.internalByteBuffer()"], ["void", "org.mapdb.DataInput2$ByteBuffer.close()"], ["long", "org.mapdb.DataInput2$ByteBuffer.unpackLong()"], ["int", "org.mapdb.DataInput2$ByteBuffer.unpackInt()"], ["long[]", "org.mapdb.DataInput2$ByteBuffer.unpackLongArrayDeltaCompression(int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.unpackLongArray(long[], int, int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.unpackLongSkip(int)"], ["void", "org.mapdb.DataInput2$ByteBuffer.unpackIntArray(int[], int, int)"], ["org.mapdb.DataInput2$DataInputToStream", "org.mapdb.DataInput2$DataInputToStream(java.io.DataInput)"], ["int", "org.mapdb.DataInput2$DataInputToStream.read(byte[], int, int)"], ["long", "org.mapdb.DataInput2$DataInputToStream.skip(long)"], ["void", "org.mapdb.DataInput2$DataInputToStream.close()"], ["int", "org.mapdb.DataInput2$DataInputToStream.read()"], ["org.mapdb.DataInput2$Stream", "org.mapdb.DataInput2$Stream(java.io.InputStream)"], ["void", "org.mapdb.DataInput2$Stream.readFully(byte[], int, int)"], ["int", "org.mapdb.DataInput2$Stream.skipBytes(int)"], ["boolean", "org.mapdb.DataInput2$Stream.readBoolean()"], ["byte", "org.mapdb.DataInput2$Stream.readByte()"], ["int", "org.mapdb.DataInput2$Stream.readUnsignedByte()"], ["short", "org.mapdb.DataInput2$Stream.readShort()"], ["char", "org.mapdb.DataInput2$Stream.readChar()"], ["int", "org.mapdb.DataInput2$Stream.readInt()"], ["long", "org.mapdb.DataInput2$Stream.readLong()"], ["long[]", "org.mapdb.DataInput2$Stream.unpackLongArrayDeltaCompression(int)"], ["void", "org.mapdb.DataInput2$Stream.unpackLongArray(long[], int, int)"], ["void", "org.mapdb.DataInput2$Stream.unpackIntArray(int[], int, int)"], ["void", "org.mapdb.DataInput2$Stream.unpackLongSkip(int)"], ["int", "org.mapdb.DataInput2$Stream.getPos()"], ["void", "org.mapdb.DataInput2$Stream.setPos(int)"], ["byte[]", "org.mapdb.DataInput2$Stream.internalByteArray()"], ["java.nio.ByteBuffer", "org.mapdb.DataInput2$Stream.internalByteBuffer()"], ["void", "org.mapdb.DataInput2$Stream.close()"], ["long", "org.mapdb.DataInput2$Stream.unpackLong()"], ["int", "org.mapdb.DataInput2$Stream.unpackInt()"], ["org.mapdb.DataInput2", "org.mapdb.DataInput2()"], ["float", "org.mapdb.DataInput2.readFloat()"], ["double", "org.mapdb.DataInput2.readDouble()"], ["java.lang.String", "org.mapdb.DataInput2.readLine()"], ["java.lang.String", "org.mapdb.DataInput2.readUTF()"], ["int", "org.mapdb.DataInput2.readUnsignedShort()"], ["void", "org.mapdb.DataInput2.readFully(byte[])"], ["org.mapdb.DataOutput2", "org.mapdb.DataOutput2()"], ["byte[]", "org.mapdb.DataOutput2.copyBytes()"], ["void", "org.mapdb.DataOutput2.ensureAvail(int)"], ["void", "org.mapdb.DataOutput2.write(int)"], ["void", "org.mapdb.DataOutput2.write(byte[])"], ["void", "org.mapdb.DataOutput2.write(byte[], int, int)"], ["void", "org.mapdb.DataOutput2.writeBoolean(boolean)"], ["void", "org.mapdb.DataOutput2.writeByte(int)"], ["void", "org.mapdb.DataOutput2.writeShort(int)"], ["void", "org.mapdb.DataOutput2.writeChar(int)"], ["void", "org.mapdb.DataOutput2.writeInt(int)"], ["void", "org.mapdb.DataOutput2.writeLong(long)"], ["void", "org.mapdb.DataOutput2.writeFloat(float)"], ["void", "org.mapdb.DataOutput2.writeDouble(double)"], ["void", "org.mapdb.DataOutput2.writeBytes(java.lang.String)"], ["void", "org.mapdb.DataOutput2.writeChars(java.lang.String)"], ["void", "org.mapdb.DataOutput2.writeUTF(java.lang.String)"], ["void", "org.mapdb.DataOutput2.packInt(int)"], ["void", "org.mapdb.DataOutput2.packIntBigger(int)"], ["void", "org.mapdb.DataOutput2.packLong(long)"], ["void", "org.mapdb.DataOutput2.packLongArray(long[], int, int)"], ["void", "org.mapdb.HTreeMap$1.run()"], ["java.lang.Object", "org.mapdb.HTreeMap$2.get()"], ["java.lang.String", "org.mapdb.HTreeMap$2.get()"], ["<K, V> org.mapdb.HTreeMap<K, V>", "org.mapdb.HTreeMap$Companion.make(org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1<? super K, ? extends V>, org.mapdb.MapModificationListener<K, V>[], java.io.Closeable)"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap$Companion.make$default(org.mapdb.HTreeMap$Companion, org.mapdb.Serializer, org.mapdb.Serializer, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1, org.mapdb.MapModificationListener[], java.io.Closeable, int, java.lang.Object)"], ["org.mapdb.HTreeMap$Companion", "org.mapdb.HTreeMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["K", "org.mapdb.HTreeMap$KeySet$iterator$iters$1$1.invoke(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.HTreeMap$KeySet.getSize()"], ["int", "org.mapdb.HTreeMap$KeySet.size()"], ["boolean", "org.mapdb.HTreeMap$KeySet.contains(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$KeySet.add(K)"], ["void", "org.mapdb.HTreeMap$KeySet.clear()"], ["boolean", "org.mapdb.HTreeMap$KeySet.isEmpty()"], ["boolean", "org.mapdb.HTreeMap$KeySet.remove(java.lang.Object)"], ["org.mapdb.HTreeMap<K, java.lang.Object>", "org.mapdb.HTreeMap$KeySet.getMap()"], ["org.mapdb.HTreeMap$KeySet", "org.mapdb.HTreeMap$KeySet(org.mapdb.HTreeMap<K, java.lang.Object>)"], ["void", "org.mapdb.HTreeMap$calculateCollisionSize$$inlined$lockRead$lambda$1.value(long)"], ["void", "org.mapdb.HTreeMap$clear$$inlined$lockWrite$lambda$1.value(long, long)"], ["java.lang.Object", "org.mapdb.HTreeMap$entries$1$iterator$$inlined$map$lambda$1.invoke(java.lang.Object, java.lang.Object)"], ["java.util.Map$Entry<K, V>", "org.mapdb.HTreeMap$entries$1$iterator$$inlined$map$lambda$1.invoke(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$entries$1.add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.HTreeMap$entries$1.add(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$entries$1.clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap$entries$1.iterator()"], ["boolean", "org.mapdb.HTreeMap$entries$1.remove(java.util.Map$Entry)"], ["boolean", "org.mapdb.HTreeMap$entries$1.remove(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$entries$1.contains(java.util.Map$Entry)"], ["boolean", "org.mapdb.HTreeMap$entries$1.contains(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap$entries$1.isEmpty()"], ["int", "org.mapdb.HTreeMap$entries$1.getSize()"], ["int", "org.mapdb.HTreeMap$entries$1.size()"], ["boolean", "org.mapdb.HTreeMap$expireEvictSegment$1.take(long, org.mapdb.QueueLong$Node)"], ["void", "org.mapdb.HTreeMap$forEach$$inlined$segmentRead$lambda$1.value(long)"], ["void", "org.mapdb.HTreeMap$forEachKey$$inlined$segmentRead$lambda$1.value(long)"], ["void", "org.mapdb.HTreeMap$forEachValue$$inlined$segmentRead$lambda$1.value(long)"], ["K", "org.mapdb.HTreeMap$htreeEntry$1.getKey()"], ["V", "org.mapdb.HTreeMap$htreeEntry$1.getValue()"], ["int", "org.mapdb.HTreeMap$htreeEntry$1.hashCode()"], ["V", "org.mapdb.HTreeMap$htreeEntry$1.setValue(V)"], ["boolean", "org.mapdb.HTreeMap$htreeEntry$1.equals(java.lang.Object)"], ["java.lang.String", "org.mapdb.HTreeMap$htreeEntry$1.toString()"], ["org.mapdb.Store", "org.mapdb.HTreeMap$htreeIterator$1.getStore()"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.HTreeMap$htreeIterator$1.getLeafRecidIter()"], ["int", "org.mapdb.HTreeMap$htreeIterator$1.getLeafPos()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.setLeafPos(int)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$htreeIterator$1.getLeafArray()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.setLeafArray(java.lang.Object[])"], ["K", "org.mapdb.HTreeMap$htreeIterator$1.getLastKey()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.setLastKey(K)"], ["boolean", "org.mapdb.HTreeMap$htreeIterator$1.hasNext()"], ["E", "org.mapdb.HTreeMap$htreeIterator$1.next()"], ["void", "org.mapdb.HTreeMap$htreeIterator$1.remove()"], ["void", "org.mapdb.HTreeMap$leafKeySetSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["void", "org.mapdb.HTreeMap$leafKeySetSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$leafKeySetSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.HTreeMap$leafKeySetSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.HTreeMap$leafKeySetSerializer$1.isTrusted()"], ["void", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["void", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.HTreeMap$leafValueExternalSerializer$1.isTrusted()"], ["void", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["void", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.HTreeMap$leafValueInlineSerializer$1.isTrusted()"], ["void", "org.mapdb.HTreeMap$sizeLong$$inlined$lockRead$lambda$1.value(long, long)"], ["V", "org.mapdb.HTreeMap$values$1$iterator$$inlined$map$lambda$1.invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.HTreeMap$values$1.clear()"], ["boolean", "org.mapdb.HTreeMap$values$1.isEmpty()"], ["int", "org.mapdb.HTreeMap$values$1.getSize()"], ["int", "org.mapdb.HTreeMap$values$1.size()"], ["void", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$1.value(long, long)"], ["java.lang.Object", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2$1.invoke(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2$1.invoke(long, long, long)"], ["java.lang.Object", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2.invoke(java.lang.Object)"], ["void", "org.mapdb.HTreeMap$verify$$inlined$segmentRead$lambda$2.invoke(org.mapdb.QueueLong[])"], ["boolean", "org.mapdb.HTreeMap.isForegroundEviction()"], ["V", "org.mapdb.HTreeMap.put(K, V)"], ["void", "org.mapdb.HTreeMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.mapdb.HTreeMap.remove(java.lang.Object)"], ["void", "org.mapdb.HTreeMap.clear()"], ["void", "org.mapdb.HTreeMap.clear2(boolean)"], ["void", "org.mapdb.HTreeMap.clear2$default(org.mapdb.HTreeMap, boolean, int, java.lang.Object)"], ["void", "org.mapdb.HTreeMap.clearWithoutNotification()"], ["void", "org.mapdb.HTreeMap.clearWithExpire()"], ["void", "org.mapdb.HTreeMap.clear$default(org.mapdb.HTreeMap, int, int, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.containsKey(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.containsValue(java.lang.Object)"], ["V", "org.mapdb.HTreeMap.get(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.isEmpty()"], ["int", "org.mapdb.HTreeMap.getSize()"], ["int", "org.mapdb.HTreeMap.size()"], ["long", "org.mapdb.HTreeMap.sizeLong()"], ["V", "org.mapdb.HTreeMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.HTreeMap.putIfAbsentBoolean(K, V)"], ["boolean", "org.mapdb.HTreeMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.replace(K, V, V)"], ["V", "org.mapdb.HTreeMap.replace(K, V)"], ["void", "org.mapdb.HTreeMap.expireEvict()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.HTreeMap.getEntries()"], ["java.util.Set", "org.mapdb.HTreeMap.entrySet()"], ["java.util.Set", "org.mapdb.HTreeMap.keySet()"], ["java.util.Collection", "org.mapdb.HTreeMap.values()"], ["int", "org.mapdb.HTreeMap.hashCode()"], ["boolean", "org.mapdb.HTreeMap.equals(java.lang.Object)"], ["boolean", "org.mapdb.HTreeMap.isClosed()"], ["void", "org.mapdb.HTreeMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["void", "org.mapdb.HTreeMap.forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)"], ["void", "org.mapdb.HTreeMap.forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)"], ["void", "org.mapdb.HTreeMap.verify()"], ["void", "org.mapdb.HTreeMap.close()"], ["void", "org.mapdb.HTreeMap.checkThreadSafe()"], ["kotlin.Pair<java.lang.Long, java.lang.Long>", "org.mapdb.HTreeMap.calculateCollisionSize()"], ["boolean", "org.mapdb.HTreeMap.getValueInline()"], ["int", "org.mapdb.HTreeMap.getConcShift()"], ["int", "org.mapdb.HTreeMap.getDirShift()"], ["int", "org.mapdb.HTreeMap.getLevels()"], ["org.mapdb.Store[]", "org.mapdb.HTreeMap.getStores()"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap[]", "org.mapdb.HTreeMap.getIndexTrees()"], ["long[]", "org.mapdb.HTreeMap.getCounterRecids()"], ["long", "org.mapdb.HTreeMap.getExpireCreateTTL()"], ["long", "org.mapdb.HTreeMap.getExpireUpdateTTL()"], ["long", "org.mapdb.HTreeMap.getExpireGetTTL()"], ["long", "org.mapdb.HTreeMap.getExpireMaxSize()"], ["long", "org.mapdb.HTreeMap.getExpireStoreSize()"], ["org.mapdb.QueueLong[]", "org.mapdb.HTreeMap.getExpireCreateQueues()"], ["org.mapdb.QueueLong[]", "org.mapdb.HTreeMap.getExpireUpdateQueues()"], ["org.mapdb.QueueLong[]", "org.mapdb.HTreeMap.getExpireGetQueues()"], ["java.util.concurrent.ScheduledExecutorService", "org.mapdb.HTreeMap.getExpireExecutor()"], ["long", "org.mapdb.HTreeMap.getExpireExecutorPeriod()"], ["java.lang.Double", "org.mapdb.HTreeMap.getExpireCompactThreshold()"], ["boolean", "org.mapdb.HTreeMap.isThreadSafe()"], ["kotlin.jvm.functions.Function1<K, V>", "org.mapdb.HTreeMap.getValueLoader()"], ["boolean", "org.mapdb.HTreeMap.getHasValues()"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap(org.mapdb.Serializer<K>, org.mapdb.Serializer<V>, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1<? super K, ? extends V>, org.mapdb.MapModificationListener<K, V>[], java.io.Closeable, boolean)"], ["org.mapdb.HTreeMap", "org.mapdb.HTreeMap(org.mapdb.Serializer, org.mapdb.Serializer, boolean, int, int, int, org.mapdb.Store[], org.eclipse.collections.api.map.primitive.MutableLongLongMap[], int, long[], long, long, long, long, long, org.mapdb.QueueLong[], org.mapdb.QueueLong[], org.mapdb.QueueLong[], java.util.concurrent.ScheduledExecutorService, long, java.lang.Double, boolean, kotlin.jvm.functions.Function1, org.mapdb.MapModificationListener[], java.io.Closeable, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["int", "org.mapdb.HTreeMap.access$getSegmentCount$p(org.mapdb.HTreeMap)"], ["java.util.concurrent.locks.ReadWriteLock[]", "org.mapdb.HTreeMap.access$getLocks$p(org.mapdb.HTreeMap)"], ["int", "org.mapdb.HTreeMap.access$getHashSeed$p(org.mapdb.HTreeMap)"], ["java.lang.Object", "org.mapdb.HTreeMap.access$segmentWrite(org.mapdb.HTreeMap, int, kotlin.jvm.functions.Function0)"], ["void", "org.mapdb.IndexTreeList$clear$$inlined$lockWrite$lambda$1.value(long)"], ["int", "org.mapdb.IndexTreeList$iterator$1.getIndex()"], ["void", "org.mapdb.IndexTreeList$iterator$1.setIndex(int)"], ["java.lang.Integer", "org.mapdb.IndexTreeList$iterator$1.getIndexToRemove()"], ["void", "org.mapdb.IndexTreeList$iterator$1.setIndexToRemove(java.lang.Integer)"], ["boolean", "org.mapdb.IndexTreeList$iterator$1.hasNext()"], ["E", "org.mapdb.IndexTreeList$iterator$1.next()"], ["void", "org.mapdb.IndexTreeList$iterator$1.remove()"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.mapdb.IndexTreeList.getLock()"], ["boolean", "org.mapdb.IndexTreeList.add(E)"], ["void", "org.mapdb.IndexTreeList.add(int, E)"], ["void", "org.mapdb.IndexTreeList.clear()"], ["E", "org.mapdb.IndexTreeList.removeAt(int)"], ["java.lang.Object", "org.mapdb.IndexTreeList.remove(int)"], ["E", "org.mapdb.IndexTreeList.set(int, E)"], ["void", "org.mapdb.IndexTreeList.checkIndex(int)"], ["E", "org.mapdb.IndexTreeList.get(int)"], ["boolean", "org.mapdb.IndexTreeList.isEmpty()"], ["int", "org.mapdb.IndexTreeList.getSize()"], ["int", "org.mapdb.IndexTreeList.size()"], ["org.mapdb.Store", "org.mapdb.IndexTreeList.getStore()"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeList.getMap()"], ["long", "org.mapdb.IndexTreeList.getCounterRecid()"], ["boolean", "org.mapdb.IndexTreeList.isThreadSafe()"], ["org.mapdb.IndexTreeList", "org.mapdb.IndexTreeList(org.mapdb.Store, org.mapdb.Serializer<E>, org.eclipse.collections.api.map.primitive.MutableLongLongMap, long, boolean)"], ["void", "org.mapdb.IndexTreeListJava$1.serialize(org.mapdb.DataOutput2, long[])"], ["long[]", "org.mapdb.IndexTreeListJava$1.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.IndexTreeListJava$1.isTrusted()"], ["java.lang.Object", "org.mapdb.IndexTreeListJava$1.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.IndexTreeListJava$1.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["long[]", "org.mapdb.IndexTreeListJava.treeIter(int, long, org.mapdb.Store, int, long)"], ["<V> V", "org.mapdb.IndexTreeListJava.treeFold(long, org.mapdb.Store, int, V, org.mapdb.IndexTreeListJava$TreeTraverseCallback<V>)"], ["void", "org.mapdb.IndexTreeListJava.treeClear(long, org.mapdb.Store, int)"], ["long[]", "org.mapdb.IndexTreeListJava.treeLast(long, org.mapdb.Store, int)"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap$Companion.make(org.mapdb.Store, long, int, int, boolean)"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap$Companion.make$default(org.mapdb.IndexTreeLongLongMap$Companion, org.mapdb.Store, long, int, int, boolean, int, java.lang.Object)"], ["org.mapdb.IndexTreeLongLongMap$Companion", "org.mapdb.IndexTreeLongLongMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$Iterator.getNextKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.setNextKey(java.lang.Long)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$Iterator.getNextRet()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.setNextRet(java.lang.Long)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$Iterator.getLastKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.setLastKey(java.lang.Long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$Iterator.hasNext()"], ["long", "org.mapdb.IndexTreeLongLongMap$Iterator.next()"], ["void", "org.mapdb.IndexTreeLongLongMap$Iterator.remove()"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap$Iterator.getM()"], ["int", "org.mapdb.IndexTreeLongLongMap$Iterator.getIndex()"], ["org.mapdb.IndexTreeLongLongMap$Iterator", "org.mapdb.IndexTreeLongLongMap$Iterator(org.mapdb.IndexTreeLongLongMap, int)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$allSatisfy$1.visit(long, long, java.lang.Object)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$allSatisfy$1.visit(long, long, boolean)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$anySatisfy$1.visit(long, long, java.lang.Object)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$anySatisfy$1.visit(long, long, boolean)"], ["void", "org.mapdb.IndexTreeLongLongMap$appendString$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$collect$1.value(long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$containsValue$1.visit(long, long, java.lang.Object)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$containsValue$1.visit(long, long, boolean)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$count$1.visit(long, long, java.lang.Object)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$count$1.visit(long, long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$detectIfNone$1.value(long)"], ["void", "org.mapdb.IndexTreeLongLongMap$equals$1.value(long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$forEachKey$1.visit(long, long, java.lang.Object)"], ["void", "org.mapdb.IndexTreeLongLongMap$forEachKey$1.visit(long, long, kotlin.Unit)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$forEachKeyValue$1.visit(long, long, java.lang.Object)"], ["void", "org.mapdb.IndexTreeLongLongMap$forEachKeyValue$1.visit(long, long, kotlin.Unit)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$forEachValue$1.visit(long, long, java.lang.Object)"], ["void", "org.mapdb.IndexTreeLongLongMap$forEachValue$1.visit(long, long, kotlin.Unit)"], ["void", "org.mapdb.IndexTreeLongLongMap$hashCode$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1$removeAll$1.value(long)"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1$retainAll$1.value(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.contains(long)"], ["long", "org.mapdb.IndexTreeLongLongMap$keySet$1.max()"], ["long", "org.mapdb.IndexTreeLongLongMap$keySet$1.min()"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1.clear()"], ["org.eclipse.collections.api.set.primitive.LongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.freeze()"], ["void", "org.mapdb.IndexTreeLongLongMap$keySet$1.forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.IndexTreeLongLongMap$keySet$1.longIterator()"], ["org.eclipse.collections.api.iterator.LongIterator", "org.mapdb.IndexTreeLongLongMap$keySet$1.longIterator()"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.remove(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.removeAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.removeAll(long...)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.retainAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keySet$1.retainAll(long...)"], ["org.eclipse.collections.api.set.primitive.ImmutableLongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.toImmutable()"], ["org.eclipse.collections.api.collection.primitive.ImmutableLongCollection", "org.mapdb.IndexTreeLongLongMap$keySet$1.toImmutable()"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.asUnmodifiable()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$keySet$1.asUnmodifiable()"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.asSynchronized()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$keySet$1.asSynchronized()"], ["int", "org.mapdb.IndexTreeLongLongMap$keySet$1.size()"], ["org.eclipse.collections.api.set.SetIterable", "org.mapdb.IndexTreeLongLongMap$keySet$1.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.set.primitive.LongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.set.primitive.LongSet", "org.mapdb.IndexTreeLongLongMap$keySet$1.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$each$1.value(long, long)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.getNextKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.setNextKey(java.lang.Long)"], ["org.eclipse.collections.api.tuple.primitive.LongLongPair", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.getNextRet()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.setNextRet(org.eclipse.collections.api.tuple.primitive.LongLongPair)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.getLastKey()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.setLastKey(java.lang.Long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.hasNext()"], ["org.eclipse.collections.api.tuple.primitive.LongLongPair", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.next()"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.next()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1$iterator$1.remove()"], ["void", "org.mapdb.IndexTreeLongLongMap$keysValuesView$1.each(org.eclipse.collections.api.block.procedure.Procedure<? super org.eclipse.collections.api.tuple.primitive.LongLongPair>)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$max$ret$1.visit(long, long, java.lang.Object)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$max$ret$1.visit(long, long, java.lang.Long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$min$ret$1.visit(long, long, java.lang.Object)"], ["java.lang.Long", "org.mapdb.IndexTreeLongLongMap$min$ret$1.visit(long, long, java.lang.Long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$noneSatisfy$1.visit(long, long, java.lang.Object)"], ["java.lang.Boolean", "org.mapdb.IndexTreeLongLongMap$noneSatisfy$1.visit(long, long, boolean)"], ["void", "org.mapdb.IndexTreeLongLongMap$putAll$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$reject$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$reject$2.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$select$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$select$2.value(long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$size$1.visit(long, long, java.lang.Object)"], ["long", "org.mapdb.IndexTreeLongLongMap$size$1.visit(long, long, long)"], ["java.lang.Object", "org.mapdb.IndexTreeLongLongMap$sum$1.visit(long, long, java.lang.Object)"], ["long", "org.mapdb.IndexTreeLongLongMap$sum$1.visit(long, long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$toString$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1$remove$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1$removeAll$1.value(long, long)"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1$retainAll$1.value(long, long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.contains(long)"], ["int", "org.mapdb.IndexTreeLongLongMap$values$1.size()"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1.forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["long", "org.mapdb.IndexTreeLongLongMap$values$1.max()"], ["long", "org.mapdb.IndexTreeLongLongMap$values$1.min()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$values$1.asSynchronized()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap$values$1.asUnmodifiable()"], ["void", "org.mapdb.IndexTreeLongLongMap$values$1.clear()"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.IndexTreeLongLongMap$values$1.longIterator()"], ["org.eclipse.collections.api.iterator.LongIterator", "org.mapdb.IndexTreeLongLongMap$values$1.longIterator()"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.remove(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.removeAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.removeAll(long...)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.retainAll(org.eclipse.collections.api.LongIterable)"], ["boolean", "org.mapdb.IndexTreeLongLongMap$values$1.retainAll(long...)"], ["org.eclipse.collections.api.collection.primitive.ImmutableLongCollection", "org.mapdb.IndexTreeLongLongMap$values$1.toImmutable()"], ["void", "org.mapdb.IndexTreeLongLongMap$withoutAllKeys$1.value(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.put(long, long)"], ["long", "org.mapdb.IndexTreeLongLongMap.get(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.remove(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.contains(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.containsKey(long)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.containsValue(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.clear()"], ["<V> org.eclipse.collections.api.collection.MutableCollection<V>", "org.mapdb.IndexTreeLongLongMap.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction<? extends V>)"], ["org.eclipse.collections.api.RichIterable", "org.mapdb.IndexTreeLongLongMap.collect(org.eclipse.collections.api.block.function.primitive.LongToObjectFunction)"], ["org.eclipse.collections.api.iterator.MutableLongIterator", "org.mapdb.IndexTreeLongLongMap.longIterator()"], ["org.eclipse.collections.api.iterator.LongIterator", "org.mapdb.IndexTreeLongLongMap.longIterator()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["org.eclipse.collections.api.LongIterable", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["void", "org.mapdb.IndexTreeLongLongMap.appendString(java.lang.Appendable, java.lang.String, java.lang.String, java.lang.String)"], ["int", "org.mapdb.IndexTreeLongLongMap.size()"], ["boolean", "org.mapdb.IndexTreeLongLongMap.allSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.anySatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["int", "org.mapdb.IndexTreeLongLongMap.count(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["long", "org.mapdb.IndexTreeLongLongMap.detectIfNone(org.eclipse.collections.api.block.predicate.primitive.LongPredicate, long)"], ["void", "org.mapdb.IndexTreeLongLongMap.each(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEach(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["<T> T", "org.mapdb.IndexTreeLongLongMap.injectInto(T, org.eclipse.collections.api.block.function.primitive.ObjectLongToObjectFunction<? super T, ? extends T>)"], ["long", "org.mapdb.IndexTreeLongLongMap.max()"], ["long", "org.mapdb.IndexTreeLongLongMap.min()"], ["boolean", "org.mapdb.IndexTreeLongLongMap.noneSatisfy(org.eclipse.collections.api.block.predicate.primitive.LongPredicate)"], ["long", "org.mapdb.IndexTreeLongLongMap.sum()"], ["long[]", "org.mapdb.IndexTreeLongLongMap.toArray()"], ["long", "org.mapdb.IndexTreeLongLongMap.addToValue(long, long)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.asSynchronized()"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.asUnmodifiable()"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPut(long, org.eclipse.collections.api.block.function.primitive.LongFunction0)"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPut(long, long)"], ["<P> long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPutWith(long, org.eclipse.collections.api.block.function.primitive.LongFunction<? super P>, P)"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsentPutWithKey(long, org.eclipse.collections.api.block.function.primitive.LongToLongFunction)"], ["void", "org.mapdb.IndexTreeLongLongMap.putAll(org.eclipse.collections.api.map.primitive.LongLongMap)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["org.eclipse.collections.api.map.primitive.LongLongMap", "org.mapdb.IndexTreeLongLongMap.reject(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["void", "org.mapdb.IndexTreeLongLongMap.removeKey(long)"], ["long", "org.mapdb.IndexTreeLongLongMap.removeKeyIfAbsent(long, long)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["org.eclipse.collections.api.map.primitive.LongLongMap", "org.mapdb.IndexTreeLongLongMap.select(org.eclipse.collections.api.block.predicate.primitive.LongLongPredicate)"], ["long", "org.mapdb.IndexTreeLongLongMap.updateValue(long, long, org.eclipse.collections.api.block.function.primitive.LongToLongFunction)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.withKeyValue(long, long)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.withoutAllKeys(org.eclipse.collections.api.LongIterable)"], ["org.eclipse.collections.api.map.primitive.MutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.withoutKey(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEachKey(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEachKeyValue(org.eclipse.collections.api.block.procedure.primitive.LongLongProcedure)"], ["long", "org.mapdb.IndexTreeLongLongMap.getIfAbsent(long, long)"], ["long", "org.mapdb.IndexTreeLongLongMap.getOrThrow(long)"], ["void", "org.mapdb.IndexTreeLongLongMap.forEachValue(org.eclipse.collections.api.block.procedure.primitive.LongProcedure)"], ["boolean", "org.mapdb.IndexTreeLongLongMap.equals(java.lang.Object)"], ["int", "org.mapdb.IndexTreeLongLongMap.hashCode()"], ["java.lang.String", "org.mapdb.IndexTreeLongLongMap.toString()"], ["org.eclipse.collections.api.set.primitive.MutableLongSet", "org.mapdb.IndexTreeLongLongMap.keySet()"], ["org.eclipse.collections.api.LazyLongIterable", "org.mapdb.IndexTreeLongLongMap.keysView()"], ["org.eclipse.collections.api.map.primitive.ImmutableLongLongMap", "org.mapdb.IndexTreeLongLongMap.toImmutable()"], ["org.eclipse.collections.api.collection.primitive.MutableLongCollection", "org.mapdb.IndexTreeLongLongMap.values()"], ["org.mapdb.Store", "org.mapdb.IndexTreeLongLongMap.getStore()"], ["long", "org.mapdb.IndexTreeLongLongMap.getRootRecid()"], ["int", "org.mapdb.IndexTreeLongLongMap.getDirShift()"], ["int", "org.mapdb.IndexTreeLongLongMap.getLevels()"], ["boolean", "org.mapdb.IndexTreeLongLongMap.getCollapseOnRemove()"], ["org.mapdb.IndexTreeLongLongMap", "org.mapdb.IndexTreeLongLongMap(org.mapdb.Store, long, int, int, boolean)"], ["java.lang.Long", "org.mapdb.Pump$Sink.getRootRecidRecid$mapdb()"], ["void", "org.mapdb.Pump$Sink.setRootRecidRecid$mapdb(java.lang.Long)"], ["long", "org.mapdb.Pump$Sink.getCounter$mapdb()"], ["void", "org.mapdb.Pump$Sink.setCounter$mapdb(long)"], ["void", "org.mapdb.Pump$Sink.putAll(java.lang.Iterable<? extends E>)"], ["void", "org.mapdb.Pump$Sink.putAll(java.util.Iterator<? extends E>)"], ["org.mapdb.Pump$Sink", "org.mapdb.Pump$Sink()"], ["int", "org.mapdb.Pump$treeMap$1.getLeftEdgeLeaf()"], ["void", "org.mapdb.Pump$treeMap$1.setLeftEdgeLeaf(int)"], ["long", "org.mapdb.Pump$treeMap$1.getNextLeafLink()"], ["void", "org.mapdb.Pump$treeMap$1.setNextLeafLink(long)"], ["org.mapdb.BTreeMapJava$NodeSerializer", "org.mapdb.Pump$treeMap$1.getNodeSer()"], ["java.lang.Object", "org.mapdb.Pump$treeMap$1.nodeValues()"], ["void", "org.mapdb.Pump$treeMap$1.put(kotlin.Pair<? extends K, ? extends V>)"], ["void", "org.mapdb.Pump$treeMap$1.put(java.lang.Object)"], ["void", "org.mapdb.Pump$treeMap$1.create()"], ["java.lang.Object", "org.mapdb.Pump$treeMap$1.create()"], ["int", "org.mapdb.Pump$treeMap$DirData.getLeftEdge()"], ["void", "org.mapdb.Pump$treeMap$DirData.setLeftEdge(int)"], ["void", "org.mapdb.Pump$treeMap$DirData.setKeys(java.util.ArrayList<K>)"], ["org.eclipse.collections.impl.list.mutable.primitive.LongArrayList", "org.mapdb.Pump$treeMap$DirData.getChild()"], ["void", "org.mapdb.Pump$treeMap$DirData.setChild(org.eclipse.collections.impl.list.mutable.primitive.LongArrayList)"], ["long", "org.mapdb.Pump$treeMap$DirData.getNextDirLink()"], ["void", "org.mapdb.Pump$treeMap$DirData.setNextDirLink(long)"], ["org.mapdb.Pump$treeMap$DirData", "org.mapdb.Pump$treeMap$DirData()"], ["<K, V> org.mapdb.Pump$Sink<kotlin.Pair<K, V>, kotlin.Unit>", "org.mapdb.Pump.treeMap(org.mapdb.Store, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, java.util.Comparator<K>, int, int, boolean, boolean)"], ["org.mapdb.Pump$Sink", "org.mapdb.Pump.treeMap$default(org.mapdb.Pump, org.mapdb.Store, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, java.util.Comparator, int, int, boolean, boolean, int, java.lang.Object)"], ["org.mapdb.QueueLong", "org.mapdb.QueueLong$Companion.make(org.mapdb.Store, long, long, long)"], ["org.mapdb.QueueLong", "org.mapdb.QueueLong$Companion.make$default(org.mapdb.QueueLong$Companion, org.mapdb.Store, long, long, long, int, java.lang.Object)"], ["org.mapdb.QueueLong$Companion", "org.mapdb.QueueLong$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["void", "org.mapdb.QueueLong$Node$SERIALIZER.serialize(org.mapdb.DataOutput2, org.mapdb.QueueLong$Node)"], ["void", "org.mapdb.QueueLong$Node$SERIALIZER.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node$SERIALIZER.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.QueueLong$Node$SERIALIZER.deserialize(org.mapdb.DataInput2, int)"], ["long", "org.mapdb.QueueLong$Node.getPrevRecid()"], ["long", "org.mapdb.QueueLong$Node.getNextRecid()"], ["long", "org.mapdb.QueueLong$Node.getTimestamp()"], ["long", "org.mapdb.QueueLong$Node.getValue()"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node(long, long, long, long)"], ["long", "org.mapdb.QueueLong$Node.component1()"], ["long", "org.mapdb.QueueLong$Node.component2()"], ["long", "org.mapdb.QueueLong$Node.component3()"], ["long", "org.mapdb.QueueLong$Node.component4()"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node.copy(long, long, long, long)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong$Node.copy$default(org.mapdb.QueueLong$Node, long, long, long, long, int, java.lang.Object)"], ["java.lang.String", "org.mapdb.QueueLong$Node.toString()"], ["int", "org.mapdb.QueueLong$Node.hashCode()"], ["boolean", "org.mapdb.QueueLong$Node.equals(java.lang.Object)"], ["boolean", "org.mapdb.QueueLong$clear$1.take(long, org.mapdb.QueueLong$Node)"], ["long", "org.mapdb.QueueLong.getTail()"], ["void", "org.mapdb.QueueLong.setTail(long)"], ["long", "org.mapdb.QueueLong.getHead()"], ["void", "org.mapdb.QueueLong.setHead(long)"], ["long", "org.mapdb.QueueLong.getHeadPrev()"], ["void", "org.mapdb.QueueLong.setHeadPrev(long)"], ["long", "org.mapdb.QueueLong.put(long, long)"], ["void", "org.mapdb.QueueLong.put(long, long, long)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong.take()"], ["void", "org.mapdb.QueueLong.takeUntil(org.mapdb.QueueLongTakeUntil)"], ["org.mapdb.QueueLong$Node", "org.mapdb.QueueLong.remove(long, boolean)"], ["void", "org.mapdb.QueueLong.bump(long, long)"], ["void", "org.mapdb.QueueLong.clear()"], ["long", "org.mapdb.QueueLong.size()"], ["void", "org.mapdb.QueueLong.verify()"], ["long[]", "org.mapdb.QueueLong.valuesArray()"], ["void", "org.mapdb.QueueLong.forEach(kotlin.jvm.functions.Function3<? super java.lang.Long, ? super java.lang.Long, ? super java.lang.Long, kotlin.Unit>)"], ["void", "org.mapdb.QueueLong.printContent(java.io.PrintStream)"], ["org.mapdb.Store", "org.mapdb.QueueLong.getStore()"], ["long", "org.mapdb.QueueLong.getTailRecid()"], ["long", "org.mapdb.QueueLong.getHeadRecid()"], ["long", "org.mapdb.QueueLong.getHeadPrevRecid()"], ["org.mapdb.QueueLong", "org.mapdb.QueueLong(org.mapdb.Store, long, long, long)"], ["default", "org.mapdb.Serializer.int fixedSize()"], ["default", "org.mapdb.Serializer.boolean isTrusted()"], ["default", "org.mapdb.Serializer.int compare(A, A)"], ["default", "org.mapdb.Serializer.boolean equals(A, A)"], ["default", "org.mapdb.Serializer.int hashCode(A, int)"], ["default", "org.mapdb.Serializer.boolean needsAvailableSizeHint()"], ["default", "org.mapdb.Serializer.A deserializeFromLong(long, int)"], ["default", "org.mapdb.Serializer.A clone(A)"], ["org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.pageSize(long)"], ["org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.nodeSize(int)"], ["org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.createFrom(java.lang.Iterable<? extends kotlin.Pair<? extends K, ? extends V>>)"], ["org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.createFrom(java.util.Map<K, ? extends V>)"], ["org.mapdb.SortedTableMap$Sink<K, V>", "org.mapdb.SortedTableMap$Companion$Maker.createFromSink()"], ["org.mapdb.SortedTableMap$Companion$Maker", "org.mapdb.SortedTableMap$Companion$Maker(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["org.mapdb.SortedTableMap$Companion$Maker", "org.mapdb.SortedTableMap$Companion$Maker(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.SortedTableMap$Companion$Maker", "org.mapdb.SortedTableMap$Companion$Maker()"], ["byte[]", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getBytes()"], ["java.util.ArrayList<kotlin.Pair<K, V>>", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getPairs()"], ["int", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getNodesSize()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.setNodesSize(int)"], ["long", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getFileTail()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.setFileTail(long)"], ["K", "org.mapdb.SortedTableMap$Companion$createFromSink$1.getOldKey()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.setOldKey(K)"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.put(kotlin.Pair<? extends K, ? extends V>)"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.put(java.lang.Object)"], ["org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion$createFromSink$1.create()"], ["java.lang.Object", "org.mapdb.SortedTableMap$Companion$createFromSink$1.create()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.pairsToNodes()"], ["void", "org.mapdb.SortedTableMap$Companion$createFromSink$1.flushPage()"], ["<K, V> org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap$Companion.create(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<K, V> org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap$Companion.open(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<K, V> org.mapdb.SortedTableMap$Sink<K, V>", "org.mapdb.SortedTableMap$Companion.createFromSink(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, org.mapdb.volume.Volume, long, int)"], ["org.mapdb.SortedTableMap$Sink", "org.mapdb.SortedTableMap$Companion.createFromSink$default(org.mapdb.SortedTableMap$Companion, org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, org.mapdb.volume.Volume, long, int, int, java.lang.Object)"], ["int", "org.mapdb.SortedTableMap$Companion.access$getStart$p(org.mapdb.SortedTableMap$Companion)"], ["long", "org.mapdb.SortedTableMap$Companion.access$getSIZE_OFFSET$p(org.mapdb.SortedTableMap$Companion)"], ["long", "org.mapdb.SortedTableMap$Companion.access$getPAGE_COUNT_OFFSET$p(org.mapdb.SortedTableMap$Companion)"], ["long", "org.mapdb.SortedTableMap$Companion.access$getPAGE_SIZE_OFFSET$p(org.mapdb.SortedTableMap$Companion)"], ["org.mapdb.SortedTableMap$Companion", "org.mapdb.SortedTableMap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["boolean", "org.mapdb.SortedTableMap$NodeIterator.moveToNext()"], ["boolean", "org.mapdb.SortedTableMap$NodeIterator.moveToPrev()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.keysOffset()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.keysOffsetEnd()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.valsOffset()"], ["long", "org.mapdb.SortedTableMap$NodeIterator.valsOffsetEnd()"], ["int", "org.mapdb.SortedTableMap$NodeIterator.keysSize()"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$NodeIterator.loadKeys()"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$NodeIterator.loadVals(int)"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$NodeIterator(org.mapdb.SortedTableMap<?, ?>, long, long, long, long)"], ["void", "org.mapdb.SortedTableMap$Sink.put(K, V)"], ["org.mapdb.SortedTableMap$Sink", "org.mapdb.SortedTableMap$Sink()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$1.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingEntryIterator$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$descendingEntryIterator$1.next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$descendingEntryIterator$1.next()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$1.remove()"], ["long", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getPage()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setPage(long)"], ["long", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getPageWithHead()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setPageWithHead(long)"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getPageNodeCount()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setPageNodeCount(int)"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNode()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNode(int)"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$descendingEntryIterator$2.getLoComp()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.loadFirstEntry()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.findHi()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingEntryIterator$2.hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$descendingEntryIterator$2.next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$descendingEntryIterator$2.next()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.checkLoBound()"], ["void", "org.mapdb.SortedTableMap$descendingEntryIterator$2.remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$descendingKeyIterator$1.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$1.getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingKeyIterator$1.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.setNodeKeys(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingKeyIterator$1.hasNext()"], ["K", "org.mapdb.SortedTableMap$descendingKeyIterator$1.next()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$1.remove()"], ["long", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getPage()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setPage(long)"], ["long", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getPageWithHead()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setPageWithHead(long)"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getPageNodeCount()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setPageNodeCount(int)"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getNode()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setNode(int)"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.setNodeKeys(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$descendingKeyIterator$2.getLoComp()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.loadFirstEntry()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.findHi()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingKeyIterator$2.hasNext()"], ["K", "org.mapdb.SortedTableMap$descendingKeyIterator$2.next()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.checkLoBound()"], ["void", "org.mapdb.SortedTableMap$descendingKeyIterator$2.remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$descendingValueIterator$1.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$1.getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingValueIterator$1.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingValueIterator$1.hasNext()"], ["V", "org.mapdb.SortedTableMap$descendingValueIterator$1.next()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$1.remove()"], ["long", "org.mapdb.SortedTableMap$descendingValueIterator$2.getPage()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setPage(long)"], ["long", "org.mapdb.SortedTableMap$descendingValueIterator$2.getPageWithHead()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setPageWithHead(long)"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getPageNodeCount()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setPageNodeCount(int)"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNode()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNode(int)"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNodePos()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$descendingValueIterator$2.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$descendingValueIterator$2.getLoComp()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.loadFirstEntry()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.findHi()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$descendingValueIterator$2.hasNext()"], ["V", "org.mapdb.SortedTableMap$descendingValueIterator$2.next()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.checkLoBound()"], ["void", "org.mapdb.SortedTableMap$descendingValueIterator$2.remove()"], ["boolean", "org.mapdb.SortedTableMap$entries$1.contains(java.util.Map$Entry)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.contains(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.isEmpty()"], ["int", "org.mapdb.SortedTableMap$entries$1.getSize()"], ["int", "org.mapdb.SortedTableMap$entries$1.size()"], ["boolean", "org.mapdb.SortedTableMap$entries$1.add(java.util.Map$Entry<K, V>)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.add(java.lang.Object)"], ["void", "org.mapdb.SortedTableMap$entries$1.clear()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap$entries$1.iterator()"], ["boolean", "org.mapdb.SortedTableMap$entries$1.remove(java.util.Map$Entry)"], ["boolean", "org.mapdb.SortedTableMap$entries$1.remove(java.lang.Object)"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$entryIterator$1.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$entryIterator$1.getNodePos()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$1.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$1.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$entryIterator$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$entryIterator$1.next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$entryIterator$1.next()"], ["void", "org.mapdb.SortedTableMap$entryIterator$1.remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$entryIterator$2.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$entryIterator$2.getNodePos()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$2.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$entryIterator$2.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$entryIterator$2.getHiComp()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.loadNextNode()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.findStart()"], ["boolean", "org.mapdb.SortedTableMap$entryIterator$2.hasNext()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap$entryIterator$2.next()"], ["java.lang.Object", "org.mapdb.SortedTableMap$entryIterator$2.next()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.checkHiBound()"], ["void", "org.mapdb.SortedTableMap$entryIterator$2.remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$keyIterator$1.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$keyIterator$1.getNodePos()"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$keyIterator$1.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.setNodeKeys(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$keyIterator$1.hasNext()"], ["K", "org.mapdb.SortedTableMap$keyIterator$1.next()"], ["void", "org.mapdb.SortedTableMap$keyIterator$1.remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$keyIterator$2.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$keyIterator$2.getNodePos()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$keyIterator$2.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.setNodeKeys(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$keyIterator$2.getHiComp()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.loadNextNode()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.findStart()"], ["boolean", "org.mapdb.SortedTableMap$keyIterator$2.hasNext()"], ["K", "org.mapdb.SortedTableMap$keyIterator$2.next()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.checkHiBound()"], ["void", "org.mapdb.SortedTableMap$keyIterator$2.remove()"], ["java.lang.Object", "org.mapdb.SortedTableMap$pageKeys$1.invoke()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$valueIterator$1.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$valueIterator$1.getNodePos()"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$valueIterator$1.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.setNodeVals(java.lang.Object[])"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.loadNextNode()"], ["boolean", "org.mapdb.SortedTableMap$valueIterator$1.hasNext()"], ["V", "org.mapdb.SortedTableMap$valueIterator$1.next()"], ["void", "org.mapdb.SortedTableMap$valueIterator$1.remove()"], ["org.mapdb.SortedTableMap$NodeIterator", "org.mapdb.SortedTableMap$valueIterator$2.getNodeIter()"], ["int", "org.mapdb.SortedTableMap$valueIterator$2.getNodePos()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.setNodePos(int)"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$valueIterator$2.getNodeKeys()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.setNodeKeys(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.SortedTableMap$valueIterator$2.getNodeVals()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.setNodeVals(java.lang.Object[])"], ["int", "org.mapdb.SortedTableMap$valueIterator$2.getHiComp()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.loadNextNode()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.findStart()"], ["boolean", "org.mapdb.SortedTableMap$valueIterator$2.hasNext()"], ["V", "org.mapdb.SortedTableMap$valueIterator$2.next()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.checkHiBound()"], ["void", "org.mapdb.SortedTableMap$valueIterator$2.remove()"], ["boolean", "org.mapdb.SortedTableMap$values$1.contains(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap$values$1.isEmpty()"], ["int", "org.mapdb.SortedTableMap$values$1.getSize()"], ["int", "org.mapdb.SortedTableMap$values$1.size()"], ["boolean", "org.mapdb.SortedTableMap$values$1.add(V)"], ["void", "org.mapdb.SortedTableMap$values$1.clear()"], ["boolean", "org.mapdb.SortedTableMap$values$1.remove(java.lang.Object)"], ["long", "org.mapdb.SortedTableMap.getSizeLong()"], ["long", "org.mapdb.SortedTableMap.getPageCount()"], ["boolean", "org.mapdb.SortedTableMap.containsKey(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap.containsValue(java.lang.Object)"], ["V", "org.mapdb.SortedTableMap.get(java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap.isEmpty()"], ["int", "org.mapdb.SortedTableMap.getSize()"], ["int", "org.mapdb.SortedTableMap.size()"], ["long", "org.mapdb.SortedTableMap.sizeLong()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.entryIterator()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.getEntries()"], ["java.util.Set", "org.mapdb.SortedTableMap.entrySet()"], ["java.util.NavigableSet", "org.mapdb.SortedTableMap.keySet()"], ["java.util.Set", "org.mapdb.SortedTableMap.keySet()"], ["java.util.Collection", "org.mapdb.SortedTableMap.values()"], ["void", "org.mapdb.SortedTableMap.clear()"], ["V", "org.mapdb.SortedTableMap.put(K, V)"], ["void", "org.mapdb.SortedTableMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.mapdb.SortedTableMap.remove(java.lang.Object)"], ["V", "org.mapdb.SortedTableMap.putIfAbsent(K, V)"], ["boolean", "org.mapdb.SortedTableMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.mapdb.SortedTableMap.replace(K, V, V)"], ["V", "org.mapdb.SortedTableMap.replace(K, V)"], ["boolean", "org.mapdb.SortedTableMap.equals(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.mapdb.SortedTableMap.comparator()"], ["K", "org.mapdb.SortedTableMap.firstKey2()"], ["K", "org.mapdb.SortedTableMap.lastKey2()"], ["K", "org.mapdb.SortedTableMap.firstKey()"], ["K", "org.mapdb.SortedTableMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.ceilingEntry(K)"], ["K", "org.mapdb.SortedTableMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.floorEntry(K)"], ["K", "org.mapdb.SortedTableMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.higherEntry(K)"], ["K", "org.mapdb.SortedTableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.lowerEntry(K)"], ["K", "org.mapdb.SortedTableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.pollLastEntry()"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.headMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.headMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.tailMap(K, boolean)"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.tailMap(java.lang.Object, boolean)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.subMap(K, K)"], ["java.util.SortedMap", "org.mapdb.SortedTableMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.headMap(K)"], ["java.util.SortedMap", "org.mapdb.SortedTableMap.headMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.tailMap(K)"], ["java.util.SortedMap", "org.mapdb.SortedTableMap.tailMap(java.lang.Object)"], ["java.util.concurrent.ConcurrentNavigableMap<K, V>", "org.mapdb.SortedTableMap.descendingMap()"], ["java.util.NavigableMap", "org.mapdb.SortedTableMap.descendingMap()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.descendingEntryIterator()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.descendingEntryIterator(K, boolean, K, boolean)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.mapdb.SortedTableMap.entryIterator(K, boolean, K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.findHigher(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.mapdb.SortedTableMap.findLower(K, boolean)"], ["K", "org.mapdb.SortedTableMap.findHigherKey(K, boolean)"], ["K", "org.mapdb.SortedTableMap.findLowerKey(K, boolean)"], ["void", "org.mapdb.SortedTableMap.forEachKey(kotlin.jvm.functions.Function1<? super K, kotlin.Unit>)"], ["void", "org.mapdb.SortedTableMap.forEachValue(kotlin.jvm.functions.Function1<? super V, kotlin.Unit>)"], ["void", "org.mapdb.SortedTableMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["boolean", "org.mapdb.SortedTableMap.isClosed()"], ["void", "org.mapdb.SortedTableMap.close()"], ["boolean", "org.mapdb.SortedTableMap.putIfAbsentBoolean(K, V)"], ["org.mapdb.Serializer", "org.mapdb.SortedTableMap.getKeySerializer()"], ["org.mapdb.Serializer", "org.mapdb.SortedTableMap.getValueSerializer()"], ["long", "org.mapdb.SortedTableMap.getPageSize()"], ["boolean", "org.mapdb.SortedTableMap.getHasValues()"], ["org.mapdb.SortedTableMap", "org.mapdb.SortedTableMap(org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>, long, org.mapdb.volume.Volume, boolean)"], ["org.mapdb.SortedTableMap", "org.mapdb.SortedTableMap(org.mapdb.serializer.GroupSerializer, org.mapdb.serializer.GroupSerializer, long, org.mapdb.volume.Volume, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["long", "org.mapdb.SortedTableMap.access$getSIZE_OFFSET$cp()"], ["long", "org.mapdb.SortedTableMap.access$getPAGE_COUNT_OFFSET$cp()"], ["long", "org.mapdb.SortedTableMap.access$getPAGE_SIZE_OFFSET$cp()"], ["int", "org.mapdb.SortedTableMap.access$getStart$cp()"], ["<K, V> org.mapdb.SortedTableMap$Companion$Maker<K, V>", "org.mapdb.SortedTableMap.create(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["<K, V> org.mapdb.SortedTableMap<K, V>", "org.mapdb.SortedTableMap.open(org.mapdb.volume.Volume, org.mapdb.serializer.GroupSerializer<K>, org.mapdb.serializer.GroupSerializer<V>)"], ["void", "org.mapdb.Store$DefaultImpls.checkThreadSafe(org.mapdb.Store)"], ["void", "org.mapdb.StoreBinary$DefaultImpls.checkThreadSafe(org.mapdb.StoreBinary)"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect$Companion.make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect$Companion.make$default(org.mapdb.StoreDirect$Companion, java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean, int, java.lang.Object)"], ["org.mapdb.StoreDirect$Companion", "org.mapdb.StoreDirect$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.Object", "org.mapdb.StoreDirect$calculateFreeSize$1.invoke(java.lang.Object)"], ["void", "org.mapdb.StoreDirect$calculateFreeSize$1.invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$updateProtected$1.invoke(java.lang.Object)"], ["long", "org.mapdb.StoreDirect$updateProtected$1.invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$2.invoke(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$2.invoke(long, long, boolean)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$3.invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$3.invoke(long, long)"], ["void", "org.mapdb.StoreDirect$verify$4.value(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$5.invoke(java.lang.Object, java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$5.invoke(long, kotlin.jvm.functions.Function1<? super java.lang.Long, kotlin.Unit>)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$6.invoke(java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$6.invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$verify$7.invoke(java.lang.Object)"], ["void", "org.mapdb.StoreDirect$verify$7.invoke(long)"], ["java.lang.Object", "org.mapdb.StoreDirect$volume$1.invoke()"], ["org.mapdb.volume.Volume", "org.mapdb.StoreDirect$volume$1.invoke()"], ["long", "org.mapdb.StoreDirect.preallocate()"], ["<R> R", "org.mapdb.StoreDirect.get(long, org.mapdb.Serializer<R>)"], ["long", "org.mapdb.StoreDirect.getBinaryLong(long, org.mapdb.StoreBinaryGetLong)"], ["<R> long", "org.mapdb.StoreDirect.put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreDirect.update(long, R, org.mapdb.Serializer<R>)"], ["<R> boolean", "org.mapdb.StoreDirect.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreDirect.delete(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreDirect.compact()"], ["void", "org.mapdb.StoreDirect.commit()"], ["void", "org.mapdb.StoreDirect.close()"], ["kotlin.collections.LongIterator", "org.mapdb.StoreDirect.getAllRecids()"], ["void", "org.mapdb.StoreDirect.verify()"], ["long", "org.mapdb.StoreDirect.getFreeSize()"], ["long", "org.mapdb.StoreDirect.getTotalSize()"], ["boolean", "org.mapdb.StoreDirect.fileLoad()"], ["boolean", "org.mapdb.StoreDirect.isReadOnly()"], ["org.mapdb.StoreDirect", "org.mapdb.StoreDirect(java.lang.String, org.mapdb.volume.VolumeFactory, boolean, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["java.lang.Object", "org.mapdb.StoreDirectAbstract$fileHeaderCheck$1.get()"], ["java.lang.String", "org.mapdb.StoreDirectAbstract$fileHeaderCheck$1.get()"], ["boolean", "org.mapdb.StoreDirectAbstract.isClosed()"], ["long", "org.mapdb.StoreDirectAbstract.getFileTail$mapdb()"], ["void", "org.mapdb.StoreDirectAbstract.setFileTail$mapdb(long)"], ["int", "org.mapdb.StoreDirectAbstract.storeHeaderCompose()"], ["long", "org.mapdb.StoreDirectAbstract.calculateChecksum()"], ["int", "org.mapdb.StoreDirectAbstract.calculateHeaderChecksum()"], ["java.lang.String", "org.mapdb.StoreDirectAbstract.getFile()"], ["org.mapdb.volume.VolumeFactory", "org.mapdb.StoreDirectAbstract.getVolumeFactory()"], ["boolean", "org.mapdb.StoreDirectAbstract.isThreadSafe()"], ["int", "org.mapdb.StoreDirectAbstract.getConcShift()"], ["boolean", "org.mapdb.StoreDirectAbstract.getFileDeleteAfterClose()"], ["boolean", "org.mapdb.StoreDirectAbstract.getChecksum()"], ["boolean", "org.mapdb.StoreDirectAbstract.getChecksumHeader()"], ["boolean", "org.mapdb.StoreDirectAbstract.getChecksumHeaderBypass()"], ["org.mapdb.StoreDirectAbstract", "org.mapdb.StoreDirectAbstract(java.lang.String, org.mapdb.volume.VolumeFactory, boolean, int, boolean, boolean, boolean, boolean)"], ["void", "org.mapdb.StoreDirectAbstract.checkThreadSafe()"], ["java.lang.Object", "org.mapdb.StoreOnHeap$Companion.access$getNULL_RECORD$p(org.mapdb.StoreOnHeap$Companion)"], ["org.mapdb.StoreOnHeap$Companion", "org.mapdb.StoreOnHeap$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["long", "org.mapdb.StoreOnHeap.preallocate()"], ["<R> long", "org.mapdb.StoreOnHeap.put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreOnHeap.update(long, R, org.mapdb.Serializer<R>)"], ["<R> boolean", "org.mapdb.StoreOnHeap.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreOnHeap.delete(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreOnHeap.commit()"], ["void", "org.mapdb.StoreOnHeap.compact()"], ["void", "org.mapdb.StoreOnHeap.close()"], ["boolean", "org.mapdb.StoreOnHeap.isClosed()"], ["<R> R", "org.mapdb.StoreOnHeap.get(long, org.mapdb.Serializer<R>)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreOnHeap.getAllRecids()"], ["void", "org.mapdb.StoreOnHeap.verify()"], ["boolean", "org.mapdb.StoreOnHeap.isReadOnly()"], ["boolean", "org.mapdb.StoreOnHeap.fileLoad()"], ["boolean", "org.mapdb.StoreOnHeap.isThreadSafe()"], ["org.mapdb.StoreOnHeap", "org.mapdb.StoreOnHeap(boolean)"], ["org.mapdb.StoreOnHeap", "org.mapdb.StoreOnHeap(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.StoreOnHeap", "org.mapdb.StoreOnHeap()"], ["void", "org.mapdb.StoreOnHeap.checkThreadSafe()"], ["java.lang.Object", "org.mapdb.StoreOnHeap.access$getNULL_RECORD$cp()"], ["void", "org.mapdb.StoreReadOnlyWrapper.close()"], ["void", "org.mapdb.StoreReadOnlyWrapper.commit()"], ["void", "org.mapdb.StoreReadOnlyWrapper.compact()"], ["<R> boolean", "org.mapdb.StoreReadOnlyWrapper.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreReadOnlyWrapper.delete(long, org.mapdb.Serializer<R>)"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.isClosed()"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.isThreadSafe()"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.isReadOnly()"], ["long", "org.mapdb.StoreReadOnlyWrapper.preallocate()"], ["<R> long", "org.mapdb.StoreReadOnlyWrapper.put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreReadOnlyWrapper.update(long, R, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreReadOnlyWrapper.verify()"], ["<R> R", "org.mapdb.StoreReadOnlyWrapper.get(long, org.mapdb.Serializer<R>)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreReadOnlyWrapper.getAllRecids()"], ["boolean", "org.mapdb.StoreReadOnlyWrapper.fileLoad()"], ["org.mapdb.StoreReadOnlyWrapper", "org.mapdb.StoreReadOnlyWrapper(org.mapdb.Store)"], ["void", "org.mapdb.StoreReadOnlyWrapper.checkThreadSafe()"], ["byte[]", "org.mapdb.StoreTrivial$Companion.access$getNULL_RECORD$p(org.mapdb.StoreTrivial$Companion)"], ["org.mapdb.StoreTrivial$Companion", "org.mapdb.StoreTrivial$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["void", "org.mapdb.StoreTrivial.loadFrom(java.io.InputStream)"], ["void", "org.mapdb.StoreTrivial.saveTo(java.io.OutputStream)"], ["long", "org.mapdb.StoreTrivial.preallocate()"], ["<R> long", "org.mapdb.StoreTrivial.put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreTrivial.update(long, R, org.mapdb.Serializer<R>)"], ["<R> boolean", "org.mapdb.StoreTrivial.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreTrivial.delete(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreTrivial.commit()"], ["void", "org.mapdb.StoreTrivial.compact()"], ["void", "org.mapdb.StoreTrivial.close()"], ["boolean", "org.mapdb.StoreTrivial.isClosed()"], ["<R> R", "org.mapdb.StoreTrivial.get(long, org.mapdb.Serializer<R>)"], ["void", "org.mapdb.StoreTrivial.clear()"], ["void", "org.mapdb.StoreTrivial.clearInternal$mapdb()"], ["boolean", "org.mapdb.StoreTrivial.equals(java.lang.Object)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreTrivial.getAllRecids()"], ["void", "org.mapdb.StoreTrivial.verify()"], ["boolean", "org.mapdb.StoreTrivial.isReadOnly()"], ["boolean", "org.mapdb.StoreTrivial.fileLoad()"], ["boolean", "org.mapdb.StoreTrivial.isThreadSafe()"], ["org.mapdb.StoreTrivial", "org.mapdb.StoreTrivial(boolean)"], ["org.mapdb.StoreTrivial", "org.mapdb.StoreTrivial(boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.StoreTrivial", "org.mapdb.StoreTrivial()"], ["void", "org.mapdb.StoreTrivial.checkThreadSafe()"], ["byte[]", "org.mapdb.StoreTrivial.access$getNULL_RECORD$cp()"], ["java.lang.String", "org.mapdb.StoreTrivialTx$Companion.getCOMMIT_MARKER_SUFFIX$mapdb()"], ["java.lang.String", "org.mapdb.StoreTrivialTx$Companion.getDATA_SUFFIX$mapdb()"], ["org.mapdb.StoreTrivialTx$Companion", "org.mapdb.StoreTrivialTx$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.nio.file.Path", "org.mapdb.StoreTrivialTx.getPath()"], ["java.lang.Long", "org.mapdb.StoreTrivialTx.findLattestCommitMarker$mapdb()"], ["void", "org.mapdb.StoreTrivialTx.commit()"], ["void", "org.mapdb.StoreTrivialTx.rollback()"], ["void", "org.mapdb.StoreTrivialTx.close()"], ["java.io.File", "org.mapdb.StoreTrivialTx.getFile()"], ["boolean", "org.mapdb.StoreTrivialTx.getDeleteFilesAfterClose()"], ["org.mapdb.StoreTrivialTx", "org.mapdb.StoreTrivialTx(java.io.File, boolean, boolean)"], ["org.mapdb.StoreTrivialTx", "org.mapdb.StoreTrivialTx(java.io.File, boolean, boolean, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["java.lang.String", "org.mapdb.StoreTrivialTx.access$getCOMMIT_MARKER_SUFFIX$cp()"], ["java.lang.String", "org.mapdb.StoreTrivialTx.access$getDATA_SUFFIX$cp()"], ["void", "org.mapdb.StoreTx$DefaultImpls.checkThreadSafe(org.mapdb.StoreTx)"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL$Companion.make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL$Companion.make$default(org.mapdb.StoreWAL$Companion, java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean, int, java.lang.Object)"], ["org.mapdb.StoreWAL$Companion", "org.mapdb.StoreWAL$Companion(kotlin.jvm.internal.DefaultConstructorMarker)"], ["void", "org.mapdb.StoreWAL$commit$1.value(long, long)"], ["void", "org.mapdb.StoreWAL$commit$2.value(long, long)"], ["void", "org.mapdb.StoreWAL$commit$3.value(long, java.lang.Object)"], ["void", "org.mapdb.StoreWAL$commit$3.value(long, byte[])"], ["void", "org.mapdb.StoreWAL$commit$4.value(long, long)"], ["java.lang.Object", "org.mapdb.StoreWAL$realVolume$1.invoke()"], ["org.mapdb.volume.Volume", "org.mapdb.StoreWAL$realVolume$1.invoke()"], ["java.lang.Object", "org.mapdb.StoreWAL$updateProtected$1.invoke(java.lang.Object)"], ["long", "org.mapdb.StoreWAL$updateProtected$1.invoke(long)"], ["org.mapdb.volume.Volume", "org.mapdb.StoreWAL.getHeadVol()"], ["boolean", "org.mapdb.StoreWAL.isReadOnly()"], ["<R> boolean", "org.mapdb.StoreWAL.compareAndSwap(long, R, R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreWAL.delete(long, org.mapdb.Serializer<R>)"], ["long", "org.mapdb.StoreWAL.preallocate()"], ["<R> long", "org.mapdb.StoreWAL.put(R, org.mapdb.Serializer<R>)"], ["<R> void", "org.mapdb.StoreWAL.update(long, R, org.mapdb.Serializer<R>)"], ["<R> R", "org.mapdb.StoreWAL.get(long, org.mapdb.Serializer<R>)"], ["kotlin.collections.LongIterator", "org.mapdb.StoreWAL.getAllRecids()"], ["void", "org.mapdb.StoreWAL.verify()"], ["void", "org.mapdb.StoreWAL.close()"], ["void", "org.mapdb.StoreWAL.rollback()"], ["void", "org.mapdb.StoreWAL.commit()"], ["void", "org.mapdb.StoreWAL.compact()"], ["boolean", "org.mapdb.StoreWAL.fileLoad()"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["long", "org.mapdb.StoreWAL.access$getTOMB1$cp()"], ["org.mapdb.StoreWAL", "org.mapdb.StoreWAL.make(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean, int, long, long, boolean, boolean, boolean, boolean, boolean)"], ["void", "org.mapdb.Utils$FAKE_LOCK$1.unlock()"], ["void", "org.mapdb.Utils$FAKE_LOCK$1.lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$FAKE_LOCK$1.newCondition()"], ["void", "org.mapdb.Utils$FAKE_LOCK$1.lock()"], ["boolean", "org.mapdb.Utils$FAKE_LOCK$1.tryLock()"], ["boolean", "org.mapdb.Utils$FAKE_LOCK$1.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleEntryLock.lock()"], ["void", "org.mapdb.Utils$SingleEntryLock.lockInterruptibly()"], ["java.util.concurrent.locks.ReentrantLock", "org.mapdb.Utils$SingleEntryLock.getLock()"], ["org.mapdb.Utils$SingleEntryLock", "org.mapdb.Utils$SingleEntryLock(java.util.concurrent.locks.ReentrantLock)"], ["org.mapdb.Utils$SingleEntryLock", "org.mapdb.Utils$SingleEntryLock(java.util.concurrent.locks.ReentrantLock, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Utils$SingleEntryLock", "org.mapdb.Utils$SingleEntryLock()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$SingleEntryLock.newCondition()"], ["boolean", "org.mapdb.Utils$SingleEntryLock.tryLock()"], ["boolean", "org.mapdb.Utils$SingleEntryLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleEntryLock.unlock()"], ["void", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.lock()"], ["void", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.newCondition()"], ["boolean", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.tryLock()"], ["boolean", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleEntryReadWriteLock$newWriteLock$1.unlock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock.getOrigWriteLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils$SingleEntryReadWriteLock.getNewWriteLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils$SingleEntryReadWriteLock.writeLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock.getLock()"], ["org.mapdb.Utils$SingleEntryReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock(java.util.concurrent.locks.ReentrantReadWriteLock)"], ["org.mapdb.Utils$SingleEntryReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock(java.util.concurrent.locks.ReentrantReadWriteLock, int, kotlin.jvm.internal.DefaultConstructorMarker)"], ["org.mapdb.Utils$SingleEntryReadWriteLock", "org.mapdb.Utils$SingleEntryReadWriteLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils$SingleEntryReadWriteLock.readLock()"], ["boolean", "org.mapdb.Utils$SingleProtectionLock.getLocked()"], ["void", "org.mapdb.Utils$SingleProtectionLock.setLocked(boolean)"], ["void", "org.mapdb.Utils$SingleProtectionLock.lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$SingleProtectionLock.newCondition()"], ["boolean", "org.mapdb.Utils$SingleProtectionLock.tryLock()"], ["boolean", "org.mapdb.Utils$SingleProtectionLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$SingleProtectionLock.unlock()"], ["void", "org.mapdb.Utils$SingleProtectionLock.lock()"], ["java.lang.String", "org.mapdb.Utils$SingleProtectionLock.getName()"], ["org.mapdb.Utils$SingleProtectionLock", "org.mapdb.Utils$SingleProtectionLock(java.lang.String)"], ["void", "org.mapdb.Utils$singleEntryLock$1.lock()"], ["void", "org.mapdb.Utils$singleEntryLock$1.lockInterruptibly()"], ["java.util.concurrent.locks.Condition", "org.mapdb.Utils$singleEntryLock$1.newCondition()"], ["boolean", "org.mapdb.Utils$singleEntryLock$1.tryLock()"], ["boolean", "org.mapdb.Utils$singleEntryLock$1.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.mapdb.Utils$singleEntryLock$1.unlock()"], ["java.util.logging.Logger", "org.mapdb.Utils.getLOG()"], ["java.nio.file.Path", "org.mapdb.Utils.pathChangeSuffix(java.nio.file.Path, java.lang.String)"], ["void", "org.mapdb.Utils.logDebug(kotlin.jvm.functions.Function0<java.lang.String>)"], ["void", "org.mapdb.Utils.logInfo(kotlin.jvm.functions.Function0<java.lang.String>)"], ["<E> E", "org.mapdb.Utils.lockWrite(java.util.concurrent.locks.ReadWriteLock, kotlin.jvm.functions.Function0<? extends E>)"], ["<E> E", "org.mapdb.Utils.lockRead(java.util.concurrent.locks.ReadWriteLock, kotlin.jvm.functions.Function0<? extends E>)"], ["void", "org.mapdb.Utils.assertReadLock(java.util.concurrent.locks.ReadWriteLock)"], ["void", "org.mapdb.Utils.assertWriteLock(java.util.concurrent.locks.ReadWriteLock)"], ["<E> E", "org.mapdb.Utils.lock(java.util.concurrent.locks.Lock, kotlin.jvm.functions.Function0<? extends E>)"], ["int", "org.mapdb.Utils.roundDownToIntMAXVAL(java.lang.Long)"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils.singleEntryLock()"], ["java.util.concurrent.locks.Lock", "org.mapdb.Utils.newLock(boolean)"], ["java.util.concurrent.locks.ReadWriteLock", "org.mapdb.Utils.newReadWriteLock(boolean)"], ["void", "org.mapdb.Utils.assertLocked(java.util.concurrent.locks.Lock)"], ["<E> E", "org.mapdb.Utils.clone(E, org.mapdb.Serializer<E>, org.mapdb.DataOutput2)"], ["java.lang.Object", "org.mapdb.Utils.clone$default(java.lang.Object, org.mapdb.Serializer, org.mapdb.DataOutput2, int, java.lang.Object)"], ["void", "org.mapdb.Utils.lockReadAll(java.util.concurrent.locks.ReadWriteLock[])"], ["void", "org.mapdb.Utils.unlockReadAll(java.util.concurrent.locks.ReadWriteLock[])"], ["void", "org.mapdb.Utils.lockWriteAll(java.util.concurrent.locks.ReadWriteLock[])"], ["void", "org.mapdb.Utils.unlockWriteAll(java.util.concurrent.locks.ReadWriteLock[])"], ["int", "org.mapdb.Utils.identityCount(java.lang.Object[])"], ["void", "org.mapdb.WriteAheadLog$1.beforeReplayStart()"], ["void", "org.mapdb.WriteAheadLog$1.afterReplayFinished()"], ["void", "org.mapdb.WriteAheadLog$1.writeLong(long, long)"], ["void", "org.mapdb.WriteAheadLog$1.writeRecord(long, long, org.mapdb.volume.Volume, long, int)"], ["void", "org.mapdb.WriteAheadLog$1.writeByteArray(long, long, org.mapdb.volume.Volume, long, int)"], ["void", "org.mapdb.WriteAheadLog$1.commit()"], ["void", "org.mapdb.WriteAheadLog$1.rollback()"], ["void", "org.mapdb.WriteAheadLog$1.writeTombstone(long)"], ["void", "org.mapdb.WriteAheadLog$1.writePreallocate(long)"], ["org.mapdb.WriteAheadLog", "org.mapdb.WriteAheadLog(java.lang.String, org.mapdb.volume.VolumeFactory, long, boolean)"], ["org.mapdb.WriteAheadLog", "org.mapdb.WriteAheadLog(java.lang.String)"], ["void", "org.mapdb.WriteAheadLog.initFailedCloseFiles()"], ["void", "org.mapdb.WriteAheadLog.close()"], ["void", "org.mapdb.WriteAheadLog.seal()"], ["void", "org.mapdb.WriteAheadLog.startNextFile()"], ["void", "org.mapdb.WriteAheadLog.rollback()"], ["void", "org.mapdb.WriteAheadLog.commit()"], ["boolean", "org.mapdb.WriteAheadLog.fileLoad()"], ["void", "org.mapdb.WriteAheadLog.sync()"], ["void", "org.mapdb.WriteAheadLog.replayWAL(org.mapdb.WriteAheadLog$WALReplay)"], ["void", "org.mapdb.WriteAheadLog.destroyWalFiles()"], ["long", "org.mapdb.WriteAheadLog.getNumberOfFiles()"], ["org.mapdb.DataInput2", "org.mapdb.WriteAheadLog.walGetByteArray(long)"], ["byte[]", "org.mapdb.WriteAheadLog.walGetByteArray2(long)"], ["synchronized", "org.mapdb.WriteAheadLog.byte[] walGetRecord(long, long)"], ["long", "org.mapdb.WriteAheadLog.walPutByteArray(long, byte[], int, int)"], ["synchronized", "org.mapdb.WriteAheadLog.long walPutRecord(long, byte[], int, int)"], ["void", "org.mapdb.WriteAheadLog.walPutLong(long, long)"], ["void", "org.mapdb.WriteAheadLog.walPutTombstone(long)"], ["void", "org.mapdb.WriteAheadLog.walPutPreallocate(long)"], ["int", "org.mapdb.serializer.CompressLZF.compress(byte[], int, byte[], int)"], ["void", "org.mapdb.serializer.CompressLZF.expand(java.io.DataInput, byte[], int, int)"], ["void", "org.mapdb.serializer.CompressLZF.expand(java.nio.ByteBuffer, int, byte[], int, int)"], ["void", "org.mapdb.serializer.CompressLZF.expand(byte[], int, byte[], int, int)"], ["default", "org.mapdb.serializer.GroupSerializer.A valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["default", "org.mapdb.serializer.GroupSerializer.int valueArrayBinarySearch(A, org.mapdb.DataInput2, int, java.util.Comparator)"], ["default", "org.mapdb.serializer.GroupSerializer.java.lang.Object[] valueArrayToArray(java.lang.Object)"], ["default", "org.mapdb.serializer.GroupSerializer.A nextValue(A)"], ["org.mapdb.serializer.GroupSerializerObjectArray", "org.mapdb.serializer.GroupSerializerObjectArray()"], ["void", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["A", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySize(java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayEmpty()"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayPut(java.lang.Object, int, A)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayUpdateVal(java.lang.Object, int, A)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeleteValue(java.lang.Object, int)"], ["int", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySearch(java.lang.Object, A)"], ["java.lang.Object[]", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayToArray(java.lang.Object)"], ["int", "org.mapdb.serializer.GroupSerializerObjectArray.valueArraySearch(java.lang.Object, A, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.GroupSerializerObjectArray.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["org.mapdb.serializer.SerializerArray", "org.mapdb.serializer.SerializerArray(org.mapdb.Serializer<T>)"], ["org.mapdb.serializer.SerializerArray", "org.mapdb.serializer.SerializerArray(org.mapdb.Serializer<T>, java.lang.Class<T>)"], ["void", "org.mapdb.serializer.SerializerArray.serialize(org.mapdb.DataOutput2, T[])"], ["T[]", "org.mapdb.serializer.SerializerArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerArray.equals(T[], T[])"], ["int", "org.mapdb.serializer.SerializerArray.hashCode(T[], int)"], ["boolean", "org.mapdb.serializer.SerializerArray.equals(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArray.hashCode()"], ["int", "org.mapdb.serializer.SerializerArray.compare(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerArrayDelta", "org.mapdb.serializer.SerializerArrayDelta(org.mapdb.Serializer<T>)"], ["void", "org.mapdb.serializer.SerializerArrayDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["org.mapdb.serializer.SerializerArrayTuple", "org.mapdb.serializer.SerializerArrayTuple(org.mapdb.Serializer[], java.util.Comparator[])"], ["org.mapdb.serializer.SerializerArrayTuple", "org.mapdb.serializer.SerializerArrayTuple(org.mapdb.Serializer...)"], ["void", "org.mapdb.serializer.SerializerArrayTuple.serialize(org.mapdb.DataOutput2, java.lang.Object[])"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayTuple.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerArrayTuple.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object[], java.util.Comparator)"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayTuple.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayPut(java.lang.Object, int, java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerArrayTuple.nextValue(java.lang.Object[])"], ["boolean", "org.mapdb.serializer.SerializerArrayTuple.equals(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArrayTuple.compare(java.lang.Object[], java.lang.Object[])"], ["int", "org.mapdb.serializer.SerializerArrayTuple.hashCode(java.lang.Object[], int)"], ["boolean", "org.mapdb.serializer.SerializerArrayTuple.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.nextValue(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerArrayTuple.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerArrayTuple.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerArrayTuple.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerArrayTuple.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerBigDecimal", "org.mapdb.serializer.SerializerBigDecimal()"], ["void", "org.mapdb.serializer.SerializerBigDecimal.serialize(org.mapdb.DataOutput2, java.math.BigDecimal)"], ["java.math.BigDecimal", "org.mapdb.serializer.SerializerBigDecimal.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerBigDecimal.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerBigDecimal.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerBigDecimal.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerBigInteger", "org.mapdb.serializer.SerializerBigInteger()"], ["void", "org.mapdb.serializer.SerializerBigInteger.serialize(org.mapdb.DataOutput2, java.math.BigInteger)"], ["java.math.BigInteger", "org.mapdb.serializer.SerializerBigInteger.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerBigInteger.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerBigInteger.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerBigInteger.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerBoolean", "org.mapdb.serializer.SerializerBoolean()"], ["void", "org.mapdb.serializer.SerializerBoolean.serialize(org.mapdb.DataOutput2, java.lang.Boolean)"], ["java.lang.Boolean", "org.mapdb.serializer.SerializerBoolean.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerBoolean.fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerBoolean.isTrusted()"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Boolean)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Boolean, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerBoolean.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Boolean", "org.mapdb.serializer.SerializerBoolean.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayPut(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayUpdateVal(java.lang.Object, int, java.lang.Boolean)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerBoolean.valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerBoolean.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerBoolean.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerByte", "org.mapdb.serializer.SerializerByte()"], ["void", "org.mapdb.serializer.SerializerByte.serialize(org.mapdb.DataOutput2, java.lang.Byte)"], ["java.lang.Byte", "org.mapdb.serializer.SerializerByte.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerByte.fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerByte.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByte.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerByte.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerByteArray", "org.mapdb.serializer.SerializerByteArray()"], ["void", "org.mapdb.serializer.SerializerByteArray.serialize(org.mapdb.DataOutput2, byte[])"], ["byte[]", "org.mapdb.serializer.SerializerByteArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerByteArray.equals(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArray.hashCode(byte[], int)"], ["int", "org.mapdb.serializer.SerializerByteArray.compare(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, byte[])"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, byte[], java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerByteArray.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["byte[]", "org.mapdb.serializer.SerializerByteArray.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySize(java.lang.Object)"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayEmpty()"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayPut(java.lang.Object, int, byte[])"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayUpdateVal(java.lang.Object, int, byte[])"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayFromArray(java.lang.Object[])"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["byte[][]", "org.mapdb.serializer.SerializerByteArray.valueArrayDeleteValue(java.lang.Object, int)"], ["byte[]", "org.mapdb.serializer.SerializerByteArray.nextValue(byte[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.nextValue(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerByteArray.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerByteArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerByteArrayDelta", "org.mapdb.serializer.SerializerByteArrayDelta()"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["byte[][]", "org.mapdb.serializer.SerializerByteArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["org.mapdb.serializer.SerializerByteArrayDelta2", "org.mapdb.serializer.SerializerByteArrayDelta2()"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, byte[], java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["byte[]", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySize(java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayEmpty()"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayPut(java.lang.Object, int, byte[])"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayUpdateVal(java.lang.Object, int, byte[])"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayFromArray(java.lang.Object[])"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeleteValue(java.lang.Object, int)"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta2.serialize(org.mapdb.DataOutput2, byte[])"], ["byte[]", "org.mapdb.serializer.SerializerByteArrayDelta2.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.compare(byte[], byte[])"], ["boolean", "org.mapdb.serializer.SerializerByteArrayDelta2.equals(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.hashCode(byte[], int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayDelta2.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayDelta2.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArrayDelta2.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayDelta2.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerByteArrayDelta2.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerByteArrayNoSize", "org.mapdb.serializer.SerializerByteArrayNoSize()"], ["void", "org.mapdb.serializer.SerializerByteArrayNoSize.serialize(org.mapdb.DataOutput2, byte[])"], ["byte[]", "org.mapdb.serializer.SerializerByteArrayNoSize.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.equals(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.hashCode(byte[], int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.needsAvailableSizeHint()"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.compare(byte[], byte[])"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerByteArrayNoSize.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerByteArrayNoSize.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerByteArrayNoSize.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerByteArrayNoSize.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerChar", "org.mapdb.serializer.SerializerChar()"], ["void", "org.mapdb.serializer.SerializerChar.serialize(org.mapdb.DataOutput2, java.lang.Character)"], ["java.lang.Character", "org.mapdb.serializer.SerializerChar.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerChar.fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerChar.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerChar.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerChar.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerCharArray", "org.mapdb.serializer.SerializerCharArray()"], ["void", "org.mapdb.serializer.SerializerCharArray.serialize(org.mapdb.DataOutput2, char[])"], ["char[]", "org.mapdb.serializer.SerializerCharArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerCharArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerCharArray.equals(char[], char[])"], ["int", "org.mapdb.serializer.SerializerCharArray.hashCode(char[], int)"], ["int", "org.mapdb.serializer.SerializerCharArray.compare(char[], char[])"], ["char[]", "org.mapdb.serializer.SerializerCharArray.nextValue(char[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerCharArray.nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCharArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerCharArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCharArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCharArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerCharArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerClass", "org.mapdb.serializer.SerializerClass(java.lang.ClassLoader)"], ["org.mapdb.serializer.SerializerClass", "org.mapdb.serializer.SerializerClass()"], ["void", "org.mapdb.serializer.SerializerClass.serialize(org.mapdb.DataOutput2, java.lang.Class<?>)"], ["boolean", "org.mapdb.serializer.SerializerClass.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerClass.equals(java.lang.Class<?>, java.lang.Class<?>)"], ["int", "org.mapdb.serializer.SerializerClass.hashCode(java.lang.Class<?>, int)"], ["int", "org.mapdb.serializer.SerializerClass.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerClass.equals(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerClass.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerClass.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerCompressionDeflateWrapper", "org.mapdb.serializer.SerializerCompressionDeflateWrapper(org.mapdb.serializer.GroupSerializer<E>)"], ["org.mapdb.serializer.SerializerCompressionDeflateWrapper", "org.mapdb.serializer.SerializerCompressionDeflateWrapper(org.mapdb.serializer.GroupSerializer<E>, int, byte[])"], ["void", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.serialize(org.mapdb.DataOutput2, E)"], ["E", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.equals(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.hashCode()"], ["boolean", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.isTrusted()"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySearch(java.lang.Object, E)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["E", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.valueArrayDeleteValue(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.equals(E, E)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.hashCode(E, int)"], ["int", "org.mapdb.serializer.SerializerCompressionDeflateWrapper.compare(E, E)"], ["org.mapdb.serializer.SerializerCompressionWrapper", "org.mapdb.serializer.SerializerCompressionWrapper(org.mapdb.serializer.GroupSerializer<E>)"], ["void", "org.mapdb.serializer.SerializerCompressionWrapper.serialize(org.mapdb.DataOutput2, E)"], ["E", "org.mapdb.serializer.SerializerCompressionWrapper.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerCompressionWrapper.equals(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.hashCode()"], ["boolean", "org.mapdb.serializer.SerializerCompressionWrapper.isTrusted()"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySearch(java.lang.Object, E)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["E", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerCompressionWrapper.valueArrayDeleteValue(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerCompressionWrapper.equals(E, E)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.hashCode(E, int)"], ["int", "org.mapdb.serializer.SerializerCompressionWrapper.compare(E, E)"], ["org.mapdb.serializer.SerializerDate", "org.mapdb.serializer.SerializerDate()"], ["void", "org.mapdb.serializer.SerializerDate.serialize(org.mapdb.DataOutput2, java.util.Date)"], ["java.util.Date", "org.mapdb.serializer.SerializerDate.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerDate.valueArraySearch(java.lang.Object, java.util.Date)"], ["int", "org.mapdb.serializer.SerializerDate.valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerDate.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerDate.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerDouble", "org.mapdb.serializer.SerializerDouble()"], ["int", "org.mapdb.serializer.SerializerDouble.valueArraySearch(java.lang.Object, java.lang.Double)"], ["void", "org.mapdb.serializer.SerializerDouble.serialize(org.mapdb.DataOutput2, java.lang.Double)"], ["java.lang.Double", "org.mapdb.serializer.SerializerDouble.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerDouble.valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerDouble.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerDouble.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerDoubleArray", "org.mapdb.serializer.SerializerDoubleArray()"], ["void", "org.mapdb.serializer.SerializerDoubleArray.serialize(org.mapdb.DataOutput2, double[])"], ["double[]", "org.mapdb.serializer.SerializerDoubleArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerDoubleArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerDoubleArray.equals(double[], double[])"], ["int", "org.mapdb.serializer.SerializerDoubleArray.hashCode(double[], int)"], ["int", "org.mapdb.serializer.SerializerDoubleArray.compare(double[], double[])"], ["int", "org.mapdb.serializer.SerializerDoubleArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerDoubleArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerDoubleArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerDoubleArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerDoubleArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerEightByte", "org.mapdb.serializer.SerializerEightByte()"], ["E", "org.mapdb.serializer.SerializerEightByte.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerEightByte.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayDeleteValue(java.lang.Object, int)"], ["void", "org.mapdb.serializer.SerializerEightByte.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerEightByte.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["E", "org.mapdb.serializer.SerializerEightByte.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["boolean", "org.mapdb.serializer.SerializerEightByte.isTrusted()"], ["int", "org.mapdb.serializer.SerializerEightByte.fixedSize()"], ["int", "org.mapdb.serializer.SerializerEightByte.valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerElsa.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerElsa.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerElsa", "org.mapdb.serializer.SerializerElsa()"], ["org.mapdb.serializer.SerializerFloat", "org.mapdb.serializer.SerializerFloat()"], ["void", "org.mapdb.serializer.SerializerFloat.serialize(org.mapdb.DataOutput2, java.lang.Float)"], ["java.lang.Float", "org.mapdb.serializer.SerializerFloat.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerFloat.valueArraySearch(java.lang.Object, java.lang.Float)"], ["int", "org.mapdb.serializer.SerializerFloat.valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFloat.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerFloat.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerFloatArray", "org.mapdb.serializer.SerializerFloatArray()"], ["void", "org.mapdb.serializer.SerializerFloatArray.serialize(org.mapdb.DataOutput2, float[])"], ["float[]", "org.mapdb.serializer.SerializerFloatArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerFloatArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerFloatArray.equals(float[], float[])"], ["int", "org.mapdb.serializer.SerializerFloatArray.hashCode(float[], int)"], ["int", "org.mapdb.serializer.SerializerFloatArray.compare(float[], float[])"], ["int", "org.mapdb.serializer.SerializerFloatArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerFloatArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerFloatArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFloatArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerFloatArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerFourByte", "org.mapdb.serializer.SerializerFourByte()"], ["boolean", "org.mapdb.serializer.SerializerFourByte.isTrusted()"], ["int", "org.mapdb.serializer.SerializerFourByte.fixedSize()"], ["E", "org.mapdb.serializer.SerializerFourByte.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerFourByte.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayPut(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayUpdateVal(java.lang.Object, int, E)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayDeleteValue(java.lang.Object, int)"], ["void", "org.mapdb.serializer.SerializerFourByte.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerFourByte.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerFourByte.valueArraySearch(java.lang.Object, E, java.util.Comparator)"], ["E", "org.mapdb.serializer.SerializerFourByte.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["org.mapdb.serializer.SerializerIllegalAccess", "org.mapdb.serializer.SerializerIllegalAccess()"], ["void", "org.mapdb.serializer.SerializerIllegalAccess.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIllegalAccess.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerIllegalAccess.isTrusted()"], ["org.mapdb.serializer.SerializerIntArray", "org.mapdb.serializer.SerializerIntArray()"], ["void", "org.mapdb.serializer.SerializerIntArray.serialize(org.mapdb.DataOutput2, int[])"], ["int[]", "org.mapdb.serializer.SerializerIntArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerIntArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerIntArray.equals(int[], int[])"], ["int", "org.mapdb.serializer.SerializerIntArray.hashCode(int[], int)"], ["int", "org.mapdb.serializer.SerializerIntArray.compare(int[], int[])"], ["int[]", "org.mapdb.serializer.SerializerIntArray.nextValue(int[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntArray.nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerIntArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerIntArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerIntArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerIntArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerInteger", "org.mapdb.serializer.SerializerInteger()"], ["void", "org.mapdb.serializer.SerializerInteger.serialize(org.mapdb.DataOutput2, java.lang.Integer)"], ["java.lang.Integer", "org.mapdb.serializer.SerializerInteger.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerInteger.valueArraySearch(java.lang.Object, java.lang.Integer)"], ["int", "org.mapdb.serializer.SerializerInteger.valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerInteger.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerInteger.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerInteger.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerInteger.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerIntegerDelta", "org.mapdb.serializer.SerializerIntegerDelta()"], ["void", "org.mapdb.serializer.SerializerIntegerDelta.serialize(org.mapdb.DataOutput2, java.lang.Integer)"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerDelta.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerIntegerDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["int[]", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["int", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerIntegerDelta.fixedSize()"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerIntegerDelta.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerDelta.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerIntegerDelta.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerIntegerPacked", "org.mapdb.serializer.SerializerIntegerPacked()"], ["void", "org.mapdb.serializer.SerializerIntegerPacked.serialize(org.mapdb.DataOutput2, java.lang.Integer)"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerPacked.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerIntegerPacked.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["int[]", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerIntegerPacked.fixedSize()"], ["int", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinarySearch(java.lang.Integer, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Integer", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerIntegerPacked.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerIntegerPacked.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerIntegerPacked.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerJava", "org.mapdb.serializer.SerializerJava()"], ["void", "org.mapdb.serializer.SerializerJava.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerJava.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object[]", "org.mapdb.serializer.SerializerJava.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerJava.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerJava.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["org.mapdb.serializer.SerializerLong", "org.mapdb.serializer.SerializerLong()"], ["void", "org.mapdb.serializer.SerializerLong.serialize(org.mapdb.DataOutput2, java.lang.Long)"], ["java.lang.Long", "org.mapdb.serializer.SerializerLong.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerLong.valueArraySearch(java.lang.Object, java.lang.Long)"], ["int", "org.mapdb.serializer.SerializerLong.valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerLong.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerLong.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLong.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerLong.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerLongArray", "org.mapdb.serializer.SerializerLongArray()"], ["void", "org.mapdb.serializer.SerializerLongArray.serialize(org.mapdb.DataOutput2, long[])"], ["long[]", "org.mapdb.serializer.SerializerLongArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerLongArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerLongArray.equals(long[], long[])"], ["int", "org.mapdb.serializer.SerializerLongArray.hashCode(long[], int)"], ["int", "org.mapdb.serializer.SerializerLongArray.compare(long[], long[])"], ["long[]", "org.mapdb.serializer.SerializerLongArray.nextValue(long[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongArray.nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerLongArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerLongArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerLongArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerLongArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerLongDelta", "org.mapdb.serializer.SerializerLongDelta()"], ["void", "org.mapdb.serializer.SerializerLongDelta.serialize(org.mapdb.DataOutput2, java.lang.Long)"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongDelta.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerLongDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["long[]", "org.mapdb.serializer.SerializerLongDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["int", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerLongDelta.fixedSize()"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerLongDelta.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongDelta.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerLongDelta.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerLongPacked", "org.mapdb.serializer.SerializerLongPacked()"], ["void", "org.mapdb.serializer.SerializerLongPacked.serialize(org.mapdb.DataOutput2, java.lang.Long)"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongPacked.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerLongPacked.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["long[]", "org.mapdb.serializer.SerializerLongPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerLongPacked.fixedSize()"], ["int", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinarySearch(java.lang.Long, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Long", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongPacked.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerLongPacked.valueArrayBinarySearch(java.lang.Object, org.mapdb.DataInput2, int, java.util.Comparator)"], ["java.lang.Object", "org.mapdb.serializer.SerializerLongPacked.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerLongPacked.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerRecid", "org.mapdb.serializer.SerializerRecid()"], ["void", "org.mapdb.serializer.SerializerRecid.serialize(org.mapdb.DataOutput2, java.lang.Long)"], ["java.lang.Long", "org.mapdb.serializer.SerializerRecid.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerRecid.fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerRecid.isTrusted()"], ["int", "org.mapdb.serializer.SerializerRecid.valueArraySearch(java.lang.Object, java.lang.Long)"], ["void", "org.mapdb.serializer.SerializerRecid.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["long[]", "org.mapdb.serializer.SerializerRecid.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.lang.Long", "org.mapdb.serializer.SerializerRecid.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecid.valueArrayBinaryGet(org.mapdb.DataInput2, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecid.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerRecid.valueArraySearch(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecid.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerRecid.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerRecidArray", "org.mapdb.serializer.SerializerRecidArray()"], ["void", "org.mapdb.serializer.SerializerRecidArray.serialize(org.mapdb.DataOutput2, long[])"], ["long[]", "org.mapdb.serializer.SerializerRecidArray.deserialize(org.mapdb.DataInput2, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerRecidArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerRecidArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerShort", "org.mapdb.serializer.SerializerShort()"], ["void", "org.mapdb.serializer.SerializerShort.serialize(org.mapdb.DataOutput2, java.lang.Short)"], ["java.lang.Short", "org.mapdb.serializer.SerializerShort.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerShort.fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerShort.isTrusted()"], ["java.lang.Object", "org.mapdb.serializer.SerializerShort.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerShort.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerShortArray", "org.mapdb.serializer.SerializerShortArray()"], ["void", "org.mapdb.serializer.SerializerShortArray.serialize(org.mapdb.DataOutput2, short[])"], ["short[]", "org.mapdb.serializer.SerializerShortArray.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerShortArray.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerShortArray.equals(short[], short[])"], ["int", "org.mapdb.serializer.SerializerShortArray.hashCode(short[], int)"], ["int", "org.mapdb.serializer.SerializerShortArray.compare(short[], short[])"], ["short[]", "org.mapdb.serializer.SerializerShortArray.nextValue(short[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerShortArray.nextValue(java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerShortArray.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerShortArray.equals(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerShortArray.compare(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerShortArray.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerShortArray.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerString", "org.mapdb.serializer.SerializerString()"], ["void", "org.mapdb.serializer.SerializerString.serialize(org.mapdb.DataOutput2, java.lang.String)"], ["java.lang.String", "org.mapdb.serializer.SerializerString.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerString.isTrusted()"], ["void", "org.mapdb.serializer.SerializerString.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.String, java.util.Comparator)"], ["java.lang.String", "org.mapdb.serializer.SerializerString.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySize(java.lang.Object)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayEmpty()"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayPut(java.lang.Object, int, java.lang.String)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayUpdateVal(java.lang.Object, int, java.lang.String)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayFromArray(java.lang.Object[])"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["char[][]", "org.mapdb.serializer.SerializerString.valueArrayDeleteValue(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerString.hashCode(java.lang.String, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerString.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerString.hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerString.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerString.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringAscii", "org.mapdb.serializer.SerializerStringAscii()"], ["void", "org.mapdb.serializer.SerializerStringAscii.serialize(org.mapdb.DataOutput2, java.lang.String)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringAscii.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerStringAscii.isTrusted()"], ["int", "org.mapdb.serializer.SerializerStringAscii.hashCode(java.lang.String, int)"], ["int", "org.mapdb.serializer.SerializerStringAscii.hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringAscii.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringAscii.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta", "org.mapdb.serializer.SerializerStringDelta()"], ["char[][]", "org.mapdb.serializer.SerializerStringDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringDelta.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.commonPrefixLen()"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.length()"], ["int[]", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.getOffset()"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.putKey(int, java.lang.String)"], ["org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.putKey(int, byte[])"], ["byte[]", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.getKey(int)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.compare(int, byte[])"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.compare(int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.compare(int, int)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.getKeyString(int)"], ["boolean", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.hasUnicodeChars()"], ["void", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.serialize(java.io.DataOutput, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys.deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys(org.mapdb.DataInput2, int[], int)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.commonPrefixLen()"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.length()"], ["int[]", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.getOffset()"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.putKey(int, java.lang.String)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.putKey(org.mapdb.serializer.SerializerStringDelta2$ByteArrayKeys, int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.compare(int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.compare(int, int)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.getKeyString(int)"], ["boolean", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.hasUnicodeChars()"], ["void", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.serialize(java.io.DataOutput, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.putKey(int, java.lang.String)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.copyOfRange(int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2$CharArrayKeys.deleteKey(int)"], ["org.mapdb.serializer.SerializerStringDelta2", "org.mapdb.serializer.SerializerStringDelta2()"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringDelta2.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeleteValue(java.lang.Object, int)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayEmpty()"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayFromArray(java.lang.Object[])"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2.valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayPut(java.lang.Object, int, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.String)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.String, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySize(java.lang.Object)"], ["org.mapdb.serializer.SerializerStringDelta2$StringArrayKeys", "org.mapdb.serializer.SerializerStringDelta2.valueArrayUpdateVal(java.lang.Object, int, java.lang.String)"], ["boolean", "org.mapdb.serializer.SerializerStringDelta2.isTrusted()"], ["void", "org.mapdb.serializer.SerializerStringDelta2.serialize(org.mapdb.DataOutput2, java.lang.String)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringDelta2.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.hashCode(java.lang.String, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayGet(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerStringDelta2.hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringDelta2.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringDelta2.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringIntern", "org.mapdb.serializer.SerializerStringIntern()"], ["void", "org.mapdb.serializer.SerializerStringIntern.serialize(org.mapdb.DataOutput2, java.lang.String)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringIntern.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerStringIntern.isTrusted()"], ["int", "org.mapdb.serializer.SerializerStringIntern.hashCode(java.lang.String, int)"], ["int", "org.mapdb.serializer.SerializerStringIntern.hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringIntern.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringIntern.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringNoSize", "org.mapdb.serializer.SerializerStringNoSize()"], ["void", "org.mapdb.serializer.SerializerStringNoSize.serialize(org.mapdb.DataOutput2, java.lang.String)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringNoSize.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerStringNoSize.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerStringNoSize.needsAvailableSizeHint()"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringNoSize.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringNoSize.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerStringOrigHash", "org.mapdb.serializer.SerializerStringOrigHash()"], ["void", "org.mapdb.serializer.SerializerStringOrigHash.serialize(org.mapdb.DataOutput2, java.lang.String)"], ["java.lang.String", "org.mapdb.serializer.SerializerStringOrigHash.deserialize(org.mapdb.DataInput2, int)"], ["boolean", "org.mapdb.serializer.SerializerStringOrigHash.isTrusted()"], ["int", "org.mapdb.serializer.SerializerStringOrigHash.hashCode(java.lang.String, int)"], ["int", "org.mapdb.serializer.SerializerStringOrigHash.hashCode(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerStringOrigHash.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerStringOrigHash.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerUUID", "org.mapdb.serializer.SerializerUUID()"], ["void", "org.mapdb.serializer.SerializerUUID.serialize(org.mapdb.DataOutput2, java.util.UUID)"], ["java.util.UUID", "org.mapdb.serializer.SerializerUUID.deserialize(org.mapdb.DataInput2, int)"], ["int", "org.mapdb.serializer.SerializerUUID.fixedSize()"], ["boolean", "org.mapdb.serializer.SerializerUUID.isTrusted()"], ["boolean", "org.mapdb.serializer.SerializerUUID.equals(java.util.UUID, java.util.UUID)"], ["int", "org.mapdb.serializer.SerializerUUID.hashCode(java.util.UUID, int)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.util.UUID)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.util.UUID, java.util.Comparator)"], ["void", "org.mapdb.serializer.SerializerUUID.valueArraySerialize(org.mapdb.DataOutput2, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayDeserialize(org.mapdb.DataInput2, int)"], ["java.util.UUID", "org.mapdb.serializer.SerializerUUID.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySize(java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayEmpty()"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayPut(java.lang.Object, int, java.util.UUID)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayUpdateVal(java.lang.Object, int, java.util.UUID)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayFromArray(java.lang.Object[])"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayCopyOfRange(java.lang.Object, int, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayDeleteValue(java.lang.Object, int)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayUpdateVal(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayPut(java.lang.Object, int, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.valueArrayGet(java.lang.Object, int)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["int", "org.mapdb.serializer.SerializerUUID.valueArraySearch(java.lang.Object, java.lang.Object)"], ["int", "org.mapdb.serializer.SerializerUUID.hashCode(java.lang.Object, int)"], ["boolean", "org.mapdb.serializer.SerializerUUID.equals(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.mapdb.serializer.SerializerUUID.deserialize(org.mapdb.DataInput2, int)"], ["void", "org.mapdb.serializer.SerializerUUID.serialize(org.mapdb.DataOutput2, java.lang.Object)"], ["org.mapdb.serializer.SerializerUtils", "org.mapdb.serializer.SerializerUtils()"], ["<R> org.mapdb.Serializer<R>", "org.mapdb.serializer.SerializerUtils.serializerForClass(java.lang.Class<R>)"], ["int", "org.mapdb.serializer.SerializerUtils.compareInt(int, int)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ByteArrayVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ByteArrayVol$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.ByteArrayVol$1.handlesReadonly()"], ["org.mapdb.volume.ByteArrayVol", "org.mapdb.volume.ByteArrayVol()"], ["org.mapdb.volume.ByteArrayVol", "org.mapdb.volume.ByteArrayVol(int, long)"], ["void", "org.mapdb.volume.ByteArrayVol.ensureAvailable(long)"], ["void", "org.mapdb.volume.ByteArrayVol.truncate(long)"], ["void", "org.mapdb.volume.ByteArrayVol.putLong(long, long)"], ["void", "org.mapdb.volume.ByteArrayVol.putInt(long, int)"], ["void", "org.mapdb.volume.ByteArrayVol.putByte(long, byte)"], ["void", "org.mapdb.volume.ByteArrayVol.putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteArrayVol.putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ByteArrayVol.copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ByteArrayVol.putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteArrayVol.getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ByteArrayVol.clear(long, long)"], ["long", "org.mapdb.volume.ByteArrayVol.getLong(long)"], ["int", "org.mapdb.volume.ByteArrayVol.getInt(long)"], ["byte", "org.mapdb.volume.ByteArrayVol.getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteArrayVol.getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteArrayVol.getData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteArrayVol.close()"], ["void", "org.mapdb.volume.ByteArrayVol.sync()"], ["int", "org.mapdb.volume.ByteArrayVol.sliceSize()"], ["boolean", "org.mapdb.volume.ByteArrayVol.isSliced()"], ["long", "org.mapdb.volume.ByteArrayVol.length()"], ["boolean", "org.mapdb.volume.ByteArrayVol.isReadOnly()"], ["java.io.File", "org.mapdb.volume.ByteArrayVol.getFile()"], ["boolean", "org.mapdb.volume.ByteArrayVol.getFileLocked()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ByteBufferMemoryVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$1.handlesReadonly()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ByteBufferMemoryVol$2.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$2.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol$2.handlesReadonly()"], ["java.lang.String", "org.mapdb.volume.ByteBufferMemoryVol.toString()"], ["org.mapdb.volume.ByteBufferMemoryVol", "org.mapdb.volume.ByteBufferMemoryVol(boolean, int, boolean, long)"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.ensureAvailable(long)"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.truncate(long)"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.close()"], ["void", "org.mapdb.volume.ByteBufferMemoryVol.sync()"], ["long", "org.mapdb.volume.ByteBufferMemoryVol.length()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol.isReadOnly()"], ["java.io.File", "org.mapdb.volume.ByteBufferMemoryVol.getFile()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVol.getFileLocked()"], ["java.lang.String", "org.mapdb.volume.ByteBufferMemoryVolSingle.toString()"], ["org.mapdb.volume.ByteBufferMemoryVolSingle", "org.mapdb.volume.ByteBufferMemoryVolSingle(boolean, long, boolean)"], ["void", "org.mapdb.volume.ByteBufferMemoryVolSingle.truncate(long)"], ["synchronized", "org.mapdb.volume.ByteBufferMemoryVolSingle.void close()"], ["void", "org.mapdb.volume.ByteBufferMemoryVolSingle.sync()"], ["long", "org.mapdb.volume.ByteBufferMemoryVolSingle.length()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVolSingle.isReadOnly()"], ["java.io.File", "org.mapdb.volume.ByteBufferMemoryVolSingle.getFile()"], ["boolean", "org.mapdb.volume.ByteBufferMemoryVolSingle.getFileLocked()"], ["void", "org.mapdb.volume.ByteBufferVol.putLong(long, long)"], ["void", "org.mapdb.volume.ByteBufferVol.putInt(long, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putByte(long, byte)"], ["void", "org.mapdb.volume.ByteBufferVol.putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ByteBufferVol.copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ByteBufferVol.getData(long, byte[], int, int)"], ["long", "org.mapdb.volume.ByteBufferVol.getLong(long)"], ["int", "org.mapdb.volume.ByteBufferVol.getInt(long)"], ["byte", "org.mapdb.volume.ByteBufferVol.getByte(long)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.volume.ByteBufferVol.getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVol.getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ByteBufferVol.putUnsignedShort(long, int)"], ["int", "org.mapdb.volume.ByteBufferVol.getUnsignedShort(long)"], ["int", "org.mapdb.volume.ByteBufferVol.getUnsignedByte(long)"], ["void", "org.mapdb.volume.ByteBufferVol.putUnsignedByte(long, int)"], ["long", "org.mapdb.volume.ByteBufferVol.getSixLong(long)"], ["void", "org.mapdb.volume.ByteBufferVol.putSixLong(long, long)"], ["int", "org.mapdb.volume.ByteBufferVol.putPackedLong(long, long)"], ["long", "org.mapdb.volume.ByteBufferVol.getPackedLong(long)"], ["void", "org.mapdb.volume.ByteBufferVol.clear(long, long)"], ["boolean", "org.mapdb.volume.ByteBufferVol.isSliced()"], ["int", "org.mapdb.volume.ByteBufferVol.sliceSize()"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVol.getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.ensureAvailable(long)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putLong(long, long)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putInt(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putByte(long, byte)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.getData(long, byte[], int, int)"], ["long", "org.mapdb.volume.ByteBufferVolSingle.getLong(long)"], ["int", "org.mapdb.volume.ByteBufferVolSingle.getInt(long)"], ["byte", "org.mapdb.volume.ByteBufferVolSingle.getByte(long)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.volume.ByteBufferVolSingle.getDataInput(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVolSingle.getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ByteBufferVolSingle.clear(long, long)"], ["int", "org.mapdb.volume.ByteBufferVolSingle.sliceSize()"], ["boolean", "org.mapdb.volume.ByteBufferVolSingle.isSliced()"], ["org.mapdb.DataInput2", "org.mapdb.volume.ByteBufferVolSingle.getDataInput(long, int)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.FileChannelVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.FileChannelVol$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.FileChannelVol$1.handlesReadonly()"], ["org.mapdb.volume.FileChannelVol", "org.mapdb.volume.FileChannelVol(java.io.File, boolean, long, int, long)"], ["org.mapdb.volume.FileChannelVol", "org.mapdb.volume.FileChannelVol(java.io.File)"], ["void", "org.mapdb.volume.FileChannelVol.ensureAvailable(long)"], ["void", "org.mapdb.volume.FileChannelVol.truncate(long)"], ["void", "org.mapdb.volume.FileChannelVol.putLong(long, long)"], ["void", "org.mapdb.volume.FileChannelVol.putInt(long, int)"], ["void", "org.mapdb.volume.FileChannelVol.putByte(long, byte)"], ["void", "org.mapdb.volume.FileChannelVol.putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.FileChannelVol.putData(long, java.nio.ByteBuffer)"], ["long", "org.mapdb.volume.FileChannelVol.getLong(long)"], ["int", "org.mapdb.volume.FileChannelVol.getInt(long)"], ["byte", "org.mapdb.volume.FileChannelVol.getByte(long)"], ["org.mapdb.DataInput2$ByteBuffer", "org.mapdb.volume.FileChannelVol.getDataInput(long, int)"], ["void", "org.mapdb.volume.FileChannelVol.getData(long, byte[], int, int)"], ["synchronized", "org.mapdb.volume.FileChannelVol.void close()"], ["void", "org.mapdb.volume.FileChannelVol.sync()"], ["int", "org.mapdb.volume.FileChannelVol.sliceSize()"], ["boolean", "org.mapdb.volume.FileChannelVol.isSliced()"], ["long", "org.mapdb.volume.FileChannelVol.length()"], ["boolean", "org.mapdb.volume.FileChannelVol.isReadOnly()"], ["java.io.File", "org.mapdb.volume.FileChannelVol.getFile()"], ["boolean", "org.mapdb.volume.FileChannelVol.getFileLocked()"], ["void", "org.mapdb.volume.FileChannelVol.clear(long, long)"], ["void", "org.mapdb.volume.FileChannelVol.clear(java.nio.channels.FileChannel, long, long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.FileChannelVol.getDataInput(long, int)"], ["org.mapdb.volume.MappedFileVol$MappedFileFactory", "org.mapdb.volume.MappedFileVol$MappedFileFactory(boolean, boolean)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.MappedFileVol$MappedFileFactory.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.MappedFileVol$MappedFileFactory.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.MappedFileVol$MappedFileFactory.handlesReadonly()"], ["org.mapdb.volume.MappedFileVol", "org.mapdb.volume.MappedFileVol(java.io.File, boolean, long, int, boolean, long, boolean)"], ["void", "org.mapdb.volume.MappedFileVol.ensureAvailable(long)"], ["void", "org.mapdb.volume.MappedFileVol.close()"], ["void", "org.mapdb.volume.MappedFileVol.sync()"], ["long", "org.mapdb.volume.MappedFileVol.length()"], ["boolean", "org.mapdb.volume.MappedFileVol.isReadOnly()"], ["java.io.File", "org.mapdb.volume.MappedFileVol.getFile()"], ["boolean", "org.mapdb.volume.MappedFileVol.getFileLocked()"], ["void", "org.mapdb.volume.MappedFileVol.truncate(long)"], ["boolean", "org.mapdb.volume.MappedFileVol.fileLoad()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.MappedFileVolSingle$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$1.handlesReadonly()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.MappedFileVolSingle$2.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$2.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle$2.handlesReadonly()"], ["org.mapdb.volume.MappedFileVolSingle", "org.mapdb.volume.MappedFileVolSingle(java.io.File, boolean, long, long, boolean)"], ["synchronized", "org.mapdb.volume.MappedFileVolSingle.void close()"], ["synchronized", "org.mapdb.volume.MappedFileVolSingle.void sync()"], ["long", "org.mapdb.volume.MappedFileVolSingle.length()"], ["boolean", "org.mapdb.volume.MappedFileVolSingle.isReadOnly()"], ["java.io.File", "org.mapdb.volume.MappedFileVolSingle.getFile()"], ["boolean", "org.mapdb.volume.MappedFileVolSingle.getFileLocked()"], ["void", "org.mapdb.volume.MappedFileVolSingle.truncate(long)"], ["boolean", "org.mapdb.volume.MappedFileVolSingle.fileLoad()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.RandomAccessFileVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.RandomAccessFileVol$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.RandomAccessFileVol$1.handlesReadonly()"], ["org.mapdb.volume.RandomAccessFileVol", "org.mapdb.volume.RandomAccessFileVol(java.io.File, boolean, long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void ensureAvailable(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void truncate(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putLong(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putInt(long, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putByte(long, byte)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putData(long, byte[], int, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putData(long, java.nio.ByteBuffer)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long getLong(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.int getInt(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.byte getByte(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.org.mapdb.DataInput2 getDataInput(long, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void getData(long, byte[], int, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void close()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void sync()"], ["int", "org.mapdb.volume.RandomAccessFileVol.sliceSize()"], ["boolean", "org.mapdb.volume.RandomAccessFileVol.isSliced()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long length()"], ["java.io.File", "org.mapdb.volume.RandomAccessFileVol.getFile()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.boolean getFileLocked()"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void clear(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putUnsignedShort(long, int)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.int getUnsignedShort(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long getSixLong(long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.void putSixLong(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.int putPackedLong(long, long)"], ["synchronized", "org.mapdb.volume.RandomAccessFileVol.long getPackedLong(long)"], ["boolean", "org.mapdb.volume.RandomAccessFileVol.isReadOnly()"], ["org.mapdb.volume.ReadOnlyVolume", "org.mapdb.volume.ReadOnlyVolume(org.mapdb.volume.Volume)"], ["void", "org.mapdb.volume.ReadOnlyVolume.ensureAvailable(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.truncate(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putLong(long, long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putInt(long, int)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putByte(long, byte)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putDataOverlap(long, byte[], int, int)"], ["long", "org.mapdb.volume.ReadOnlyVolume.getLong(long)"], ["int", "org.mapdb.volume.ReadOnlyVolume.getInt(long)"], ["byte", "org.mapdb.volume.ReadOnlyVolume.getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ReadOnlyVolume.getDataInput(long, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.ReadOnlyVolume.getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.ReadOnlyVolume.getData(long, byte[], int, int)"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.isClosed()"], ["void", "org.mapdb.volume.ReadOnlyVolume.close()"], ["void", "org.mapdb.volume.ReadOnlyVolume.sync()"], ["int", "org.mapdb.volume.ReadOnlyVolume.sliceSize()"], ["void", "org.mapdb.volume.ReadOnlyVolume.deleteFile()"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.isSliced()"], ["long", "org.mapdb.volume.ReadOnlyVolume.length()"], ["void", "org.mapdb.volume.ReadOnlyVolume.putUnsignedShort(long, int)"], ["int", "org.mapdb.volume.ReadOnlyVolume.getUnsignedShort(long)"], ["int", "org.mapdb.volume.ReadOnlyVolume.getUnsignedByte(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putUnsignedByte(long, int)"], ["long", "org.mapdb.volume.ReadOnlyVolume.getSixLong(long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.putSixLong(long, long)"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.isReadOnly()"], ["java.io.File", "org.mapdb.volume.ReadOnlyVolume.getFile()"], ["boolean", "org.mapdb.volume.ReadOnlyVolume.getFileLocked()"], ["void", "org.mapdb.volume.ReadOnlyVolume.copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.ReadOnlyVolume.clear(long, long)"], ["boolean", "org.mapdb.volume.ReadOnlyVolumeFactory.exists(java.lang.String)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.ReadOnlyVolumeFactory.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.ReadOnlyVolumeFactory.handlesReadonly()"], ["org.mapdb.volume.ReadOnlyVolumeFactory", "org.mapdb.volume.ReadOnlyVolumeFactory(org.mapdb.volume.VolumeFactory)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.SingleByteArrayVol$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.SingleByteArrayVol$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.SingleByteArrayVol$1.handlesReadonly()"], ["org.mapdb.volume.SingleByteArrayVol", "org.mapdb.volume.SingleByteArrayVol(int)"], ["org.mapdb.volume.SingleByteArrayVol", "org.mapdb.volume.SingleByteArrayVol(byte[])"], ["void", "org.mapdb.volume.SingleByteArrayVol.ensureAvailable(long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.truncate(long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putLong(long, long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putInt(long, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putByte(long, byte)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putData(long, byte[], int, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.putData(long, java.nio.ByteBuffer)"], ["void", "org.mapdb.volume.SingleByteArrayVol.copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.SingleByteArrayVol.clear(long, long)"], ["long", "org.mapdb.volume.SingleByteArrayVol.getLong(long)"], ["int", "org.mapdb.volume.SingleByteArrayVol.getInt(long)"], ["byte", "org.mapdb.volume.SingleByteArrayVol.getByte(long)"], ["org.mapdb.DataInput2", "org.mapdb.volume.SingleByteArrayVol.getDataInput(long, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.getData(long, byte[], int, int)"], ["void", "org.mapdb.volume.SingleByteArrayVol.close()"], ["void", "org.mapdb.volume.SingleByteArrayVol.sync()"], ["int", "org.mapdb.volume.SingleByteArrayVol.sliceSize()"], ["boolean", "org.mapdb.volume.SingleByteArrayVol.isSliced()"], ["long", "org.mapdb.volume.SingleByteArrayVol.length()"], ["boolean", "org.mapdb.volume.SingleByteArrayVol.isReadOnly()"], ["java.io.File", "org.mapdb.volume.SingleByteArrayVol.getFile()"], ["boolean", "org.mapdb.volume.SingleByteArrayVol.getFileLocked()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.Volume$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.Volume$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.Volume$1.handlesReadonly()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.Volume()"], ["boolean", "org.mapdb.volume.Volume.fileLoad()"], ["void", "org.mapdb.volume.Volume.assertZeroes(long, long)"], ["boolean", "org.mapdb.volume.Volume.isClosed()"], ["void", "org.mapdb.volume.Volume.putDataOverlap(long, byte[], int, int)"], ["org.mapdb.DataInput2", "org.mapdb.volume.Volume.getDataInputOverlap(long, int)"], ["void", "org.mapdb.volume.Volume.deleteFile()"], ["void", "org.mapdb.volume.Volume.putUnsignedShort(long, int)"], ["int", "org.mapdb.volume.Volume.getUnsignedShort(long)"], ["int", "org.mapdb.volume.Volume.getUnsignedByte(long)"], ["void", "org.mapdb.volume.Volume.putUnsignedByte(long, int)"], ["long", "org.mapdb.volume.Volume.getSixLong(long)"], ["void", "org.mapdb.volume.Volume.putSixLong(long, long)"], ["int", "org.mapdb.volume.Volume.putPackedLong(long, long)"], ["long", "org.mapdb.volume.Volume.getPackedLong(long)"], ["void", "org.mapdb.volume.Volume.copyTo(long, org.mapdb.volume.Volume, long, long)"], ["void", "org.mapdb.volume.Volume.clearOverlap(long, long)"], ["void", "org.mapdb.volume.Volume.copyTo(org.mapdb.volume.Volume)"], ["void", "org.mapdb.volume.Volume.copyFrom(java.io.InputStream)"], ["void", "org.mapdb.volume.Volume.copyTo(java.io.OutputStream)"], ["long", "org.mapdb.volume.Volume.hash(long, long, long)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.VolumeFactory$1.makeVolume(java.lang.String, boolean, long, int, long, boolean)"], ["boolean", "org.mapdb.volume.VolumeFactory$1.exists(java.lang.String)"], ["boolean", "org.mapdb.volume.VolumeFactory$1.handlesReadonly()"], ["org.mapdb.volume.VolumeFactory", "org.mapdb.volume.VolumeFactory()"], ["org.mapdb.volume.Volume", "org.mapdb.volume.VolumeFactory.makeVolume(java.lang.String, boolean)"], ["org.mapdb.volume.Volume", "org.mapdb.volume.VolumeFactory.makeVolume(java.lang.String, boolean, long)"], ["org.mapdb.volume.VolumeFactory", "org.mapdb.volume.VolumeFactory.wrap(org.mapdb.volume.Volume, boolean)"]]}