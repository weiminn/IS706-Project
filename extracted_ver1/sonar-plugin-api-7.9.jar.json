{"sonar-plugin-api-7.9.jar": [["org.sonar.api.scan.filesystem.FileExclusions", "org.sonar.api.scan.filesystem.FileExclusions(org.sonar.api.config.Configuration)"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.sourceInclusions()"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.testInclusions()"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.sourceExclusions()"], ["java.lang.String[]", "org.sonar.api.scan.filesystem.FileExclusions.testExclusions()"], ["org.sonar.api.scan.filesystem.PathResolver$RelativePath", "org.sonar.api.scan.filesystem.PathResolver$RelativePath(java.io.File, java.lang.String)"], ["java.io.File", "org.sonar.api.scan.filesystem.PathResolver$RelativePath.dir()"], ["java.lang.String", "org.sonar.api.scan.filesystem.PathResolver$RelativePath.path()"], ["org.sonar.api.scan.filesystem.PathResolver", "org.sonar.api.scan.filesystem.PathResolver()"], ["java.io.File", "org.sonar.api.scan.filesystem.PathResolver.relativeFile(java.io.File, java.lang.String)"], ["org.sonar.api.scan.filesystem.PathResolver$RelativePath", "org.sonar.api.scan.filesystem.PathResolver.relativePath(java.util.Collection<java.io.File>, java.io.File)"], ["java.lang.String", "org.sonar.api.scan.filesystem.PathResolver.relativePath(java.nio.file.Path, java.nio.file.Path)"], ["java.lang.String", "org.sonar.api.scan.filesystem.PathResolver.relativePath(java.io.File, java.io.File)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setProviderId(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setProviderLogin(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setLogin(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setName(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setEmail(java.lang.String)"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity$Builder.setGroups(java.util.Set<java.lang.String>)"], ["org.sonar.api.server.authentication.UserIdentity", "org.sonar.api.server.authentication.UserIdentity$Builder.build()"], ["org.sonar.api.server.authentication.UnauthorizedException", "org.sonar.api.server.authentication.UnauthorizedException(java.lang.String)"], ["org.sonar.api.server.authentication.UnauthorizedException", "org.sonar.api.server.authentication.UnauthorizedException(java.lang.String, java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.server.authentication.Display.getIconPath()"], ["java.lang.String", "org.sonar.api.server.authentication.Display.getBackgroundColor()"], ["java.lang.String", "org.sonar.api.server.authentication.Display.getHelpMessage()"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display.builder()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getProviderId()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getProviderLogin()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getLogin()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getName()"], ["java.lang.String", "org.sonar.api.server.authentication.UserIdentity.getEmail()"], ["boolean", "org.sonar.api.server.authentication.UserIdentity.shouldSyncGroups()"], ["org.sonar.api.server.authentication.UserIdentity$Builder", "org.sonar.api.server.authentication.UserIdentity.builder()"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display$Builder.setIconPath(java.lang.String)"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display$Builder.setBackgroundColor(java.lang.String)"], ["org.sonar.api.server.authentication.Display$Builder", "org.sonar.api.server.authentication.Display$Builder.setHelpMessage(java.lang.String)"], ["org.sonar.api.server.authentication.Display", "org.sonar.api.server.authentication.Display$Builder.build()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.key()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.deprecatedKey()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.path()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.description()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.since()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.deprecatedSince()"], ["boolean", "org.sonar.api.server.ws.WebService$Action.isPost()"], ["boolean", "org.sonar.api.server.ws.WebService$Action.isInternal()"], ["org.sonar.api.server.ws.RequestHandler", "org.sonar.api.server.ws.WebService$Action.handler()"], ["java.net.URL", "org.sonar.api.server.ws.WebService$Action.responseExample()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.responseExampleAsString()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.responseExampleFormat()"], ["org.sonar.api.server.ws.WebService$Param", "org.sonar.api.server.ws.WebService$Action.param(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Action.toString()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.key()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.since()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.deprecatedSince()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.deprecatedKey()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.deprecatedKeySince()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.description()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.exampleValue()"], ["boolean", "org.sonar.api.server.ws.WebService$Param.isRequired()"], ["boolean", "org.sonar.api.server.ws.WebService$Param.isInternal()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.defaultValue()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.maxValuesAllowed()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.maximumLength()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.minimumLength()"], ["java.lang.Integer", "org.sonar.api.server.ws.WebService$Param.maximumValue()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Param.toString()"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest()"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.method()"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.getMediaType()"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setMediaType(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.internal.SimpleGetRequest.hasParam(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.param(java.lang.String)"], ["java.io.InputStream", "org.sonar.api.server.ws.internal.SimpleGetRequest.paramAsInputStream(java.lang.String)"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setParam(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String[]>", "org.sonar.api.server.ws.internal.SimpleGetRequest.getParams()"], ["org.sonar.api.server.ws.Request$Part", "org.sonar.api.server.ws.internal.SimpleGetRequest.paramAsPart(java.lang.String)"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setPart(java.lang.String, java.io.InputStream, java.lang.String)"], ["org.sonar.api.server.ws.LocalConnector", "org.sonar.api.server.ws.internal.SimpleGetRequest.localConnector()"], ["java.lang.String", "org.sonar.api.server.ws.internal.SimpleGetRequest.getPath()"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setPath(java.lang.String)"], ["org.sonar.api.server.ws.internal.SimpleGetRequest", "org.sonar.api.server.ws.internal.SimpleGetRequest.setHeader(java.lang.String, java.lang.String)"], ["org.sonar.api.server.ws.internal.PartImpl", "org.sonar.api.server.ws.internal.PartImpl(java.io.InputStream, java.lang.String)"], ["java.io.InputStream", "org.sonar.api.server.ws.internal.PartImpl.getInputStream()"], ["java.lang.String", "org.sonar.api.server.ws.internal.PartImpl.getFileName()"], ["org.sonar.api.server.ws.internal.ValidatingRequest", "org.sonar.api.server.ws.internal.ValidatingRequest()"], ["void", "org.sonar.api.server.ws.internal.ValidatingRequest.setAction(org.sonar.api.server.ws.WebService$Action)"], ["org.sonar.api.server.ws.WebService$Action", "org.sonar.api.server.ws.internal.ValidatingRequest.action()"], ["org.sonar.api.server.ws.LocalConnector", "org.sonar.api.server.ws.internal.ValidatingRequest.localConnector()"], ["void", "org.sonar.api.server.ws.internal.ValidatingRequest.setLocalConnector(org.sonar.api.server.ws.LocalConnector)"], ["java.lang.String", "org.sonar.api.server.ws.internal.ValidatingRequest.param(java.lang.String)"], ["java.io.InputStream", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsInputStream(java.lang.String)"], ["org.sonar.api.server.ws.Request$Part", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsPart(java.lang.String)"], ["<E extends java.lang.Enum<E>> java.util.List<E>", "org.sonar.api.server.ws.internal.ValidatingRequest.paramAsEnums(java.lang.String, java.lang.Class<E>)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Controller.path()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Controller.description()"], ["java.lang.String", "org.sonar.api.server.ws.WebService$Controller.since()"], ["org.sonar.api.server.ws.WebService$Action", "org.sonar.api.server.ws.WebService$Controller.action(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.WebService$Controller.isInternal()"], ["org.sonar.api.server.ws.Request$AbsentStringParam[]", "org.sonar.api.server.ws.Request$AbsentStringParam.values()"], ["org.sonar.api.server.ws.Request$AbsentStringParam", "org.sonar.api.server.ws.Request$AbsentStringParam.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request$AbsentStringParam.isPresent()"], ["java.lang.String", "org.sonar.api.server.ws.Request$AbsentStringParam.getValue()"], ["java.lang.String", "org.sonar.api.server.ws.Request$AbsentStringParam.or(java.util.function.Supplier<java.lang.String>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request$AbsentStringParam.emptyAsNull()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentStringParam.or(java.util.function.Supplier)"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentStringParam.getValue()"], ["boolean", "org.sonar.api.server.ws.Request$GenericParam.isPresent()"], ["T", "org.sonar.api.server.ws.Request$GenericParam.getValue()"], ["T", "org.sonar.api.server.ws.Request$GenericParam.or(java.util.function.Supplier<T>)"], ["org.sonar.api.server.ws.Change", "org.sonar.api.server.ws.Change(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.Change.getVersion()"], ["java.lang.String", "org.sonar.api.server.ws.Change.getDescription()"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDeprecatedKey(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDescription(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDescription(java.lang.String, java.lang.Object...)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setDeprecatedSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setPost(boolean)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setInternal(boolean)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setHandler(org.sonar.api.server.ws.RequestHandler)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setResponseExample(java.net.URL)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.setChangelog(org.sonar.api.server.ws.Change...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createParam(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addPagingParams(int)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addPagingParams(int, int)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createPageParam()"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createPageSize(int, int)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addPagingParamsSince(int, int, java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addFieldsParam(java.util.Collection<?>)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createFieldsParam(java.util.Collection<?>)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addSearchQuery(java.lang.String, java.lang.String...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createSearchQuery(java.lang.String, java.lang.String...)"], ["<V> org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addSortParams(java.util.Collection<V>, V, boolean)"], ["<V> org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewAction.createSortParams(java.util.Collection<V>, V, boolean)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewAction.addSelectionModeParam()"], ["org.sonar.api.server.ws.Request", "org.sonar.api.server.ws.Request()"], ["java.io.BufferedReader", "org.sonar.api.server.ws.Request.getReader()"], ["java.lang.String", "org.sonar.api.server.ws.Request.mandatoryParam(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request.mandatoryParamAsBoolean(java.lang.String)"], ["int", "org.sonar.api.server.ws.Request.mandatoryParamAsInt(java.lang.String)"], ["long", "org.sonar.api.server.ws.Request.mandatoryParamAsLong(java.lang.String)"], ["<E extends java.lang.Enum<E>> E", "org.sonar.api.server.ws.Request.mandatoryParamAsEnum(java.lang.String, java.lang.Class<E>)"], ["org.sonar.api.server.ws.Request$Part", "org.sonar.api.server.ws.Request.mandatoryParamAsPart(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.Request.param(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request.paramAsBoolean(java.lang.String, boolean)"], ["int", "org.sonar.api.server.ws.Request.paramAsInt(java.lang.String, int)"], ["long", "org.sonar.api.server.ws.Request.paramAsLong(java.lang.String, long)"], ["java.lang.Boolean", "org.sonar.api.server.ws.Request.paramAsBoolean(java.lang.String)"], ["java.lang.Integer", "org.sonar.api.server.ws.Request.paramAsInt(java.lang.String)"], ["java.lang.Long", "org.sonar.api.server.ws.Request.paramAsLong(java.lang.String)"], ["<E extends java.lang.Enum<E>> E", "org.sonar.api.server.ws.Request.paramAsEnum(java.lang.String, java.lang.Class<E>)"], ["<E extends java.lang.Enum<E>> java.util.List<E>", "org.sonar.api.server.ws.Request.paramAsEnums(java.lang.String, java.lang.Class<E>)"], ["java.util.Date", "org.sonar.api.server.ws.Request.paramAsDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.server.ws.Request.paramAsDate(java.lang.String)"], ["<T> org.sonar.api.server.ws.Request$Param<T>", "org.sonar.api.server.ws.Request.getParam(java.lang.String, java.util.function.BiFunction<org.sonar.api.server.ws.Request, java.lang.String, T>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request.getParam(java.lang.String, java.util.function.Consumer<java.lang.String>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request.getParam(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.server.ws.Request.getHeaders()"], ["void", "org.sonar.api.server.ws.WebService$NewController.done()"], ["org.sonar.api.server.ws.WebService$NewController", "org.sonar.api.server.ws.WebService$NewController.setDescription(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewController", "org.sonar.api.server.ws.WebService$NewController.setSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewAction", "org.sonar.api.server.ws.WebService$NewController.createAction(java.lang.String)"], ["org.sonar.api.server.ws.WebService$SelectionMode[]", "org.sonar.api.server.ws.WebService$SelectionMode.values()"], ["org.sonar.api.server.ws.WebService$SelectionMode", "org.sonar.api.server.ws.WebService$SelectionMode.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$SelectionMode.value()"], ["org.sonar.api.server.ws.WebService$SelectionMode", "org.sonar.api.server.ws.WebService$SelectionMode.fromParam(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDeprecatedSince(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDeprecatedKey(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDeprecatedKey(java.lang.String, java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDescription(java.lang.String)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDescription(java.lang.String, java.lang.Object...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setRequired(boolean)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setInternal(boolean)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setExampleValue(java.lang.Object)"], ["<T> org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setPossibleValues(T...)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setBooleanPossibleValues()"], ["<T> org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setPossibleValues(java.util.Collection<T>)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setDefaultValue(java.lang.Object)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMaxValuesAllowed(java.lang.Integer)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMaximumLength(java.lang.Integer)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMinimumLength(java.lang.Integer)"], ["org.sonar.api.server.ws.WebService$NewParam", "org.sonar.api.server.ws.WebService$NewParam.setMaximumValue(java.lang.Integer)"], ["java.lang.String", "org.sonar.api.server.ws.WebService$NewParam.toString()"], ["org.sonar.api.server.ws.WebService$Context", "org.sonar.api.server.ws.WebService$Context()"], ["org.sonar.api.server.ws.WebService$NewController", "org.sonar.api.server.ws.WebService$Context.createController(java.lang.String)"], ["org.sonar.api.server.ws.WebService$Controller", "org.sonar.api.server.ws.WebService$Context.controller(java.lang.String)"], ["org.sonar.api.server.ws.Request$AbsentParam[]", "org.sonar.api.server.ws.Request$AbsentParam.values()"], ["org.sonar.api.server.ws.Request$AbsentParam", "org.sonar.api.server.ws.Request$AbsentParam.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.server.ws.Request$AbsentParam.isPresent()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentParam.getValue()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$AbsentParam.or(java.util.function.Supplier<java.lang.Object>)"], ["boolean", "org.sonar.api.server.ws.Request$StringParamImpl.isPresent()"], ["java.lang.String", "org.sonar.api.server.ws.Request$StringParamImpl.getValue()"], ["java.lang.String", "org.sonar.api.server.ws.Request$StringParamImpl.or(java.util.function.Supplier<java.lang.String>)"], ["org.sonar.api.server.ws.Request$StringParam", "org.sonar.api.server.ws.Request$StringParamImpl.emptyAsNull()"], ["java.lang.Object", "org.sonar.api.server.ws.Request$StringParamImpl.or(java.util.function.Supplier)"], ["java.lang.Object", "org.sonar.api.server.ws.Request$StringParamImpl.getValue()"], ["default", "org.sonar.api.server.ws.WebService.void define(java.lang.Object)"], ["org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction(org.sonar.api.server.debt.DebtRemediationFunction$Type, java.lang.String, java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction$Type", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.type()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.coefficient()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.gapMultiplier()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.offset()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.baseEffort()"], ["boolean", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.hashCode()"], ["java.lang.String", "org.sonar.api.server.debt.internal.DefaultDebtRemediationFunction.toString()"], ["org.sonar.api.server.debt.DebtRemediationFunction$Type[]", "org.sonar.api.server.debt.DebtRemediationFunction$Type.values()"], ["org.sonar.api.server.debt.DebtRemediationFunction$Type", "org.sonar.api.server.debt.DebtRemediationFunction$Type.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesCoefficient()"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesGapMultiplier()"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesOffset()"], ["boolean", "org.sonar.api.server.debt.DebtRemediationFunction$Type.usesBaseEffort()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.language()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.name()"], ["boolean", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.isDefault()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.rule(org.sonar.api.rule.RuleKey)"], ["boolean", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.hashCode()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfileImpl.toString()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam.key()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam.setOverriddenValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam.key()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam.overriddenValue()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.repoKey()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.ruleKey()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.overrideSeverity(java.lang.String)"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewOverriddenParam", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.overrideParam(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule.toString()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.repoKey()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.ruleKey()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.overriddenSeverity()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$OverriddenParam", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.overriddenParam(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInActiveRule.toString()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context.createBuiltInQualityProfile(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.util.Map<java.lang.String, org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfile>>", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context.profilesByLanguageAndName()"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$BuiltInQualityProfile", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$Context.profile(java.lang.String, java.lang.String)"], ["org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader", "org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader()"], ["void", "org.sonar.api.server.profile.BuiltInQualityProfileAnnotationLoader.load(org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile, java.lang.String, java.lang.Class...)"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfile", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.setDefault(boolean)"], ["org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInActiveRule", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.activateRule(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.language()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.name()"], ["boolean", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.isDefault()"], ["void", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.done()"], ["java.lang.String", "org.sonar.api.server.profile.BuiltInQualityProfilesDefinition$NewBuiltInQualityProfileImpl.toString()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.isExternal()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.key()"], ["org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.setName(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.createRule(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.rule(java.lang.String)"], ["void", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.done()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.toString()"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$NewRepositoryImpl.setName(java.lang.String)"], ["boolean", "org.sonar.api.server.rule.RuleTagFormat.isValid(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.rule.RuleTagFormat.validate(java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.linear(java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.linearWithOffset(java.lang.String, java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.constantPerIssue(java.lang.String)"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.DefaultDebtRemediationFunctions.create(org.sonar.api.server.debt.DebtRemediationFunction$Type, java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinitionXmlLoader", "org.sonar.api.server.rule.RulesDefinitionXmlLoader()"], ["void", "org.sonar.api.server.rule.RulesDefinitionXmlLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.InputStream, java.lang.String)"], ["void", "org.sonar.api.server.rule.RulesDefinitionXmlLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.InputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.server.rule.RulesDefinitionXmlLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository, java.io.Reader)"], ["org.sonar.api.server.rule.RulesDefinition$OwaspTop10[]", "org.sonar.api.server.rule.RulesDefinition$OwaspTop10.values()"], ["org.sonar.api.server.rule.RulesDefinition$OwaspTop10", "org.sonar.api.server.rule.RulesDefinition$OwaspTop10.valueOf(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$Repository", "org.sonar.api.server.rule.RulesDefinition$Rule.repository()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.pluginKey()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.key()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.name()"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.server.rule.RulesDefinition$Rule.scope()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.server.rule.RulesDefinition$Rule.type()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.severity()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.htmlDescription()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.markdownDescription()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Rule.template()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Rule.activatedByDefault()"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.server.rule.RulesDefinition$Rule.status()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.debtSubCharacteristic()"], ["org.sonar.api.server.debt.DebtRemediationFunction", "org.sonar.api.server.rule.RulesDefinition$Rule.debtRemediationFunction()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.effortToFixDescription()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.gapDescription()"], ["org.sonar.api.server.rule.RulesDefinition$Param", "org.sonar.api.server.rule.RulesDefinition$Rule.param(java.lang.String)"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.internalKey()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Rule.equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RulesDefinition$Rule.hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Rule.toString()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.key()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.name()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.description()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$Param.defaultValue()"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RulesDefinition$Param.type()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$Param.equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RulesDefinition$Param.hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRule.key()"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.server.rule.RulesDefinition$NewRule.scope()"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setScope(org.sonar.api.rule.RuleScope)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setName(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setTemplate(boolean)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setActivatedByDefault(boolean)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setSeverity(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setType(org.sonar.api.rules.RuleType)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setHtmlDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setHtmlDescription(java.net.URL)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setMarkdownDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setMarkdownDescription(java.net.URL)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setStatus(org.sonar.api.rule.RuleStatus)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setDebtSubCharacteristic(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$DebtRemediationFunctions", "org.sonar.api.server.rule.RulesDefinition$NewRule.debtRemediationFunctions()"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setDebtRemediationFunction(org.sonar.api.server.debt.DebtRemediationFunction)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setEffortToFixDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setGapDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewRule.createParam(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewRule.param(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addTags(java.lang.String...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setTags(java.lang.String...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addOwaspTop10(org.sonar.api.server.rule.RulesDefinition$OwaspTop10...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addCwe(int...)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.setInternalKey(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRule", "org.sonar.api.server.rule.RulesDefinition$NewRule.addDeprecatedRuleKey(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewRule.toString()"], ["org.sonar.api.server.rule.RulesDefinition$Context", "org.sonar.api.server.rule.RulesDefinition$Context()"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$Context.createRepository(java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$Context.createExternalRepository(java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewRepository", "org.sonar.api.server.rule.RulesDefinition$Context.extendRepository(java.lang.String, java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$Repository", "org.sonar.api.server.rule.RulesDefinition$Context.repository(java.lang.String)"], ["void", "org.sonar.api.server.rule.RulesDefinition$Context.setCurrentPluginKey(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinitionI18nLoader", "org.sonar.api.server.rule.RulesDefinitionI18nLoader(org.sonar.api.i18n.RuleI18n)"], ["void", "org.sonar.api.server.rule.RulesDefinitionI18nLoader.load(org.sonar.api.server.rule.RulesDefinition$NewRepository)"], ["java.lang.String", "org.sonar.api.server.rule.RuleParamType.type()"], ["boolean", "org.sonar.api.server.rule.RuleParamType.multiple()"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RuleParamType.singleListOfValues(java.lang.String...)"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RuleParamType.multipleListOfValues(java.lang.String...)"], ["org.sonar.api.server.rule.RuleParamType", "org.sonar.api.server.rule.RuleParamType.parse(java.lang.String)"], ["boolean", "org.sonar.api.server.rule.RuleParamType.equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RuleParamType.hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RuleParamType.toString()"], ["org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat[]", "org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat.values()"], ["org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat", "org.sonar.api.server.rule.RulesDefinitionXmlLoader$DescriptionFormat.valueOf(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinitionAnnotationLoader", "org.sonar.api.server.rule.RulesDefinitionAnnotationLoader()"], ["void", "org.sonar.api.server.rule.RulesDefinitionAnnotationLoader.load(org.sonar.api.server.rule.RulesDefinition$NewExtendedRepository, java.lang.Class...)"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.key()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.language()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.name()"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.isExternal()"], ["org.sonar.api.server.rule.RulesDefinition$Rule", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.rule(java.lang.String)"], ["boolean", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.hashCode()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$RepositoryImpl.toString()"], ["java.lang.String", "org.sonar.api.server.rule.RulesDefinition$NewParam.key()"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setName(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setType(org.sonar.api.server.rule.RuleParamType)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setDescription(java.lang.String)"], ["org.sonar.api.server.rule.RulesDefinition$NewParam", "org.sonar.api.server.rule.RulesDefinition$NewParam.setDefaultValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.platform.NewUserHandler$Context.getLogin()"], ["java.lang.String", "org.sonar.api.platform.NewUserHandler$Context.getName()"], ["java.lang.String", "org.sonar.api.platform.NewUserHandler$Context.getEmail()"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context.builder()"], ["org.sonar.api.platform.Server", "org.sonar.api.platform.Server()"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context$Builder.setLogin(java.lang.String)"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context$Builder.setName(java.lang.String)"], ["org.sonar.api.platform.NewUserHandler$Context$Builder", "org.sonar.api.platform.NewUserHandler$Context$Builder.setEmail(java.lang.String)"], ["org.sonar.api.platform.NewUserHandler$Context", "org.sonar.api.platform.NewUserHandler$Context$Builder.build()"], ["org.sonar.api.utils.Paging$Builder", "org.sonar.api.utils.Paging$Builder.withPageSize(int)"], ["org.sonar.api.utils.Paging", "org.sonar.api.utils.Paging$Builder.andTotal(int)"], ["java.lang.String", "org.sonar.api.utils.WildcardPattern.toString()"], ["boolean", "org.sonar.api.utils.WildcardPattern.match(java.lang.String)"], ["boolean", "org.sonar.api.utils.WildcardPattern.match(org.sonar.api.utils.WildcardPattern[], java.lang.String)"], ["org.sonar.api.utils.WildcardPattern", "org.sonar.api.utils.WildcardPattern.create(java.lang.String)"], ["org.sonar.api.utils.WildcardPattern[]", "org.sonar.api.utils.WildcardPattern.create(java.lang.String[])"], ["org.sonar.api.utils.WildcardPattern", "org.sonar.api.utils.WildcardPattern.create(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDate(java.util.Date)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDate(java.time.Instant)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTime(java.util.Date)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTime(long)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTime(java.time.OffsetDateTime)"], ["java.lang.String", "org.sonar.api.utils.DateUtils.formatDateTimeNullSafe(java.util.Date)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.longToDate(java.lang.Long)"], ["java.lang.Long", "org.sonar.api.utils.DateUtils.dateToLong(java.util.Date)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDate(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateQuietly(java.lang.String)"], ["java.time.LocalDate", "org.sonar.api.utils.DateUtils.parseLocalDate(java.lang.String)"], ["java.time.LocalDate", "org.sonar.api.utils.DateUtils.parseLocalDateQuietly(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateTime(java.lang.String)"], ["java.time.OffsetDateTime", "org.sonar.api.utils.DateUtils.parseOffsetDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateTimeQuietly(java.lang.String)"], ["java.time.OffsetDateTime", "org.sonar.api.utils.DateUtils.parseOffsetDateTimeQuietly(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseDateOrDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseStartingDateOrDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.parseEndingDateOrDateTime(java.lang.String)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.addDays(java.util.Date, int)"], ["java.time.Instant", "org.sonar.api.utils.DateUtils.addDays(java.time.Instant, int)"], ["java.util.Date", "org.sonar.api.utils.DateUtils.truncateToSeconds(java.util.Date)"], ["long", "org.sonar.api.utils.DateUtils.truncateToSeconds(long)"], ["org.sonar.api.utils.System2", "org.sonar.api.utils.System2()"], ["long", "org.sonar.api.utils.System2.now()"], ["java.util.Properties", "org.sonar.api.utils.System2.properties()"], ["java.lang.String", "org.sonar.api.utils.System2.property(java.lang.String)"], ["org.sonar.api.utils.System2", "org.sonar.api.utils.System2.setProperty(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.utils.System2.envVariables()"], ["java.lang.String", "org.sonar.api.utils.System2.envVariable(java.lang.String)"], ["boolean", "org.sonar.api.utils.System2.isOsWindows()"], ["boolean", "org.sonar.api.utils.System2.isJavaAtLeast17()"], ["void", "org.sonar.api.utils.System2.println(java.lang.String)"], ["java.util.TimeZone", "org.sonar.api.utils.System2.getDefaultTimeZone()"], ["java.net.URL", "org.sonar.api.utils.System2.getResource(java.lang.String)"], ["void", "org.sonar.api.utils.System2.close(java.lang.AutoCloseable)"], ["org.sonar.api.utils.command.CommandExecutor", "org.sonar.api.utils.command.CommandExecutor.create()"], ["int", "org.sonar.api.utils.command.CommandExecutor.execute(org.sonar.api.utils.command.Command, org.sonar.api.utils.command.StreamConsumer, org.sonar.api.utils.command.StreamConsumer, long)"], ["int", "org.sonar.api.utils.command.CommandExecutor.execute(org.sonar.api.utils.command.Command, long)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.create(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.command.Command.getExecutable()"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addArgument(java.lang.String)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addMaskedArgument(java.lang.String)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addArguments(java.util.List<java.lang.String>)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.addArguments(java.lang.String[])"], ["java.io.File", "org.sonar.api.utils.command.Command.getDirectory()"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.setDirectory(java.io.File)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.setEnvironmentVariable(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.utils.command.Command.getEnvironmentVariables()"], ["boolean", "org.sonar.api.utils.command.Command.isNewShell()"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.Command.setNewShell(boolean)"], ["java.lang.String", "org.sonar.api.utils.command.Command.toCommandLine()"], ["java.lang.String", "org.sonar.api.utils.command.Command.toString()"], ["org.sonar.api.utils.command.TimeoutException", "org.sonar.api.utils.command.TimeoutException(org.sonar.api.utils.command.Command, java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.command.StringStreamConsumer", "org.sonar.api.utils.command.StringStreamConsumer()"], ["void", "org.sonar.api.utils.command.StringStreamConsumer.consumeLine(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.command.StringStreamConsumer.getOutput()"], ["org.sonar.api.utils.command.CommandException", "org.sonar.api.utils.command.CommandException(org.sonar.api.utils.command.Command, java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.command.CommandException", "org.sonar.api.utils.command.CommandException(org.sonar.api.utils.command.Command, java.lang.Throwable)"], ["org.sonar.api.utils.command.Command", "org.sonar.api.utils.command.CommandException.getCommand()"], ["void", "org.sonar.api.utils.command.CommandExecutor$StreamGobbler.run()"], ["java.lang.Exception", "org.sonar.api.utils.command.CommandExecutor$StreamGobbler.getException()"], ["void", "org.sonar.api.utils.command.CommandExecutor$DefaultConsumer.consumeLine(java.lang.String)"], ["org.sonar.api.utils.internal.DefaultTempFolder", "org.sonar.api.utils.internal.DefaultTempFolder(java.io.File)"], ["org.sonar.api.utils.internal.DefaultTempFolder", "org.sonar.api.utils.internal.DefaultTempFolder(java.io.File, boolean)"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newDir()"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newDir(java.lang.String)"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newFile()"], ["java.io.File", "org.sonar.api.utils.internal.DefaultTempFolder.newFile(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.utils.internal.DefaultTempFolder.clean()"], ["void", "org.sonar.api.utils.internal.DefaultTempFolder.stop()"], ["org.sonar.api.utils.internal.JUnitTempFolder", "org.sonar.api.utils.internal.JUnitTempFolder()"], ["org.junit.runners.model.Statement", "org.sonar.api.utils.internal.JUnitTempFolder.apply(org.junit.runners.model.Statement, org.junit.runner.Description)"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newDir()"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newDir(java.lang.String)"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newFile()"], ["java.io.File", "org.sonar.api.utils.internal.JUnitTempFolder.newFile(java.lang.String, java.lang.String)"], ["org.sonar.api.utils.internal.TempFolderCleaner", "org.sonar.api.utils.internal.TempFolderCleaner(org.sonar.api.utils.TempFolder)"], ["void", "org.sonar.api.utils.internal.TempFolderCleaner.start()"], ["void", "org.sonar.api.utils.internal.TempFolderCleaner.stop()"], ["org.sonar.api.utils.internal.TestSystem2", "org.sonar.api.utils.internal.TestSystem2()"], ["org.sonar.api.utils.internal.TestSystem2", "org.sonar.api.utils.internal.TestSystem2.setNow(long)"], ["long", "org.sonar.api.utils.internal.TestSystem2.now()"], ["org.sonar.api.utils.internal.TestSystem2", "org.sonar.api.utils.internal.TestSystem2.setDefaultTimeZone(java.util.TimeZone)"], ["java.util.TimeZone", "org.sonar.api.utils.internal.TestSystem2.getDefaultTimeZone()"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.postVisitDirectory(java.nio.file.Path, java.io.IOException)"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.postVisitDirectory(java.lang.Object, java.io.IOException)"], ["java.nio.file.FileVisitResult", "org.sonar.api.utils.internal.DefaultTempFolder$DeleteRecursivelyFileVisitor.visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.create(int, int, int, int)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.createFromValueAndUnit(int, org.sonar.api.utils.internal.WorkDuration$UNIT, int)"], ["double", "org.sonar.api.utils.internal.WorkDuration.toWorkingDays()"], ["long", "org.sonar.api.utils.internal.WorkDuration.toLong()"], ["long", "org.sonar.api.utils.internal.WorkDuration.toMinutes()"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.add(org.sonar.api.utils.internal.WorkDuration)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.subtract(org.sonar.api.utils.internal.WorkDuration)"], ["org.sonar.api.utils.internal.WorkDuration", "org.sonar.api.utils.internal.WorkDuration.multiply(int)"], ["int", "org.sonar.api.utils.internal.WorkDuration.days()"], ["int", "org.sonar.api.utils.internal.WorkDuration.hours()"], ["int", "org.sonar.api.utils.internal.WorkDuration.minutes()"], ["boolean", "org.sonar.api.utils.internal.WorkDuration.equals(java.lang.Object)"], ["int", "org.sonar.api.utils.internal.WorkDuration.hashCode()"], ["java.lang.String", "org.sonar.api.utils.internal.WorkDuration.toString()"], ["org.sonar.api.utils.internal.WorkDuration$UNIT[]", "org.sonar.api.utils.internal.WorkDuration$UNIT.values()"], ["org.sonar.api.utils.internal.WorkDuration$UNIT", "org.sonar.api.utils.internal.WorkDuration$UNIT.valueOf(java.lang.String)"], ["org.sonar.api.utils.internal.AlwaysIncreasingSystem2", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2(long)"], ["org.sonar.api.utils.internal.AlwaysIncreasingSystem2", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2(long, int)"], ["org.sonar.api.utils.internal.AlwaysIncreasingSystem2", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2()"], ["long", "org.sonar.api.utils.internal.AlwaysIncreasingSystem2.now()"], ["boolean", "org.sonar.api.utils.ZipUtils$ZipEntryFilterDelegate.test(java.util.zip.ZipEntry)"], ["boolean", "org.sonar.api.utils.ZipUtils$ZipEntryFilterDelegate.test(java.lang.Object)"], ["org.sonar.api.utils.Durations", "org.sonar.api.utils.Durations()"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Durations.create(long)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Durations.decode(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.Durations.encode(org.sonar.api.utils.Duration)"], ["java.lang.String", "org.sonar.api.utils.Durations.format(java.util.Locale, org.sonar.api.utils.Duration, org.sonar.api.utils.Durations$DurationFormat)"], ["java.lang.String", "org.sonar.api.utils.Durations.format(java.util.Locale, org.sonar.api.utils.Duration)"], ["java.lang.String", "org.sonar.api.utils.Durations.format(org.sonar.api.utils.Duration)"], ["int", "org.sonar.api.utils.Version.major()"], ["int", "org.sonar.api.utils.Version.minor()"], ["int", "org.sonar.api.utils.Version.patch()"], ["long", "org.sonar.api.utils.Version.buildNumber()"], ["java.lang.String", "org.sonar.api.utils.Version.qualifier()"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.parse(java.lang.String)"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.create(int, int)"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.create(int, int, int)"], ["org.sonar.api.utils.Version", "org.sonar.api.utils.Version.create(int, int, int, java.lang.String)"], ["boolean", "org.sonar.api.utils.Version.isGreaterThanOrEqual(org.sonar.api.utils.Version)"], ["boolean", "org.sonar.api.utils.Version.equals(java.lang.Object)"], ["int", "org.sonar.api.utils.Version.hashCode()"], ["int", "org.sonar.api.utils.Version.compareTo(org.sonar.api.utils.Version)"], ["java.lang.String", "org.sonar.api.utils.Version.toString()"], ["int", "org.sonar.api.utils.Version.compareTo(java.lang.Object)"], ["org.sonar.api.utils.dag.CyclicDependenciesException", "org.sonar.api.utils.dag.CyclicDependenciesException(java.lang.String)"], ["org.sonar.api.utils.dag.DirectAcyclicGraph", "org.sonar.api.utils.dag.DirectAcyclicGraph(java.lang.Object...)"], ["org.sonar.api.utils.dag.Node", "org.sonar.api.utils.dag.DirectAcyclicGraph.add(java.lang.Object, java.lang.Object...)"], ["java.util.List", "org.sonar.api.utils.dag.DirectAcyclicGraph.sort()"], ["org.sonar.api.utils.dag.Node", "org.sonar.api.utils.dag.Node(java.lang.Object)"], ["void", "org.sonar.api.utils.dag.Node.reset()"], ["java.lang.Object", "org.sonar.api.utils.dag.Node.getObject()"], ["void", "org.sonar.api.utils.dag.Node.addDependency(org.sonar.api.utils.dag.Node)"], ["void", "org.sonar.api.utils.dag.Node.resolveOrder()"], ["int", "org.sonar.api.utils.dag.Node.compareTo(org.sonar.api.utils.dag.Node)"], ["java.lang.String", "org.sonar.api.utils.dag.Node.toString()"], ["boolean", "org.sonar.api.utils.dag.Node.equals(java.lang.Object)"], ["int", "org.sonar.api.utils.dag.Node.hashCode()"], ["int", "org.sonar.api.utils.dag.Node.compareTo(java.lang.Object)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.File, java.io.File)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.InputStream, java.io.File)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.InputStream, java.io.File, org.sonar.api.utils.ZipUtils$ZipEntryFilter)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.InputStream, java.io.File, java.util.function.Predicate<java.util.zip.ZipEntry>)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.File, java.io.File, org.sonar.api.utils.ZipUtils$ZipEntryFilter)"], ["java.io.File", "org.sonar.api.utils.ZipUtils.unzip(java.io.File, java.io.File, java.util.function.Predicate<java.util.zip.ZipEntry>)"], ["void", "org.sonar.api.utils.ZipUtils.zipDir(java.io.File, java.io.File)"], ["org.sonar.api.utils.UriReader$SchemeProcessor", "org.sonar.api.utils.UriReader$SchemeProcessor()"], ["org.sonar.api.utils.MessageException", "org.sonar.api.utils.MessageException.of(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.MessageException", "org.sonar.api.utils.MessageException.of(java.lang.String)"], ["org.sonar.api.utils.MessageException", "org.sonar.api.utils.MessageException.ofL10n(java.lang.String, java.lang.Object...)"], ["synchronized", "org.sonar.api.utils.MessageException.java.lang.Throwable fillInStackTrace()"], ["java.lang.String", "org.sonar.api.utils.MessageException.toString()"], ["java.lang.String", "org.sonar.api.utils.MessageException.l10nKey()"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException()"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException(java.lang.String)"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.SonarException", "org.sonar.api.utils.SonarException(java.lang.Throwable)"], ["org.sonar.api.utils.Paging", "org.sonar.api.utils.Paging.create(int, int, int)"], ["org.sonar.api.utils.Paging$Builder", "org.sonar.api.utils.Paging.forPageIndex(int)"], ["int", "org.sonar.api.utils.Paging.pageIndex()"], ["int", "org.sonar.api.utils.Paging.pageSize()"], ["int", "org.sonar.api.utils.Paging.total()"], ["int", "org.sonar.api.utils.Paging.offset()"], ["int", "org.sonar.api.utils.Paging.offset(int, int)"], ["int", "org.sonar.api.utils.Paging.pages()"], ["boolean", "org.sonar.api.utils.Paging.hasNextPage()"], ["org.sonar.api.utils.UriReader", "org.sonar.api.utils.UriReader(org.sonar.api.utils.UriReader$SchemeProcessor[])"], ["byte[]", "org.sonar.api.utils.UriReader.readBytes(java.net.URI)"], ["java.lang.String", "org.sonar.api.utils.UriReader.readString(java.net.URI, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.utils.UriReader.description(java.net.URI)"], ["java.lang.String", "org.sonar.api.utils.PathUtils.sanitize(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.PathUtils.canonicalPath(java.io.File)"], ["java.lang.String[]", "org.sonar.api.utils.UriReader$FileProcessor.getSupportedSchemes()"], ["org.sonar.api.utils.HttpDownloader", "org.sonar.api.utils.HttpDownloader()"], ["double", "org.sonar.api.utils.ParsingUtils.parseNumber(java.lang.String, java.util.Locale)"], ["double", "org.sonar.api.utils.ParsingUtils.parseNumber(java.lang.String)"], ["double", "org.sonar.api.utils.ParsingUtils.scaleValue(double)"], ["double", "org.sonar.api.utils.ParsingUtils.scaleValue(double, int)"], ["org.sonar.api.utils.KeyValueFormat$Converter", "org.sonar.api.utils.KeyValueFormat$Converter()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.create()"], ["boolean", "org.sonar.api.utils.ValidationMessages.hasErrors()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.addErrorText(java.lang.String)"], ["boolean", "org.sonar.api.utils.ValidationMessages.hasWarnings()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.addWarningText(java.lang.String)"], ["boolean", "org.sonar.api.utils.ValidationMessages.hasInfos()"], ["org.sonar.api.utils.ValidationMessages", "org.sonar.api.utils.ValidationMessages.addInfoText(java.lang.String)"], ["void", "org.sonar.api.utils.ValidationMessages.log(org.sonar.api.utils.log.Logger)"], ["void", "org.sonar.api.utils.ValidationMessages.log(org.slf4j.Logger)"], ["java.lang.String", "org.sonar.api.utils.ValidationMessages.toString()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.of(java.io.Writer)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.setSerializeNulls(boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.setSerializeEmptys(boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.beginArray()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.endArray()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.beginObject()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.endObject()"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.name(java.lang.String)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(double)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(java.lang.String)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.valueObject(java.lang.Object)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.values(java.lang.Iterable<java.lang.String>)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.valueDate(java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.valueDateTime(java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(long)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.value(java.lang.Number)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, java.lang.Number)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.propDate(java.lang.String, java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.propDateTime(java.lang.String, java.util.Date)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, java.lang.String)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, boolean)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, long)"], ["org.sonar.api.utils.text.JsonWriter", "org.sonar.api.utils.text.JsonWriter.prop(java.lang.String, double)"], ["void", "org.sonar.api.utils.text.JsonWriter.close()"], ["org.sonar.api.utils.text.CsvWriter", "org.sonar.api.utils.text.CsvWriter.of(java.io.Writer)"], ["org.sonar.api.utils.text.CsvWriter", "org.sonar.api.utils.text.CsvWriter.values(java.lang.String...)"], ["void", "org.sonar.api.utils.text.CsvWriter.close()"], ["org.sonar.api.utils.text.WriterException", "org.sonar.api.utils.text.WriterException(java.lang.String)"], ["org.sonar.api.utils.text.WriterException", "org.sonar.api.utils.text.WriterException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.of(java.io.Writer)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.declaration()"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.begin(java.lang.String)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.end()"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.end(java.lang.String)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, java.lang.String)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, java.lang.Number)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, boolean)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, long)"], ["org.sonar.api.utils.text.XmlWriter", "org.sonar.api.utils.text.XmlWriter.prop(java.lang.String, double)"], ["void", "org.sonar.api.utils.text.XmlWriter.close()"], ["boolean", "org.sonar.api.utils.LocalizedMessages$KeyEnumeration.hasMoreElements()"], ["java.lang.String", "org.sonar.api.utils.LocalizedMessages$KeyEnumeration.nextElement()"], ["java.lang.Object", "org.sonar.api.utils.LocalizedMessages$KeyEnumeration.nextElement()"], ["org.sonar.api.utils.HttpDownloader$HttpException", "org.sonar.api.utils.HttpDownloader$HttpException(java.net.URI, int)"], ["org.sonar.api.utils.HttpDownloader$HttpException", "org.sonar.api.utils.HttpDownloader$HttpException(java.net.URI, int, java.lang.String)"], ["int", "org.sonar.api.utils.HttpDownloader$HttpException.getResponseCode()"], ["java.net.URI", "org.sonar.api.utils.HttpDownloader$HttpException.getUri()"], ["java.lang.String", "org.sonar.api.utils.HttpDownloader$HttpException.getResponseContent()"], ["org.sonar.api.utils.LocalizedMessages", "org.sonar.api.utils.LocalizedMessages(java.util.Locale, java.lang.String...)"], ["java.util.Locale", "org.sonar.api.utils.LocalizedMessages.getLocale()"], ["java.lang.String", "org.sonar.api.utils.LocalizedMessages.format(java.lang.String, java.lang.Object...)"], ["java.lang.String", "org.sonar.api.utils.LocalizedMessages.formatQuietly(java.lang.String, java.lang.Object...)"], ["default", "org.sonar.api.utils.log.Logger.void trace(java.util.function.Supplier<java.lang.String>)"], ["default", "org.sonar.api.utils.log.Logger.void debug(java.util.function.Supplier<java.lang.String>)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler.create(org.sonar.api.utils.log.Logger)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler.createIfTrace(org.sonar.api.utils.log.Logger)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.Profiler.createIfDebug(org.sonar.api.utils.log.Logger)"], ["boolean", "org.sonar.api.utils.log.LogbackLogger.isTraceEnabled()"], ["boolean", "org.sonar.api.utils.log.LogbackLogger.isDebugEnabled()"], ["boolean", "org.sonar.api.utils.log.LogbackLogger.setLevel(org.sonar.api.utils.log.LoggerLevel)"], ["org.sonar.api.utils.log.LoggerLevel", "org.sonar.api.utils.log.LogbackLogger.getLevel()"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.trace(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.debug(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.info(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Throwable)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.warn(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.BaseLogger.error(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.utils.log.LogTester", "org.sonar.api.utils.log.LogTester()"], ["org.sonar.api.utils.log.LogTester", "org.sonar.api.utils.log.LogTester.setLevel(org.sonar.api.utils.log.LoggerLevel)"], ["org.sonar.api.utils.log.LogTester", "org.sonar.api.utils.log.LogTester.clear()"], ["org.sonar.api.utils.log.DefaultProfiler", "org.sonar.api.utils.log.DefaultProfiler(org.sonar.api.utils.log.BaseLogger)"], ["boolean", "org.sonar.api.utils.log.DefaultProfiler.isDebugEnabled()"], ["boolean", "org.sonar.api.utils.log.DefaultProfiler.isTraceEnabled()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.start()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.startTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.startDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.startInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopTrace()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopDebug()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopInfo()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopInfo(boolean)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.stopInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.DefaultProfiler.addContext(java.lang.String, java.lang.Object)"], ["org.sonar.api.utils.log.Loggers", "org.sonar.api.utils.log.Loggers()"], ["org.sonar.api.utils.log.Logger", "org.sonar.api.utils.log.Loggers.get(java.lang.Class<?>)"], ["org.sonar.api.utils.log.Logger", "org.sonar.api.utils.log.Loggers.get(java.lang.String)"], ["boolean", "org.sonar.api.utils.log.ConsoleLogger.isTraceEnabled()"], ["boolean", "org.sonar.api.utils.log.ConsoleLogger.isDebugEnabled()"], ["void", "org.sonar.api.utils.log.ConsoleLogger.doError(java.lang.String, java.lang.Throwable)"], ["boolean", "org.sonar.api.utils.log.ConsoleLogger.setLevel(org.sonar.api.utils.log.LoggerLevel)"], ["org.sonar.api.utils.log.LoggerLevel", "org.sonar.api.utils.log.ConsoleLogger.getLevel()"], ["boolean", "org.sonar.api.utils.log.NullProfiler.isDebugEnabled()"], ["boolean", "org.sonar.api.utils.log.NullProfiler.isTraceEnabled()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.start()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.startTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.startDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.startInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopTrace()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopDebug()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopInfo()"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopTrace(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopDebug(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopInfo(java.lang.String)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.addContext(java.lang.String, java.lang.Object)"], ["org.sonar.api.utils.log.Profiler", "org.sonar.api.utils.log.NullProfiler.stopInfo(boolean)"], ["java.lang.String", "org.sonar.api.utils.log.LogAndArguments.getRawMsg()"], ["java.lang.String", "org.sonar.api.utils.log.LogAndArguments.getFormattedMsg()"], ["java.lang.String", "org.sonar.api.utils.log.LogAndArguments.toString()"], ["org.sonar.api.utils.log.LoggerLevel[]", "org.sonar.api.utils.log.LoggerLevel.values()"], ["org.sonar.api.utils.log.LoggerLevel", "org.sonar.api.utils.log.LoggerLevel.valueOf(java.lang.String)"], ["org.sonar.api.utils.log.ListInterceptor", "org.sonar.api.utils.log.ListInterceptor()"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.ListInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Throwable)"], ["void", "org.sonar.api.utils.log.ListInterceptor.clear()"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.utils.log.NullInterceptor.log(org.sonar.api.utils.log.LoggerLevel, java.lang.String, java.lang.Throwable)"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.utils.AnnotationUtils.getAnnotation(java.lang.Object, java.lang.Class<A>)"], ["<A> A", "org.sonar.api.utils.AnnotationUtils.getClassAnnotation(java.lang.Object, java.lang.Class<A>)"], ["org.sonar.api.utils.Durations$DurationFormat[]", "org.sonar.api.utils.Durations$DurationFormat.values()"], ["org.sonar.api.utils.Durations$DurationFormat", "org.sonar.api.utils.Durations$DurationFormat.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.utils.TimeUtils.formatDuration(long)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.create(long)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.decode(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.utils.Duration.encode(int)"], ["long", "org.sonar.api.utils.Duration.toMinutes()"], ["boolean", "org.sonar.api.utils.Duration.isGreaterThan(org.sonar.api.utils.Duration)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.add(org.sonar.api.utils.Duration)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.subtract(org.sonar.api.utils.Duration)"], ["org.sonar.api.utils.Duration", "org.sonar.api.utils.Duration.multiply(int)"], ["boolean", "org.sonar.api.utils.Duration.equals(java.lang.Object)"], ["int", "org.sonar.api.utils.Duration.hashCode()"], ["java.lang.String", "org.sonar.api.utils.Duration.toString()"], ["org.sonar.api.utils.KeyValueFormat$StringConverter", "org.sonar.api.utils.KeyValueFormat.newStringConverter()"], ["org.sonar.api.utils.KeyValueFormat$ToStringConverter", "org.sonar.api.utils.KeyValueFormat.newToStringConverter()"], ["org.sonar.api.utils.KeyValueFormat$IntegerConverter", "org.sonar.api.utils.KeyValueFormat.newIntegerConverter()"], ["org.sonar.api.utils.KeyValueFormat$PriorityConverter", "org.sonar.api.utils.KeyValueFormat.newPriorityConverter()"], ["org.sonar.api.utils.KeyValueFormat$DoubleConverter", "org.sonar.api.utils.KeyValueFormat.newDoubleConverter()"], ["org.sonar.api.utils.KeyValueFormat$DateConverter", "org.sonar.api.utils.KeyValueFormat.newDateConverter()"], ["org.sonar.api.utils.KeyValueFormat$DateConverter", "org.sonar.api.utils.KeyValueFormat.newDateTimeConverter()"], ["org.sonar.api.utils.KeyValueFormat$DateConverter", "org.sonar.api.utils.KeyValueFormat.newDateConverter(java.lang.String)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.utils.KeyValueFormat.parse(java.lang.String, org.sonar.api.utils.KeyValueFormat$Converter<K>, org.sonar.api.utils.KeyValueFormat$Converter<V>)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.utils.KeyValueFormat.parse(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.sonar.api.utils.KeyValueFormat.parseStringInt(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.Double>", "org.sonar.api.utils.KeyValueFormat.parseStringDouble(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.lang.String>", "org.sonar.api.utils.KeyValueFormat.parseIntString(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "org.sonar.api.utils.KeyValueFormat.parseIntDouble(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.util.Date>", "org.sonar.api.utils.KeyValueFormat.parseIntDate(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.lang.Integer>", "org.sonar.api.utils.KeyValueFormat.parseIntInt(java.lang.String)"], ["java.util.Map<java.lang.Integer, java.util.Date>", "org.sonar.api.utils.KeyValueFormat.parseIntDateTime(java.lang.String)"], ["<K, V> java.lang.String", "org.sonar.api.utils.KeyValueFormat.format(java.util.Map<K, V>, org.sonar.api.utils.KeyValueFormat$Converter<K>, org.sonar.api.utils.KeyValueFormat$Converter<V>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.format(java.util.Map)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntString(java.util.Map<java.lang.Integer, java.lang.String>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntDouble(java.util.Map<java.lang.Integer, java.lang.Double>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntDate(java.util.Map<java.lang.Integer, java.util.Date>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatIntDateTime(java.util.Map<java.lang.Integer, java.util.Date>)"], ["java.lang.String", "org.sonar.api.utils.KeyValueFormat.formatStringInt(java.util.Map<java.lang.String, java.lang.Integer>)"], ["org.sonar.api.SonarQubeSide[]", "org.sonar.api.SonarQubeSide.values()"], ["org.sonar.api.SonarQubeSide", "org.sonar.api.SonarQubeSide.valueOf(java.lang.String)"], ["org.sonar.api.SonarProduct[]", "org.sonar.api.SonarProduct.values()"], ["org.sonar.api.SonarProduct", "org.sonar.api.SonarProduct.valueOf(java.lang.String)"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.CoreMetrics.getMetric(java.lang.String)"], ["org.sonar.api.measures.Metric$ValueType[]", "org.sonar.api.measures.Metric$ValueType.values()"], ["org.sonar.api.measures.Metric$ValueType", "org.sonar.api.measures.Metric$ValueType.valueOf(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.measures.Metric$ValueType.names()"], ["org.sonar.api.measures.Metric$Level[]", "org.sonar.api.measures.Metric$Level.values()"], ["org.sonar.api.measures.Metric$Level", "org.sonar.api.measures.Metric$Level.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.measures.Metric$Level.getColorName()"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder(java.lang.String, java.lang.String, org.sonar.api.measures.Metric$ValueType)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDescription(java.lang.String)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDirection(java.lang.Integer)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setQualitative(java.lang.Boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDomain(java.lang.String)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setWorstValue(java.lang.Double)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setBestValue(java.lang.Double)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setOptimizedBestValue(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setHidden(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setUserManaged(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDeleteHistoricalData(boolean)"], ["org.sonar.api.measures.Metric$Builder", "org.sonar.api.measures.Metric$Builder.setDecimalScale(int)"], ["<G extends java.io.Serializable> org.sonar.api.measures.Metric<G>", "org.sonar.api.measures.Metric$Builder.create()"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric()"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric(java.lang.String)"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric(java.lang.String, org.sonar.api.measures.Metric$ValueType)"], ["org.sonar.api.measures.Metric", "org.sonar.api.measures.Metric(java.lang.String, java.lang.String, java.lang.String, org.sonar.api.measures.Metric$ValueType, java.lang.Integer, java.lang.Boolean, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.measures.Metric.getId()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getQualitative()"], ["java.lang.String", "org.sonar.api.measures.Metric.getKey()"], ["org.sonar.api.measures.Metric$ValueType", "org.sonar.api.measures.Metric.getType()"], ["java.lang.String", "org.sonar.api.measures.Metric.getDescription()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getUserManaged()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getEnabled()"], ["java.lang.Integer", "org.sonar.api.measures.Metric.getDirection()"], ["java.lang.String", "org.sonar.api.measures.Metric.getDomain()"], ["java.lang.String", "org.sonar.api.measures.Metric.getName()"], ["java.lang.Double", "org.sonar.api.measures.Metric.getWorstValue()"], ["java.lang.Double", "org.sonar.api.measures.Metric.getBestValue()"], ["boolean", "org.sonar.api.measures.Metric.isNumericType()"], ["boolean", "org.sonar.api.measures.Metric.isDataType()"], ["boolean", "org.sonar.api.measures.Metric.isPercentageType()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.isOptimizedBestValue()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.isHidden()"], ["java.lang.Boolean", "org.sonar.api.measures.Metric.getDeleteHistoricalData()"], ["java.lang.Integer", "org.sonar.api.measures.Metric.getDecimalScale()"], ["int", "org.sonar.api.measures.Metric.hashCode()"], ["boolean", "org.sonar.api.measures.Metric.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.measures.Metric.toString()"], ["java.lang.String", "org.sonar.api.measures.Metric.key()"], ["org.sonar.api.internal.PluginContextImpl$Builder", "org.sonar.api.internal.PluginContextImpl$Builder()"], ["org.sonar.api.internal.PluginContextImpl$Builder", "org.sonar.api.internal.PluginContextImpl$Builder.setSonarRuntime(org.sonar.api.SonarRuntime)"], ["org.sonar.api.internal.PluginContextImpl$Builder", "org.sonar.api.internal.PluginContextImpl$Builder.setBootConfiguration(org.sonar.api.config.Configuration)"], ["org.sonar.api.Plugin$Context", "org.sonar.api.internal.PluginContextImpl$Builder.build()"], ["org.sonar.api.utils.Version", "org.sonar.api.internal.MetadataLoader.loadVersion(org.sonar.api.utils.System2)"], ["org.sonar.api.SonarEdition", "org.sonar.api.internal.MetadataLoader.loadEdition(org.sonar.api.utils.System2)"], ["org.sonar.api.config.Configuration", "org.sonar.api.internal.PluginContextImpl.getBootConfiguration()"], ["org.sonar.api.utils.Version", "org.sonar.api.internal.SonarRuntimeImpl.getApiVersion()"], ["org.sonar.api.SonarProduct", "org.sonar.api.internal.SonarRuntimeImpl.getProduct()"], ["org.sonar.api.SonarQubeSide", "org.sonar.api.internal.SonarRuntimeImpl.getSonarQubeSide()"], ["org.sonar.api.SonarEdition", "org.sonar.api.internal.SonarRuntimeImpl.getEdition()"], ["org.sonar.api.SonarRuntime", "org.sonar.api.internal.SonarRuntimeImpl.forSonarQube(org.sonar.api.utils.Version, org.sonar.api.SonarQubeSide, org.sonar.api.SonarEdition)"], ["org.sonar.api.SonarRuntime", "org.sonar.api.internal.SonarRuntimeImpl.forSonarLint(org.sonar.api.utils.Version)"], ["org.sonar.api.SonarQubeVersion", "org.sonar.api.SonarQubeVersion(org.sonar.api.utils.Version)"], ["org.sonar.api.utils.Version", "org.sonar.api.SonarQubeVersion.get()"], ["boolean", "org.sonar.api.SonarQubeVersion.isGreaterThanOrEqual(org.sonar.api.utils.Version)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.includeDeactivated()"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.logins(java.util.Collection<java.lang.String>)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.logins(java.lang.String...)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.searchText(java.lang.String)"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.mustBeRoot()"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery$Builder.mustNotBeRoot()"], ["org.sonar.api.user.UserQuery", "org.sonar.api.user.UserQuery$Builder.build()"], ["boolean", "org.sonar.api.user.UserQuery.includeDeactivated()"], ["java.lang.String", "org.sonar.api.user.UserQuery.searchText()"], ["java.lang.Boolean", "org.sonar.api.user.UserQuery.mustBeRoot()"], ["org.sonar.api.user.UserQuery$Builder", "org.sonar.api.user.UserQuery.builder()"], ["void", "org.sonar.api.user.UserGroupValidation.validateGroupName(java.lang.String)"], ["org.sonar.api.resources.ResourceType", "org.sonar.api.resources.ResourceTypeTree.getRootType()"], ["java.lang.String", "org.sonar.api.resources.ResourceTypeTree.toString()"], ["org.sonar.api.resources.ResourceTypeTree$Builder", "org.sonar.api.resources.ResourceTypeTree.builder()"], ["org.sonar.api.resources.ResourceTypeTree$Builder", "org.sonar.api.resources.ResourceTypeTree$Builder.addType(org.sonar.api.resources.ResourceType)"], ["org.sonar.api.resources.ResourceTypeTree$Builder", "org.sonar.api.resources.ResourceTypeTree$Builder.addRelations(java.lang.String, java.lang.String...)"], ["org.sonar.api.resources.ResourceTypeTree", "org.sonar.api.resources.ResourceTypeTree$Builder.build()"], ["org.sonar.api.resources.Languages", "org.sonar.api.resources.Languages(org.sonar.api.resources.Language...)"], ["org.sonar.api.resources.Languages", "org.sonar.api.resources.Languages()"], ["java.lang.String[]", "org.sonar.api.resources.Languages.getSuffixes(java.lang.String...)"], ["org.sonar.api.resources.Language", "org.sonar.api.resources.Languages.get(java.lang.String)"], ["void", "org.sonar.api.resources.Languages.add(org.sonar.api.resources.Language)"], ["org.sonar.api.resources.Language[]", "org.sonar.api.resources.Languages.all()"], ["org.sonar.api.resources.AbstractLanguage", "org.sonar.api.resources.AbstractLanguage(java.lang.String)"], ["org.sonar.api.resources.AbstractLanguage", "org.sonar.api.resources.AbstractLanguage(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.resources.AbstractLanguage.getKey()"], ["java.lang.String", "org.sonar.api.resources.AbstractLanguage.getName()"], ["void", "org.sonar.api.resources.AbstractLanguage.setName(java.lang.String)"], ["boolean", "org.sonar.api.resources.AbstractLanguage.equals(java.lang.Object)"], ["int", "org.sonar.api.resources.AbstractLanguage.hashCode()"], ["java.lang.String", "org.sonar.api.resources.AbstractLanguage.toString()"], ["boolean", "org.sonar.api.resources.Scopes.isHigherThan(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.resources.Scopes.isHigherThanOrEquals(java.lang.String, java.lang.String)"], ["org.sonar.api.resources.ResourceTypes", "org.sonar.api.resources.ResourceTypes(org.sonar.api.resources.ResourceTypeTree[])"], ["org.sonar.api.resources.ResourceType", "org.sonar.api.resources.ResourceTypes.get(java.lang.String)"], ["boolean", "org.sonar.api.resources.ResourceTypes.isQualifierPresent(java.lang.String)"], ["java.lang.String", "org.sonar.api.resources.ResourceType.getQualifier()"], ["java.lang.String", "org.sonar.api.resources.ResourceType.getIconPath()"], ["boolean", "org.sonar.api.resources.ResourceType.hasSourceCode()"], ["boolean", "org.sonar.api.resources.ResourceType.hasProperty(java.lang.String)"], ["java.lang.String", "org.sonar.api.resources.ResourceType.getStringProperty(java.lang.String)"], ["boolean", "org.sonar.api.resources.ResourceType.getBooleanProperty(java.lang.String)"], ["boolean", "org.sonar.api.resources.ResourceType.equals(java.lang.Object)"], ["int", "org.sonar.api.resources.ResourceType.hashCode()"], ["java.lang.String", "org.sonar.api.resources.ResourceType.toString()"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType.builder(java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder(java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.setIconPath(java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.availableForFilters()"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.hasSourceCode()"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.resources.ResourceType$Builder", "org.sonar.api.resources.ResourceType$Builder.setProperty(java.lang.String, boolean)"], ["org.sonar.api.resources.ResourceType", "org.sonar.api.resources.ResourceType$Builder.build()"], ["org.sonar.api.SonarPlugin", "org.sonar.api.SonarPlugin()"], ["java.lang.String", "org.sonar.api.SonarPlugin.toString()"], ["void", "org.sonar.api.SonarPlugin.define(org.sonar.api.Plugin$Context)"], ["org.sonar.api.web.ServletFilter", "org.sonar.api.web.ServletFilter()"], ["org.sonar.api.web.ServletFilter$UrlPattern", "org.sonar.api.web.ServletFilter.doGetPattern()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.create()"], ["org.sonar.api.web.Dashboard$Widget", "org.sonar.api.web.Dashboard.addWidget(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.web.Dashboard.getDescription()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setDescription(java.lang.String)"], ["org.sonar.api.web.DashboardLayout", "org.sonar.api.web.Dashboard.getLayout()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setLayout(org.sonar.api.web.DashboardLayout)"], ["boolean", "org.sonar.api.web.Dashboard.isGlobal()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setGlobal(boolean)"], ["boolean", "org.sonar.api.web.Dashboard.isActivated()"], ["org.sonar.api.web.Dashboard", "org.sonar.api.web.Dashboard.setActivated(boolean)"], ["org.sonar.api.web.WidgetLayoutType[]", "org.sonar.api.web.WidgetLayoutType.values()"], ["org.sonar.api.web.WidgetLayoutType", "org.sonar.api.web.WidgetLayoutType.valueOf(java.lang.String)"], ["org.sonar.api.web.PageDecoration", "org.sonar.api.web.PageDecoration()"], ["org.sonar.api.web.DashboardTemplate", "org.sonar.api.web.DashboardTemplate()"], ["org.sonar.api.web.Dashboard$Widget", "org.sonar.api.web.Dashboard$Widget.setProperty(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.web.Dashboard$Widget.getProperties()"], ["java.lang.String", "org.sonar.api.web.Dashboard$Widget.getProperty(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.Dashboard$Widget.getId()"], ["org.sonar.api.web.DashboardLayout[]", "org.sonar.api.web.DashboardLayout.values()"], ["org.sonar.api.web.DashboardLayout", "org.sonar.api.web.DashboardLayout.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.DashboardLayout.getCode()"], ["int", "org.sonar.api.web.DashboardLayout.getColumns()"], ["java.lang.String", "org.sonar.api.web.DashboardLayout.toString()"], ["org.sonar.api.web.AbstractDashboardWidget", "org.sonar.api.web.AbstractDashboardWidget()"], ["java.lang.String", "org.sonar.api.web.AbstractDashboardWidget.getId()"], ["java.lang.String", "org.sonar.api.web.AbstractDashboardWidget.getTitle()"], ["org.sonar.api.web.Section[]", "org.sonar.api.web.Section.values()"], ["org.sonar.api.web.Section", "org.sonar.api.web.Section.valueOf(java.lang.String)"], ["org.sonar.api.web.AbstractRubyTemplate", "org.sonar.api.web.AbstractRubyTemplate()"], ["java.lang.String", "org.sonar.api.web.AbstractRubyTemplate.getTemplate()"], ["org.sonar.api.web.WidgetPropertyType[]", "org.sonar.api.web.WidgetPropertyType.values()"], ["org.sonar.api.web.WidgetPropertyType", "org.sonar.api.web.WidgetPropertyType.valueOf(java.lang.String)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.includes(java.lang.String...)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.includes(java.util.Collection<java.lang.String>)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.excludes(java.lang.String...)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.excludes(java.util.Collection<java.lang.String>)"], ["org.sonar.api.web.ServletFilter$UrlPattern", "org.sonar.api.web.ServletFilter$UrlPattern$Builder.build()"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page.builder(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.page.Page.getKey()"], ["java.lang.String", "org.sonar.api.web.page.Page.getPluginKey()"], ["java.lang.String", "org.sonar.api.web.page.Page.getName()"], ["boolean", "org.sonar.api.web.page.Page.isAdmin()"], ["org.sonar.api.web.page.Page$Scope", "org.sonar.api.web.page.Page.getScope()"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setName(java.lang.String)"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setAdmin(boolean)"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setScope(org.sonar.api.web.page.Page$Scope)"], ["org.sonar.api.web.page.Page$Builder", "org.sonar.api.web.page.Page$Builder.setComponentQualifiers(org.sonar.api.web.page.Page$Qualifier...)"], ["org.sonar.api.web.page.Page", "org.sonar.api.web.page.Page$Builder.build()"], ["org.sonar.api.web.page.Page$Qualifier[]", "org.sonar.api.web.page.Page$Qualifier.values()"], ["org.sonar.api.web.page.Page$Qualifier", "org.sonar.api.web.page.Page$Qualifier.valueOf(java.lang.String)"], ["org.sonar.api.web.page.Page$Qualifier", "org.sonar.api.web.page.Page$Qualifier.fromKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.page.Page$Qualifier.getKey()"], ["org.sonar.api.web.page.Context", "org.sonar.api.web.page.Context()"], ["org.sonar.api.web.page.Context", "org.sonar.api.web.page.Context.addPage(org.sonar.api.web.page.Page)"], ["org.sonar.api.web.page.Page$Scope[]", "org.sonar.api.web.page.Page$Scope.values()"], ["org.sonar.api.web.page.Page$Scope", "org.sonar.api.web.page.Page$Scope.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.web.ServletFilter$UrlPattern.matches(java.lang.String)"], ["java.lang.String", "org.sonar.api.web.ServletFilter$UrlPattern.getUrl()"], ["java.lang.String", "org.sonar.api.web.ServletFilter$UrlPattern.label()"], ["org.sonar.api.web.ServletFilter$UrlPattern", "org.sonar.api.web.ServletFilter$UrlPattern.create(java.lang.String)"], ["org.sonar.api.web.ServletFilter$UrlPattern$Builder", "org.sonar.api.web.ServletFilter$UrlPattern.builder()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile(java.lang.String, java.lang.String)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile(java.lang.String, java.lang.String, boolean, boolean)"], ["java.lang.Integer", "org.sonar.api.profiles.RulesProfile.getId()"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.getName()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setName(java.lang.String)"], ["int", "org.sonar.api.profiles.RulesProfile.getVersion()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setVersion(int)"], ["java.lang.Boolean", "org.sonar.api.profiles.RulesProfile.getUsed()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setUsed(java.lang.Boolean)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.removeActiveRule(org.sonar.api.rules.ActiveRule)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.addActiveRule(org.sonar.api.rules.ActiveRule)"], ["void", "org.sonar.api.profiles.RulesProfile.setActiveRules(java.util.List<org.sonar.api.rules.ActiveRule>)"], ["java.lang.Boolean", "org.sonar.api.profiles.RulesProfile.getDefaultProfile()"], ["void", "org.sonar.api.profiles.RulesProfile.setDefaultProfile(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.getLanguage()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.setLanguage(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.getParentName()"], ["void", "org.sonar.api.profiles.RulesProfile.setParentName(java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.getActiveRule(java.lang.String, java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.getActiveRuleByConfigKey(java.lang.String, java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.getActiveRule(org.sonar.api.rules.Rule)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.profiles.RulesProfile.activateRule(org.sonar.api.rules.Rule, org.sonar.api.rules.RulePriority)"], ["boolean", "org.sonar.api.profiles.RulesProfile.equals(java.lang.Object)"], ["int", "org.sonar.api.profiles.RulesProfile.hashCode()"], ["java.lang.Object", "org.sonar.api.profiles.RulesProfile.clone()"], ["java.lang.String", "org.sonar.api.profiles.RulesProfile.toString()"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.create(java.lang.String, java.lang.String)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.RulesProfile.create()"], ["java.lang.String", "org.sonar.api.profiles.ProfileImporter.getKey()"], ["org.sonar.api.profiles.ProfileImporter", "org.sonar.api.profiles.ProfileImporter.setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.ProfileImporter.getName()"], ["org.sonar.api.profiles.ProfileImporter", "org.sonar.api.profiles.ProfileImporter.setName(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.profiles.ProfileImporter.getSupportedLanguages()"], ["boolean", "org.sonar.api.profiles.ProfileImporter.equals(java.lang.Object)"], ["int", "org.sonar.api.profiles.ProfileImporter.hashCode()"], ["java.lang.String", "org.sonar.api.profiles.ProfileImporter.toString()"], ["org.sonar.api.profiles.ProfileDefinition", "org.sonar.api.profiles.ProfileDefinition()"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.getKey()"], ["org.sonar.api.profiles.ProfileExporter", "org.sonar.api.profiles.ProfileExporter.setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.getName()"], ["org.sonar.api.profiles.ProfileExporter", "org.sonar.api.profiles.ProfileExporter.setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.getMimeType()"], ["org.sonar.api.profiles.ProfileExporter", "org.sonar.api.profiles.ProfileExporter.setMimeType(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.profiles.ProfileExporter.getSupportedLanguages()"], ["boolean", "org.sonar.api.profiles.ProfileExporter.equals(java.lang.Object)"], ["int", "org.sonar.api.profiles.ProfileExporter.hashCode()"], ["java.lang.String", "org.sonar.api.profiles.ProfileExporter.toString()"], ["org.sonar.api.profiles.XMLProfileParser", "org.sonar.api.profiles.XMLProfileParser(org.sonar.api.rules.RuleFinder)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.XMLProfileParser.parseResource(java.lang.ClassLoader, java.lang.String, org.sonar.api.utils.ValidationMessages)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.XMLProfileParser.parse(java.io.Reader, org.sonar.api.utils.ValidationMessages)"], ["org.sonar.api.profiles.XMLProfileSerializer", "org.sonar.api.profiles.XMLProfileSerializer()"], ["void", "org.sonar.api.profiles.XMLProfileSerializer.write(org.sonar.api.profiles.RulesProfile, java.io.Writer)"], ["org.sonar.api.profiles.AnnotationProfileParser", "org.sonar.api.profiles.AnnotationProfileParser(org.sonar.api.rules.RuleFinder)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.profiles.AnnotationProfileParser.parse(java.lang.String, java.lang.String, java.lang.String, java.util.Collection<java.lang.Class>, org.sonar.api.utils.ValidationMessages)"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User()"], ["java.lang.String", "org.sonar.api.database.model.User.getLogin()"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User.setLogin(java.lang.String)"], ["java.lang.String", "org.sonar.api.database.model.User.getName()"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User.setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.database.model.User.getEmail()"], ["org.sonar.api.database.model.User", "org.sonar.api.database.model.User.setEmail(java.lang.String)"], ["boolean", "org.sonar.api.database.model.User.equals(java.lang.Object)"], ["int", "org.sonar.api.database.model.User.hashCode()"], ["java.lang.String", "org.sonar.api.database.model.User.toString()"], ["org.sonar.api.database.BaseIdentifiable", "org.sonar.api.database.BaseIdentifiable()"], ["java.lang.Integer", "org.sonar.api.database.BaseIdentifiable.getId()"], ["G", "org.sonar.api.database.BaseIdentifiable.setId(java.lang.Integer)"], ["org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator[]", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.values()"], ["org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.compare(java.lang.Number, java.lang.Number)"], ["int", "org.sonar.api.ce.measure.RangeDistributionBuilder$NumberComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.ce.measure.Component$Type[]", "org.sonar.api.ce.measure.Component$Type.values()"], ["org.sonar.api.ce.measure.Component$Type", "org.sonar.api.ce.measure.Component$Type.valueOf(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestComponent", "org.sonar.api.ce.measure.test.TestComponent(java.lang.String, org.sonar.api.ce.measure.Component$Type, org.sonar.api.ce.measure.Component$FileAttributes)"], ["org.sonar.api.ce.measure.Component$Type", "org.sonar.api.ce.measure.test.TestComponent.getType()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent.getKey()"], ["org.sonar.api.ce.measure.Component$FileAttributes", "org.sonar.api.ce.measure.test.TestComponent.getFileAttributes()"], ["boolean", "org.sonar.api.ce.measure.test.TestComponent.equals(java.lang.Object)"], ["int", "org.sonar.api.ce.measure.test.TestComponent.hashCode()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent.toString()"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder()"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setKey(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setResolution(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setSeverity(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setStatus(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setRuleKey(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setEffort(org.sonar.api.utils.Duration)"], ["org.sonar.api.ce.measure.test.TestIssue$Builder", "org.sonar.api.ce.measure.test.TestIssue$Builder.setType(org.sonar.api.rules.RuleType)"], ["org.sonar.api.ce.measure.Issue", "org.sonar.api.ce.measure.test.TestIssue$Builder.build()"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure()"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(double)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(int)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(long)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestMeasure", "org.sonar.api.ce.measure.test.TestMeasure.createMeasure(boolean)"], ["int", "org.sonar.api.ce.measure.test.TestMeasure.getIntValue()"], ["long", "org.sonar.api.ce.measure.test.TestMeasure.getLongValue()"], ["double", "org.sonar.api.ce.measure.test.TestMeasure.getDoubleValue()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestMeasure.getStringValue()"], ["boolean", "org.sonar.api.ce.measure.test.TestMeasure.getBooleanValue()"], ["org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl(java.lang.String, boolean)"], ["boolean", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl.isUnitTest()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl.getLanguageKey()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestComponent$FileAttributesImpl.toString()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.key()"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.ce.measure.test.TestIssue.ruleKey()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.status()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.resolution()"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestIssue.severity()"], ["org.sonar.api.utils.Duration", "org.sonar.api.ce.measure.test.TestIssue.effort()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.ce.measure.test.TestIssue.type()"], ["org.sonar.api.ce.measure.test.TestMeasureComputerContext", "org.sonar.api.ce.measure.test.TestMeasureComputerContext(org.sonar.api.ce.measure.Component, org.sonar.api.ce.measure.Settings, org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition)"], ["org.sonar.api.ce.measure.Component", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getComponent()"], ["org.sonar.api.ce.measure.Settings", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getSettings()"], ["org.sonar.api.ce.measure.Measure", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.getMeasure(java.lang.String)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, int)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, int)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.Integer...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, double)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, double)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.Double...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, long)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, long)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.Long...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addMeasure(java.lang.String, boolean)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, boolean)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addInputMeasure(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.addChildrenMeasures(java.lang.String, java.lang.String...)"], ["void", "org.sonar.api.ce.measure.test.TestMeasureComputerContext.setIssues(java.util.List<org.sonar.api.ce.measure.Issue>)"], ["org.sonar.api.ce.measure.test.TestSettings", "org.sonar.api.ce.measure.test.TestSettings()"], ["org.sonar.api.ce.measure.Settings", "org.sonar.api.ce.measure.test.TestSettings.setValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.measure.test.TestSettings.getString(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.ce.measure.test.TestSettings.getStringArray(java.lang.String)"], ["org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl()"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl.setInputMetrics(java.lang.String...)"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl.setOutputMetrics(java.lang.String...)"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinition$MeasureComputerDefinitionBuilderImpl.build()"], ["org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext()"], ["org.sonar.api.ce.measure.MeasureComputer$MeasureComputerDefinition$Builder", "org.sonar.api.ce.measure.test.TestMeasureComputerDefinitionContext.newDefinitionBuilder()"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder()"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder(java.lang.Number[])"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder.add(java.lang.Number)"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder.add(java.lang.Number, int)"], ["org.sonar.api.ce.measure.RangeDistributionBuilder", "org.sonar.api.ce.measure.RangeDistributionBuilder.add(java.lang.String)"], ["boolean", "org.sonar.api.ce.measure.RangeDistributionBuilder.isEmpty()"], ["java.lang.String", "org.sonar.api.ce.measure.RangeDistributionBuilder.build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.of(org.sonar.api.ce.posttask.PostProjectAnalysisTask)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newOrganizationBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newCeTaskBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newProjectBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newBranchBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newQualityGateBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newConditionBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.newScannerContextBuilder()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withOrganization(org.sonar.api.ce.posttask.Organization)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withCeTask(org.sonar.api.ce.posttask.CeTask)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withProject(org.sonar.api.ce.posttask.Project)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withScannerContext(org.sonar.api.ce.posttask.ScannerContext)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.at(java.util.Date)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withQualityGate(org.sonar.api.ce.posttask.QualityGate)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withBranch(org.sonar.api.ce.posttask.Branch)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.withAnalysisUuid(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTask$ProjectAnalysis", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester.execute()"], ["org.sonar.api.ce.posttask.QualityGate$Status[]", "org.sonar.api.ce.posttask.QualityGate$Status.values()"], ["org.sonar.api.ce.posttask.QualityGate$Status", "org.sonar.api.ce.posttask.QualityGate$Status.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder$1.getId()"], ["org.sonar.api.ce.posttask.CeTask$Status", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder$1.getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder$1.toString()"], ["boolean", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder$1.isMain()"], ["org.sonar.api.ce.posttask.Branch$Type", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder$1.getType()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder.setId(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder.setStatus(org.sonar.api.ce.posttask.CeTask$Status)"], ["org.sonar.api.ce.posttask.CeTask", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$CeTaskBuilder.build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.setAnalysisUuid(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.setDate(java.util.Date)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.setRevision(java.lang.String)"], ["org.sonar.api.ce.posttask.Analysis", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder.build()"], ["org.sonar.api.ce.posttask.CeTask", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getCeTask()"], ["org.sonar.api.ce.posttask.Project", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getProject()"], ["org.sonar.api.ce.posttask.QualityGate", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getQualityGate()"], ["java.util.Date", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getDate()"], ["org.sonar.api.ce.posttask.ScannerContext", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getScannerContext()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.getScmRevisionId()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder$1.toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setOrganization(org.sonar.api.ce.posttask.Organization)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setCeTask(org.sonar.api.ce.posttask.CeTask)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setProject(org.sonar.api.ce.posttask.Project)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setBranch(org.sonar.api.ce.posttask.Branch)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setQualityGate(org.sonar.api.ce.posttask.QualityGate)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setAnalysis(org.sonar.api.ce.posttask.Analysis)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setScannerContext(org.sonar.api.ce.posttask.ScannerContext)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.setDate(java.util.Date)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTask$ProjectAnalysis", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectAnalysisBuilder.build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.setUuid(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.setKey(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.setName(java.lang.String)"], ["org.sonar.api.ce.posttask.Project", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder.build()"], ["org.sonar.api.ce.posttask.CeTask$Status[]", "org.sonar.api.ce.posttask.CeTask$Status.values()"], ["org.sonar.api.ce.posttask.CeTask$Status", "org.sonar.api.ce.posttask.CeTask$Status.valueOf(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.setId(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.setName(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.setStatus(org.sonar.api.ce.posttask.QualityGate$Status)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.add(org.sonar.api.ce.posttask.QualityGate$Condition)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.clearConditions()"], ["org.sonar.api.ce.posttask.QualityGate", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder.build()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder$1.getAnalysisUuid()"], ["java.util.Date", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$AnalysisBuilder$1.getDate()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getId()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getName()"], ["org.sonar.api.ce.posttask.QualityGate$Status", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$QualityGateBuilder$1.toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder.addProperties(java.util.Map<java.lang.String, java.lang.String>)"], ["org.sonar.api.ce.posttask.ScannerContext", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ScannerContextBuilder.build()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setMetricKey(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setOperator(org.sonar.api.ce.posttask.QualityGate$Operator)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setErrorThreshold(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setWarningThreshold(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.setOnLeakPeriod(boolean)"], ["org.sonar.api.ce.posttask.QualityGate$Condition", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.buildNoValue()"], ["org.sonar.api.ce.posttask.QualityGate$Condition", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder.build(org.sonar.api.ce.posttask.QualityGate$EvaluationStatus, java.lang.String)"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getMetricKey()"], ["org.sonar.api.ce.posttask.QualityGate$Operator", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getOperator()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getErrorThreshold()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getWarningThreshold()"], ["boolean", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.isOnLeakPeriod()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.getValue()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$2.toString()"], ["org.sonar.api.ce.posttask.Branch$Type[]", "org.sonar.api.ce.posttask.Branch$Type.values()"], ["org.sonar.api.ce.posttask.Branch$Type", "org.sonar.api.ce.posttask.Branch$Type.valueOf(java.lang.String)"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus[]", "org.sonar.api.ce.posttask.QualityGate$EvaluationStatus.values()"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus", "org.sonar.api.ce.posttask.QualityGate$EvaluationStatus.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.getUuid()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.getKey()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.getName()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ProjectBuilder$1.toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.setName(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.setType(org.sonar.api.ce.posttask.Branch$Type)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.setIsMain(boolean)"], ["org.sonar.api.ce.posttask.Branch", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$BranchBuilder.build()"], ["org.sonar.api.ce.posttask.QualityGate$Operator[]", "org.sonar.api.ce.posttask.QualityGate$Operator.values()"], ["org.sonar.api.ce.posttask.QualityGate$Operator", "org.sonar.api.ce.posttask.QualityGate$Operator.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder$1.getName()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder$1.getKey()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder$1.toString()"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder.setName(java.lang.String)"], ["org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder.setKey(java.lang.String)"], ["org.sonar.api.ce.posttask.Organization", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$OrganizationBuilder.build()"], ["org.sonar.api.ce.posttask.QualityGate$EvaluationStatus", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getStatus()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getMetricKey()"], ["org.sonar.api.ce.posttask.QualityGate$Operator", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getOperator()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getErrorThreshold()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getWarningThreshold()"], ["boolean", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.isOnLeakPeriod()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.getValue()"], ["java.lang.String", "org.sonar.api.ce.posttask.PostProjectAnalysisTaskTester$ConditionBuilder$1.toString()"], ["java.lang.String", "org.sonar.api.task.TaskDefinition.description()"], ["java.lang.String", "org.sonar.api.task.TaskDefinition.key()"], ["java.lang.Class<? extends org.sonar.api.task.Task>", "org.sonar.api.task.TaskDefinition.taskClass()"], ["java.lang.String", "org.sonar.api.task.TaskDefinition.toString()"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition.builder()"], ["boolean", "org.sonar.api.task.TaskDefinition.equals(java.lang.Object)"], ["int", "org.sonar.api.task.TaskDefinition.hashCode()"], ["int", "org.sonar.api.task.TaskDefinition.compareTo(org.sonar.api.task.TaskDefinition)"], ["int", "org.sonar.api.task.TaskDefinition.compareTo(java.lang.Object)"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition$Builder.key(java.lang.String)"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition$Builder.description(java.lang.String)"], ["org.sonar.api.task.TaskDefinition$Builder", "org.sonar.api.task.TaskDefinition$Builder.taskClass(java.lang.Class<? extends org.sonar.api.task.Task>)"], ["org.sonar.api.task.TaskDefinition", "org.sonar.api.task.TaskDefinition$Builder.build()"], ["org.sonar.api.issue.NoSonarFilter", "org.sonar.api.issue.NoSonarFilter()"], ["org.sonar.api.issue.NoSonarFilter", "org.sonar.api.issue.NoSonarFilter.noSonarInFile(org.sonar.api.batch.fs.InputFile, java.util.Set<java.lang.Integer>)"], ["org.sonar.api.batch.fs.internal.DefaultTextPointer", "org.sonar.api.batch.fs.internal.DefaultTextPointer(int, int)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.line()"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.lineOffset()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultTextPointer.toString()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultTextPointer.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.hashCode()"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.compareTo(org.sonar.api.batch.fs.TextPointer)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextPointer.compareTo(java.lang.Object)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.fs.internal.DefaultFileSystem$MapCache.inputFile(java.lang.String)"], ["org.sonar.api.batch.fs.internal.FilenamePredicate", "org.sonar.api.batch.fs.internal.FilenamePredicate(java.lang.String)"], ["boolean", "org.sonar.api.batch.fs.internal.FilenamePredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["boolean", "org.sonar.api.batch.fs.internal.LanguagePredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["boolean", "org.sonar.api.batch.fs.internal.FalsePredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultTextRange", "org.sonar.api.batch.fs.internal.DefaultTextRange(org.sonar.api.batch.fs.TextPointer, org.sonar.api.batch.fs.TextPointer)"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultTextRange.start()"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultTextRange.end()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultTextRange.overlap(org.sonar.api.batch.fs.TextRange)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultTextRange.toString()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultTextRange.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultTextRange.hashCode()"], ["boolean", "org.sonar.api.batch.fs.internal.PathPatternPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.FileExtensionPredicate", "org.sonar.api.batch.fs.internal.FileExtensionPredicate(java.lang.String)"], ["boolean", "org.sonar.api.batch.fs.internal.FileExtensionPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.FileExtensionPredicate.getExtension(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultInputDir", "org.sonar.api.batch.fs.internal.DefaultInputDir(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.relativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.absolutePath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultInputDir.file()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultInputDir.path()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.moduleKey()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.key()"], ["org.sonar.api.batch.fs.internal.DefaultInputDir", "org.sonar.api.batch.fs.internal.DefaultInputDir.setModuleBaseDir(java.nio.file.Path)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputDir.isFile()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputDir.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputDir.hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputDir.toString()"], ["java.net.URI", "org.sonar.api.batch.fs.internal.DefaultInputDir.uri()"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$RelativePathPattern.match(java.nio.file.Path, java.nio.file.Path)"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$RelativePathPattern.match(java.nio.file.Path, java.nio.file.Path, boolean)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.PathPattern$RelativePathPattern.toString()"], ["boolean", "org.sonar.api.batch.fs.internal.TypePredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultInputComponent", "org.sonar.api.batch.fs.internal.DefaultInputComponent(int)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputComponent.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputComponent.scannerId()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputComponent.hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputComponent.toString()"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputComponent.setHasMeasureFor(org.sonar.api.batch.measure.Metric)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputComponent.hasMeasureFor(org.sonar.api.batch.measure.Metric)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.RelativePathPredicate.path()"], ["boolean", "org.sonar.api.batch.fs.internal.RelativePathPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["int", "org.sonar.api.batch.fs.internal.RelativePathPredicate.priority()"], ["org.sonar.api.batch.fs.internal.AbstractFilePredicate", "org.sonar.api.batch.fs.internal.AbstractFilePredicate()"], ["int", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.priority()"], ["int", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.compareTo(org.sonar.api.batch.fs.internal.OptimizedFilePredicate)"], ["int", "org.sonar.api.batch.fs.internal.AbstractFilePredicate.compareTo(java.lang.Object)"], ["boolean", "org.sonar.api.batch.fs.internal.OptimizedFilePredicateAdapter.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.OptimizedFilePredicate", "org.sonar.api.batch.fs.internal.OptimizedFilePredicateAdapter.create(org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.internal.SensorStrategy", "org.sonar.api.batch.fs.internal.SensorStrategy()"], ["boolean", "org.sonar.api.batch.fs.internal.SensorStrategy.isGlobal()"], ["void", "org.sonar.api.batch.fs.internal.SensorStrategy.setGlobal(boolean)"], ["org.sonar.api.batch.fs.internal.DefaultFilePredicates", "org.sonar.api.batch.fs.internal.DefaultFilePredicates(java.nio.file.Path)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.all()"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.none()"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasAbsolutePath(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasRelativePath(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasFilename(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasExtension(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasURI(java.net.URI)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.matchesPathPattern(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.matchesPathPatterns(java.lang.String[])"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.doesNotMatchPathPattern(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.doesNotMatchPathPatterns(java.lang.String[])"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasPath(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.is(java.io.File)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasLanguage(java.lang.String)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasLanguages(java.util.Collection<java.lang.String>)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasLanguages(java.lang.String...)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.not(org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.or(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.or(org.sonar.api.batch.fs.FilePredicate...)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.or(org.sonar.api.batch.fs.FilePredicate, org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.and(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.and(org.sonar.api.batch.fs.FilePredicate...)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.and(org.sonar.api.batch.fs.FilePredicate, org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasStatus(org.sonar.api.batch.fs.InputFile$Status)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.DefaultFilePredicates.hasAnyStatus()"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$AbsolutePathPattern.match(java.nio.file.Path, java.nio.file.Path)"], ["boolean", "org.sonar.api.batch.fs.internal.PathPattern$AbsolutePathPattern.match(java.nio.file.Path, java.nio.file.Path, boolean)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.PathPattern$AbsolutePathPattern.toString()"], ["boolean", "org.sonar.api.batch.fs.internal.TruePredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.DefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.DefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition, int)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile(org.sonar.api.batch.fs.internal.DefaultIndexedFile, java.util.function.Consumer<org.sonar.api.batch.fs.internal.DefaultInputFile>)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile(org.sonar.api.batch.fs.internal.DefaultIndexedFile, java.util.function.Consumer<org.sonar.api.batch.fs.internal.DefaultInputFile>, java.lang.String)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.checkMetadata()"], ["java.io.InputStream", "org.sonar.api.batch.fs.internal.DefaultInputFile.inputStream()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.contents()"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setPublished(boolean)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isPublished()"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setExcludedForCoverage(boolean)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isExcludedForCoverage()"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setExcludedForDuplication(boolean)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isExcludedForDuplication()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.relativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.getModuleRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.getProjectRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.absolutePath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultInputFile.file()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultInputFile.path()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.language()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.fs.internal.DefaultInputFile.type()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.key()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.toString()"], ["org.sonar.api.batch.fs.InputFile$Status", "org.sonar.api.batch.fs.internal.DefaultInputFile.status()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.lines()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isEmpty()"], ["java.nio.charset.Charset", "org.sonar.api.batch.fs.internal.DefaultInputFile.charset()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.lastValidOffset()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.hash()"], ["int", "org.sonar.api.batch.fs.internal.DefaultInputFile.nonBlankLines()"], ["int[]", "org.sonar.api.batch.fs.internal.DefaultInputFile.originalLineStartOffsets()"], ["int[]", "org.sonar.api.batch.fs.internal.DefaultInputFile.originalLineEndOffsets()"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultInputFile.newPointer(int, int)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.newRange(org.sonar.api.batch.fs.TextPointer, org.sonar.api.batch.fs.TextPointer)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.newRange(int, int, int, int)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.selectLine(int)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.validate(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.fs.internal.DefaultInputFile.newRange(int, int)"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.fs.internal.DefaultInputFile.newPointer(int)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setStatus(org.sonar.api.batch.fs.InputFile$Status)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setCharset(java.nio.charset.Charset)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.DefaultInputFile.setMetadata(org.sonar.api.batch.fs.internal.Metadata)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.equals(java.lang.Object)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isFile()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultInputFile.filename()"], ["java.net.URI", "org.sonar.api.batch.fs.internal.DefaultInputFile.uri()"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.noSonarAt(java.util.Set<java.lang.Integer>)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.hasNoSonarAt(int)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isIgnoreAllIssues()"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.setIgnoreAllIssues(boolean)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.addIgnoreIssuesOnLineRanges(java.util.Collection<int[]>)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultInputFile.isIgnoreAllIssuesOnLine(java.lang.Integer)"], ["void", "org.sonar.api.batch.fs.internal.DefaultInputFile.setExecutableLines(java.util.Set<java.lang.Integer>)"], ["org.sonar.api.batch.fs.internal.AbstractProjectOrModule", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule(org.sonar.api.batch.bootstrap.ProjectDefinition, int)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.key()"], ["boolean", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.isFile()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.definition()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getBaseDir()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getWorkDir()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getKeyWithBranch()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getBranch()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.properties()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getOriginalName()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getName()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getDescription()"], ["java.nio.charset.Charset", "org.sonar.api.batch.fs.internal.AbstractProjectOrModule.getEncoding()"], ["boolean", "org.sonar.api.batch.fs.internal.StatusPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.DefaultIndexedFile", "org.sonar.api.batch.fs.internal.DefaultIndexedFile(java.lang.String, java.nio.file.Path, java.lang.String, java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultIndexedFile", "org.sonar.api.batch.fs.internal.DefaultIndexedFile(java.nio.file.Path, java.lang.String, java.lang.String, java.lang.String, org.sonar.api.batch.fs.InputFile$Type, java.lang.String, int, org.sonar.api.batch.fs.internal.SensorStrategy)"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.relativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.getModuleRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.getProjectRelativePath()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.absolutePath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.file()"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.path()"], ["java.io.InputStream", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.inputStream()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.language()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.type()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.key()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.hashCode()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.toString()"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.isFile()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.filename()"], ["java.net.URI", "org.sonar.api.batch.fs.internal.DefaultIndexedFile.uri()"], ["org.sonar.api.batch.fs.internal.FileMetadata", "org.sonar.api.batch.fs.internal.FileMetadata()"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.FileMetadata.readMetadata(java.io.InputStream, java.nio.charset.Charset, java.lang.String, org.sonar.api.batch.fs.internal.charhandler.CharHandler)"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.FileMetadata.readMetadata(java.io.InputStream, java.nio.charset.Charset, java.lang.String)"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.FileMetadata.readMetadata(java.io.Reader)"], ["void", "org.sonar.api.batch.fs.internal.FileMetadata.readFile(java.io.InputStream, java.nio.charset.Charset, java.lang.String, org.sonar.api.batch.fs.internal.charhandler.CharHandler[])"], ["void", "org.sonar.api.batch.fs.internal.FileMetadata.computeLineHashesForIssueTracking(org.sonar.api.batch.fs.InputFile, org.sonar.api.batch.fs.internal.FileMetadata$LineHashConsumer)"], ["org.sonar.api.batch.fs.internal.Metadata", "org.sonar.api.batch.fs.internal.Metadata(int, int, java.lang.String, int[], int[], int)"], ["int", "org.sonar.api.batch.fs.internal.Metadata.lines()"], ["int", "org.sonar.api.batch.fs.internal.Metadata.nonBlankLines()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.Metadata.hash()"], ["int[]", "org.sonar.api.batch.fs.internal.Metadata.originalLineStartOffsets()"], ["int[]", "org.sonar.api.batch.fs.internal.Metadata.originalLineEndOffsets()"], ["int", "org.sonar.api.batch.fs.internal.Metadata.lastValidOffset()"], ["boolean", "org.sonar.api.batch.fs.internal.Metadata.isEmpty()"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.io.File, java.io.File)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder(java.lang.String, java.lang.String, int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.create(java.lang.String, java.io.File, java.io.File)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.create(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.nextBatchId()"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setProjectBaseDir(java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setModuleBaseDir(java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setLanguage(java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setStatus(org.sonar.api.batch.fs.InputFile$Status)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setLines(int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setCharset(java.nio.charset.Charset)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setHash(java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setContents(java.lang.String)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setNonBlankLines(int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setLastValidOffset(int)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setOriginalLineStartOffsets(int[])"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setOriginalLineEndOffsets(int[])"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setPublish(boolean)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.setMetadata(org.sonar.api.batch.fs.internal.Metadata)"], ["org.sonar.api.batch.fs.internal.TestInputFileBuilder", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.initMetadata(java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.build()"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputModule(java.lang.String, java.io.File)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputModule(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputModule", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputModule(org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputProject(java.lang.String, java.io.File)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputProject(java.lang.String, java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.DefaultInputDir", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputDir(org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultInputFile", "org.sonar.api.batch.fs.internal.TestInputFileBuilder.newDefaultInputFile(java.nio.file.Path, org.sonar.api.batch.fs.internal.AbstractProjectOrModule, java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.DefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.fs.internal.DefaultInputProject", "org.sonar.api.batch.fs.internal.DefaultInputProject(org.sonar.api.batch.bootstrap.ProjectDefinition, int)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem(java.nio.file.Path)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem(java.io.File)"], ["java.nio.file.Path", "org.sonar.api.batch.fs.internal.DefaultFileSystem.baseDirPath()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultFileSystem.baseDir()"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem.setEncoding(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.sonar.api.batch.fs.internal.DefaultFileSystem.encoding()"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem.setWorkDir(java.nio.file.Path)"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultFileSystem.workDir()"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.fs.internal.DefaultFileSystem.inputFile(org.sonar.api.batch.fs.FilePredicate)"], ["boolean", "org.sonar.api.batch.fs.internal.DefaultFileSystem.hasFiles(org.sonar.api.batch.fs.FilePredicate)"], ["org.sonar.api.batch.fs.InputDir", "org.sonar.api.batch.fs.internal.DefaultFileSystem.inputDir(java.io.File)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.fs.internal.DefaultFileSystem.add(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.FilePredicates", "org.sonar.api.batch.fs.internal.DefaultFileSystem.predicates()"], ["java.io.File", "org.sonar.api.batch.fs.internal.DefaultFileSystem.resolvePath(java.lang.String)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem$Cache", "org.sonar.api.batch.fs.internal.DefaultFileSystem$Cache()"], ["boolean", "org.sonar.api.batch.fs.internal.NotPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.OrPredicate.create(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["boolean", "org.sonar.api.batch.fs.internal.OrPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.internal.charhandler.LineHashComputer", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer(org.sonar.api.batch.fs.internal.FileMetadata$LineHashConsumer, java.io.File)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer.handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer.newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineHashComputer.eof()"], ["org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.handleAll(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.eof()"], ["int[]", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.getOriginalLineStartOffsets()"], ["int[]", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.getOriginalLineEndOffsets()"], ["int", "org.sonar.api.batch.fs.internal.charhandler.LineOffsetCounter.getLastValidOffset()"], ["org.sonar.api.batch.fs.internal.charhandler.FileHashComputer", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer(java.lang.String)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.eof()"], ["java.lang.String", "org.sonar.api.batch.fs.internal.charhandler.FileHashComputer.getHash()"], ["org.sonar.api.batch.fs.internal.charhandler.LineCounter", "org.sonar.api.batch.fs.internal.charhandler.LineCounter(java.lang.String, java.nio.charset.Charset)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.handleAll(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.eof()"], ["int", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.lines()"], ["int", "org.sonar.api.batch.fs.internal.charhandler.LineCounter.nonBlankLines()"], ["org.sonar.api.batch.fs.internal.charhandler.IntArrayList", "org.sonar.api.batch.fs.internal.charhandler.IntArrayList()"], ["int[]", "org.sonar.api.batch.fs.internal.charhandler.IntArrayList.trimAndGet()"], ["boolean", "org.sonar.api.batch.fs.internal.charhandler.IntArrayList.add(int)"], ["org.sonar.api.batch.fs.internal.charhandler.CharHandler", "org.sonar.api.batch.fs.internal.charhandler.CharHandler()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.handleAll(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.handleIgnoreEoL(char)"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.newLine()"], ["void", "org.sonar.api.batch.fs.internal.charhandler.CharHandler.eof()"], ["boolean", "org.sonar.api.batch.fs.internal.URIPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["int", "org.sonar.api.batch.fs.internal.URIPredicate.priority()"], ["boolean", "org.sonar.api.batch.fs.internal.AbsolutePathPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["int", "org.sonar.api.batch.fs.internal.AbsolutePathPredicate.priority()"], ["org.sonar.api.batch.fs.internal.PathPattern", "org.sonar.api.batch.fs.internal.PathPattern.create(java.lang.String)"], ["org.sonar.api.batch.fs.internal.PathPattern[]", "org.sonar.api.batch.fs.internal.PathPattern.create(java.lang.String[])"], ["org.sonar.api.batch.fs.FilePredicate", "org.sonar.api.batch.fs.internal.AndPredicate.create(java.util.Collection<org.sonar.api.batch.fs.FilePredicate>)"], ["boolean", "org.sonar.api.batch.fs.internal.AndPredicate.apply(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile$Type[]", "org.sonar.api.batch.fs.InputFile$Type.values()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.fs.InputFile$Type.valueOf(java.lang.String)"], ["org.sonar.api.batch.fs.InputFile$Status[]", "org.sonar.api.batch.fs.InputFile$Status.values()"], ["org.sonar.api.batch.fs.InputFile$Status", "org.sonar.api.batch.fs.InputFile$Status.valueOf(java.lang.String)"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine(java.util.Date, java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.scm.BlameLine.revision()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine.revision(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.scm.BlameLine.author()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine.author(java.lang.String)"], ["java.util.Date", "org.sonar.api.batch.scm.BlameLine.date()"], ["org.sonar.api.batch.scm.BlameLine", "org.sonar.api.batch.scm.BlameLine.date(java.util.Date)"], ["boolean", "org.sonar.api.batch.scm.BlameLine.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.scm.BlameLine.hashCode()"], ["java.lang.String", "org.sonar.api.batch.scm.BlameLine.toString()"], ["org.sonar.api.batch.scm.ScmProvider", "org.sonar.api.batch.scm.ScmProvider()"], ["boolean", "org.sonar.api.batch.scm.ScmProvider.supports(java.io.File)"], ["org.sonar.api.batch.scm.BlameCommand", "org.sonar.api.batch.scm.ScmProvider.blameCommand()"], ["java.util.Map<java.nio.file.Path, java.util.Set<java.lang.Integer>>", "org.sonar.api.batch.scm.ScmProvider.branchChangedLines(java.lang.String, java.nio.file.Path, java.util.Set<java.nio.file.Path>)"], ["java.nio.file.Path", "org.sonar.api.batch.scm.ScmProvider.relativePathFromScmRoot(java.nio.file.Path)"], ["org.sonar.api.batch.scm.IgnoreCommand", "org.sonar.api.batch.scm.ScmProvider.ignoreCommand()"], ["java.lang.String", "org.sonar.api.batch.scm.ScmProvider.revisionId(java.nio.file.Path)"], ["org.sonar.api.batch.scm.BlameCommand", "org.sonar.api.batch.scm.BlameCommand()"], ["org.sonar.api.batch.bootstrap.ProjectReactor", "org.sonar.api.batch.bootstrap.ProjectReactor(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectReactor.getRoot()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectReactor.getProject(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectReactor.get()"], ["org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext", "org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext(org.sonar.api.batch.bootstrap.ProjectReactor)"], ["org.sonar.api.batch.bootstrap.ProjectReactor", "org.sonar.api.batch.bootstrap.internal.ProjectBuilderContext.projectReactor()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.create()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setBaseDir(java.io.File)"], ["java.io.File", "org.sonar.api.batch.bootstrap.ProjectDefinition.getBaseDir()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setWorkDir(java.io.File)"], ["java.io.File", "org.sonar.api.batch.bootstrap.ProjectDefinition.getWorkDir()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setBuildDir(java.io.File)"], ["java.io.File", "org.sonar.api.batch.bootstrap.ProjectDefinition.getBuildDir()"], ["java.util.Properties", "org.sonar.api.batch.bootstrap.ProjectDefinition.getProperties()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.bootstrap.ProjectDefinition.properties()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProperties(java.util.Properties)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProperties(java.util.Map<java.lang.String, java.lang.String>)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setKey(java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setProjectVersion(java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setName(java.lang.String)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setDescription(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getKey()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getKeyWithBranch()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getBranch()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getOriginalVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getOriginalProjectVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getProjectVersion()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getOriginalName()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getName()"], ["java.lang.String", "org.sonar.api.batch.bootstrap.ProjectDefinition.getDescription()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addSources(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addSources(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.resetSources()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setSources(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setSources(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addTests(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addTests(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setTests(java.lang.String...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.setTests(java.io.File...)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.resetTests()"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.addSubProject(org.sonar.api.batch.bootstrap.ProjectDefinition)"], ["org.sonar.api.batch.bootstrap.ProjectDefinition", "org.sonar.api.batch.bootstrap.ProjectDefinition.getParent()"], ["void", "org.sonar.api.batch.bootstrap.ProjectDefinition.remove()"], ["boolean", "org.sonar.api.batch.bootstrap.ProjectDefinition.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.bootstrap.ProjectDefinition.hashCode()"], ["void", "org.sonar.api.batch.bootstrap.ProjectBuilder.build(org.sonar.api.batch.bootstrap.ProjectBuilder$Context)"], ["org.sonar.api.batch.Phase$Name[]", "org.sonar.api.batch.Phase$Name.values()"], ["org.sonar.api.batch.Phase$Name", "org.sonar.api.batch.Phase$Name.valueOf(java.lang.String)"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor()"], ["java.lang.String", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.name()"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.name(java.lang.String)"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperty(java.lang.String...)"], ["org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperties(java.lang.String...)"], ["org.sonar.api.batch.postjob.PostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperties(java.lang.String[])"], ["org.sonar.api.batch.postjob.PostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.requireProperty(java.lang.String[])"], ["org.sonar.api.batch.postjob.PostJobDescriptor", "org.sonar.api.batch.postjob.internal.DefaultPostJobDescriptor.name(java.lang.String)"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode()"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.addRange(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.inputFile()"], ["java.util.SortedMap<java.lang.Integer, org.sonar.api.batch.fs.TextRange>", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.significantCodePerLine()"], ["org.sonar.api.batch.sensor.code.NewSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.addRange(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.code.NewSignificantCode", "org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage()"], ["org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.inputFile()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.ofType(org.sonar.api.batch.sensor.coverage.CoverageType)"], ["org.sonar.api.batch.sensor.coverage.CoverageType", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.type()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.lineHits(int, int)"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.conditions(int, int, int)"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.coveredLines()"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.linesToCover()"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.conditions()"], ["int", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.coveredConditions()"], ["java.util.SortedMap<java.lang.Integer, java.lang.Integer>", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.hitsByLine()"], ["java.util.SortedMap<java.lang.Integer, java.lang.Integer>", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.conditionsByLine()"], ["java.util.SortedMap<java.lang.Integer, java.lang.Integer>", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.coveredConditionsByLine()"], ["void", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.doSave()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.coverage.CoverageType[]", "org.sonar.api.batch.sensor.coverage.CoverageType.values()"], ["org.sonar.api.batch.sensor.coverage.CoverageType", "org.sonar.api.batch.sensor.coverage.CoverageType.valueOf(java.lang.String)"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.create(java.io.File)"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.create(java.nio.file.Path)"], ["org.sonar.api.config.Settings", "org.sonar.api.batch.sensor.internal.SensorContextTester.settings()"], ["org.sonar.api.config.Configuration", "org.sonar.api.batch.sensor.internal.SensorContextTester.config()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setSettings(org.sonar.api.config.Settings)"], ["org.sonar.api.batch.fs.internal.DefaultFileSystem", "org.sonar.api.batch.sensor.internal.SensorContextTester.fileSystem()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setFileSystem(org.sonar.api.batch.fs.internal.DefaultFileSystem)"], ["org.sonar.api.batch.rule.ActiveRules", "org.sonar.api.batch.sensor.internal.SensorContextTester.activeRules()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setActiveRules(org.sonar.api.batch.rule.ActiveRules)"], ["org.sonar.api.utils.Version", "org.sonar.api.batch.sensor.internal.SensorContextTester.getSonarQubeVersion()"], ["org.sonar.api.SonarRuntime", "org.sonar.api.batch.sensor.internal.SensorContextTester.runtime()"], ["org.sonar.api.batch.sensor.internal.SensorContextTester", "org.sonar.api.batch.sensor.internal.SensorContextTester.setRuntime(org.sonar.api.SonarRuntime)"], ["boolean", "org.sonar.api.batch.sensor.internal.SensorContextTester.isCancelled()"], ["void", "org.sonar.api.batch.sensor.internal.SensorContextTester.setCancelled(boolean)"], ["org.sonar.api.batch.fs.InputModule", "org.sonar.api.batch.sensor.internal.SensorContextTester.module()"], ["org.sonar.api.scanner.fs.InputProject", "org.sonar.api.batch.sensor.internal.SensorContextTester.project()"], ["<G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.NewMeasure<G>", "org.sonar.api.batch.sensor.internal.SensorContextTester.newMeasure()"], ["<G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.Measure<G>", "org.sonar.api.batch.sensor.internal.SensorContextTester.measure(java.lang.String, org.sonar.api.measures.Metric<G>)"], ["<G extends java.io.Serializable> org.sonar.api.batch.sensor.measure.Measure<G>", "org.sonar.api.batch.sensor.internal.SensorContextTester.measure(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.internal.SensorContextTester.newIssue()"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.internal.SensorContextTester.newExternalIssue()"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.internal.SensorContextTester.newAdHocRule()"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.lineHits(java.lang.String, int)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.sumOrNull(java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.conditions(java.lang.String, int)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.coveredConditions(java.lang.String, int)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.sensor.internal.SensorContextTester.significantCodeTextRange(java.lang.String, int)"], ["java.lang.Integer", "org.sonar.api.batch.sensor.internal.SensorContextTester.maxOrNull(java.lang.Integer, java.lang.Integer)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.internal.SensorContextTester.newHighlighting()"], ["org.sonar.api.batch.sensor.coverage.NewCoverage", "org.sonar.api.batch.sensor.internal.SensorContextTester.newCoverage()"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.internal.SensorContextTester.newCpdTokens()"], ["org.sonar.api.batch.sensor.symbol.NewSymbolTable", "org.sonar.api.batch.sensor.internal.SensorContextTester.newSymbolTable()"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.internal.SensorContextTester.newAnalysisError()"], ["void", "org.sonar.api.batch.sensor.internal.SensorContextTester.addContextProperty(java.lang.String, java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.sensor.internal.SensorContextTester.getContextProperties()"], ["void", "org.sonar.api.batch.sensor.internal.SensorContextTester.markForPublishing(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.code.NewSignificantCode", "org.sonar.api.batch.sensor.internal.SensorContextTester.newSignificantCode()"], ["org.sonar.api.batch.fs.FileSystem", "org.sonar.api.batch.sensor.internal.SensorContextTester.fileSystem()"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor()"], ["java.lang.String", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.name()"], ["org.sonar.api.batch.fs.InputFile$Type", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.type()"], ["boolean", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.isGlobal()"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.name(java.lang.String)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguage(java.lang.String)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguages(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnFileType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepository(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepositories(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperty(java.lang.String...)"], ["org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperties(java.lang.String...)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.global()"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyWhenConfiguration(java.util.function.Predicate<org.sonar.api.config.Configuration>)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperties(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.requireProperty(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepositories(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.createIssuesForRuleRepository(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnFileType(org.sonar.api.batch.fs.InputFile$Type)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguages(java.lang.String[])"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.onlyOnLanguage(java.lang.String)"], ["org.sonar.api.batch.sensor.SensorDescriptor", "org.sonar.api.batch.sensor.internal.DefaultSensorDescriptor.name(java.lang.String)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.measure.Measure)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.issue.Issue)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.coverage.internal.DefaultCoverage)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.error.AnalysisError)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.storeProperty(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue)"], ["void", "org.sonar.api.batch.sensor.internal.InMemorySensorStorage.store(org.sonar.api.batch.sensor.code.internal.DefaultSignificantCode)"], ["org.sonar.api.batch.sensor.internal.DefaultStorable", "org.sonar.api.batch.sensor.internal.DefaultStorable()"], ["org.sonar.api.batch.sensor.internal.DefaultStorable", "org.sonar.api.batch.sensor.internal.DefaultStorable(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["void", "org.sonar.api.batch.sensor.internal.DefaultStorable.save()"], ["java.lang.String", "org.sonar.api.batch.sensor.internal.DefaultStorable.toString()"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.inputFile()"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.highlight(int, int, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.sensor.highlighting.NewHighlighting", "org.sonar.api.batch.sensor.highlighting.internal.DefaultHighlighting.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.create(org.sonar.api.batch.fs.TextRange, org.sonar.api.batch.sensor.highlighting.TypeOfText)"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.range()"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.getTextType()"], ["java.lang.String", "org.sonar.api.batch.sensor.highlighting.internal.SyntaxHighlightingRule.toString()"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText[]", "org.sonar.api.batch.sensor.highlighting.TypeOfText.values()"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText", "org.sonar.api.batch.sensor.highlighting.TypeOfText.valueOf(java.lang.String)"], ["org.sonar.api.batch.sensor.highlighting.TypeOfText", "org.sonar.api.batch.sensor.highlighting.TypeOfText.forCssClass(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.sensor.highlighting.TypeOfText.cssClass()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue(org.sonar.api.batch.fs.internal.DefaultInputProject)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.remediationEffortMinutes(java.lang.Long)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.severity(org.sonar.api.batch.rule.Severity)"], ["java.lang.String", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.engineId()"], ["java.lang.String", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.ruleId()"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.severity()"], ["java.lang.Long", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.remediationEffort()"], ["void", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.doSave()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.type()"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.engineId(java.lang.String)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.ruleId(java.lang.String)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.ruleKey()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.addFlow(java.lang.Iterable)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.at(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.severity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.remediationEffortMinutes(java.lang.Long)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.issue.NewExternalIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultExternalIssue.forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.issue.IssueLocation", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.primaryLocation()"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.newLocation()"], ["T", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.at(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["T", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["T", "org.sonar.api.batch.sensor.issue.internal.AbstractDefaultIssue.addFlow(java.lang.Iterable<org.sonar.api.batch.sensor.issue.NewIssueLocation>)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue(org.sonar.api.batch.fs.internal.DefaultInputProject, org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.ruleKey()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.gap(java.lang.Double)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.overrideSeverity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.overriddenSeverity()"], ["java.lang.Double", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.gap()"], ["org.sonar.api.batch.sensor.issue.IssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.primaryLocation()"], ["void", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.doSave()"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.addFlow(java.lang.Iterable)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.addLocation(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.at(org.sonar.api.batch.sensor.issue.NewIssueLocation)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.overrideSeverity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.gap(java.lang.Double)"], ["org.sonar.api.batch.sensor.issue.NewIssue", "org.sonar.api.batch.sensor.issue.internal.DefaultIssue.forRule(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation()"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.at(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.message(java.lang.String)"], ["org.sonar.api.batch.fs.InputComponent", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.inputComponent()"], ["org.sonar.api.batch.fs.TextRange", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.textRange()"], ["java.lang.String", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.message()"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.message(java.lang.String)"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.at(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.issue.NewIssueLocation", "org.sonar.api.batch.sensor.issue.internal.DefaultIssueLocation.on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.inputFile()"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.addToken(int, int, int, int, java.lang.String)"], ["org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.addToken(org.sonar.api.batch.fs.TextRange, java.lang.String)"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.addToken(org.sonar.api.batch.fs.TextRange, java.lang.String)"], ["org.sonar.api.batch.sensor.cpd.NewCpdTokens", "org.sonar.api.batch.sensor.cpd.internal.DefaultCpdTokens.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.cpd.internal.TokensLine", "org.sonar.api.batch.sensor.cpd.internal.TokensLine(int, int, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getValue()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getStartLine()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getEndLine()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getHashCode()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getStartUnit()"], ["int", "org.sonar.api.batch.sensor.cpd.internal.TokensLine.getEndUnit()"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure()"], ["org.sonar.api.batch.sensor.measure.internal.DefaultMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["boolean", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.isFromCore()"], ["void", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.doSave()"], ["org.sonar.api.batch.fs.InputComponent", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.inputComponent()"], ["G", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.value()"], ["boolean", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.equals(java.lang.Object)"], ["int", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.hashCode()"], ["org.sonar.api.batch.sensor.measure.NewMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.withValue(java.io.Serializable)"], ["org.sonar.api.batch.sensor.measure.NewMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.forMetric(org.sonar.api.batch.measure.Metric)"], ["org.sonar.api.batch.sensor.measure.NewMeasure", "org.sonar.api.batch.sensor.measure.internal.DefaultMeasure.on(org.sonar.api.batch.fs.InputComponent)"], ["org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError()"], ["org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.inputFile()"], ["java.lang.String", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.message()"], ["org.sonar.api.batch.fs.TextPointer", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.location()"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.message(java.lang.String)"], ["org.sonar.api.batch.sensor.error.NewAnalysisError", "org.sonar.api.batch.sensor.error.internal.DefaultAnalysisError.at(org.sonar.api.batch.fs.TextPointer)"], ["org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["java.util.Map<org.sonar.api.batch.fs.TextRange, java.util.Set<org.sonar.api.batch.fs.TextRange>>", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.getReferencesBySymbol()"], ["org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.fs.InputFile", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.inputFile()"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.newSymbol(int, int, int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.newSymbol(int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.newSymbol(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.symbol.NewSymbolTable", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable.onFile(org.sonar.api.batch.fs.InputFile)"], ["org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol(org.sonar.api.batch.fs.internal.DefaultInputFile, org.sonar.api.batch.fs.TextRange, java.util.Collection<org.sonar.api.batch.fs.TextRange>)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol.newReference(int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol.newReference(int, int, int, int)"], ["org.sonar.api.batch.sensor.symbol.NewSymbol", "org.sonar.api.batch.sensor.symbol.internal.DefaultSymbolTable$DefaultSymbol.newReference(org.sonar.api.batch.fs.TextRange)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule()"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule(org.sonar.api.batch.sensor.internal.SensorStorage)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.severity(org.sonar.api.batch.rule.Severity)"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.engineId()"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.ruleId()"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.name()"], ["java.lang.String", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.description()"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.severity()"], ["void", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.doSave()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.type()"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.engineId(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.ruleId(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.name(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.description(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.severity(org.sonar.api.batch.rule.Severity)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.type(org.sonar.api.rules.RuleType)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.description(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.name(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.ruleId(java.lang.String)"], ["org.sonar.api.batch.sensor.rule.NewAdHocRule", "org.sonar.api.batch.sensor.rule.internal.DefaultAdHocRule.engineId(java.lang.String)"], ["org.sonar.api.batch.rule.Severity[]", "org.sonar.api.batch.rule.Severity.values()"], ["org.sonar.api.batch.rule.Severity", "org.sonar.api.batch.rule.Severity.valueOf(java.lang.String)"], ["org.sonar.api.batch.rule.CheckFactory", "org.sonar.api.batch.rule.CheckFactory(org.sonar.api.batch.rule.ActiveRules)"], ["<C> org.sonar.api.batch.rule.Checks<C>", "org.sonar.api.batch.rule.CheckFactory.create(java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.rule.internal.DefaultRule.key()"], ["java.lang.Integer", "org.sonar.api.batch.rule.internal.DefaultRule.id()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.name()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.severity()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.type()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.description()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRule.internalKey()"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.batch.rule.internal.DefaultRule.status()"], ["org.sonar.api.batch.rule.RuleParam", "org.sonar.api.batch.rule.internal.DefaultRule.param(java.lang.String)"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRuleParam.key()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultRuleParam.description()"], ["org.sonar.api.batch.rule.internal.ActiveRulesBuilder", "org.sonar.api.batch.rule.internal.ActiveRulesBuilder()"], ["org.sonar.api.batch.rule.internal.ActiveRulesBuilder", "org.sonar.api.batch.rule.internal.ActiveRulesBuilder.addRule(org.sonar.api.batch.rule.internal.NewActiveRule)"], ["org.sonar.api.batch.rule.ActiveRules", "org.sonar.api.batch.rule.internal.ActiveRulesBuilder.build()"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setId(java.lang.Integer)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setDescription(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setName(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setSeverity(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setType(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setStatus(org.sonar.api.rule.RuleStatus)"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.NewRule.setInternalKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewRuleParam", "org.sonar.api.batch.rule.internal.NewRule.addParam(java.lang.String)"], ["org.sonar.api.batch.rule.internal.DefaultActiveRules", "org.sonar.api.batch.rule.internal.DefaultActiveRules(java.util.Collection<org.sonar.api.batch.rule.internal.NewActiveRule>)"], ["org.sonar.api.batch.rule.ActiveRule", "org.sonar.api.batch.rule.internal.DefaultActiveRules.find(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.rule.ActiveRule", "org.sonar.api.batch.rule.internal.DefaultActiveRules.findByInternalKey(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.rule.Rule", "org.sonar.api.batch.rule.internal.DefaultRules.find(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.rule.internal.DefaultActiveRule.ruleKey()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.severity()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.language()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.param(java.lang.String)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.batch.rule.internal.DefaultActiveRule.params()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.internalKey()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.templateRuleKey()"], ["long", "org.sonar.api.batch.rule.internal.DefaultActiveRule.createdAt()"], ["long", "org.sonar.api.batch.rule.internal.DefaultActiveRule.updatedAt()"], ["java.lang.String", "org.sonar.api.batch.rule.internal.DefaultActiveRule.qpKey()"], ["org.sonar.api.batch.rule.internal.RulesBuilder", "org.sonar.api.batch.rule.internal.RulesBuilder()"], ["org.sonar.api.batch.rule.internal.NewRule", "org.sonar.api.batch.rule.internal.RulesBuilder.add(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.rule.Rules", "org.sonar.api.batch.rule.internal.RulesBuilder.build()"], ["org.sonar.api.batch.rule.internal.NewRuleParam", "org.sonar.api.batch.rule.internal.NewRuleParam.setDescription(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder()"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setRuleKey(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setName(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setSeverity(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setParam(java.lang.String, java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setCreatedAt(long)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setUpdatedAt(long)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setInternalKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setLanguage(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setTemplateRuleKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule$Builder", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.setQProfileKey(java.lang.String)"], ["org.sonar.api.batch.rule.internal.NewActiveRule", "org.sonar.api.batch.rule.internal.NewActiveRule$Builder.build()"], ["C", "org.sonar.api.batch.rule.Checks.of(org.sonar.api.rule.RuleKey)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.batch.rule.Checks.ruleKey(C)"], ["org.sonar.api.ExtensionProvider", "org.sonar.api.ExtensionProvider()"], ["org.sonar.api.config.GlobalPropertyChangeHandler", "org.sonar.api.config.GlobalPropertyChangeHandler()"], ["java.lang.String", "org.sonar.api.config.Category.originalKey()"], ["java.lang.String", "org.sonar.api.config.Category.key()"], ["boolean", "org.sonar.api.config.Category.isSpecial()"], ["int", "org.sonar.api.config.Category.hashCode()"], ["boolean", "org.sonar.api.config.Category.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.config.Category.toString()"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition.builder(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Result", "org.sonar.api.config.PropertyDefinition.validate(org.sonar.api.PropertyType, java.lang.String, java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Result", "org.sonar.api.config.PropertyDefinition.validate(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.key()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.defaultValue()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.name()"], ["org.sonar.api.PropertyType", "org.sonar.api.config.PropertyDefinition.type()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.description()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.category()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.subCategory()"], ["boolean", "org.sonar.api.config.PropertyDefinition.global()"], ["boolean", "org.sonar.api.config.PropertyDefinition.multiValues()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.propertySetKey()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.deprecatedKey()"], ["int", "org.sonar.api.config.PropertyDefinition.index()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition.toString()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings(org.sonar.api.config.PropertyDefinitions)"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.config.internal.MapSettings.getProperties()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.clear()"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Integer)"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Boolean)"], ["org.sonar.api.config.internal.MapSettings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Long)"], ["org.sonar.api.config.Configuration", "org.sonar.api.config.internal.MapSettings.asConfig()"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Long)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Integer)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.Boolean)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.internal.MapSettings.setProperty(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.internal.MultivalueProperty.parseAsCsv(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.internal.MultivalueProperty.parseAsCsv(java.lang.String, java.lang.String, java.util.function.Function<java.lang.String, java.lang.String>)"], ["org.sonar.api.config.internal.ConfigurationBridge", "org.sonar.api.config.internal.ConfigurationBridge(org.sonar.api.config.Settings)"], ["boolean", "org.sonar.api.config.internal.ConfigurationBridge.hasKey(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.internal.ConfigurationBridge.getStringArray(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.description(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.name(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.defaultValue(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.category(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.subCategory(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onQualifiers(java.lang.String, java.lang.String...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onQualifiers(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onlyOnQualifiers(java.lang.String, java.lang.String...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.onlyOnQualifiers(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.type(org.sonar.api.PropertyType)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.options(java.lang.String, java.lang.String...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.options(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.multiValues(boolean)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.propertySetKey(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.fields(org.sonar.api.config.PropertyFieldDefinition, org.sonar.api.config.PropertyFieldDefinition...)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.fields(java.util.List<org.sonar.api.config.PropertyFieldDefinition>)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.deprecatedKey(java.lang.String)"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.hidden()"], ["org.sonar.api.config.PropertyDefinition$Builder", "org.sonar.api.config.PropertyDefinition$Builder.index(int)"], ["org.sonar.api.config.PropertyDefinition", "org.sonar.api.config.PropertyDefinition$Builder.build()"], ["org.sonar.api.config.EmailSettings", "org.sonar.api.config.EmailSettings(org.sonar.api.config.Configuration, org.sonar.api.platform.Server)"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSmtpHost()"], ["int", "org.sonar.api.config.EmailSettings.getSmtpPort()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSecureConnection()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSmtpUsername()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getSmtpPassword()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getFrom()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getFromName()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getPrefix()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getServerBaseURL()"], ["java.lang.String", "org.sonar.api.config.EmailSettings.getInstanceName()"], ["boolean", "org.sonar.api.config.PropertyDefinition$Result.isValid()"], ["java.lang.String", "org.sonar.api.config.PropertyDefinition$Result.getErrorKey()"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.name(java.lang.String)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.description(java.lang.String)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.indicativeSize(int)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.type(org.sonar.api.PropertyType)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.options(java.lang.String...)"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition$Builder.options(java.util.List<java.lang.String>)"], ["org.sonar.api.config.PropertyFieldDefinition", "org.sonar.api.config.PropertyFieldDefinition$Builder.build()"], ["org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.create(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.getKey()"], ["java.lang.String", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.getNewValue()"], ["java.lang.String", "org.sonar.api.config.GlobalPropertyChangeHandler$PropertyChange.toString()"], ["org.sonar.api.config.PropertyFieldDefinition$Builder", "org.sonar.api.config.PropertyFieldDefinition.build(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyFieldDefinition.key()"], ["java.lang.String", "org.sonar.api.config.PropertyFieldDefinition.name()"], ["java.lang.String", "org.sonar.api.config.PropertyFieldDefinition.description()"], ["int", "org.sonar.api.config.PropertyFieldDefinition.indicativeSize()"], ["org.sonar.api.PropertyType", "org.sonar.api.config.PropertyFieldDefinition.type()"], ["org.sonar.api.config.PropertyDefinition$Result", "org.sonar.api.config.PropertyFieldDefinition.validate(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Base64Cipher.encrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Base64Cipher.decrypt(java.lang.String)"], ["org.sonar.api.config.Encryption", "org.sonar.api.config.Settings.getEncryption()"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.Settings.getDefinitions()"], ["boolean", "org.sonar.api.config.Settings.hasKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Settings.getDefaultValue(java.lang.String)"], ["boolean", "org.sonar.api.config.Settings.hasDefaultValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Settings.getString(java.lang.String)"], ["boolean", "org.sonar.api.config.Settings.getBoolean(java.lang.String)"], ["int", "org.sonar.api.config.Settings.getInt(java.lang.String)"], ["long", "org.sonar.api.config.Settings.getLong(java.lang.String)"], ["java.util.Date", "org.sonar.api.config.Settings.getDate(java.lang.String)"], ["java.util.Date", "org.sonar.api.config.Settings.getDateTime(java.lang.String)"], ["java.lang.Float", "org.sonar.api.config.Settings.getFloat(java.lang.String)"], ["java.lang.Double", "org.sonar.api.config.Settings.getDouble(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.Settings.getStringArray(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.Settings.getStringLines(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.config.Settings.getStringArrayBySeparator(java.lang.String, java.lang.String)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.appendProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.String[])"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.String)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Boolean)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Integer)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Long)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Double)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.lang.Float)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.util.Date)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.addProperties(java.util.Map<java.lang.String, java.lang.String>)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.addProperties(java.util.Properties)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.setProperty(java.lang.String, java.util.Date, boolean)"], ["org.sonar.api.config.Settings", "org.sonar.api.config.Settings.removeProperty(java.lang.String)"], ["org.sonar.api.config.Encryption", "org.sonar.api.config.Encryption(java.lang.String)"], ["void", "org.sonar.api.config.Encryption.setPathToSecretKey(java.lang.String)"], ["boolean", "org.sonar.api.config.Encryption.hasSecretKey()"], ["boolean", "org.sonar.api.config.Encryption.isEncrypted(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Encryption.encrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Encryption.scramble(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.Encryption.generateRandomSecretKey()"], ["java.lang.String", "org.sonar.api.config.Encryption.decrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.AesCipher.encrypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.AesCipher.decrypt(java.lang.String)"], ["void", "org.sonar.api.config.AesCipher.setPathToSecretKey(java.lang.String)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions(java.lang.Object...)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions(java.util.Collection<org.sonar.api.config.PropertyDefinition>)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponents(java.util.Collection)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponents(java.util.Collection, java.lang.String)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponent(java.lang.Object)"], ["org.sonar.api.config.PropertyDefinitions", "org.sonar.api.config.PropertyDefinitions.addComponent(java.lang.Object, java.lang.String)"], ["org.sonar.api.config.PropertyDefinition", "org.sonar.api.config.PropertyDefinitions.get(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.validKey(java.lang.String)"], ["java.util.Map<org.sonar.api.config.Category, java.util.Map<org.sonar.api.config.SubCategory, java.util.Collection<org.sonar.api.config.PropertyDefinition>>>", "org.sonar.api.config.PropertyDefinitions.propertiesByCategory(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getDefaultValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getCategory(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getSubCategory(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getCategory(org.sonar.api.Property)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getNewKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.config.PropertyDefinitions.getDeprecatedKey(java.lang.String)"], ["org.sonar.api.rules.RuleType[]", "org.sonar.api.rules.RuleType.values()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.rules.RuleType.valueOf(java.lang.String)"], ["int", "org.sonar.api.rules.RuleType.getDbConstant()"], ["org.sonar.api.rules.RuleType", "org.sonar.api.rules.RuleType.valueOf(int)"], ["org.sonar.api.rules.RuleType", "org.sonar.api.rules.RuleType.valueOfNullable(int)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule(java.lang.String, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.rules.Rule.getId()"], ["void", "org.sonar.api.rules.Rule.setId(java.lang.Integer)"], ["java.lang.String", "org.sonar.api.rules.Rule.getName()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getConfigKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setConfigKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getDescription()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDescription(java.lang.String)"], ["java.lang.Boolean", "org.sonar.api.rules.Rule.isEnabled()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.Rule.getParam(java.lang.String)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setParams(java.util.List<org.sonar.api.rules.RuleParam>)"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.Rule.createParameter()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.Rule.createParameter(java.lang.String)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.Rule.getSeverity()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setSeverity(org.sonar.api.rules.RulePriority)"], ["java.lang.String", "org.sonar.api.rules.Rule.getRepositoryKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setRepositoryKey(java.lang.String)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setUniqueKey(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.rules.Rule.isTemplate()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setIsTemplate(boolean)"], ["org.sonar.check.Cardinality", "org.sonar.api.rules.Rule.getCardinality()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCardinality(org.sonar.check.Cardinality)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.getParent()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setParent(org.sonar.api.rules.Rule)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.getTemplate()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setTemplate(org.sonar.api.rules.Rule)"], ["java.lang.String", "org.sonar.api.rules.Rule.getStatus()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setStatus(java.lang.String)"], ["java.util.Date", "org.sonar.api.rules.Rule.getCreatedAt()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCreatedAt(java.util.Date)"], ["java.util.Date", "org.sonar.api.rules.Rule.getUpdatedAt()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setUpdatedAt(java.util.Date)"], ["java.lang.String", "org.sonar.api.rules.Rule.getLanguage()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setLanguage(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.rules.Rule.getTags()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setTags(java.lang.String[])"], ["java.lang.String[]", "org.sonar.api.rules.Rule.getSystemTags()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setSystemTags(java.lang.String[])"], ["java.lang.Integer", "org.sonar.api.rules.Rule.getCharacteristicId()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCharacteristicId(java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.rules.Rule.getDefaultCharacteristicId()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDefaultCharacteristicId(java.lang.Integer)"], ["boolean", "org.sonar.api.rules.Rule.equals(java.lang.Object)"], ["int", "org.sonar.api.rules.Rule.hashCode()"], ["java.lang.String", "org.sonar.api.rules.Rule.toString()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.create()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.create(java.lang.String, java.lang.String, java.lang.String)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.create(java.lang.String, java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.rules.Rule.ruleKey()"], ["java.lang.String", "org.sonar.api.rules.Rule.getDefaultCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDefaultCharacteristicKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getDefaultSubCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setDefaultSubCharacteristicKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setCharacteristicKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.Rule.getSubCharacteristicKey()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.Rule.setSubCharacteristicKey(java.lang.String)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRule()"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRule(org.sonar.api.profiles.RulesProfile, org.sonar.api.rules.Rule, org.sonar.api.rules.RulePriority)"], ["java.lang.Integer", "org.sonar.api.rules.ActiveRule.getId()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getInheritance()"], ["void", "org.sonar.api.rules.ActiveRule.setInheritance(java.lang.String)"], ["boolean", "org.sonar.api.rules.ActiveRule.isInherited()"], ["boolean", "org.sonar.api.rules.ActiveRule.doesOverride()"], ["void", "org.sonar.api.rules.ActiveRule.setId(java.lang.Integer)"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.ActiveRule.getRule()"], ["void", "org.sonar.api.rules.ActiveRule.setRule(org.sonar.api.rules.Rule)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.ActiveRule.getSeverity()"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.ActiveRule.getOverriddenSeverity()"], ["void", "org.sonar.api.rules.ActiveRule.setSeverity(org.sonar.api.rules.RulePriority)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.ActiveRule.getPriority()"], ["void", "org.sonar.api.rules.ActiveRule.setPriority(org.sonar.api.rules.RulePriority)"], ["org.sonar.api.profiles.RulesProfile", "org.sonar.api.rules.ActiveRule.getRulesProfile()"], ["void", "org.sonar.api.rules.ActiveRule.setRulesProfile(org.sonar.api.profiles.RulesProfile)"], ["void", "org.sonar.api.rules.ActiveRule.setActiveRuleParams(java.util.List<org.sonar.api.rules.ActiveRuleParam>)"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRule.setParameter(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getParameter(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getPluginName()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getRepositoryKey()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getConfigKey()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getRuleKey()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getNoteData()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.getNoteUserLogin()"], ["java.util.Date", "org.sonar.api.rules.ActiveRule.getNoteCreatedAt()"], ["java.util.Date", "org.sonar.api.rules.ActiveRule.getNoteUpdatedAt()"], ["boolean", "org.sonar.api.rules.ActiveRule.equals(java.lang.Object)"], ["int", "org.sonar.api.rules.ActiveRule.hashCode()"], ["java.lang.String", "org.sonar.api.rules.ActiveRule.toString()"], ["java.lang.Object", "org.sonar.api.rules.ActiveRule.clone()"], ["boolean", "org.sonar.api.rules.ActiveRule.isEnabled()"], ["java.lang.String", "org.sonar.api.rules.RuleAnnotationUtils.getRuleKey(java.lang.Class)"], ["org.sonar.api.rules.XMLRuleParser", "org.sonar.api.rules.XMLRuleParser()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getKey()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getLanguage()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getName()"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.getName(boolean)"], ["org.sonar.api.rules.RuleRepository", "org.sonar.api.rules.RuleRepository.setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleRepository.toString()"], ["org.sonar.api.rules.AnnotationRuleParser", "org.sonar.api.rules.AnnotationRuleParser()"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.create()"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.withRepositoryKey(java.lang.String)"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.withKey(java.lang.String)"], ["org.sonar.api.rules.RuleQuery", "org.sonar.api.rules.RuleQuery.withConfigKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleQuery.getRepositoryKey()"], ["java.lang.String", "org.sonar.api.rules.RuleQuery.getKey()"], ["java.lang.String", "org.sonar.api.rules.RuleQuery.getConfigKey()"], ["org.sonar.api.rules.RulePriority[]", "org.sonar.api.rules.RulePriority.values()"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.valueOf(java.lang.String)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.valueOfString(java.lang.String)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.fromCheckPriority(org.sonar.check.Priority)"], ["org.sonar.api.rules.RulePriority", "org.sonar.api.rules.RulePriority.valueOfInt(int)"], ["org.sonar.api.rules.ActiveRuleParam", "org.sonar.api.rules.ActiveRuleParam()"], ["org.sonar.api.rules.ActiveRuleParam", "org.sonar.api.rules.ActiveRuleParam(org.sonar.api.rules.ActiveRule, org.sonar.api.rules.RuleParam, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.rules.ActiveRuleParam.getId()"], ["org.sonar.api.rules.ActiveRule", "org.sonar.api.rules.ActiveRuleParam.getActiveRule()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setActiveRule(org.sonar.api.rules.ActiveRule)"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.ActiveRuleParam.getRuleParam()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setRuleParam(org.sonar.api.rules.RuleParam)"], ["java.lang.String", "org.sonar.api.rules.ActiveRuleParam.getValue()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRuleParam.getParamKey()"], ["void", "org.sonar.api.rules.ActiveRuleParam.setParamKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.ActiveRuleParam.getKey()"], ["boolean", "org.sonar.api.rules.ActiveRuleParam.equals(java.lang.Object)"], ["int", "org.sonar.api.rules.ActiveRuleParam.hashCode()"], ["java.lang.Object", "org.sonar.api.rules.ActiveRuleParam.clone()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam(org.sonar.api.rules.Rule, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.Integer", "org.sonar.api.rules.RuleParam.getId()"], ["org.sonar.api.rules.Rule", "org.sonar.api.rules.RuleParam.getRule()"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getKey()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setKey(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getDescription()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setDescription(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getType()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setType(java.lang.String)"], ["java.lang.String", "org.sonar.api.rules.RuleParam.getDefaultValue()"], ["java.lang.Boolean", "org.sonar.api.rules.RuleParam.getDefaultValueAsBoolean()"], ["java.lang.Integer", "org.sonar.api.rules.RuleParam.getDefaultValueAsInteger()"], ["org.sonar.api.rules.RuleParam", "org.sonar.api.rules.RuleParam.setDefaultValue(java.lang.String)"], ["boolean", "org.sonar.api.rules.RuleParam.equals(java.lang.Object)"], ["int", "org.sonar.api.rules.RuleParam.hashCode()"], ["java.lang.String", "org.sonar.api.rules.RuleParam.toString()"], ["org.sonar.api.PropertyType[]", "org.sonar.api.PropertyType.values()"], ["org.sonar.api.PropertyType", "org.sonar.api.PropertyType.valueOf(java.lang.String)"], ["org.sonar.api.security.ExternalGroupsProvider$Context", "org.sonar.api.security.ExternalGroupsProvider$Context(java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.sonar.api.security.ExternalGroupsProvider$Context.getUsername()"], ["javax.servlet.http.HttpServletRequest", "org.sonar.api.security.ExternalGroupsProvider$Context.getRequest()"], ["boolean", "org.sonar.api.security.SecurityRealm$1.doAuthenticate(org.sonar.api.security.Authenticator$Context)"], ["org.sonar.api.security.SecurityRealm", "org.sonar.api.security.SecurityRealm()"], ["java.lang.String", "org.sonar.api.security.SecurityRealm.getName()"], ["void", "org.sonar.api.security.SecurityRealm.init()"], ["org.sonar.api.security.LoginPasswordAuthenticator", "org.sonar.api.security.SecurityRealm.getLoginPasswordAuthenticator()"], ["org.sonar.api.security.Authenticator", "org.sonar.api.security.SecurityRealm.doGetAuthenticator()"], ["org.sonar.api.security.ExternalUsersProvider", "org.sonar.api.security.SecurityRealm.getUsersProvider()"], ["org.sonar.api.security.ExternalGroupsProvider", "org.sonar.api.security.SecurityRealm.getGroupsProvider()"], ["org.sonar.api.security.ExternalUsersProvider$Context", "org.sonar.api.security.ExternalUsersProvider$Context(java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.sonar.api.security.ExternalUsersProvider$Context.getUsername()"], ["javax.servlet.http.HttpServletRequest", "org.sonar.api.security.ExternalUsersProvider$Context.getRequest()"], ["org.sonar.api.security.Authenticator", "org.sonar.api.security.Authenticator()"], ["org.sonar.api.security.ExternalGroupsProvider", "org.sonar.api.security.ExternalGroupsProvider()"], ["org.sonar.api.security.UserDetails", "org.sonar.api.security.UserDetails()"], ["void", "org.sonar.api.security.UserDetails.setEmail(java.lang.String)"], ["java.lang.String", "org.sonar.api.security.UserDetails.getEmail()"], ["void", "org.sonar.api.security.UserDetails.setName(java.lang.String)"], ["java.lang.String", "org.sonar.api.security.UserDetails.getName()"], ["void", "org.sonar.api.security.UserDetails.setUserId(java.lang.String)"], ["java.lang.String", "org.sonar.api.security.UserDetails.getUserId()"], ["java.lang.String", "org.sonar.api.security.UserDetails.toString()"], ["boolean", "org.sonar.api.security.DefaultGroups.isAnyone(java.lang.String)"], ["org.sonar.api.security.ExternalUsersProvider", "org.sonar.api.security.ExternalUsersProvider()"], ["org.sonar.api.security.UserDetails", "org.sonar.api.security.ExternalUsersProvider.doGetUserDetails(java.lang.String)"], ["org.sonar.api.security.UserDetails", "org.sonar.api.security.ExternalUsersProvider.doGetUserDetails(org.sonar.api.security.ExternalUsersProvider$Context)"], ["org.sonar.api.security.Authenticator$Context", "org.sonar.api.security.Authenticator$Context(java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest)"], ["java.lang.String", "org.sonar.api.security.Authenticator$Context.getUsername()"], ["java.lang.String", "org.sonar.api.security.Authenticator$Context.getPassword()"], ["javax.servlet.http.HttpServletRequest", "org.sonar.api.security.Authenticator$Context.getRequest()"], ["org.sonar.api.notifications.Notification", "org.sonar.api.notifications.Notification(java.lang.String)"], ["java.lang.String", "org.sonar.api.notifications.Notification.getType()"], ["org.sonar.api.notifications.Notification", "org.sonar.api.notifications.Notification.setDefaultMessage(java.lang.String)"], ["java.lang.String", "org.sonar.api.notifications.Notification.getDefaultMessage()"], ["org.sonar.api.notifications.Notification", "org.sonar.api.notifications.Notification.setFieldValue(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.notifications.Notification.getFieldValue(java.lang.String)"], ["boolean", "org.sonar.api.notifications.Notification.equals(java.lang.Object)"], ["int", "org.sonar.api.notifications.Notification.hashCode()"], ["java.lang.String", "org.sonar.api.notifications.Notification.toString()"], ["org.sonar.api.notifications.NotificationChannel", "org.sonar.api.notifications.NotificationChannel()"], ["java.lang.String", "org.sonar.api.notifications.NotificationChannel.getKey()"], ["java.lang.String", "org.sonar.api.notifications.NotificationChannel.toString()"], ["org.sonar.api.test.exception.IllegalDurationException", "org.sonar.api.test.exception.IllegalDurationException(java.lang.String)"], ["org.sonar.api.test.exception.TestException", "org.sonar.api.test.exception.TestException(java.lang.String)"], ["org.sonar.api.test.exception.TestException", "org.sonar.api.test.exception.TestException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.test.exception.CoverageAlreadyExistsException", "org.sonar.api.test.exception.CoverageAlreadyExistsException(java.lang.String)"], ["org.sonar.api.test.TestCase$Status[]", "org.sonar.api.test.TestCase$Status.values()"], ["org.sonar.api.test.TestCase$Status", "org.sonar.api.test.TestCase$Status.valueOf(java.lang.String)"], ["org.sonar.api.test.TestCase$Status", "org.sonar.api.test.TestCase$Status.of(java.lang.String)"], ["org.sonar.api.SonarEdition[]", "org.sonar.api.SonarEdition.values()"], ["org.sonar.api.SonarEdition", "org.sonar.api.SonarEdition.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.SonarEdition.getLabel()"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context(org.sonar.api.SonarRuntime)"], ["org.sonar.api.utils.Version", "org.sonar.api.Plugin$Context.getSonarQubeVersion()"], ["org.sonar.api.SonarRuntime", "org.sonar.api.Plugin$Context.getRuntime()"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context.addExtension(java.lang.Object)"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context.addExtensions(java.util.Collection)"], ["org.sonar.api.Plugin$Context", "org.sonar.api.Plugin$Context.addExtensions(java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.util.List", "org.sonar.api.Plugin$Context.getExtensions()"], ["org.sonar.api.config.Configuration", "org.sonar.api.Plugin$Context.getBootConfiguration()"], ["java.lang.String", "org.sonar.api.rule.Severity.defaultSeverity()"], ["org.sonar.api.rule.RuleStatus[]", "org.sonar.api.rule.RuleStatus.values()"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.rule.RuleStatus.valueOf(java.lang.String)"], ["org.sonar.api.rule.RuleStatus", "org.sonar.api.rule.RuleStatus.defaultStatus()"], ["org.sonar.api.rule.RuleScope[]", "org.sonar.api.rule.RuleScope.values()"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.rule.RuleScope.valueOf(java.lang.String)"], ["org.sonar.api.rule.RuleScope", "org.sonar.api.rule.RuleScope.defaultScope()"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.rule.RuleKey.of(java.lang.String, java.lang.String)"], ["org.sonar.api.rule.RuleKey", "org.sonar.api.rule.RuleKey.parse(java.lang.String)"], ["java.lang.String", "org.sonar.api.rule.RuleKey.repository()"], ["java.lang.String", "org.sonar.api.rule.RuleKey.rule()"], ["boolean", "org.sonar.api.rule.RuleKey.equals(java.lang.Object)"], ["int", "org.sonar.api.rule.RuleKey.hashCode()"], ["java.lang.String", "org.sonar.api.rule.RuleKey.toString()"], ["int", "org.sonar.api.rule.RuleKey.compareTo(org.sonar.api.rule.RuleKey)"], ["int", "org.sonar.api.rule.RuleKey.compareTo(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.net.URLCodec", "org.sonar.api.internal.apachecommons.codec.net.URLCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.URLCodec", "org.sonar.api.internal.apachecommons.codec.net.URLCodec(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encodeUrl(java.util.BitSet, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decodeUrl(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.encode(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.decode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.getDefaultCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.URLCodec.getEncoding()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.codec.digest.MessageDigestAlgorithms.values()"], ["org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(byte[], java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.apr1Crypt(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Md5Crypt.md5Crypt(byte[], java.lang.String, java.lang.String, java.util.Random)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$4.isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, char[])"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, int)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer.length()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneBuffer.toString()"], ["org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream(java.io.OutputStream, org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec, boolean)"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.close()"], ["void", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecOutputStream.eof()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encodeToString(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encodeAsString(byte[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.decode(java.lang.Object)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.decode(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.decode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.encode(byte[], int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.isInAlphabet(byte[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.isInAlphabet(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec.getEncodedLength(byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64()"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(int)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64", "org.sonar.api.internal.apachecommons.codec.binary.Base64(int, byte[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isUrlSafe()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isArrayByteBase64(byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isBase64(byte)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isBase64(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base64.isBase64(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64String(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64URLSafe(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64URLSafeString(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64Chunked(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[], boolean, boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeBase64(byte[], boolean, boolean, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.decodeBase64(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.decodeBase64(byte[])"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.codec.binary.Base64.decodeInteger(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Base64.encodeInteger(java.math.BigInteger)"], ["org.sonar.api.internal.apachecommons.codec.Charsets", "org.sonar.api.internal.apachecommons.codec.Charsets()"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.Charsets.toCharset(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.Charsets.toCharset(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, java.nio.ByteBuffer)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, java.io.File)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.security.MessageDigest, java.io.InputStream)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getDigest(java.lang.String)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getDigest(java.lang.String, java.security.MessageDigest)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getMd2Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getMd5Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha1Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha256Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_224Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_256Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_384Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha3_512Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha384Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getSha512Digest()"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getShaDigest()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.isAvailable(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md2Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.md5Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha1Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha256Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha384Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512Hex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_224Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_256Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_384Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha3_512Hex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.sha512Hex(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.shaHex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.shaHex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.shaHex(java.lang.String)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, byte[])"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.nio.ByteBuffer)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.io.File)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.io.InputStream)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.updateDigest(java.security.MessageDigest, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.DigestUtils", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils()"], ["org.sonar.api.internal.apachecommons.codec.digest.DigestUtils", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils(java.security.MessageDigest)"], ["org.sonar.api.internal.apachecommons.codec.digest.DigestUtils", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.nio.ByteBuffer)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.io.File)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digest(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.nio.ByteBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.digestAsHex(java.lang.String)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.codec.digest.DigestUtils.getMessageDigest()"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.getPatternLength()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.getReplacements(java.lang.String, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.matches(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule.toString()"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.colognePhonetic(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic.isEncodeEqual(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Caverphone", "org.sonar.api.internal.apachecommons.codec.language.Caverphone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.caverphone(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.Caverphone.isCaverphoneEqual(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType[]", "org.sonar.api.internal.apachecommons.codec.language.bm.RuleType.values()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType", "org.sonar.api.internal.apachecommons.codec.language.bm.RuleType.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.RuleType.getName()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.contains(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.getAny()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.isSingleton()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$1.toString()"], ["org.sonar.api.internal.apachecommons.codec.binary.CharSequenceUtils", "org.sonar.api.internal.apachecommons.codec.binary.CharSequenceUtils()"], ["org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C()"], ["long", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.getValue()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.reset()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.update(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32C.update(int)"], ["org.sonar.api.internal.apachecommons.codec.language.Metaphone", "org.sonar.api.internal.apachecommons.codec.language.Metaphone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.metaphone(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.isMetaphoneEqual(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.getMaxCodeLen()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.Metaphone.setMaxCodeLen(int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$3.isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.contains(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.getAny()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.isSingleton()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$SomeLanguages.toString()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$5.isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList(java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme>)"], ["java.lang.Iterable", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeList.getPhonemes()"], ["org.sonar.api.internal.apachecommons.codec.CharEncoding", "org.sonar.api.internal.apachecommons.codec.CharEncoding()"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decodeHex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decodeHex(char[])"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(byte[])"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer)"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(byte[], boolean)"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHex(java.nio.ByteBuffer, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(byte[], boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encodeHexString(java.nio.ByteBuffer, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Hex", "org.sonar.api.internal.apachecommons.codec.binary.Hex()"], ["org.sonar.api.internal.apachecommons.codec.binary.Hex", "org.sonar.api.internal.apachecommons.codec.binary.Hex(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.binary.Hex", "org.sonar.api.internal.apachecommons.codec.binary.Hex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decode(java.nio.ByteBuffer)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.Hex.decode(java.lang.Object)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encode(java.nio.ByteBuffer)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.Hex.encode(java.lang.Object)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.binary.Hex.getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.getCharsetName()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.Hex.toString()"], ["int", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.available()"], ["synchronized", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.markSupported()"], ["int", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.read(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.void reset()"], ["long", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodecInputStream.skip(long)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64InputStream(java.io.InputStream, boolean, int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.StringEncoderComparator", "org.sonar.api.internal.apachecommons.codec.StringEncoderComparator()"], ["org.sonar.api.internal.apachecommons.codec.StringEncoderComparator", "org.sonar.api.internal.apachecommons.codec.StringEncoderComparator(org.sonar.api.internal.apachecommons.codec.StringEncoder)"], ["int", "org.sonar.api.internal.apachecommons.codec.StringEncoderComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(boolean)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.nio.charset.Charset, boolean)"], ["org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encodeQuotedPrintable(java.util.BitSet, byte[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decodeQuotedPrintable(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.decode(java.lang.Object)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.getDefaultCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QuotedPrintableCodec.encode(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.values()"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.getName()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms.toString()"], ["org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha256Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha256Crypt(byte[], java.lang.String, java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha512Crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Sha2Crypt.sha512Crypt(byte[], java.lang.String, java.util.Random)"], ["org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32()"], ["long", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.getValue()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.reset()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.update(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.PureJavaCrc32.update(int)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Lang", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.instance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Lang", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.loadFromResource(java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Languages)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.guessLanguage(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang.guessLanguages(java.lang.String)"], ["java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getInstanceMap(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getInstanceMap(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule(java.lang.String, java.lang.String, java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$RPattern", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getLContext()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getPattern()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getPhoneme()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$RPattern", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.getRContext()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule.patternAndContextMatches(java.lang.CharSequence, int)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$10.isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder.encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.MatchRatingApproachEncoder.isEncodeEquals(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex()"], ["org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex(boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex.soundex(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.cli.Digest.main(java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.cli.Digest.toString()"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException()"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.DecoderException", "org.sonar.api.internal.apachecommons.codec.DecoderException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.net.PercentCodec", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.PercentCodec", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec(byte[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.encode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.decode(byte[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.encode(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.PercentCodec.decode(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.digest.Crypt", "org.sonar.api.internal.apachecommons.codec.digest.Crypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.Crypt.crypt(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$6.isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$8.isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Lang$LangRule.matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType[]", "org.sonar.api.internal.apachecommons.codec.language.bm.NameType.values()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType", "org.sonar.api.internal.apachecommons.codec.language.bm.NameType.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.NameType.getName()"], ["org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.doubleMetaphone(java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.isDoubleMetaphoneEqual(java.lang.String, java.lang.String, boolean)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.getMaxCodeLen()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone.setMaxCodeLen(int)"], ["org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex()"], ["org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex(char[])"], ["org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.difference(java.lang.String, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.RefinedSoundex.soundex(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex()"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex(char[])"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Soundex", "org.sonar.api.internal.apachecommons.codec.language.Soundex(java.lang.String, boolean)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.Soundex.difference(java.lang.String, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Soundex.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Soundex.encode(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.Soundex.getMaxLength()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.Soundex.setMaxLength(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Soundex.soundex(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException()"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.EncoderException", "org.sonar.api.internal.apachecommons.codec.EncoderException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec()"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.encode(byte[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.encode(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.decode(java.lang.Object)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.decode(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toByteArray(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.fromAscii(char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.fromAscii(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toAsciiBytes(byte[])"], ["char[]", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toAsciiChars(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BinaryCodec.toAsciiString(byte[])"], ["org.sonar.api.internal.apachecommons.codec.net.QCodec", "org.sonar.api.internal.apachecommons.codec.net.QCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.QCodec", "org.sonar.api.internal.apachecommons.codec.net.QCodec(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.net.QCodec", "org.sonar.api.internal.apachecommons.codec.net.QCodec(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.decode(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QCodec.encode(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.QCodec.decode(java.lang.Object)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.net.QCodec.getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.QCodec.getDefaultCharset()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.net.QCodec.isEncodeBlanks()"], ["void", "org.sonar.api.internal.apachecommons.codec.net.QCodec.setEncodeBlanks(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.isAvailable(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.isAvailable(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms)"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacMd5(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha1(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha256(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha384(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getHmacSha512(byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getInitializedMac(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.getInitializedMac(java.lang.String, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5(byte[], java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5Hex(byte[], java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacMd5Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1(byte[], java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1Hex(byte[], java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha1Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256(byte[], java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256Hex(byte[], java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha256Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384(byte[], java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384Hex(byte[], java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha384Hex(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512(byte[], byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512(byte[], java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512Hex(byte[], byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512Hex(byte[], java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacSha512Hex(java.lang.String, java.lang.String)"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac, byte[])"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac, java.io.InputStream)"], ["javax.crypto.Mac", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.updateHmac(javax.crypto.Mac, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils()"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(java.lang.String, byte[])"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.digest.HmacUtils", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils(org.sonar.api.internal.apachecommons.codec.digest.HmacAlgorithms, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.nio.ByteBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.nio.ByteBuffer)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmac(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.HmacUtils.hmacHex(java.io.File)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.encode(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.getNameType()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.getRuleType()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.isConcat()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setConcat(boolean)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setNameType(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setRuleType(org.sonar.api.internal.apachecommons.codec.language.bm.RuleType)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.BeiderMorseEncoder.setMaxPhonemes(int)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet.from(java.util.Set<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.codec.binary.StringUtils", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence)"], ["java.nio.ByteBuffer", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getByteBufferUtf8(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesIso8859_1(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUnchecked(java.lang.String, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUsAscii(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf16(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf16Be(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf16Le(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.getBytesUtf8(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newString(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringIso8859_1(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUsAscii(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf16(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf16Be(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf16Le(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.StringUtils.newStringUtf8(byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32InputStream(java.io.InputStream, boolean, int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.digest.XXHash32", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32()"], ["org.sonar.api.internal.apachecommons.codec.digest.XXHash32", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32(int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.reset()"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.update(int)"], ["void", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.update(byte[], int, int)"], ["long", "org.sonar.api.internal.apachecommons.codec.digest.XXHash32.getValue()"], ["org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.digest.UnixCrypt.crypt(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.Nysiis", "org.sonar.api.internal.apachecommons.codec.language.Nysiis()"], ["org.sonar.api.internal.apachecommons.codec.language.Nysiis", "org.sonar.api.internal.apachecommons.codec.language.Nysiis(boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.encode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.encode(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.isStrict()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Nysiis.nysiis(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme$1.compare(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme$1.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$7.isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.empty(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.append(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.apply(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$PhonemeExpr, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder.makeString()"], ["org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone", "org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone.encode(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.AbstractCaverphone.isEncodeEqual(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.createBranch()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.equals(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.finish()"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.hashCode()"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.processNextReplacement(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Branch.toString()"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, char[])"], ["void", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer.addLeft(char)"], ["char", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer.getNextChar()"], ["char", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneInputBuffer.removeNext()"], ["org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult(org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(char, char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(char)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.append(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendPrimary(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.appendAlternate(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getPrimary()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.getAlternate()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.DoubleMetaphone$DoubleMetaphoneResult.isComplete()"], ["org.sonar.api.internal.apachecommons.codec.language.Caverphone2", "org.sonar.api.internal.apachecommons.codec.language.Caverphone2()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone2.encode(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$1.compare(org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule, org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$Rule)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.DaitchMokotoffSoundex$1.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.codec.language.Caverphone1", "org.sonar.api.internal.apachecommons.codec.language.Caverphone1()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.Caverphone1.encode(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.net.BCodec", "org.sonar.api.internal.apachecommons.codec.net.BCodec()"], ["org.sonar.api.internal.apachecommons.codec.net.BCodec", "org.sonar.api.internal.apachecommons.codec.net.BCodec(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.codec.net.BCodec", "org.sonar.api.internal.apachecommons.codec.net.BCodec(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.decode(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.BCodec.encode(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.codec.net.BCodec.decode(java.lang.Object)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.codec.net.BCodec.getCharset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.net.BCodec.getDefaultCharset()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$1.isMatch(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, boolean)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine(org.sonar.api.internal.apachecommons.codec.language.bm.NameType, org.sonar.api.internal.apachecommons.codec.language.bm.RuleType, boolean, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.encode(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.encode(java.lang.String, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Lang", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getLang()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.NameType", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getNameType()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.RuleType", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getRuleType()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.isConcat()"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine.getMaxPhonemes()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$2.toString()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(java.lang.CharSequence, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme, org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.append(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.getLanguages()"], ["java.lang.CharSequence", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.getPhonemeText()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.join(org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.mergeWithLanguage(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$Phoneme.toString()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication(java.util.Map<java.lang.String, java.util.List<org.sonar.api.internal.apachecommons.codec.language.bm.Rule>>, java.lang.CharSequence, org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder, int, int)"], ["int", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.getI()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$PhonemeBuilder", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.getPhonemeBuilder()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.invoke()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.PhoneticEngine$RulesApplication.isFound()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Rule$9.isMatch(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.contains(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.getAny()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.isSingleton()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.restrictTo(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.merge(org.sonar.api.internal.apachecommons.codec.language.bm.Languages$LanguageSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages$2.toString()"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages.getInstance(org.sonar.api.internal.apachecommons.codec.language.bm.NameType)"], ["org.sonar.api.internal.apachecommons.codec.language.bm.Languages", "org.sonar.api.internal.apachecommons.codec.language.bm.Languages.getInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer(org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic, int)"], ["void", "org.sonar.api.internal.apachecommons.codec.language.ColognePhonetic$CologneOutputBuffer.addRight(char)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32()"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(byte)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(boolean, byte)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[], boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32", "org.sonar.api.internal.apachecommons.codec.binary.Base32(int, byte[], boolean, byte)"], ["boolean", "org.sonar.api.internal.apachecommons.codec.binary.Base32.isInAlphabet(byte)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base32OutputStream(java.io.OutputStream, boolean, int, byte[])"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream, boolean)"], ["org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream", "org.sonar.api.internal.apachecommons.codec.binary.Base64OutputStream(java.io.OutputStream, boolean, int, byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.codec.binary.BaseNCodec$Context.toString()"], ["org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DirectoryFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.PathFileComparator.compare(java.lang.Object, java.lang.Object)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.AbstractFileComparator.sort(java.io.File...)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.AbstractFileComparator.toString()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry(org.sonar.api.internal.apachecommons.io.monitor.FileEntry, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.refresh(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.newChildInstance(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getParent()"], ["int", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getLevel()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileEntry[]", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getChildren()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setChildren(org.sonar.api.internal.apachecommons.io.monitor.FileEntry[])"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getFile()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getName()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setName(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getLastModified()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setLastModified(long)"], ["long", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.getLength()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setLength(long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.isExists()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setExists(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.isDirectory()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileEntry.setDirectory(boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter.accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter.accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter(long, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter.accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.SizeFileFilter.toString()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.HiddenFileFilter.accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(java.lang.String, long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter(byte[], long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter.accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.MagicNumberFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.addFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.removeFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.setFileFilters(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.OrFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils()"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.io.File...)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.filter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.directoryFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.fileFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.andFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.orFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.and(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.or(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter...)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.notFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.trueFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.falseFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.asFileFilter(java.io.FilenameFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(long, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.sizeFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.sizeFileFilter(long, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(long, long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String, long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[], long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeCVSAware(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeSVNAware(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.FileFilterUtils.makeFileOnly(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["org.sonar.api.internal.apachecommons.io.CopyUtils", "org.sonar.api.internal.apachecommons.io.CopyUtils()"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(byte[], java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(byte[], java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(byte[], java.io.Writer, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.InputStream, java.io.OutputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.Reader, java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.CopyUtils.copy(java.lang.String, java.io.Writer)"], ["org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer()"], ["org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream(java.io.InputStream, boolean)"], ["int", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream.read()"], ["void", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.WindowsLineEndingInputStream.void mark(int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder, int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.Charset, int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.ReaderInputStream", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream(java.io.Reader)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.read(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.read(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.read()"], ["void", "org.sonar.api.internal.apachecommons.io.input.ReaderInputStream.close()"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset, int)"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream(java.lang.CharSequence, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.read(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.read(byte[])"], ["long", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.skip(long)"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.available()"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.void reset()"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.CharSequenceInputStream.markSupported()"], ["org.sonar.api.internal.apachecommons.io.input.ClassLoaderObjectInputStream", "org.sonar.api.internal.apachecommons.io.input.ClassLoaderObjectInputStream(java.lang.ClassLoader, java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.io.input.TeeInputStream", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream(java.io.InputStream, java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.io.input.TeeInputStream", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream(java.io.InputStream, java.io.OutputStream, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.close()"], ["int", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.read(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.TeeInputStream.read(byte[])"], ["org.sonar.api.internal.apachecommons.io.input.ObservableInputStream", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.add(org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.remove(org.sonar.api.internal.apachecommons.io.input.ObservableInputStream$Observer)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.removeAllObservers()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.read(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.read(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.close()"], ["void", "org.sonar.api.internal.apachecommons.io.input.ObservableInputStream.consume()"], ["org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream(java.io.InputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readBoolean()"], ["byte", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readByte()"], ["char", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readChar()"], ["double", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readDouble()"], ["float", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readFloat()"], ["void", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readFully(byte[])"], ["void", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readFully(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readInt()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readLine()"], ["long", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readLong()"], ["short", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readShort()"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readUnsignedByte()"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readUnsignedShort()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.readUTF()"], ["int", "org.sonar.api.internal.apachecommons.io.input.SwappedDataInputStream.skipBytes(int)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getBomEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getXmlGuessEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getXmlEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getContentTypeMime()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReaderException.getContentTypeEncoding()"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean, int)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long, boolean, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener, long)"], ["org.sonar.api.internal.apachecommons.io.input.Tailer", "org.sonar.api.internal.apachecommons.io.input.Tailer.create(java.io.File, org.sonar.api.internal.apachecommons.io.input.TailerListener)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.input.Tailer.getFile()"], ["long", "org.sonar.api.internal.apachecommons.io.input.Tailer.getDelay()"], ["void", "org.sonar.api.internal.apachecommons.io.input.Tailer.run()"], ["void", "org.sonar.api.internal.apachecommons.io.input.Tailer.stop()"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(java.lang.Class<?>...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(java.lang.Class<?>...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(java.lang.String...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(java.lang.String...)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(java.util.regex.Pattern)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(java.util.regex.Pattern)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.accept(org.sonar.api.internal.apachecommons.io.serialization.ClassNameMatcher)"], ["org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream", "org.sonar.api.internal.apachecommons.io.serialization.ValidatingObjectInputStream.reject(org.sonar.api.internal.apachecommons.io.serialization.ClassNameMatcher)"], ["org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream()"], ["org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.write(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.void write(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.int write(java.io.InputStream)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.int size()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.void reset()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.void writeTo(java.io.OutputStream)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toBufferedInputStream(java.io.InputStream, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.java.io.InputStream toInputStream()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.byte[] toByteArray()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toString(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.ByteArrayOutputStream.toString(java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.NullOutputStream", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream()"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullOutputStream.write(byte[])"], ["org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream", "org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream(T)"], ["void", "org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream.write(int)"], ["T", "org.sonar.api.internal.apachecommons.io.output.AppendableOutputStream.getAppendable()"], ["org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream()"], ["java.io.OutputStream", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.close()"], ["void", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.DemuxOutputStream.write(int)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.lang.String, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.Charset, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.CharsetEncoder)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.lang.String, java.nio.charset.CharsetEncoder, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.lang.String, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.Charset, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.CharsetEncoder)"], ["org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding(java.io.File, java.nio.charset.CharsetEncoder, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(char[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.write(java.lang.String, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.FileWriterWithEncoding.close()"], ["org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.write(byte[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyOutputStream.close()"], ["org.sonar.api.internal.apachecommons.io.FilenameUtils", "org.sonar.api.internal.apachecommons.io.FilenameUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalize(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.concat(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.directoryContains(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.separatorsToUnix(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.separatorsToWindows(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.separatorsToSystem(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPrefixLength(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.FilenameUtils.indexOfExtension(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPrefix(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPath(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getFullPath(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getBaseName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.getExtension(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FilenameUtils.removeExtension(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equals(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equalsOnSystem(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equalsNormalized(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.equals(java.lang.String, java.lang.String, boolean, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String[])"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.isExtension(java.lang.String, java.util.Collection<java.lang.String>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.FileCleaner", "org.sonar.api.internal.apachecommons.io.FileCleaner()"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.io.File, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.io.File, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaner.track(java.lang.String, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["int", "org.sonar.api.internal.apachecommons.io.FileCleaner.getTrackCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.FileCleaner.void exitWhenFinished()"], ["org.sonar.api.internal.apachecommons.io.FileCleaningTracker", "org.sonar.api.internal.apachecommons.io.FileCleaner.getInstance()"], ["org.sonar.api.internal.apachecommons.io.IOUtils", "org.sonar.api.internal.apachecommons.io.IOUtils()"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.close(java.net.URLConnection)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Reader)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Closeable)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.io.Closeable...)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.net.Socket)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.nio.channels.Selector)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.closeQuietly(java.net.ServerSocket)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedInputStream(java.io.InputStream)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedInputStream(java.io.InputStream, int)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedReader(java.io.Reader)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.toBufferedReader(java.io.Reader, int)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Reader)"], ["java.io.BufferedReader", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Reader, int)"], ["java.io.BufferedWriter", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Writer)"], ["java.io.BufferedWriter", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.Writer, int)"], ["java.io.BufferedOutputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.OutputStream)"], ["java.io.BufferedOutputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.OutputStream, int)"], ["java.io.BufferedInputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.InputStream)"], ["java.io.BufferedInputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.buffer(java.io.InputStream, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.InputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.InputStream, long)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.InputStream, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.Reader)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.Reader, java.nio.charset.Charset)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.io.Reader, java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.net.URI)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.net.URL)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toByteArray(java.net.URLConnection)"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.InputStream)"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.InputStream, java.nio.charset.Charset)"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.InputStream, java.lang.String)"], ["char[]", "org.sonar.api.internal.apachecommons.io.IOUtils.toCharArray(java.io.Reader)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.InputStream, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.InputStream, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.io.Reader)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URI)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URI, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URI, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URL)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URL, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(java.net.URL, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(byte[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.toString(byte[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToString(java.lang.String, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToString(java.lang.String, java.nio.charset.Charset, java.lang.ClassLoader)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToByteArray(java.lang.String)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToByteArray(java.lang.String, java.lang.ClassLoader)"], ["java.net.URL", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToURL(java.lang.String)"], ["java.net.URL", "org.sonar.api.internal.apachecommons.io.IOUtils.resourceToURL(java.lang.String, java.lang.ClassLoader)"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.IOUtils.lineIterator(java.io.Reader)"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.IOUtils.lineIterator(java.io.InputStream, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.IOUtils.lineIterator(java.io.InputStream, java.lang.String)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.CharSequence)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.CharSequence, java.nio.charset.Charset)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.CharSequence, java.lang.String)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.String)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.String, java.nio.charset.Charset)"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.IOUtils.toInputStream(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeChunked(byte[], java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.Writer, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(byte[], java.io.Writer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeChunked(char[], java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.OutputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(char[], java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.StringBuffer, java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer)"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream, int)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, byte[])"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long, byte[])"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.Writer)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, char[])"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long, char[])"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOUtils.contentEquals(java.io.InputStream, java.io.InputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOUtils.contentEquals(java.io.Reader, java.io.Reader)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader, java.io.Reader)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.skip(java.io.InputStream, long)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel, long)"], ["long", "org.sonar.api.internal.apachecommons.io.IOUtils.skip(java.io.Reader, long)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.skipFully(java.io.InputStream, long)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel, long)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.skipFully(java.io.Reader, long)"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.Reader, char[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.Reader, char[])"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.InputStream, byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.io.InputStream, byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.IOUtils.read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.Reader, char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.Reader, char[])"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.InputStream, byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.InputStream, byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.io.InputStream, int)"], ["void", "org.sonar.api.internal.apachecommons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)"], ["org.sonar.api.internal.apachecommons.io.FileCleaningTracker", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker()"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.io.File, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.io.File, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object, org.sonar.api.internal.apachecommons.io.FileDeleteStrategy)"], ["int", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.getTrackCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker.void exitWhenFinished()"], ["org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException(java.io.File, int)"], ["org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException(java.lang.String, java.io.File, int)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException.getFile()"], ["int", "org.sonar.api.internal.apachecommons.io.DirectoryWalker$CancelException.getDepth()"], ["org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.NameFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.LastModifiedFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator(org.sonar.api.internal.apachecommons.io.IOCase)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ExtensionFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.Charsets", "org.sonar.api.internal.apachecommons.io.Charsets()"], ["java.util.SortedMap<java.lang.String, java.nio.charset.Charset>", "org.sonar.api.internal.apachecommons.io.Charsets.requiredCharsets()"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.io.Charsets.toCharset(java.nio.charset.Charset)"], ["java.nio.charset.Charset", "org.sonar.api.internal.apachecommons.io.Charsets.toCharset(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onStart(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onDirectoryCreate(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onDirectoryChange(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onDirectoryDelete(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onFileCreate(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onFileChange(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onFileDelete(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListenerAdaptor.onStop(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(long)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(long, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.util.Date)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.util.Date, boolean)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter(java.io.File, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter.accept(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.AgeFileFilter.toString()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.FalseFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.FalseFileFilter.accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.CanWriteFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.EmptyFileFilter.accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.RegexFileFilter.accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.TrueFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.TrueFileFilter.accept(java.io.File, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker$Reaper.run()"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream$MessageDigestMaintainingObserver(java.security.MessageDigest)"], ["org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream", "org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.CloseShieldInputStream.close()"], ["org.sonar.api.internal.apachecommons.io.input.BoundedInputStream", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream(java.io.InputStream, long)"], ["org.sonar.api.internal.apachecommons.io.input.BoundedInputStream", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream(java.io.InputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.read(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.read(byte[], int, int)"], ["long", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.skip(long)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.available()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.toString()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.void reset()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.markSupported()"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.isPropagateClose()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedInputStream.setPropagateClose(boolean)"], ["org.sonar.api.internal.apachecommons.io.input.ProxyReader", "org.sonar.api.internal.apachecommons.io.input.ProxyReader(java.io.Reader)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read(char[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read(char[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.read(java.nio.CharBuffer)"], ["long", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.skip(long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.ready()"], ["void", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.void reset()"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.ProxyReader.markSupported()"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream, java.security.MessageDigest)"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream(java.io.InputStream)"], ["java.security.MessageDigest", "org.sonar.api.internal.apachecommons.io.input.MessageDigestCalculatingInputStream.getMessageDigest()"], ["org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream", "org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.AutoCloseInputStream.close()"], ["org.sonar.api.internal.apachecommons.io.input.ProxyInputStream", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream(java.io.InputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.read(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.read(byte[], int, int)"], ["long", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.skip(long)"], ["int", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.available()"], ["void", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.void reset()"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.ProxyInputStream.markSupported()"], ["org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher(java.lang.String...)"], ["boolean", "org.sonar.api.internal.apachecommons.io.serialization.FullClassNameMatcher.matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream", "org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream(java.io.OutputStream, int)"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream", "org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ChunkedOutputStream.write(byte[], int, int)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.lang.String, boolean, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, boolean, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.nio.charset.Charset, boolean, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.LockableFileWriter", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter(java.io.File, java.lang.String, boolean, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.close()"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(char[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.write(java.lang.String, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.LockableFileWriter.flush()"], ["org.sonar.api.internal.apachecommons.io.output.ProxyWriter", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter(java.io.Writer)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(char)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(char[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.write(java.lang.String, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.close()"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(char)"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.ProxyWriter.append(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream(java.io.IOException)"], ["org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream()"], ["void", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.BrokenOutputStream.close()"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, int, java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, java.lang.String, java.lang.String, java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream(int, int, java.lang.String, java.lang.String, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.isInMemory()"], ["byte[]", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.getData()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.getFile()"], ["void", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.close()"], ["void", "org.sonar.api.internal.apachecommons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.TaggedIOException.isTaggedWith(java.lang.Throwable, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.io.TaggedIOException.throwCauseIfTaggedWith(java.lang.Throwable, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.TaggedIOException", "org.sonar.api.internal.apachecommons.io.TaggedIOException(java.io.IOException, java.io.Serializable)"], ["java.io.Serializable", "org.sonar.api.internal.apachecommons.io.TaggedIOException.getTag()"], ["java.io.IOException", "org.sonar.api.internal.apachecommons.io.TaggedIOException.getCause()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.io.TaggedIOException.getCause()"], ["org.sonar.api.internal.apachecommons.io.IOExceptionWithCause", "org.sonar.api.internal.apachecommons.io.IOExceptionWithCause(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.io.IOExceptionWithCause", "org.sonar.api.internal.apachecommons.io.IOExceptionWithCause(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.io.FileSystemUtils", "org.sonar.api.internal.apachecommons.io.FileSystemUtils()"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpace(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb(java.lang.String, long)"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb()"], ["long", "org.sonar.api.internal.apachecommons.io.FileSystemUtils.freeSpaceKb(long)"], ["java.lang.Thread", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.start(long)"], ["java.lang.Thread", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.start(java.lang.Thread, long)"], ["void", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.stop(java.lang.Thread)"], ["void", "org.sonar.api.internal.apachecommons.io.ThreadMonitor.run()"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.LineIterator(java.io.Reader)"], ["boolean", "org.sonar.api.internal.apachecommons.io.LineIterator.hasNext()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.LineIterator.next()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.LineIterator.nextLine()"], ["void", "org.sonar.api.internal.apachecommons.io.LineIterator.close()"], ["void", "org.sonar.api.internal.apachecommons.io.LineIterator.remove()"], ["void", "org.sonar.api.internal.apachecommons.io.LineIterator.closeQuietly(org.sonar.api.internal.apachecommons.io.LineIterator)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.io.LineIterator.next()"], ["org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator(java.util.Comparator<java.io.File>)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator.toString()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.ReverseComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator()"], ["org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator(boolean)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.SizeFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator(java.util.Comparator<java.io.File>...)"], ["org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator(java.lang.Iterable<java.util.Comparator<java.io.File>>)"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.CompositeFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String, java.io.FileFilter)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.lang.String, java.io.FileFilter, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File, java.io.FileFilter)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver(java.io.File, java.io.FileFilter, org.sonar.api.internal.apachecommons.io.IOCase)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.getDirectory()"], ["java.io.FileFilter", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.getFileFilter()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.addListener(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.removeListener(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationListener)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.initialize()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.destroy()"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.checkAndNotify()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter(java.util.List<java.lang.String>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter.accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.WildcardFilter.accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.NameFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.SuffixFileFilter.toString()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream$1.compare(org.sonar.api.internal.apachecommons.io.ByteOrderMark, org.sonar.api.internal.apachecommons.io.ByteOrderMark)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream$1.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream(java.io.InputStream, boolean)"], ["int", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream.read()"], ["void", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.UnixLineEndingInputStream.void mark(int)"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, int, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader(java.io.File, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader.readLine()"], ["void", "org.sonar.api.internal.apachecommons.io.input.ReversedLinesFileReader.close()"], ["org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter()"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.init(org.sonar.api.internal.apachecommons.io.input.Tailer)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.fileNotFound()"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.fileRotated()"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.handle(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.handle(java.lang.Exception)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TailerListenerAdapter.endOfFileReached()"], ["org.sonar.api.internal.apachecommons.io.input.ClosedInputStream", "org.sonar.api.internal.apachecommons.io.input.ClosedInputStream()"], ["int", "org.sonar.api.internal.apachecommons.io.input.ClosedInputStream.read()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.getDefaultEncoding()"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, boolean, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.net.URL)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.net.URLConnection, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String, boolean, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.input.XmlStreamReader", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader(java.io.InputStream, java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.getEncoding()"], ["int", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.read(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.input.XmlStreamReader.close()"], ["org.sonar.api.internal.apachecommons.io.input.NullInputStream", "org.sonar.api.internal.apachecommons.io.input.NullInputStream(long)"], ["org.sonar.api.internal.apachecommons.io.input.NullInputStream", "org.sonar.api.internal.apachecommons.io.input.NullInputStream(long, boolean, boolean)"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.getPosition()"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.getSize()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.available()"], ["void", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.markSupported()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.read(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.read(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.void reset()"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullInputStream.skip(long)"], ["org.sonar.api.internal.apachecommons.io.input.NullReader", "org.sonar.api.internal.apachecommons.io.input.NullReader(long)"], ["org.sonar.api.internal.apachecommons.io.input.NullReader", "org.sonar.api.internal.apachecommons.io.input.NullReader(long, boolean, boolean)"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullReader.getPosition()"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullReader.getSize()"], ["void", "org.sonar.api.internal.apachecommons.io.input.NullReader.close()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullReader.void mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.NullReader.markSupported()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullReader.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullReader.read(char[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.NullReader.read(char[], int, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.NullReader.void reset()"], ["long", "org.sonar.api.internal.apachecommons.io.input.NullReader.skip(long)"], ["org.sonar.api.internal.apachecommons.io.input.TaggedInputStream", "org.sonar.api.internal.apachecommons.io.input.TaggedInputStream(java.io.InputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.TaggedInputStream.isCauseOf(java.lang.Throwable)"], ["void", "org.sonar.api.internal.apachecommons.io.input.TaggedInputStream.throwIfCauseOf(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.io.HexDump", "org.sonar.api.internal.apachecommons.io.HexDump()"], ["void", "org.sonar.api.internal.apachecommons.io.HexDump.dump(byte[], long, java.io.OutputStream, int)"], ["org.sonar.api.internal.apachecommons.io.output.TeeOutputStream", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream(java.io.OutputStream, java.io.OutputStream)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.void write(byte[])"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.void write(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.void write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.TeeOutputStream.close()"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedWriter", "org.sonar.api.internal.apachecommons.io.output.ChunkedWriter(java.io.Writer, int)"], ["org.sonar.api.internal.apachecommons.io.output.ChunkedWriter", "org.sonar.api.internal.apachecommons.io.output.ChunkedWriter(java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ChunkedWriter.write(char[], int, int)"], ["org.sonar.api.internal.apachecommons.io.output.NullWriter", "org.sonar.api.internal.apachecommons.io.output.NullWriter()"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(char)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(char[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.write(java.lang.String, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.NullWriter.close()"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(char)"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.NullWriter.append(java.lang.CharSequence)"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.OutputStream)"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.OutputStream, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.getEncoding()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.getDefaultEncoding()"], ["void", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.close()"], ["void", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.XmlStreamWriter.write(char[], int, int)"], ["org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream", "org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ClosedOutputStream.flush()"], ["org.sonar.api.internal.apachecommons.io.output.CountingOutputStream", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream(java.io.OutputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.getCount()"], ["int", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.resetCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.long getByteCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.output.CountingOutputStream.long resetByteCount()"], ["java.nio.ByteOrder", "org.sonar.api.internal.apachecommons.io.ByteOrderParser.parseByteOrder(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.FileExistsException", "org.sonar.api.internal.apachecommons.io.FileExistsException()"], ["org.sonar.api.internal.apachecommons.io.FileExistsException", "org.sonar.api.internal.apachecommons.io.FileExistsException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.FileExistsException", "org.sonar.api.internal.apachecommons.io.FileExistsException(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker$Tracker.getPath()"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileCleaningTracker$Tracker.delete()"], ["org.sonar.api.internal.apachecommons.io.IOCase[]", "org.sonar.api.internal.apachecommons.io.IOCase.values()"], ["org.sonar.api.internal.apachecommons.io.IOCase", "org.sonar.api.internal.apachecommons.io.IOCase.valueOf(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.IOCase", "org.sonar.api.internal.apachecommons.io.IOCase.forName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOCase.getName()"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.isCaseSensitive()"], ["int", "org.sonar.api.internal.apachecommons.io.IOCase.checkCompareTo(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkEquals(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkStartsWith(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkEndsWith(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.io.IOCase.checkIndexOf(java.lang.String, int, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.IOCase.checkRegionMatches(java.lang.String, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.IOCase.toString()"], ["org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator()"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.compare(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.toString()"], ["java.util.List", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.sort(java.util.List)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.sort(java.io.File[])"], ["int", "org.sonar.api.internal.apachecommons.io.comparator.DefaultFileComparator.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.io.ByteOrderMark", "org.sonar.api.internal.apachecommons.io.ByteOrderMark(java.lang.String, int...)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.getCharsetName()"], ["int", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.length()"], ["int", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.get(int)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.getBytes()"], ["boolean", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.ByteOrderMark.toString()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor()"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor(long)"], ["org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor(long, org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver...)"], ["long", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.getInterval()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void setThreadFactory(java.util.concurrent.ThreadFactory)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.addObserver(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.removeObserver(org.sonar.api.internal.apachecommons.io.monitor.FileAlterationObserver)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void start()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void stop()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.void stop(long)"], ["void", "org.sonar.api.internal.apachecommons.io.monitor.FileAlterationMonitor.run()"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String, org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.lang.String[], org.sonar.api.internal.apachecommons.io.IOCase)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter(java.util.List<java.lang.String>, org.sonar.api.internal.apachecommons.io.IOCase)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.PrefixFileFilter.toString()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.DirectoryFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.FileFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.CanReadFileFilter.accept(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter(java.io.FilenameFilter)"], ["org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter(java.io.FileFilter)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.DelegateFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter()"], ["org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter, org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.addFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.removeFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.setFileFilters(java.util.List<org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.AndFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter()"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.AbstractFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter(org.sonar.api.internal.apachecommons.io.filefilter.IOFileFilter)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter.accept(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter.accept(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.filefilter.NotFileFilter.toString()"], ["org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream", "org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream(byte[])"], ["int", "org.sonar.api.internal.apachecommons.io.input.InfiniteCircularInputStream.read()"], ["org.sonar.api.internal.apachecommons.io.input.CharSequenceReader", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.close()"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.mark(int)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.markSupported()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.read(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.reset()"], ["long", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.skip(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.CharSequenceReader.toString()"], ["org.sonar.api.internal.apachecommons.io.input.CountingInputStream", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream(java.io.InputStream)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.long skip(long)"], ["int", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.getCount()"], ["int", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.resetCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.long getByteCount()"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.CountingInputStream.long resetByteCount()"], ["org.sonar.api.internal.apachecommons.io.input.BrokenInputStream", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream(java.io.IOException)"], ["org.sonar.api.internal.apachecommons.io.input.BrokenInputStream", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.available()"], ["long", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.skip(long)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.void reset()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BrokenInputStream.close()"], ["org.sonar.api.internal.apachecommons.io.input.BoundedReader", "org.sonar.api.internal.apachecommons.io.input.BoundedReader(java.io.Reader, int)"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.close()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.reset()"], ["void", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.mark(int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BoundedReader.read(char[], int, int)"], ["org.sonar.api.internal.apachecommons.io.input.DemuxInputStream", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream()"], ["java.io.InputStream", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream.bindStream(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream.close()"], ["int", "org.sonar.api.internal.apachecommons.io.input.DemuxInputStream.read()"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, boolean)"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, org.sonar.api.internal.apachecommons.io.ByteOrderMark...)"], ["org.sonar.api.internal.apachecommons.io.input.BOMInputStream", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream(java.io.InputStream, boolean, org.sonar.api.internal.apachecommons.io.ByteOrderMark...)"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.hasBOM()"], ["boolean", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.hasBOM(org.sonar.api.internal.apachecommons.io.ByteOrderMark)"], ["org.sonar.api.internal.apachecommons.io.ByteOrderMark", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.getBOM()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.getBOMCharsetName()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.read()"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.read(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.read(byte[])"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.void mark(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.void reset()"], ["long", "org.sonar.api.internal.apachecommons.io.input.BOMInputStream.skip(long)"], ["org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.apachecommons.io.serialization.RegexpClassNameMatcher.matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher", "org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.io.serialization.WildcardClassNameMatcher.matches(java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream", "org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream(java.io.OutputStream)"], ["boolean", "org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream.isCauseOf(java.lang.Exception)"], ["void", "org.sonar.api.internal.apachecommons.io.output.TaggedOutputStream.throwIfCauseOf(java.lang.Exception)"], ["org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream", "org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.output.CloseShieldOutputStream.close()"], ["org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.write(byte[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.close()"], ["int", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.getThreshold()"], ["long", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.getByteCount()"], ["boolean", "org.sonar.api.internal.apachecommons.io.output.ThresholdingOutputStream.isThresholdExceeded()"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.CharsetDecoder, int, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.Charset, int, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.nio.charset.Charset)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.lang.String, int, boolean)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.output.WriterOutputStream", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream(java.io.Writer)"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.write(byte[])"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.write(int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.WriterOutputStream.close()"], ["org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter()"], ["org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter(int)"], ["org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter(java.lang.StringBuilder)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(char)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence)"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.close()"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.flush()"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.write(char[], int, int)"], ["java.lang.StringBuilder", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.getBuilder()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.toString()"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(char)"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.io.output.StringBuilderWriter.append(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileDeleteStrategy.deleteQuietly(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileDeleteStrategy.delete(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileDeleteStrategy.toString()"], ["org.sonar.api.internal.apachecommons.io.EndianUtils", "org.sonar.api.internal.apachecommons.io.EndianUtils()"], ["short", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapShort(short)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapInteger(int)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapLong(long)"], ["float", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapFloat(float)"], ["double", "org.sonar.api.internal.apachecommons.io.EndianUtils.swapDouble(double)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedShort(byte[], int, short)"], ["short", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedShort(byte[], int)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedShort(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedInteger(byte[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedInteger(byte[], int)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedInteger(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedLong(byte[], int, long)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedLong(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedFloat(byte[], int, float)"], ["float", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedFloat(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedDouble(byte[], int, double)"], ["double", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedDouble(byte[], int)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedShort(java.io.OutputStream, short)"], ["short", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedShort(java.io.InputStream)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream, int)"], ["int", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedInteger(java.io.InputStream)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedLong(java.io.OutputStream, long)"], ["long", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedLong(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream, float)"], ["float", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedFloat(java.io.InputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream, double)"], ["double", "org.sonar.api.internal.apachecommons.io.EndianUtils.readSwappedDouble(java.io.InputStream)"], ["org.sonar.api.internal.apachecommons.io.FileUtils", "org.sonar.api.internal.apachecommons.io.FileUtils()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getFile(java.io.File, java.lang.String...)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getFile(java.lang.String...)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.getTempDirectoryPath()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getTempDirectory()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.getUserDirectoryPath()"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.getUserDirectory()"], ["java.io.FileInputStream", "org.sonar.api.internal.apachecommons.io.FileUtils.openInputStream(java.io.File)"], ["java.io.FileOutputStream", "org.sonar.api.internal.apachecommons.io.FileUtils.openOutputStream(java.io.File)"], ["java.io.FileOutputStream", "org.sonar.api.internal.apachecommons.io.FileUtils.openOutputStream(java.io.File, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.byteCountToDisplaySize(long)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.touch(java.io.File)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.FileUtils.convertFileCollectionToFileArray(java.util.Collection<java.io.File>)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.contentEquals(java.io.File, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String)"], ["java.io.File", "org.sonar.api.internal.apachecommons.io.FileUtils.toFile(java.net.URL)"], ["java.io.File[]", "org.sonar.api.internal.apachecommons.io.FileUtils.toFiles(java.net.URL[])"], ["java.net.URL[]", "org.sonar.api.internal.apachecommons.io.FileUtils.toURLs(java.io.File[])"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFile(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFile(java.io.File, java.io.File, boolean)"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.copyFile(java.io.File, java.io.OutputStream)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectoryToDirectory(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File, int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyInputStreamToFile(java.io.InputStream, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyToFile(java.io.InputStream, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyToDirectory(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.copyToDirectory(java.lang.Iterable<java.io.File>, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.deleteDirectory(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.deleteQuietly(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.directoryContains(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.cleanDirectory(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.waitFor(java.io.File, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToString(java.io.File, java.nio.charset.Charset)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToString(java.io.File, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToString(java.io.File)"], ["byte[]", "org.sonar.api.internal.apachecommons.io.FileUtils.readFileToByteArray(java.io.File)"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.FileUtils.lineIterator(java.io.File, java.lang.String)"], ["org.sonar.api.internal.apachecommons.io.LineIterator", "org.sonar.api.internal.apachecommons.io.FileUtils.lineIterator(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.nio.charset.Charset, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.nio.charset.Charset, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[])"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceDelete(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceDeleteOnExit(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceMkdir(java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.forceMkdirParent(java.io.File)"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOf(java.io.File)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOfAsBigInteger(java.io.File)"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOfDirectory(java.io.File)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileNewer(java.io.File, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileNewer(java.io.File, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileNewer(java.io.File, long)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileOlder(java.io.File, java.io.File)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileOlder(java.io.File, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isFileOlder(java.io.File, long)"], ["long", "org.sonar.api.internal.apachecommons.io.FileUtils.checksumCRC32(java.io.File)"], ["java.util.zip.Checksum", "org.sonar.api.internal.apachecommons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveDirectory(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveFile(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, boolean)"], ["void", "org.sonar.api.internal.apachecommons.io.FileUtils.moveToDirectory(java.io.File, java.io.File, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.io.FileUtils.isSymlink(java.io.File)"], ["org.sonar.api.internal.apachecommons.lang.ArrayUtils", "org.sonar.api.internal.apachecommons.lang.ArrayUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toString(java.lang.Object, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.hashCode(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEquals(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toMap(java.lang.Object[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(java.lang.Object[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(long[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(int[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(short[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(byte[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(double[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(float[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.clone(boolean[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Object[])"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.String[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(long[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(int[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(short[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(byte[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(double[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(float[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(boolean[])"], ["java.lang.Long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Long[])"], ["java.lang.Integer[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Integer[])"], ["java.lang.Short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Short[])"], ["java.lang.Character[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Character[])"], ["java.lang.Byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Byte[])"], ["java.lang.Double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Double[])"], ["java.lang.Float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Float[])"], ["java.lang.Boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.nullToEmpty(java.lang.Boolean[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(java.lang.Object[], int, int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(long[], int, int)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(int[], int, int)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(short[], int, int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(char[], int, int)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(byte[], int, int)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(double[], int, int)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(float[], int, int)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.subarray(boolean[], int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(java.lang.Object[], java.lang.Object[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(long[], long[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(int[], int[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(short[], short[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(char[], char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(byte[], byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(double[], double[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(float[], float[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameLength(boolean[], boolean[])"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.getLength(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isSameType(java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(java.lang.Object[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(long[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(int[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(short[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(char[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(byte[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(double[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(float[])"], ["void", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.reverse(boolean[])"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(java.lang.Object[], java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(java.lang.Object[], java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(long[], long)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(long[], long, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(long[], long)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(long[], long, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(long[], long)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(int[], int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(int[], int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(int[], int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(int[], int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(int[], int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(short[], short)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(short[], short, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(short[], short)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(short[], short, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(short[], short)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(char[], char)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(char[], char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(char[], char)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(char[], char, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(char[], char)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(byte[], byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(byte[], byte, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(byte[], byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(byte[], byte, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(byte[], byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(double[], double, int, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(double[], double, int, double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(double[], double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(double[], double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(float[], float)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(float[], float, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(float[], float)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(float[], float, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(float[], float)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(boolean[], boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.indexOf(boolean[], boolean, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(boolean[], boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.lastIndexOf(boolean[], boolean, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.contains(boolean[], boolean)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Character[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Character[], char)"], ["java.lang.Character[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(char[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Long[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Long[], long)"], ["java.lang.Long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(long[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Integer[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Integer[], int)"], ["java.lang.Integer[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(int[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Short[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Short[], short)"], ["java.lang.Short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(short[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Byte[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Byte[], byte)"], ["java.lang.Byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(byte[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Double[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Double[], double)"], ["java.lang.Double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(double[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Float[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Float[], float)"], ["java.lang.Float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(float[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Boolean[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toPrimitive(java.lang.Boolean[], boolean)"], ["java.lang.Boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.toObject(boolean[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(java.lang.Object[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(long[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(int[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(short[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(double[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(float[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isEmpty(boolean[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(java.lang.Object[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(long[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(int[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(short[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(byte[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(double[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(float[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.isNotEmpty(boolean[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(java.lang.Object[], java.lang.Object[])"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(boolean[], boolean[])"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(char[], char[])"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(byte[], byte[])"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(short[], short[])"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(int[], int[])"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(long[], long[])"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(float[], float[])"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.addAll(double[], double[])"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(java.lang.Object[], java.lang.Object)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(boolean[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(byte[], byte)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(char[], char)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(double[], double)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(float[], float)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(int[], int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(long[], long)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(short[], short)"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(java.lang.Object[], int, java.lang.Object)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(boolean[], int, boolean)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(char[], int, char)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(byte[], int, byte)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(short[], int, short)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(int[], int, int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(long[], int, long)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(float[], int, float)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.add(double[], int, double)"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(java.lang.Object[], int)"], ["java.lang.Object[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(java.lang.Object[], java.lang.Object)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(boolean[], int)"], ["boolean[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(boolean[], boolean)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(byte[], int)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(byte[], byte)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(char[], int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(char[], char)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(double[], int)"], ["double[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(double[], double)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(float[], int)"], ["float[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(float[], float)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(int[], int)"], ["int[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(int[], int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(long[], int)"], ["long[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(long[], long)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.remove(short[], int)"], ["short[]", "org.sonar.api.internal.apachecommons.lang.ArrayUtils.removeElement(short[], short)"], ["org.sonar.api.internal.apachecommons.lang.BitField", "org.sonar.api.internal.apachecommons.lang.BitField(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.getValue(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.getShortValue(short)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.getRawValue(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.getShortRawValue(short)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BitField.isSet(int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BitField.isAllSet(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.setValue(int, int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.setShortValue(short, short)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.clear(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.clearShort(short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.BitField.clearByte(byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.set(int)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.setShort(short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.BitField.setByte(byte)"], ["int", "org.sonar.api.internal.apachecommons.lang.BitField.setBoolean(int, boolean)"], ["short", "org.sonar.api.internal.apachecommons.lang.BitField.setShortBoolean(short, boolean)"], ["byte", "org.sonar.api.internal.apachecommons.lang.BitField.setByteBoolean(byte, boolean)"], ["org.sonar.api.internal.apachecommons.lang.BooleanUtils", "org.sonar.api.internal.apachecommons.lang.BooleanUtils()"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.negate(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isTrue(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isNotTrue(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isFalse(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.isNotFalse(java.lang.Boolean)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanDefaultIfNull(java.lang.Boolean, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(int)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(int)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.Integer)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(int, int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(int, int, int, int)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["int", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toInteger(boolean)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(boolean)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(java.lang.Boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toInteger(boolean, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toInteger(java.lang.Boolean, int, int, int)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(boolean, java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toIntegerObject(java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Integer)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.String)"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBooleanObject(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toBoolean(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringTrueFalse(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringOnOff(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringYesNo(java.lang.Boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toString(java.lang.Boolean, java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringTrueFalse(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringOnOff(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toStringYesNo(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.toString(boolean, java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.xor(boolean[])"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.BooleanUtils.xor(java.lang.Boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder()"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, java.util.Collection)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.reflectionCompare(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.appendSuper(int)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object, java.util.Comparator)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(long, long)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(int, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(short, short)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(char, char)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(byte, byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(double, double)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(float, float)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(boolean, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object[], java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(java.lang.Object[], java.lang.Object[], java.util.Comparator)"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(long[], long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(int[], int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(short[], short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(char[], char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(byte[], byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(double[], double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(float[], float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.append(boolean[], boolean[])"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.CompareToBuilder.toComparison()"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.util.Collection)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, java.lang.String[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reflectionEquals(java.lang.Object, java.lang.Object, boolean, java.lang.Class, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.appendSuper(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(long, long)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(int, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(short, short)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(char, char)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(byte, byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(double, double)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(float, float)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(boolean, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(long[], long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(int[], int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(short[], short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(char[], char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(byte[], byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(double[], double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(float[], float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.append(boolean[], boolean[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.isEquals()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.EqualsBuilder.reset()"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(int, int, java.lang.Object, boolean, java.lang.Class, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, java.util.Collection)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.reflectionHashCode(java.lang.Object, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder()"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder(int, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(char)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(double)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(float)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(int)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(long)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(short)"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.append(short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.appendSuper(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.toHashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.HashCodeBuilder.hashCode()"], ["org.sonar.api.internal.apachecommons.lang.builder.IDKey", "org.sonar.api.internal.apachecommons.lang.builder.IDKey(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.builder.IDKey.hashCode()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.IDKey.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, boolean, java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.util.Collection)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toStringExclude(java.lang.Object, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class, boolean, boolean)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.getExcludeFieldNames()"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.getUpToClass()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.isAppendStatics()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.isAppendTransients()"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.reflectionAppendArray(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setAppendStatics(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setAppendTransients(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setExcludeFieldNames(java.lang.String[])"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.setUpToClass(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ReflectionToStringBuilder.toString()"], ["org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseClassName()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseClassName(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseShortClassName()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isShortClassName()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseShortClassName(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setShortClassName(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseIdentityHashCode()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseIdentityHashCode(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isUseFieldNames()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setUseFieldNames(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isDefaultFullDetail()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setDefaultFullDetail(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isArrayContentDetail()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArrayContentDetail(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getArrayStart()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArrayStart(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getArrayEnd()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArrayEnd(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getArraySeparator()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setArraySeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getContentStart()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setContentStart(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getContentEnd()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setContentEnd(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getFieldNameValueSeparator()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldNameValueSeparator(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getFieldSeparator()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldSeparator(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isFieldSeparatorAtStart()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldSeparatorAtStart(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.isFieldSeparatorAtEnd()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setFieldSeparatorAtEnd(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getNullText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setNullText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSizeStartText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSizeStartText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSizeEndText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSizeEndText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSummaryObjectStartText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSummaryObjectStartText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.getSummaryObjectEndText()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.StandardToStringStyle.setSummaryObjectEndText(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getDefaultStyle()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.setDefaultStyle(org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, boolean, java.lang.Class)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder(java.lang.Object, org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle, java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(char)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(double)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(float)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(int)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(long)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(short)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, boolean[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, boolean[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, byte)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, byte[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, byte[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, char[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, char[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, double)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, double[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, double[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, float)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, float[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, float[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, int[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, int[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, long)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, long[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, long[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object, boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, java.lang.Object[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, short)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, short[])"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.append(java.lang.String, short[], boolean)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.appendAsObjectToString(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.appendSuper(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.appendToString(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getObject()"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getStringBuffer()"], ["org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.getStyle()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.builder.ToStringBuilder.toString()"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendSuper(java.lang.StringBuffer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendToString(java.lang.StringBuffer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendStart(java.lang.StringBuffer, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.appendEnd(java.lang.StringBuffer, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, long[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, int[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, short[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, byte[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, char[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, double[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, float[], java.lang.Boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, boolean[], java.lang.Boolean)"], ["org.sonar.api.internal.apachecommons.lang.CharEncoding", "org.sonar.api.internal.apachecommons.lang.CharEncoding()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharEncoding.isSupported(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange$CharacterIterator.hasNext()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.CharRange$CharacterIterator.next()"], ["void", "org.sonar.api.internal.apachecommons.lang.CharRange$CharacterIterator.remove()"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.is(char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.isNot(char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.isIn(char, char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange.isNotIn(char, char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char, boolean)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char, char)"], ["org.sonar.api.internal.apachecommons.lang.CharRange", "org.sonar.api.internal.apachecommons.lang.CharRange(char, char, boolean)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharRange.getStart()"], ["char", "org.sonar.api.internal.apachecommons.lang.CharRange.getEnd()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.isNegated()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.contains(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.contains(org.sonar.api.internal.apachecommons.lang.CharRange)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharRange.toString()"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.CharRange.iterator()"], ["org.sonar.api.internal.apachecommons.lang.CharSet", "org.sonar.api.internal.apachecommons.lang.CharSet.getInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.CharSet", "org.sonar.api.internal.apachecommons.lang.CharSet.getInstance(java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.CharRange[]", "org.sonar.api.internal.apachecommons.lang.CharSet.getCharRanges()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharSet.contains(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSet.toString()"], ["org.sonar.api.internal.apachecommons.lang.CharSetUtils", "org.sonar.api.internal.apachecommons.lang.CharSetUtils()"], ["org.sonar.api.internal.apachecommons.lang.CharSet", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.evaluateSet(java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.squeeze(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.squeeze(java.lang.String, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.count(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.count(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.keep(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.keep(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.delete(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.delete(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharSetUtils.translate(java.lang.String, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.CharUtils", "org.sonar.api.internal.apachecommons.lang.CharUtils()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.lang.CharUtils.toCharacterObject(char)"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.lang.CharUtils.toCharacterObject(java.lang.String)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.Character)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.Character, char)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.String)"], ["char", "org.sonar.api.internal.apachecommons.lang.CharUtils.toChar(java.lang.String, char)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(char)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(java.lang.Character)"], ["int", "org.sonar.api.internal.apachecommons.lang.CharUtils.toIntValue(java.lang.Character, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.toString(char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.toString(java.lang.Character)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.unicodeEscaped(char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.CharUtils.unicodeEscaped(java.lang.Character)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAscii(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiPrintable(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiControl(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlpha(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlphaUpper(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlphaLower(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiNumeric(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.CharUtils.isAsciiAlphanumeric(char)"], ["org.sonar.api.internal.apachecommons.lang.ClassUtils", "org.sonar.api.internal.apachecommons.lang.ClassUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortClassName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortClassName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortClassName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageName(java.lang.String)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getAllSuperclasses(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getAllInterfaces(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.convertClassNamesToClasses(java.util.List)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.ClassUtils.convertClassesToClassNames(java.util.List)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class[], java.lang.Class[], boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class, java.lang.Class)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isAssignable(java.lang.Class, java.lang.Class, boolean)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.primitiveToWrapper(java.lang.Class)"], ["java.lang.Class[]", "org.sonar.api.internal.apachecommons.lang.ClassUtils.primitivesToWrappers(java.lang.Class[])"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.wrapperToPrimitive(java.lang.Class)"], ["java.lang.Class[]", "org.sonar.api.internal.apachecommons.lang.ClassUtils.wrappersToPrimitives(java.lang.Class[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ClassUtils.isInnerClass(java.lang.Class)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String, boolean)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.ClassLoader, java.lang.String)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.String)"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getClass(java.lang.String, boolean)"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPublicMethod(java.lang.Class, java.lang.String, java.lang.Class[])"], ["java.lang.Class[]", "org.sonar.api.internal.apachecommons.lang.ClassUtils.toClass(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortCanonicalName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortCanonicalName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getShortCanonicalName(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageCanonicalName(java.lang.Object, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageCanonicalName(java.lang.Class)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ClassUtils.getPackageCanonicalName(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap()"], ["org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap.add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap.name(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities$ArrayEntityMap.value(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap()"], ["org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap.add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$BinaryEntityMap.name(int)"], ["org.sonar.api.internal.apachecommons.lang.Entities$HashEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$HashEntityMap()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$LookupEntityMap.name(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$MapIntMap.add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$MapIntMap.name(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities$MapIntMap.value(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities$PrimitiveEntityMap.add(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities$PrimitiveEntityMap.name(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities$PrimitiveEntityMap.value(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.Entities$TreeEntityMap", "org.sonar.api.internal.apachecommons.lang.Entities$TreeEntityMap()"], ["org.sonar.api.internal.apachecommons.lang.Entities", "org.sonar.api.internal.apachecommons.lang.Entities()"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.addEntities(java.lang.String[][])"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.addEntity(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities.entityName(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.Entities.entityValue(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities.escape(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.escape(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.Entities.unescape(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Entities.unescape(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enum.Enum.getName()"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.enum.Enum.getEnumClass()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.enum.Enum.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.Enum.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.Enum.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enum.Enum.toString()"], ["org.sonar.api.internal.apachecommons.lang.enum.EnumUtils", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils()"], ["org.sonar.api.internal.apachecommons.lang.enum.Enum", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnum(java.lang.Class, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnum(java.lang.Class, int)"], ["java.util.Map", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnumMap(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.getEnumList(java.lang.Class)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.enum.EnumUtils.iterator(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum.getValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enum.ValuedEnum.toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enums.Enum.getName()"], ["java.lang.Class", "org.sonar.api.internal.apachecommons.lang.enums.Enum.getEnumClass()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.enums.Enum.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.Enum.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.Enum.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enums.Enum.toString()"], ["org.sonar.api.internal.apachecommons.lang.enums.EnumUtils", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils()"], ["org.sonar.api.internal.apachecommons.lang.enums.Enum", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnum(java.lang.Class, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnum(java.lang.Class, int)"], ["java.util.Map", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnumMap(java.lang.Class)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.getEnumList(java.lang.Class)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.enums.EnumUtils.iterator(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum.getValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.enums.ValuedEnum.toString()"], ["org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException", "org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException", "org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException", "org.sonar.api.internal.apachecommons.lang.exception.CloneFailedException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.addCauseMethodName(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.removeCauseMethodName(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.setCause(java.lang.Throwable, java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.isCauseMethodName(java.lang.String)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getCause(java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getCause(java.lang.Throwable, java.lang.String[])"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getRootCause(java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.isThrowableNested()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.isNestedThrowable(java.lang.Throwable)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getThrowableCount(java.lang.Throwable)"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getThrowables(java.lang.Throwable)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getThrowableList(java.lang.Throwable)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfThrowable(java.lang.Throwable, java.lang.Class, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.indexOfType(java.lang.Throwable, java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.printRootCauseStackTrace(java.lang.Throwable, java.io.PrintWriter)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getRootCauseStackTrace(java.lang.Throwable)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.removeCommonFrames(java.util.List, java.util.List)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getFullStackTrace(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getStackTrace(java.lang.Throwable)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getStackFrames(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getMessage(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.ExceptionUtils.getRootCauseMessage(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate(org.sonar.api.internal.apachecommons.lang.exception.Nestable)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getMessage(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getMessage(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableDelegate.printStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError()"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableError", "org.sonar.api.internal.apachecommons.lang.exception.NestableError(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableError.printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException()"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableException", "org.sonar.api.internal.apachecommons.lang.exception.NestableException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableException.printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException()"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException(java.lang.String, java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.exception.NestableRuntimeException.printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.IllegalClassException", "org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.Class, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.IllegalClassException", "org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.Class, java.lang.Class)"], ["org.sonar.api.internal.apachecommons.lang.IllegalClassException", "org.sonar.api.internal.apachecommons.lang.IllegalClassException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException", "org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException", "org.sonar.api.internal.apachecommons.lang.IncompleteArgumentException(java.lang.String, java.lang.String[])"], ["org.sonar.api.internal.apachecommons.lang.IntHashMap", "org.sonar.api.internal.apachecommons.lang.IntHashMap()"], ["org.sonar.api.internal.apachecommons.lang.IntHashMap", "org.sonar.api.internal.apachecommons.lang.IntHashMap(int)"], ["org.sonar.api.internal.apachecommons.lang.IntHashMap", "org.sonar.api.internal.apachecommons.lang.IntHashMap(int, float)"], ["int", "org.sonar.api.internal.apachecommons.lang.IntHashMap.size()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.isEmpty()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.IntHashMap.containsKey(int)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.IntHashMap.get(int)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.IntHashMap.put(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.IntHashMap.remove(int)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.IntHashMap.void clear()"], ["org.sonar.api.internal.apachecommons.lang.LocaleUtils", "org.sonar.api.internal.apachecommons.lang.LocaleUtils()"], ["java.util.Locale", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.toLocale(java.lang.String)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.localeLookupList(java.util.Locale)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.localeLookupList(java.util.Locale, java.util.Locale)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.availableLocaleList()"], ["java.util.Set", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.availableLocaleSet()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.isAvailableLocale(java.util.Locale)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.languagesByCountry(java.lang.String)"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.LocaleUtils.countriesByLanguage(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(double, double)"], ["org.sonar.api.internal.apachecommons.lang.math.DoubleRange", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.containsDouble(double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.DoubleRange.toString()"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(float)"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(float, float)"], ["org.sonar.api.internal.apachecommons.lang.math.FloatRange", "org.sonar.api.internal.apachecommons.lang.math.FloatRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.containsFloat(float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.FloatRange.toString()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(int, int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getReducedFraction(int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(double)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getFraction(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getNumerator()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getDenominator()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getProperNumerator()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.getProperWhole()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.Fraction.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.Fraction.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.Fraction.doubleValue()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.reduce()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.invert()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.negate()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.abs()"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.pow(int)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.add(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.subtract(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.multiplyBy(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["org.sonar.api.internal.apachecommons.lang.math.Fraction", "org.sonar.api.internal.apachecommons.lang.math.Fraction.divideBy(org.sonar.api.internal.apachecommons.lang.math.Fraction)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Fraction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Fraction.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.Fraction.toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.Fraction.toProperString()"], ["org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(float[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(double, double, double)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(float, float, float)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.min(float, float)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(float[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(double, double, double)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(float, float, float)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IEEE754rUtils.max(float, float)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(int)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(int, int)"], ["org.sonar.api.internal.apachecommons.lang.math.IntRange", "org.sonar.api.internal.apachecommons.lang.math.IntRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.IntRange.getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.containsInteger(int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.IntRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.IntRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.IntRange.toString()"], ["int[]", "org.sonar.api.internal.apachecommons.lang.math.IntRange.toArray()"], ["org.sonar.api.internal.apachecommons.lang.math.JVMRandom", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom()"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.void setSeed(long)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.double nextGaussian()"], ["void", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextBytes(byte[])"], ["int", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextInt()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextInt(int)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextLong()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextLong(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextBoolean()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextFloat()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.JVMRandom.nextDouble()"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(long)"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(long, long)"], ["org.sonar.api.internal.apachecommons.lang.math.LongRange", "org.sonar.api.internal.apachecommons.lang.math.LongRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMinimumFloat()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumNumber()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.LongRange.getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.containsLong(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.LongRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.LongRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.LongRange.toString()"], ["long[]", "org.sonar.api.internal.apachecommons.lang.math.LongRange.toArray()"], ["org.sonar.api.internal.apachecommons.lang.math.NumberRange", "org.sonar.api.internal.apachecommons.lang.math.NumberRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.math.NumberRange", "org.sonar.api.internal.apachecommons.lang.math.NumberRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.getMinimumNumber()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.getMaximumNumber()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.containsNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.NumberRange.toString()"], ["org.sonar.api.internal.apachecommons.lang.math.NumberUtils", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.stringToInt(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toInt(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.stringToInt(java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toInt(java.lang.String, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toLong(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toLong(java.lang.String, long)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toFloat(java.lang.String)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toFloat(java.lang.String, float)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toDouble(java.lang.String)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toDouble(java.lang.String, double)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toByte(java.lang.String)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toByte(java.lang.String, byte)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toShort(java.lang.String)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.toShort(java.lang.String, short)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createNumber(java.lang.String)"], ["java.lang.Float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createFloat(java.lang.String)"], ["java.lang.Double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createDouble(java.lang.String)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createInteger(java.lang.String)"], ["java.lang.Long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createLong(java.lang.String)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createBigInteger(java.lang.String)"], ["java.math.BigDecimal", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.createBigDecimal(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(long[])"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(int[])"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(short[])"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(byte[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(float[])"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(long[])"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(int[])"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(short[])"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(byte[])"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(double[])"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(float[])"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(int, int, int)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(short, short, short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(byte, byte, byte)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(double, double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.min(float, float, float)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(int, int, int)"], ["short", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(short, short, short)"], ["byte", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(byte, byte, byte)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(double, double, double)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.max(float, float, float)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.compare(double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.compare(float, float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.isDigits(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.NumberUtils.isNumber(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.math.RandomUtils", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt(java.util.Random)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextInt(java.util.Random, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextLong()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextLong(java.util.Random)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextBoolean()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextBoolean(java.util.Random)"], ["float", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextFloat()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextFloat(java.util.Random)"], ["double", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextDouble()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.RandomUtils.nextDouble(java.util.Random)"], ["org.sonar.api.internal.apachecommons.lang.math.Range", "org.sonar.api.internal.apachecommons.lang.math.Range()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.Range.getMinimumFloat()"], ["long", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumLong()"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumInteger()"], ["double", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumDouble()"], ["float", "org.sonar.api.internal.apachecommons.lang.math.Range.getMaximumFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsLong(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsLong(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsInteger(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsInteger(int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsDouble(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsDouble(double)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsFloat(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsFloat(float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.containsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.overlapsRange(org.sonar.api.internal.apachecommons.lang.math.Range)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.math.Range.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.math.Range.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.math.Range.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean(boolean)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean(java.lang.Boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.setValue(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.isTrue()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.isFalse()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.booleanValue()"], ["java.lang.Boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.toBoolean()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableBoolean.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(byte)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableByte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.setValue(byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.add(byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.subtract(byte)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.subtract(java.lang.Number)"], ["byte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.byteValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.doubleValue()"], ["java.lang.Byte", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.toByte()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableByte.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(double)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.setValue(double)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.isNaN()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.isInfinite()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.add(double)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.subtract(double)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.doubleValue()"], ["java.lang.Double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.toDouble()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableDouble.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(float)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.setValue(float)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.isNaN()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.isInfinite()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.add(float)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.subtract(float)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.doubleValue()"], ["java.lang.Float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.toFloat()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableFloat.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(int)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableInt", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.setValue(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.add(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.subtract(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.doubleValue()"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.toInteger()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableInt.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(long)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableLong", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.setValue(long)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.add(long)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.subtract(long)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.subtract(java.lang.Number)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.doubleValue()"], ["java.lang.Long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.toLong()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableLong.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableObject", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableObject", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.setValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableObject.toString()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort()"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(short)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.mutable.MutableShort", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.getValue()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.setValue(short)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.setValue(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.increment()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.decrement()"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.add(short)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.add(java.lang.Number)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.subtract(short)"], ["void", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.subtract(java.lang.Number)"], ["short", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.shortValue()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.intValue()"], ["long", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.longValue()"], ["float", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.floatValue()"], ["double", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.doubleValue()"], ["java.lang.Short", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.toShort()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.hashCode()"], ["int", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.compareTo(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.mutable.MutableShort.toString()"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException()"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.NotImplementedException", "org.sonar.api.internal.apachecommons.lang.NotImplementedException(java.lang.Class)"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getCause()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getMessage()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getMessage(int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getMessages()"], ["java.lang.Throwable", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getThrowable(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getThrowableCount()"], ["java.lang.Throwable[]", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.getThrowables()"], ["int", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.indexOfThrowable(java.lang.Class)"], ["int", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.indexOfThrowable(java.lang.Class, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printStackTrace()"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printStackTrace(java.io.PrintStream)"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printStackTrace(java.io.PrintWriter)"], ["void", "org.sonar.api.internal.apachecommons.lang.NotImplementedException.printPartialStackTrace(java.io.PrintWriter)"], ["org.sonar.api.internal.apachecommons.lang.NullArgumentException", "org.sonar.api.internal.apachecommons.lang.NullArgumentException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.NumberRange", "org.sonar.api.internal.apachecommons.lang.NumberRange(java.lang.Number)"], ["org.sonar.api.internal.apachecommons.lang.NumberRange", "org.sonar.api.internal.apachecommons.lang.NumberRange(java.lang.Number, java.lang.Number)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.NumberRange.getMinimum()"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.NumberRange.getMaximum()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.includesNumber(java.lang.Number)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.includesRange(org.sonar.api.internal.apachecommons.lang.NumberRange)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.overlaps(org.sonar.api.internal.apachecommons.lang.NumberRange)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.NumberRange.toString()"], ["org.sonar.api.internal.apachecommons.lang.NumberUtils", "org.sonar.api.internal.apachecommons.lang.NumberUtils()"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.stringToInt(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.stringToInt(java.lang.String, int)"], ["java.lang.Number", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createNumber(java.lang.String)"], ["java.lang.Float", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createFloat(java.lang.String)"], ["java.lang.Double", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createDouble(java.lang.String)"], ["java.lang.Integer", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createInteger(java.lang.String)"], ["java.lang.Long", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createLong(java.lang.String)"], ["java.math.BigInteger", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createBigInteger(java.lang.String)"], ["java.math.BigDecimal", "org.sonar.api.internal.apachecommons.lang.NumberUtils.createBigDecimal(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.lang.NumberUtils.minimum(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.minimum(int, int, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.NumberUtils.maximum(long, long, long)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.maximum(int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.compare(double, double)"], ["int", "org.sonar.api.internal.apachecommons.lang.NumberUtils.compare(float, float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberUtils.isDigits(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.NumberUtils.isNumber(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.ObjectUtils", "org.sonar.api.internal.apachecommons.lang.ObjectUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.defaultIfNull(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.equals(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.notEqual(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.hashCode(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.identityToString(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.identityToString(java.lang.StringBuffer, java.lang.Object)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.appendIdentityToString(java.lang.StringBuffer, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.toString(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.toString(java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.min(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.max(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.clone(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.ObjectUtils.cloneIfPossible(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.RandomStringUtils", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomAscii(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomAlphabetic(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomAlphanumeric(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.randomNumeric(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, int, int, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.RandomStringUtils.random(int, char[])"], ["org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class)"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.Class, java.lang.Class[])"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getAccessibleConstructor(java.lang.reflect.Constructor)"], ["java.lang.reflect.Constructor", "org.sonar.api.internal.apachecommons.lang.reflect.ConstructorUtils.getMatchingAccessibleConstructor(java.lang.Class, java.lang.Class[])"], ["org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils()"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getField(java.lang.Class, java.lang.String)"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getField(java.lang.Class, java.lang.String, boolean)"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getDeclaredField(java.lang.Class, java.lang.String)"], ["java.lang.reflect.Field", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.getDeclaredField(java.lang.Class, java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.reflect.Field)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.reflect.Field, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.Class, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readStaticField(java.lang.Class, java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredStaticField(java.lang.Class, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredStaticField(java.lang.Class, java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.reflect.Field, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.reflect.Field, java.lang.Object, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readField(java.lang.Object, java.lang.String, boolean)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredField(java.lang.Object, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.readDeclaredField(java.lang.Object, java.lang.String, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.reflect.Field, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.reflect.Field, java.lang.Object, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.Class, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredStaticField(java.lang.Class, java.lang.String, java.lang.Object, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.reflect.Field, java.lang.Object, java.lang.Object, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.Object, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeField(java.lang.Object, java.lang.String, java.lang.Object, boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.reflect.FieldUtils.writeDeclaredField(java.lang.Object, java.lang.String, java.lang.Object, boolean)"], ["org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactMethod(java.lang.Object, java.lang.String, java.lang.Object[], java.lang.Class[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[], java.lang.Class[])"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.invokeExactStaticMethod(java.lang.Class, java.lang.String, java.lang.Object[])"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class)"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getAccessibleMethod(java.lang.reflect.Method)"], ["java.lang.reflect.Method", "org.sonar.api.internal.apachecommons.lang.reflect.MethodUtils.getMatchingAccessibleMethod(java.lang.Class, java.lang.String, java.lang.Class[])"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException()"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.SerializationException", "org.sonar.api.internal.apachecommons.lang.SerializationException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.SerializationUtils", "org.sonar.api.internal.apachecommons.lang.SerializationUtils()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.clone(java.io.Serializable)"], ["void", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream)"], ["byte[]", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.serialize(java.io.Serializable)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.deserialize(java.io.InputStream)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.SerializationUtils.deserialize(byte[])"], ["org.sonar.api.internal.apachecommons.lang.StringEscapeUtils", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJava(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJava(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJavaScript(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeJavaScript(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJava(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJava(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJavaScript(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeJavaScript(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeHtml(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeHtml(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeHtml(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeHtml(java.io.Writer, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeXml(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeXml(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeXml(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeXml(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeSql(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeCsv(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.escapeCsv(java.io.Writer, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeCsv(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.StringEscapeUtils.unescapeCsv(java.io.Writer, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.StringUtils", "org.sonar.api.internal.apachecommons.lang.StringUtils()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isEmpty(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNotEmpty(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isBlank(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNotBlank(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.clean(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.trim(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.trimToNull(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.trimToEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.strip(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripToNull(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripToEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.strip(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripStart(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripEnd(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripAll(java.lang.String[])"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.stripAll(java.lang.String[], java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.equals(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.equalsIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, char)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.ordinalIndexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfIgnoreCase(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, char)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastOrdinalIndexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOf(java.lang.String, java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOfIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOfIgnoreCase(java.lang.String, java.lang.String, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.contains(java.lang.String, char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.contains(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsIgnoreCase(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAny(java.lang.String, char[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAny(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsAny(java.lang.String, char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsAny(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAnyBut(java.lang.String, char[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAnyBut(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsOnly(java.lang.String, char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsOnly(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsNone(java.lang.String, char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.containsNone(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfAny(java.lang.String, java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.lastIndexOfAny(java.lang.String, java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substring(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substring(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.left(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.right(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.mid(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBefore(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringAfter(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBeforeLast(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringAfterLast(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBetween(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getNestedString(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getNestedString(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String, char)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.split(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, char)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String, int)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByCharacterType(java.lang.String)"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.StringUtils.splitByCharacterTypeCamelCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.concatenate(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], char, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.lang.Object[], java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Iterator, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Iterator, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Collection, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.join(java.util.Collection, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.deleteSpaces(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.deleteWhitespace(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeStart(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeEnd(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.remove(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.remove(java.lang.String, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceChars(java.lang.String, char, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.overlayString(java.lang.String, java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.overlay(java.lang.String, java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chomp(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chompLast(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chompLast(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getChomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.prechomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getPrechomp(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chop(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.chopNewline(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.escape(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.repeat(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.repeat(java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.rightPad(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.rightPad(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.rightPad(java.lang.String, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.leftPad(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.leftPad(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.leftPad(java.lang.String, int, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.length(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.center(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.center(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.center(java.lang.String, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.upperCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.upperCase(java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.lowerCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.lowerCase(java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.capitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.capitalise(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.uncapitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.uncapitalise(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.swapCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.capitaliseAllWords(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.countMatches(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlpha(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlphaSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlphanumeric(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAlphanumericSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAsciiPrintable(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNumeric(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isNumericSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isWhitespace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAllLowerCase(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.isAllUpperCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultString(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultString(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultIfBlank(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.defaultIfEmpty(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.reverse(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.reverseDelimited(java.lang.String, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.reverseDelimitedString(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.abbreviate(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.abbreviate(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.difference(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfDifference(java.lang.String, java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.indexOfDifference(java.lang.String[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.getCommonPrefix(java.lang.String[])"], ["int", "org.sonar.api.internal.apachecommons.lang.StringUtils.getLevenshteinDistance(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.startsWith(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.startsWithIgnoreCase(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.startsWithAny(java.lang.String, java.lang.String[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.endsWith(java.lang.String, java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.endsWithIgnoreCase(java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.StringUtils.normalizeSpace(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.StringUtils.endsWithAny(java.lang.String, java.lang.String[])"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getJavaHome()"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getJavaIoTmpDir()"], ["float", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getJavaVersion()"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getUserDir()"], ["java.io.File", "org.sonar.api.internal.apachecommons.lang.SystemUtils.getUserHome()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.SystemUtils.isJavaAwtHeadless()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.SystemUtils.isJavaVersionAtLeast(float)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.SystemUtils.isJavaVersionAtLeast(int)"], ["org.sonar.api.internal.apachecommons.lang.SystemUtils", "org.sonar.api.internal.apachecommons.lang.SystemUtils()"], ["org.sonar.api.internal.apachecommons.lang.text.CompositeFormat", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat(java.text.Format, java.text.Format)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.parseObject(java.lang.String, java.text.ParsePosition)"], ["java.text.Format", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.getParser()"], ["java.text.Format", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.getFormatter()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.CompositeFormat.reformat(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Map)"], ["org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat(java.lang.String, java.util.Locale, java.util.Map)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.toPattern()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.applyPattern(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormat(int, java.text.Format)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormatByArgumentIndex(int, java.text.Format)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormats(java.text.Format[])"], ["void", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.setFormatsByArgumentIndex(java.text.Format[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.ExtendedMessageFormat.hashCode()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.close()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.read()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.read(char[], int, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.skip(long)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.ready()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.markSupported()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.mark(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderReader.reset()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderTokenizer.getContent()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.close()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.flush()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(int)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(char[])"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder$StrBuilderWriter.write(java.lang.String, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getNewLineText()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setNewLineText(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getNullText()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setNullText(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.length()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setLength(int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.capacity()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.ensureCapacity(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.minimizeCapacity()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.size()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.isEmpty()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.clear()"], ["char", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.charAt(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.setCharAt(int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteCharAt(int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toCharArray()"], ["char[]", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toCharArray(int, int)"], ["char[]", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getChars(char[])"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.getChars(int, int, char[], int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendNewLine()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendNull()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.String, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(java.lang.StringBuffer, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(char[], int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(long)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(float)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.append(double)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.String, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.StringBuffer)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(java.lang.StringBuffer, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(char[], int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(long)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(float)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendln(double)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendAll(java.lang.Object[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendAll(java.util.Collection)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendAll(java.util.Iterator)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendWithSeparators(java.lang.Object[], java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendWithSeparators(java.util.Collection, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendWithSeparators(java.util.Iterator, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(java.lang.String, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendSeparator(char, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendPadding(int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadLeft(int, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.appendFixedWidthPadRight(int, int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, char[], int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, long)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, float)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.insert(int, double)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.delete(int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteAll(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteFirst(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteAll(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteFirst(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteAll(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.deleteFirst(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replace(int, int, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceAll(char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceFirst(char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceAll(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceFirst(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceAll(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replaceFirst(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.replace(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, java.lang.String, int, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.reverse()"], ["org.sonar.api.internal.apachecommons.lang.text.StrBuilder", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.trim()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.startsWith(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.endsWith(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.substring(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.substring(int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.leftString(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.rightString(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.midString(int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.contains(char)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.contains(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.contains(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(char)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.indexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(char)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(char, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(java.lang.String, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.lastIndexOf(org.sonar.api.internal.apachecommons.lang.text.StrMatcher, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.asTokenizer()"], ["java.io.Reader", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.asReader()"], ["java.io.Writer", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.asWriter()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.equalsIgnoreCase(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.equals(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toString()"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.toStringBuffer()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrBuilder.clone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrLookup$MapStrLookup.lookup(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrLookup.noneLookup()"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrLookup.systemPropertiesLookup()"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrLookup.mapLookup(java.util.Map)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$CharMatcher.isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$CharSetMatcher.isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$NoMatcher.isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher$TrimMatcher.isMatch(char[], int, int, int)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.commaMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.tabMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.spaceMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.splitMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.trimMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.singleQuoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.doubleQuoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.quoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.noneMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.charMatcher(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.charSetMatcher(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.charSetMatcher(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.stringMatcher(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrMatcher.isMatch(char[], int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Map)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Map, java.lang.String, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object, java.util.Properties)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceSystemProperties(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor()"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(java.util.Map, java.lang.String, java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup, java.lang.String, java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor(org.sonar.api.internal.apachecommons.lang.text.StrLookup, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, char)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.String, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(char[], int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.StringBuffer)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.StringBuffer, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replace(java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(java.lang.StringBuffer)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(java.lang.StringBuffer, int, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(org.sonar.api.internal.apachecommons.lang.text.StrBuilder)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.replaceIn(org.sonar.api.internal.apachecommons.lang.text.StrBuilder, int, int)"], ["char", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getEscapeChar()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setEscapeChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getVariablePrefixMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariablePrefixMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariablePrefix(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariablePrefix(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getVariableSuffixMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableSuffixMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableSuffix(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableSuffix(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrLookup", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.getVariableResolver()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setVariableResolver(org.sonar.api.internal.apachecommons.lang.text.StrLookup)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.isEnableSubstitutionInVariables()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrSubstitutor.setEnableSubstitutionInVariables(boolean)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getCSVInstance()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getCSVInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getCSVInstance(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTSVInstance()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTSVInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTSVInstance(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(java.lang.String, org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[])"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], char, char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer(char[], org.sonar.api.internal.apachecommons.lang.text.StrMatcher, org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.size()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.nextToken()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.previousToken()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTokenArray()"], ["java.util.List", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTokenList()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.reset()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.reset(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.reset(char[])"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.hasNext()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.next()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.nextIndex()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.hasPrevious()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.previous()"], ["int", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.previousIndex()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.remove()"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.set(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.add(java.lang.Object)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getDelimiterMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setDelimiterMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setDelimiterChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setDelimiterString(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getQuoteMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setQuoteMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setQuoteChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getIgnoredMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setIgnoredMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setIgnoredChar(char)"], ["org.sonar.api.internal.apachecommons.lang.text.StrMatcher", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getTrimmerMatcher()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setTrimmerMatcher(org.sonar.api.internal.apachecommons.lang.text.StrMatcher)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.isEmptyTokenAsNull()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setEmptyTokenAsNull(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.isIgnoreEmptyTokens()"], ["org.sonar.api.internal.apachecommons.lang.text.StrTokenizer", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.setIgnoreEmptyTokens(boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.getContent()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.clone()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.text.StrTokenizer.toString()"], ["org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(long, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.formatUTC(java.util.Date, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.TimeZone)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(long, java.lang.String, java.util.TimeZone, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Date, java.lang.String, java.util.TimeZone, java.util.Locale)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DateFormatUtils.format(java.util.Calendar, java.lang.String, java.util.TimeZone, java.util.Locale)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils$DateIterator.hasNext()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.time.DateUtils$DateIterator.next()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.DateUtils$DateIterator.remove()"], ["org.sonar.api.internal.apachecommons.lang.time.DateUtils", "org.sonar.api.internal.apachecommons.lang.time.DateUtils()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameDay(java.util.Date, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameDay(java.util.Calendar, java.util.Calendar)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameInstant(java.util.Date, java.util.Date)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameInstant(java.util.Calendar, java.util.Calendar)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.isSameLocalTime(java.util.Calendar, java.util.Calendar)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.parseDate(java.lang.String, java.lang.String[])"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.parseDateStrictly(java.lang.String, java.lang.String[])"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addYears(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addMonths(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addWeeks(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addDays(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addHours(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addMinutes(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addSeconds(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.addMilliseconds(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.add(java.util.Date, int, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setYears(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setMonths(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setDays(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setHours(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setMinutes(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setSeconds(java.util.Date, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.setMilliseconds(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.toCalendar(java.util.Date)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.round(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.round(java.util.Calendar, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.round(java.lang.Object, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncate(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncate(java.util.Calendar, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncate(java.lang.Object, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.ceiling(java.util.Date, int)"], ["java.util.Calendar", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.ceiling(java.util.Calendar, int)"], ["java.util.Date", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.ceiling(java.lang.Object, int)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.iterator(java.util.Date, int)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.iterator(java.util.Calendar, int)"], ["java.util.Iterator", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.iterator(java.lang.Object, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMilliseconds(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInSeconds(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMinutes(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInHours(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInDays(java.util.Date, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMilliseconds(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInSeconds(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInMinutes(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInHours(java.util.Calendar, int)"], ["long", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.getFragmentInDays(java.util.Calendar, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedEquals(java.util.Calendar, java.util.Calendar, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedEquals(java.util.Date, java.util.Date, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedCompareTo(java.util.Calendar, java.util.Calendar, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.DateUtils.truncatedCompareTo(java.util.Date, java.util.Date, int)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils$Token.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils$Token.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils$Token.toString()"], ["org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDurationHMS(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDurationISO(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDuration(long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDuration(long, java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatDurationWords(long, boolean, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatPeriodISO(long, long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.DurationFormatUtils.formatPeriod(long, long, java.lang.String, boolean, java.util.TimeZone)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$CharacterLiteral.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$CharacterLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$PaddedNumberField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$PaddedNumberField.appendTo(java.lang.StringBuffer, int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$Pair.toString()"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$StringLiteral.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$StringLiteral.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TextField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TextField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneDisplayKey.hashCode()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneDisplayKey.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNameRule.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNameRule.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNumberRule.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TimeZoneNumberRule.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwelveHourField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwelveHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwelveHourField.appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwentyFourHourField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwentyFourHourField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwentyFourHourField.appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitMonthField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitMonthField.appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitNumberField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitNumberField.appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitYearField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitYearField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$TwoDigitYearField.appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedMonthField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedMonthField.appendTo(java.lang.StringBuffer, int)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedNumberField.estimateLength()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, java.util.Calendar)"], ["void", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat$UnpaddedNumberField.appendTo(java.lang.StringBuffer, int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance()"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance(java.lang.String)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.TimeZone)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getInstance(java.lang.String, java.util.Locale)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getInstance(java.lang.String, java.util.TimeZone, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateInstance(int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateInstance(int, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateInstance(int, java.util.TimeZone)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateInstance(int, java.util.TimeZone, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeInstance(int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeInstance(int, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeInstance(int, java.util.TimeZone)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getTimeInstance(int, java.util.TimeZone, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateTimeInstance(int, int)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.Locale)"], ["org.sonar.api.internal.apachecommons.lang.time.FastDateFormat", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getDateTimeInstance(int, int, java.util.TimeZone)"], ["synchronized", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.org.sonar.api.internal.apachecommons.lang.time.FastDateFormat getDateTimeInstance(int, int, java.util.TimeZone, java.util.Locale)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.lang.Object, java.lang.StringBuffer, java.text.FieldPosition)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(long)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Date)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Calendar)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(long, java.lang.StringBuffer)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Date, java.lang.StringBuffer)"], ["java.lang.StringBuffer", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.format(java.util.Calendar, java.lang.StringBuffer)"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.parseObject(java.lang.String, java.text.ParsePosition)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getPattern()"], ["java.util.TimeZone", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeZone()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getTimeZoneOverridesCalendar()"], ["java.util.Locale", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getLocale()"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.getMaxLengthEstimate()"], ["boolean", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.hashCode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.FastDateFormat.toString()"], ["org.sonar.api.internal.apachecommons.lang.time.StopWatch", "org.sonar.api.internal.apachecommons.lang.time.StopWatch()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.start()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.stop()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.reset()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.split()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.unsplit()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.suspend()"], ["void", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.resume()"], ["long", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.getTime()"], ["long", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.getSplitTime()"], ["long", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.getStartTime()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.toString()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.time.StopWatch.toSplitString()"], ["org.sonar.api.internal.apachecommons.lang.UnhandledException", "org.sonar.api.internal.apachecommons.lang.UnhandledException(java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.UnhandledException", "org.sonar.api.internal.apachecommons.lang.UnhandledException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.apachecommons.lang.Validate", "org.sonar.api.internal.apachecommons.lang.Validate()"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String, java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String, long)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String, double)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.isTrue(boolean)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notNull(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notNull(java.lang.Object, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.Object[], java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.Object[])"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Collection, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Collection)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Map, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.util.Map)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.notEmpty(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.lang.Object[], java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.lang.Object[])"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.util.Collection, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.noNullElements(java.util.Collection)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.allElementsOfType(java.util.Collection, java.lang.Class, java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.lang.Validate.allElementsOfType(java.util.Collection, java.lang.Class)"], ["org.sonar.api.internal.apachecommons.lang.WordUtils", "org.sonar.api.internal.apachecommons.lang.WordUtils()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.wrap(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.wrap(java.lang.String, int, java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalize(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalizeFully(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.capitalizeFully(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.uncapitalize(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.uncapitalize(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.swapCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.initials(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.initials(java.lang.String, char[])"], ["java.lang.String", "org.sonar.api.internal.apachecommons.lang.WordUtils.abbreviate(java.lang.String, int, int, java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$5.translateName(java.lang.reflect.Field)"], ["void", "org.sonar.api.internal.google.gson.Gson$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLongArray)"], ["java.util.concurrent.atomic.AtomicLongArray", "org.sonar.api.internal.google.gson.Gson$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonStreamParser", "org.sonar.api.internal.google.gson.JsonStreamParser(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonStreamParser", "org.sonar.api.internal.google.gson.JsonStreamParser(java.io.Reader)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonStreamParser.next()"], ["boolean", "org.sonar.api.internal.google.gson.JsonStreamParser.hasNext()"], ["void", "org.sonar.api.internal.google.gson.JsonStreamParser.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.JsonStreamParser.next()"], ["void", "org.sonar.api.internal.google.gson.Gson$FutureTypeAdapter.setDelegate(org.sonar.api.internal.google.gson.TypeAdapter<T>)"], ["T", "org.sonar.api.internal.google.gson.Gson$FutureTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$FutureTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["org.sonar.api.internal.google.gson.Gson", "org.sonar.api.internal.google.gson.Gson()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.Gson.newBuilder()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.Gson.excluder()"], ["org.sonar.api.internal.google.gson.FieldNamingStrategy", "org.sonar.api.internal.google.gson.Gson.fieldNamingStrategy()"], ["boolean", "org.sonar.api.internal.google.gson.Gson.serializeNulls()"], ["boolean", "org.sonar.api.internal.google.gson.Gson.htmlSafe()"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.Gson.getAdapter(org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.Gson.getDelegateAdapter(org.sonar.api.internal.google.gson.TypeAdapterFactory, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.Gson.getAdapter(java.lang.Class<T>)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.Gson.toJsonTree(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.Gson.toJsonTree(java.lang.Object, java.lang.reflect.Type)"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.Appendable)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, java.lang.Appendable)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(java.lang.Object, java.lang.reflect.Type, org.sonar.api.internal.google.gson.stream.JsonWriter)"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toJson(org.sonar.api.internal.google.gson.JsonElement)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.Appendable)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.Gson.newJsonWriter(java.io.Writer)"], ["org.sonar.api.internal.google.gson.stream.JsonReader", "org.sonar.api.internal.google.gson.Gson.newJsonReader(java.io.Reader)"], ["void", "org.sonar.api.internal.google.gson.Gson.toJson(org.sonar.api.internal.google.gson.JsonElement, org.sonar.api.internal.google.gson.stream.JsonWriter)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.lang.String, java.lang.Class<T>)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.lang.String, java.lang.reflect.Type)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.io.Reader, java.lang.Class<T>)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(java.io.Reader, java.lang.reflect.Type)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(org.sonar.api.internal.google.gson.stream.JsonReader, java.lang.reflect.Type)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.Class<T>)"], ["<T> T", "org.sonar.api.internal.google.gson.Gson.fromJson(org.sonar.api.internal.google.gson.JsonElement, java.lang.reflect.Type)"], ["java.lang.String", "org.sonar.api.internal.google.gson.Gson.toString()"], ["java.lang.Number", "org.sonar.api.internal.google.gson.Gson$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$3.translateName(java.lang.reflect.Field)"], ["org.sonar.api.internal.google.gson.JsonNull", "org.sonar.api.internal.google.gson.JsonNull()"], ["org.sonar.api.internal.google.gson.JsonNull", "org.sonar.api.internal.google.gson.JsonNull.deepCopy()"], ["int", "org.sonar.api.internal.google.gson.JsonNull.hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.JsonNull.equals(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonNull.deepCopy()"], ["org.sonar.api.internal.google.gson.util.VersionUtils", "org.sonar.api.internal.google.gson.util.VersionUtils()"], ["int", "org.sonar.api.internal.google.gson.util.VersionUtils.getMajorJavaVersion()"], ["boolean", "org.sonar.api.internal.google.gson.util.VersionUtils.isJava9OrLater()"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$1.translateName(java.lang.reflect.Field)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonElement()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonArray()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonObject()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonPrimitive()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.isJsonNull()"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonObject()"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonArray()"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonPrimitive()"], ["org.sonar.api.internal.google.gson.JsonNull", "org.sonar.api.internal.google.gson.JsonElement.getAsJsonNull()"], ["boolean", "org.sonar.api.internal.google.gson.JsonElement.getAsBoolean()"], ["java.lang.Number", "org.sonar.api.internal.google.gson.JsonElement.getAsNumber()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonElement.getAsString()"], ["double", "org.sonar.api.internal.google.gson.JsonElement.getAsDouble()"], ["float", "org.sonar.api.internal.google.gson.JsonElement.getAsFloat()"], ["long", "org.sonar.api.internal.google.gson.JsonElement.getAsLong()"], ["int", "org.sonar.api.internal.google.gson.JsonElement.getAsInt()"], ["byte", "org.sonar.api.internal.google.gson.JsonElement.getAsByte()"], ["char", "org.sonar.api.internal.google.gson.JsonElement.getAsCharacter()"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.JsonElement.getAsBigDecimal()"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.JsonElement.getAsBigInteger()"], ["short", "org.sonar.api.internal.google.gson.JsonElement.getAsShort()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonElement.toString()"], ["java.lang.Double", "org.sonar.api.internal.google.gson.Gson$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$6.translateName(java.lang.reflect.Field)"], ["void", "org.sonar.api.internal.google.gson.TypeAdapter$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicLong)"], ["java.util.concurrent.atomic.AtomicLong", "org.sonar.api.internal.google.gson.Gson$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader$1.promoteNameToValue(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["org.sonar.api.internal.google.gson.stream.JsonReader", "org.sonar.api.internal.google.gson.stream.JsonReader(java.io.Reader)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.setLenient(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonReader.isLenient()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.beginArray()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.endArray()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.beginObject()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.endObject()"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonReader.hasNext()"], ["org.sonar.api.internal.google.gson.stream.JsonToken", "org.sonar.api.internal.google.gson.stream.JsonReader.peek()"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.nextName()"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.nextString()"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonReader.nextBoolean()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.nextNull()"], ["double", "org.sonar.api.internal.google.gson.stream.JsonReader.nextDouble()"], ["long", "org.sonar.api.internal.google.gson.stream.JsonReader.nextLong()"], ["int", "org.sonar.api.internal.google.gson.stream.JsonReader.nextInt()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.close()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonReader.skipValue()"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.toString()"], ["java.lang.String", "org.sonar.api.internal.google.gson.stream.JsonReader.getPath()"], ["org.sonar.api.internal.google.gson.stream.JsonToken[]", "org.sonar.api.internal.google.gson.stream.JsonToken.values()"], ["org.sonar.api.internal.google.gson.stream.JsonToken", "org.sonar.api.internal.google.gson.stream.JsonToken.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.MalformedJsonException", "org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.MalformedJsonException", "org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.stream.MalformedJsonException", "org.sonar.api.internal.google.gson.stream.MalformedJsonException(java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter(java.io.Writer)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setIndent(java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setLenient(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonWriter.isLenient()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setHtmlSafe(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonWriter.isHtmlSafe()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.setSerializeNulls(boolean)"], ["boolean", "org.sonar.api.internal.google.gson.stream.JsonWriter.getSerializeNulls()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.beginArray()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.endArray()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.beginObject()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.endObject()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.name(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.jsonValue(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.nullValue()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(boolean)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(java.lang.Boolean)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(double)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(long)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.stream.JsonWriter.value(java.lang.Number)"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.flush()"], ["void", "org.sonar.api.internal.google.gson.stream.JsonWriter.close()"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$4.translateName(java.lang.reflect.Field)"], ["org.sonar.api.internal.google.gson.JsonIOException", "org.sonar.api.internal.google.gson.JsonIOException(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonIOException", "org.sonar.api.internal.google.gson.JsonIOException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonIOException", "org.sonar.api.internal.google.gson.JsonIOException(java.lang.Throwable)"], ["java.lang.Class<? super T>", "org.sonar.api.internal.google.gson.reflect.TypeToken.getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.reflect.TypeToken.getType()"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.Class<?>)"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.isAssignableFrom(org.sonar.api.internal.google.gson.reflect.TypeToken<?>)"], ["int", "org.sonar.api.internal.google.gson.reflect.TypeToken.hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.reflect.TypeToken.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.reflect.TypeToken.toString()"], ["<T> org.sonar.api.internal.google.gson.reflect.TypeToken<T>", "org.sonar.api.internal.google.gson.reflect.TypeToken.get(java.lang.Class<T>)"], ["org.sonar.api.internal.google.gson.TypeAdapter", "org.sonar.api.internal.google.gson.TypeAdapter()"], ["void", "org.sonar.api.internal.google.gson.TypeAdapter.toJson(java.io.Writer, T)"], ["java.lang.String", "org.sonar.api.internal.google.gson.TypeAdapter.toJson(T)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.TypeAdapter.toJsonTree(T)"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter.fromJson(java.io.Reader)"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter.fromJson(java.lang.String)"], ["T", "org.sonar.api.internal.google.gson.TypeAdapter.fromJsonTree(org.sonar.api.internal.google.gson.JsonElement)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Boolean)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Number)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive(java.lang.Character)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonPrimitive.deepCopy()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.isBoolean()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsBoolean()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.isNumber()"], ["java.lang.Number", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsNumber()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.isString()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsString()"], ["double", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsDouble()"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsBigDecimal()"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsBigInteger()"], ["float", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsFloat()"], ["long", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsLong()"], ["short", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsShort()"], ["int", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsInt()"], ["byte", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsByte()"], ["char", "org.sonar.api.internal.google.gson.JsonPrimitive.getAsCharacter()"], ["int", "org.sonar.api.internal.google.gson.JsonPrimitive.hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.JsonPrimitive.equals(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonPrimitive.deepCopy()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$1.construct()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$3.construct()"], ["int", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter$CurrentWrite.length()"], ["char", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter$CurrentWrite.charAt(int)"], ["java.lang.CharSequence", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter$CurrentWrite.subSequence(int, int)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$7.construct()"], ["T", "org.sonar.api.internal.google.gson.internal.Excluder$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.Excluder$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$5.construct()"], ["java.lang.reflect.ParameterizedType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.newParameterizedTypeWithOwner(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type...)"], ["java.lang.reflect.GenericArrayType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.arrayOf(java.lang.reflect.Type)"], ["java.lang.reflect.WildcardType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.subtypeOf(java.lang.reflect.Type)"], ["java.lang.reflect.WildcardType", "org.sonar.api.internal.google.gson.internal.$Gson$Types.supertypeOf(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.canonicalize(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types.equals(java.lang.reflect.Type, java.lang.reflect.Type)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types.typeToString(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getArrayComponentType(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getCollectionElementType(java.lang.reflect.Type, java.lang.Class<?>)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types.getMapKeyAndValueTypes(java.lang.reflect.Type, java.lang.Class<?>)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types.resolve(java.lang.reflect.Type, java.lang.Class<?>, java.lang.reflect.Type)"], ["org.sonar.api.internal.google.gson.internal.ConstructorConstructor", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor(java.util.Map<java.lang.reflect.Type, org.sonar.api.internal.google.gson.InstanceCreator<?>>)"], ["<T> org.sonar.api.internal.google.gson.internal.ObjectConstructor<T>", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor.get(org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor.toString()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$2.construct()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.size()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet.clear()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet$1.next()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$AvlIterator.next()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$1.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.LazilyParsedNumber", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber(java.lang.String)"], ["int", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.intValue()"], ["long", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.longValue()"], ["float", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.floatValue()"], ["double", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.doubleValue()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.toString()"], ["int", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.hashCode()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LazilyParsedNumber.equals(java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap(java.util.Comparator<? super K>)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.size()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.put(K, V)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.clear()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap.entrySet()"], ["org.sonar.api.internal.google.gson.internal.JsonReaderInternalAccess", "org.sonar.api.internal.google.gson.internal.JsonReaderInternalAccess()"], ["void", "org.sonar.api.internal.google.gson.internal.reflect.PreJava9ReflectionAccessor.makeAccessible(java.lang.reflect.AccessibleObject)"], ["void", "org.sonar.api.internal.google.gson.internal.reflect.UnsafeReflectionAccessor.makeAccessible(java.lang.reflect.AccessibleObject)"], ["org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor", "org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor()"], ["org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor", "org.sonar.api.internal.google.gson.internal.reflect.ReflectionAccessor.getInstance()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.size()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet.clear()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$4.construct()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.hasNext()"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator.remove()"], ["org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider", "org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider()"], ["java.text.DateFormat", "org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider.getUSDateFormat(int)"], ["java.text.DateFormat", "org.sonar.api.internal.google.gson.internal.PreJava9DateFormatProvider.getUSDateTimeFormat(int, int)"], ["<T> T", "org.sonar.api.internal.google.gson.internal.$Gson$Preconditions.checkNotNull(T)"], ["void", "org.sonar.api.internal.google.gson.internal.$Gson$Preconditions.checkArgument(boolean)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.size()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet.clear()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$6.construct()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.size()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$EntrySet.clear()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.Streams.parse(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.Streams.write(org.sonar.api.internal.google.gson.JsonElement, org.sonar.api.internal.google.gson.stream.JsonWriter)"], ["java.io.Writer", "org.sonar.api.internal.google.gson.internal.Streams.writerForAppendable(java.lang.Appendable)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$12.construct()"], ["org.sonar.api.internal.google.gson.internal.UnsafeAllocator", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator()"], ["org.sonar.api.internal.google.gson.internal.UnsafeAllocator", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator.create()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$10.construct()"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$4.newInstance(java.lang.Class<T>)"], ["org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type, java.lang.reflect.Type, java.lang.reflect.Type...)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getActualTypeArguments()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.getOwnerType()"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types$ParameterizedTypeImpl.toString()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$8.construct()"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.getKey()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.getValue()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.setValue(V)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.toString()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.first()"], ["org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$Node.last()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$14.construct()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap(java.util.Comparator<? super K>)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.size()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.put(K, V)"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.clear()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap.entrySet()"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$2.newInstance(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Primitives.isPrimitive(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Primitives.isWrapperType(java.lang.reflect.Type)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.gson.internal.Primitives.wrap(java.lang.Class<T>)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.gson.internal.Primitives.unwrap(java.lang.Class<T>)"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$KeySet$1.next()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$11.construct()"], ["org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl(java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.getGenericComponentType()"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types$GenericArrayTypeImpl.toString()"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$1.compare(java.lang.Object, java.lang.Object)"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$9.construct()"], ["org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl(java.lang.reflect.Type[], java.lang.reflect.Type[])"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.getUpperBounds()"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.getLowerBounds()"], ["boolean", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.$Gson$Types$WildcardTypeImpl.toString()"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$KeySet$1.next()"], ["T", "org.sonar.api.internal.google.gson.internal.ConstructorConstructor$13.construct()"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.hasNext()"], ["void", "org.sonar.api.internal.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator.remove()"], ["org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter(org.sonar.api.internal.google.gson.JsonSerializer<T>, org.sonar.api.internal.google.gson.JsonDeserializer<T>, org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>, org.sonar.api.internal.google.gson.TypeAdapterFactory)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.newFactory(org.sonar.api.internal.google.gson.reflect.TypeToken<?>, java.lang.Object)"], ["org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.newFactoryWithMatchRawType(org.sonar.api.internal.google.gson.reflect.TypeToken<?>, java.lang.Object)"], ["org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter.newTypeHierarchyFactory(java.lang.Class<?>, java.lang.Object)"], ["java.util.concurrent.atomic.AtomicInteger", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicInteger)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$8.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.ObjectTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.ObjectTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$13.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T1)"], ["T1", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$11.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.ObjectTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T2> org.sonar.api.internal.google.gson.TypeAdapter<T2>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T2>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$35.toString()"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.writeField(java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader(org.sonar.api.internal.google.gson.JsonElement)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.beginArray()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.endArray()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.beginObject()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.endObject()"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.hasNext()"], ["org.sonar.api.internal.google.gson.stream.JsonToken", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.peek()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextName()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextString()"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextBoolean()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextNull()"], ["double", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextDouble()"], ["long", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextLong()"], ["int", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.nextInt()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.close()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.skipValue()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.toString()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.promoteNameToValue()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader.getPath()"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$31.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter()"], ["java.util.Date", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Date)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.util.Locale", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Locale)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$28.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Character", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Character)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$15.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.math.BigDecimal)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$17.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean, java.util.TimeZone)"], ["java.util.Date", "org.sonar.api.internal.google.gson.internal.bind.util.ISO8601Utils.parse(java.lang.String, java.text.ParsePosition)"], ["org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter(java.lang.Class<T>)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["T", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, T)"], ["org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter()"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.java.sql.Time read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Time)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TimeTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$33.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$33.toString()"], ["java.util.concurrent.atomic.AtomicIntegerArray", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicIntegerArray)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$10.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(java.lang.Object, java.lang.reflect.Type)"], ["<R> R", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.deserialize(org.sonar.api.internal.google.gson.JsonElement, java.lang.reflect.Type)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$34.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$34.toString()"], ["int", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader$1.read(char[], int, int)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeReader$1.close()"], ["java.util.concurrent.atomic.AtomicBoolean", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.concurrent.atomic.AtomicBoolean)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$9.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.sql.Timestamp", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Timestamp)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$12.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$16.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.DateTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$32.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$32.toString()"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$30.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$14.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.write(org.sonar.api.internal.google.gson.stream.JsonWriter, org.sonar.api.internal.google.gson.JsonElement)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$29.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.util.Currency", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Currency)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$25.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor, org.sonar.api.internal.google.gson.FieldNamingStrategy, org.sonar.api.internal.google.gson.internal.Excluder, org.sonar.api.internal.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory)"], ["boolean", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory.excludeField(java.lang.reflect.Field, boolean)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.math.BigInteger)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$18.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Boolean", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Boolean)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$3.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Class)"], ["java.lang.Class", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$1.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter(org.sonar.api.internal.google.gson.Gson, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<K>, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<V>, org.sonar.api.internal.google.gson.internal.ObjectConstructor<? extends java.util.Map<K, V>>)"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Map<K, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.util.Calendar", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Calendar)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$27.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.net.InetAddress", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.InetAddress)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$23.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$5.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter$1.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$7.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["java.net.URL", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.URL)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$21.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory(org.sonar.api.internal.google.gson.internal.ConstructorConstructor, boolean)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.MapTypeAdapterFactory.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactory(org.sonar.api.internal.google.gson.reflect.TypeToken<TT>, org.sonar.api.internal.google.gson.TypeAdapter<TT>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class<TT>, org.sonar.api.internal.google.gson.TypeAdapter<TT>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactory(java.lang.Class<TT>, java.lang.Class<TT>, org.sonar.api.internal.google.gson.TypeAdapter<? super TT>)"], ["<TT> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newFactoryForMultipleTypes(java.lang.Class<TT>, java.lang.Class<? extends TT>, org.sonar.api.internal.google.gson.TypeAdapter<? super TT>)"], ["<T1> org.sonar.api.internal.google.gson.TypeAdapterFactory", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters.newTypeHierarchyFactory(java.lang.Class<T1>, org.sonar.api.internal.google.gson.TypeAdapter<T1>)"], ["org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter()"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.java.sql.Date read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["synchronized", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.void write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.sql.Date)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.SqlDateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$26.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.get()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.beginArray()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.endArray()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.beginObject()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.endObject()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.name(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(java.lang.String)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.nullValue()"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(boolean)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Boolean)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(double)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(long)"], ["org.sonar.api.internal.google.gson.stream.JsonWriter", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.value(java.lang.Number)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.flush()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter.close()"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.StringBuilder)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$19.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter(org.sonar.api.internal.google.gson.Gson, java.lang.reflect.Type, org.sonar.api.internal.google.gson.TypeAdapter<E>, org.sonar.api.internal.google.gson.internal.ObjectConstructor<? extends java.util.Collection<E>>)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Collection<E>)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.util.UUID", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.UUID)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$24.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter$1.write(char[], int, int)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter$1.flush()"], ["void", "org.sonar.api.internal.google.gson.internal.bind.JsonTreeWriter$1.close()"], ["java.util.BitSet", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.BitSet)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$6.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.StringBuffer", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.StringBuffer)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$20.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.net.URI", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.net.URI)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$22.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["java.lang.Boolean", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Boolean)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.TypeAdapters$4.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.TypeAdapter<E>, java.lang.Class<E>)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.internal.bind.ArrayTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$3.newInstance(java.lang.Class<T>)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$EntrySet$1.next()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.withVersion(double)"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.withModifiers(int...)"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.disableInnerClassSerialization()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.excludeFieldsWithoutExposeAnnotation()"], ["org.sonar.api.internal.google.gson.internal.Excluder", "org.sonar.api.internal.google.gson.internal.Excluder.withExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy, boolean, boolean)"], ["<T> org.sonar.api.internal.google.gson.TypeAdapter<T>", "org.sonar.api.internal.google.gson.internal.Excluder.create(org.sonar.api.internal.google.gson.Gson, org.sonar.api.internal.google.gson.reflect.TypeToken<T>)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Excluder.excludeField(java.lang.reflect.Field, boolean)"], ["boolean", "org.sonar.api.internal.google.gson.internal.Excluder.excludeClass(java.lang.Class<?>, boolean)"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.write(int)"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.flush()"], ["void", "org.sonar.api.internal.google.gson.internal.Streams$AppendableWriter.close()"], ["<T> T", "org.sonar.api.internal.google.gson.internal.UnsafeAllocator$1.newInstance(java.lang.Class<T>)"], ["K", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.getKey()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.getValue()"], ["V", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.setValue(V)"], ["boolean", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.toString()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.first()"], ["org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node<K, V>", "org.sonar.api.internal.google.gson.internal.LinkedTreeMap$Node.last()"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldNamingPolicy$2.translateName(java.lang.reflect.Field)"], ["java.lang.Float", "org.sonar.api.internal.google.gson.Gson$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Number)"], ["java.lang.Object", "org.sonar.api.internal.google.gson.Gson$2.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.Gson$2.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.LongSerializationPolicy[]", "org.sonar.api.internal.google.gson.LongSerializationPolicy.values()"], ["org.sonar.api.internal.google.gson.LongSerializationPolicy", "org.sonar.api.internal.google.gson.LongSerializationPolicy.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.gson.FieldNamingPolicy[]", "org.sonar.api.internal.google.gson.FieldNamingPolicy.values()"], ["org.sonar.api.internal.google.gson.FieldNamingPolicy", "org.sonar.api.internal.google.gson.FieldNamingPolicy.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.LongSerializationPolicy$1.serialize(java.lang.Long)"], ["org.sonar.api.internal.google.gson.DefaultDateTypeAdapter", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter(int, int)"], ["org.sonar.api.internal.google.gson.DefaultDateTypeAdapter", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter(java.lang.Class<? extends java.util.Date>, int, int)"], ["void", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.util.Date)"], ["java.util.Date", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["java.lang.String", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.read(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["void", "org.sonar.api.internal.google.gson.DefaultDateTypeAdapter.write(org.sonar.api.internal.google.gson.stream.JsonWriter, java.lang.Object)"], ["org.sonar.api.internal.google.gson.JsonSyntaxException", "org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonSyntaxException", "org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonSyntaxException", "org.sonar.api.internal.google.gson.JsonSyntaxException(java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonArray()"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonArray(int)"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonArray.deepCopy()"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.Boolean)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.Character)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.Number)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.add(org.sonar.api.internal.google.gson.JsonElement)"], ["void", "org.sonar.api.internal.google.gson.JsonArray.addAll(org.sonar.api.internal.google.gson.JsonArray)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.set(int, org.sonar.api.internal.google.gson.JsonElement)"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.remove(org.sonar.api.internal.google.gson.JsonElement)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.remove(int)"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.contains(org.sonar.api.internal.google.gson.JsonElement)"], ["int", "org.sonar.api.internal.google.gson.JsonArray.size()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.get(int)"], ["java.lang.Number", "org.sonar.api.internal.google.gson.JsonArray.getAsNumber()"], ["java.lang.String", "org.sonar.api.internal.google.gson.JsonArray.getAsString()"], ["double", "org.sonar.api.internal.google.gson.JsonArray.getAsDouble()"], ["java.math.BigDecimal", "org.sonar.api.internal.google.gson.JsonArray.getAsBigDecimal()"], ["java.math.BigInteger", "org.sonar.api.internal.google.gson.JsonArray.getAsBigInteger()"], ["float", "org.sonar.api.internal.google.gson.JsonArray.getAsFloat()"], ["long", "org.sonar.api.internal.google.gson.JsonArray.getAsLong()"], ["int", "org.sonar.api.internal.google.gson.JsonArray.getAsInt()"], ["byte", "org.sonar.api.internal.google.gson.JsonArray.getAsByte()"], ["char", "org.sonar.api.internal.google.gson.JsonArray.getAsCharacter()"], ["short", "org.sonar.api.internal.google.gson.JsonArray.getAsShort()"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.getAsBoolean()"], ["boolean", "org.sonar.api.internal.google.gson.JsonArray.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.JsonArray.hashCode()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonArray.deepCopy()"], ["org.sonar.api.internal.google.gson.JsonParseException", "org.sonar.api.internal.google.gson.JsonParseException(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonParseException", "org.sonar.api.internal.google.gson.JsonParseException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonParseException", "org.sonar.api.internal.google.gson.JsonParseException(java.lang.Throwable)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.LongSerializationPolicy$2.serialize(java.lang.Long)"], ["org.sonar.api.internal.google.gson.JsonParser", "org.sonar.api.internal.google.gson.JsonParser()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonParser.parse(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonParser.parse(java.io.Reader)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonParser.parse(org.sonar.api.internal.google.gson.stream.JsonReader)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setVersion(double)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.excludeFieldsWithModifiers(int...)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.generateNonExecutableJson()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.excludeFieldsWithoutExposeAnnotation()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.serializeNulls()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.enableComplexMapKeySerialization()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.disableInnerClassSerialization()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setLongSerializationPolicy(org.sonar.api.internal.google.gson.LongSerializationPolicy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setFieldNamingPolicy(org.sonar.api.internal.google.gson.FieldNamingPolicy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setFieldNamingStrategy(org.sonar.api.internal.google.gson.FieldNamingStrategy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setExclusionStrategies(org.sonar.api.internal.google.gson.ExclusionStrategy...)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.addSerializationExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.addDeserializationExclusionStrategy(org.sonar.api.internal.google.gson.ExclusionStrategy)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setPrettyPrinting()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setLenient()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.disableHtmlEscaping()"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setDateFormat(java.lang.String)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setDateFormat(int)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.setDateFormat(int, int)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.registerTypeAdapter(java.lang.reflect.Type, java.lang.Object)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.registerTypeAdapterFactory(org.sonar.api.internal.google.gson.TypeAdapterFactory)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.registerTypeHierarchyAdapter(java.lang.Class<?>, java.lang.Object)"], ["org.sonar.api.internal.google.gson.GsonBuilder", "org.sonar.api.internal.google.gson.GsonBuilder.serializeSpecialFloatingPointValues()"], ["org.sonar.api.internal.google.gson.Gson", "org.sonar.api.internal.google.gson.GsonBuilder.create()"], ["org.sonar.api.internal.google.gson.FieldAttributes", "org.sonar.api.internal.google.gson.FieldAttributes(java.lang.reflect.Field)"], ["java.lang.String", "org.sonar.api.internal.google.gson.FieldAttributes.getName()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.gson.FieldAttributes.getDeclaredType()"], ["<T extends java.lang.annotation.Annotation> T", "org.sonar.api.internal.google.gson.FieldAttributes.getAnnotation(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.gson.FieldAttributes.hasModifier(int)"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonObject()"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonObject.deepCopy()"], ["void", "org.sonar.api.internal.google.gson.JsonObject.add(java.lang.String, org.sonar.api.internal.google.gson.JsonElement)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonObject.remove(java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Number)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Boolean)"], ["void", "org.sonar.api.internal.google.gson.JsonObject.addProperty(java.lang.String, java.lang.Character)"], ["java.util.Set<java.util.Map$Entry<java.lang.String, org.sonar.api.internal.google.gson.JsonElement>>", "org.sonar.api.internal.google.gson.JsonObject.entrySet()"], ["int", "org.sonar.api.internal.google.gson.JsonObject.size()"], ["boolean", "org.sonar.api.internal.google.gson.JsonObject.has(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonObject.get(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonPrimitive", "org.sonar.api.internal.google.gson.JsonObject.getAsJsonPrimitive(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonArray", "org.sonar.api.internal.google.gson.JsonObject.getAsJsonArray(java.lang.String)"], ["org.sonar.api.internal.google.gson.JsonObject", "org.sonar.api.internal.google.gson.JsonObject.getAsJsonObject(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.gson.JsonObject.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.gson.JsonObject.hashCode()"], ["org.sonar.api.internal.google.gson.JsonElement", "org.sonar.api.internal.google.gson.JsonObject.deepCopy()"], ["boolean", "org.sonar.api.internal.google.common.base.Absent.isPresent()"], ["T", "org.sonar.api.internal.google.common.base.Absent.get()"], ["T", "org.sonar.api.internal.google.common.base.Absent.or(T)"], ["T", "org.sonar.api.internal.google.common.base.Absent.or(org.sonar.api.internal.google.common.base.Supplier<? extends T>)"], ["T", "org.sonar.api.internal.google.common.base.Absent.orNull()"], ["<V> org.sonar.api.internal.google.common.base.Optional<V>", "org.sonar.api.internal.google.common.base.Absent.transform(org.sonar.api.internal.google.common.base.Function<? super T, V>)"], ["boolean", "org.sonar.api.internal.google.common.base.Absent.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Absent.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Absent.toString()"], ["org.sonar.api.internal.google.common.base.AbstractIterator$State[]", "org.sonar.api.internal.google.common.base.AbstractIterator$State.values()"], ["org.sonar.api.internal.google.common.base.AbstractIterator$State", "org.sonar.api.internal.google.common.base.AbstractIterator$State.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.AbstractIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.base.AbstractIterator.next()"], ["void", "org.sonar.api.internal.google.common.base.AbstractIterator.remove()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toLowerCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toLowerCase(java.lang.CharSequence)"], ["char", "org.sonar.api.internal.google.common.base.Ascii.toLowerCase(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toUpperCase(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.toUpperCase(java.lang.CharSequence)"], ["char", "org.sonar.api.internal.google.common.base.Ascii.toUpperCase(char)"], ["boolean", "org.sonar.api.internal.google.common.base.Ascii.isLowerCase(char)"], ["boolean", "org.sonar.api.internal.google.common.base.Ascii.isUpperCase(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Ascii.truncate(java.lang.CharSequence, int, java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.Ascii.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CaseFormat$StringConverter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.CaseFormat$StringConverter.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CaseFormat$StringConverter.toString()"], ["org.sonar.api.internal.google.common.base.CaseFormat[]", "org.sonar.api.internal.google.common.base.CaseFormat.values()"], ["org.sonar.api.internal.google.common.base.CaseFormat", "org.sonar.api.internal.google.common.base.CaseFormat.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CaseFormat.to(org.sonar.api.internal.google.common.base.CaseFormat, java.lang.String)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.base.CaseFormat.converterTo(org.sonar.api.internal.google.common.base.CaseFormat)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$1.matches(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$1.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$1.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$10.matches(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$10.and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$10.or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$10.negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$11.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$11.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$12.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$13.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$14.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$14.apply(java.lang.Character)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$14.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$15.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$2.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$2.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$3.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$3.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$4.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$4.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$5.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$5.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$6.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$6.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$7.matches(char)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.indexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.indexIn(java.lang.CharSequence, int)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.lastIndexIn(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$7.matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$7.matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.removeFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$7.trimFrom(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$7.countIn(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$7.and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$7.or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$7.negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$8.matches(char)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.indexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.indexIn(java.lang.CharSequence, int)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.lastIndexIn(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$8.matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$8.matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.removeFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.trimFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$8.trimTrailingFrom(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$8.countIn(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$8.and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$8.or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$8.negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$9.matches(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher$9.replaceFrom(java.lang.CharSequence, char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$9.and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$9.or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$9.negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$And.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$And.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$BitSetMatcher.matches(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$FastMatcher.precomputed()"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$FastMatcher.negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$FastMatcher.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedFastMatcher.precomputed()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.matchesNoneOf(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.countIn(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.negate()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$NegatedMatcher.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$Or.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$Or.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$RangesMatcher.matches(char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher$RangesMatcher.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.is(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.isNot(char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.anyOf(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.noneOf(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.inRange(char, char)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.forPredicate(org.sonar.api.internal.google.common.base.Predicate<? super java.lang.Character>)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.negate()"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.and(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.or(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.CharMatcher", "org.sonar.api.internal.google.common.base.CharMatcher.precomputed()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, int)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.lastIndexIn(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.CharMatcher.countIn(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.retainFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence, char)"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.apply(java.lang.Character)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.CharMatcher.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.CharMatcher.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$1$1.hasNext()"], ["B", "org.sonar.api.internal.google.common.base.Converter$1$1.next()"], ["void", "org.sonar.api.internal.google.common.base.Converter$1$1.remove()"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$ConverterComposition.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Converter$ConverterComposition.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$ConverterComposition.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$FunctionBasedConverter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Converter$FunctionBasedConverter.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$FunctionBasedConverter.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$IdentityConverter.toString()"], ["org.sonar.api.internal.google.common.base.Converter", "org.sonar.api.internal.google.common.base.Converter$IdentityConverter.reverse()"], ["org.sonar.api.internal.google.common.base.Converter<A, B>", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.reverse()"], ["boolean", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Converter$ReverseConverter.toString()"], ["B", "org.sonar.api.internal.google.common.base.Converter.convert(A)"], ["org.sonar.api.internal.google.common.base.Converter<B, A>", "org.sonar.api.internal.google.common.base.Converter.reverse()"], ["<C> org.sonar.api.internal.google.common.base.Converter<A, C>", "org.sonar.api.internal.google.common.base.Converter.andThen(org.sonar.api.internal.google.common.base.Converter<B, C>)"], ["B", "org.sonar.api.internal.google.common.base.Converter.apply(A)"], ["boolean", "org.sonar.api.internal.google.common.base.Converter.equals(java.lang.Object)"], ["<A, B> org.sonar.api.internal.google.common.base.Converter<A, B>", "org.sonar.api.internal.google.common.base.Converter.from(org.sonar.api.internal.google.common.base.Function<? super A, ? extends B>, org.sonar.api.internal.google.common.base.Function<? super B, ? extends A>)"], ["<T> org.sonar.api.internal.google.common.base.Converter<T, T>", "org.sonar.api.internal.google.common.base.Converter.identity()"], ["<T> T", "org.sonar.api.internal.google.common.base.Defaults.defaultValue(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.common.base.Enums$StringConverter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Enums$StringConverter.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Enums$StringConverter.toString()"], ["java.lang.reflect.Field", "org.sonar.api.internal.google.common.base.Enums.getField(java.lang.Enum<?>)"], ["<T extends java.lang.Enum<T>> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)"], ["<T extends java.lang.Enum<T>> org.sonar.api.internal.google.common.base.Converter<java.lang.String, T>", "org.sonar.api.internal.google.common.base.Enums.stringConverter(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.apply(T)"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Equivalence$EquivalentToPredicate.toString()"], ["T", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.get()"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Equivalence$Wrapper.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Equivalence.equivalent(T, T)"], ["int", "org.sonar.api.internal.google.common.base.Equivalence.hash(T)"], ["<F> org.sonar.api.internal.google.common.base.Equivalence<F>", "org.sonar.api.internal.google.common.base.Equivalence.onResultOf(org.sonar.api.internal.google.common.base.Function<F, ? extends T>)"], ["<S extends T> org.sonar.api.internal.google.common.base.Equivalence$Wrapper<S>", "org.sonar.api.internal.google.common.base.Equivalence.wrap(S)"], ["<S extends T> org.sonar.api.internal.google.common.base.Equivalence<java.lang.Iterable<S>>", "org.sonar.api.internal.google.common.base.Equivalence.pairwise()"], ["org.sonar.api.internal.google.common.base.FinalizableReferenceQueue", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue()"], ["void", "org.sonar.api.internal.google.common.base.FinalizableReferenceQueue.close()"], ["boolean", "org.sonar.api.internal.google.common.base.FunctionalEquivalence.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.FunctionalEquivalence.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.FunctionalEquivalence.toString()"], ["org.sonar.api.internal.google.common.base.Functions$ConstantFunction", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction(E)"], ["E", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ConstantFunction.toString()"], ["V", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.apply(K)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ForMapWithDefault.toString()"], ["org.sonar.api.internal.google.common.base.Functions$FunctionComposition", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition(org.sonar.api.internal.google.common.base.Function<B, C>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)"], ["C", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.apply(A)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$FunctionComposition.toString()"], ["V", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.apply(K)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$FunctionForMapNoDefault.toString()"], ["org.sonar.api.internal.google.common.base.Functions$IdentityFunction[]", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.values()"], ["org.sonar.api.internal.google.common.base.Functions$IdentityFunction", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.valueOf(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$IdentityFunction.toString()"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.apply(T)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Functions$PredicateFunction.apply(java.lang.Object)"], ["T", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$SupplierFunction.toString()"], ["org.sonar.api.internal.google.common.base.Functions$ToStringFunction[]", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.values()"], ["org.sonar.api.internal.google.common.base.Functions$ToStringFunction", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Function<java.lang.Object, java.lang.String>", "org.sonar.api.internal.google.common.base.Functions.toStringFunction()"], ["<E> org.sonar.api.internal.google.common.base.Function<E, E>", "org.sonar.api.internal.google.common.base.Functions.identity()"], ["<K, V> org.sonar.api.internal.google.common.base.Function<K, V>", "org.sonar.api.internal.google.common.base.Functions.forMap(java.util.Map<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.base.Function<K, V>", "org.sonar.api.internal.google.common.base.Functions.forMap(java.util.Map<K, ? extends V>, V)"], ["<A, B, C> org.sonar.api.internal.google.common.base.Function<A, C>", "org.sonar.api.internal.google.common.base.Functions.compose(org.sonar.api.internal.google.common.base.Function<B, C>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)"], ["<T> org.sonar.api.internal.google.common.base.Function<T, java.lang.Boolean>", "org.sonar.api.internal.google.common.base.Functions.forPredicate(org.sonar.api.internal.google.common.base.Predicate<T>)"], ["<E> org.sonar.api.internal.google.common.base.Function<java.lang.Object, E>", "org.sonar.api.internal.google.common.base.Functions.constant(E)"], ["<T> org.sonar.api.internal.google.common.base.Function<java.lang.Object, T>", "org.sonar.api.internal.google.common.base.Functions.forSupplier(org.sonar.api.internal.google.common.base.Supplier<T>)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner$1.useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner$1.skipNulls()"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$2.appendTo(A, java.util.Iterator<?>)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner$2.useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner$MapJoiner", "org.sonar.api.internal.google.common.base.Joiner$2.withKeyValueSeparator(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.base.Joiner$3.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Joiner$3.get(int)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Map<?, ?>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Map<?, ?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.join(java.util.Map<?, ?>)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(A, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.join(java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.join(java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["org.sonar.api.internal.google.common.base.Joiner$MapJoiner", "org.sonar.api.internal.google.common.base.Joiner$MapJoiner.useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.on(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.on(char)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.lang.Iterable<?>)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.util.Iterator<?>)"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.lang.Object[])"], ["<A extends java.lang.Appendable> A", "org.sonar.api.internal.google.common.base.Joiner.appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<?>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.util.Iterator<?>)"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object[])"], ["java.lang.StringBuilder", "org.sonar.api.internal.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.lang.Iterable<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.util.Iterator<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.lang.Object[])"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Joiner.join(java.lang.Object, java.lang.Object, java.lang.Object...)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.useForNull(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Joiner", "org.sonar.api.internal.google.common.base.Joiner.skipNulls()"], ["org.sonar.api.internal.google.common.base.Joiner$MapJoiner", "org.sonar.api.internal.google.common.base.Joiner.withKeyValueSeparator(java.lang.String)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.omitNullValues()"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, java.lang.Object)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, boolean)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, char)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, double)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, float)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, int)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, long)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(boolean)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(char)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(double)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(float)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(int)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.addValue(long)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper.toString()"], ["<T> T", "org.sonar.api.internal.google.common.base.MoreObjects.firstNonNull(T, T)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects.toStringHelper(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects.toStringHelper(java.lang.Class<?>)"], ["org.sonar.api.internal.google.common.base.MoreObjects$ToStringHelper", "org.sonar.api.internal.google.common.base.MoreObjects.toStringHelper(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.omitNullValues()"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, boolean)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, char)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, double)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, float)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, int)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.add(java.lang.String, long)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(boolean)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(char)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(double)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(float)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(int)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.addValue(long)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Objects$ToStringHelper.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Objects.hashCode(java.lang.Object...)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects.toStringHelper(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects.toStringHelper(java.lang.Class<?>)"], ["org.sonar.api.internal.google.common.base.Objects$ToStringHelper", "org.sonar.api.internal.google.common.base.Objects.toStringHelper(java.lang.String)"], ["<T> T", "org.sonar.api.internal.google.common.base.Objects.firstNonNull(T, T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Optional.absent()"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Optional.of(T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.base.Optional.fromNullable(T)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.base.Optional.presentInstances(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Optional<? extends T>>)"], ["boolean", "org.sonar.api.internal.google.common.base.PairwiseEquivalence.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.PairwiseEquivalence.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.PairwiseEquivalence.toString()"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkArgument(boolean)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkArgument(boolean, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object...)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkState(boolean)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkState(boolean, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object...)"], ["<T> T", "org.sonar.api.internal.google.common.base.Preconditions.checkNotNull(T)"], ["<T> T", "org.sonar.api.internal.google.common.base.Preconditions.checkNotNull(T, java.lang.Object)"], ["<T> T", "org.sonar.api.internal.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object...)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkElementIndex(int, int)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkElementIndex(int, int, java.lang.String)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkPositionIndex(int, int)"], ["int", "org.sonar.api.internal.google.common.base.Preconditions.checkPositionIndex(int, int, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.base.Preconditions.checkPositionIndexes(int, int, int)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$AndPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.apply(java.lang.Class<?>)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$AssignableFromPredicate.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.apply(A)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$CompositionPredicate.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternFromStringPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.apply(T)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$InPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$InstanceOfPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$IsEqualToPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$NotPredicate.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$1.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$1.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$2.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$2.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$3.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$3.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$4.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate$4.toString()"], ["org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate[]", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate.values()"], ["org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate", "org.sonar.api.internal.google.common.base.Predicates$ObjectPredicate.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.apply(T)"], ["int", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Predicates$OrPredicate.toString()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.alwaysTrue()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.alwaysFalse()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.isNull()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.notNull()"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.not(org.sonar.api.internal.google.common.base.Predicate<T>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.and(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Predicate<? super T>>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.and(org.sonar.api.internal.google.common.base.Predicate<? super T>...)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.and(org.sonar.api.internal.google.common.base.Predicate<? super T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.or(java.lang.Iterable<? extends org.sonar.api.internal.google.common.base.Predicate<? super T>>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.or(org.sonar.api.internal.google.common.base.Predicate<? super T>...)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.or(org.sonar.api.internal.google.common.base.Predicate<? super T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.equalTo(T)"], ["<T> org.sonar.api.internal.google.common.base.Predicate<T>", "org.sonar.api.internal.google.common.base.Predicates.in(java.util.Collection<? extends T>)"], ["<A, B> org.sonar.api.internal.google.common.base.Predicate<A>", "org.sonar.api.internal.google.common.base.Predicates.compose(org.sonar.api.internal.google.common.base.Predicate<B>, org.sonar.api.internal.google.common.base.Function<A, ? extends B>)"], ["boolean", "org.sonar.api.internal.google.common.base.Present.isPresent()"], ["T", "org.sonar.api.internal.google.common.base.Present.get()"], ["T", "org.sonar.api.internal.google.common.base.Present.or(T)"], ["T", "org.sonar.api.internal.google.common.base.Present.or(org.sonar.api.internal.google.common.base.Supplier<? extends T>)"], ["T", "org.sonar.api.internal.google.common.base.Present.orNull()"], ["<V> org.sonar.api.internal.google.common.base.Optional<V>", "org.sonar.api.internal.google.common.base.Present.transform(org.sonar.api.internal.google.common.base.Function<? super T, V>)"], ["boolean", "org.sonar.api.internal.google.common.base.Present.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Present.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Present.toString()"], ["boolean", "org.sonar.api.internal.google.common.base.SmallCharMatcher.matches(char)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$1.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$1.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$2$1.separatorStart(int)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$2$1.separatorEnd(int)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$2.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$2.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$3$1.separatorStart(int)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$3$1.separatorEnd(int)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$3.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$3.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$4$1.separatorStart(int)"], ["int", "org.sonar.api.internal.google.common.base.Splitter$4$1.separatorEnd(int)"], ["org.sonar.api.internal.google.common.base.Splitter$SplittingIterator", "org.sonar.api.internal.google.common.base.Splitter$4.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.base.Splitter$4.iterator(org.sonar.api.internal.google.common.base.Splitter, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Splitter$5.toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.base.Splitter$MapSplitter.split(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(char)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.on(java.util.regex.Pattern)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.onPattern(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.fixedLength(int)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.omitEmptyStrings()"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.limit(int)"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.trimResults()"], ["org.sonar.api.internal.google.common.base.Splitter", "org.sonar.api.internal.google.common.base.Splitter.trimResults(org.sonar.api.internal.google.common.base.CharMatcher)"], ["org.sonar.api.internal.google.common.base.Splitter$MapSplitter", "org.sonar.api.internal.google.common.base.Splitter.withKeyValueSeparator(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Splitter$MapSplitter", "org.sonar.api.internal.google.common.base.Splitter.withKeyValueSeparator(char)"], ["org.sonar.api.internal.google.common.base.Splitter$MapSplitter", "org.sonar.api.internal.google.common.base.Splitter.withKeyValueSeparator(org.sonar.api.internal.google.common.base.Splitter)"], ["org.sonar.api.internal.google.common.base.StandardSystemProperty[]", "org.sonar.api.internal.google.common.base.StandardSystemProperty.values()"], ["org.sonar.api.internal.google.common.base.StandardSystemProperty", "org.sonar.api.internal.google.common.base.StandardSystemProperty.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.StandardSystemProperty.key()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.StandardSystemProperty.value()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.StandardSystemProperty.toString()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createUnstarted()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createUnstarted(org.sonar.api.internal.google.common.base.Ticker)"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createStarted()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.createStarted(org.sonar.api.internal.google.common.base.Ticker)"], ["boolean", "org.sonar.api.internal.google.common.base.Stopwatch.isRunning()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.start()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.stop()"], ["org.sonar.api.internal.google.common.base.Stopwatch", "org.sonar.api.internal.google.common.base.Stopwatch.reset()"], ["long", "org.sonar.api.internal.google.common.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Stopwatch.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.nullToEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.emptyToNull(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.base.Strings.isNullOrEmpty(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.padStart(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.padEnd(java.lang.String, int, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.repeat(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.commonPrefix(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Strings.commonSuffix(java.lang.CharSequence, java.lang.CharSequence)"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$ExpiringMemoizingSupplier.get()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$ExpiringMemoizingSupplier.toString()"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$MemoizingSupplier.get()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$MemoizingSupplier.toString()"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.get()"], ["boolean", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$SupplierComposition.toString()"], ["org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl[]", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.values()"], ["org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.valueOf(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.apply(org.sonar.api.internal.google.common.base.Supplier<java.lang.Object>)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.base.Suppliers$SupplierFunctionImpl.apply(java.lang.Object)"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.get()"], ["boolean", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$SupplierOfInstance.toString()"], ["T", "org.sonar.api.internal.google.common.base.Suppliers$ThreadSafeSupplier.get()"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Suppliers$ThreadSafeSupplier.toString()"], ["<F, T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.compose(org.sonar.api.internal.google.common.base.Function<? super F, T>, org.sonar.api.internal.google.common.base.Supplier<F>)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.memoize(org.sonar.api.internal.google.common.base.Supplier<T>)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.memoizeWithExpiration(org.sonar.api.internal.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.ofInstance(T)"], ["<T> org.sonar.api.internal.google.common.base.Supplier<T>", "org.sonar.api.internal.google.common.base.Suppliers.synchronizedSupplier(org.sonar.api.internal.google.common.base.Supplier<T>)"], ["<T> org.sonar.api.internal.google.common.base.Function<org.sonar.api.internal.google.common.base.Supplier<T>, T>", "org.sonar.api.internal.google.common.base.Suppliers.supplierFunction()"], ["<X extends java.lang.Throwable> void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>)"], ["void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable)"], ["<X extends java.lang.Throwable> void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)"], ["<X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void", "org.sonar.api.internal.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)"], ["java.lang.RuntimeException", "org.sonar.api.internal.google.common.base.Throwables.propagate(java.lang.Throwable)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.base.Throwables.getRootCause(java.lang.Throwable)"], ["java.lang.String", "org.sonar.api.internal.google.common.base.Throwables.getStackTraceAsString(java.lang.Throwable)"], ["long", "org.sonar.api.internal.google.common.base.Ticker$1.read()"], ["org.sonar.api.internal.google.common.base.Ticker", "org.sonar.api.internal.google.common.base.Ticker.systemTicker()"], ["int", "org.sonar.api.internal.google.common.base.Utf8.encodedLength(java.lang.CharSequence)"], ["boolean", "org.sonar.api.internal.google.common.base.Utf8.isWellFormed(byte[])"], ["boolean", "org.sonar.api.internal.google.common.base.Utf8.isWellFormed(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.base.Verify.verify(boolean)"], ["void", "org.sonar.api.internal.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object...)"], ["<T> T", "org.sonar.api.internal.google.common.base.Verify.verifyNotNull(T)"], ["<T> T", "org.sonar.api.internal.google.common.base.Verify.verifyNotNull(T, java.lang.String, java.lang.Object...)"], ["org.sonar.api.internal.google.common.base.VerifyException", "org.sonar.api.internal.google.common.base.VerifyException()"], ["org.sonar.api.internal.google.common.base.VerifyException", "org.sonar.api.internal.google.common.base.VerifyException(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.base.internal.Finalizer.startFinalizer(java.lang.Class<?>, java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.ref.PhantomReference<java.lang.Object>)"], ["void", "org.sonar.api.internal.google.common.base.internal.Finalizer.run()"], ["java.lang.reflect.Field", "org.sonar.api.internal.google.common.base.internal.Finalizer.getInheritableThreadLocalsField()"], ["org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter()"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordHits(int)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordMisses(int)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadSuccess(long)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadException(long)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.recordEviction()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.snapshot()"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache$SimpleStatsCounter.incrementBy(org.sonar.api.internal.google.common.cache.AbstractCache$StatsCounter)"], ["V", "org.sonar.api.internal.google.common.cache.AbstractCache.get(K, java.util.concurrent.Callable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.AbstractCache.getAllPresent(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.put(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.cleanUp()"], ["long", "org.sonar.api.internal.google.common.cache.AbstractCache.size()"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.invalidate(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.invalidateAll(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractCache.invalidateAll()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.AbstractCache.stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.cache.AbstractCache.asMap()"], ["V", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.getAll(java.lang.Iterable<? extends K>)"], ["V", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.apply(K)"], ["void", "org.sonar.api.internal.google.common.cache.AbstractLoadingCache.refresh(K)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordHits(int)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordMisses(int)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordLoadSuccess(long)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordLoadException(long)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.recordEviction()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheBuilder$1.snapshot()"], ["org.sonar.api.internal.google.common.cache.AbstractCache$StatsCounter", "org.sonar.api.internal.google.common.cache.CacheBuilder$2.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.CacheBuilder$2.get()"], ["long", "org.sonar.api.internal.google.common.cache.CacheBuilder$3.read()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener[]", "org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener.values()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener", "org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilder$NullListener.onRemoval(org.sonar.api.internal.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher[]", "org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher.values()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher", "org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.cache.CacheBuilder$OneWeigher.weigh(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.CacheBuilder.newBuilder()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.CacheBuilder.from(org.sonar.api.internal.google.common.cache.CacheBuilderSpec)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.CacheBuilder.from(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.initialCapacity(int)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.concurrencyLevel(int)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.maximumSize(long)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.maximumWeight(long)"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.CacheBuilder<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.weigher(org.sonar.api.internal.google.common.cache.Weigher<? super K1, ? super V1>)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.weakKeys()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.weakValues()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.softValues()"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.refreshAfterWrite(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.ticker(org.sonar.api.internal.google.common.base.Ticker)"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.CacheBuilder<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.removalListener(org.sonar.api.internal.google.common.cache.RemovalListener<? super K1, ? super V1>)"], ["org.sonar.api.internal.google.common.cache.CacheBuilder<K, V>", "org.sonar.api.internal.google.common.cache.CacheBuilder.recordStats()"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.LoadingCache<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.build(org.sonar.api.internal.google.common.cache.CacheLoader<? super K1, V1>)"], ["<K1 extends K, V1 extends V> org.sonar.api.internal.google.common.cache.Cache<K1, V1>", "org.sonar.api.internal.google.common.cache.CacheBuilder.build()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheBuilder.toString()"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$DurationParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$IntegerParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser(org.sonar.api.internal.google.common.cache.LocalCache$Strength)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$KeyStrengthParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$LongParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$RecordStatsParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser(org.sonar.api.internal.google.common.cache.LocalCache$Strength)"], ["void", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec$ValueStrengthParser.parse(org.sonar.api.internal.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.parse(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheBuilderSpec", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.disableCaching()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.toParsableString()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.toString()"], ["int", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.cache.CacheBuilderSpec.equals(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$1$1.call()"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$1.load(K)"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader$1.loadAll(java.lang.Iterable<? extends K>)"], ["org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader", "org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader(org.sonar.api.internal.google.common.base.Function<K, V>)"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$FunctionToCacheLoader.load(K)"], ["org.sonar.api.internal.google.common.cache.CacheLoader$InvalidCacheLoadException", "org.sonar.api.internal.google.common.cache.CacheLoader$InvalidCacheLoadException(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader", "org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader(org.sonar.api.internal.google.common.base.Supplier<V>)"], ["V", "org.sonar.api.internal.google.common.cache.CacheLoader$SupplierToCacheLoader.load(java.lang.Object)"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.loadAll(java.lang.Iterable<? extends K>)"], ["<K, V> org.sonar.api.internal.google.common.cache.CacheLoader<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.from(org.sonar.api.internal.google.common.base.Function<K, V>)"], ["<V> org.sonar.api.internal.google.common.cache.CacheLoader<java.lang.Object, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.from(org.sonar.api.internal.google.common.base.Supplier<V>)"], ["<K, V> org.sonar.api.internal.google.common.cache.CacheLoader<K, V>", "org.sonar.api.internal.google.common.cache.CacheLoader.asyncReloading(org.sonar.api.internal.google.common.cache.CacheLoader<K, V>, java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheStats(long, long, long, long, long, long)"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.requestCount()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.hitCount()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.hitRate()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.missCount()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.missRate()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.loadCount()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.loadSuccessCount()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.loadExceptionCount()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.loadExceptionRate()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.totalLoadTime()"], ["double", "org.sonar.api.internal.google.common.cache.CacheStats.averageLoadPenalty()"], ["long", "org.sonar.api.internal.google.common.cache.CacheStats.evictionCount()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheStats.minus(org.sonar.api.internal.google.common.cache.CacheStats)"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.CacheStats.plus(org.sonar.api.internal.google.common.cache.CacheStats)"], ["int", "org.sonar.api.internal.google.common.cache.CacheStats.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.cache.CacheStats.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.CacheStats.toString()"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingCache.getIfPresent(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingCache.get(K, java.util.concurrent.Callable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.ForwardingCache.getAllPresent(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.put(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.invalidate(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.invalidateAll(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.invalidateAll()"], ["long", "org.sonar.api.internal.google.common.cache.ForwardingCache.size()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.ForwardingCache.stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.cache.ForwardingCache.asMap()"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingCache.cleanUp()"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.get(K)"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.getAll(java.lang.Iterable<? extends K>)"], ["V", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.apply(K)"], ["void", "org.sonar.api.internal.google.common.cache.ForwardingLoadingCache.refresh(K)"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$1.get()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$1.getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$1.getEntry()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$1.isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$1.isActive()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$1.waitForValue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$1.notifyNewValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$2.offer(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$2.peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$2.poll()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$2.size()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractCacheSet.size()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractCacheSet.isEmpty()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractCacheSet.clear()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getNext()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getHash()"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue$1.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.offer(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.peek()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.isEmpty()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.size()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$AccessQueue.offer(java.lang.Object)"], ["org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory[]", "org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory.values()"], ["org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory", "org.sonar.api.internal.google.common.cache.LocalCache$EntryFactory.valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$EntryIterator.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$EntryIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache$EntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$EntrySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$HashIterator.hasNext()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$HashIterator.remove()"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$KeyIterator.next()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$KeySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$KeySet.remove(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.get(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.getAll(java.lang.Iterable<? extends K>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.apply(K)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingSerializationProxy.refresh(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference$1.apply(V)"], ["org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference()"], ["org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.isActive()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.getWeight()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.set(V)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.setException(java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.notifyNewValue(V)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.elapsedNanos()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.waitForValue()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.get()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.getOldValue()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.getEntry()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LoadingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.get(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.getAll(java.lang.Iterable<? extends K>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.refresh(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalLoadingCache.apply(K)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache$1.load(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.getIfPresent(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.get(K, java.util.concurrent.Callable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.getAllPresent(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.put(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.invalidate(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.invalidateAll(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.invalidateAll()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.size()"], ["java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.asMap()"], ["org.sonar.api.internal.google.common.cache.CacheStats", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.stats()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$LocalManualCache.cleanUp()"], ["org.sonar.api.internal.google.common.cache.LocalCache$NullEntry[]", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.values()"], ["org.sonar.api.internal.google.common.cache.LocalCache$NullEntry", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getNext()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getHash()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$NullEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$Segment$1.run()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.getEntry()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.notifyNewValue(V)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.isActive()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$SoftValueReference.waitForValue()"], ["org.sonar.api.internal.google.common.cache.LocalCache$Strength[]", "org.sonar.api.internal.google.common.cache.LocalCache$Strength.values()"], ["org.sonar.api.internal.google.common.cache.LocalCache$Strength", "org.sonar.api.internal.google.common.cache.LocalCache$Strength.valueOf(java.lang.String)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getKey()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getHash()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongEntry.getNext()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.get()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.getEntry()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.isActive()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.waitForValue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongValueReference.notifyNewValue(V)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$StrongWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$ValueIterator.next()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$Values.size()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$Values.isEmpty()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$Values.clear()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$Values.contains(java.lang.Object)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getAccessTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setAccessTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getNextInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setNextInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getPreviousInAccessQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setPreviousInAccessQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.setValueReference(org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getHash()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakEntry.getNext()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.getEntry()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.notifyNewValue(V)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.isLoading()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.isActive()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$WeakValueReference.waitForValue()"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WeakWriteEntry.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedSoftValueReference.getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedSoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedStrongValueReference.getWeight()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedWeakValueReference.getWeight()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ValueReference<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WeightedWeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.getWriteTime()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.setWriteTime(long)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.getNextInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.setNextInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.getPreviousInWriteQueue()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue$1.setPreviousInWriteQueue(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.offer(org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.peek()"], ["org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.isEmpty()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.size()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteQueue.offer(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.getKey()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.getValue()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.hashCode()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.setValue(V)"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.LocalCache$WriteThroughEntry.toString()"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache.cleanUp()"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.isEmpty()"], ["int", "org.sonar.api.internal.google.common.cache.LocalCache.size()"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.getIfPresent(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.put(K, V)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.putIfAbsent(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.cache.LocalCache.replace(K, V, V)"], ["V", "org.sonar.api.internal.google.common.cache.LocalCache.replace(K, V)"], ["void", "org.sonar.api.internal.google.common.cache.LocalCache.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.cache.LocalCache.entrySet()"], ["org.sonar.api.internal.google.common.cache.LongAddable", "org.sonar.api.internal.google.common.cache.LongAddables$1.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LongAddables$1.get()"], ["org.sonar.api.internal.google.common.cache.LongAddable", "org.sonar.api.internal.google.common.cache.LongAddables$2.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.LongAddables$2.get()"], ["void", "org.sonar.api.internal.google.common.cache.LongAddables$PureJavaLongAddable.increment()"], ["void", "org.sonar.api.internal.google.common.cache.LongAddables$PureJavaLongAddable.add(long)"], ["long", "org.sonar.api.internal.google.common.cache.LongAddables$PureJavaLongAddable.sum()"], ["org.sonar.api.internal.google.common.cache.LongAddable", "org.sonar.api.internal.google.common.cache.LongAddables.create()"], ["org.sonar.api.internal.google.common.cache.LongAdder", "org.sonar.api.internal.google.common.cache.LongAdder()"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.add(long)"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.increment()"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.decrement()"], ["long", "org.sonar.api.internal.google.common.cache.LongAdder.sum()"], ["void", "org.sonar.api.internal.google.common.cache.LongAdder.reset()"], ["long", "org.sonar.api.internal.google.common.cache.LongAdder.sumThenReset()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.LongAdder.toString()"], ["long", "org.sonar.api.internal.google.common.cache.LongAdder.longValue()"], ["int", "org.sonar.api.internal.google.common.cache.LongAdder.intValue()"], ["float", "org.sonar.api.internal.google.common.cache.LongAdder.floatValue()"], ["double", "org.sonar.api.internal.google.common.cache.LongAdder.doubleValue()"], ["org.sonar.api.internal.google.common.cache.RemovalCause[]", "org.sonar.api.internal.google.common.cache.RemovalCause.values()"], ["org.sonar.api.internal.google.common.cache.RemovalCause", "org.sonar.api.internal.google.common.cache.RemovalCause.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.cache.RemovalListeners$1$1.run()"], ["void", "org.sonar.api.internal.google.common.cache.RemovalListeners$1.onRemoval(org.sonar.api.internal.google.common.cache.RemovalNotification<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.cache.RemovalListener<K, V>", "org.sonar.api.internal.google.common.cache.RemovalListeners.asynchronous(org.sonar.api.internal.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.cache.RemovalCause", "org.sonar.api.internal.google.common.cache.RemovalNotification.getCause()"], ["boolean", "org.sonar.api.internal.google.common.cache.RemovalNotification.wasEvicted()"], ["K", "org.sonar.api.internal.google.common.cache.RemovalNotification.getKey()"], ["V", "org.sonar.api.internal.google.common.cache.RemovalNotification.getValue()"], ["V", "org.sonar.api.internal.google.common.cache.RemovalNotification.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.cache.RemovalNotification.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.cache.RemovalNotification.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.cache.RemovalNotification.toString()"], ["sun.misc.Unsafe", "org.sonar.api.internal.google.common.cache.Striped64$1.run()"], ["java.lang.Object", "org.sonar.api.internal.google.common.cache.Striped64$1.run()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1$1.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$EntrySet.retainAll(java.util.Collection<?>)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractBiMap$Inverse.values()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap$KeySet.retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.toArray(T[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractBiMap$ValueSet.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractBiMap.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap.forcePut(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractBiMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractBiMap.clear()"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.AbstractBiMap.inverse()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractBiMap.entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractBiMap.values()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.next()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.nextIndex()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.hasPrevious()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.previous()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractIndexedListIterator.previousIndex()"], ["org.sonar.api.internal.google.common.collect.AbstractIterator$State[]", "org.sonar.api.internal.google.common.collect.AbstractIterator$State.values()"], ["org.sonar.api.internal.google.common.collect.AbstractIterator$State", "org.sonar.api.internal.google.common.collect.AbstractIterator$State.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractIterator.next()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractIterator.peek()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.put(K, V)"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.equals(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.hasNext()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.toString()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.clear()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$AsMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$Itr.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$Itr.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$Itr.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet$1.hasNext()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet$1.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$KeySet.hashCode()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.firstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lastEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollFirstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollLastEntry()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.descendingMap()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K, boolean)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.lower(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.floor(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.ceiling(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.higher(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollFirst()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollLast()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(java.lang.Object, java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.lastKey()"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.headMap(K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.subMap(K, K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.tailMap(K)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.first()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.last()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.remove()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.addAll(java.util.Collection<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.containsAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.retainAll(java.util.Collection<?>)"], ["org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator(org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.hasPrevious()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previous()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.set(V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.addAll(int, java.util.Collection<? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.get(int)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.set(int, V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.add(int, V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.remove(int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedList.lastIndexOf(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.lower(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.floor(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.ceiling(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.higher(V)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollFirst()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSet.removeAll(java.util.Collection<?>)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.comparator()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.first()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.last()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.clear()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultimap.entries()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1$1.getElement()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1$1.getCount()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.hasNext()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$1.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.remove()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.clear()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.size()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapBasedMultiset.setCount(E, int)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMapEntry.toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Entries.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultimap$EntrySet.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap$EntrySet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMultimap$Values.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.entries()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractMultimap.asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultimap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultimap.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset$EntrySet.size()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.count(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.add(E)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.add(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractMultiset.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractMultiset.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractMultiset.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractMultiset.toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap$1.iterator()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.pollLastEntry()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lowerEntry(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.floorEntry(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.ceilingEntry(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.lowerKey(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.floorKey(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.ceilingKey(K)"], ["K", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.higherKey(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.tailMap(K)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.entrySet()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.AbstractNavigableMap.descendingMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.contains(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.removeAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractRangeSet.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractSequentialIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.AbstractSequentialIterator.next()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.entries()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.equals(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedKeySortedSetMultimap.keySet()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.comparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.AbstractSortedMultiset.elementSet()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractTable$CellSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.clear()"], ["int", "org.sonar.api.internal.google.common.collect.AbstractTable$Values.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.contains(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable.clear()"], ["V", "org.sonar.api.internal.google.common.collect.AbstractTable.remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.AbstractTable.put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.AbstractTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.AbstractTable.cellSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.AbstractTable.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.AbstractTable.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AbstractTable.toString()"], ["int", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.compare(java.lang.Object, java.lang.Object)"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.sortedCopy(java.lang.Iterable<E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.immutableSortedCopy(java.lang.Iterable<E>)"], ["<S> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.reverse()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.AllEqualOrdering.toString()"], ["<K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.create()"], ["<K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.create(int, int)"], ["<K, V> org.sonar.api.internal.google.common.collect.ArrayListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.trimToSize()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.equals(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.removeAll(java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.values()"], ["void", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayListMultimap.isEmpty()"], ["R", "org.sonar.api.internal.google.common.collect.ArrayTable$1$1.getRowKey()"], ["C", "org.sonar.api.internal.google.common.collect.ArrayTable$1$1.getColumnKey()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$1$1.getValue()"], ["K", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1$1$1.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1$1$1.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1$1$1.setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable$ArrayMap.clear()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.ArrayTable$ColumnMap.put(C, java.util.Map<R, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ArrayTable$ColumnMap.put(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable$RowMap.put(R, java.util.Map<C, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ArrayTable$RowMap.put(java.lang.Object, java.lang.Object)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ArrayTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ArrayTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.create(org.sonar.api.internal.google.common.collect.Table<R, C, V>)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.at(int, int)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.set(int, int, V)"], ["V[][]", "org.sonar.api.internal.google.common.collect.ArrayTable.toArray(java.lang.Class<V>)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable.clear()"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable.eraseAll()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.ArrayTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ArrayTable.size()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable.cellSet()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.column(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable.columnMap()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.ArrayTable.row(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.ArrayTable.rowMap()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ArrayTable.toString()"], ["int", "org.sonar.api.internal.google.common.collect.ArrayTable.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ArrayTable.equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ArrayTable.columnKeySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ArrayTable.rowKeySet()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$2.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PostOrderIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PostOrderIterator.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PreOrderIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PreOrderIterator.next()"], ["T", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser$PreOrderIterator.peek()"], ["org.sonar.api.internal.google.common.collect.BinaryTreeTraverser", "org.sonar.api.internal.google.common.collect.BinaryTreeTraverser()"], ["org.sonar.api.internal.google.common.collect.BoundType[]", "org.sonar.api.internal.google.common.collect.BoundType.values()"], ["org.sonar.api.internal.google.common.collect.BoundType", "org.sonar.api.internal.google.common.collect.BoundType.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.compare(F, F)"], ["boolean", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ByFunctionOrdering.toString()"], ["int", "org.sonar.api.internal.google.common.collect.CartesianList$1.size()"], ["E", "org.sonar.api.internal.google.common.collect.CartesianList$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.CartesianList.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.CartesianList.contains(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.CartesianList.get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Collections2$1.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.addAll(java.util.Collection<? extends E>)"], ["void", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.size()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Collections2$FilteredCollection.toArray(T[])"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.contains(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Collections2$OrderedPermutationCollection.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.contains(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Collections2$PermutationCollection.toString()"], ["void", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.Collections2$TransformedCollection.size()"], ["<E> java.util.Collection<E>", "org.sonar.api.internal.google.common.collect.Collections2.filter(java.util.Collection<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<F, T> java.util.Collection<T>", "org.sonar.api.internal.google.common.collect.Collections2.transform(java.util.Collection<F>, org.sonar.api.internal.google.common.base.Function<? super F, T>)"], ["<E extends java.lang.Comparable<? super E>> java.util.Collection<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>)"], ["<E> java.util.Collection<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)"], ["<E> java.util.Collection<java.util.List<E>>", "org.sonar.api.internal.google.common.collect.Collections2.permutations(java.util.Collection<E>)"], ["int", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.compare(T, T)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ComparatorOrdering.toString()"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(T, T, java.util.Comparator<T>)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(int, int)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(long, long)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(float, float)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compare(double, double)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compareTrueFirst(boolean, boolean)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.compareFalseFirst(boolean, boolean)"], ["int", "org.sonar.api.internal.google.common.collect.ComparisonChain$1.result()"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(T, T, java.util.Comparator<T>)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(int, int)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(long, long)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(float, float)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(double, double)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compareTrueFirst(boolean, boolean)"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.compareFalseFirst(boolean, boolean)"], ["int", "org.sonar.api.internal.google.common.collect.ComparisonChain$InactiveComparisonChain.result()"], ["org.sonar.api.internal.google.common.collect.ComparisonChain", "org.sonar.api.internal.google.common.collect.ComparisonChain.start()"], ["int", "org.sonar.api.internal.google.common.collect.CompoundOrdering.compare(T, T)"], ["boolean", "org.sonar.api.internal.google.common.collect.CompoundOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.CompoundOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.CompoundOrdering.toString()"], ["org.sonar.api.internal.google.common.collect.ComputationException", "org.sonar.api.internal.google.common.collect.ComputationException(java.lang.Throwable)"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputedReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference(org.sonar.api.internal.google.common.base.Function<? super K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$1.removeAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$3.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$3.next()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray(T[])"], ["<E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.create()"], ["<E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.create(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset<E>", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.create(org.sonar.api.internal.google.common.collect.MapMaker)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.size()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.toArray(T[])"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.clear()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.toString()"], ["int", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.add(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ConcurrentHashMultiset.contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection(java.util.Collection<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedCollection.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.add(E)"], ["void", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedList.set(int, E)"], ["org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator(java.util.ListIterator<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["void", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator.add(E)"], ["void", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedListIterator.set(E)"], ["org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet(java.util.Set<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSet.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Constraints$ConstrainedSortedSet.addAll(java.util.Collection<? extends E>)"], ["<E> java.util.Collection<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedCollection(java.util.Collection<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedSet(java.util.Set<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<E> java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedSortedSet(java.util.SortedSet<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Constraints.constrainedList(java.util.List<E>, org.sonar.api.internal.google.common.collect.Constraint<? super E>)"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ContiguousSet<C>", "org.sonar.api.internal.google.common.collect.ContiguousSet.create(org.sonar.api.internal.google.common.collect.Range<C>, org.sonar.api.internal.google.common.collect.DiscreteDomain<C>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ContiguousSet.toString()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ContiguousSet.builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["int", "org.sonar.api.internal.google.common.collect.Count.get()"], ["int", "org.sonar.api.internal.google.common.collect.Count.getAndAdd(int)"], ["int", "org.sonar.api.internal.google.common.collect.Count.addAndGet(int)"], ["void", "org.sonar.api.internal.google.common.collect.Count.set(int)"], ["int", "org.sonar.api.internal.google.common.collect.Count.getAndSet(int)"], ["int", "org.sonar.api.internal.google.common.collect.Count.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.Count.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Count.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveAll.compareTo(org.sonar.api.internal.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$AboveAll.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveAll.compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveValue.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$AboveValue.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$AboveValue.compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowAll.compareTo(org.sonar.api.internal.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$BelowAll.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowAll.compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowValue.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Cut$BelowValue.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Cut$BelowValue.compareTo(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut.compareTo(org.sonar.api.internal.google.common.collect.Cut<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Cut.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Cut.compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap.size()"], ["V", "org.sonar.api.internal.google.common.collect.DenseImmutableTable$ImmutableArrayMap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.columnMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.rowMap()"], ["V", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.get(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.size()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.DenseImmutableTable.rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.size()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.descendingMultiset()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.size()"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.higher(E)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.descendingIterator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.descendingSet()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.DescendingImmutableSortedSet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.DescendingMultiset$1.size()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.DescendingMultiset.comparator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.DescendingMultiset.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.DescendingMultiset.toArray(T[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DescendingMultiset.toString()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.DescendingMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.DescendingMultiset.elementSet()"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.math.BigInteger)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.math.BigInteger)"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.math.BigInteger, java.math.BigInteger)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.toString()"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.lang.Comparable)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Integer)"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.minValue()"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.toString()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.minValue()"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Comparable)"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Long)"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Long)"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.minValue()"], ["java.lang.Long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.maxValue()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.toString()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.maxValue()"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.minValue()"], ["long", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Comparable)"], ["java.lang.Comparable", "org.sonar.api.internal.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Comparable)"], ["C", "org.sonar.api.internal.google.common.collect.DiscreteDomain.minValue()"], ["C", "org.sonar.api.internal.google.common.collect.DiscreteDomain.maxValue()"], ["C", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.first()"], ["C", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.last()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.hashCode()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.last()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.first()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyContiguousSet.iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.inverse()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<java.lang.Object, java.lang.Object>>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.entrySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.asMultimap()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.inverse()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableBiMap.keySet()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSet.iterator()"], ["V", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.toString()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.entrySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.asMultimap()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.headMap(K, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.tailMap(K, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.headMap(java.lang.Object, boolean)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMap.keySet()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.count(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.containsAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.iterator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedMultiset.elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.toString()"], ["E", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.last()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EmptyImmutableSortedSet.iterator()"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> org.sonar.api.internal.google.common.collect.EnumBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumBiMap.create(java.lang.Class<K>, java.lang.Class<V>)"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> org.sonar.api.internal.google.common.collect.EnumBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumBiMap.create(java.util.Map<K, V>)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumBiMap.entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumBiMap.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumBiMap.keySet()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.EnumBiMap.inverse()"], ["void", "org.sonar.api.internal.google.common.collect.EnumBiMap.clear()"], ["void", "org.sonar.api.internal.google.common.collect.EnumBiMap.putAll(java.util.Map)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumBiMap.containsValue(java.lang.Object)"], ["<K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.EnumHashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.create(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.EnumHashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.create(java.util.Map<K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.forcePut(K, V)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.entrySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.keySet()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.inverse()"], ["void", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.clear()"], ["void", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.putAll(java.util.Map)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.forcePut(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.put(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumHashBiMap.containsValue(java.lang.Object)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E>", "org.sonar.api.internal.google.common.collect.EnumMultiset.create(java.lang.Class<E>)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E>", "org.sonar.api.internal.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.EnumMultiset<E>", "org.sonar.api.internal.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>, java.lang.Class<E>)"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.count(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.EnumMultiset.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.size()"], ["void", "org.sonar.api.internal.google.common.collect.EnumMultiset.clear()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumMultiset.entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.EnumMultiset.toString()"], ["int", "org.sonar.api.internal.google.common.collect.EnumMultiset.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.EnumMultiset.elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EnumMultiset.isEmpty()"], ["<E> org.sonar.api.internal.google.common.collect.EvictingQueue<E>", "org.sonar.api.internal.google.common.collect.EvictingQueue.create(int)"], ["int", "org.sonar.api.internal.google.common.collect.EvictingQueue.remainingCapacity()"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.offer(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.EvictingQueue.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.compare(T, T)"], ["boolean", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ExplicitOrdering.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$1.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$1.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$1.remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$2.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$3.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$3.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap$3.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.containsKey(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.clear()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$AsMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.util.Map$Entry<K, java.util.Collection<V>>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys$1.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$Keys.remove(java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap$ValuePredicate.apply(V)"], ["org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.unfiltered()"], ["org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.entryPredicate()"], ["int", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.containsKey(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredEntryMultimap.clear()"], ["org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.unfiltered()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredEntrySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeyListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(java.util.Collection<? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(int, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(int, java.util.Collection<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingSet.add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$AddRejectingSet.addAll(java.util.Collection<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap$Entries.remove(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.unfiltered()"], ["org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.entryPredicate()"], ["int", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.containsKey(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredKeyMultimap.clear()"], ["int", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap$EntrySet.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap$EntrySet.equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.unfiltered()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.removeAll(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.unfiltered()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.FilteredKeySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.FilteredMultimapValues.clear()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.FluentIterable$FromIterableFunction.apply(java.lang.Object)"], ["<E> org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.from(java.lang.Iterable<E>)"], ["<E> org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.from(org.sonar.api.internal.google.common.collect.FluentIterable<E>)"], ["<E> org.sonar.api.internal.google.common.collect.FluentIterable<E>", "org.sonar.api.internal.google.common.collect.FluentIterable.of(E[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.FluentIterable.toString()"], ["int", "org.sonar.api.internal.google.common.collect.FluentIterable.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.contains(java.lang.Object)"], ["<T> org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.FluentIterable.filter(java.lang.Class<T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.anyMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.allMatch(org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<T> org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.FluentIterable.transform(org.sonar.api.internal.google.common.base.Function<? super E, T>)"], ["<T> org.sonar.api.internal.google.common.collect.FluentIterable<T>", "org.sonar.api.internal.google.common.collect.FluentIterable.transformAndConcat(org.sonar.api.internal.google.common.base.Function<? super E, ? extends java.lang.Iterable<? extends T>>)"], ["boolean", "org.sonar.api.internal.google.common.collect.FluentIterable.isEmpty()"], ["<V> org.sonar.api.internal.google.common.collect.ImmutableMap<E, V>", "org.sonar.api.internal.google.common.collect.FluentIterable.toMap(org.sonar.api.internal.google.common.base.Function<? super E, V>)"], ["<K> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, E>", "org.sonar.api.internal.google.common.collect.FluentIterable.index(org.sonar.api.internal.google.common.base.Function<? super E, K>)"], ["<K> org.sonar.api.internal.google.common.collect.ImmutableMap<K, E>", "org.sonar.api.internal.google.common.collect.FluentIterable.uniqueIndex(org.sonar.api.internal.google.common.base.Function<? super E, K>)"], ["E[]", "org.sonar.api.internal.google.common.collect.FluentIterable.toArray(java.lang.Class<E>)"], ["<C extends java.util.Collection<? super E>> C", "org.sonar.api.internal.google.common.collect.FluentIterable.copyInto(C)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.FluentIterable.join(org.sonar.api.internal.google.common.base.Joiner)"], ["E", "org.sonar.api.internal.google.common.collect.FluentIterable.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.remainingCapacity()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.putFirst(E)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.putLast(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.offerFirst(E, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.offerLast(E, long, java.util.concurrent.TimeUnit)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.takeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.takeLast()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.pollFirst(long, java.util.concurrent.TimeUnit)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.pollLast(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.put(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.take()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.poll(long, java.util.concurrent.TimeUnit)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>, int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingCollection.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingCollection.retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingCollection.clear()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ForwardingCollection.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ForwardingCollection.toArray(T[])"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.putIfAbsent(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.replace(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingConcurrentMap.replace(K, V, V)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingDeque.addFirst(E)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingDeque.addLast(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.getFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.getLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.offerFirst(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.offerLast(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.peekFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.peekLast()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.pop()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingDeque.push(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeFirstOccurrence(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingDeque.removeLastOccurrence(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.ForwardingIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingIterator.remove()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingList.add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingList.addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingList.lastIndexOf(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingList.remove(int)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingList.set(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingList.hashCode()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.hasPrevious()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.nextIndex()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.previous()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingListIterator.set(E)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingListMultimap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ForwardingMap$StandardEntrySet", "org.sonar.api.internal.google.common.collect.ForwardingMap$StandardEntrySet(org.sonar.api.internal.google.common.collect.ForwardingMap)"], ["org.sonar.api.internal.google.common.collect.ForwardingMap$StandardKeySet", "org.sonar.api.internal.google.common.collect.ForwardingMap$StandardKeySet(org.sonar.api.internal.google.common.collect.ForwardingMap)"], ["org.sonar.api.internal.google.common.collect.ForwardingMap$StandardValues", "org.sonar.api.internal.google.common.collect.ForwardingMap$StandardValues(org.sonar.api.internal.google.common.collect.ForwardingMap)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingMap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMap.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMap.put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ForwardingMap.entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMap.hashCode()"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMapEntry.hashCode()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.asMap()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.containsValue(java.lang.Object)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.entries()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.remove(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultimap.hashCode()"], ["org.sonar.api.internal.google.common.collect.ForwardingMultiset$StandardElementSet", "org.sonar.api.internal.google.common.collect.ForwardingMultiset$StandardElementSet(org.sonar.api.internal.google.common.collect.ForwardingMultiset)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.remove(java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.hashCode()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingMultiset.setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()"], ["org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardDescendingMap(org.sonar.api.internal.google.common.collect.ForwardingNavigableMap)"], ["org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet(org.sonar.api.internal.google.common.collect.ForwardingNavigableMap)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.descendingMap()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingNavigableMap.tailMap(K, boolean)"], ["org.sonar.api.internal.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet$StandardDescendingSet(org.sonar.api.internal.google.common.collect.ForwardingNavigableSet)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingNavigableSet.pollLast()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ForwardingObject.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingQueue.offer(E)"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.poll()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.remove()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.peek()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingQueue.element()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingSet.hashCode()"], ["org.sonar.api.internal.google.common.collect.ForwardingSetMultimap", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSetMultimap.entries()"], ["org.sonar.api.internal.google.common.collect.ForwardingSortedMap$StandardKeySet", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap$StandardKeySet(org.sonar.api.internal.google.common.collect.ForwardingSortedMap)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.firstKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.headMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.lastKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMap.tailMap(K)"], ["org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset(org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset)"], ["org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset$StandardElementSet(org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.comparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ForwardingSortedMultiset.elementSet()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.comparator()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.ForwardingSortedSet.last()"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.ForwardingTable.cellSet()"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingTable.clear()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.ForwardingTable.column(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.ForwardingTable.columnMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingTable.put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.ForwardingTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ForwardingTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.ForwardingTable.row(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.ForwardingTable.rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingTable.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ForwardingTable.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ForwardingTable.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.GeneralRange.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.GeneralRange.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.GeneralRange.toString()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener[]", "org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener.values()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener", "org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.collect.GenericMapMaker$NullListener.onRemoval(org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification<java.lang.Object, java.lang.Object>)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable$Factory.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.HashBasedTable$Factory.get()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable.create()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable.create(int, int)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.HashBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.HashBasedTable.create(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBasedTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.equals(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBasedTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.rowMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashBasedTable.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashBasedTable.columnKeySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashBasedTable.rowKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.column(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashBasedTable.row(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashBasedTable.cellSet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.HashBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.HashBasedTable.clear()"], ["int", "org.sonar.api.internal.google.common.collect.HashBasedTable.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBasedTable.isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.HashBasedTable.toString()"], ["int", "org.sonar.api.internal.google.common.collect.HashBasedTable.hashCode()"], ["void", "org.sonar.api.internal.google.common.collect.HashBasedTable.putAll(org.sonar.api.internal.google.common.collect.Table)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet$1$MapEntry.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet$1$MapEntry.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet$1$MapEntry.setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.HashBiMap$EntrySet.iterator()"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.getKey()"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.getValue()"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1$1$InverseEntry.setValue(K)"], ["java.util.Iterator<java.util.Map$Entry<V, K>>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$1.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse$InverseKeySet.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.size()"], ["void", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.containsKey(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.get(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.put(V, K)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.forcePut(V, K)"], ["K", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.remove(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.inverse()"], ["java.util.Set<java.util.Map$Entry<V, K>>", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashBiMap$Inverse.values()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$Itr.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.HashBiMap$Itr.next()"], ["void", "org.sonar.api.internal.google.common.collect.HashBiMap$Itr.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap$KeySet.remove(java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap.create()"], ["<K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap.create(int)"], ["<K, V> org.sonar.api.internal.google.common.collect.HashBiMap<K, V>", "org.sonar.api.internal.google.common.collect.HashBiMap.create(java.util.Map<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashBiMap.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.forcePut(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.HashBiMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.HashBiMap.clear()"], ["int", "org.sonar.api.internal.google.common.collect.HashBiMap.size()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.HashBiMap.entrySet()"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.HashBiMap.inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashBiMap.values()"], ["<K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.HashMultimap.create()"], ["<K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.HashMultimap.create(int, int)"], ["<K, V> org.sonar.api.internal.google.common.collect.HashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.HashMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.HashMultimap.asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.entries()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.HashMultimap.values()"], ["void", "org.sonar.api.internal.google.common.collect.HashMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultimap.size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.HashMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.HashMultimap.hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.HashMultimap.keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultimap.keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultimap.isEmpty()"], ["<E> org.sonar.api.internal.google.common.collect.HashMultiset<E>", "org.sonar.api.internal.google.common.collect.HashMultiset.create()"], ["<E> org.sonar.api.internal.google.common.collect.HashMultiset<E>", "org.sonar.api.internal.google.common.collect.HashMultiset.create(int)"], ["<E> org.sonar.api.internal.google.common.collect.HashMultiset<E>", "org.sonar.api.internal.google.common.collect.HashMultiset.create(java.lang.Iterable<? extends E>)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.setCount(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.add(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.count(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.HashMultiset.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.size()"], ["void", "org.sonar.api.internal.google.common.collect.HashMultiset.clear()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultiset.entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.HashMultiset.toString()"], ["int", "org.sonar.api.internal.google.common.collect.HashMultiset.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.HashMultiset.elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.setCount(java.lang.Object, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.add(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.HashMultiset.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableAsList.isEmpty()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder.put(java.lang.Object, java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.copyOf(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.inverse()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableBiMap.values()"], ["org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder()"], ["<T extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder.put(java.lang.Class<T>, T)"], ["<T extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder.putAll(java.util.Map<? extends java.lang.Class<? extends T>, ? extends T>)"], ["<B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.builder()"], ["<B, S extends B> org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.copyOf(java.util.Map<? extends java.lang.Class<? extends S>, ? extends S>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.getInstance(java.lang.Class<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.ImmutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(java.lang.Object)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.ImmutableCollection.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ImmutableCollection.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableCollection.retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableCollection.clear()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableCollection.iterator()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableEntry.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableEntry.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableEntry.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.size()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$1.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2$1.next()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap$2.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableEnumMap.get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableEnumSet.iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableList$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableList$Builder.add(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.lastIndexOf(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.size()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.subList(int, int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.listIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableList$ReverseImmutableList.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.size()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.get(int)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.subList(int, int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.listIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableList$SubList.iterator()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(java.util.Collection<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.copyOf(E[])"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList.lastIndexOf(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList.addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList.set(int, E)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableList.add(int, E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableList.remove(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableList.hashCode()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableList$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableList.builder()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableList.iterator()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableList.subList(int, int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList.listIterator(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.ImmutableList.listIterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(K, V...)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.Object, java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap<V, K>", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)"], ["java.util.List", "org.sonar.api.internal.google.common.collect.ImmutableListMultimap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap$Builder.build()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getKey()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1$1.getValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.hasNext()"], ["java.util.Map$Entry<K, org.sonar.api.internal.google.common.collect.ImmutableSet<V>>", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.next()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, org.sonar.api.internal.google.common.collect.ImmutableSet<V>>>", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.containsKey(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.get(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.keySet()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.copyOf(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableMap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.containsValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableMap.entrySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMap.asMultimap()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMap.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableMap.toString()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap.entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMap.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMap.keySet()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMapEntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMapEntrySet.contains(java.lang.Object)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMapKeySet.iterator()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableMapValues$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMapValues.iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.putAll(K, V...)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$EntryCollection.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Itr.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Itr.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Keys.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.size()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultimap$Values.iterator()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.containsValue(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.size()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.asMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.entries()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.equals(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.asMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.values()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.keySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.isEmpty()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$1.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$1.next()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.hashCode()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultiset$EntrySet.iterator()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.containsAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.toString()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.builder()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.iterator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableMultiset.entrySet()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$1.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$1.get(int)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$2.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["org.sonar.api.internal.google.common.collect.RangeMap", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$2.subRangeMap(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$2.asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder.put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder.build()"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.of()"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.of(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.copyOf(org.sonar.api.internal.google.common.collect.RangeMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableRangeMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.builder()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.get(K)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.getEntry(K)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.clear()"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.remove(org.sonar.api.internal.google.common.collect.Range<K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.toString()"], ["org.sonar.api.internal.google.common.collect.RangeMap", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableRangeMap.asMapOfRanges()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$1.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.contains(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$AsSet.iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$ComplementRanges.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet$ComplementRanges.get(int)"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.of()"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.of(org.sonar.api.internal.google.common.collect.Range<C>)"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.ImmutableRangeSet<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.copyOf(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.addAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.removeAll(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableRangeSet$Builder<C>", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.builder()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.contains(java.lang.Comparable)"], ["org.sonar.api.internal.google.common.collect.RangeSet", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.subRangeSet(org.sonar.api.internal.google.common.collect.Range)"], ["org.sonar.api.internal.google.common.collect.RangeSet", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.complement()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableRangeSet.asRanges()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.copyOf(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSet.hashCode()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSet.builder()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSet.iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, V...)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder.put(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.copyOf(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<V, K>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.inverse()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.entries()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.comparator()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.lastIndexOf(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSortedAsList.contains(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder(java.util.Comparator<? super K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder.put(java.lang.Object, java.lang.Object)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of()"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>, java.util.Comparator<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.copyOfSorted(java.util.SortedMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.naturalOrder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.orderedBy(java.util.Comparator<K>)"], ["<K extends java.lang.Comparable<?>, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.reverseOrder()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.containsValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.entrySet()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lastKey()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.headMap(K)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(K, K)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(K, boolean, K, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.tailMap(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.keySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.entrySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.keySet()"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingKeySet()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.navigableKeySet()"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.ImmutableSortedMap.descendingMap()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap$Builder<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.builder()"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V, K, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder(java.util.Comparator<? super E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.setCount(java.lang.Object, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addCopies(java.lang.Object, int)"], ["org.sonar.api.internal.google.common.collect.ImmutableMultiset$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of()"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.copyOfSorted(org.sonar.api.internal.google.common.collect.SortedMultiset<E>)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.comparator()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.reverseOrder()"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.naturalOrder()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.subMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType, java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.descendingMultiset()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.builder()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedMultiset<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedMultisetFauxverideShim.copyOf(E[])"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder(java.util.Comparator<? super E>)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableSet$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.build()"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)"], ["org.sonar.api.internal.google.common.collect.ImmutableCollection$Builder", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedSet$SerializedForm", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet$SerializedForm(java.util.Comparator<? super E>, java.lang.Object[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of()"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(E[])"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Collection<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.copyOfSorted(java.util.SortedSet<E>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.reverseOrder()"], ["<E extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.naturalOrder()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.comparator()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.last()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.pollLast()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.iterator()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.descendingIterator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.ImmutableSortedSet.descendingSet()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet$Builder<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.builder()"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E, E, E...)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableSortedSet<E>", "org.sonar.api.internal.google.common.collect.ImmutableSortedSetFauxverideShim.copyOf(E[])"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.orderRowsBy(java.util.Comparator<? super R>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.orderColumnsBy(java.util.Comparator<? super C>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.put(R, C, V)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.put(org.sonar.api.internal.google.common.collect.Table$Cell<? extends R, ? extends C, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable$Builder.build()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.of()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.of(R, C, V)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.copyOf(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.ImmutableTable$Builder<R, C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.builder()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.ImmutableTable.cellSet()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.column(C)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, V>", "org.sonar.api.internal.google.common.collect.ImmutableTable.row(R)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.containsValue(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableTable.clear()"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableTable.put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.ImmutableTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.ImmutableTable.remove(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ImmutableTable.toString()"], ["int", "org.sonar.api.internal.google.common.collect.ImmutableTable.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.equals(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.ImmutableTable.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableTable.cellSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ImmutableTable.get(java.lang.Object, java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableTable.columnKeySet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.ImmutableTable.rowKeySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.ImmutableTable.containsRow(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.column(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.ImmutableTable.row(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.Interners$1.intern(E)"], ["org.sonar.api.internal.google.common.collect.Interners$InternerFunction", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction(org.sonar.api.internal.google.common.collect.Interner<E>)"], ["E", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction.apply(E)"], ["int", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.Interners$InternerFunction.equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy[]", "org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy.values()"], ["org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy", "org.sonar.api.internal.google.common.collect.Interners$WeakInterner$Dummy.valueOf(java.lang.String)"], ["E", "org.sonar.api.internal.google.common.collect.Interners$WeakInterner.intern(E)"], ["<E> org.sonar.api.internal.google.common.collect.Interner<E>", "org.sonar.api.internal.google.common.collect.Interners.newStrongInterner()"], ["<E> org.sonar.api.internal.google.common.collect.Interner<E>", "org.sonar.api.internal.google.common.collect.Interners.newWeakInterner()"], ["<E> org.sonar.api.internal.google.common.base.Function<E, E>", "org.sonar.api.internal.google.common.collect.Interners.asFunction(org.sonar.api.internal.google.common.collect.Interner<E>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$1.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables$10$1.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterables$10$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterables$10$1.remove()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$12.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$13.toString()"], ["java.util.Iterator<? extends T>", "org.sonar.api.internal.google.common.collect.Iterables$15.apply(java.lang.Iterable<? extends T>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterables$15.apply(java.lang.Object)"], ["T", "org.sonar.api.internal.google.common.collect.Iterables$ConsumingQueueIterator.computeNext()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables$UnmodifiableIterable.toString()"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.unmodifiableIterable(java.lang.Iterable<T>)"], ["<E> java.lang.Iterable<E>", "org.sonar.api.internal.google.common.collect.Iterables.unmodifiableIterable(org.sonar.api.internal.google.common.collect.ImmutableCollection<E>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterables.size(java.lang.Iterable<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.contains(java.lang.Iterable<?>, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.removeAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.retainAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.removeIf(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterables.toString(java.lang.Iterable<?>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Iterables.toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterables.frequency(java.lang.Iterable<?>, java.lang.Object)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.cycle(java.lang.Iterable<T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.cycle(T...)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>...)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"], ["<T> java.lang.Iterable<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.filter(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.filter(java.lang.Iterable<?>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.any(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterables.all(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.find(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.find(java.lang.Iterable<? extends T>, org.sonar.api.internal.google.common.base.Predicate<? super T>, T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.collect.Iterables.tryFind(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> int", "org.sonar.api.internal.google.common.collect.Iterables.indexOf(java.lang.Iterable<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<F, T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.transform(java.lang.Iterable<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.get(java.lang.Iterable<T>, int)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getFirst(java.lang.Iterable<? extends T>, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getLast(java.lang.Iterable<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterables.getLast(java.lang.Iterable<? extends T>, T)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.consumingIterable(java.lang.Iterable<T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterables.isEmpty(java.lang.Iterable<?>)"], ["<T> java.lang.Iterable<T>", "org.sonar.api.internal.google.common.collect.Iterables.mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$1.hasNext()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$1.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$1.hasPrevious()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$1.previous()"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$1.nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$1.previousIndex()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$10.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$10.next()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterators$10.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$12.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$12.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$13.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$13.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$14.hasMoreElements()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$14.nextElement()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$2.hasNext()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$2.next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$2.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$3.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$3.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$4.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$4.next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$4.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$5.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$5.next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$5.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$6.hasNext()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Iterators$6.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$9.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$9.next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$9.remove()"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator$1.compare(org.sonar.api.internal.google.common.collect.PeekingIterator<T>, org.sonar.api.internal.google.common.collect.PeekingIterator<T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator$1.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Iterators$MergingIterator", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.Iterators$MergingIterator.next()"], ["org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl(java.util.Iterator<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.next()"], ["void", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.remove()"], ["E", "org.sonar.api.internal.google.common.collect.Iterators$PeekingImpl.peek()"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.emptyIterator()"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.unmodifiableIterator(org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators.size(java.util.Iterator<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.contains(java.util.Iterator<?>, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.removeAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.removeIf(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.retainAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Iterators.elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Iterators.toString(java.util.Iterator<?>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<? extends T>, T)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Iterators.toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators.frequency(java.util.Iterator<?>, java.lang.Object)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.cycle(java.lang.Iterable<T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.cycle(T...)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>...)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.filter(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.filter(java.util.Iterator<?>, java.lang.Class<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.any(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.collect.Iterators.all(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.find(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.find(java.util.Iterator<? extends T>, org.sonar.api.internal.google.common.base.Predicate<? super T>, T)"], ["<T> org.sonar.api.internal.google.common.base.Optional<T>", "org.sonar.api.internal.google.common.collect.Iterators.tryFind(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<T> int", "org.sonar.api.internal.google.common.collect.Iterators.indexOf(java.util.Iterator<T>, org.sonar.api.internal.google.common.base.Predicate<? super T>)"], ["<F, T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.transform(java.util.Iterator<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.get(java.util.Iterator<T>, int)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getNext(java.util.Iterator<? extends T>, T)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getLast(java.util.Iterator<T>)"], ["<T> T", "org.sonar.api.internal.google.common.collect.Iterators.getLast(java.util.Iterator<? extends T>, T)"], ["int", "org.sonar.api.internal.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)"], ["<T> java.util.Iterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.consumingIterator(java.util.Iterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.forArray(T...)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.singletonIterator(T)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.forEnumeration(java.util.Enumeration<T>)"], ["<T> java.util.Enumeration<T>", "org.sonar.api.internal.google.common.collect.Iterators.asEnumeration(java.util.Iterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.PeekingIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.peekingIterator(java.util.Iterator<? extends T>)"], ["<T> org.sonar.api.internal.google.common.collect.PeekingIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.peekingIterator(org.sonar.api.internal.google.common.collect.PeekingIterator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.UnmodifiableIterator<T>", "org.sonar.api.internal.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["int", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.compare(java.lang.Iterable<T>, java.lang.Iterable<T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.toString()"], ["int", "org.sonar.api.internal.google.common.collect.LexicographicalOrdering.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$1.next()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInValueSet()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInMultimap()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet$1.hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet$1.remove()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.getPredecessorInValueSet()"], ["org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.getSuccessorInValueSet()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.setPredecessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.setSuccessorInValueSet(org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.add(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap$ValueSet.clear()"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.create()"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.create(int, int)"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedHashMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.entries()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.asMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultimap.isEmpty()"], ["<E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E>", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.create()"], ["<E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E>", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.create(int)"], ["<E> org.sonar.api.internal.google.common.collect.LinkedHashMultiset<E>", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.create(java.lang.Iterable<? extends E>)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.add(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.count(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.size()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.clear()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.toString()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.add(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedHashMultiset.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$1.size()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$2.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$3$1.set(V)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$3.size()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$4.size()"], ["java.util.ListIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$4.listIterator(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$DistinctKeyIterator.hasNext()"], ["K", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$DistinctKeyIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$DistinctKeyIterator.remove()"], ["K", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.hasNext()"], ["org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.hasPrevious()"], ["org.sonar.api.internal.google.common.collect.LinkedListMultimap$Node<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.previous()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.set(java.util.Map$Entry<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.add(java.util.Map$Entry<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.add(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.set(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.previous()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$NodeIterator.next()"], ["org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator(org.sonar.api.internal.google.common.collect.LinkedListMultimap, java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasPrevious()"], ["V", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previous()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.remove()"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.set(V)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap$ValueForKeyIterator.add(V)"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.create()"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.create(int)"], ["<K, V> org.sonar.api.internal.google.common.collect.LinkedListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.clear()"], ["java.util.List<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.entries()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.equals(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.asMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.values()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.keys()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.keySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.LinkedListMultimap.removeAll(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.get(int)"], ["E", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.remove(int)"], ["E", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.set(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$AbstractListWrapper.size()"], ["java.lang.Character", "org.sonar.api.internal.google.common.collect.Lists$CharSequenceAsList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$CharSequenceAsList.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Lists$CharSequenceAsList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$OnePlusArrayList.size()"], ["E", "org.sonar.api.internal.google.common.collect.Lists$OnePlusArrayList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$Partition.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$Partition.isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Lists$Partition.get(int)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.add(T)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.hasNext()"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.hasPrevious()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.next()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.nextIndex()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.previous()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.remove()"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList$1.set(T)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.add(int, T)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.clear()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.remove(int)"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.set(int, T)"], ["T", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$ReverseList.size()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.lastIndexOf(java.lang.Object)"], ["java.lang.Character", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.size()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.subList(int, int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Lists$StringAsImmutableList.get(int)"], ["void", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.clear()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.isEmpty()"], ["T", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.remove(int)"], ["int", "org.sonar.api.internal.google.common.collect.Lists$TransformingRandomAccessList.size()"], ["void", "org.sonar.api.internal.google.common.collect.Lists$TransformingSequentialList.clear()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$TransformingSequentialList.size()"], ["int", "org.sonar.api.internal.google.common.collect.Lists$TwoPlusArrayList.size()"], ["E", "org.sonar.api.internal.google.common.collect.Lists$TwoPlusArrayList.get(int)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList()"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList(E...)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayListWithCapacity(int)"], ["<E> java.util.ArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newArrayListWithExpectedSize(int)"], ["<E> java.util.LinkedList<E>", "org.sonar.api.internal.google.common.collect.Lists.newLinkedList()"], ["<E> java.util.LinkedList<E>", "org.sonar.api.internal.google.common.collect.Lists.newLinkedList(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newCopyOnWriteArrayList()"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "org.sonar.api.internal.google.common.collect.Lists.newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Lists.asList(E, E[])"], ["<E> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Lists.asList(E, E, E[])"], ["<F, T> java.util.List<T>", "org.sonar.api.internal.google.common.collect.Lists.transform(java.util.List<F>, org.sonar.api.internal.google.common.base.Function<? super F, ? extends T>)"], ["<T> java.util.List<java.util.List<T>>", "org.sonar.api.internal.google.common.collect.Lists.partition(java.util.List<T>, int)"], ["<T> java.util.List<T>", "org.sonar.api.internal.google.common.collect.Lists.reverse(java.util.List<T>)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$1.setValue(V)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$2$1.checkElement(V)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$2.getValue()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries$1.next()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapEntries.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.hasNext()"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues$1.next()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedAsMapValues.retainAll(java.util.Collection<?>)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedBiMap.values()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries$1.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntries.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntrySet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedEntrySet.hashCode()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedListMultimap.removeAll(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMap.entrySet()"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMap.put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.containsValue(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$1.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap$2.checkElement(V)"], ["org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.entries()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.MapConstraints$ConstrainedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint", "org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint(org.sonar.api.internal.google.common.collect.MapConstraint<? super V, ? super K>)"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$InverseConstraint.checkKeyValue(K, V)"], ["org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint[]", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.values()"], ["org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.checkKeyValue(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.MapConstraints$NotNullMapConstraint.toString()"], ["org.sonar.api.internal.google.common.collect.MapConstraint<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapConstraints.notNull()"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedMap(java.util.Map<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.MapConstraints.constrainedBiMap(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.collect.MapConstraint<? super K, ? super V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$ComputingMapAdapter.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullComputingConcurrentMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.putIfAbsent(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.remove(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.replace(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.replace(K, V, V)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMaker$NullConcurrentMap.entrySet()"], ["org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause[]", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause.values()"], ["org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.MapMaker$RemovalCause", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification.getCause()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMaker$RemovalNotification.wasEvicted()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.initialCapacity(int)"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.concurrencyLevel(int)"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakKeys()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakValues()"], ["org.sonar.api.internal.google.common.collect.MapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.softValues()"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.collect.MapMaker.makeMap()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.MapMaker.toString()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.softValues()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakValues()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.weakKeys()"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.concurrencyLevel(int)"], ["org.sonar.api.internal.google.common.collect.GenericMapMaker", "org.sonar.api.internal.google.common.collect.MapMaker.initialCapacity(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.isComputingReference()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$1.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.offer(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.poll()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$2.size()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNext()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getHash()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$AbstractReferenceEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask(org.sonar.api.internal.google.common.collect.MapMakerInternalMap<?, ?>)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$CleanupMapTask.run()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory[]", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory.values()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryFactory.valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryIterator.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntryIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EntrySet.clear()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue$1.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.offer(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.peek()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.size()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$EvictionQueue.offer(java.lang.Object)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue$1.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.offer(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.peek()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.size()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.clear()"], ["java.util.Iterator<org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.iterator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.peek()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.poll()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ExpirationQueue.offer(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$HashIterator.hasNext()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$HashIterator.remove()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeyIterator.next()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$KeySet.clear()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry[]", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.values()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getNext()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getHash()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$NullEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getHash()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEntry.getNext()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftExpirableEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.getEntry()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$SoftValueReference.waitForValue()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength[]", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength.values()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Strength.valueOf(java.lang.String)"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getHash()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEntry.getNext()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongExpirableEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.get()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.getEntry()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.waitForValue()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$StrongValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueIterator.next()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$Values.clear()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getKey()"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getValueReference()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.setValueReference(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getHash()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEntry.getNext()"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["long", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getExpirationTime()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setExpirationTime(long)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getNextExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setNextExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getPreviousExpirable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setPreviousExpirable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getNextEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setNextEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.getPreviousEvictable()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakExpirableEvictableEntry.setPreviousEvictable(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.getEntry()"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.clear(org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>)"], ["org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ValueReference<K, V>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, org.sonar.api.internal.google.common.collect.MapMakerInternalMap$ReferenceEntry<K, V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.isComputingReference()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WeakValueReference.waitForValue()"], ["K", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.hashCode()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap$WriteThroughEntry.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.size()"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.putIfAbsent(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.replace(K, V, V)"], ["V", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.replace(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.MapMakerInternalMap.entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$1.hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$1.next()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$10.getKey()"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$10.getValue()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$11.apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$11.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$3.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$3.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$4.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$4.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$5.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$5.addAll(java.util.Collection<? extends E>)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$6.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$6.getValue()"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$7.transformEntry(K, V1)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$8.apply(V1)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$9.apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$9.apply(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AbstractFilteredMap.remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$AsMapView$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$AsMapView.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$BiMapConverter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$BiMapConverter.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$BiMapConverter.toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap$1.iterator()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lastKey()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.entrySet()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.tailMap(K)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$DescendingMap.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$1.apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$1.apply(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$2.apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction$2.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Maps$EntryFunction[]", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction.values()"], ["org.sonar.api.internal.google.common.collect.Maps$EntryFunction", "org.sonar.api.internal.google.common.collect.Maps$EntryFunction.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.size()"], ["void", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$EntrySet.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.util.Map$Entry<V, K>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryBiMap.values()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1.setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$EntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap$1.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap$1.retainAll(java.util.Collection<?>)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.comparator()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.put(K, V)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.entrySet()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.descendingMap()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntryNavigableMap.tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.first()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.last()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.lastKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.tailMap(K)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Maps$FilteredEntrySortedMap.keySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredKeyMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Maps$FilteredMapValues.toArray(T[])"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$ImprovedAbstractMap.entrySet()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$KeySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$KeySet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$KeySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$KeySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$KeySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.areEqual()"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnLeft()"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnRight()"], ["java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesInCommon()"], ["java.util.Map<K, org.sonar.api.internal.google.common.collect.MapDifference$ValueDifference<V>>", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.entriesDiffering()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$MapDifferenceImpl.toString()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.comparator()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.get(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.clear()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.size()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$NavigableAsMapView.descendingMap()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.lower(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.floor(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.ceiling(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.higher(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.pollFirst()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$NavigableKeySet.pollLast()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.comparator()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.tailMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.firstKey()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedAsMapView.lastKey()"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.first()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$SortedKeySet.last()"], ["java.util.SortedMap<K, org.sonar.api.internal.google.common.collect.MapDifference$ValueDifference<V>>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()"], ["java.util.Iterator<java.util.Map$Entry<K, V2>>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.containsKey(java.lang.Object)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.get(java.lang.Object)"], ["V2", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesMap.clear()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingKey(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.descendingMap()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.floorKey(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K, boolean)"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K)"], ["java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K, boolean)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.firstKey()"], ["java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.headMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.lastKey()"], ["java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps$TransformedEntriesSortedMap.tailMap(K)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableBiMap.values()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries$1.hasNext()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries$1.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries.iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntries.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntrySet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableEntrySet.hashCode()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.descendingMap()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K, boolean)"], ["V", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.leftValue()"], ["V", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.rightValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Maps$ValueDifferenceImpl.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Maps$Values.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Maps$Values.contains(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Maps$Values.clear()"], ["<K extends java.lang.Enum<K>, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.immutableEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.HashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newHashMap()"], ["<K, V> java.util.HashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newHashMapWithExpectedSize(int)"], ["<K, V> java.util.HashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.LinkedHashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newLinkedHashMap()"], ["<K, V> java.util.LinkedHashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newLinkedHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newConcurrentMap()"], ["<K extends java.lang.Comparable, V> java.util.TreeMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newTreeMap()"], ["<K, V> java.util.TreeMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newTreeMap(java.util.SortedMap<K, ? extends V>)"], ["<C, K extends C, V> java.util.TreeMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newTreeMap(java.util.Comparator<C>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newEnumMap(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.IdentityHashMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.newIdentityHashMap()"], ["<K, V> org.sonar.api.internal.google.common.collect.MapDifference<K, V>", "org.sonar.api.internal.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.MapDifference<K, V>", "org.sonar.api.internal.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, org.sonar.api.internal.google.common.base.Equivalence<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedMapDifference<K, V>", "org.sonar.api.internal.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.asMap(java.util.Set<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.asMap(java.util.SortedSet<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.asMap(java.util.NavigableSet<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.toMap(java.lang.Iterable<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.toMap(java.util.Iterator<K>, org.sonar.api.internal.google.common.base.Function<? super K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.uniqueIndex(java.lang.Iterable<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.uniqueIndex(java.util.Iterator<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.collect.Maps.fromProperties(java.util.Properties)"], ["<K, V> java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Maps.immutableEntry(K, V)"], ["<A, B> org.sonar.api.internal.google.common.base.Converter<A, B>", "org.sonar.api.internal.google.common.collect.Maps.asConverter(org.sonar.api.internal.google.common.collect.BiMap<A, B>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.synchronizedBiMap(org.sonar.api.internal.google.common.collect.BiMap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.unmodifiableBiMap(org.sonar.api.internal.google.common.collect.BiMap<? extends K, ? extends V>)"], ["<K, V1, V2> java.util.Map<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformValues(java.util.Map<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformValues(java.util.SortedMap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformValues(java.util.NavigableMap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.Map<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformEntries(java.util.Map<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformEntries(java.util.SortedMap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "org.sonar.api.internal.google.common.collect.Maps.transformEntries(java.util.NavigableMap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterKeys(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterValues(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.Map<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(java.util.Map<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(java.util.SortedMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(java.util.NavigableMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.BiMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.filterEntries(org.sonar.api.internal.google.common.collect.BiMap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.unmodifiableNavigableMap(java.util.NavigableMap<K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Maps.synchronizedNavigableMap(java.util.NavigableMap<K, V>)"], ["<T extends B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<T>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder.create()"], ["<T extends B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<T>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder.create(java.lang.Iterable<? extends T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$QueueIterator.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$QueueIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$QueueIterator.remove()"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.create()"], ["<E extends java.lang.Comparable<E>> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue<E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.create(java.lang.Iterable<? extends E>)"], ["<B> org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue$Builder<B>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.orderedBy(java.util.Comparator<B>)"], ["int", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.offer(E)"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.poll()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.peek()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.removeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.peekFirst()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.removeLast()"], ["E", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.peekLast()"], ["void", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.clear()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.toArray()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.MinMaxPriorityQueue.comparator()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ArrayListSupplier.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$EnumSetSupplier.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$HashSetSupplier.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedHashSetSupplier.get()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier[]", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.values()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.valueOf(java.lang.String)"], ["<V> org.sonar.api.internal.google.common.base.Supplier<java.util.List<V>>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.instance()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$LinkedListSupplier.get()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder.build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()"], ["<K extends K0, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedListValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues()"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues(int)"], ["org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, java.lang.Comparable>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues()"], ["<V0> org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, V0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues(java.util.Comparator<V0>)"], ["<V0 extends java.lang.Enum<V0>> org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, V0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.enumSetValues(java.lang.Class<V0>)"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SetMultimapBuilder.build()"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.MultimapBuilder$TreeSetSupplier.get()"], ["<K0> org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.treeKeys(java.util.Comparator<K0>)"], ["<K0 extends java.lang.Enum<K0>> org.sonar.api.internal.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.enumKeys(java.lang.Class<K0>)"], ["<K extends K0, V extends V0> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.MultimapBuilder.build(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet$1.apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap$EntrySet.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.containsKey(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.clear()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$AsMap.get(java.lang.Object)"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.Multimaps$CustomSortedSetMultimap.valueComparator()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$Entries.clear()"], ["K", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$1$1.getElement()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$1$1.getCount()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys$KeysEntrySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.remove(java.lang.Object, int)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$Keys.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1$1.hasNext()"], ["V", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1$1.remove()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap$1.size()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.remove(java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.entries()"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.hashCode()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$MapMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesListMultimap.get(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap$1.transformEntry(java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.put(K, V2)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(K, java.lang.Iterable<? extends V2>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V2>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.remove(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multimaps$TransformedEntriesMultimap.size()"], ["org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap$1.apply(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.clear()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.entries()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableMultimap.remove(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()"], ["org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.SetMultimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["org.sonar.api.internal.google.common.collect.Multimap", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Collection<V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newListMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.List<V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newSetMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Set<V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.SortedSet<V>>)"], ["<K, V, M extends org.sonar.api.internal.google.common.collect.Multimap<K, V>> M", "org.sonar.api.internal.google.common.collect.Multimaps.invertFrom(org.sonar.api.internal.google.common.collect.Multimap<? extends V, ? extends K>, M)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableMultimap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableMultimap(org.sonar.api.internal.google.common.collect.ImmutableMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableSetMultimap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableSetMultimap(org.sonar.api.internal.google.common.collect.ImmutableSetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableSortedSetMultimap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.synchronizedListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableListMultimap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.unmodifiableListMultimap(org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.List<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Set<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.SortedSet<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Multimaps.asMap(org.sonar.api.internal.google.common.collect.Multimap<K, V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.forMap(java.util.Map<K, V>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.Multimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformValues(org.sonar.api.internal.google.common.collect.Multimap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.Multimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformEntries(org.sonar.api.internal.google.common.collect.Multimap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.ListMultimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformValues(org.sonar.api.internal.google.common.collect.ListMultimap<K, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> org.sonar.api.internal.google.common.collect.ListMultimap<K, V2>", "org.sonar.api.internal.google.common.collect.Multimaps.transformEntries(org.sonar.api.internal.google.common.collect.ListMultimap<K, V1>, org.sonar.api.internal.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.index(java.lang.Iterable<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ImmutableListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.index(java.util.Iterator<V>, org.sonar.api.internal.google.common.base.Function<? super V, K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterKeys(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterKeys(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.ListMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterKeys(org.sonar.api.internal.google.common.collect.ListMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super K>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterValues(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterValues(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super V>)"], ["<K, V> org.sonar.api.internal.google.common.collect.Multimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterEntries(org.sonar.api.internal.google.common.collect.Multimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> org.sonar.api.internal.google.common.collect.SetMultimap<K, V>", "org.sonar.api.internal.google.common.collect.Multimaps.filterEntries(org.sonar.api.internal.google.common.collect.SetMultimap<K, V>, org.sonar.api.internal.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$1.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$1.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$1.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$2.count(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$3.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$3.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$3.size()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$3.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$4.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$5.compare(org.sonar.api.internal.google.common.collect.Multiset$Entry<?>, org.sonar.api.internal.google.common.collect.Multiset$Entry<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$5.compare(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$AbstractEntry.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$AbstractEntry.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Multisets$AbstractEntry.toString()"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$ElementSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$EntrySet.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$EntrySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset$1.apply(org.sonar.api.internal.google.common.collect.Multiset$Entry<E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset$1.apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.remove(java.lang.Object, int)"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.clear()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.Multisets$FilteredMultiset.iterator()"], ["E", "org.sonar.api.internal.google.common.collect.Multisets$ImmutableEntry.getElement()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$ImmutableEntry.getCount()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$MultisetIteratorImpl.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.Multisets$MultisetIteratorImpl.next()"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$MultisetIteratorImpl.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.add(E)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.add(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.addAll(java.util.Collection<? extends E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.retainAll(java.util.Collection<?>)"], ["void", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.clear()"], ["int", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int, int)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.unmodifiableMultiset(org.sonar.api.internal.google.common.collect.Multiset<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.unmodifiableMultiset(org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>)"], ["<E> org.sonar.api.internal.google.common.collect.SortedMultiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.unmodifiableSortedMultiset(org.sonar.api.internal.google.common.collect.SortedMultiset<E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset$Entry<E>", "org.sonar.api.internal.google.common.collect.Multisets.immutableEntry(E, int)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.filter(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.union(org.sonar.api.internal.google.common.collect.Multiset<? extends E>, org.sonar.api.internal.google.common.collect.Multiset<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.intersection(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.sum(org.sonar.api.internal.google.common.collect.Multiset<? extends E>, org.sonar.api.internal.google.common.collect.Multiset<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Multiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.difference(org.sonar.api.internal.google.common.collect.Multiset<E>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets.containsOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets.retainOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, org.sonar.api.internal.google.common.collect.Multiset<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Multisets.removeOccurrences(org.sonar.api.internal.google.common.collect.Multiset<?>, java.lang.Iterable<?>)"], ["<E> org.sonar.api.internal.google.common.collect.ImmutableMultiset<E>", "org.sonar.api.internal.google.common.collect.Multisets.copyHighestCountFirst(org.sonar.api.internal.google.common.collect.Multiset<E>)"], ["void", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap$1.checkKeyValue(java.lang.Class<?>, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap$1.checkKeyValue(java.lang.Object, java.lang.Object)"], ["<B> org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.create()"], ["<B> org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap<B>", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.create(java.util.Map<java.lang.Class<? extends B>, B>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.getInstance(java.lang.Class<T>)"], ["void", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.putAll(java.util.Map)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.MutableClassToInstanceMap.entrySet()"], ["int", "org.sonar.api.internal.google.common.collect.NaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NaturalOrdering.reverse()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.NaturalOrdering.toString()"], ["int", "org.sonar.api.internal.google.common.collect.NaturalOrdering.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.compare(T, T)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.reverse()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.nullsFirst()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.nullsLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.NullsFirstOrdering.toString()"], ["int", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.compare(T, T)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.reverse()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.nullsFirst()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.nullsLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.NullsLastOrdering.toString()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.newArray(java.lang.Class<T>, int)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.newArray(T[], int)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.concat(T[], T[], java.lang.Class<T>)"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.concat(T, T[])"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.ObjectArrays.concat(T[], T)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering$1.apply(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering$1.apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Ordering$ArbitraryOrdering.toString()"], ["<C extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<C>", "org.sonar.api.internal.google.common.collect.Ordering.natural()"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.from(java.util.Comparator<T>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.from(org.sonar.api.internal.google.common.collect.Ordering<T>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.explicit(java.util.List<T>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.explicit(T, T...)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.Ordering.reverse()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.Ordering.nullsFirst()"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.Ordering.nullsLast()"], ["<F> org.sonar.api.internal.google.common.collect.Ordering<F>", "org.sonar.api.internal.google.common.collect.Ordering.onResultOf(org.sonar.api.internal.google.common.base.Function<F, ? extends T>)"], ["<U extends T> org.sonar.api.internal.google.common.collect.Ordering<U>", "org.sonar.api.internal.google.common.collect.Ordering.compound(java.util.Comparator<? super U>)"], ["<T> org.sonar.api.internal.google.common.collect.Ordering<T>", "org.sonar.api.internal.google.common.collect.Ordering.compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<java.lang.Iterable<S>>", "org.sonar.api.internal.google.common.collect.Ordering.lexicographical()"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(java.lang.Iterable<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.min(E, E, E, E...)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(java.lang.Iterable<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.Ordering.max(E, E, E, E...)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.leastOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.leastOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.greatestOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.greatestOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "org.sonar.api.internal.google.common.collect.Ordering.sortedCopy(java.lang.Iterable<E>)"], ["<E extends T> org.sonar.api.internal.google.common.collect.ImmutableList<E>", "org.sonar.api.internal.google.common.collect.Ordering.immutableSortedCopy(java.lang.Iterable<E>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)"], ["int", "org.sonar.api.internal.google.common.collect.Ordering.binarySearch(java.util.List<? extends T>, T)"], ["<E> java.util.concurrent.ArrayBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newArrayBlockingQueue(int)"], ["<E> java.util.ArrayDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newArrayDeque()"], ["<E> java.util.ArrayDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newArrayDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newConcurrentLinkedQueue()"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newConcurrentLinkedQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingDeque()"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingDeque(int)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingQueue()"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingQueue(int)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newLinkedBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityBlockingQueue()"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityQueue()"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newPriorityQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.SynchronousQueue<E>", "org.sonar.api.internal.google.common.collect.Queues.newSynchronousQueue()"], ["<E> int", "org.sonar.api.internal.google.common.collect.Queues.drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)"], ["<E> int", "org.sonar.api.internal.google.common.collect.Queues.drainUninterruptibly(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)"], ["<E> java.util.Queue<E>", "org.sonar.api.internal.google.common.collect.Queues.synchronizedQueue(java.util.Queue<E>)"], ["<E> java.util.Deque<E>", "org.sonar.api.internal.google.common.collect.Queues.synchronizedDeque(java.util.Deque<E>)"], ["org.sonar.api.internal.google.common.collect.Cut", "org.sonar.api.internal.google.common.collect.Range$1.apply(org.sonar.api.internal.google.common.collect.Range)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Range$1.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Cut", "org.sonar.api.internal.google.common.collect.Range$2.apply(org.sonar.api.internal.google.common.collect.Range)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Range$2.apply(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Range$3.compare(org.sonar.api.internal.google.common.collect.Range<?>, org.sonar.api.internal.google.common.collect.Range<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Range$3.compare(java.lang.Object, java.lang.Object)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.open(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.closed(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.closedOpen(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.openClosed(C, C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.range(C, org.sonar.api.internal.google.common.collect.BoundType, C, org.sonar.api.internal.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.lessThan(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.atMost(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.upTo(C, org.sonar.api.internal.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.greaterThan(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.atLeast(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.downTo(C, org.sonar.api.internal.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.all()"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.singleton(C)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.Range<C>", "org.sonar.api.internal.google.common.collect.Range.encloseAll(java.lang.Iterable<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.hasLowerBound()"], ["C", "org.sonar.api.internal.google.common.collect.Range.lowerEndpoint()"], ["org.sonar.api.internal.google.common.collect.BoundType", "org.sonar.api.internal.google.common.collect.Range.lowerBoundType()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.hasUpperBound()"], ["C", "org.sonar.api.internal.google.common.collect.Range.upperEndpoint()"], ["org.sonar.api.internal.google.common.collect.BoundType", "org.sonar.api.internal.google.common.collect.Range.upperBoundType()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.contains(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.apply(C)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.containsAll(java.lang.Iterable<? extends C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.isConnected(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Range.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Range.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.Range.apply(java.lang.Object)"], ["C", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.first()"], ["C", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.last()"], ["int", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.hashCode()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.last()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.first()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularContiguousSet.iterator()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableAsList.get(int)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.RegularImmutableAsList.listIterator(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$1.hashCode()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$1.iterator()"], ["java.util.Map$Entry<V, K>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.hashCode()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<V, K>>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.size()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.inverse()"], ["K", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap$Inverse.inverse()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.size()"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<V, K>", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.inverse()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.RegularImmutableBiMap.inverse()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableList.size()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableList.lastIndexOf(java.lang.Object)"], ["java.util.ListIterator", "org.sonar.api.internal.google.common.collect.RegularImmutableList.listIterator(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableMap$EntrySet.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableMap$EntrySet.iterator()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableMap.get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMap.size()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.hashCode()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.RegularImmutableMultiset.elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.size()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.hashCode()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSet.iterator()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet$1.get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet$1.get(int)"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap$EntrySet.iterator()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.get(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.headMap(K, boolean)"], ["org.sonar.api.internal.google.common.collect.ImmutableSortedMap<K, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.tailMap(K, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.headMap(java.lang.Object, boolean)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.keySet()"], ["org.sonar.api.internal.google.common.collect.ImmutableSet", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMap.keySet()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.size()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.tailMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.headMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.equals(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.last()"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.higher(E)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.descendingIterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableSortedSet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$1.compare(org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>, org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$1.compare(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet$1.get(int)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet$1.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.size()"], ["org.sonar.api.internal.google.common.collect.UnmodifiableIterator<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.contains(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$CellSet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$Values.size()"], ["V", "org.sonar.api.internal.google.common.collect.RegularImmutableTable$Values.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.reverse()"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(E, E)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable<E>)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(E, E)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable<E>)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseOrdering.compare(T, T)"], ["<S extends T> org.sonar.api.internal.google.common.collect.Ordering<S>", "org.sonar.api.internal.google.common.collect.ReverseOrdering.reverse()"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(E, E, E, E...)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.min(java.lang.Iterable<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(E, E)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(E, E, E, E...)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(java.util.Iterator<E>)"], ["<E extends T> E", "org.sonar.api.internal.google.common.collect.ReverseOrdering.max(java.lang.Iterable<E>)"], ["int", "org.sonar.api.internal.google.common.collect.ReverseOrdering.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.ReverseOrdering.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.ReverseOrdering.toString()"], ["int", "org.sonar.api.internal.google.common.collect.Sets$1.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$1.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$1.contains(java.lang.Object)"], ["<S extends java.util.Set<E>> S", "org.sonar.api.internal.google.common.collect.Sets$1.copyInto(S)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$2.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$2.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$2.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$2.containsAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$3.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$3.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$3.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet$1.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet$1.get(int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$CartesianSet.hashCode()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.pollLast()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.comparator()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.last()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.toArray(T[])"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Sets$DescendingSet.toString()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredNavigableSet.last()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$FilteredSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$FilteredSet.hashCode()"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.comparator()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$FilteredSortedSet.last()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$ImprovedAbstractSet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$ImprovedAbstractSet.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Sets$PowerSet.toString()"], ["<S extends java.util.Set<E>> S", "org.sonar.api.internal.google.common.collect.Sets$SetView.copyInto(S)"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$SubSet$1.hasNext()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$SubSet$1.next()"], ["int", "org.sonar.api.internal.google.common.collect.Sets$SubSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Sets$SubSet.contains(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Sets$UnmodifiableNavigableSet.pollLast()"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.immutableEnumSet(E, E...)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.collect.ImmutableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.immutableEnumSet(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet()"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet(E...)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSetWithExpectedSize(int)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.HashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newConcurrentHashSet()"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newConcurrentHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.LinkedHashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newLinkedHashSet()"], ["<E> java.util.LinkedHashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(int)"], ["<E> java.util.LinkedHashSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newLinkedHashSet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newTreeSet()"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newTreeSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.TreeSet<E>", "org.sonar.api.internal.google.common.collect.Sets.newTreeSet(java.util.Comparator<? super E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newIdentityHashSet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "org.sonar.api.internal.google.common.collect.Sets.newCopyOnWriteArraySet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "org.sonar.api.internal.google.common.collect.Sets.newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "org.sonar.api.internal.google.common.collect.Sets.complementOf(java.util.Collection<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "org.sonar.api.internal.google.common.collect.Sets.complementOf(java.util.Collection<E>, java.lang.Class<E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.newSetFromMap(java.util.Map<E, java.lang.Boolean>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)"], ["<E> org.sonar.api.internal.google.common.collect.Sets$SetView<E>", "org.sonar.api.internal.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> java.util.Set<E>", "org.sonar.api.internal.google.common.collect.Sets.filter(java.util.Set<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<E> java.util.SortedSet<E>", "org.sonar.api.internal.google.common.collect.Sets.filter(java.util.SortedSet<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<E> java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.filter(java.util.NavigableSet<E>, org.sonar.api.internal.google.common.base.Predicate<? super E>)"], ["<B> java.util.Set<java.util.List<B>>", "org.sonar.api.internal.google.common.collect.Sets.cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)"], ["<B> java.util.Set<java.util.List<B>>", "org.sonar.api.internal.google.common.collect.Sets.cartesianProduct(java.util.Set<? extends B>...)"], ["<E> java.util.Set<java.util.Set<E>>", "org.sonar.api.internal.google.common.collect.Sets.powerSet(java.util.Set<E>)"], ["<E> java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.unmodifiableNavigableSet(java.util.NavigableSet<E>)"], ["<E> java.util.NavigableSet<E>", "org.sonar.api.internal.google.common.collect.Sets.synchronizedNavigableSet(java.util.NavigableSet<E>)"], ["V", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.get(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.containsValue(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.ImmutableBiMap<V, K>", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.inverse()"], ["org.sonar.api.internal.google.common.collect.BiMap", "org.sonar.api.internal.google.common.collect.SingletonImmutableBiMap.inverse()"], ["E", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.lastIndexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.toString()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.isEmpty()"], ["java.util.List", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.subList(int, int)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.SingletonImmutableList.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.toString()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.SingletonImmutableSet.iterator()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, V>", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.column(C)"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.columnMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.size()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SingletonImmutableTable.column(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)"], ["<E> java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.SortedIterables.comparator(java.util.SortedSet<E>)"], ["int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior$2.resultIndex(int)"], ["int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior$3.resultIndex(int)"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior[]", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior.values()"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior", "org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior.valueOf(java.lang.String)"], ["<E> int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior$4.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["<E> int", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior$5.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior[]", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior.values()"], ["org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior", "org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior.valueOf(java.lang.String)"], ["<E extends java.lang.Comparable> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K extends java.lang.Comparable> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<E>, org.sonar.api.internal.google.common.base.Function<? super E, K>, K, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<E>, org.sonar.api.internal.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E> int", "org.sonar.api.internal.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, org.sonar.api.internal.google.common.collect.SortedLists$KeyPresentBehavior, org.sonar.api.internal.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.comparator()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$ElementSet.last()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.SortedMultisets$NavigableElementSet.pollLast()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.columnMap()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.size()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.columnMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.SparseImmutableTable.rowMap()"], ["java.util.Comparator<? super R>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.comparator()"], ["R", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.firstKey()"], ["R", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.lastKey()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.headMap(R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.subMap(R, R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.tailMap(R)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable$RowSortedMap.keySet()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.StandardRowSortedTable.rowKeySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.hasNext()"], ["org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$CellIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<R, V>>", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySet.retainAll(java.util.Collection<?>)"], ["R", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySetIterator$1.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySetIterator$1.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column$EntrySetIterator$1.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$KeySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$KeySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$KeySet.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$Values.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$Values.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column$Values.retainAll(java.util.Collection<?>)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column.put(R, V)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Column.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Column.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnKeySet.contains(java.lang.Object)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(C)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<C, java.util.Map<R, V>>>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.retainAll(java.util.Collection<?>)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.containsKey(java.lang.Object)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<C, java.util.Map<R, V>>>", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.createEntrySet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1$1.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1$1.equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.hasNext()"], ["java.util.Map$Entry<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.next()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet$1.next()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet.size()"], ["java.util.Iterator<java.util.Map$Entry<C, V>>", "org.sonar.api.internal.google.common.collect.StandardTable$Row$RowEntrySet.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$Row.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row.put(C, V)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable$Row.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$Row.clear()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(R)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<R, java.util.Map<C, V>>>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap$EntrySet.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.containsKey(java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.get(java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.StandardTable$RowMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable$TableSet.isEmpty()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable$TableSet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.StandardTable.isEmpty()"], ["int", "org.sonar.api.internal.google.common.collect.StandardTable.size()"], ["void", "org.sonar.api.internal.google.common.collect.StandardTable.clear()"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable.put(R, C, V)"], ["V", "org.sonar.api.internal.google.common.collect.StandardTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.StandardTable.cellSet()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.StandardTable.row(R)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.StandardTable.column(C)"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.StandardTable.rowMap()"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.StandardTable.columnMap()"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.entrySet()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.containsValue(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMap.get(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.getValue()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1.next()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries$1.next()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray(T[])"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapEntries.retainAll(java.util.Collection<?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedAsMapValues$1.next()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.forcePut(K, V)"], ["org.sonar.api.internal.google.common.collect.BiMap<V, K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.inverse()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedBiMap.values()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.add(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.addAll(java.util.Collection<? extends E>)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.containsAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.size()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedCollection.toArray(T[])"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.addFirst(E)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.addLast(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.offerFirst(E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.offerLast(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeLast()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.pollLast()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.getFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.getLast()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.peekFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.peekLast()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeFirstOccurrence(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.removeLastOccurrence(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.push(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedDeque.pop()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.hashCode()"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedEntry.setValue(V)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.add(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.addAll(int, java.util.Collection<? extends E>)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.get(int)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.lastIndexOf(java.lang.Object)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.remove(int)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.set(int, E)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedList.hashCode()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedListMultimap.get(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.entrySet()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.isEmpty()"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.put(K, V)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.remove(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMap.hashCode()"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.containsKey(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.put(K, V)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.remove(java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.clear()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.entries()"], ["java.util.Map<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.asMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultimap.hashCode()"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedMultiset.hashCode()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingKey(K)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.descendingMap()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.floorEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.floorKey(K)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K, boolean)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.higherEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerEntry(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.ceiling(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.floor(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.higher(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.lower(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.pollFirst()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedNavigableSet.pollLast()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedObject.toString()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.element()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.offer(E)"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.peek()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.poll()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedQueue.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSet.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSet.hashCode()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSetMultimap.get(java.lang.Object)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.comparator()"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.headMap(K)"], ["K", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey()"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedMap.tailMap(K)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.comparator()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.first()"], ["E", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSet.last()"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.valueComparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Map<java.lang.Object, java.lang.Object>", "org.sonar.api.internal.google.common.collect.Tables$1.apply(java.util.Map<java.lang.Object, java.lang.Object>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$1.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$AbstractCell.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Tables$AbstractCell.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.Tables$AbstractCell.toString()"], ["R", "org.sonar.api.internal.google.common.collect.Tables$ImmutableCell.getRowKey()"], ["C", "org.sonar.api.internal.google.common.collect.Tables$ImmutableCell.getColumnKey()"], ["V", "org.sonar.api.internal.google.common.collect.Tables$ImmutableCell.getValue()"], ["org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$1.apply(org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$1.apply(java.lang.Object)"], ["java.util.Map<C, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$2.apply(java.util.Map<C, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$2.apply(java.lang.Object)"], ["java.util.Map<R, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$3.apply(java.util.Map<R, V1>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable$3.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.contains(java.lang.Object, java.lang.Object)"], ["V2", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.get(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.size()"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.clear()"], ["V2", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.put(R, C, V2)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)"], ["V2", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.row(R)"], ["java.util.Map<R, V2>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.column(C)"], ["java.util.Map<R, java.util.Map<C, V2>>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.rowMap()"], ["java.util.Map<C, java.util.Map<R, V2>>", "org.sonar.api.internal.google.common.collect.Tables$TransformedTable.columnMap()"], ["org.sonar.api.internal.google.common.collect.Table$Cell<?, ?, ?>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable$1.apply(org.sonar.api.internal.google.common.collect.Table$Cell<?, ?, ?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable$1.apply(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.clear()"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.column(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.columnMap()"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.containsValue(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.get(java.lang.Object, java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.put(C, R, V)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends C, ? extends R, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.row(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.rowMap()"], ["int", "org.sonar.api.internal.google.common.collect.Tables$TransposeTable.size()"], ["org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap(org.sonar.api.internal.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableRowSortedMap.rowKeySet()"], ["java.util.Set<org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.cellSet()"], ["void", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.clear()"], ["java.util.Map<R, V>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.column(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.columnMap()"], ["V", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.put(R, C, V)"], ["void", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.putAll(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.row(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.Tables$UnmodifiableTable.rowMap()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table$Cell<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.immutableCell(R, C, V)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table<C, R, V>", "org.sonar.api.internal.google.common.collect.Tables.transpose(org.sonar.api.internal.google.common.collect.Table<R, C, V>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.newCustomTable(java.util.Map<R, java.util.Map<C, V>>, org.sonar.api.internal.google.common.base.Supplier<? extends java.util.Map<C, V>>)"], ["<R, C, V1, V2> org.sonar.api.internal.google.common.collect.Table<R, C, V2>", "org.sonar.api.internal.google.common.collect.Tables.transformValues(org.sonar.api.internal.google.common.collect.Table<R, C, V1>, org.sonar.api.internal.google.common.base.Function<? super V1, V2>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.Table<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.unmodifiableTable(org.sonar.api.internal.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.RowSortedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.Tables.unmodifiableRowSortedTable(org.sonar.api.internal.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TransformedIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.TransformedIterator.next()"], ["void", "org.sonar.api.internal.google.common.collect.TransformedIterator.remove()"], ["boolean", "org.sonar.api.internal.google.common.collect.TransformedListIterator.hasPrevious()"], ["T", "org.sonar.api.internal.google.common.collect.TransformedListIterator.previous()"], ["int", "org.sonar.api.internal.google.common.collect.TransformedListIterator.nextIndex()"], ["int", "org.sonar.api.internal.google.common.collect.TransformedListIterator.previousIndex()"], ["void", "org.sonar.api.internal.google.common.collect.TransformedListIterator.set(T)"], ["void", "org.sonar.api.internal.google.common.collect.TransformedListIterator.add(T)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable$1.apply(java.lang.Object)"], ["java.util.TreeMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$Factory.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable$Factory.get()"], ["java.util.Comparator<? super C>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.comparator()"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.subMap(C, C)"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.headMap(C)"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.tailMap(C)"], ["C", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.firstKey()"], ["C", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.lastKey()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.put(C, V)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable$TreeRow.keySet()"], ["<R extends java.lang.Comparable, C extends java.lang.Comparable, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.create()"], ["<R, C, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)"], ["<R, C, V> org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.create(org.sonar.api.internal.google.common.collect.TreeBasedTable<R, C, ? extends V>)"], ["java.util.Comparator<? super R>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowComparator()"], ["java.util.Comparator<? super C>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.columnComparator()"], ["java.util.SortedMap<C, V>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.row(R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowMap()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowMap()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable.rowKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.row(java.lang.Object)"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.columnMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.TreeBasedTable.values()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable.columnKeySet()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeBasedTable.column(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeBasedTable.cellSet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable.remove(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeBasedTable.clear()"], ["int", "org.sonar.api.internal.google.common.collect.TreeBasedTable.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeBasedTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.containsRow(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.containsColumn(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.contains(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeBasedTable.toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeBasedTable.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeBasedTable.equals(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeBasedTable.putAll(org.sonar.api.internal.google.common.collect.Table)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.create()"], ["<K, V> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultimap<K, V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.create(org.sonar.api.internal.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Comparator<? super K>", "org.sonar.api.internal.google.common.collect.TreeMultimap.keyComparator()"], ["java.util.Comparator<? super V>", "org.sonar.api.internal.google.common.collect.TreeMultimap.valueComparator()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "org.sonar.api.internal.google.common.collect.TreeMultimap.asMap()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.keySet()"], ["java.util.SortedMap", "org.sonar.api.internal.google.common.collect.TreeMultimap.asMap()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.TreeMultimap.values()"], ["java.util.Map", "org.sonar.api.internal.google.common.collect.TreeMultimap.asMap()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.removeAll(java.lang.Object)"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultimap.keySet()"], ["java.util.Collection", "org.sonar.api.internal.google.common.collect.TreeMultimap.get(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.equals(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultimap.entries()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultimap.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultimap.size()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeMultimap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultimap.hashCode()"], ["org.sonar.api.internal.google.common.collect.Multiset", "org.sonar.api.internal.google.common.collect.TreeMultimap.keys()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.putAll(org.sonar.api.internal.google.common.collect.Multimap)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.containsValue(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultimap.isEmpty()"], ["E", "org.sonar.api.internal.google.common.collect.TreeMultiset$1.getElement()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset$1.getCount()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.hasNext()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeMultiset$2.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.hasNext()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.remove()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeMultiset$3.next()"], ["org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate[]", "org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate.values()"], ["org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate", "org.sonar.api.internal.google.common.collect.TreeMultiset$Aggregate.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.count(java.util.Comparator<? super E>, E)"], ["E", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.getElement()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.getCount()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeMultiset$AvlNode.toString()"], ["T", "org.sonar.api.internal.google.common.collect.TreeMultiset$Reference.get()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset$Reference.checkAndSet(T, T)"], ["<E extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.create()"], ["<E> org.sonar.api.internal.google.common.collect.TreeMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.create(java.util.Comparator<? super E>)"], ["<E extends java.lang.Comparable> org.sonar.api.internal.google.common.collect.TreeMultiset<E>", "org.sonar.api.internal.google.common.collect.TreeMultiset.create(java.lang.Iterable<? extends E>)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.size()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.count(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.add(E, int)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.remove(java.lang.Object, int)"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.setCount(E, int)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.setCount(E, int, int)"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.TreeMultiset.descendingMultiset()"], ["org.sonar.api.internal.google.common.collect.SortedMultiset", "org.sonar.api.internal.google.common.collect.TreeMultiset.subMultiset(java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType, java.lang.Object, org.sonar.api.internal.google.common.collect.BoundType)"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.pollLastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.pollFirstEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.lastEntry()"], ["org.sonar.api.internal.google.common.collect.Multiset$Entry", "org.sonar.api.internal.google.common.collect.TreeMultiset.firstEntry()"], ["java.util.Comparator", "org.sonar.api.internal.google.common.collect.TreeMultiset.comparator()"], ["java.util.NavigableSet", "org.sonar.api.internal.google.common.collect.TreeMultiset.elementSet()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeMultiset.toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeMultiset.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.equals(java.lang.Object)"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.TreeMultiset.entrySet()"], ["void", "org.sonar.api.internal.google.common.collect.TreeMultiset.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.retainAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.removeAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.addAll(java.util.Collection)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.add(java.lang.Object)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeMultiset.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.contains(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeMultiset.isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.get(java.lang.Comparable)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range, java.lang.Object>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.getEntry(java.lang.Comparable)"], ["org.sonar.api.internal.google.common.collect.Range", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.span()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.put(org.sonar.api.internal.google.common.collect.Range, java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.putAll(org.sonar.api.internal.google.common.collect.RangeMap)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.clear()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.remove(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Map<org.sonar.api.internal.google.common.collect.Range, java.lang.Object>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.RangeMap", "org.sonar.api.internal.google.common.collect.TreeRangeMap$1.subRangeMap(org.sonar.api.internal.google.common.collect.Range)"], ["java.util.Iterator<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges$1.iterator()"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges$1.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges.get(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$AsMapOfRanges.entrySet()"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.contains(K)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.remove(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.retainAll(java.util.Collection<?>)"], ["java.util.Iterator<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.retainAll(java.util.Collection<?>)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3.removeAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$3.retainAll(java.util.Collection<?>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.containsKey(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.get(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.remove(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.clear()"], ["java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet()"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.get(K)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.getEntry(K)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.clear()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.remove(org.sonar.api.internal.google.common.collect.Range<K>)"], ["org.sonar.api.internal.google.common.collect.RangeMap<K, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["java.util.Map<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.asMapOfRanges()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeRangeMap$SubRangeMap.toString()"], ["<K extends java.lang.Comparable, V> org.sonar.api.internal.google.common.collect.TreeRangeMap<K, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.create()"], ["V", "org.sonar.api.internal.google.common.collect.TreeRangeMap.get(K)"], ["java.util.Map$Entry<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.getEntry(K)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.put(org.sonar.api.internal.google.common.collect.Range<K>, V)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.putAll(org.sonar.api.internal.google.common.collect.RangeMap<K, V>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.clear()"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeMap.remove(org.sonar.api.internal.google.common.collect.Range<K>)"], ["java.util.Map<org.sonar.api.internal.google.common.collect.Range<K>, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.asMapOfRanges()"], ["org.sonar.api.internal.google.common.collect.RangeMap<K, V>", "org.sonar.api.internal.google.common.collect.TreeRangeMap.subRangeMap(org.sonar.api.internal.google.common.collect.Range<K>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeMap.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeMap.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.TreeRangeMap.toString()"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$AsRanges.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$AsRanges.equals(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$Complement.contains(C)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.comparator()"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.containsKey(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.comparator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.size()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.isEmpty()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.get(java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.contains(C)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSet.clear()"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean, org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<org.sonar.api.internal.google.common.collect.Cut<C>, org.sonar.api.internal.google.common.collect.Range<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(org.sonar.api.internal.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super org.sonar.api.internal.google.common.collect.Cut<C>>", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.comparator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.size()"], ["java.lang.Object", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "org.sonar.api.internal.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.TreeRangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.create()"], ["<C extends java.lang.Comparable<?>> org.sonar.api.internal.google.common.collect.TreeRangeSet<C>", "org.sonar.api.internal.google.common.collect.TreeRangeSet.create(org.sonar.api.internal.google.common.collect.RangeSet<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.encloses(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.add(org.sonar.api.internal.google.common.collect.Range<C>)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.remove(org.sonar.api.internal.google.common.collect.Range<C>)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.equals(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.removeAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.addAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.enclosesAll(org.sonar.api.internal.google.common.collect.RangeSet)"], ["void", "org.sonar.api.internal.google.common.collect.TreeRangeSet.clear()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.isEmpty()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeRangeSet.contains(java.lang.Comparable)"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeTraverser$1.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeTraverser$2.iterator()"], ["java.util.Iterator", "org.sonar.api.internal.google.common.collect.TreeTraverser$3.iterator()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeTraverser$BreadthFirstIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.TreeTraverser$BreadthFirstIterator.peek()"], ["T", "org.sonar.api.internal.google.common.collect.TreeTraverser$BreadthFirstIterator.next()"], ["boolean", "org.sonar.api.internal.google.common.collect.TreeTraverser$PreOrderIterator.hasNext()"], ["T", "org.sonar.api.internal.google.common.collect.TreeTraverser$PreOrderIterator.next()"], ["org.sonar.api.internal.google.common.collect.TreeTraverser", "org.sonar.api.internal.google.common.collect.TreeTraverser()"], ["void", "org.sonar.api.internal.google.common.collect.UnmodifiableIterator.remove()"], ["void", "org.sonar.api.internal.google.common.collect.UnmodifiableListIterator.add(E)"], ["void", "org.sonar.api.internal.google.common.collect.UnmodifiableListIterator.set(E)"], ["java.util.Comparator<? super E>", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.comparator()"], ["java.util.Set", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.elementSet()"], ["java.util.SortedSet", "org.sonar.api.internal.google.common.collect.UnmodifiableSortedMultiset.elementSet()"], ["int", "org.sonar.api.internal.google.common.collect.UsingToStringOrdering.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.collect.UsingToStringOrdering.toString()"], ["K", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet$1$1.getKey()"], ["V", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet$1$1.getValue()"], ["V", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet$1$1.setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.WellBehavedMap$EntrySet.iterator()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.collect.WellBehavedMap.entrySet()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.ArrayBasedCharEscaper.escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.ArrayBasedEscaperMap", "org.sonar.api.internal.google.common.escape.ArrayBasedEscaperMap.create(java.util.Map<java.lang.Character, java.lang.String>)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.CharEscaper.escape(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder$CharArrayDecorator.escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.CharEscaperBuilder", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder()"], ["org.sonar.api.internal.google.common.escape.CharEscaperBuilder", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.addEscape(char, java.lang.String)"], ["org.sonar.api.internal.google.common.escape.CharEscaperBuilder", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.addEscapes(char[], java.lang.String)"], ["char[][]", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.toArray()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.escape.CharEscaperBuilder.toEscaper()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escaper$1.apply(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.escape.Escaper$1.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.base.Function<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.escape.Escaper.asFunction()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escapers$1.escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers$Builder.setSafeRange(char, char)"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers$Builder.setUnsafeReplacement(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers$Builder.addEscape(char, java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.escape.Escapers$Builder.build()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.escape.Escapers.nullEscaper()"], ["org.sonar.api.internal.google.common.escape.Escapers$Builder", "org.sonar.api.internal.google.common.escape.Escapers.builder()"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escapers.computeReplacement(org.sonar.api.internal.google.common.escape.CharEscaper, char)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.Escapers.computeReplacement(org.sonar.api.internal.google.common.escape.UnicodeEscaper, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.escape.UnicodeEscaper.escape(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$1.load(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder$MethodIdentifier.equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.collect.Multimap<java.lang.Class<?>, org.sonar.api.internal.google.common.eventbus.EventSubscriber>", "org.sonar.api.internal.google.common.eventbus.AnnotatedSubscriberFinder.findAllSubscribers(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus$1.run()"], ["org.sonar.api.internal.google.common.eventbus.AsyncEventBus", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.lang.String, java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.eventbus.AsyncEventBus", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor, org.sonar.api.internal.google.common.eventbus.SubscriberExceptionHandler)"], ["org.sonar.api.internal.google.common.eventbus.AsyncEventBus", "org.sonar.api.internal.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor)"], ["org.sonar.api.internal.google.common.eventbus.DeadEvent", "org.sonar.api.internal.google.common.eventbus.DeadEvent(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.DeadEvent.getSource()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.DeadEvent.getEvent()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.EventBus$1.load(java.lang.Object)"], ["org.sonar.api.internal.google.common.eventbus.EventBus$EventWithSubscriber", "org.sonar.api.internal.google.common.eventbus.EventBus$EventWithSubscriber(java.lang.Object, org.sonar.api.internal.google.common.eventbus.EventSubscriber)"], ["org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler", "org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus$LoggingSubscriberExceptionHandler.handleException(java.lang.Throwable, org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext)"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.EventBus()"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.EventBus(java.lang.String)"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.EventBus(org.sonar.api.internal.google.common.eventbus.SubscriberExceptionHandler)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus.register(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus.unregister(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventBus.post(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.handleEvent(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.toString()"], ["int", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.equals(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.getSubscriber()"], ["java.lang.reflect.Method", "org.sonar.api.internal.google.common.eventbus.EventSubscriber.getMethod()"], ["org.sonar.api.internal.google.common.eventbus.EventBus", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getEventBus()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getEvent()"], ["java.lang.Object", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getSubscriber()"], ["java.lang.reflect.Method", "org.sonar.api.internal.google.common.eventbus.SubscriberExceptionContext.getSubscriberMethod()"], ["org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber", "org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber(java.lang.Object, java.lang.reflect.Method)"], ["void", "org.sonar.api.internal.google.common.eventbus.SynchronizedEventSubscriber.handleEvent(java.lang.Object)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putLong(long)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putChar(char)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractByteHasher.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.hash()"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractCompositeHashFunction.newHasher()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putDouble(double)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putFloat(float)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putBoolean(boolean)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putDouble(double)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractHasher.putFloat(float)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putLong(long)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putChar(char)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.hash()"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.newHasher()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.newHasher(int)"], ["<T> org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractNonStreamingHashFunction.hashBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putByte(byte)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putShort(short)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putChar(char)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putInt(int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putLong(long)"], ["<T> org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.hash()"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putChar(char)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putLong(long)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putInt(int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putShort(short)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.PrimitiveSink", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.putByte(byte)"], ["<T> org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashObject(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.hashBytes(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.AbstractStreamingHashFunction.newHasher(int)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.mightContain(T)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.apply(T)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.put(T)"], ["double", "org.sonar.api.internal.google.common.hash.BloomFilter.expectedFpp()"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.isCompatible(org.sonar.api.internal.google.common.hash.BloomFilter<T>)"], ["void", "org.sonar.api.internal.google.common.hash.BloomFilter.putAll(org.sonar.api.internal.google.common.hash.BloomFilter<T>)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.BloomFilter.hashCode()"], ["<T> org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.create(org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, double)"], ["<T> org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.create(org.sonar.api.internal.google.common.hash.Funnel<? super T>, int)"], ["void", "org.sonar.api.internal.google.common.hash.BloomFilter.writeTo(java.io.OutputStream)"], ["<T> org.sonar.api.internal.google.common.hash.BloomFilter<T>", "org.sonar.api.internal.google.common.hash.BloomFilter.readFrom(java.io.InputStream, org.sonar.api.internal.google.common.hash.Funnel<T>)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$1.put(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$1.mightContain(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$2.put(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["<T> boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$2.mightContain(T, org.sonar.api.internal.google.common.hash.Funnel<? super T>, int, org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray)"], ["boolean", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies$BitArray.hashCode()"], ["org.sonar.api.internal.google.common.hash.BloomFilterStrategies[]", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies.values()"], ["org.sonar.api.internal.google.common.hash.BloomFilterStrategies", "org.sonar.api.internal.google.common.hash.BloomFilterStrategies.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction$ChecksumHasher.hash()"], ["int", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction.bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction.newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.ChecksumHashFunction.toString()"], ["void", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction$Crc32cHasher.update(byte)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction$Crc32cHasher.hash()"], ["int", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction.bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction.newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Crc32cHashFunction.toString()"], ["org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.values()"], ["org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.funnel(byte[], org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$ByteArrayFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.values()"], ["org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Integer, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnels$LongFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.values()"], ["org.sonar.api.internal.google.common.hash.Funnels$LongFunnel", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Long, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Iterable<? extends E>, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.hashCode()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.write(int)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.write(byte[])"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.write(byte[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$SinkAsStream.toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.CharSequence, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.hashCode()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel[]", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.values()"], ["org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.CharSequence, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.toString()"], ["void", "org.sonar.api.internal.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.Object, org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["<E> org.sonar.api.internal.google.common.hash.Funnel<java.lang.Iterable<? extends E>>", "org.sonar.api.internal.google.common.hash.Funnels.sequentialFunnel(org.sonar.api.internal.google.common.hash.Funnel<E>)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.hash.Funnels.asOutputStream(org.sonar.api.internal.google.common.hash.PrimitiveSink)"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.bits()"], ["byte[]", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.asBytes()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.asInt()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.asLong()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$BytesHashCode.padToLong()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.bits()"], ["byte[]", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.asBytes()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.asInt()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.asLong()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$IntHashCode.padToLong()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.bits()"], ["byte[]", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.asBytes()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.asInt()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.asLong()"], ["long", "org.sonar.api.internal.google.common.hash.HashCode$LongHashCode.padToLong()"], ["int", "org.sonar.api.internal.google.common.hash.HashCode.writeBytesTo(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromBytes(byte[])"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashCode.fromString(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.hash.HashCode.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.HashCode.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.HashCode.toString()"], ["java.util.zip.Checksum", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$1.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$1.get()"], ["java.util.zip.Checksum", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$2.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType$2.get()"], ["org.sonar.api.internal.google.common.hash.Hashing$ChecksumType[]", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType.values()"], ["org.sonar.api.internal.google.common.hash.Hashing$ChecksumType", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType.valueOf(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.hash.Hashing$ChecksumType.get()"], ["int", "org.sonar.api.internal.google.common.hash.Hashing$ConcatenatedHashFunction.bits()"], ["boolean", "org.sonar.api.internal.google.common.hash.Hashing$ConcatenatedHashFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Hashing$ConcatenatedHashFunction.hashCode()"], ["org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator", "org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator(long)"], ["double", "org.sonar.api.internal.google.common.hash.Hashing$LinearCongruentialGenerator.nextDouble()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.goodFastHash(int)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_32(int)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_32()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_128(int)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.murmur3_128()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sipHash24()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sipHash24(long, long)"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.md5()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sha1()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sha256()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.sha512()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.crc32c()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.crc32()"], ["org.sonar.api.internal.google.common.hash.HashFunction", "org.sonar.api.internal.google.common.hash.Hashing.adler32()"], ["int", "org.sonar.api.internal.google.common.hash.Hashing.consistentHash(org.sonar.api.internal.google.common.hash.HashCode, int)"], ["int", "org.sonar.api.internal.google.common.hash.Hashing.consistentHash(long, int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Hashing.combineOrdered(java.lang.Iterable<org.sonar.api.internal.google.common.hash.HashCode>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Hashing.combineUnordered(java.lang.Iterable<org.sonar.api.internal.google.common.hash.HashCode>)"], ["org.sonar.api.internal.google.common.hash.HashingInputStream", "org.sonar.api.internal.google.common.hash.HashingInputStream(org.sonar.api.internal.google.common.hash.HashFunction, java.io.InputStream)"], ["int", "org.sonar.api.internal.google.common.hash.HashingInputStream.read()"], ["int", "org.sonar.api.internal.google.common.hash.HashingInputStream.read(byte[], int, int)"], ["boolean", "org.sonar.api.internal.google.common.hash.HashingInputStream.markSupported()"], ["void", "org.sonar.api.internal.google.common.hash.HashingInputStream.mark(int)"], ["void", "org.sonar.api.internal.google.common.hash.HashingInputStream.reset()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashingInputStream.hash()"], ["org.sonar.api.internal.google.common.hash.HashingOutputStream", "org.sonar.api.internal.google.common.hash.HashingOutputStream(org.sonar.api.internal.google.common.hash.HashFunction, java.io.OutputStream)"], ["void", "org.sonar.api.internal.google.common.hash.HashingOutputStream.write(int)"], ["void", "org.sonar.api.internal.google.common.hash.HashingOutputStream.write(byte[], int, int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.HashingOutputStream.hash()"], ["void", "org.sonar.api.internal.google.common.hash.HashingOutputStream.close()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction$MessageDigestHasher.hash()"], ["int", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction.bits()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction.toString()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.MessageDigestHashFunction.newHasher()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher.makeHash()"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_128HashFunction.hashCode()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.makeHash()"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashCode()"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashInt(int)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashLong(long)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.Murmur3_32HashFunction.hashUnencodedChars(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.hash.SipHashFunction$SipHasher.makeHash()"], ["int", "org.sonar.api.internal.google.common.hash.SipHashFunction.bits()"], ["org.sonar.api.internal.google.common.hash.Hasher", "org.sonar.api.internal.google.common.hash.SipHashFunction.newHasher()"], ["java.lang.String", "org.sonar.api.internal.google.common.hash.SipHashFunction.toString()"], ["boolean", "org.sonar.api.internal.google.common.hash.SipHashFunction.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.hash.SipHashFunction.hashCode()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.html.HtmlEscapers.htmlEscaper()"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.flush()"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.close()"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(int)"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.AppendableWriter.write(java.lang.String, int, int)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.AppendableWriter.append(char)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.AppendableWriter.append(char)"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.AppendableWriter.append(java.lang.CharSequence)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.BaseEncoding$1.openStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.BaseEncoding$2.openStream()"], ["int", "org.sonar.api.internal.google.common.io.BaseEncoding$3.read()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$3.close()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$4.write(char)"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$4.flush()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$4.close()"], ["boolean", "org.sonar.api.internal.google.common.io.BaseEncoding$Alphabet.matches(char)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding$Alphabet.toString()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.omitPadding()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.withPadChar(char)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.withSeparator(java.lang.String, int)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.upperCase()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.lowerCase()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding$SeparatedBaseEncoding.toString()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$1.write(byte)"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$1.flush()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$1.close()"], ["int", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$2.read()"], ["void", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding$2.close()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.omitPadding()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.withPadChar(char)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.withSeparator(java.lang.String, int)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.upperCase()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.lowerCase()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding$StandardBaseEncoding.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding.encode(byte[])"], ["java.lang.String", "org.sonar.api.internal.google.common.io.BaseEncoding.encode(byte[], int, int)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.BaseEncoding.encodingStream(java.io.Writer)"], ["org.sonar.api.internal.google.common.io.ByteSink", "org.sonar.api.internal.google.common.io.BaseEncoding.encodingSink(org.sonar.api.internal.google.common.io.CharSink)"], ["byte[]", "org.sonar.api.internal.google.common.io.BaseEncoding.decode(java.lang.CharSequence)"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.BaseEncoding.decodingStream(java.io.Reader)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.BaseEncoding.decodingSource(org.sonar.api.internal.google.common.io.CharSource)"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base64()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base64Url()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base32()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base32Hex()"], ["org.sonar.api.internal.google.common.io.BaseEncoding", "org.sonar.api.internal.google.common.io.BaseEncoding.base16()"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.ByteSink$AsCharSink.openStream()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSink$AsCharSink.toString()"], ["org.sonar.api.internal.google.common.io.CharSink", "org.sonar.api.internal.google.common.io.ByteSink.asCharSink(java.nio.charset.Charset)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.ByteSink.openBufferedStream()"], ["void", "org.sonar.api.internal.google.common.io.ByteSink.write(byte[])"], ["long", "org.sonar.api.internal.google.common.io.ByteSink.writeFrom(java.io.InputStream)"], ["java.io.Reader", "org.sonar.api.internal.google.common.io.ByteSource$AsCharSource.openStream()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$AsCharSource.toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.openStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.openBufferedStream()"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.isEmpty()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.size()"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.read()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.copyTo(java.io.OutputStream)"], ["<T> T", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.read(org.sonar.api.internal.google.common.io.ByteProcessor<T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.hash(org.sonar.api.internal.google.common.hash.HashFunction)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$ByteArrayByteSource.toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.openStream()"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.isEmpty()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.size()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$ConcatenatedByteSource.toString()"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.ByteSource$EmptyByteSource.asCharSource(java.nio.charset.Charset)"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteSource$EmptyByteSource.read()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$EmptyByteSource.toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.openStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.openBufferedStream()"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.slice(long, long)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteSource$SlicedByteSource.toString()"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.ByteSource.asCharSource(java.nio.charset.Charset)"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteSource.openBufferedStream()"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.slice(long, long)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource.isEmpty()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource.size()"], ["long", "org.sonar.api.internal.google.common.io.ByteSource.copyTo(java.io.OutputStream)"], ["long", "org.sonar.api.internal.google.common.io.ByteSource.copyTo(org.sonar.api.internal.google.common.io.ByteSink)"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteSource.read()"], ["<T> T", "org.sonar.api.internal.google.common.io.ByteSource.read(org.sonar.api.internal.google.common.io.ByteProcessor<T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.io.ByteSource.hash(org.sonar.api.internal.google.common.hash.HashFunction)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteSource.contentEquals(org.sonar.api.internal.google.common.io.ByteSource)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.concat(java.lang.Iterable<? extends org.sonar.api.internal.google.common.io.ByteSource>)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.concat(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.ByteSource>)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.concat(org.sonar.api.internal.google.common.io.ByteSource...)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.wrap(byte[])"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.ByteSource.empty()"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$1.write(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$1.write(byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$1.write(byte[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteStreams$1.toString()"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[], int, int)"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.skipBytes(int)"], ["boolean", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readBoolean()"], ["byte", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readByte()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedByte()"], ["short", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readShort()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedShort()"], ["char", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readChar()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readInt()"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readLong()"], ["float", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readFloat()"], ["double", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readDouble()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readLine()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataInputStream.readUTF()"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBoolean(boolean)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeByte(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBytes(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChar(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChars(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeDouble(double)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeFloat(float)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeInt(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeLong(long)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeShort(int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeUTF(java.lang.String)"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteStreams$ByteArrayDataOutputStream.toByteArray()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.available()"], ["synchronized", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.void mark(int)"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.read()"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.read(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.void reset()"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams$LimitedInputStream.skip(long)"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams.copy(java.io.InputStream, java.io.OutputStream)"], ["long", "org.sonar.api.internal.google.common.io.ByteStreams.copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel)"], ["byte[]", "org.sonar.api.internal.google.common.io.ByteStreams.toByteArray(java.io.InputStream)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataInput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataInput(byte[])"], ["org.sonar.api.internal.google.common.io.ByteArrayDataInput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataInput(byte[], int)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataInput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataInput(java.io.ByteArrayInputStream)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataOutput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataOutput()"], ["org.sonar.api.internal.google.common.io.ByteArrayDataOutput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataOutput(int)"], ["org.sonar.api.internal.google.common.io.ByteArrayDataOutput", "org.sonar.api.internal.google.common.io.ByteStreams.newDataOutput(java.io.ByteArrayOutputStream)"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.ByteStreams.nullOutputStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.ByteStreams.limit(java.io.InputStream, long)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.ByteStreams.skipFully(java.io.InputStream, long)"], ["<T> T", "org.sonar.api.internal.google.common.io.ByteStreams.readBytes(java.io.InputStream, org.sonar.api.internal.google.common.io.ByteProcessor<T>)"], ["int", "org.sonar.api.internal.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)"], ["org.sonar.api.internal.google.common.io.CharSequenceReader", "org.sonar.api.internal.google.common.io.CharSequenceReader(java.lang.CharSequence)"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.int read(java.nio.CharBuffer)"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.int read()"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.int read(char[], int, int)"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.long skip(long)"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.boolean ready()"], ["boolean", "org.sonar.api.internal.google.common.io.CharSequenceReader.markSupported()"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.void mark(int)"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.void reset()"], ["synchronized", "org.sonar.api.internal.google.common.io.CharSequenceReader.void close()"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharSink.openBufferedStream()"], ["void", "org.sonar.api.internal.google.common.io.CharSink.write(java.lang.CharSequence)"], ["void", "org.sonar.api.internal.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>)"], ["void", "org.sonar.api.internal.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String)"], ["long", "org.sonar.api.internal.google.common.io.CharSink.writeFrom(java.lang.Readable)"], ["java.io.Reader", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.openStream()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.read()"], ["boolean", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.readFirstLine()"], ["<T> T", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.readLines(org.sonar.api.internal.google.common.io.LineProcessor<T>)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$CharSequenceCharSource.toString()"], ["java.io.Reader", "org.sonar.api.internal.google.common.io.CharSource$ConcatenatedCharSource.openStream()"], ["boolean", "org.sonar.api.internal.google.common.io.CharSource$ConcatenatedCharSource.isEmpty()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$ConcatenatedCharSource.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource$EmptyCharSource.toString()"], ["java.io.BufferedReader", "org.sonar.api.internal.google.common.io.CharSource.openBufferedStream()"], ["long", "org.sonar.api.internal.google.common.io.CharSource.copyTo(java.lang.Appendable)"], ["long", "org.sonar.api.internal.google.common.io.CharSource.copyTo(org.sonar.api.internal.google.common.io.CharSink)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource.read()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharSource.readFirstLine()"], ["<T> T", "org.sonar.api.internal.google.common.io.CharSource.readLines(org.sonar.api.internal.google.common.io.LineProcessor<T>)"], ["boolean", "org.sonar.api.internal.google.common.io.CharSource.isEmpty()"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.concat(java.lang.Iterable<? extends org.sonar.api.internal.google.common.io.CharSource>)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.concat(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.CharSource>)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.concat(org.sonar.api.internal.google.common.io.CharSource...)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.wrap(java.lang.CharSequence)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.CharSource.empty()"], ["int", "org.sonar.api.internal.google.common.io.CharStreams$1.read(char[], int, int)"], ["int", "org.sonar.api.internal.google.common.io.CharStreams$1.read(java.nio.CharBuffer)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$1.close()"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(int)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(char[])"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(char[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.write(java.lang.String, int, int)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(char)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.flush()"], ["void", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.close()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.toString()"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(char)"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "org.sonar.api.internal.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)"], ["long", "org.sonar.api.internal.google.common.io.CharStreams.copy(java.lang.Readable, java.lang.Appendable)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.CharStreams.toString(java.lang.Readable)"], ["<T> T", "org.sonar.api.internal.google.common.io.CharStreams.readLines(java.lang.Readable, org.sonar.api.internal.google.common.io.LineProcessor<T>)"], ["void", "org.sonar.api.internal.google.common.io.CharStreams.skipFully(java.io.Reader, long)"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams.nullWriter()"], ["java.io.Writer", "org.sonar.api.internal.google.common.io.CharStreams.asWriter(java.lang.Appendable)"], ["void", "org.sonar.api.internal.google.common.io.Closeables.close(java.io.Closeable, boolean)"], ["void", "org.sonar.api.internal.google.common.io.Closeables.closeQuietly(java.io.InputStream)"], ["void", "org.sonar.api.internal.google.common.io.Closeables.closeQuietly(java.io.Reader)"], ["void", "org.sonar.api.internal.google.common.io.Closer$LoggingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.io.Closer$SuppressingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["org.sonar.api.internal.google.common.io.Closer", "org.sonar.api.internal.google.common.io.Closer.create()"], ["<C extends java.io.Closeable> C", "org.sonar.api.internal.google.common.io.Closer.register(C)"], ["java.lang.RuntimeException", "org.sonar.api.internal.google.common.io.Closer.rethrow(java.lang.Throwable)"], ["<X extends java.lang.Exception> java.lang.RuntimeException", "org.sonar.api.internal.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)"], ["<X1 extends java.lang.Exception, X2 extends java.lang.Exception> java.lang.RuntimeException", "org.sonar.api.internal.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)"], ["void", "org.sonar.api.internal.google.common.io.Closer.close()"], ["org.sonar.api.internal.google.common.io.CountingInputStream", "org.sonar.api.internal.google.common.io.CountingInputStream(java.io.InputStream)"], ["long", "org.sonar.api.internal.google.common.io.CountingInputStream.getCount()"], ["int", "org.sonar.api.internal.google.common.io.CountingInputStream.read()"], ["int", "org.sonar.api.internal.google.common.io.CountingInputStream.read(byte[], int, int)"], ["long", "org.sonar.api.internal.google.common.io.CountingInputStream.skip(long)"], ["synchronized", "org.sonar.api.internal.google.common.io.CountingInputStream.void mark(int)"], ["synchronized", "org.sonar.api.internal.google.common.io.CountingInputStream.void reset()"], ["org.sonar.api.internal.google.common.io.CountingOutputStream", "org.sonar.api.internal.google.common.io.CountingOutputStream(java.io.OutputStream)"], ["long", "org.sonar.api.internal.google.common.io.CountingOutputStream.getCount()"], ["void", "org.sonar.api.internal.google.common.io.CountingOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.CountingOutputStream.write(int)"], ["void", "org.sonar.api.internal.google.common.io.CountingOutputStream.close()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream$1.openStream()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream$2.openStream()"], ["org.sonar.api.internal.google.common.io.FileBackedOutputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream(int)"], ["org.sonar.api.internal.google.common.io.FileBackedOutputStream", "org.sonar.api.internal.google.common.io.FileBackedOutputStream(int, boolean)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.asByteSource()"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void reset()"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void write(int)"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void write(byte[])"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void write(byte[], int, int)"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void close()"], ["synchronized", "org.sonar.api.internal.google.common.io.FileBackedOutputStream.void flush()"], ["org.sonar.api.internal.google.common.io.FileWriteMode[]", "org.sonar.api.internal.google.common.io.FileWriteMode.values()"], ["org.sonar.api.internal.google.common.io.FileWriteMode", "org.sonar.api.internal.google.common.io.FileWriteMode.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.io.Files$1.processLine(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.io.Files$1.getResult()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$2.toString()"], ["java.lang.Iterable", "org.sonar.api.internal.google.common.io.Files$2.children(java.lang.Object)"], ["java.io.FileOutputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSink.openStream()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FileByteSink.toString()"], ["java.io.OutputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSink.openStream()"], ["java.io.FileInputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSource.openStream()"], ["long", "org.sonar.api.internal.google.common.io.Files$FileByteSource.size()"], ["byte[]", "org.sonar.api.internal.google.common.io.Files$FileByteSource.read()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FileByteSource.toString()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.Files$FileByteSource.openStream()"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$1.apply(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FilePredicate$1.toString()"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$1.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$2.apply(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files$FilePredicate$2.toString()"], ["boolean", "org.sonar.api.internal.google.common.io.Files$FilePredicate$2.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.io.Files$FilePredicate[]", "org.sonar.api.internal.google.common.io.Files$FilePredicate.values()"], ["org.sonar.api.internal.google.common.io.Files$FilePredicate", "org.sonar.api.internal.google.common.io.Files$FilePredicate.valueOf(java.lang.String)"], ["java.io.BufferedReader", "org.sonar.api.internal.google.common.io.Files.newReader(java.io.File, java.nio.charset.Charset)"], ["java.io.BufferedWriter", "org.sonar.api.internal.google.common.io.Files.newWriter(java.io.File, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.Files.asByteSource(java.io.File)"], ["org.sonar.api.internal.google.common.io.ByteSink", "org.sonar.api.internal.google.common.io.Files.asByteSink(java.io.File, org.sonar.api.internal.google.common.io.FileWriteMode...)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.Files.asCharSource(java.io.File, java.nio.charset.Charset)"], ["org.sonar.api.internal.google.common.io.CharSink", "org.sonar.api.internal.google.common.io.Files.asCharSink(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.FileWriteMode...)"], ["byte[]", "org.sonar.api.internal.google.common.io.Files.toByteArray(java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.toString(java.io.File, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.google.common.io.Files.write(byte[], java.io.File)"], ["void", "org.sonar.api.internal.google.common.io.Files.copy(java.io.File, java.io.OutputStream)"], ["void", "org.sonar.api.internal.google.common.io.Files.copy(java.io.File, java.io.File)"], ["void", "org.sonar.api.internal.google.common.io.Files.write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.google.common.io.Files.append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)"], ["void", "org.sonar.api.internal.google.common.io.Files.copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable)"], ["boolean", "org.sonar.api.internal.google.common.io.Files.equal(java.io.File, java.io.File)"], ["java.io.File", "org.sonar.api.internal.google.common.io.Files.createTempDir()"], ["void", "org.sonar.api.internal.google.common.io.Files.touch(java.io.File)"], ["void", "org.sonar.api.internal.google.common.io.Files.createParentDirs(java.io.File)"], ["void", "org.sonar.api.internal.google.common.io.Files.move(java.io.File, java.io.File)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.readFirstLine(java.io.File, java.nio.charset.Charset)"], ["<T> T", "org.sonar.api.internal.google.common.io.Files.readLines(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.LineProcessor<T>)"], ["<T> T", "org.sonar.api.internal.google.common.io.Files.readBytes(java.io.File, org.sonar.api.internal.google.common.io.ByteProcessor<T>)"], ["org.sonar.api.internal.google.common.hash.HashCode", "org.sonar.api.internal.google.common.io.Files.hash(java.io.File, org.sonar.api.internal.google.common.hash.HashFunction)"], ["java.nio.MappedByteBuffer", "org.sonar.api.internal.google.common.io.Files.map(java.io.File)"], ["java.nio.MappedByteBuffer", "org.sonar.api.internal.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode)"], ["java.nio.MappedByteBuffer", "org.sonar.api.internal.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode, long)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.simplifyPath(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.getFileExtension(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Files.getNameWithoutExtension(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.Flushables.flush(java.io.Flushable, boolean)"], ["void", "org.sonar.api.internal.google.common.io.Flushables.flushQuietly(java.io.Flushable)"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$1.read()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$1.close()"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$2.read()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$2.close()"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$3.read()"], ["int", "org.sonar.api.internal.google.common.io.GwtWorkarounds$3.read(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$3.close()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$4.write(int)"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$4.flush()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$4.close()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$5.write(char)"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$5.flush()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$5.close()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.write(char)"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.flush()"], ["void", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.close()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.GwtWorkarounds$6.toString()"], ["org.sonar.api.internal.google.common.io.LineReader", "org.sonar.api.internal.google.common.io.LineReader(java.lang.Readable)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.LineReader.readLine()"], ["org.sonar.api.internal.google.common.io.LittleEndianDataInputStream", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream(java.io.InputStream)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readLine()"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readFully(byte[])"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readFully(byte[], int, int)"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.skipBytes(int)"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readUnsignedByte()"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readUnsignedShort()"], ["int", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readInt()"], ["long", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readLong()"], ["float", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readFloat()"], ["double", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readDouble()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readUTF()"], ["short", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readShort()"], ["char", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readChar()"], ["byte", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readByte()"], ["boolean", "org.sonar.api.internal.google.common.io.LittleEndianDataInputStream.readBoolean()"], ["org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream(java.io.OutputStream)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.write(byte[], int, int)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeBoolean(boolean)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeByte(int)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeBytes(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeChar(int)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeChars(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeDouble(double)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeFloat(float)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeInt(int)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeLong(long)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeShort(int)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.writeUTF(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.io.LittleEndianDataOutputStream.close()"], ["org.sonar.api.internal.google.common.io.MultiInputStream", "org.sonar.api.internal.google.common.io.MultiInputStream(java.util.Iterator<? extends org.sonar.api.internal.google.common.io.ByteSource>)"], ["void", "org.sonar.api.internal.google.common.io.MultiInputStream.close()"], ["int", "org.sonar.api.internal.google.common.io.MultiInputStream.available()"], ["boolean", "org.sonar.api.internal.google.common.io.MultiInputStream.markSupported()"], ["int", "org.sonar.api.internal.google.common.io.MultiInputStream.read()"], ["int", "org.sonar.api.internal.google.common.io.MultiInputStream.read(byte[], int, int)"], ["long", "org.sonar.api.internal.google.common.io.MultiInputStream.skip(long)"], ["int", "org.sonar.api.internal.google.common.io.MultiReader.read(char[], int, int)"], ["long", "org.sonar.api.internal.google.common.io.MultiReader.skip(long)"], ["boolean", "org.sonar.api.internal.google.common.io.MultiReader.ready()"], ["void", "org.sonar.api.internal.google.common.io.MultiReader.close()"], ["org.sonar.api.internal.google.common.io.PatternFilenameFilter", "org.sonar.api.internal.google.common.io.PatternFilenameFilter(java.lang.String)"], ["org.sonar.api.internal.google.common.io.PatternFilenameFilter", "org.sonar.api.internal.google.common.io.PatternFilenameFilter(java.util.regex.Pattern)"], ["boolean", "org.sonar.api.internal.google.common.io.PatternFilenameFilter.accept(java.io.File, java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.io.Resources$1.processLine(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.io.Resources$1.getResult()"], ["java.io.InputStream", "org.sonar.api.internal.google.common.io.Resources$UrlByteSource.openStream()"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Resources$UrlByteSource.toString()"], ["org.sonar.api.internal.google.common.io.ByteSource", "org.sonar.api.internal.google.common.io.Resources.asByteSource(java.net.URL)"], ["org.sonar.api.internal.google.common.io.CharSource", "org.sonar.api.internal.google.common.io.Resources.asCharSource(java.net.URL, java.nio.charset.Charset)"], ["byte[]", "org.sonar.api.internal.google.common.io.Resources.toByteArray(java.net.URL)"], ["java.lang.String", "org.sonar.api.internal.google.common.io.Resources.toString(java.net.URL, java.nio.charset.Charset)"], ["<T> T", "org.sonar.api.internal.google.common.io.Resources.readLines(java.net.URL, java.nio.charset.Charset, org.sonar.api.internal.google.common.io.LineProcessor<T>)"], ["void", "org.sonar.api.internal.google.common.io.Resources.copy(java.net.URL, java.io.OutputStream)"], ["java.net.URL", "org.sonar.api.internal.google.common.io.Resources.getResource(java.lang.String)"], ["java.net.URL", "org.sonar.api.internal.google.common.io.Resources.getResource(java.lang.Class<?>, java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.math.BigIntegerMath.isPowerOfTwo(java.math.BigInteger)"], ["int", "org.sonar.api.internal.google.common.math.BigIntegerMath.log2(java.math.BigInteger, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.BigIntegerMath.log10(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.sqrt(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.factorial(int)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.BigIntegerMath.binomial(int, int)"], ["int", "org.sonar.api.internal.google.common.math.DoubleMath.roundToInt(double, java.math.RoundingMode)"], ["long", "org.sonar.api.internal.google.common.math.DoubleMath.roundToLong(double, java.math.RoundingMode)"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.math.DoubleMath.roundToBigInteger(double, java.math.RoundingMode)"], ["boolean", "org.sonar.api.internal.google.common.math.DoubleMath.isPowerOfTwo(double)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.log2(double)"], ["int", "org.sonar.api.internal.google.common.math.DoubleMath.log2(double, java.math.RoundingMode)"], ["boolean", "org.sonar.api.internal.google.common.math.DoubleMath.isMathematicalInteger(double)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.factorial(int)"], ["boolean", "org.sonar.api.internal.google.common.math.DoubleMath.fuzzyEquals(double, double, double)"], ["int", "org.sonar.api.internal.google.common.math.DoubleMath.fuzzyCompare(double, double, double)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(double...)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(int...)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(long...)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(java.lang.Iterable<? extends java.lang.Number>)"], ["double", "org.sonar.api.internal.google.common.math.DoubleMath.mean(java.util.Iterator<? extends java.lang.Number>)"], ["boolean", "org.sonar.api.internal.google.common.math.IntMath.isPowerOfTwo(int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.log2(int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.log10(int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.pow(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.sqrt(int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.divide(int, int, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.mod(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.gcd(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedAdd(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedSubtract(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedMultiply(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.checkedPow(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.factorial(int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.binomial(int, int)"], ["int", "org.sonar.api.internal.google.common.math.IntMath.mean(int, int)"], ["boolean", "org.sonar.api.internal.google.common.math.LongMath.isPowerOfTwo(long)"], ["int", "org.sonar.api.internal.google.common.math.LongMath.log2(long, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.LongMath.log10(long, java.math.RoundingMode)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.pow(long, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.sqrt(long, java.math.RoundingMode)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.divide(long, long, java.math.RoundingMode)"], ["int", "org.sonar.api.internal.google.common.math.LongMath.mod(long, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.mod(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.gcd(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedAdd(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedSubtract(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedMultiply(long, long)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.checkedPow(long, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.factorial(int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.binomial(int, int)"], ["long", "org.sonar.api.internal.google.common.math.LongMath.mean(long, long)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.HostAndPort.getHostText()"], ["boolean", "org.sonar.api.internal.google.common.net.HostAndPort.hasPort()"], ["int", "org.sonar.api.internal.google.common.net.HostAndPort.getPort()"], ["int", "org.sonar.api.internal.google.common.net.HostAndPort.getPortOrDefault(int)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.fromParts(java.lang.String, int)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.fromHost(java.lang.String)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.fromString(java.lang.String)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.withDefaultPort(int)"], ["org.sonar.api.internal.google.common.net.HostAndPort", "org.sonar.api.internal.google.common.net.HostAndPort.requireBracketsForIPv6()"], ["boolean", "org.sonar.api.internal.google.common.net.HostAndPort.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.HostAndPort.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.HostAndPort.toString()"], ["org.sonar.api.internal.google.common.net.HostSpecifier", "org.sonar.api.internal.google.common.net.HostSpecifier.fromValid(java.lang.String)"], ["org.sonar.api.internal.google.common.net.HostSpecifier", "org.sonar.api.internal.google.common.net.HostSpecifier.from(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.HostSpecifier.isValid(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.HostSpecifier.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.HostSpecifier.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.HostSpecifier.toString()"], ["org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo(java.net.Inet4Address, java.net.Inet4Address, int, int)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getServer()"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getClient()"], ["int", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getPort()"], ["int", "org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo.getFlags()"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.forString(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isInetAddress(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.InetAddresses.toAddrString(java.net.InetAddress)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.InetAddresses.toUriString(java.net.InetAddress)"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.forUriString(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isUriInetAddress(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isCompatIPv4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getCompatIPv4Address(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.is6to4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.get6to4IPv4Address(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isTeredoAddress(java.net.Inet6Address)"], ["org.sonar.api.internal.google.common.net.InetAddresses$TeredoInfo", "org.sonar.api.internal.google.common.net.InetAddresses.getTeredoInfo(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isIsatapAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getIsatapIPv4Address(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isMappedIPv4Address(java.lang.String)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.getCoercedIPv4Address(java.net.InetAddress)"], ["int", "org.sonar.api.internal.google.common.net.InetAddresses.coerceToInteger(java.net.InetAddress)"], ["java.net.Inet4Address", "org.sonar.api.internal.google.common.net.InetAddresses.fromInteger(int)"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.fromLittleEndianByteArray(byte[])"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.decrement(java.net.InetAddress)"], ["java.net.InetAddress", "org.sonar.api.internal.google.common.net.InetAddresses.increment(java.net.InetAddress)"], ["boolean", "org.sonar.api.internal.google.common.net.InetAddresses.isMaximum(java.net.InetAddress)"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.from(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isPublicSuffix()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.hasPublicSuffix()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.publicSuffix()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isUnderPublicSuffix()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isTopPrivateDomain()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.topPrivateDomain()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.hasParent()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.parent()"], ["org.sonar.api.internal.google.common.net.InternetDomainName", "org.sonar.api.internal.google.common.net.InternetDomainName.child(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.isValid(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.InternetDomainName.toString()"], ["boolean", "org.sonar.api.internal.google.common.net.InternetDomainName.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.InternetDomainName.hashCode()"], ["java.lang.Object", "org.sonar.api.internal.google.common.net.MediaType$1.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType$2.apply(java.lang.String)"], ["java.lang.Object", "org.sonar.api.internal.google.common.net.MediaType$2.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType.type()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType.subtype()"], ["org.sonar.api.internal.google.common.collect.ImmutableListMultimap<java.lang.String, java.lang.String>", "org.sonar.api.internal.google.common.net.MediaType.parameters()"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withoutParameters()"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withParameters(org.sonar.api.internal.google.common.collect.Multimap<java.lang.String, java.lang.String>)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withParameter(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.withCharset(java.nio.charset.Charset)"], ["boolean", "org.sonar.api.internal.google.common.net.MediaType.hasWildcard()"], ["boolean", "org.sonar.api.internal.google.common.net.MediaType.is(org.sonar.api.internal.google.common.net.MediaType)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.create(java.lang.String, java.lang.String)"], ["org.sonar.api.internal.google.common.net.MediaType", "org.sonar.api.internal.google.common.net.MediaType.parse(java.lang.String)"], ["boolean", "org.sonar.api.internal.google.common.net.MediaType.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.net.MediaType.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.net.MediaType.toString()"], ["org.sonar.api.internal.google.common.net.PercentEscaper", "org.sonar.api.internal.google.common.net.PercentEscaper(java.lang.String, boolean)"], ["java.lang.String", "org.sonar.api.internal.google.common.net.PercentEscaper.escape(java.lang.String)"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.net.UrlEscapers.urlFormParameterEscaper()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.net.UrlEscapers.urlPathSegmentEscaper()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.net.UrlEscapers.urlFragmentEscaper()"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.isEmpty()"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Boolean)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Booleans$BooleanArrayAsList.get(int)"], ["org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.compare(boolean[], boolean[])"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.hashCode(boolean)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.compare(boolean, boolean)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Booleans.contains(boolean[], boolean)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.indexOf(boolean[], boolean)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.indexOf(boolean[], boolean[])"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.lastIndexOf(boolean[], boolean)"], ["boolean[]", "org.sonar.api.internal.google.common.primitives.Booleans.concat(boolean[]...)"], ["boolean[]", "org.sonar.api.internal.google.common.primitives.Booleans.ensureCapacity(boolean[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Booleans.join(java.lang.String, boolean...)"], ["boolean[]", "org.sonar.api.internal.google.common.primitives.Booleans.toArray(java.util.Collection<java.lang.Boolean>)"], ["int", "org.sonar.api.internal.google.common.primitives.Booleans.countTrue(boolean...)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.isEmpty()"], ["java.lang.Byte", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Byte", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Byte)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Bytes$ByteArrayAsList.get(int)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.hashCode(byte)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Bytes.contains(byte[], byte)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.indexOf(byte[], byte)"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.indexOf(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.Bytes.lastIndexOf(byte[], byte)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Bytes.concat(byte[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Bytes.ensureCapacity(byte[], int, int)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Bytes.toArray(java.util.Collection<? extends java.lang.Number>)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.isEmpty()"], ["java.lang.Character", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Character", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Character)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Chars$CharArrayAsList.get(int)"], ["org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.compare(char[], char[])"], ["int", "org.sonar.api.internal.google.common.primitives.Chars$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.hashCode(char)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.checkedCast(long)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.compare(char, char)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Chars.contains(char[], char)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.indexOf(char[], char)"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.indexOf(char[], char[])"], ["int", "org.sonar.api.internal.google.common.primitives.Chars.lastIndexOf(char[], char)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.min(char...)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.max(char...)"], ["char[]", "org.sonar.api.internal.google.common.primitives.Chars.concat(char[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Chars.toByteArray(char)"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.fromByteArray(byte[])"], ["char", "org.sonar.api.internal.google.common.primitives.Chars.fromBytes(byte, byte)"], ["char[]", "org.sonar.api.internal.google.common.primitives.Chars.ensureCapacity(char[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Chars.join(java.lang.String, char...)"], ["char[]", "org.sonar.api.internal.google.common.primitives.Chars.toArray(java.util.Collection<java.lang.Character>)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.isEmpty()"], ["java.lang.Double", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Double", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Double)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleArrayAsList.get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Doubles$DoubleConverter.toString()"], ["org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.compare(double[], double[])"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.hashCode(double)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.compare(double, double)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles.isFinite(double)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Doubles.contains(double[], double)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.indexOf(double[], double)"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.indexOf(double[], double[])"], ["int", "org.sonar.api.internal.google.common.primitives.Doubles.lastIndexOf(double[], double)"], ["double", "org.sonar.api.internal.google.common.primitives.Doubles.min(double...)"], ["double", "org.sonar.api.internal.google.common.primitives.Doubles.max(double...)"], ["double[]", "org.sonar.api.internal.google.common.primitives.Doubles.concat(double[]...)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Double>", "org.sonar.api.internal.google.common.primitives.Doubles.stringConverter()"], ["double[]", "org.sonar.api.internal.google.common.primitives.Doubles.ensureCapacity(double[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Doubles.join(java.lang.String, double...)"], ["double[]", "org.sonar.api.internal.google.common.primitives.Doubles.toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.lang.Double", "org.sonar.api.internal.google.common.primitives.Doubles.tryParse(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.isEmpty()"], ["java.lang.Float", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Float", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Float)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Floats$FloatArrayAsList.get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Floats$FloatConverter.toString()"], ["org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.compare(float[], float[])"], ["int", "org.sonar.api.internal.google.common.primitives.Floats$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.hashCode(float)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.compare(float, float)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats.isFinite(float)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Floats.contains(float[], float)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.indexOf(float[], float)"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.indexOf(float[], float[])"], ["int", "org.sonar.api.internal.google.common.primitives.Floats.lastIndexOf(float[], float)"], ["float", "org.sonar.api.internal.google.common.primitives.Floats.min(float...)"], ["float", "org.sonar.api.internal.google.common.primitives.Floats.max(float...)"], ["float[]", "org.sonar.api.internal.google.common.primitives.Floats.concat(float[]...)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Float>", "org.sonar.api.internal.google.common.primitives.Floats.stringConverter()"], ["float[]", "org.sonar.api.internal.google.common.primitives.Floats.ensureCapacity(float[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Floats.join(java.lang.String, float...)"], ["float[]", "org.sonar.api.internal.google.common.primitives.Floats.toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.lang.Float", "org.sonar.api.internal.google.common.primitives.Floats.tryParse(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.isEmpty()"], ["java.lang.Integer", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Integer)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Ints$IntArrayAsList.get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Ints$IntConverter.toString()"], ["org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.compare(int[], int[])"], ["int", "org.sonar.api.internal.google.common.primitives.Ints$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.hashCode(int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.checkedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.compare(int, int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Ints.contains(int[], int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.indexOf(int[], int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.indexOf(int[], int[])"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.lastIndexOf(int[], int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.min(int...)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.max(int...)"], ["int[]", "org.sonar.api.internal.google.common.primitives.Ints.concat(int[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Ints.toByteArray(int)"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.fromByteArray(byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.Ints.fromBytes(byte, byte, byte, byte)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Integer>", "org.sonar.api.internal.google.common.primitives.Ints.stringConverter()"], ["int[]", "org.sonar.api.internal.google.common.primitives.Ints.ensureCapacity(int[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Ints.join(java.lang.String, int...)"], ["int[]", "org.sonar.api.internal.google.common.primitives.Ints.toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.lang.Integer", "org.sonar.api.internal.google.common.primitives.Ints.tryParse(java.lang.String)"], ["org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.compare(long[], long[])"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.isEmpty()"], ["java.lang.Long", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Long", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Long)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Longs$LongArrayAsList.get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Longs$LongConverter.toString()"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.hashCode(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.compare(long, long)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Longs.contains(long[], long)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.indexOf(long[], long)"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.indexOf(long[], long[])"], ["int", "org.sonar.api.internal.google.common.primitives.Longs.lastIndexOf(long[], long)"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.min(long...)"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.max(long...)"], ["long[]", "org.sonar.api.internal.google.common.primitives.Longs.concat(long[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Longs.toByteArray(long)"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.fromByteArray(byte[])"], ["long", "org.sonar.api.internal.google.common.primitives.Longs.fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)"], ["java.lang.Long", "org.sonar.api.internal.google.common.primitives.Longs.tryParse(java.lang.String)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Long>", "org.sonar.api.internal.google.common.primitives.Longs.stringConverter()"], ["long[]", "org.sonar.api.internal.google.common.primitives.Longs.ensureCapacity(long[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Longs.join(java.lang.String, long...)"], ["long[]", "org.sonar.api.internal.google.common.primitives.Longs.toArray(java.util.Collection<? extends java.lang.Number>)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Primitives.isWrapperType(java.lang.Class<?>)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.common.primitives.Primitives.wrap(java.lang.Class<T>)"], ["<T> java.lang.Class<T>", "org.sonar.api.internal.google.common.primitives.Primitives.unwrap(java.lang.Class<T>)"], ["org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.compare(short[], short[])"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.size()"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.isEmpty()"], ["java.lang.Short", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.get(int)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.contains(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.indexOf(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Short", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Short)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.toString()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.Shorts$ShortArrayAsList.get(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Shorts$ShortConverter.toString()"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.hashCode(short)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.checkedCast(long)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.compare(short, short)"], ["boolean", "org.sonar.api.internal.google.common.primitives.Shorts.contains(short[], short)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.indexOf(short[], short)"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.indexOf(short[], short[])"], ["int", "org.sonar.api.internal.google.common.primitives.Shorts.lastIndexOf(short[], short)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.min(short...)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.max(short...)"], ["short[]", "org.sonar.api.internal.google.common.primitives.Shorts.concat(short[]...)"], ["byte[]", "org.sonar.api.internal.google.common.primitives.Shorts.toByteArray(short)"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.fromByteArray(byte[])"], ["short", "org.sonar.api.internal.google.common.primitives.Shorts.fromBytes(byte, byte)"], ["org.sonar.api.internal.google.common.base.Converter<java.lang.String, java.lang.Short>", "org.sonar.api.internal.google.common.primitives.Shorts.stringConverter()"], ["short[]", "org.sonar.api.internal.google.common.primitives.Shorts.ensureCapacity(short[], int, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.Shorts.join(java.lang.String, short...)"], ["short[]", "org.sonar.api.internal.google.common.primitives.Shorts.toArray(java.util.Collection<? extends java.lang.Number>)"], ["org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.compare(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.SignedBytes$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.checkedCast(long)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.SignedBytes.compare(byte, byte)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.min(byte...)"], ["byte", "org.sonar.api.internal.google.common.primitives.SignedBytes.max(byte...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.SignedBytes.join(java.lang.String, byte...)"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(java.lang.Object, java.lang.Object)"], ["sun.misc.Unsafe", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()"], ["java.lang.Object", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(byte[], byte[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.toInt(byte)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.checkedCast(long)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.saturatedCast(long)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.compare(byte, byte)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.min(byte...)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.max(byte...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.toString(byte)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.toString(byte, int)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String)"], ["byte", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedBytes.join(java.lang.String, byte...)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.fromIntBits(int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(long)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(java.math.BigInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.valueOf(java.lang.String, int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.plus(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.minus(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.times(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.dividedBy(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.mod(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.intValue()"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.longValue()"], ["float", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.floatValue()"], ["double", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.doubleValue()"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.bigIntegerValue()"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.compareTo(org.sonar.api.internal.google.common.primitives.UnsignedInteger)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.toString(int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInteger.compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(int[], int[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.compare(int, int)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedInts.toLong(int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.min(int...)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.max(int...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInts.join(java.lang.String, int...)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.divide(int, int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.remainder(int, int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.decode(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInts.toString(int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedInts.toString(int, int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.fromLongBits(long)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(long)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(java.math.BigInteger)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.valueOf(java.lang.String, int)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.plus(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.minus(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.times(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.dividedBy(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLong", "org.sonar.api.internal.google.common.primitives.UnsignedLong.mod(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.intValue()"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLong.longValue()"], ["float", "org.sonar.api.internal.google.common.primitives.UnsignedLong.floatValue()"], ["double", "org.sonar.api.internal.google.common.primitives.UnsignedLong.doubleValue()"], ["java.math.BigInteger", "org.sonar.api.internal.google.common.primitives.UnsignedLong.bigIntegerValue()"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.compareTo(org.sonar.api.internal.google.common.primitives.UnsignedLong)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.primitives.UnsignedLong.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLong.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLong.toString(int)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLong.compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator[]", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.values()"], ["org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(long[], long[])"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.compare(long, long)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.min(long...)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.max(long...)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.join(java.lang.String, long...)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.divide(long, long)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.remainder(long, long)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.decode(java.lang.String)"], ["long", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.toString(long)"], ["java.lang.String", "org.sonar.api.internal.google.common.primitives.UnsignedLongs.toString(long, int)"], ["org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler()"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"], ["boolean", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.AbstractInvocationHandler.toString()"], ["boolean", "org.sonar.api.internal.google.common.reflect.ClassPath$1.apply(org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo)"], ["boolean", "org.sonar.api.internal.google.common.reflect.ClassPath$1.apply(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.getPackageName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.getSimpleName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.getName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ClassInfo.toString()"], ["java.net.URL", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.url()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.getResourceName()"], ["int", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.ClassPath$ResourceInfo.toString()"], ["org.sonar.api.internal.google.common.reflect.ClassPath", "org.sonar.api.internal.google.common.reflect.ClassPath.from(java.lang.ClassLoader)"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.internal.google.common.reflect.Element.getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Element.getAnnotations()"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Element.getDeclaredAnnotations()"], ["void", "org.sonar.api.internal.google.common.reflect.Element.setAccessible(boolean)"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isAccessible()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Element.getName()"], ["int", "org.sonar.api.internal.google.common.reflect.Element.getModifiers()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isSynthetic()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isPublic()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isProtected()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isPackagePrivate()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isPrivate()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isStatic()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isFinal()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isAbstract()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isNative()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.isSynchronized()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Element.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.Element.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Element.toString()"], ["<T extends B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(java.lang.Class<T>, T)"], ["<T extends B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)"], ["<B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.of()"], ["<B> org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.builder()"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(java.lang.Class<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$ConstructorInvokable.isOverridable()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$ConstructorInvokable.isVarArgs()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$MethodInvokable.isOverridable()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable$MethodInvokable.isVarArgs()"], ["org.sonar.api.internal.google.common.reflect.Invokable<?, java.lang.Object>", "org.sonar.api.internal.google.common.reflect.Invokable.from(java.lang.reflect.Method)"], ["<T> org.sonar.api.internal.google.common.reflect.Invokable<T, T>", "org.sonar.api.internal.google.common.reflect.Invokable.from(java.lang.reflect.Constructor<T>)"], ["R", "org.sonar.api.internal.google.common.reflect.Invokable.invoke(T, java.lang.Object...)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<? extends R>", "org.sonar.api.internal.google.common.reflect.Invokable.getReturnType()"], ["org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.reflect.TypeToken<? extends java.lang.Throwable>>", "org.sonar.api.internal.google.common.reflect.Invokable.getExceptionTypes()"], ["<R1 extends R> org.sonar.api.internal.google.common.reflect.Invokable<T, R1>", "org.sonar.api.internal.google.common.reflect.Invokable.returning(java.lang.Class<R1>)"], ["<R1 extends R> org.sonar.api.internal.google.common.reflect.Invokable<T, R1>", "org.sonar.api.internal.google.common.reflect.Invokable.returning(org.sonar.api.internal.google.common.reflect.TypeToken<R1>)"], ["java.lang.Class<? super T>", "org.sonar.api.internal.google.common.reflect.Invokable.getDeclaringClass()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Invokable.toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Invokable.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Invokable.equals(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.iterator()"], ["java.lang.Object[]", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray()"], ["<T> T[]", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray(T[])"], ["java.util.Map$Entry<K, V>", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.util.Map$Entry<K, V>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.lang.Object)"], ["V", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.setValue(V)"], ["org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap()"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.getInstance(java.lang.Class<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.getInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.putInstance(org.sonar.api.internal.google.common.reflect.TypeToken<T>, T)"], ["B", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.put(org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, B)"], ["void", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.putAll(java.util.Map<? extends org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, ? extends B>)"], ["java.util.Set<java.util.Map$Entry<org.sonar.api.internal.google.common.reflect.TypeToken<? extends B>, B>>", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.entrySet()"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.MutableTypeToInstanceMap.put(java.lang.Object, java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.Invokable<?, ?>", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaringInvokable()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Parameter.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.internal.google.common.reflect.Parameter.getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Parameter.getAnnotations()"], ["<A extends java.lang.annotation.Annotation> A[]", "org.sonar.api.internal.google.common.reflect.Parameter.getAnnotationsByType(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaredAnnotations()"], ["<A extends java.lang.annotation.Annotation> A", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<A>)"], ["<A extends java.lang.annotation.Annotation> A[]", "org.sonar.api.internal.google.common.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<A>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.Parameter.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.Parameter.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Parameter.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Reflection.getPackageName(java.lang.Class<?>)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Reflection.getPackageName(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.reflect.Reflection.initialize(java.lang.Class<?>...)"], ["<T> T", "org.sonar.api.internal.google.common.reflect.Reflection.newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)"], ["int", "org.sonar.api.internal.google.common.reflect.TypeParameter.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeParameter.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeParameter.toString()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeTable$1.resolveInternal(java.lang.reflect.TypeVariable<?>, org.sonar.api.internal.google.common.reflect.TypeResolver$TypeTable)"], ["int", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeVariableKey.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeVariableKey.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeResolver$TypeVariableKey.toString()"], ["org.sonar.api.internal.google.common.reflect.TypeResolver", "org.sonar.api.internal.google.common.reflect.TypeResolver()"], ["org.sonar.api.internal.google.common.reflect.TypeResolver", "org.sonar.api.internal.google.common.reflect.TypeResolver.where(java.lang.reflect.Type, java.lang.reflect.Type)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.TypeResolver.resolveType(java.lang.reflect.Type)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeToken$1.toString()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeToken$2.toString()"], ["java.util.Set<java.lang.Class<? super T>>", "org.sonar.api.internal.google.common.reflect.TypeToken$ClassSet.rawTypes()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Class<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Object)"], ["java.util.Set<java.lang.Class<? super T>>", "org.sonar.api.internal.google.common.reflect.TypeToken$InterfaceSet.rawTypes()"], ["int", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeCollector$4.compare(K, K)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$1.apply(org.sonar.api.internal.google.common.reflect.TypeToken<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$1.apply(java.lang.Object)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$2.apply(org.sonar.api.internal.google.common.reflect.TypeToken<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter$2.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter[]", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter.values()"], ["org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeFilter.valueOf(java.lang.String)"], ["java.util.Set<java.lang.Class<? super T>>", "org.sonar.api.internal.google.common.reflect.TypeToken$TypeSet.rawTypes()"], ["<T> org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.of(java.lang.Class<T>)"], ["java.lang.Class<? super T>", "org.sonar.api.internal.google.common.reflect.TypeToken.getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.TypeToken.getType()"], ["<X> org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.where(org.sonar.api.internal.google.common.reflect.TypeParameter<X>, org.sonar.api.internal.google.common.reflect.TypeToken<X>)"], ["<X> org.sonar.api.internal.google.common.reflect.TypeToken<T>", "org.sonar.api.internal.google.common.reflect.TypeToken.where(org.sonar.api.internal.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<? super T>", "org.sonar.api.internal.google.common.reflect.TypeToken.getSupertype(java.lang.Class<? super T>)"], ["org.sonar.api.internal.google.common.reflect.TypeToken<? extends T>", "org.sonar.api.internal.google.common.reflect.TypeToken.getSubtype(java.lang.Class<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isAssignableFrom(org.sonar.api.internal.google.common.reflect.TypeToken<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isAssignableFrom(java.lang.reflect.Type)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isArray()"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.isPrimitive()"], ["org.sonar.api.internal.google.common.reflect.Invokable<T, java.lang.Object>", "org.sonar.api.internal.google.common.reflect.TypeToken.method(java.lang.reflect.Method)"], ["org.sonar.api.internal.google.common.reflect.Invokable<T, T>", "org.sonar.api.internal.google.common.reflect.TypeToken.constructor(java.lang.reflect.Constructor<?>)"], ["boolean", "org.sonar.api.internal.google.common.reflect.TypeToken.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.TypeToken.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.TypeToken.toString()"], ["void", "org.sonar.api.internal.google.common.reflect.TypeVisitor.visit(java.lang.reflect.Type...)"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$1.apply(java.lang.reflect.Type)"], ["java.lang.Object", "org.sonar.api.internal.google.common.reflect.Types$1.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.Types$ClassOwnership[]", "org.sonar.api.internal.google.common.reflect.Types$ClassOwnership.values()"], ["org.sonar.api.internal.google.common.reflect.Types$ClassOwnership", "org.sonar.api.internal.google.common.reflect.Types$ClassOwnership.valueOf(java.lang.String)"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.getGenericComponentType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$GenericArrayTypeImpl.equals(java.lang.Object)"], ["org.sonar.api.internal.google.common.reflect.Types$JavaVersion[]", "org.sonar.api.internal.google.common.reflect.Types$JavaVersion.values()"], ["org.sonar.api.internal.google.common.reflect.Types$JavaVersion", "org.sonar.api.internal.google.common.reflect.Types$JavaVersion.valueOf(java.lang.String)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.getActualTypeArguments()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.getRawType()"], ["java.lang.reflect.Type", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.getOwnerType()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$ParameterizedTypeImpl.equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.getBounds()"], ["D", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.getGenericDeclaration()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.getName()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.toString()"], ["int", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.hashCode()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$TypeVariableImpl.equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.getLowerBounds()"], ["java.lang.reflect.Type[]", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.getUpperBounds()"], ["boolean", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.equals(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.hashCode()"], ["java.lang.String", "org.sonar.api.internal.google.common.reflect.Types$WildcardTypeImpl.toString()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractCheckedFuture.checkedGet()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$1$2.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService$2.execute(java.lang.Runnable)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.toString()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.state()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.failureCause()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.get(long, java.util.concurrent.TimeUnit)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.get()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.isDone()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.cancel(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$1.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$1.get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$2$1.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$2$2.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService$3.execute(java.lang.Runnable)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.toString()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.state()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.failureCause()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractIdleService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService()"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, T)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$1.run()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$2.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$2.get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$3.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$1$4.run()"], ["java.lang.Thread", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$2.newThread(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$3.terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$3.failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.lang.Void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.reschedule()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.cancel(boolean)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$CustomScheduler()"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.toString()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.state()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.failureCause()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractScheduledService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$5.isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$6.isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$7.isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService$8.isSatisfied()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.startAsync()"], ["org.sonar.api.internal.google.common.util.concurrent.Service", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitRunning()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.isRunning()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.state()"], ["java.lang.Throwable", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.failureCause()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.addListener(org.sonar.api.internal.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AbstractService.toString()"], ["<V> org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.create()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.setFuture(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.setValue(V)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.setException(java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AsyncSettableFuture.isSet()"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDouble", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble(double)"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDouble", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.set(double)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.lazySet(double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.getAndSet(double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.compareAndSet(double, double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.weakCompareAndSet(double, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.getAndAdd(double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.addAndGet(double)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.toString()"], ["int", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.intValue()"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.longValue()"], ["float", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.floatValue()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDouble.doubleValue()"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray(int)"], ["org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray(double[])"], ["int", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.length()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.get(int)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.set(int, double)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AtomicDoubleArray.toString()"], ["java.lang.Long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap$1.apply(java.util.concurrent.atomic.AtomicLong)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap$1.apply(java.lang.Object)"], ["<K> org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap<K>", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.create()"], ["<K> org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap<K>", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.create(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.get(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.incrementAndGet(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.decrementAndGet(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.addAndGet(K, long)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.getAndIncrement(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.getAndDecrement(K)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.getAndAdd(K, long)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.put(K, long)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.putAll(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.remove(K)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.removeAllZeros()"], ["long", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.sum()"], ["java.util.Map<K, java.lang.Long>", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.asMap()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.containsKey(java.lang.Object)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.size()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.isEmpty()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.clear()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.AtomicLongMap.toString()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReference()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReference(V)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReferenceArray(int)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "org.sonar.api.internal.google.common.util.concurrent.Atomics.newReferenceArray(E[])"], ["T", "org.sonar.api.internal.google.common.util.concurrent.Callables$1.call()"], ["T", "org.sonar.api.internal.google.common.util.concurrent.Callables$2.call()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Callables$3.run()"], ["<T> java.util.concurrent.Callable<T>", "org.sonar.api.internal.google.common.util.concurrent.Callables.returning(T)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.getLockGraphNode()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.isAcquiredByCurrentThread()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lockInterruptibly()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.unlock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lockInterruptibly()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.unlock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.getLockGraphNode()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.isAcquiredByCurrentThread()"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lockInterruptibly()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.unlock()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1.handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2.handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3.handlePotentialDeadlock(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies[]", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies.values()"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policies.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getConflictingStackTrace()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getMessage()"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E)"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E, boolean)"], ["org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newInstance(org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String, boolean)"], ["<E extends java.lang.Enum<E>> org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E>", "org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering(java.lang.Class<E>, org.sonar.api.internal.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["org.sonar.api.internal.google.common.util.concurrent.ExecutionError", "org.sonar.api.internal.google.common.util.concurrent.ExecutionError(java.lang.String, java.lang.Error)"], ["org.sonar.api.internal.google.common.util.concurrent.ExecutionError", "org.sonar.api.internal.google.common.util.concurrent.ExecutionError(java.lang.Error)"], ["org.sonar.api.internal.google.common.util.concurrent.ExecutionList", "org.sonar.api.internal.google.common.util.concurrent.ExecutionList()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ExecutionList.execute()"], ["org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter", "org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter()"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.FakeTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>, int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.poll(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.put(E)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.remainingCapacity()"], ["E", "org.sonar.api.internal.google.common.util.concurrent.ForwardingBlockingQueue.take()"], ["org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture", "org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.isShutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.isTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.shutdown()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingExecutorService.submit(java.lang.Runnable, T)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.cancel(boolean)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.isDone()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.get()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.ForwardingFuture.get(long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, T)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable)"], ["java.util.concurrent.Future", "org.sonar.api.internal.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$1$1.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$1.run()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.cancel(boolean)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.isDone()"], ["O", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.get()"], ["O", "org.sonar.api.internal.google.common.util.concurrent.Futures$3.get(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.ListenableFuture", "org.sonar.api.internal.google.common.util.concurrent.Futures$4.apply(java.lang.Object)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$5.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$6.run()"], ["java.lang.Boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$7.apply(java.lang.reflect.Constructor<?>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Futures$7.apply(java.lang.Object)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Futures$8.combine(java.util.List)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$ChainingListenableFuture$1.run()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ChainingListenableFuture.cancel(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$ChainingListenableFuture.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$CombinedFuture$1.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$CombinedFuture$2.run()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$CombinerFuture.cancel(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1$1.onSuccess(V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1$1.onFailure(java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1.onSuccess(V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture$1.onFailure(java.lang.Throwable)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$FallbackFuture.cancel(boolean)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateCancelledFuture.isCancelled()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateCancelledFuture.get()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.get()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.checkedGet()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFailedFuture.get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.cancel(boolean)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.isCancelled()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateFuture.isDone()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.get()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.checkedGet()"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["V", "org.sonar.api.internal.google.common.util.concurrent.Futures$ImmediateSuccessfulFuture.get()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1.onSuccess(V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture$1.onFailure(java.lang.Throwable)"], ["T", "org.sonar.api.internal.google.common.util.concurrent.Futures$WrappedCombiner.call()"], ["<V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X>", "org.sonar.api.internal.google.common.util.concurrent.Futures.makeChecked(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.base.Function<? super java.lang.Exception, X>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateFuture(V)"], ["<V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateCheckedFuture(V)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateFailedFuture(java.lang.Throwable)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateCancelledFuture()"], ["<V, X extends java.lang.Exception> org.sonar.api.internal.google.common.util.concurrent.CheckedFuture<V, X>", "org.sonar.api.internal.google.common.util.concurrent.Futures.immediateFailedCheckedFuture(X)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.withFallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>, org.sonar.api.internal.google.common.util.concurrent.FutureFallback<? extends V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.withFallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>, org.sonar.api.internal.google.common.util.concurrent.FutureFallback<? extends V>, java.util.concurrent.Executor)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>)"], ["<I, O> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.transform(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> java.util.concurrent.Future<O>", "org.sonar.api.internal.google.common.util.concurrent.Futures.lazyTransform(java.util.concurrent.Future<I>, org.sonar.api.internal.google.common.base.Function<? super I, ? extends O>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.dereference(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.allAsList(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.allAsList(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.Futures.nonCancellationPropagating(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.successfulAsList(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.successfulAsList(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<T> org.sonar.api.internal.google.common.collect.ImmutableList<org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<T>>", "org.sonar.api.internal.google.common.util.concurrent.Futures.inCompletionOrder(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<? extends T>>)"], ["<V> void", "org.sonar.api.internal.google.common.util.concurrent.Futures.addCallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.util.concurrent.FutureCallback<? super V>)"], ["<V> void", "org.sonar.api.internal.google.common.util.concurrent.Futures.addCallback(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, org.sonar.api.internal.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)"], ["<V, X extends java.lang.Exception> V", "org.sonar.api.internal.google.common.util.concurrent.Futures.get(java.util.concurrent.Future<V>, java.lang.Class<X>)"], ["<V, X extends java.lang.Exception> V", "org.sonar.api.internal.google.common.util.concurrent.Futures.get(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit, java.lang.Class<X>)"], ["<V> V", "org.sonar.api.internal.google.common.util.concurrent.Futures.getUnchecked(java.util.concurrent.Future<V>)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask<V>", "org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask.create(java.util.concurrent.Callable<V>)"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask<V>", "org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask.create(java.lang.Runnable, V)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ListenableFutureTask.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ListenerCallQueue.run()"], ["org.sonar.api.internal.google.common.util.concurrent.Monitor", "org.sonar.api.internal.google.common.util.concurrent.Monitor()"], ["org.sonar.api.internal.google.common.util.concurrent.Monitor", "org.sonar.api.internal.google.common.util.concurrent.Monitor(boolean)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enter()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterInterruptibly()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enter(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterInterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.tryEnter()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhen(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhen(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIfInterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.enterIfInterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.tryEnterIf(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitFor(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitForUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitFor(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.waitForUninterruptibly(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Monitor.leave()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.isFair()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.isOccupied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.isOccupiedByCurrentThread()"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Monitor.getOccupiedDepth()"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Monitor.getQueueLength()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.hasQueuedThreads()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.hasQueuedThread(java.lang.Thread)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Monitor.hasWaiters(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Monitor.getWaitQueueLength(org.sonar.api.internal.google.common.util.concurrent.Monitor$Guard)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$1.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$2.execute(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$Application$1.run()"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor[]", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor.values()"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.execute(java.lang.Runnable)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$DirectExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isShutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isTerminated()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.shutdown()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ListeningDecorator.execute(java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask(org.sonar.api.internal.google.common.util.concurrent.ListenableFuture<V>, java.util.concurrent.ScheduledFuture<?>)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.cancel(boolean)"], ["long", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.getDelay(java.util.concurrent.TimeUnit)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.util.concurrent.Delayed)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.lang.Object)"], ["org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask(java.lang.Runnable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask.run()"], ["<V> org.sonar.api.internal.google.common.util.concurrent.ListenableScheduledFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)"], ["java.util.concurrent.ScheduledExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()"], ["java.util.concurrent.Executor", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.directExecutor()"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ExecutorService)"], ["org.sonar.api.internal.google.common.util.concurrent.ListeningScheduledExecutorService", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ScheduledExecutorService)"], ["java.util.concurrent.ThreadFactory", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.platformThreadFactory()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.RateLimiter", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.create(double)"], ["org.sonar.api.internal.google.common.util.concurrent.RateLimiter", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.create(double, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.setRate(double)"], ["double", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.getRate()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.acquire()"], ["double", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.acquire(int)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire(int)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.tryAcquire(int, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.RateLimiter.toString()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Runnables$1.run()"], ["java.lang.Runnable", "org.sonar.api.internal.google.common.util.concurrent.Runnables.doNothing()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor$1.toString()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor$TaskRunner.run()"], ["org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor(java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.SerializingExecutor.execute(java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.Service$Listener", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.starting()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.running()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.stopping(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Service$Listener.failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State[]", "org.sonar.api.internal.google.common.util.concurrent.Service$State.values()"], ["org.sonar.api.internal.google.common.util.concurrent.Service$State", "org.sonar.api.internal.google.common.util.concurrent.Service$State.valueOf(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener.healthy()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener.stopped()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener.failure(org.sonar.api.internal.google.common.util.concurrent.Service)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.starting()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.running()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.stopping(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.terminated(org.sonar.api.internal.google.common.util.concurrent.Service$State)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceListener.failed(org.sonar.api.internal.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.get()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$2.isSatisfied()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$3.isSatisfied()"], ["java.lang.Long", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$4.apply(java.util.Map$Entry<org.sonar.api.internal.google.common.util.concurrent.Service, java.lang.Long>)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager$ServiceManagerState$4.apply(java.lang.Object)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager(java.lang.Iterable<? extends org.sonar.api.internal.google.common.util.concurrent.Service>)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.addListener(org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.addListener(org.sonar.api.internal.google.common.util.concurrent.ServiceManager$Listener)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.startAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitHealthy()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitHealthy(long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.util.concurrent.ServiceManager", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.stopAsync()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitStopped()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.awaitStopped(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.isHealthy()"], ["org.sonar.api.internal.google.common.collect.ImmutableMultimap<org.sonar.api.internal.google.common.util.concurrent.Service$State, org.sonar.api.internal.google.common.util.concurrent.Service>", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.servicesByState()"], ["org.sonar.api.internal.google.common.collect.ImmutableMap<org.sonar.api.internal.google.common.util.concurrent.Service, java.lang.Long>", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.startupTimes()"], ["java.lang.String", "org.sonar.api.internal.google.common.util.concurrent.ServiceManager.toString()"], ["<V> org.sonar.api.internal.google.common.util.concurrent.SettableFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.SettableFuture.create()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.SettableFuture.set(V)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.SettableFuture.setException(java.lang.Throwable)"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter$1$1.call()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"], ["org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter(java.util.concurrent.ExecutorService)"], ["org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter()"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit, boolean)"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.Striped$1.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$1.get()"], ["java.util.concurrent.locks.Lock", "org.sonar.api.internal.google.common.util.concurrent.Striped$2.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$2.get()"], ["java.util.concurrent.Semaphore", "org.sonar.api.internal.google.common.util.concurrent.Striped$3.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$3.get()"], ["java.util.concurrent.Semaphore", "org.sonar.api.internal.google.common.util.concurrent.Striped$4.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$4.get()"], ["java.util.concurrent.locks.ReadWriteLock", "org.sonar.api.internal.google.common.util.concurrent.Striped$5.get()"], ["java.lang.Object", "org.sonar.api.internal.google.common.util.concurrent.Striped$5.get()"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$CompactStriped.getAt(int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Striped$CompactStriped.size()"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$LargeLazyStriped.getAt(int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Striped$LargeLazyStriped.size()"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$PowerOfTwoStriped.get(java.lang.Object)"], ["L", "org.sonar.api.internal.google.common.util.concurrent.Striped$SmallLazyStriped.getAt(int)"], ["int", "org.sonar.api.internal.google.common.util.concurrent.Striped$SmallLazyStriped.size()"], ["java.lang.Thread", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder$1.newThread(java.lang.Runnable)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder()"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setNameFormat(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setDaemon(boolean)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setPriority(int)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)"], ["org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.setThreadFactory(java.util.concurrent.ThreadFactory)"], ["java.util.concurrent.ThreadFactory", "org.sonar.api.internal.google.common.util.concurrent.ThreadFactoryBuilder.build()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter.uncaughtException(java.lang.Thread, java.lang.Throwable)"], ["java.lang.Thread$UncaughtExceptionHandler", "org.sonar.api.internal.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit()"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException(java.lang.String, java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedExecutionException(java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException()"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.Throwable)"], ["org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException", "org.sonar.api.internal.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String, java.lang.Throwable)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread)"], ["<V> V", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>)"], ["<V> V", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)"], ["<E> E", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly(java.util.concurrent.BlockingQueue<E>)"], ["<E> void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.putUninterruptibly(java.util.concurrent.BlockingQueue<E>, E)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService$1.run()"], ["void", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> java.util.concurrent.Future<T>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable, T)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["void", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.shutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.isShutdown()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.isTerminated()"], ["boolean", "org.sonar.api.internal.google.common.util.concurrent.WrappingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["<V> java.util.concurrent.ScheduledFuture<V>", "org.sonar.api.internal.google.common.util.concurrent.WrappingScheduledExecutorService.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.xml.XmlEscapers.xmlContentEscaper()"], ["org.sonar.api.internal.google.common.escape.Escaper", "org.sonar.api.internal.google.common.xml.XmlEscapers.xmlAttributeEscaper()"], ["org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType[]", "org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType.values()"], ["org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType", "org.sonar.api.internal.google.thirdparty.publicsuffix.PublicSuffixType.valueOf(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.csv.Assertions.notNull(java.lang.Object, java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined[]", "org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined.values()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined", "org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined.valueOf(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat$Predefined.getFormat()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.newFormat(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.valueOf(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.equals(java.lang.Object)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.format(java.lang.Object...)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getAllowMissingColumnNames()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getCommentMarker()"], ["char", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getDelimiter()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getEscapeCharacter()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getHeader()"], ["java.lang.String[]", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getHeaderComments()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getIgnoreEmptyLines()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getIgnoreHeaderCase()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getIgnoreSurroundingSpaces()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getNullString()"], ["java.lang.Character", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getQuoteCharacter()"], ["org.sonar.api.internal.apachecommons.csv.QuoteMode", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getQuoteMode()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getRecordSeparator()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getSkipHeaderRecord()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getTrailingDelimiter()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.getTrim()"], ["int", "org.sonar.api.internal.apachecommons.csv.CSVFormat.hashCode()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isCommentMarkerSet()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isEscapeCharacterSet()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isNullStringSet()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVFormat.isQuoteCharacterSet()"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVFormat.parse(java.io.Reader)"], ["org.sonar.api.internal.apachecommons.csv.CSVPrinter", "org.sonar.api.internal.apachecommons.csv.CSVFormat.print(java.lang.Appendable)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVFormat.print(java.lang.Object, java.lang.Appendable, boolean)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVFormat.println(java.lang.Appendable)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVFormat.printRecord(java.lang.Appendable, java.lang.Object...)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVFormat.toString()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withAllowMissingColumnNames()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withAllowMissingColumnNames(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withCommentMarker(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withCommentMarker(java.lang.Character)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withDelimiter(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withEscape(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withEscape(java.lang.Character)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withFirstRecordAsHeader()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.lang.Class<? extends java.lang.Enum<?>>)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.sql.ResultSet)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.sql.ResultSetMetaData)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeader(java.lang.String...)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withHeaderComments(java.lang.Object...)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreEmptyLines()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreEmptyLines(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreHeaderCase()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreHeaderCase(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreSurroundingSpaces()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withNullString(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withQuote(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withQuote(java.lang.Character)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withQuoteMode(org.sonar.api.internal.apachecommons.csv.QuoteMode)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withRecordSeparator(char)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withRecordSeparator(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withSkipHeaderRecord()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withSkipHeaderRecord(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrailingDelimiter()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrailingDelimiter(boolean)"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrim()"], ["org.sonar.api.internal.apachecommons.csv.CSVFormat", "org.sonar.api.internal.apachecommons.csv.CSVFormat.withTrim(boolean)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.hasNext()"], ["org.sonar.api.internal.apachecommons.csv.CSVRecord", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.next()"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.remove()"], ["java.lang.Object", "org.sonar.api.internal.apachecommons.csv.CSVParser$1.next()"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser.parse(java.io.File, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.csv.CSVFormat)"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser.parse(java.lang.String, org.sonar.api.internal.apachecommons.csv.CSVFormat)"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser.parse(java.net.URL, java.nio.charset.Charset, org.sonar.api.internal.apachecommons.csv.CSVFormat)"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser(java.io.Reader, org.sonar.api.internal.apachecommons.csv.CSVFormat)"], ["org.sonar.api.internal.apachecommons.csv.CSVParser", "org.sonar.api.internal.apachecommons.csv.CSVParser(java.io.Reader, org.sonar.api.internal.apachecommons.csv.CSVFormat, long, long)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVParser.close()"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVParser.getCurrentLineNumber()"], ["java.util.Map<java.lang.String, java.lang.Integer>", "org.sonar.api.internal.apachecommons.csv.CSVParser.getHeaderMap()"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVParser.getRecordNumber()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVParser.isClosed()"], ["org.sonar.api.internal.apachecommons.csv.CSVPrinter", "org.sonar.api.internal.apachecommons.csv.CSVPrinter(java.lang.Appendable, org.sonar.api.internal.apachecommons.csv.CSVFormat)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.close()"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.flush()"], ["java.lang.Appendable", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.getOut()"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.print(java.lang.Object)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printComment(java.lang.String)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.println()"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecord(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecord(java.lang.Object...)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecords(java.lang.Iterable<?>)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecords(java.lang.Object...)"], ["void", "org.sonar.api.internal.apachecommons.csv.CSVPrinter.printRecords(java.sql.ResultSet)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.get(java.lang.Enum<?>)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.get(int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.get(java.lang.String)"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVRecord.getCharacterPosition()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.getComment()"], ["long", "org.sonar.api.internal.apachecommons.csv.CSVRecord.getRecordNumber()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.isConsistent()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.hasComment()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.isMapped(java.lang.String)"], ["boolean", "org.sonar.api.internal.apachecommons.csv.CSVRecord.isSet(java.lang.String)"], ["int", "org.sonar.api.internal.apachecommons.csv.CSVRecord.size()"], ["java.util.Map<java.lang.String, java.lang.String>", "org.sonar.api.internal.apachecommons.csv.CSVRecord.toMap()"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.CSVRecord.toString()"], ["int", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.read()"], ["int", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.read(char[], int, int)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.readLine()"], ["boolean", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.isClosed()"], ["void", "org.sonar.api.internal.apachecommons.csv.ExtendedBufferedReader.close()"], ["void", "org.sonar.api.internal.apachecommons.csv.Lexer.close()"], ["org.sonar.api.internal.apachecommons.csv.QuoteMode[]", "org.sonar.api.internal.apachecommons.csv.QuoteMode.values()"], ["org.sonar.api.internal.apachecommons.csv.QuoteMode", "org.sonar.api.internal.apachecommons.csv.QuoteMode.valueOf(java.lang.String)"], ["org.sonar.api.internal.apachecommons.csv.Token$Type[]", "org.sonar.api.internal.apachecommons.csv.Token$Type.values()"], ["org.sonar.api.internal.apachecommons.csv.Token$Type", "org.sonar.api.internal.apachecommons.csv.Token$Type.valueOf(java.lang.String)"], ["java.lang.String", "org.sonar.api.internal.apachecommons.csv.Token.toString()"], ["org.sonar.check.Priority[]", "org.sonar.check.Priority.values()"], ["org.sonar.check.Priority", "org.sonar.check.Priority.valueOf(java.lang.String)"], ["org.sonar.check.Cardinality[]", "org.sonar.check.Cardinality.values()"], ["org.sonar.check.Cardinality", "org.sonar.check.Cardinality.valueOf(java.lang.String)"]]}