{"guava-23.5-jre.jar": [["boolean", "com.google.common.base.Absent.isPresent()"], ["T", "com.google.common.base.Absent.get()"], ["T", "com.google.common.base.Absent.or(T)"], ["T", "com.google.common.base.Absent.or(com.google.common.base.Supplier<? extends T>)"], ["T", "com.google.common.base.Absent.orNull()"], ["<V> com.google.common.base.Optional<V>", "com.google.common.base.Absent.transform(com.google.common.base.Function<? super T, V>)"], ["boolean", "com.google.common.base.Absent.equals(java.lang.Object)"], ["int", "com.google.common.base.Absent.hashCode()"], ["java.lang.String", "com.google.common.base.Absent.toString()"], ["com.google.common.base.AbstractIterator$State[]", "com.google.common.base.AbstractIterator$State.values()"], ["com.google.common.base.AbstractIterator$State", "com.google.common.base.AbstractIterator$State.valueOf(java.lang.String)"], ["boolean", "com.google.common.base.AbstractIterator.hasNext()"], ["T", "com.google.common.base.AbstractIterator.next()"], ["void", "com.google.common.base.AbstractIterator.remove()"], ["java.lang.String", "com.google.common.base.Ascii.toLowerCase(java.lang.String)"], ["java.lang.String", "com.google.common.base.Ascii.toLowerCase(java.lang.CharSequence)"], ["char", "com.google.common.base.Ascii.toLowerCase(char)"], ["java.lang.String", "com.google.common.base.Ascii.toUpperCase(java.lang.String)"], ["java.lang.String", "com.google.common.base.Ascii.toUpperCase(java.lang.CharSequence)"], ["char", "com.google.common.base.Ascii.toUpperCase(char)"], ["boolean", "com.google.common.base.Ascii.isLowerCase(char)"], ["boolean", "com.google.common.base.Ascii.isUpperCase(char)"], ["java.lang.String", "com.google.common.base.Ascii.truncate(java.lang.CharSequence, int, java.lang.String)"], ["boolean", "com.google.common.base.Ascii.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)"], ["boolean", "com.google.common.base.CaseFormat$StringConverter.equals(java.lang.Object)"], ["int", "com.google.common.base.CaseFormat$StringConverter.hashCode()"], ["java.lang.String", "com.google.common.base.CaseFormat$StringConverter.toString()"], ["com.google.common.base.CaseFormat[]", "com.google.common.base.CaseFormat.values()"], ["com.google.common.base.CaseFormat", "com.google.common.base.CaseFormat.valueOf(java.lang.String)"], ["java.lang.String", "com.google.common.base.CaseFormat.to(com.google.common.base.CaseFormat, java.lang.String)"], ["com.google.common.base.Converter<java.lang.String, java.lang.String>", "com.google.common.base.CaseFormat.converterTo(com.google.common.base.CaseFormat)"], ["java.lang.String", "com.google.common.base.CharMatcher$1.toString()"], ["boolean", "com.google.common.base.CharMatcher$And.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$And.toString()"], ["boolean", "com.google.common.base.CharMatcher$And.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$And.negate()"], ["boolean", "com.google.common.base.CharMatcher$Any.matches(char)"], ["int", "com.google.common.base.CharMatcher$Any.indexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$Any.indexIn(java.lang.CharSequence, int)"], ["int", "com.google.common.base.CharMatcher$Any.lastIndexIn(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$Any.matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$Any.matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$Any.removeFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$Any.replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$Any.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$Any.collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$Any.trimFrom(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$Any.countIn(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Any.and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Any.or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Any.negate()"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$Any.negate()"], ["com.google.common.base.CharMatcher$AnyOf", "com.google.common.base.CharMatcher$AnyOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$AnyOf.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$AnyOf.toString()"], ["boolean", "com.google.common.base.CharMatcher$AnyOf.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$AnyOf.negate()"], ["boolean", "com.google.common.base.CharMatcher$Ascii.matches(char)"], ["boolean", "com.google.common.base.CharMatcher$BitSetMatcher.matches(char)"], ["boolean", "com.google.common.base.CharMatcher$BreakingWhitespace.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$BreakingWhitespace.toString()"], ["boolean", "com.google.common.base.CharMatcher$BreakingWhitespace.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$BreakingWhitespace.negate()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$FastMatcher.precomputed()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$FastMatcher.negate()"], ["boolean", "com.google.common.base.CharMatcher$FastMatcher.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$FastMatcher.negate()"], ["boolean", "com.google.common.base.CharMatcher$ForPredicate.matches(char)"], ["boolean", "com.google.common.base.CharMatcher$ForPredicate.apply(java.lang.Character)"], ["java.lang.String", "com.google.common.base.CharMatcher$ForPredicate.toString()"], ["boolean", "com.google.common.base.CharMatcher$ForPredicate.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$ForPredicate.negate()"], ["boolean", "com.google.common.base.CharMatcher$InRange.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$InRange.toString()"], ["boolean", "com.google.common.base.CharMatcher$Is.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$Is.replaceFrom(java.lang.CharSequence, char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Is.and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Is.or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Is.negate()"], ["java.lang.String", "com.google.common.base.CharMatcher$Is.toString()"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$Is.negate()"], ["boolean", "com.google.common.base.CharMatcher$IsEither.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$IsEither.toString()"], ["boolean", "com.google.common.base.CharMatcher$IsNot.matches(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$IsNot.and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$IsNot.or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$IsNot.negate()"], ["java.lang.String", "com.google.common.base.CharMatcher$IsNot.toString()"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$IsNot.negate()"], ["boolean", "com.google.common.base.CharMatcher$JavaDigit.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$JavaDigit.toString()"], ["boolean", "com.google.common.base.CharMatcher$JavaDigit.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$JavaDigit.negate()"], ["boolean", "com.google.common.base.CharMatcher$JavaIsoControl.matches(char)"], ["boolean", "com.google.common.base.CharMatcher$JavaLetter.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$JavaLetter.toString()"], ["boolean", "com.google.common.base.CharMatcher$JavaLetter.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$JavaLetter.negate()"], ["boolean", "com.google.common.base.CharMatcher$JavaLetterOrDigit.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$JavaLetterOrDigit.toString()"], ["boolean", "com.google.common.base.CharMatcher$JavaLetterOrDigit.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$JavaLetterOrDigit.negate()"], ["boolean", "com.google.common.base.CharMatcher$JavaLowerCase.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$JavaLowerCase.toString()"], ["boolean", "com.google.common.base.CharMatcher$JavaLowerCase.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$JavaLowerCase.negate()"], ["boolean", "com.google.common.base.CharMatcher$JavaUpperCase.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$JavaUpperCase.toString()"], ["boolean", "com.google.common.base.CharMatcher$JavaUpperCase.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$JavaUpperCase.negate()"], ["java.lang.String", "com.google.common.base.CharMatcher$NamedFastMatcher.toString()"], ["boolean", "com.google.common.base.CharMatcher$Negated.matches(char)"], ["boolean", "com.google.common.base.CharMatcher$Negated.matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$Negated.matchesNoneOf(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$Negated.countIn(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$Negated.negate()"], ["java.lang.String", "com.google.common.base.CharMatcher$Negated.toString()"], ["boolean", "com.google.common.base.CharMatcher$Negated.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$Negated.negate()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$NegatedFastMatcher.precomputed()"], ["boolean", "com.google.common.base.CharMatcher$None.matches(char)"], ["int", "com.google.common.base.CharMatcher$None.indexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$None.indexIn(java.lang.CharSequence, int)"], ["int", "com.google.common.base.CharMatcher$None.lastIndexIn(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$None.matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher$None.matchesNoneOf(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.removeFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.trimFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher$None.trimTrailingFrom(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher$None.countIn(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$None.and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$None.or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher$None.negate()"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$None.negate()"], ["boolean", "com.google.common.base.CharMatcher$Or.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$Or.toString()"], ["boolean", "com.google.common.base.CharMatcher$Or.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$Or.negate()"], ["boolean", "com.google.common.base.CharMatcher$RangesMatcher.matches(char)"], ["java.lang.String", "com.google.common.base.CharMatcher$RangesMatcher.toString()"], ["boolean", "com.google.common.base.CharMatcher$RangesMatcher.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher$RangesMatcher.negate()"], ["boolean", "com.google.common.base.CharMatcher$Whitespace.matches(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.any()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.none()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.whitespace()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.breakingWhitespace()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.ascii()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.digit()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.javaDigit()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.javaLetter()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.javaLetterOrDigit()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.javaUpperCase()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.javaLowerCase()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.javaIsoControl()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.invisible()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.singleWidth()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.is(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.isNot(char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.anyOf(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.noneOf(java.lang.CharSequence)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.inRange(char, char)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.forPredicate(com.google.common.base.Predicate<? super java.lang.Character>)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.negate()"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.and(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.or(com.google.common.base.CharMatcher)"], ["com.google.common.base.CharMatcher", "com.google.common.base.CharMatcher.precomputed()"], ["boolean", "com.google.common.base.CharMatcher.matchesAnyOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)"], ["boolean", "com.google.common.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, int)"], ["int", "com.google.common.base.CharMatcher.lastIndexIn(java.lang.CharSequence)"], ["int", "com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.retainFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.CharMatcher.collapseFrom(java.lang.CharSequence, char)"], ["java.lang.String", "com.google.common.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence, char)"], ["boolean", "com.google.common.base.CharMatcher.apply(java.lang.Character)"], ["java.lang.String", "com.google.common.base.CharMatcher.toString()"], ["boolean", "com.google.common.base.CharMatcher.apply(java.lang.Object)"], ["java.util.function.Predicate", "com.google.common.base.CharMatcher.negate()"], ["boolean", "com.google.common.base.Converter$1$1.hasNext()"], ["B", "com.google.common.base.Converter$1$1.next()"], ["void", "com.google.common.base.Converter$1$1.remove()"], ["boolean", "com.google.common.base.Converter$ConverterComposition.equals(java.lang.Object)"], ["int", "com.google.common.base.Converter$ConverterComposition.hashCode()"], ["java.lang.String", "com.google.common.base.Converter$ConverterComposition.toString()"], ["boolean", "com.google.common.base.Converter$FunctionBasedConverter.equals(java.lang.Object)"], ["int", "com.google.common.base.Converter$FunctionBasedConverter.hashCode()"], ["java.lang.String", "com.google.common.base.Converter$FunctionBasedConverter.toString()"], ["java.lang.String", "com.google.common.base.Converter$IdentityConverter.toString()"], ["com.google.common.base.Converter", "com.google.common.base.Converter$IdentityConverter.reverse()"], ["com.google.common.base.Converter<A, B>", "com.google.common.base.Converter$ReverseConverter.reverse()"], ["boolean", "com.google.common.base.Converter$ReverseConverter.equals(java.lang.Object)"], ["int", "com.google.common.base.Converter$ReverseConverter.hashCode()"], ["java.lang.String", "com.google.common.base.Converter$ReverseConverter.toString()"], ["B", "com.google.common.base.Converter.convert(A)"], ["com.google.common.base.Converter<B, A>", "com.google.common.base.Converter.reverse()"], ["<C> com.google.common.base.Converter<A, C>", "com.google.common.base.Converter.andThen(com.google.common.base.Converter<B, C>)"], ["B", "com.google.common.base.Converter.apply(A)"], ["boolean", "com.google.common.base.Converter.equals(java.lang.Object)"], ["<A, B> com.google.common.base.Converter<A, B>", "com.google.common.base.Converter.from(com.google.common.base.Function<? super A, ? extends B>, com.google.common.base.Function<? super B, ? extends A>)"], ["<T> com.google.common.base.Converter<T, T>", "com.google.common.base.Converter.identity()"], ["<T> T", "com.google.common.base.Defaults.defaultValue(java.lang.Class<T>)"], ["boolean", "com.google.common.base.Enums$StringConverter.equals(java.lang.Object)"], ["int", "com.google.common.base.Enums$StringConverter.hashCode()"], ["java.lang.String", "com.google.common.base.Enums$StringConverter.toString()"], ["java.lang.reflect.Field", "com.google.common.base.Enums.getField(java.lang.Enum<?>)"], ["<T extends java.lang.Enum<T>> com.google.common.base.Optional<T>", "com.google.common.base.Enums.getIfPresent(java.lang.Class<T>, java.lang.String)"], ["<T extends java.lang.Enum<T>> com.google.common.base.Converter<java.lang.String, T>", "com.google.common.base.Enums.stringConverter(java.lang.Class<T>)"], ["boolean", "com.google.common.base.Equivalence$EquivalentToPredicate.apply(T)"], ["boolean", "com.google.common.base.Equivalence$EquivalentToPredicate.equals(java.lang.Object)"], ["int", "com.google.common.base.Equivalence$EquivalentToPredicate.hashCode()"], ["java.lang.String", "com.google.common.base.Equivalence$EquivalentToPredicate.toString()"], ["T", "com.google.common.base.Equivalence$Wrapper.get()"], ["boolean", "com.google.common.base.Equivalence$Wrapper.equals(java.lang.Object)"], ["int", "com.google.common.base.Equivalence$Wrapper.hashCode()"], ["java.lang.String", "com.google.common.base.Equivalence$Wrapper.toString()"], ["boolean", "com.google.common.base.Equivalence.equivalent(T, T)"], ["boolean", "com.google.common.base.Equivalence.test(T, T)"], ["int", "com.google.common.base.Equivalence.hash(T)"], ["<F> com.google.common.base.Equivalence<F>", "com.google.common.base.Equivalence.onResultOf(com.google.common.base.Function<F, ? extends T>)"], ["<S extends T> com.google.common.base.Equivalence$Wrapper<S>", "com.google.common.base.Equivalence.wrap(S)"], ["<S extends T> com.google.common.base.Equivalence<java.lang.Iterable<S>>", "com.google.common.base.Equivalence.pairwise()"], ["com.google.common.base.FinalizableReferenceQueue", "com.google.common.base.FinalizableReferenceQueue()"], ["void", "com.google.common.base.FinalizableReferenceQueue.close()"], ["boolean", "com.google.common.base.FunctionalEquivalence.equals(java.lang.Object)"], ["int", "com.google.common.base.FunctionalEquivalence.hashCode()"], ["java.lang.String", "com.google.common.base.FunctionalEquivalence.toString()"], ["com.google.common.base.Functions$ConstantFunction", "com.google.common.base.Functions$ConstantFunction(E)"], ["E", "com.google.common.base.Functions$ConstantFunction.apply(java.lang.Object)"], ["boolean", "com.google.common.base.Functions$ConstantFunction.equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$ConstantFunction.hashCode()"], ["java.lang.String", "com.google.common.base.Functions$ConstantFunction.toString()"], ["V", "com.google.common.base.Functions$ForMapWithDefault.apply(K)"], ["boolean", "com.google.common.base.Functions$ForMapWithDefault.equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$ForMapWithDefault.hashCode()"], ["java.lang.String", "com.google.common.base.Functions$ForMapWithDefault.toString()"], ["com.google.common.base.Functions$FunctionComposition", "com.google.common.base.Functions$FunctionComposition(com.google.common.base.Function<B, C>, com.google.common.base.Function<A, ? extends B>)"], ["C", "com.google.common.base.Functions$FunctionComposition.apply(A)"], ["boolean", "com.google.common.base.Functions$FunctionComposition.equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$FunctionComposition.hashCode()"], ["java.lang.String", "com.google.common.base.Functions$FunctionComposition.toString()"], ["V", "com.google.common.base.Functions$FunctionForMapNoDefault.apply(K)"], ["boolean", "com.google.common.base.Functions$FunctionForMapNoDefault.equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$FunctionForMapNoDefault.hashCode()"], ["java.lang.String", "com.google.common.base.Functions$FunctionForMapNoDefault.toString()"], ["com.google.common.base.Functions$IdentityFunction[]", "com.google.common.base.Functions$IdentityFunction.values()"], ["com.google.common.base.Functions$IdentityFunction", "com.google.common.base.Functions$IdentityFunction.valueOf(java.lang.String)"], ["java.lang.Object", "com.google.common.base.Functions$IdentityFunction.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Functions$IdentityFunction.toString()"], ["java.lang.Boolean", "com.google.common.base.Functions$PredicateFunction.apply(T)"], ["boolean", "com.google.common.base.Functions$PredicateFunction.equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$PredicateFunction.hashCode()"], ["java.lang.String", "com.google.common.base.Functions$PredicateFunction.toString()"], ["java.lang.Object", "com.google.common.base.Functions$PredicateFunction.apply(java.lang.Object)"], ["T", "com.google.common.base.Functions$SupplierFunction.apply(java.lang.Object)"], ["boolean", "com.google.common.base.Functions$SupplierFunction.equals(java.lang.Object)"], ["int", "com.google.common.base.Functions$SupplierFunction.hashCode()"], ["java.lang.String", "com.google.common.base.Functions$SupplierFunction.toString()"], ["com.google.common.base.Functions$ToStringFunction[]", "com.google.common.base.Functions$ToStringFunction.values()"], ["com.google.common.base.Functions$ToStringFunction", "com.google.common.base.Functions$ToStringFunction.valueOf(java.lang.String)"], ["java.lang.String", "com.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Functions$ToStringFunction.toString()"], ["java.lang.Object", "com.google.common.base.Functions$ToStringFunction.apply(java.lang.Object)"], ["com.google.common.base.Function<java.lang.Object, java.lang.String>", "com.google.common.base.Functions.toStringFunction()"], ["<E> com.google.common.base.Function<E, E>", "com.google.common.base.Functions.identity()"], ["<K, V> com.google.common.base.Function<K, V>", "com.google.common.base.Functions.forMap(java.util.Map<K, V>)"], ["<K, V> com.google.common.base.Function<K, V>", "com.google.common.base.Functions.forMap(java.util.Map<K, ? extends V>, V)"], ["<A, B, C> com.google.common.base.Function<A, C>", "com.google.common.base.Functions.compose(com.google.common.base.Function<B, C>, com.google.common.base.Function<A, ? extends B>)"], ["<T> com.google.common.base.Function<T, java.lang.Boolean>", "com.google.common.base.Functions.forPredicate(com.google.common.base.Predicate<T>)"], ["<E> com.google.common.base.Function<java.lang.Object, E>", "com.google.common.base.Functions.constant(E)"], ["<T> com.google.common.base.Function<java.lang.Object, T>", "com.google.common.base.Functions.forSupplier(com.google.common.base.Supplier<T>)"], ["java.lang.String", "com.google.common.base.JdkPattern.toString()"], ["int", "com.google.common.base.JdkPattern.hashCode()"], ["boolean", "com.google.common.base.JdkPattern.equals(java.lang.Object)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner$1.useForNull(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner$1.skipNulls()"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$2.appendTo(A, java.util.Iterator<?>)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner$2.useForNull(java.lang.String)"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner$2.withKeyValueSeparator(java.lang.String)"], ["int", "com.google.common.base.Joiner$3.size()"], ["java.lang.Object", "com.google.common.base.Joiner$3.get(int)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Map<?, ?>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Map<?, ?>)"], ["java.lang.String", "com.google.common.base.Joiner$MapJoiner.join(java.util.Map<?, ?>)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$MapJoiner.appendTo(A, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner$MapJoiner.appendTo(A, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "com.google.common.base.Joiner$MapJoiner.join(java.lang.Iterable<? extends java.util.Map$Entry<?, ?>>)"], ["java.lang.String", "com.google.common.base.Joiner$MapJoiner.join(java.util.Iterator<? extends java.util.Map$Entry<?, ?>>)"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner$MapJoiner.useForNull(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.on(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.on(char)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.lang.Iterable<?>)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.util.Iterator<?>)"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.lang.Object[])"], ["<A extends java.lang.Appendable> A", "com.google.common.base.Joiner.appendTo(A, java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable<?>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.util.Iterator<?>)"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object[])"], ["java.lang.StringBuilder", "com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Object, java.lang.Object, java.lang.Object...)"], ["java.lang.String", "com.google.common.base.Joiner.join(java.lang.Iterable<?>)"], ["java.lang.String", "com.google.common.base.Joiner.join(java.util.Iterator<?>)"], ["java.lang.String", "com.google.common.base.Joiner.join(java.lang.Object[])"], ["java.lang.String", "com.google.common.base.Joiner.join(java.lang.Object, java.lang.Object, java.lang.Object...)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.useForNull(java.lang.String)"], ["com.google.common.base.Joiner", "com.google.common.base.Joiner.skipNulls()"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner.withKeyValueSeparator(char)"], ["com.google.common.base.Joiner$MapJoiner", "com.google.common.base.Joiner.withKeyValueSeparator(java.lang.String)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.omitNullValues()"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, java.lang.Object)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, boolean)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, char)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, double)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, float)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, int)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.add(java.lang.String, long)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(java.lang.Object)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(boolean)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(char)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(double)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(float)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(int)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects$ToStringHelper.addValue(long)"], ["java.lang.String", "com.google.common.base.MoreObjects$ToStringHelper.toString()"], ["<T> T", "com.google.common.base.MoreObjects.firstNonNull(T, T)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects.toStringHelper(java.lang.Object)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects.toStringHelper(java.lang.Class<?>)"], ["com.google.common.base.MoreObjects$ToStringHelper", "com.google.common.base.MoreObjects.toStringHelper(java.lang.String)"], ["boolean", "com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.base.Objects.hashCode(java.lang.Object...)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.absent()"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.of(T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.fromNullable(T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.base.Optional.fromJavaUtil(java.util.Optional<T>)"], ["<T> java.util.Optional<T>", "com.google.common.base.Optional.toJavaUtil(com.google.common.base.Optional<T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.base.Optional.presentInstances(java.lang.Iterable<? extends com.google.common.base.Optional<? extends T>>)"], ["boolean", "com.google.common.base.PairwiseEquivalence.equals(java.lang.Object)"], ["int", "com.google.common.base.PairwiseEquivalence.hashCode()"], ["java.lang.String", "com.google.common.base.PairwiseEquivalence.toString()"], ["com.google.common.base.CommonPattern", "com.google.common.base.Platform$JdkPatternCompiler.compile(java.lang.String)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object...)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, char)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, int)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, long)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, char, char)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, char, int)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, char, long)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, char, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, int, char)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, int, int)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, int, long)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, int, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, long, char)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, long, int)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, long, long)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, long, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, char)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, int)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, long)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkArgument(boolean, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object...)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, char)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, int)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, long)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, char, char)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, char, int)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, char, long)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, char, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, int, char)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, int, int)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, int, long)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, int, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, long, char)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, long, int)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, long, long)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, long, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object, char)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object, int)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object, long)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Preconditions.checkState(boolean, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object...)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, char)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, int)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, long)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, char, char)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, char, int)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, char, long)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, char, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, int, char)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, int, int)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, int, long)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, int, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, long, char)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, long, int)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, long, long)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, long, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object, char)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object, int)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object, long)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)"], ["<T> T", "com.google.common.base.Preconditions.checkNotNull(T, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"], ["int", "com.google.common.base.Preconditions.checkElementIndex(int, int)"], ["int", "com.google.common.base.Preconditions.checkElementIndex(int, int, java.lang.String)"], ["int", "com.google.common.base.Preconditions.checkPositionIndex(int, int)"], ["int", "com.google.common.base.Preconditions.checkPositionIndex(int, int, java.lang.String)"], ["void", "com.google.common.base.Preconditions.checkPositionIndexes(int, int, int)"], ["default", "com.google.common.base.Predicate.boolean test(T)"], ["boolean", "com.google.common.base.Predicates$AndPredicate.apply(T)"], ["int", "com.google.common.base.Predicates$AndPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$AndPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$AndPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$CompositionPredicate.apply(A)"], ["boolean", "com.google.common.base.Predicates$CompositionPredicate.equals(java.lang.Object)"], ["int", "com.google.common.base.Predicates$CompositionPredicate.hashCode()"], ["java.lang.String", "com.google.common.base.Predicates$CompositionPredicate.toString()"], ["java.lang.String", "com.google.common.base.Predicates$ContainsPatternFromStringPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.CharSequence)"], ["int", "com.google.common.base.Predicates$ContainsPatternPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$ContainsPatternPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ContainsPatternPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$ContainsPatternPredicate.apply(java.lang.Object)"], ["boolean", "com.google.common.base.Predicates$InPredicate.apply(T)"], ["boolean", "com.google.common.base.Predicates$InPredicate.equals(java.lang.Object)"], ["int", "com.google.common.base.Predicates$InPredicate.hashCode()"], ["java.lang.String", "com.google.common.base.Predicates$InPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$InstanceOfPredicate.apply(java.lang.Object)"], ["int", "com.google.common.base.Predicates$InstanceOfPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$InstanceOfPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$InstanceOfPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$IsEqualToPredicate.apply(T)"], ["int", "com.google.common.base.Predicates$IsEqualToPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$IsEqualToPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$IsEqualToPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$NotPredicate.apply(T)"], ["int", "com.google.common.base.Predicates$NotPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$NotPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$NotPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$1.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$1.toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$2.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$2.toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$3.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$3.toString()"], ["boolean", "com.google.common.base.Predicates$ObjectPredicate$4.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$ObjectPredicate$4.toString()"], ["com.google.common.base.Predicates$ObjectPredicate[]", "com.google.common.base.Predicates$ObjectPredicate.values()"], ["com.google.common.base.Predicates$ObjectPredicate", "com.google.common.base.Predicates$ObjectPredicate.valueOf(java.lang.String)"], ["boolean", "com.google.common.base.Predicates$OrPredicate.apply(T)"], ["int", "com.google.common.base.Predicates$OrPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$OrPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$OrPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$SubtypeOfPredicate.apply(java.lang.Class<?>)"], ["int", "com.google.common.base.Predicates$SubtypeOfPredicate.hashCode()"], ["boolean", "com.google.common.base.Predicates$SubtypeOfPredicate.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.base.Predicates$SubtypeOfPredicate.toString()"], ["boolean", "com.google.common.base.Predicates$SubtypeOfPredicate.apply(java.lang.Object)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.alwaysTrue()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.alwaysFalse()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.isNull()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.notNull()"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.not(com.google.common.base.Predicate<T>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.and(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.and(com.google.common.base.Predicate<? super T>...)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.and(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.or(java.lang.Iterable<? extends com.google.common.base.Predicate<? super T>>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.or(com.google.common.base.Predicate<? super T>...)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.or(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.equalTo(T)"], ["<T> com.google.common.base.Predicate<T>", "com.google.common.base.Predicates.in(java.util.Collection<? extends T>)"], ["<A, B> com.google.common.base.Predicate<A>", "com.google.common.base.Predicates.compose(com.google.common.base.Predicate<B>, com.google.common.base.Function<A, ? extends B>)"], ["boolean", "com.google.common.base.Present.isPresent()"], ["T", "com.google.common.base.Present.get()"], ["T", "com.google.common.base.Present.or(T)"], ["T", "com.google.common.base.Present.or(com.google.common.base.Supplier<? extends T>)"], ["T", "com.google.common.base.Present.orNull()"], ["<V> com.google.common.base.Optional<V>", "com.google.common.base.Present.transform(com.google.common.base.Function<? super T, V>)"], ["boolean", "com.google.common.base.Present.equals(java.lang.Object)"], ["int", "com.google.common.base.Present.hashCode()"], ["java.lang.String", "com.google.common.base.Present.toString()"], ["boolean", "com.google.common.base.SmallCharMatcher.matches(char)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$1.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$1.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "com.google.common.base.Splitter$2$1.separatorStart(int)"], ["int", "com.google.common.base.Splitter$2$1.separatorEnd(int)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$2.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$2.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "com.google.common.base.Splitter$3$1.separatorStart(int)"], ["int", "com.google.common.base.Splitter$3$1.separatorEnd(int)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$3.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$3.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["int", "com.google.common.base.Splitter$4$1.separatorStart(int)"], ["int", "com.google.common.base.Splitter$4$1.separatorEnd(int)"], ["com.google.common.base.Splitter$SplittingIterator", "com.google.common.base.Splitter$4.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.util.Iterator", "com.google.common.base.Splitter$4.iterator(com.google.common.base.Splitter, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.Splitter$5.toString()"], ["java.util.Map<java.lang.String, java.lang.String>", "com.google.common.base.Splitter$MapSplitter.split(java.lang.CharSequence)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(char)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(com.google.common.base.CharMatcher)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(java.lang.String)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.on(java.util.regex.Pattern)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.onPattern(java.lang.String)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.fixedLength(int)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.omitEmptyStrings()"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.limit(int)"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.trimResults()"], ["com.google.common.base.Splitter", "com.google.common.base.Splitter.trimResults(com.google.common.base.CharMatcher)"], ["com.google.common.base.Splitter$MapSplitter", "com.google.common.base.Splitter.withKeyValueSeparator(java.lang.String)"], ["com.google.common.base.Splitter$MapSplitter", "com.google.common.base.Splitter.withKeyValueSeparator(char)"], ["com.google.common.base.Splitter$MapSplitter", "com.google.common.base.Splitter.withKeyValueSeparator(com.google.common.base.Splitter)"], ["com.google.common.base.StandardSystemProperty[]", "com.google.common.base.StandardSystemProperty.values()"], ["com.google.common.base.StandardSystemProperty", "com.google.common.base.StandardSystemProperty.valueOf(java.lang.String)"], ["java.lang.String", "com.google.common.base.StandardSystemProperty.key()"], ["java.lang.String", "com.google.common.base.StandardSystemProperty.value()"], ["java.lang.String", "com.google.common.base.StandardSystemProperty.toString()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createUnstarted()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createUnstarted(com.google.common.base.Ticker)"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createStarted()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.createStarted(com.google.common.base.Ticker)"], ["boolean", "com.google.common.base.Stopwatch.isRunning()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.start()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.stop()"], ["com.google.common.base.Stopwatch", "com.google.common.base.Stopwatch.reset()"], ["long", "com.google.common.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)"], ["java.time.Duration", "com.google.common.base.Stopwatch.elapsed()"], ["java.lang.String", "com.google.common.base.Stopwatch.toString()"], ["java.lang.String", "com.google.common.base.Strings.nullToEmpty(java.lang.String)"], ["java.lang.String", "com.google.common.base.Strings.emptyToNull(java.lang.String)"], ["boolean", "com.google.common.base.Strings.isNullOrEmpty(java.lang.String)"], ["java.lang.String", "com.google.common.base.Strings.padStart(java.lang.String, int, char)"], ["java.lang.String", "com.google.common.base.Strings.padEnd(java.lang.String, int, char)"], ["java.lang.String", "com.google.common.base.Strings.repeat(java.lang.String, int)"], ["java.lang.String", "com.google.common.base.Strings.commonPrefix(java.lang.CharSequence, java.lang.CharSequence)"], ["java.lang.String", "com.google.common.base.Strings.commonSuffix(java.lang.CharSequence, java.lang.CharSequence)"], ["T", "com.google.common.base.Suppliers$ExpiringMemoizingSupplier.get()"], ["java.lang.String", "com.google.common.base.Suppliers$ExpiringMemoizingSupplier.toString()"], ["T", "com.google.common.base.Suppliers$MemoizingSupplier.get()"], ["java.lang.String", "com.google.common.base.Suppliers$MemoizingSupplier.toString()"], ["T", "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier.get()"], ["java.lang.String", "com.google.common.base.Suppliers$NonSerializableMemoizingSupplier.toString()"], ["T", "com.google.common.base.Suppliers$SupplierComposition.get()"], ["boolean", "com.google.common.base.Suppliers$SupplierComposition.equals(java.lang.Object)"], ["int", "com.google.common.base.Suppliers$SupplierComposition.hashCode()"], ["java.lang.String", "com.google.common.base.Suppliers$SupplierComposition.toString()"], ["com.google.common.base.Suppliers$SupplierFunctionImpl[]", "com.google.common.base.Suppliers$SupplierFunctionImpl.values()"], ["com.google.common.base.Suppliers$SupplierFunctionImpl", "com.google.common.base.Suppliers$SupplierFunctionImpl.valueOf(java.lang.String)"], ["java.lang.Object", "com.google.common.base.Suppliers$SupplierFunctionImpl.apply(com.google.common.base.Supplier<java.lang.Object>)"], ["java.lang.String", "com.google.common.base.Suppliers$SupplierFunctionImpl.toString()"], ["java.lang.Object", "com.google.common.base.Suppliers$SupplierFunctionImpl.apply(java.lang.Object)"], ["T", "com.google.common.base.Suppliers$SupplierOfInstance.get()"], ["boolean", "com.google.common.base.Suppliers$SupplierOfInstance.equals(java.lang.Object)"], ["int", "com.google.common.base.Suppliers$SupplierOfInstance.hashCode()"], ["java.lang.String", "com.google.common.base.Suppliers$SupplierOfInstance.toString()"], ["T", "com.google.common.base.Suppliers$ThreadSafeSupplier.get()"], ["java.lang.String", "com.google.common.base.Suppliers$ThreadSafeSupplier.toString()"], ["<F, T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.compose(com.google.common.base.Function<? super F, T>, com.google.common.base.Supplier<F>)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.memoize(com.google.common.base.Supplier<T>)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.memoizeWithExpiration(com.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.ofInstance(T)"], ["<T> com.google.common.base.Supplier<T>", "com.google.common.base.Suppliers.synchronizedSupplier(com.google.common.base.Supplier<T>)"], ["<T> com.google.common.base.Function<com.google.common.base.Supplier<T>, T>", "com.google.common.base.Suppliers.supplierFunction()"], ["java.lang.StackTraceElement", "com.google.common.base.Throwables$1.get(int)"], ["int", "com.google.common.base.Throwables$1.size()"], ["java.lang.Object", "com.google.common.base.Throwables$1.get(int)"], ["<X extends java.lang.Throwable> void", "com.google.common.base.Throwables.throwIfInstanceOf(java.lang.Throwable, java.lang.Class<X>)"], ["<X extends java.lang.Throwable> void", "com.google.common.base.Throwables.propagateIfInstanceOf(java.lang.Throwable, java.lang.Class<X>)"], ["void", "com.google.common.base.Throwables.throwIfUnchecked(java.lang.Throwable)"], ["void", "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable)"], ["<X extends java.lang.Throwable> void", "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X>)"], ["<X1 extends java.lang.Throwable, X2 extends java.lang.Throwable> void", "com.google.common.base.Throwables.propagateIfPossible(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)"], ["java.lang.RuntimeException", "com.google.common.base.Throwables.propagate(java.lang.Throwable)"], ["java.lang.Throwable", "com.google.common.base.Throwables.getRootCause(java.lang.Throwable)"], ["<X extends java.lang.Throwable> X", "com.google.common.base.Throwables.getCauseAs(java.lang.Throwable, java.lang.Class<X>)"], ["java.lang.String", "com.google.common.base.Throwables.getStackTraceAsString(java.lang.Throwable)"], ["boolean", "com.google.common.base.Throwables.lazyStackTraceIsLazy()"], ["long", "com.google.common.base.Ticker$1.read()"], ["com.google.common.base.Ticker", "com.google.common.base.Ticker.systemTicker()"], ["int", "com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)"], ["boolean", "com.google.common.base.Utf8.isWellFormed(byte[])"], ["boolean", "com.google.common.base.Utf8.isWellFormed(byte[], int, int)"], ["void", "com.google.common.base.Verify.verify(boolean)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object...)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, char)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, int)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, long)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, char, char)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, int, char)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, long, char)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object, char)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, char, int)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, int, int)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, long, int)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object, int)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, char, long)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, int, long)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, long, long)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object, long)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, char, java.lang.Object)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, int, java.lang.Object)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, long, java.lang.Object)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.base.Verify.verify(boolean, java.lang.String, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)"], ["<T> T", "com.google.common.base.Verify.verifyNotNull(T)"], ["<T> T", "com.google.common.base.Verify.verifyNotNull(T, java.lang.String, java.lang.Object...)"], ["com.google.common.base.VerifyException", "com.google.common.base.VerifyException()"], ["com.google.common.base.VerifyException", "com.google.common.base.VerifyException(java.lang.String)"], ["com.google.common.base.VerifyException", "com.google.common.base.VerifyException(java.lang.Throwable)"], ["com.google.common.base.VerifyException", "com.google.common.base.VerifyException(java.lang.String, java.lang.Throwable)"], ["void", "com.google.common.base.internal.Finalizer.startFinalizer(java.lang.Class<?>, java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.ref.PhantomReference<java.lang.Object>)"], ["void", "com.google.common.base.internal.Finalizer.run()"], ["com.google.common.cache.AbstractCache$SimpleStatsCounter", "com.google.common.cache.AbstractCache$SimpleStatsCounter()"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordHits(int)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordMisses(int)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadSuccess(long)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordLoadException(long)"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.recordEviction()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.AbstractCache$SimpleStatsCounter.snapshot()"], ["void", "com.google.common.cache.AbstractCache$SimpleStatsCounter.incrementBy(com.google.common.cache.AbstractCache$StatsCounter)"], ["V", "com.google.common.cache.AbstractCache.get(K, java.util.concurrent.Callable<? extends V>)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.AbstractCache.getAllPresent(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.AbstractCache.put(K, V)"], ["void", "com.google.common.cache.AbstractCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.cache.AbstractCache.cleanUp()"], ["long", "com.google.common.cache.AbstractCache.size()"], ["void", "com.google.common.cache.AbstractCache.invalidate(java.lang.Object)"], ["void", "com.google.common.cache.AbstractCache.invalidateAll(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.AbstractCache.invalidateAll()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.AbstractCache.stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.cache.AbstractCache.asMap()"], ["V", "com.google.common.cache.AbstractLoadingCache.getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.AbstractLoadingCache.getAll(java.lang.Iterable<? extends K>)"], ["V", "com.google.common.cache.AbstractLoadingCache.apply(K)"], ["void", "com.google.common.cache.AbstractLoadingCache.refresh(K)"], ["void", "com.google.common.cache.CacheBuilder$1.recordHits(int)"], ["void", "com.google.common.cache.CacheBuilder$1.recordMisses(int)"], ["void", "com.google.common.cache.CacheBuilder$1.recordLoadSuccess(long)"], ["void", "com.google.common.cache.CacheBuilder$1.recordLoadException(long)"], ["void", "com.google.common.cache.CacheBuilder$1.recordEviction()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheBuilder$1.snapshot()"], ["com.google.common.cache.AbstractCache$StatsCounter", "com.google.common.cache.CacheBuilder$2.get()"], ["java.lang.Object", "com.google.common.cache.CacheBuilder$2.get()"], ["long", "com.google.common.cache.CacheBuilder$3.read()"], ["com.google.common.cache.CacheBuilder$NullListener[]", "com.google.common.cache.CacheBuilder$NullListener.values()"], ["com.google.common.cache.CacheBuilder$NullListener", "com.google.common.cache.CacheBuilder$NullListener.valueOf(java.lang.String)"], ["void", "com.google.common.cache.CacheBuilder$NullListener.onRemoval(com.google.common.cache.RemovalNotification<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.CacheBuilder$OneWeigher[]", "com.google.common.cache.CacheBuilder$OneWeigher.values()"], ["com.google.common.cache.CacheBuilder$OneWeigher", "com.google.common.cache.CacheBuilder$OneWeigher.valueOf(java.lang.String)"], ["int", "com.google.common.cache.CacheBuilder$OneWeigher.weigh(java.lang.Object, java.lang.Object)"], ["com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "com.google.common.cache.CacheBuilder.newBuilder()"], ["com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "com.google.common.cache.CacheBuilder.from(com.google.common.cache.CacheBuilderSpec)"], ["com.google.common.cache.CacheBuilder<java.lang.Object, java.lang.Object>", "com.google.common.cache.CacheBuilder.from(java.lang.String)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.initialCapacity(int)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.concurrencyLevel(int)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.maximumSize(long)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.maximumWeight(long)"], ["<K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1>", "com.google.common.cache.CacheBuilder.weigher(com.google.common.cache.Weigher<? super K1, ? super V1>)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.weakKeys()"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.weakValues()"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.softValues()"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.expireAfterWrite(long, java.util.concurrent.TimeUnit)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.expireAfterAccess(long, java.util.concurrent.TimeUnit)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.refreshAfterWrite(long, java.util.concurrent.TimeUnit)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.ticker(com.google.common.base.Ticker)"], ["<K1 extends K, V1 extends V> com.google.common.cache.CacheBuilder<K1, V1>", "com.google.common.cache.CacheBuilder.removalListener(com.google.common.cache.RemovalListener<? super K1, ? super V1>)"], ["com.google.common.cache.CacheBuilder<K, V>", "com.google.common.cache.CacheBuilder.recordStats()"], ["<K1 extends K, V1 extends V> com.google.common.cache.LoadingCache<K1, V1>", "com.google.common.cache.CacheBuilder.build(com.google.common.cache.CacheLoader<? super K1, V1>)"], ["<K1 extends K, V1 extends V> com.google.common.cache.Cache<K1, V1>", "com.google.common.cache.CacheBuilder.build()"], ["java.lang.String", "com.google.common.cache.CacheBuilder.toString()"], ["void", "com.google.common.cache.CacheBuilderSpec$DurationParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "com.google.common.cache.CacheBuilderSpec$IntegerParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec$KeyStrengthParser", "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser(com.google.common.cache.LocalCache$Strength)"], ["void", "com.google.common.cache.CacheBuilderSpec$KeyStrengthParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "com.google.common.cache.CacheBuilderSpec$LongParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["void", "com.google.common.cache.CacheBuilderSpec$RecordStatsParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec$ValueStrengthParser", "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser(com.google.common.cache.LocalCache$Strength)"], ["void", "com.google.common.cache.CacheBuilderSpec$ValueStrengthParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec", "com.google.common.cache.CacheBuilderSpec.parse(java.lang.String)"], ["com.google.common.cache.CacheBuilderSpec", "com.google.common.cache.CacheBuilderSpec.disableCaching()"], ["java.lang.String", "com.google.common.cache.CacheBuilderSpec.toParsableString()"], ["java.lang.String", "com.google.common.cache.CacheBuilderSpec.toString()"], ["int", "com.google.common.cache.CacheBuilderSpec.hashCode()"], ["boolean", "com.google.common.cache.CacheBuilderSpec.equals(java.lang.Object)"], ["V", "com.google.common.cache.CacheLoader$1$1.call()"], ["V", "com.google.common.cache.CacheLoader$1.load(K)"], ["java.util.Map<K, V>", "com.google.common.cache.CacheLoader$1.loadAll(java.lang.Iterable<? extends K>)"], ["com.google.common.cache.CacheLoader$FunctionToCacheLoader", "com.google.common.cache.CacheLoader$FunctionToCacheLoader(com.google.common.base.Function<K, V>)"], ["V", "com.google.common.cache.CacheLoader$FunctionToCacheLoader.load(K)"], ["com.google.common.cache.CacheLoader$InvalidCacheLoadException", "com.google.common.cache.CacheLoader$InvalidCacheLoadException(java.lang.String)"], ["com.google.common.cache.CacheLoader$SupplierToCacheLoader", "com.google.common.cache.CacheLoader$SupplierToCacheLoader(com.google.common.base.Supplier<V>)"], ["V", "com.google.common.cache.CacheLoader$SupplierToCacheLoader.load(java.lang.Object)"], ["java.util.Map<K, V>", "com.google.common.cache.CacheLoader.loadAll(java.lang.Iterable<? extends K>)"], ["<K, V> com.google.common.cache.CacheLoader<K, V>", "com.google.common.cache.CacheLoader.from(com.google.common.base.Function<K, V>)"], ["<V> com.google.common.cache.CacheLoader<java.lang.Object, V>", "com.google.common.cache.CacheLoader.from(com.google.common.base.Supplier<V>)"], ["<K, V> com.google.common.cache.CacheLoader<K, V>", "com.google.common.cache.CacheLoader.asyncReloading(com.google.common.cache.CacheLoader<K, V>, java.util.concurrent.Executor)"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheStats(long, long, long, long, long, long)"], ["long", "com.google.common.cache.CacheStats.requestCount()"], ["long", "com.google.common.cache.CacheStats.hitCount()"], ["double", "com.google.common.cache.CacheStats.hitRate()"], ["long", "com.google.common.cache.CacheStats.missCount()"], ["double", "com.google.common.cache.CacheStats.missRate()"], ["long", "com.google.common.cache.CacheStats.loadCount()"], ["long", "com.google.common.cache.CacheStats.loadSuccessCount()"], ["long", "com.google.common.cache.CacheStats.loadExceptionCount()"], ["double", "com.google.common.cache.CacheStats.loadExceptionRate()"], ["long", "com.google.common.cache.CacheStats.totalLoadTime()"], ["double", "com.google.common.cache.CacheStats.averageLoadPenalty()"], ["long", "com.google.common.cache.CacheStats.evictionCount()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheStats.minus(com.google.common.cache.CacheStats)"], ["com.google.common.cache.CacheStats", "com.google.common.cache.CacheStats.plus(com.google.common.cache.CacheStats)"], ["int", "com.google.common.cache.CacheStats.hashCode()"], ["boolean", "com.google.common.cache.CacheStats.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.cache.CacheStats.toString()"], ["V", "com.google.common.cache.ForwardingCache.getIfPresent(java.lang.Object)"], ["V", "com.google.common.cache.ForwardingCache.get(K, java.util.concurrent.Callable<? extends V>)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.ForwardingCache.getAllPresent(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.ForwardingCache.put(K, V)"], ["void", "com.google.common.cache.ForwardingCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.cache.ForwardingCache.invalidate(java.lang.Object)"], ["void", "com.google.common.cache.ForwardingCache.invalidateAll(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.ForwardingCache.invalidateAll()"], ["long", "com.google.common.cache.ForwardingCache.size()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.ForwardingCache.stats()"], ["java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.cache.ForwardingCache.asMap()"], ["void", "com.google.common.cache.ForwardingCache.cleanUp()"], ["V", "com.google.common.cache.ForwardingLoadingCache.get(K)"], ["V", "com.google.common.cache.ForwardingLoadingCache.getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.ForwardingLoadingCache.getAll(java.lang.Iterable<? extends K>)"], ["V", "com.google.common.cache.ForwardingLoadingCache.apply(K)"], ["void", "com.google.common.cache.ForwardingLoadingCache.refresh(K)"], ["java.lang.Object", "com.google.common.cache.LocalCache$1.get()"], ["int", "com.google.common.cache.LocalCache$1.getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$1.getEntry()"], ["com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, java.lang.Object, com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["boolean", "com.google.common.cache.LocalCache$1.isLoading()"], ["boolean", "com.google.common.cache.LocalCache$1.isActive()"], ["java.lang.Object", "com.google.common.cache.LocalCache$1.waitForValue()"], ["void", "com.google.common.cache.LocalCache$1.notifyNewValue(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$2.offer(java.lang.Object)"], ["java.lang.Object", "com.google.common.cache.LocalCache$2.peek()"], ["java.lang.Object", "com.google.common.cache.LocalCache$2.poll()"], ["int", "com.google.common.cache.LocalCache$2.size()"], ["int", "com.google.common.cache.LocalCache$AbstractCacheSet.size()"], ["boolean", "com.google.common.cache.LocalCache$AbstractCacheSet.isEmpty()"], ["void", "com.google.common.cache.LocalCache$AbstractCacheSet.clear()"], ["java.lang.Object[]", "com.google.common.cache.LocalCache$AbstractCacheSet.toArray()"], ["<E> E[]", "com.google.common.cache.LocalCache$AbstractCacheSet.toArray(E[])"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getValueReference()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getNext()"], ["int", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getHash()"], ["K", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getKey()"], ["long", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AbstractReferenceEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$AbstractReferenceEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$AccessQueue$1.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$AccessQueue$1.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue$1.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AccessQueue$1.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue$1.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$AccessQueue$1.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.offer(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue.peek()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$AccessQueue.poll()"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.isEmpty()"], ["int", "com.google.common.cache.LocalCache$AccessQueue.size()"], ["void", "com.google.common.cache.LocalCache$AccessQueue.clear()"], ["java.util.Iterator<com.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "com.google.common.cache.LocalCache$AccessQueue.iterator()"], ["java.lang.Object", "com.google.common.cache.LocalCache$AccessQueue.peek()"], ["java.lang.Object", "com.google.common.cache.LocalCache$AccessQueue.poll()"], ["boolean", "com.google.common.cache.LocalCache$AccessQueue.offer(java.lang.Object)"], ["com.google.common.cache.LocalCache$EntryFactory[]", "com.google.common.cache.LocalCache$EntryFactory.values()"], ["com.google.common.cache.LocalCache$EntryFactory", "com.google.common.cache.LocalCache$EntryFactory.valueOf(java.lang.String)"], ["java.util.Map$Entry<K, V>", "com.google.common.cache.LocalCache$EntryIterator.next()"], ["java.lang.Object", "com.google.common.cache.LocalCache$EntryIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.cache.LocalCache$EntrySet.iterator()"], ["boolean", "com.google.common.cache.LocalCache$EntrySet.removeIf(java.util.function.Predicate<? super java.util.Map$Entry<K, V>>)"], ["boolean", "com.google.common.cache.LocalCache$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$EntrySet.remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$HashIterator.hasNext()"], ["void", "com.google.common.cache.LocalCache$HashIterator.remove()"], ["K", "com.google.common.cache.LocalCache$KeyIterator.next()"], ["boolean", "com.google.common.cache.LocalCache$KeySet.contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$KeySet.remove(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache$LoadingSerializationProxy.get(K)"], ["V", "com.google.common.cache.LocalCache$LoadingSerializationProxy.getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.LocalCache$LoadingSerializationProxy.getAll(java.lang.Iterable<? extends K>)"], ["V", "com.google.common.cache.LocalCache$LoadingSerializationProxy.apply(K)"], ["void", "com.google.common.cache.LocalCache$LoadingSerializationProxy.refresh(K)"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference$1.apply(V)"], ["com.google.common.cache.LocalCache$LoadingValueReference", "com.google.common.cache.LocalCache$LoadingValueReference()"], ["com.google.common.cache.LocalCache$LoadingValueReference", "com.google.common.cache.LocalCache$LoadingValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.isLoading()"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.isActive()"], ["int", "com.google.common.cache.LocalCache$LoadingValueReference.getWeight()"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.set(V)"], ["boolean", "com.google.common.cache.LocalCache$LoadingValueReference.setException(java.lang.Throwable)"], ["void", "com.google.common.cache.LocalCache$LoadingValueReference.notifyNewValue(V)"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference.compute(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["long", "com.google.common.cache.LocalCache$LoadingValueReference.elapsedNanos()"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference.waitForValue()"], ["V", "com.google.common.cache.LocalCache$LoadingValueReference.get()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$LoadingValueReference.getOldValue()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$LoadingValueReference.getEntry()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$LoadingValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "com.google.common.cache.LocalCache$LocalLoadingCache.get(K)"], ["V", "com.google.common.cache.LocalCache$LocalLoadingCache.getUnchecked(K)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.LocalCache$LocalLoadingCache.getAll(java.lang.Iterable<? extends K>)"], ["void", "com.google.common.cache.LocalCache$LocalLoadingCache.refresh(K)"], ["V", "com.google.common.cache.LocalCache$LocalLoadingCache.apply(K)"], ["V", "com.google.common.cache.LocalCache$LocalManualCache$1.load(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache$LocalManualCache.getIfPresent(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache$LocalManualCache.get(K, java.util.concurrent.Callable<? extends V>)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.cache.LocalCache$LocalManualCache.getAllPresent(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.put(K, V)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.invalidate(java.lang.Object)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.invalidateAll(java.lang.Iterable<?>)"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.invalidateAll()"], ["long", "com.google.common.cache.LocalCache$LocalManualCache.size()"], ["java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.cache.LocalCache$LocalManualCache.asMap()"], ["com.google.common.cache.CacheStats", "com.google.common.cache.LocalCache$LocalManualCache.stats()"], ["void", "com.google.common.cache.LocalCache$LocalManualCache.cleanUp()"], ["com.google.common.cache.LocalCache$NullEntry[]", "com.google.common.cache.LocalCache$NullEntry.values()"], ["com.google.common.cache.LocalCache$NullEntry", "com.google.common.cache.LocalCache$NullEntry.valueOf(java.lang.String)"], ["com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getValueReference()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getNext()"], ["int", "com.google.common.cache.LocalCache$NullEntry.getHash()"], ["java.lang.Object", "com.google.common.cache.LocalCache$NullEntry.getKey()"], ["long", "com.google.common.cache.LocalCache$NullEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["long", "com.google.common.cache.LocalCache$NullEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>", "com.google.common.cache.LocalCache$NullEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$NullEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<java.lang.Object, java.lang.Object>)"], ["void", "com.google.common.cache.LocalCache$Segment$1.run()"], ["int", "com.google.common.cache.LocalCache$SoftValueReference.getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$SoftValueReference.getEntry()"], ["void", "com.google.common.cache.LocalCache$SoftValueReference.notifyNewValue(V)"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$SoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$SoftValueReference.isLoading()"], ["boolean", "com.google.common.cache.LocalCache$SoftValueReference.isActive()"], ["V", "com.google.common.cache.LocalCache$SoftValueReference.waitForValue()"], ["com.google.common.cache.LocalCache$Strength[]", "com.google.common.cache.LocalCache$Strength.values()"], ["com.google.common.cache.LocalCache$Strength", "com.google.common.cache.LocalCache$Strength.valueOf(java.lang.String)"], ["long", "com.google.common.cache.LocalCache$StrongAccessEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$StrongAccessEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongAccessWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "com.google.common.cache.LocalCache$StrongEntry.getKey()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$StrongEntry.getValueReference()"], ["void", "com.google.common.cache.LocalCache$StrongEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "com.google.common.cache.LocalCache$StrongEntry.getHash()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongEntry.getNext()"], ["V", "com.google.common.cache.LocalCache$StrongValueReference.get()"], ["int", "com.google.common.cache.LocalCache$StrongValueReference.getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongValueReference.getEntry()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$StrongValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$StrongValueReference.isLoading()"], ["boolean", "com.google.common.cache.LocalCache$StrongValueReference.isActive()"], ["V", "com.google.common.cache.LocalCache$StrongValueReference.waitForValue()"], ["void", "com.google.common.cache.LocalCache$StrongValueReference.notifyNewValue(V)"], ["long", "com.google.common.cache.LocalCache$StrongWriteEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$StrongWriteEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongWriteEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$StrongWriteEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$StrongWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["V", "com.google.common.cache.LocalCache$ValueIterator.next()"], ["int", "com.google.common.cache.LocalCache$Values.size()"], ["boolean", "com.google.common.cache.LocalCache$Values.isEmpty()"], ["void", "com.google.common.cache.LocalCache$Values.clear()"], ["boolean", "com.google.common.cache.LocalCache$Values.removeIf(java.util.function.Predicate<? super V>)"], ["boolean", "com.google.common.cache.LocalCache$Values.contains(java.lang.Object)"], ["java.lang.Object[]", "com.google.common.cache.LocalCache$Values.toArray()"], ["<E> E[]", "com.google.common.cache.LocalCache$Values.toArray(E[])"], ["long", "com.google.common.cache.LocalCache$WeakAccessEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$WeakAccessEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakAccessWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["K", "com.google.common.cache.LocalCache$WeakEntry.getKey()"], ["long", "com.google.common.cache.LocalCache$WeakEntry.getAccessTime()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setAccessTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getNextInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setNextInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getPreviousInAccessQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setPreviousInAccessQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WeakEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getValueReference()"], ["void", "com.google.common.cache.LocalCache$WeakEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference<K, V>)"], ["int", "com.google.common.cache.LocalCache$WeakEntry.getHash()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakEntry.getNext()"], ["int", "com.google.common.cache.LocalCache$WeakValueReference.getWeight()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakValueReference.getEntry()"], ["void", "com.google.common.cache.LocalCache$WeakValueReference.notifyNewValue(V)"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$WeakValueReference.isLoading()"], ["boolean", "com.google.common.cache.LocalCache$WeakValueReference.isActive()"], ["V", "com.google.common.cache.LocalCache$WeakValueReference.waitForValue()"], ["long", "com.google.common.cache.LocalCache$WeakWriteEntry.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WeakWriteEntry.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakWriteEntry.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakWriteEntry.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WeakWriteEntry.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WeakWriteEntry.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "com.google.common.cache.LocalCache$WeightedSoftValueReference.getWeight()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeightedSoftValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["int", "com.google.common.cache.LocalCache$WeightedStrongValueReference.getWeight()"], ["int", "com.google.common.cache.LocalCache$WeightedWeakValueReference.getWeight()"], ["com.google.common.cache.LocalCache$ValueReference<K, V>", "com.google.common.cache.LocalCache$WeightedWeakValueReference.copyFor(java.lang.ref.ReferenceQueue<V>, V, com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["long", "com.google.common.cache.LocalCache$WriteQueue$1.getWriteTime()"], ["void", "com.google.common.cache.LocalCache$WriteQueue$1.setWriteTime(long)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue$1.getNextInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WriteQueue$1.setNextInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue$1.getPreviousInWriteQueue()"], ["void", "com.google.common.cache.LocalCache$WriteQueue$1.setPreviousInWriteQueue(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.offer(com.google.common.cache.LocalCache$ReferenceEntry<K, V>)"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue.peek()"], ["com.google.common.cache.LocalCache$ReferenceEntry<K, V>", "com.google.common.cache.LocalCache$WriteQueue.poll()"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.contains(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.isEmpty()"], ["int", "com.google.common.cache.LocalCache$WriteQueue.size()"], ["void", "com.google.common.cache.LocalCache$WriteQueue.clear()"], ["java.util.Iterator<com.google.common.cache.LocalCache$ReferenceEntry<K, V>>", "com.google.common.cache.LocalCache$WriteQueue.iterator()"], ["java.lang.Object", "com.google.common.cache.LocalCache$WriteQueue.peek()"], ["java.lang.Object", "com.google.common.cache.LocalCache$WriteQueue.poll()"], ["boolean", "com.google.common.cache.LocalCache$WriteQueue.offer(java.lang.Object)"], ["K", "com.google.common.cache.LocalCache$WriteThroughEntry.getKey()"], ["V", "com.google.common.cache.LocalCache$WriteThroughEntry.getValue()"], ["boolean", "com.google.common.cache.LocalCache$WriteThroughEntry.equals(java.lang.Object)"], ["int", "com.google.common.cache.LocalCache$WriteThroughEntry.hashCode()"], ["V", "com.google.common.cache.LocalCache$WriteThroughEntry.setValue(V)"], ["java.lang.String", "com.google.common.cache.LocalCache$WriteThroughEntry.toString()"], ["void", "com.google.common.cache.LocalCache.cleanUp()"], ["boolean", "com.google.common.cache.LocalCache.isEmpty()"], ["int", "com.google.common.cache.LocalCache.size()"], ["V", "com.google.common.cache.LocalCache.get(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache.getIfPresent(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache.getOrDefault(java.lang.Object, V)"], ["boolean", "com.google.common.cache.LocalCache.containsKey(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.containsValue(java.lang.Object)"], ["V", "com.google.common.cache.LocalCache.put(K, V)"], ["V", "com.google.common.cache.LocalCache.putIfAbsent(K, V)"], ["V", "com.google.common.cache.LocalCache.compute(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.cache.LocalCache.computeIfAbsent(K, java.util.function.Function<? super K, ? extends V>)"], ["V", "com.google.common.cache.LocalCache.computeIfPresent(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.cache.LocalCache.merge(K, V, java.util.function.BiFunction<? super V, ? super V, ? extends V>)"], ["void", "com.google.common.cache.LocalCache.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "com.google.common.cache.LocalCache.remove(java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.cache.LocalCache.replace(K, V, V)"], ["V", "com.google.common.cache.LocalCache.replace(K, V)"], ["void", "com.google.common.cache.LocalCache.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.cache.LocalCache.entrySet()"], ["com.google.common.cache.LongAddable", "com.google.common.cache.LongAddables$1.get()"], ["java.lang.Object", "com.google.common.cache.LongAddables$1.get()"], ["com.google.common.cache.LongAddable", "com.google.common.cache.LongAddables$2.get()"], ["java.lang.Object", "com.google.common.cache.LongAddables$2.get()"], ["void", "com.google.common.cache.LongAddables$PureJavaLongAddable.increment()"], ["void", "com.google.common.cache.LongAddables$PureJavaLongAddable.add(long)"], ["long", "com.google.common.cache.LongAddables$PureJavaLongAddable.sum()"], ["com.google.common.cache.LongAddable", "com.google.common.cache.LongAddables.create()"], ["com.google.common.cache.LongAdder", "com.google.common.cache.LongAdder()"], ["void", "com.google.common.cache.LongAdder.add(long)"], ["void", "com.google.common.cache.LongAdder.increment()"], ["void", "com.google.common.cache.LongAdder.decrement()"], ["long", "com.google.common.cache.LongAdder.sum()"], ["void", "com.google.common.cache.LongAdder.reset()"], ["long", "com.google.common.cache.LongAdder.sumThenReset()"], ["java.lang.String", "com.google.common.cache.LongAdder.toString()"], ["long", "com.google.common.cache.LongAdder.longValue()"], ["int", "com.google.common.cache.LongAdder.intValue()"], ["float", "com.google.common.cache.LongAdder.floatValue()"], ["double", "com.google.common.cache.LongAdder.doubleValue()"], ["com.google.common.cache.RemovalCause[]", "com.google.common.cache.RemovalCause.values()"], ["com.google.common.cache.RemovalCause", "com.google.common.cache.RemovalCause.valueOf(java.lang.String)"], ["void", "com.google.common.cache.RemovalListeners$1$1.run()"], ["void", "com.google.common.cache.RemovalListeners$1.onRemoval(com.google.common.cache.RemovalNotification<K, V>)"], ["<K, V> com.google.common.cache.RemovalListener<K, V>", "com.google.common.cache.RemovalListeners.asynchronous(com.google.common.cache.RemovalListener<K, V>, java.util.concurrent.Executor)"], ["<K, V> com.google.common.cache.RemovalNotification<K, V>", "com.google.common.cache.RemovalNotification.create(K, V, com.google.common.cache.RemovalCause)"], ["com.google.common.cache.RemovalCause", "com.google.common.cache.RemovalNotification.getCause()"], ["boolean", "com.google.common.cache.RemovalNotification.wasEvicted()"], ["sun.misc.Unsafe", "com.google.common.cache.Striped64$1.run()"], ["java.lang.Object", "com.google.common.cache.Striped64$1.run()"], ["boolean", "com.google.common.collect.AbstractBiMap$1.hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractBiMap$1.next()"], ["void", "com.google.common.collect.AbstractBiMap$1.remove()"], ["java.lang.Object", "com.google.common.collect.AbstractBiMap$1.next()"], ["V", "com.google.common.collect.AbstractBiMap$BiMapEntry.setValue(V)"], ["void", "com.google.common.collect.AbstractBiMap$EntrySet.clear()"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractBiMap$EntrySet.iterator()"], ["java.lang.Object[]", "com.google.common.collect.AbstractBiMap$EntrySet.toArray()"], ["<T> T[]", "com.google.common.collect.AbstractBiMap$EntrySet.toArray(T[])"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractBiMap$EntrySet.retainAll(java.util.Collection<?>)"], ["java.util.Collection", "com.google.common.collect.AbstractBiMap$Inverse.values()"], ["void", "com.google.common.collect.AbstractBiMap$KeySet.clear()"], ["boolean", "com.google.common.collect.AbstractBiMap$KeySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractBiMap$KeySet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractBiMap$KeySet.retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "com.google.common.collect.AbstractBiMap$ValueSet.toArray()"], ["<T> T[]", "com.google.common.collect.AbstractBiMap$ValueSet.toArray(T[])"], ["java.lang.String", "com.google.common.collect.AbstractBiMap$ValueSet.toString()"], ["boolean", "com.google.common.collect.AbstractBiMap.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.AbstractBiMap.put(K, V)"], ["V", "com.google.common.collect.AbstractBiMap.forcePut(K, V)"], ["V", "com.google.common.collect.AbstractBiMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.AbstractBiMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.AbstractBiMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["void", "com.google.common.collect.AbstractBiMap.clear()"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.AbstractBiMap.inverse()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractBiMap.entrySet()"], ["java.util.Collection", "com.google.common.collect.AbstractBiMap.values()"], ["boolean", "com.google.common.collect.AbstractIndexedListIterator.hasNext()"], ["E", "com.google.common.collect.AbstractIndexedListIterator.next()"], ["int", "com.google.common.collect.AbstractIndexedListIterator.nextIndex()"], ["boolean", "com.google.common.collect.AbstractIndexedListIterator.hasPrevious()"], ["E", "com.google.common.collect.AbstractIndexedListIterator.previous()"], ["int", "com.google.common.collect.AbstractIndexedListIterator.previousIndex()"], ["com.google.common.collect.AbstractIterator$State[]", "com.google.common.collect.AbstractIterator$State.values()"], ["com.google.common.collect.AbstractIterator$State", "com.google.common.collect.AbstractIterator$State.valueOf(java.lang.String)"], ["boolean", "com.google.common.collect.AbstractIterator.hasNext()"], ["T", "com.google.common.collect.AbstractIterator.next()"], ["T", "com.google.common.collect.AbstractIterator.peek()"], ["boolean", "com.google.common.collect.AbstractListMultimap.put(K, V)"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractListMultimap.asMap()"], ["boolean", "com.google.common.collect.AbstractListMultimap.equals(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractListMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.iterator()"], ["java.util.Spliterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.spliterator()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapEntries.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.hasNext()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.remove()"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultimap$AsMap$AsMapIterator.next()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.size()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.toString()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.clear()"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultimap$AsMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$Itr.hasNext()"], ["T", "com.google.common.collect.AbstractMapBasedMultimap$Itr.next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$Itr.remove()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1.hasNext()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1.next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$KeySet$1.remove()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.remove(java.lang.Object)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.clear()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$KeySet.hashCode()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lowerKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.floorKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.ceilingKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherEntry(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.higherKey(K)"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.firstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.lastEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollFirstEntry()"], ["java.util.Map$Entry<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.pollLastEntry()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.descendingMap()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K)"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(K, boolean)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()"], ["java.util.SortedMap", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.headMap(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.AbstractMapBasedMultimap$NavigableAsMap.keySet()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.lower(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.floor(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.ceiling(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.higher(K)"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollFirst()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.pollLast()"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.subSet(java.lang.Object, java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.AbstractMapBasedMultimap$NavigableKeySet.headSet(java.lang.Object)"], ["java.util.Comparator<? super K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.comparator()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.firstKey()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.lastKey()"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.headMap(K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.subMap(K, K)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.tailMap(K)"], ["java.util.Set", "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap.keySet()"], ["java.util.Comparator<? super K>", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.comparator()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.first()"], ["K", "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet.last()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.hasNext()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.next()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator.remove()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.size()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.toString()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.add(V)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.addAll(java.util.Collection<? extends V>)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.containsAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.clear()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection.retainAll(java.util.Collection<?>)"], ["com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator(com.google.common.collect.AbstractMapBasedMultimap$WrappedList, int)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.hasPrevious()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previous()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.nextIndex()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.previousIndex()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.set(V)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList$WrappedListIterator.add(V)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.addAll(int, java.util.Collection<? extends V>)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.get(int)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.set(int, V)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.add(int, V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.remove(int)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultimap$WrappedList.lastIndexOf(java.lang.Object)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.lower(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.floor(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.ceiling(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.higher(V)"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollFirst()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedNavigableSet.pollLast()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet.removeAll(java.util.Collection<?>)"], ["java.util.Comparator<? super V>", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.comparator()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.first()"], ["V", "com.google.common.collect.AbstractMapBasedMultimap$WrappedSortedSet.last()"], ["int", "com.google.common.collect.AbstractMapBasedMultimap.size()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMapBasedMultimap.put(K, V)"], ["void", "com.google.common.collect.AbstractMapBasedMultimap.clear()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMapBasedMultimap.entries()"], ["void", "com.google.common.collect.AbstractMapBasedMultimap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["E", "com.google.common.collect.AbstractMapBasedMultiset$1$1.getElement()"], ["int", "com.google.common.collect.AbstractMapBasedMultiset$1$1.getCount()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultiset$1.hasNext()"], ["void", "com.google.common.collect.AbstractMapBasedMultiset$1.remove()"], ["java.lang.Object", "com.google.common.collect.AbstractMapBasedMultiset$1.next()"], ["boolean", "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.hasNext()"], ["E", "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.next()"], ["void", "com.google.common.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator.remove()"], ["void", "com.google.common.collect.AbstractMapBasedMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)"], ["void", "com.google.common.collect.AbstractMapBasedMultiset.clear()"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.size()"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.add(E, int)"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.AbstractMapBasedMultiset.setCount(E, int)"], ["V", "com.google.common.collect.AbstractMapEntry.setValue(V)"], ["boolean", "com.google.common.collect.AbstractMapEntry.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMapEntry.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMapEntry.toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMultimap$Entries.iterator()"], ["java.util.Spliterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMultimap$Entries.spliterator()"], ["int", "com.google.common.collect.AbstractMultimap$EntrySet.hashCode()"], ["boolean", "com.google.common.collect.AbstractMultimap$EntrySet.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultimap$Values.size()"], ["boolean", "com.google.common.collect.AbstractMultimap$Values.contains(java.lang.Object)"], ["void", "com.google.common.collect.AbstractMultimap$Values.clear()"], ["boolean", "com.google.common.collect.AbstractMultimap.isEmpty()"], ["boolean", "com.google.common.collect.AbstractMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultimap.put(K, V)"], ["boolean", "com.google.common.collect.AbstractMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractMultimap.entries()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractMultimap.asMap()"], ["boolean", "com.google.common.collect.AbstractMultimap.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultimap.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMultimap.toString()"], ["int", "com.google.common.collect.AbstractMultiset$EntrySet.size()"], ["int", "com.google.common.collect.AbstractMultiset.size()"], ["boolean", "com.google.common.collect.AbstractMultiset.isEmpty()"], ["boolean", "com.google.common.collect.AbstractMultiset.contains(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultiset.count(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractMultiset.add(E)"], ["int", "com.google.common.collect.AbstractMultiset.add(E, int)"], ["boolean", "com.google.common.collect.AbstractMultiset.remove(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.AbstractMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.AbstractMultiset.setCount(E, int, int)"], ["boolean", "com.google.common.collect.AbstractMultiset.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.AbstractMultiset.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.AbstractMultiset.retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.AbstractMultiset.clear()"], ["boolean", "com.google.common.collect.AbstractMultiset.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractMultiset.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractMultiset.toString()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.pollLastEntry()"], ["K", "com.google.common.collect.AbstractNavigableMap.firstKey()"], ["K", "com.google.common.collect.AbstractNavigableMap.lastKey()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.lowerEntry(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.floorEntry(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.ceilingEntry(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.AbstractNavigableMap.higherEntry(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.lowerKey(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.floorKey(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.ceilingKey(K)"], ["K", "com.google.common.collect.AbstractNavigableMap.higherKey(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.AbstractNavigableMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.AbstractNavigableMap.headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.AbstractNavigableMap.tailMap(K)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.AbstractNavigableMap.descendingMap()"], ["boolean", "com.google.common.collect.AbstractRangeSet.contains(C)"], ["boolean", "com.google.common.collect.AbstractRangeSet.isEmpty()"], ["void", "com.google.common.collect.AbstractRangeSet.add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.remove(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.clear()"], ["boolean", "com.google.common.collect.AbstractRangeSet.enclosesAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.addAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.AbstractRangeSet.removeAll(com.google.common.collect.RangeSet<C>)"], ["boolean", "com.google.common.collect.AbstractRangeSet.intersects(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.AbstractRangeSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractRangeSet.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractRangeSet.toString()"], ["boolean", "com.google.common.collect.AbstractSequentialIterator.hasNext()"], ["T", "com.google.common.collect.AbstractSequentialIterator.next()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.AbstractSetMultimap.entries()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractSetMultimap.asMap()"], ["boolean", "com.google.common.collect.AbstractSetMultimap.put(K, V)"], ["boolean", "com.google.common.collect.AbstractSetMultimap.equals(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedMap<K, java.util.Collection<V>>", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()"], ["java.util.Map", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.asMap()"], ["java.util.Set", "com.google.common.collect.AbstractSortedKeySortedSetMultimap.keySet()"], ["java.util.Comparator<? super E>", "com.google.common.collect.AbstractSortedMultiset.comparator()"], ["java.util.Set", "com.google.common.collect.AbstractSortedMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.AbstractSortedMultiset.elementSet()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.AbstractSortedSetMultimap.asMap()"], ["java.util.Set", "com.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.AbstractSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.AbstractTable$CellSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable$CellSet.remove(java.lang.Object)"], ["void", "com.google.common.collect.AbstractTable$CellSet.clear()"], ["java.util.Iterator<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.AbstractTable$CellSet.iterator()"], ["java.util.Spliterator<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.AbstractTable$CellSet.spliterator()"], ["int", "com.google.common.collect.AbstractTable$CellSet.size()"], ["boolean", "com.google.common.collect.AbstractTable$Values.contains(java.lang.Object)"], ["void", "com.google.common.collect.AbstractTable$Values.clear()"], ["int", "com.google.common.collect.AbstractTable$Values.size()"], ["boolean", "com.google.common.collect.AbstractTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.contains(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.AbstractTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.AbstractTable.isEmpty()"], ["void", "com.google.common.collect.AbstractTable.clear()"], ["V", "com.google.common.collect.AbstractTable.remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.AbstractTable.put(R, C, V)"], ["void", "com.google.common.collect.AbstractTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.AbstractTable.cellSet()"], ["boolean", "com.google.common.collect.AbstractTable.equals(java.lang.Object)"], ["int", "com.google.common.collect.AbstractTable.hashCode()"], ["java.lang.String", "com.google.common.collect.AbstractTable.toString()"], ["int", "com.google.common.collect.AllEqualOrdering.compare(java.lang.Object, java.lang.Object)"], ["<E> java.util.List<E>", "com.google.common.collect.AllEqualOrdering.sortedCopy(java.lang.Iterable<E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.AllEqualOrdering.immutableSortedCopy(java.lang.Iterable<E>)"], ["<S> com.google.common.collect.Ordering<S>", "com.google.common.collect.AllEqualOrdering.reverse()"], ["java.lang.String", "com.google.common.collect.AllEqualOrdering.toString()"], ["<K, V> com.google.common.collect.ArrayListMultimap<K, V>", "com.google.common.collect.ArrayListMultimap.create()"], ["<K, V> com.google.common.collect.ArrayListMultimap<K, V>", "com.google.common.collect.ArrayListMultimap.create(int, int)"], ["<K, V> com.google.common.collect.ArrayListMultimap<K, V>", "com.google.common.collect.ArrayListMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["void", "com.google.common.collect.ArrayListMultimap.trimToSize()"], ["boolean", "com.google.common.collect.ArrayListMultimap.equals(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ArrayListMultimap.asMap()"], ["boolean", "com.google.common.collect.ArrayListMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.List", "com.google.common.collect.ArrayListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "com.google.common.collect.ArrayListMultimap.removeAll(java.lang.Object)"], ["java.util.List", "com.google.common.collect.ArrayListMultimap.get(java.lang.Object)"], ["void", "com.google.common.collect.ArrayListMultimap.forEach(java.util.function.BiConsumer)"], ["java.util.Collection", "com.google.common.collect.ArrayListMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.ArrayListMultimap.values()"], ["void", "com.google.common.collect.ArrayListMultimap.clear()"], ["boolean", "com.google.common.collect.ArrayListMultimap.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.ArrayListMultimap.size()"], ["java.lang.String", "com.google.common.collect.ArrayListMultimap.toString()"], ["int", "com.google.common.collect.ArrayListMultimap.hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.ArrayListMultimap.keys()"], ["java.util.Set", "com.google.common.collect.ArrayListMultimap.keySet()"], ["boolean", "com.google.common.collect.ArrayListMultimap.putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.ArrayListMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.ArrayListMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayListMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayListMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayListMultimap.isEmpty()"], ["R", "com.google.common.collect.ArrayTable$2.getRowKey()"], ["C", "com.google.common.collect.ArrayTable$2.getColumnKey()"], ["V", "com.google.common.collect.ArrayTable$2.getValue()"], ["K", "com.google.common.collect.ArrayTable$ArrayMap$1.getKey()"], ["V", "com.google.common.collect.ArrayTable$ArrayMap$1.getValue()"], ["V", "com.google.common.collect.ArrayTable$ArrayMap$1.setValue(V)"], ["int", "com.google.common.collect.ArrayTable$ArrayMap.size()"], ["boolean", "com.google.common.collect.ArrayTable$ArrayMap.isEmpty()"], ["boolean", "com.google.common.collect.ArrayTable$ArrayMap.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable$ArrayMap.get(java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable$ArrayMap.put(K, V)"], ["V", "com.google.common.collect.ArrayTable$ArrayMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.ArrayTable$ArrayMap.clear()"], ["java.util.Map<R, V>", "com.google.common.collect.ArrayTable$ColumnMap.put(C, java.util.Map<R, V>)"], ["java.lang.Object", "com.google.common.collect.ArrayTable$ColumnMap.put(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.ArrayTable$RowMap.put(R, java.util.Map<C, V>)"], ["java.lang.Object", "com.google.common.collect.ArrayTable$RowMap.put(java.lang.Object, java.lang.Object)"], ["<R, C, V> com.google.common.collect.ArrayTable<R, C, V>", "com.google.common.collect.ArrayTable.create(java.lang.Iterable<? extends R>, java.lang.Iterable<? extends C>)"], ["<R, C, V> com.google.common.collect.ArrayTable<R, C, V>", "com.google.common.collect.ArrayTable.create(com.google.common.collect.Table<R, C, V>)"], ["V", "com.google.common.collect.ArrayTable.at(int, int)"], ["V", "com.google.common.collect.ArrayTable.set(int, int, V)"], ["V[][]", "com.google.common.collect.ArrayTable.toArray(java.lang.Class<V>)"], ["void", "com.google.common.collect.ArrayTable.clear()"], ["void", "com.google.common.collect.ArrayTable.eraseAll()"], ["boolean", "com.google.common.collect.ArrayTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ArrayTable.isEmpty()"], ["V", "com.google.common.collect.ArrayTable.put(R, C, V)"], ["void", "com.google.common.collect.ArrayTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.ArrayTable.remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.ArrayTable.erase(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.ArrayTable.size()"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.ArrayTable.cellSet()"], ["java.util.Map<R, V>", "com.google.common.collect.ArrayTable.column(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.ArrayTable.columnMap()"], ["java.util.Map<C, V>", "com.google.common.collect.ArrayTable.row(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.ArrayTable.rowMap()"], ["java.lang.String", "com.google.common.collect.ArrayTable.toString()"], ["int", "com.google.common.collect.ArrayTable.hashCode()"], ["boolean", "com.google.common.collect.ArrayTable.equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ArrayTable.columnKeySet()"], ["java.util.Set", "com.google.common.collect.ArrayTable.rowKeySet()"], ["default", "com.google.common.collect.BiMap.java.util.Collection values()"], ["void", "com.google.common.collect.BinaryTreeTraverser$1.forEach(java.util.function.Consumer<? super T>)"], ["void", "com.google.common.collect.BinaryTreeTraverser$2$1.accept(T)"], ["void", "com.google.common.collect.BinaryTreeTraverser$2.forEach(java.util.function.Consumer<? super T>)"], ["java.util.Iterator", "com.google.common.collect.BinaryTreeTraverser$2.iterator()"], ["boolean", "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator.hasNext()"], ["T", "com.google.common.collect.BinaryTreeTraverser$PostOrderIterator.next()"], ["boolean", "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator.hasNext()"], ["T", "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator.next()"], ["T", "com.google.common.collect.BinaryTreeTraverser$PreOrderIterator.peek()"], ["com.google.common.collect.BinaryTreeTraverser", "com.google.common.collect.BinaryTreeTraverser()"], ["com.google.common.collect.BoundType[]", "com.google.common.collect.BoundType.values()"], ["com.google.common.collect.BoundType", "com.google.common.collect.BoundType.valueOf(java.lang.String)"], ["int", "com.google.common.collect.ByFunctionOrdering.compare(F, F)"], ["boolean", "com.google.common.collect.ByFunctionOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.ByFunctionOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.ByFunctionOrdering.toString()"], ["int", "com.google.common.collect.CartesianList$1.size()"], ["E", "com.google.common.collect.CartesianList$1.get(int)"], ["int", "com.google.common.collect.CartesianList.size()"], ["boolean", "com.google.common.collect.CartesianList.contains(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.CartesianList.get(int)"], ["boolean", "com.google.common.collect.CollectSpliterators$1.tryAdvance(java.util.function.Consumer<? super T>)"], ["void", "com.google.common.collect.CollectSpliterators$1.forEachRemaining(java.util.function.Consumer<? super T>)"], ["long", "com.google.common.collect.CollectSpliterators$1.estimateSize()"], ["int", "com.google.common.collect.CollectSpliterators$1.characteristics()"], ["boolean", "com.google.common.collect.CollectSpliterators$1FlatMapSpliterator.tryAdvance(java.util.function.Consumer<? super T>)"], ["void", "com.google.common.collect.CollectSpliterators$1FlatMapSpliterator.forEachRemaining(java.util.function.Consumer<? super T>)"], ["long", "com.google.common.collect.CollectSpliterators$1FlatMapSpliterator.estimateSize()"], ["int", "com.google.common.collect.CollectSpliterators$1FlatMapSpliterator.characteristics()"], ["void", "com.google.common.collect.CollectSpliterators$1Splitr.accept(T)"], ["boolean", "com.google.common.collect.CollectSpliterators$1Splitr.tryAdvance(java.util.function.Consumer<? super T>)"], ["long", "com.google.common.collect.CollectSpliterators$1Splitr.estimateSize()"], ["java.util.Comparator<? super T>", "com.google.common.collect.CollectSpliterators$1Splitr.getComparator()"], ["int", "com.google.common.collect.CollectSpliterators$1Splitr.characteristics()"], ["boolean", "com.google.common.collect.CollectSpliterators$1WithCharacteristics.tryAdvance(java.util.function.Consumer<? super T>)"], ["void", "com.google.common.collect.CollectSpliterators$1WithCharacteristics.forEachRemaining(java.util.function.Consumer<? super T>)"], ["long", "com.google.common.collect.CollectSpliterators$1WithCharacteristics.estimateSize()"], ["int", "com.google.common.collect.CollectSpliterators$1WithCharacteristics.characteristics()"], ["java.util.Comparator<? super T>", "com.google.common.collect.CollectSpliterators$1WithCharacteristics.getComparator()"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.add(E)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.addAll(java.util.Collection<? extends E>)"], ["void", "com.google.common.collect.Collections2$FilteredCollection.clear()"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.isEmpty()"], ["void", "com.google.common.collect.Collections2$FilteredCollection.forEach(java.util.function.Consumer<? super E>)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Collections2$FilteredCollection.removeIf(java.util.function.Predicate<? super E>)"], ["int", "com.google.common.collect.Collections2$FilteredCollection.size()"], ["java.lang.Object[]", "com.google.common.collect.Collections2$FilteredCollection.toArray()"], ["<T> T[]", "com.google.common.collect.Collections2$FilteredCollection.toArray(T[])"], ["int", "com.google.common.collect.Collections2$OrderedPermutationCollection.size()"], ["boolean", "com.google.common.collect.Collections2$OrderedPermutationCollection.isEmpty()"], ["boolean", "com.google.common.collect.Collections2$OrderedPermutationCollection.contains(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Collections2$OrderedPermutationCollection.toString()"], ["int", "com.google.common.collect.Collections2$PermutationCollection.size()"], ["boolean", "com.google.common.collect.Collections2$PermutationCollection.isEmpty()"], ["boolean", "com.google.common.collect.Collections2$PermutationCollection.contains(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Collections2$PermutationCollection.toString()"], ["void", "com.google.common.collect.Collections2$TransformedCollection.clear()"], ["boolean", "com.google.common.collect.Collections2$TransformedCollection.isEmpty()"], ["void", "com.google.common.collect.Collections2$TransformedCollection.forEach(java.util.function.Consumer<? super T>)"], ["boolean", "com.google.common.collect.Collections2$TransformedCollection.removeIf(java.util.function.Predicate<? super T>)"], ["int", "com.google.common.collect.Collections2$TransformedCollection.size()"], ["<E> java.util.Collection<E>", "com.google.common.collect.Collections2.filter(java.util.Collection<E>, com.google.common.base.Predicate<? super E>)"], ["<F, T> java.util.Collection<T>", "com.google.common.collect.Collections2.transform(java.util.Collection<F>, com.google.common.base.Function<? super F, T>)"], ["<E extends java.lang.Comparable<? super E>> java.util.Collection<java.util.List<E>>", "com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>)"], ["<E> java.util.Collection<java.util.List<E>>", "com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable<E>, java.util.Comparator<? super E>)"], ["<E> java.util.Collection<java.util.List<E>>", "com.google.common.collect.Collections2.permutations(java.util.Collection<E>)"], ["int", "com.google.common.collect.ComparatorOrdering.compare(T, T)"], ["boolean", "com.google.common.collect.ComparatorOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.ComparatorOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.ComparatorOrdering.toString()"], ["<T, S extends T> java.util.Comparator<java.lang.Iterable<S>>", "com.google.common.collect.Comparators.lexicographical(java.util.Comparator<T>)"], ["<T> boolean", "com.google.common.collect.Comparators.isInOrder(java.lang.Iterable<? extends T>, java.util.Comparator<T>)"], ["<T> boolean", "com.google.common.collect.Comparators.isInStrictOrder(java.lang.Iterable<? extends T>, java.util.Comparator<T>)"], ["<T> java.util.stream.Collector<T, ?, java.util.List<T>>", "com.google.common.collect.Comparators.least(int, java.util.Comparator<? super T>)"], ["<T> java.util.stream.Collector<T, ?, java.util.List<T>>", "com.google.common.collect.Comparators.greatest(int, java.util.Comparator<? super T>)"], ["<T> java.util.Comparator<java.util.Optional<T>>", "com.google.common.collect.Comparators.emptiesFirst(java.util.Comparator<T>)"], ["<T> java.util.Comparator<java.util.Optional<T>>", "com.google.common.collect.Comparators.emptiesLast(java.util.Comparator<T>)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(T, T, java.util.Comparator<T>)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(int, int)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(long, long)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(float, float)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compare(double, double)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compareTrueFirst(boolean, boolean)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$1.compareFalseFirst(boolean, boolean)"], ["int", "com.google.common.collect.ComparisonChain$1.result()"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(java.lang.Comparable, java.lang.Comparable)"], ["<T> com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(T, T, java.util.Comparator<T>)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(int, int)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(long, long)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(float, float)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compare(double, double)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compareTrueFirst(boolean, boolean)"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.compareFalseFirst(boolean, boolean)"], ["int", "com.google.common.collect.ComparisonChain$InactiveComparisonChain.result()"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain.start()"], ["com.google.common.collect.ComparisonChain", "com.google.common.collect.ComparisonChain.compare(java.lang.Boolean, java.lang.Boolean)"], ["int", "com.google.common.collect.CompoundOrdering.compare(T, T)"], ["boolean", "com.google.common.collect.CompoundOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.CompoundOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.CompoundOrdering.toString()"], ["com.google.common.collect.ComputationException", "com.google.common.collect.ComputationException(java.lang.Throwable)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset$1.removeAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.ConcurrentHashMultiset$3.remove()"], ["java.lang.Object", "com.google.common.collect.ConcurrentHashMultiset$3.next()"], ["java.lang.Object[]", "com.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray()"], ["<T> T[]", "com.google.common.collect.ConcurrentHashMultiset$EntrySet.toArray(T[])"], ["<E> com.google.common.collect.ConcurrentHashMultiset<E>", "com.google.common.collect.ConcurrentHashMultiset.create()"], ["<E> com.google.common.collect.ConcurrentHashMultiset<E>", "com.google.common.collect.ConcurrentHashMultiset.create(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ConcurrentHashMultiset<E>", "com.google.common.collect.ConcurrentHashMultiset.create(java.util.concurrent.ConcurrentMap<E, java.util.concurrent.atomic.AtomicInteger>)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.size()"], ["java.lang.Object[]", "com.google.common.collect.ConcurrentHashMultiset.toArray()"], ["<T> T[]", "com.google.common.collect.ConcurrentHashMultiset.toArray(T[])"], ["int", "com.google.common.collect.ConcurrentHashMultiset.add(E, int)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object, int)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.removeExactly(java.lang.Object, int)"], ["int", "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.setCount(E, int, int)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.isEmpty()"], ["void", "com.google.common.collect.ConcurrentHashMultiset.clear()"], ["java.lang.String", "com.google.common.collect.ConcurrentHashMultiset.toString()"], ["int", "com.google.common.collect.ConcurrentHashMultiset.hashCode()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ConcurrentHashMultiset.entrySet()"], ["java.util.Set", "com.google.common.collect.ConcurrentHashMultiset.elementSet()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.add(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.ConcurrentHashMultiset.iterator()"], ["boolean", "com.google.common.collect.ConcurrentHashMultiset.contains(java.lang.Object)"], ["T", "com.google.common.collect.ConsumingQueueIterator.computeNext()"], ["<C extends java.lang.Comparable> com.google.common.collect.ContiguousSet<C>", "com.google.common.collect.ContiguousSet.create(com.google.common.collect.Range<C>, com.google.common.collect.DiscreteDomain<C>)"], ["java.lang.String", "com.google.common.collect.ContiguousSet.toString()"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ContiguousSet.builder()"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)"], ["com.google.common.collect.ImmutableSortedSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "com.google.common.collect.ContiguousSet.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ContiguousSet.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ContiguousSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["int", "com.google.common.collect.Count.get()"], ["void", "com.google.common.collect.Count.add(int)"], ["int", "com.google.common.collect.Count.addAndGet(int)"], ["void", "com.google.common.collect.Count.set(int)"], ["int", "com.google.common.collect.Count.getAndSet(int)"], ["int", "com.google.common.collect.Count.hashCode()"], ["boolean", "com.google.common.collect.Count.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Count.toString()"], ["int", "com.google.common.collect.Cut$AboveAll.compareTo(com.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["int", "com.google.common.collect.Cut$AboveAll.hashCode()"], ["java.lang.String", "com.google.common.collect.Cut$AboveAll.toString()"], ["int", "com.google.common.collect.Cut$AboveAll.compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut$AboveValue.hashCode()"], ["java.lang.String", "com.google.common.collect.Cut$AboveValue.toString()"], ["int", "com.google.common.collect.Cut$AboveValue.compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut$BelowAll.compareTo(com.google.common.collect.Cut<java.lang.Comparable<?>>)"], ["int", "com.google.common.collect.Cut$BelowAll.hashCode()"], ["java.lang.String", "com.google.common.collect.Cut$BelowAll.toString()"], ["int", "com.google.common.collect.Cut$BelowAll.compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut$BelowValue.hashCode()"], ["java.lang.String", "com.google.common.collect.Cut$BelowValue.toString()"], ["int", "com.google.common.collect.Cut$BelowValue.compareTo(java.lang.Object)"], ["int", "com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut<C>)"], ["boolean", "com.google.common.collect.Cut.equals(java.lang.Object)"], ["int", "com.google.common.collect.Cut.compareTo(java.lang.Object)"], ["int", "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.size()"], ["V", "com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.get(java.lang.Object)"], ["com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "com.google.common.collect.DenseImmutableTable.columnMap()"], ["com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "com.google.common.collect.DenseImmutableTable.rowMap()"], ["V", "com.google.common.collect.DenseImmutableTable.get(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.DenseImmutableTable.size()"], ["java.util.Map", "com.google.common.collect.DenseImmutableTable.columnMap()"], ["java.util.Map", "com.google.common.collect.DenseImmutableTable.rowMap()"], ["int", "com.google.common.collect.DescendingImmutableSortedMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.DescendingImmutableSortedMultiset.size()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.DescendingImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.DescendingImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.DescendingImmutableSortedMultiset.descendingMultiset()"], ["java.util.NavigableSet", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["java.util.Set", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.DescendingImmutableSortedMultiset.elementSet()"], ["boolean", "com.google.common.collect.DescendingImmutableSortedSet.contains(java.lang.Object)"], ["int", "com.google.common.collect.DescendingImmutableSortedSet.size()"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.lower(E)"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.floor(E)"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.ceiling(E)"], ["E", "com.google.common.collect.DescendingImmutableSortedSet.higher(E)"], ["java.util.Iterator", "com.google.common.collect.DescendingImmutableSortedSet.descendingIterator()"], ["java.util.NavigableSet", "com.google.common.collect.DescendingImmutableSortedSet.descendingSet()"], ["java.util.Iterator", "com.google.common.collect.DescendingImmutableSortedSet.iterator()"], ["int", "com.google.common.collect.DescendingMultiset$1EntrySetImpl.size()"], ["java.util.Comparator<? super E>", "com.google.common.collect.DescendingMultiset.comparator()"], ["java.lang.Object[]", "com.google.common.collect.DescendingMultiset.toArray()"], ["<T> T[]", "com.google.common.collect.DescendingMultiset.toArray(T[])"], ["java.lang.String", "com.google.common.collect.DescendingMultiset.toString()"], ["java.util.Set", "com.google.common.collect.DescendingMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.DescendingMultiset.elementSet()"], ["java.math.BigInteger", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.math.BigInteger)"], ["java.math.BigInteger", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.math.BigInteger)"], ["long", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.math.BigInteger, java.math.BigInteger)"], ["java.lang.String", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.toString()"], ["long", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.previous(java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$BigIntegerDomain.next(java.lang.Comparable)"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Integer)"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Integer)"], ["long", "com.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Integer, java.lang.Integer)"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.minValue()"], ["java.lang.Integer", "com.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()"], ["java.lang.String", "com.google.common.collect.DiscreteDomain$IntegerDomain.toString()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.maxValue()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.minValue()"], ["long", "com.google.common.collect.DiscreteDomain$IntegerDomain.distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.previous(java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$IntegerDomain.next(java.lang.Comparable)"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Long)"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Long)"], ["long", "com.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Long, java.lang.Long)"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.minValue()"], ["java.lang.Long", "com.google.common.collect.DiscreteDomain$LongDomain.maxValue()"], ["java.lang.String", "com.google.common.collect.DiscreteDomain$LongDomain.toString()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.maxValue()"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.minValue()"], ["long", "com.google.common.collect.DiscreteDomain$LongDomain.distance(java.lang.Comparable, java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.previous(java.lang.Comparable)"], ["java.lang.Comparable", "com.google.common.collect.DiscreteDomain$LongDomain.next(java.lang.Comparable)"], ["C", "com.google.common.collect.DiscreteDomain.minValue()"], ["C", "com.google.common.collect.DiscreteDomain.maxValue()"], ["C", "com.google.common.collect.EmptyContiguousSet.first()"], ["C", "com.google.common.collect.EmptyContiguousSet.last()"], ["int", "com.google.common.collect.EmptyContiguousSet.size()"], ["boolean", "com.google.common.collect.EmptyContiguousSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EmptyContiguousSet.isEmpty()"], ["java.lang.String", "com.google.common.collect.EmptyContiguousSet.toString()"], ["boolean", "com.google.common.collect.EmptyContiguousSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.EmptyContiguousSet.hashCode()"], ["java.lang.Object", "com.google.common.collect.EmptyContiguousSet.last()"], ["java.lang.Object", "com.google.common.collect.EmptyContiguousSet.first()"], ["java.util.Iterator", "com.google.common.collect.EmptyContiguousSet.descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.EmptyContiguousSet.iterator()"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> com.google.common.collect.EnumBiMap<K, V>", "com.google.common.collect.EnumBiMap.create(java.lang.Class<K>, java.lang.Class<V>)"], ["<K extends java.lang.Enum<K>, V extends java.lang.Enum<V>> com.google.common.collect.EnumBiMap<K, V>", "com.google.common.collect.EnumBiMap.create(java.util.Map<K, V>)"], ["java.util.Set", "com.google.common.collect.EnumBiMap.entrySet()"], ["java.util.Set", "com.google.common.collect.EnumBiMap.values()"], ["java.util.Set", "com.google.common.collect.EnumBiMap.keySet()"], ["com.google.common.collect.BiMap", "com.google.common.collect.EnumBiMap.inverse()"], ["void", "com.google.common.collect.EnumBiMap.clear()"], ["void", "com.google.common.collect.EnumBiMap.replaceAll(java.util.function.BiFunction)"], ["void", "com.google.common.collect.EnumBiMap.putAll(java.util.Map)"], ["boolean", "com.google.common.collect.EnumBiMap.containsValue(java.lang.Object)"], ["<K extends java.lang.Enum<K>, V> com.google.common.collect.EnumHashBiMap<K, V>", "com.google.common.collect.EnumHashBiMap.create(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> com.google.common.collect.EnumHashBiMap<K, V>", "com.google.common.collect.EnumHashBiMap.create(java.util.Map<K, ? extends V>)"], ["V", "com.google.common.collect.EnumHashBiMap.put(K, V)"], ["V", "com.google.common.collect.EnumHashBiMap.forcePut(K, V)"], ["java.util.Set", "com.google.common.collect.EnumHashBiMap.entrySet()"], ["java.util.Set", "com.google.common.collect.EnumHashBiMap.values()"], ["java.util.Set", "com.google.common.collect.EnumHashBiMap.keySet()"], ["com.google.common.collect.BiMap", "com.google.common.collect.EnumHashBiMap.inverse()"], ["void", "com.google.common.collect.EnumHashBiMap.clear()"], ["void", "com.google.common.collect.EnumHashBiMap.replaceAll(java.util.function.BiFunction)"], ["void", "com.google.common.collect.EnumHashBiMap.putAll(java.util.Map)"], ["java.lang.Object", "com.google.common.collect.EnumHashBiMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.EnumHashBiMap.forcePut(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.EnumHashBiMap.put(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.EnumHashBiMap.containsValue(java.lang.Object)"], ["E", "com.google.common.collect.EnumMultiset$2$1.getElement()"], ["int", "com.google.common.collect.EnumMultiset$2$1.getCount()"], ["java.lang.Object", "com.google.common.collect.EnumMultiset$2$1.getElement()"], ["boolean", "com.google.common.collect.EnumMultiset$Itr.hasNext()"], ["T", "com.google.common.collect.EnumMultiset$Itr.next()"], ["void", "com.google.common.collect.EnumMultiset$Itr.remove()"], ["<E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E>", "com.google.common.collect.EnumMultiset.create(java.lang.Class<E>)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E>", "com.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.EnumMultiset<E>", "com.google.common.collect.EnumMultiset.create(java.lang.Iterable<E>, java.lang.Class<E>)"], ["int", "com.google.common.collect.EnumMultiset.size()"], ["int", "com.google.common.collect.EnumMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.EnumMultiset.add(E, int)"], ["int", "com.google.common.collect.EnumMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.EnumMultiset.setCount(E, int)"], ["void", "com.google.common.collect.EnumMultiset.clear()"], ["java.lang.String", "com.google.common.collect.EnumMultiset.toString()"], ["int", "com.google.common.collect.EnumMultiset.hashCode()"], ["boolean", "com.google.common.collect.EnumMultiset.equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.EnumMultiset.entrySet()"], ["java.util.Set", "com.google.common.collect.EnumMultiset.elementSet()"], ["boolean", "com.google.common.collect.EnumMultiset.retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.EnumMultiset.removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.EnumMultiset.addAll(java.util.Collection)"], ["int", "com.google.common.collect.EnumMultiset.setCount(java.lang.Object, int)"], ["boolean", "com.google.common.collect.EnumMultiset.remove(java.lang.Object)"], ["int", "com.google.common.collect.EnumMultiset.add(java.lang.Object, int)"], ["java.util.Iterator", "com.google.common.collect.EnumMultiset.iterator()"], ["boolean", "com.google.common.collect.EnumMultiset.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EnumMultiset.isEmpty()"], ["<E> com.google.common.collect.EvictingQueue<E>", "com.google.common.collect.EvictingQueue.create(int)"], ["int", "com.google.common.collect.EvictingQueue.remainingCapacity()"], ["boolean", "com.google.common.collect.EvictingQueue.offer(E)"], ["boolean", "com.google.common.collect.EvictingQueue.add(E)"], ["boolean", "com.google.common.collect.EvictingQueue.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.EvictingQueue.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.EvictingQueue.remove(java.lang.Object)"], ["int", "com.google.common.collect.ExplicitOrdering.compare(T, T)"], ["boolean", "com.google.common.collect.ExplicitOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.ExplicitOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.ExplicitOrdering.toString()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl.iterator()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl.retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.FilteredEntryMultimap$AsMap$1EntrySetImpl.size()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1KeySetImpl.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap$1ValuesImpl.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$AsMap.containsKey(java.lang.Object)"], ["void", "com.google.common.collect.FilteredEntryMultimap$AsMap.clear()"], ["java.lang.Object", "com.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.FilteredEntryMultimap$AsMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.util.Map$Entry<K, java.util.Collection<V>>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1$1.apply(java.lang.Object)"], ["int", "com.google.common.collect.FilteredEntryMultimap$Keys$1.size()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$Keys$1.retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.FilteredEntryMultimap$Keys.remove(java.lang.Object, int)"], ["boolean", "com.google.common.collect.FilteredEntryMultimap$ValuePredicate.apply(V)"], ["com.google.common.collect.Multimap<K, V>", "com.google.common.collect.FilteredEntryMultimap.unfiltered()"], ["com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredEntryMultimap.entryPredicate()"], ["int", "com.google.common.collect.FilteredEntryMultimap.size()"], ["boolean", "com.google.common.collect.FilteredEntryMultimap.containsKey(java.lang.Object)"], ["void", "com.google.common.collect.FilteredEntryMultimap.clear()"], ["com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.FilteredEntrySetMultimap.unfiltered()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredEntrySetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.removeAll(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.FilteredEntrySetMultimap.unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.FilteredEntrySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.FilteredKeyListMultimap.unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredKeyListMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.FilteredKeyListMultimap.removeAll(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.FilteredKeyListMultimap.unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredKeyListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(V)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(java.util.Collection<? extends V>)"], ["void", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.add(int, V)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(int, java.util.Collection<? extends V>)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet.add(V)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$AddRejectingSet.addAll(java.util.Collection<? extends V>)"], ["boolean", "com.google.common.collect.FilteredKeyMultimap$Entries.remove(java.lang.Object)"], ["com.google.common.collect.Multimap<K, V>", "com.google.common.collect.FilteredKeyMultimap.unfiltered()"], ["com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredKeyMultimap.entryPredicate()"], ["int", "com.google.common.collect.FilteredKeyMultimap.size()"], ["boolean", "com.google.common.collect.FilteredKeyMultimap.containsKey(java.lang.Object)"], ["void", "com.google.common.collect.FilteredKeyMultimap.clear()"], ["int", "com.google.common.collect.FilteredKeySetMultimap$EntrySet.hashCode()"], ["boolean", "com.google.common.collect.FilteredKeySetMultimap$EntrySet.equals(java.lang.Object)"], ["com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.FilteredKeySetMultimap.unfiltered()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.FilteredKeySetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.removeAll(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.FilteredKeySetMultimap.unfiltered()"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.FilteredKeySetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.FilteredMultimapValues.contains(java.lang.Object)"], ["int", "com.google.common.collect.FilteredMultimapValues.size()"], ["boolean", "com.google.common.collect.FilteredMultimapValues.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.FilteredMultimapValues.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.FilteredMultimapValues.retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.FilteredMultimapValues.clear()"], ["default", "com.google.common.collect.FilteredSetMultimap.com.google.common.collect.Multimap unfiltered()"], ["java.util.Iterator<? extends T>", "com.google.common.collect.FluentIterable$2$1.get(int)"], ["java.lang.Object", "com.google.common.collect.FluentIterable$2$1.get(int)"], ["java.lang.Object", "com.google.common.collect.FluentIterable$FromIterableFunction.apply(java.lang.Object)"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.from(java.lang.Iterable<E>)"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.from(E[])"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.from(com.google.common.collect.FluentIterable<E>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.concat(java.lang.Iterable<? extends T>...)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.of()"], ["<E> com.google.common.collect.FluentIterable<E>", "com.google.common.collect.FluentIterable.of(E, E...)"], ["java.lang.String", "com.google.common.collect.FluentIterable.toString()"], ["int", "com.google.common.collect.FluentIterable.size()"], ["boolean", "com.google.common.collect.FluentIterable.contains(java.lang.Object)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.filter(java.lang.Class<T>)"], ["boolean", "com.google.common.collect.FluentIterable.anyMatch(com.google.common.base.Predicate<? super E>)"], ["boolean", "com.google.common.collect.FluentIterable.allMatch(com.google.common.base.Predicate<? super E>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.transform(com.google.common.base.Function<? super E, T>)"], ["<T> com.google.common.collect.FluentIterable<T>", "com.google.common.collect.FluentIterable.transformAndConcat(com.google.common.base.Function<? super E, ? extends java.lang.Iterable<? extends T>>)"], ["boolean", "com.google.common.collect.FluentIterable.isEmpty()"], ["<V> com.google.common.collect.ImmutableMap<E, V>", "com.google.common.collect.FluentIterable.toMap(com.google.common.base.Function<? super E, V>)"], ["<K> com.google.common.collect.ImmutableListMultimap<K, E>", "com.google.common.collect.FluentIterable.index(com.google.common.base.Function<? super E, K>)"], ["<K> com.google.common.collect.ImmutableMap<K, E>", "com.google.common.collect.FluentIterable.uniqueIndex(com.google.common.base.Function<? super E, K>)"], ["E[]", "com.google.common.collect.FluentIterable.toArray(java.lang.Class<E>)"], ["<C extends java.util.Collection<? super E>> C", "com.google.common.collect.FluentIterable.copyInto(C)"], ["java.lang.String", "com.google.common.collect.FluentIterable.join(com.google.common.base.Joiner)"], ["E", "com.google.common.collect.FluentIterable.get(int)"], ["int", "com.google.common.collect.ForwardingBlockingDeque.remainingCapacity()"], ["void", "com.google.common.collect.ForwardingBlockingDeque.putFirst(E)"], ["void", "com.google.common.collect.ForwardingBlockingDeque.putLast(E)"], ["boolean", "com.google.common.collect.ForwardingBlockingDeque.offerFirst(E, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.collect.ForwardingBlockingDeque.offerLast(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.collect.ForwardingBlockingDeque.takeFirst()"], ["E", "com.google.common.collect.ForwardingBlockingDeque.takeLast()"], ["E", "com.google.common.collect.ForwardingBlockingDeque.pollFirst(long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.collect.ForwardingBlockingDeque.pollLast(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.collect.ForwardingBlockingDeque.put(E)"], ["boolean", "com.google.common.collect.ForwardingBlockingDeque.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.collect.ForwardingBlockingDeque.take()"], ["E", "com.google.common.collect.ForwardingBlockingDeque.poll(long, java.util.concurrent.TimeUnit)"], ["int", "com.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>)"], ["int", "com.google.common.collect.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>, int)"], ["int", "com.google.common.collect.ForwardingCollection.size()"], ["boolean", "com.google.common.collect.ForwardingCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ForwardingCollection.isEmpty()"], ["boolean", "com.google.common.collect.ForwardingCollection.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingCollection.add(E)"], ["boolean", "com.google.common.collect.ForwardingCollection.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingCollection.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ForwardingCollection.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.ForwardingCollection.retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.ForwardingCollection.clear()"], ["java.lang.Object[]", "com.google.common.collect.ForwardingCollection.toArray()"], ["<T> T[]", "com.google.common.collect.ForwardingCollection.toArray(T[])"], ["V", "com.google.common.collect.ForwardingConcurrentMap.putIfAbsent(K, V)"], ["boolean", "com.google.common.collect.ForwardingConcurrentMap.remove(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.ForwardingConcurrentMap.replace(K, V)"], ["boolean", "com.google.common.collect.ForwardingConcurrentMap.replace(K, V, V)"], ["void", "com.google.common.collect.ForwardingDeque.addFirst(E)"], ["void", "com.google.common.collect.ForwardingDeque.addLast(E)"], ["E", "com.google.common.collect.ForwardingDeque.getFirst()"], ["E", "com.google.common.collect.ForwardingDeque.getLast()"], ["boolean", "com.google.common.collect.ForwardingDeque.offerFirst(E)"], ["boolean", "com.google.common.collect.ForwardingDeque.offerLast(E)"], ["E", "com.google.common.collect.ForwardingDeque.peekFirst()"], ["E", "com.google.common.collect.ForwardingDeque.peekLast()"], ["E", "com.google.common.collect.ForwardingDeque.pollFirst()"], ["E", "com.google.common.collect.ForwardingDeque.pollLast()"], ["E", "com.google.common.collect.ForwardingDeque.pop()"], ["void", "com.google.common.collect.ForwardingDeque.push(E)"], ["E", "com.google.common.collect.ForwardingDeque.removeFirst()"], ["E", "com.google.common.collect.ForwardingDeque.removeLast()"], ["boolean", "com.google.common.collect.ForwardingDeque.removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingDeque.removeLastOccurrence(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingIterator.hasNext()"], ["T", "com.google.common.collect.ForwardingIterator.next()"], ["void", "com.google.common.collect.ForwardingIterator.remove()"], ["void", "com.google.common.collect.ForwardingList.add(int, E)"], ["boolean", "com.google.common.collect.ForwardingList.addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.ForwardingList.get(int)"], ["int", "com.google.common.collect.ForwardingList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingList.lastIndexOf(java.lang.Object)"], ["E", "com.google.common.collect.ForwardingList.remove(int)"], ["E", "com.google.common.collect.ForwardingList.set(int, E)"], ["boolean", "com.google.common.collect.ForwardingList.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingList.hashCode()"], ["void", "com.google.common.collect.ForwardingListIterator.add(E)"], ["boolean", "com.google.common.collect.ForwardingListIterator.hasPrevious()"], ["int", "com.google.common.collect.ForwardingListIterator.nextIndex()"], ["E", "com.google.common.collect.ForwardingListIterator.previous()"], ["int", "com.google.common.collect.ForwardingListIterator.previousIndex()"], ["void", "com.google.common.collect.ForwardingListIterator.set(E)"], ["java.util.Collection", "com.google.common.collect.ForwardingListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ForwardingListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingListMultimap.get(java.lang.Object)"], ["com.google.common.collect.ForwardingMap$StandardEntrySet", "com.google.common.collect.ForwardingMap$StandardEntrySet(com.google.common.collect.ForwardingMap)"], ["com.google.common.collect.ForwardingMap$StandardKeySet", "com.google.common.collect.ForwardingMap$StandardKeySet(com.google.common.collect.ForwardingMap)"], ["com.google.common.collect.ForwardingMap$StandardValues", "com.google.common.collect.ForwardingMap$StandardValues(com.google.common.collect.ForwardingMap)"], ["int", "com.google.common.collect.ForwardingMap.size()"], ["boolean", "com.google.common.collect.ForwardingMap.isEmpty()"], ["V", "com.google.common.collect.ForwardingMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.ForwardingMap.clear()"], ["boolean", "com.google.common.collect.ForwardingMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingMap.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ForwardingMap.get(java.lang.Object)"], ["V", "com.google.common.collect.ForwardingMap.put(K, V)"], ["void", "com.google.common.collect.ForwardingMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.ForwardingMap.entrySet()"], ["boolean", "com.google.common.collect.ForwardingMap.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMap.hashCode()"], ["K", "com.google.common.collect.ForwardingMapEntry.getKey()"], ["V", "com.google.common.collect.ForwardingMapEntry.getValue()"], ["V", "com.google.common.collect.ForwardingMapEntry.setValue(V)"], ["boolean", "com.google.common.collect.ForwardingMapEntry.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMapEntry.hashCode()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.ForwardingMultimap.asMap()"], ["void", "com.google.common.collect.ForwardingMultimap.clear()"], ["boolean", "com.google.common.collect.ForwardingMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingMultimap.containsValue(java.lang.Object)"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.ForwardingMultimap.entries()"], ["boolean", "com.google.common.collect.ForwardingMultimap.isEmpty()"], ["boolean", "com.google.common.collect.ForwardingMultimap.put(K, V)"], ["boolean", "com.google.common.collect.ForwardingMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.ForwardingMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.ForwardingMultimap.remove(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultimap.size()"], ["boolean", "com.google.common.collect.ForwardingMultimap.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultimap.hashCode()"], ["com.google.common.collect.ForwardingMultiset$StandardElementSet", "com.google.common.collect.ForwardingMultiset$StandardElementSet(com.google.common.collect.ForwardingMultiset)"], ["int", "com.google.common.collect.ForwardingMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultiset.add(E, int)"], ["int", "com.google.common.collect.ForwardingMultiset.remove(java.lang.Object, int)"], ["boolean", "com.google.common.collect.ForwardingMultiset.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingMultiset.hashCode()"], ["int", "com.google.common.collect.ForwardingMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.ForwardingMultiset.setCount(E, int, int)"], ["boolean", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()"], ["void", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.remove()"], ["java.lang.Object", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap$1.next()"], ["com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap(com.google.common.collect.ForwardingNavigableMap)"], ["void", "com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet", "com.google.common.collect.ForwardingNavigableMap$StandardNavigableKeySet(com.google.common.collect.ForwardingNavigableMap)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.lowerEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.floorEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.ceilingEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.higherEntry(K)"], ["K", "com.google.common.collect.ForwardingNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ForwardingNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.descendingMap()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.ForwardingNavigableMap.tailMap(K, boolean)"], ["com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet", "com.google.common.collect.ForwardingNavigableSet$StandardDescendingSet(com.google.common.collect.ForwardingNavigableSet)"], ["E", "com.google.common.collect.ForwardingNavigableSet.lower(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.floor(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.ceiling(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.higher(E)"], ["E", "com.google.common.collect.ForwardingNavigableSet.pollFirst()"], ["E", "com.google.common.collect.ForwardingNavigableSet.pollLast()"], ["java.lang.String", "com.google.common.collect.ForwardingObject.toString()"], ["boolean", "com.google.common.collect.ForwardingQueue.offer(E)"], ["E", "com.google.common.collect.ForwardingQueue.poll()"], ["E", "com.google.common.collect.ForwardingQueue.remove()"], ["E", "com.google.common.collect.ForwardingQueue.peek()"], ["E", "com.google.common.collect.ForwardingQueue.element()"], ["boolean", "com.google.common.collect.ForwardingSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingSet.hashCode()"], ["com.google.common.collect.ForwardingSetMultimap", "com.google.common.collect.ForwardingSetMultimap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.ForwardingSetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSetMultimap.entries()"], ["com.google.common.collect.ForwardingSortedMap$StandardKeySet", "com.google.common.collect.ForwardingSortedMap$StandardKeySet(com.google.common.collect.ForwardingSortedMap)"], ["java.util.Comparator<? super K>", "com.google.common.collect.ForwardingSortedMap.comparator()"], ["K", "com.google.common.collect.ForwardingSortedMap.firstKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.ForwardingSortedMap.headMap(K)"], ["K", "com.google.common.collect.ForwardingSortedMap.lastKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.ForwardingSortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.ForwardingSortedMap.tailMap(K)"], ["com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset", "com.google.common.collect.ForwardingSortedMultiset$StandardDescendingMultiset(com.google.common.collect.ForwardingSortedMultiset)"], ["com.google.common.collect.ForwardingSortedMultiset$StandardElementSet", "com.google.common.collect.ForwardingSortedMultiset$StandardElementSet(com.google.common.collect.ForwardingSortedMultiset)"], ["java.util.Comparator<? super E>", "com.google.common.collect.ForwardingSortedMultiset.comparator()"], ["java.util.Set", "com.google.common.collect.ForwardingSortedMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.ForwardingSortedMultiset.elementSet()"], ["java.util.Comparator<? super E>", "com.google.common.collect.ForwardingSortedSet.comparator()"], ["E", "com.google.common.collect.ForwardingSortedSet.first()"], ["E", "com.google.common.collect.ForwardingSortedSet.last()"], ["java.util.Comparator<? super V>", "com.google.common.collect.ForwardingSortedSetMultimap.valueComparator()"], ["java.util.Set", "com.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ForwardingSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.ForwardingTable.cellSet()"], ["void", "com.google.common.collect.ForwardingTable.clear()"], ["java.util.Map<R, V>", "com.google.common.collect.ForwardingTable.column(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.ForwardingTable.columnMap()"], ["boolean", "com.google.common.collect.ForwardingTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ForwardingTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ForwardingTable.isEmpty()"], ["V", "com.google.common.collect.ForwardingTable.put(R, C, V)"], ["void", "com.google.common.collect.ForwardingTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.ForwardingTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.ForwardingTable.row(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.ForwardingTable.rowMap()"], ["int", "com.google.common.collect.ForwardingTable.size()"], ["boolean", "com.google.common.collect.ForwardingTable.equals(java.lang.Object)"], ["int", "com.google.common.collect.ForwardingTable.hashCode()"], ["boolean", "com.google.common.collect.GeneralRange.equals(java.lang.Object)"], ["int", "com.google.common.collect.GeneralRange.hashCode()"], ["java.lang.String", "com.google.common.collect.GeneralRange.toString()"], ["java.util.Map<C, V>", "com.google.common.collect.HashBasedTable$Factory.get()"], ["java.lang.Object", "com.google.common.collect.HashBasedTable$Factory.get()"], ["<R, C, V> com.google.common.collect.HashBasedTable<R, C, V>", "com.google.common.collect.HashBasedTable.create()"], ["<R, C, V> com.google.common.collect.HashBasedTable<R, C, V>", "com.google.common.collect.HashBasedTable.create(int, int)"], ["<R, C, V> com.google.common.collect.HashBasedTable<R, C, V>", "com.google.common.collect.HashBasedTable.create(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["boolean", "com.google.common.collect.HashBasedTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.HashBasedTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashBasedTable.equals(java.lang.Object)"], ["V", "com.google.common.collect.HashBasedTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map", "com.google.common.collect.HashBasedTable.columnMap()"], ["java.util.Map", "com.google.common.collect.HashBasedTable.rowMap()"], ["java.util.Collection", "com.google.common.collect.HashBasedTable.values()"], ["java.util.Set", "com.google.common.collect.HashBasedTable.columnKeySet()"], ["java.util.Set", "com.google.common.collect.HashBasedTable.rowKeySet()"], ["java.util.Map", "com.google.common.collect.HashBasedTable.column(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.HashBasedTable.row(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.HashBasedTable.cellSet()"], ["java.lang.Object", "com.google.common.collect.HashBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.HashBasedTable.clear()"], ["int", "com.google.common.collect.HashBasedTable.size()"], ["boolean", "com.google.common.collect.HashBasedTable.isEmpty()"], ["java.lang.String", "com.google.common.collect.HashBasedTable.toString()"], ["int", "com.google.common.collect.HashBasedTable.hashCode()"], ["void", "com.google.common.collect.HashBasedTable.putAll(com.google.common.collect.Table)"], ["K", "com.google.common.collect.HashBiMap$1$MapEntry.getKey()"], ["V", "com.google.common.collect.HashBiMap$1$MapEntry.getValue()"], ["V", "com.google.common.collect.HashBiMap$1$MapEntry.setValue(V)"], ["V", "com.google.common.collect.HashBiMap$Inverse$1$InverseEntry.getKey()"], ["K", "com.google.common.collect.HashBiMap$Inverse$1$InverseEntry.getValue()"], ["K", "com.google.common.collect.HashBiMap$Inverse$1$InverseEntry.setValue(K)"], ["boolean", "com.google.common.collect.HashBiMap$Inverse$InverseKeySet.remove(java.lang.Object)"], ["int", "com.google.common.collect.HashBiMap$Inverse.size()"], ["void", "com.google.common.collect.HashBiMap$Inverse.clear()"], ["boolean", "com.google.common.collect.HashBiMap$Inverse.containsKey(java.lang.Object)"], ["K", "com.google.common.collect.HashBiMap$Inverse.get(java.lang.Object)"], ["K", "com.google.common.collect.HashBiMap$Inverse.put(V, K)"], ["K", "com.google.common.collect.HashBiMap$Inverse.forcePut(V, K)"], ["K", "com.google.common.collect.HashBiMap$Inverse.remove(java.lang.Object)"], ["com.google.common.collect.BiMap<K, V>", "com.google.common.collect.HashBiMap$Inverse.inverse()"], ["void", "com.google.common.collect.HashBiMap$Inverse.forEach(java.util.function.BiConsumer<? super V, ? super K>)"], ["void", "com.google.common.collect.HashBiMap$Inverse.replaceAll(java.util.function.BiFunction<? super V, ? super K, ? extends K>)"], ["java.util.Collection", "com.google.common.collect.HashBiMap$Inverse.values()"], ["boolean", "com.google.common.collect.HashBiMap$Itr.hasNext()"], ["T", "com.google.common.collect.HashBiMap$Itr.next()"], ["void", "com.google.common.collect.HashBiMap$Itr.remove()"], ["boolean", "com.google.common.collect.HashBiMap$KeySet.remove(java.lang.Object)"], ["<K, V> com.google.common.collect.HashBiMap<K, V>", "com.google.common.collect.HashBiMap.create()"], ["<K, V> com.google.common.collect.HashBiMap<K, V>", "com.google.common.collect.HashBiMap.create(int)"], ["<K, V> com.google.common.collect.HashBiMap<K, V>", "com.google.common.collect.HashBiMap.create(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.HashBiMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.HashBiMap.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.HashBiMap.get(java.lang.Object)"], ["V", "com.google.common.collect.HashBiMap.put(K, V)"], ["V", "com.google.common.collect.HashBiMap.forcePut(K, V)"], ["V", "com.google.common.collect.HashBiMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.HashBiMap.clear()"], ["int", "com.google.common.collect.HashBiMap.size()"], ["void", "com.google.common.collect.HashBiMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["void", "com.google.common.collect.HashBiMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.HashBiMap.inverse()"], ["java.util.Set", "com.google.common.collect.HashBiMap.entrySet()"], ["java.util.Collection", "com.google.common.collect.HashBiMap.values()"], ["<K, V> com.google.common.collect.HashMultimap<K, V>", "com.google.common.collect.HashMultimap.create()"], ["<K, V> com.google.common.collect.HashMultimap<K, V>", "com.google.common.collect.HashMultimap.create(int, int)"], ["<K, V> com.google.common.collect.HashMultimap<K, V>", "com.google.common.collect.HashMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.HashMultimap.equals(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "com.google.common.collect.HashMultimap.asMap()"], ["java.util.Set", "com.google.common.collect.HashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.HashMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.HashMultimap.entries()"], ["java.util.Set", "com.google.common.collect.HashMultimap.get(java.lang.Object)"], ["void", "com.google.common.collect.HashMultimap.forEach(java.util.function.BiConsumer)"], ["java.util.Collection", "com.google.common.collect.HashMultimap.values()"], ["void", "com.google.common.collect.HashMultimap.clear()"], ["boolean", "com.google.common.collect.HashMultimap.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.HashMultimap.size()"], ["java.lang.String", "com.google.common.collect.HashMultimap.toString()"], ["int", "com.google.common.collect.HashMultimap.hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.HashMultimap.keys()"], ["java.util.Set", "com.google.common.collect.HashMultimap.keySet()"], ["boolean", "com.google.common.collect.HashMultimap.putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.HashMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.HashMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultimap.isEmpty()"], ["<E> com.google.common.collect.HashMultiset<E>", "com.google.common.collect.HashMultiset.create()"], ["<E> com.google.common.collect.HashMultiset<E>", "com.google.common.collect.HashMultiset.create(int)"], ["<E> com.google.common.collect.HashMultiset<E>", "com.google.common.collect.HashMultiset.create(java.lang.Iterable<? extends E>)"], ["int", "com.google.common.collect.HashMultiset.setCount(java.lang.Object, int)"], ["int", "com.google.common.collect.HashMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.HashMultiset.add(java.lang.Object, int)"], ["int", "com.google.common.collect.HashMultiset.count(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.HashMultiset.iterator()"], ["int", "com.google.common.collect.HashMultiset.size()"], ["void", "com.google.common.collect.HashMultiset.clear()"], ["void", "com.google.common.collect.HashMultiset.forEachEntry(java.util.function.ObjIntConsumer)"], ["java.util.Set", "com.google.common.collect.HashMultiset.entrySet()"], ["java.lang.String", "com.google.common.collect.HashMultiset.toString()"], ["int", "com.google.common.collect.HashMultiset.hashCode()"], ["boolean", "com.google.common.collect.HashMultiset.equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.HashMultiset.elementSet()"], ["boolean", "com.google.common.collect.HashMultiset.retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.HashMultiset.removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.HashMultiset.addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.HashMultiset.setCount(java.lang.Object, int, int)"], ["boolean", "com.google.common.collect.HashMultiset.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultiset.add(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultiset.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.HashMultiset.isEmpty()"], ["boolean", "com.google.common.collect.ImmutableAsList.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableAsList.size()"], ["boolean", "com.google.common.collect.ImmutableAsList.isEmpty()"], ["com.google.common.collect.ImmutableBiMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder()"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.put(K, V)"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.putAll(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.orderEntriesByValue(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap$Builder.build()"], ["com.google.common.collect.ImmutableMap", "com.google.common.collect.ImmutableBiMap$Builder.build()"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.orderEntriesByValue(java.util.Comparator)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.putAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.putAll(java.util.Map)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableBiMap$Builder.put(java.lang.Object, java.lang.Object)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableBiMap<K, V>>", "com.google.common.collect.ImmutableBiMap.toImmutableBiMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of()"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap.builder()"], ["<K, V> com.google.common.collect.ImmutableBiMap$Builder<K, V>", "com.google.common.collect.ImmutableBiMap.builderWithExpectedSize(int)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.copyOf(java.util.Map<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.ImmutableBiMap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["V", "com.google.common.collect.ImmutableBiMap.forcePut(K, V)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableBiMap.values()"], ["java.util.Collection", "com.google.common.collect.ImmutableBiMap.values()"], ["com.google.common.collect.BiMap", "com.google.common.collect.ImmutableBiMap.inverse()"], ["java.util.Set", "com.google.common.collect.ImmutableBiMap.values()"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.ImmutableBiMapFauxverideShim.toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.ImmutableBiMapFauxverideShim.toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)"], ["com.google.common.collect.ImmutableClassToInstanceMap$Builder", "com.google.common.collect.ImmutableClassToInstanceMap$Builder()"], ["<T extends B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "com.google.common.collect.ImmutableClassToInstanceMap$Builder.put(java.lang.Class<T>, T)"], ["<T extends B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "com.google.common.collect.ImmutableClassToInstanceMap$Builder.putAll(java.util.Map<? extends java.lang.Class<? extends T>, ? extends T>)"], ["<B> com.google.common.collect.ImmutableClassToInstanceMap<B>", "com.google.common.collect.ImmutableClassToInstanceMap.of()"], ["<B, T extends B> com.google.common.collect.ImmutableClassToInstanceMap<B>", "com.google.common.collect.ImmutableClassToInstanceMap.of(java.lang.Class<T>, T)"], ["<B> com.google.common.collect.ImmutableClassToInstanceMap$Builder<B>", "com.google.common.collect.ImmutableClassToInstanceMap.builder()"], ["<B, S extends B> com.google.common.collect.ImmutableClassToInstanceMap<B>", "com.google.common.collect.ImmutableClassToInstanceMap.copyOf(java.util.Map<? extends java.lang.Class<? extends S>, ? extends S>)"], ["<T extends B> T", "com.google.common.collect.ImmutableClassToInstanceMap.getInstance(java.lang.Class<T>)"], ["<T extends B> T", "com.google.common.collect.ImmutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder.add(java.lang.Object)"], ["java.lang.Object[]", "com.google.common.collect.ImmutableCollection.toArray()"], ["<T> T[]", "com.google.common.collect.ImmutableCollection.toArray(T[])"], ["boolean", "com.google.common.collect.ImmutableCollection.add(E)"], ["boolean", "com.google.common.collect.ImmutableCollection.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableCollection.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.ImmutableCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ImmutableCollection.removeIf(java.util.function.Predicate<? super E>)"], ["boolean", "com.google.common.collect.ImmutableCollection.retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.ImmutableCollection.clear()"], ["java.util.Iterator", "com.google.common.collect.ImmutableCollection.iterator()"], ["K", "com.google.common.collect.ImmutableEntry.getKey()"], ["V", "com.google.common.collect.ImmutableEntry.getValue()"], ["V", "com.google.common.collect.ImmutableEntry.setValue(V)"], ["int", "com.google.common.collect.ImmutableEnumMap.size()"], ["boolean", "com.google.common.collect.ImmutableEnumMap.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.ImmutableEnumMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableEnumMap.equals(java.lang.Object)"], ["void", "com.google.common.collect.ImmutableEnumMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["void", "com.google.common.collect.ImmutableEnumSet.forEach(java.util.function.Consumer<? super E>)"], ["int", "com.google.common.collect.ImmutableEnumSet.size()"], ["boolean", "com.google.common.collect.ImmutableEnumSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableEnumSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.ImmutableEnumSet.isEmpty()"], ["boolean", "com.google.common.collect.ImmutableEnumSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableEnumSet.hashCode()"], ["java.lang.String", "com.google.common.collect.ImmutableEnumSet.toString()"], ["java.util.Iterator", "com.google.common.collect.ImmutableEnumSet.iterator()"], ["com.google.common.collect.ImmutableList$Builder", "com.google.common.collect.ImmutableList$Builder()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "com.google.common.collect.ImmutableList$Builder.add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableList$Builder.build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableList$Builder.add(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableList$ReverseImmutableList.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList$ReverseImmutableList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList$ReverseImmutableList.lastIndexOf(java.lang.Object)"], ["E", "com.google.common.collect.ImmutableList$ReverseImmutableList.get(int)"], ["int", "com.google.common.collect.ImmutableList$ReverseImmutableList.size()"], ["java.util.List", "com.google.common.collect.ImmutableList$ReverseImmutableList.subList(int, int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$ReverseImmutableList.listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$ReverseImmutableList.listIterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableList$ReverseImmutableList.iterator()"], ["int", "com.google.common.collect.ImmutableList$SubList.size()"], ["E", "com.google.common.collect.ImmutableList$SubList.get(int)"], ["java.util.List", "com.google.common.collect.ImmutableList$SubList.subList(int, int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$SubList.listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList$SubList.listIterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableList$SubList.iterator()"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableList<E>>", "com.google.common.collect.ImmutableList.toImmutableList()"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of()"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.of(E, E, E, E, E, E, E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.copyOf(E[])"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.sortedCopyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.ImmutableList.sortedCopyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["void", "com.google.common.collect.ImmutableList.forEach(java.util.function.Consumer<? super E>)"], ["int", "com.google.common.collect.ImmutableList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList.lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableList.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableList.addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.ImmutableList.set(int, E)"], ["void", "com.google.common.collect.ImmutableList.add(int, E)"], ["E", "com.google.common.collect.ImmutableList.remove(int)"], ["void", "com.google.common.collect.ImmutableList.replaceAll(java.util.function.UnaryOperator<E>)"], ["void", "com.google.common.collect.ImmutableList.sort(java.util.Comparator<? super E>)"], ["boolean", "com.google.common.collect.ImmutableList.equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableList.hashCode()"], ["<E> com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList.builder()"], ["<E> com.google.common.collect.ImmutableList$Builder<E>", "com.google.common.collect.ImmutableList.builderWithExpectedSize(int)"], ["java.util.Iterator", "com.google.common.collect.ImmutableList.iterator()"], ["java.util.List", "com.google.common.collect.ImmutableList.subList(int, int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList.listIterator(int)"], ["java.util.ListIterator", "com.google.common.collect.ImmutableList.listIterator()"], ["com.google.common.collect.ImmutableListMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder()"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.put(K, V)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(K, V...)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap$Builder.build()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableListMultimap$Builder.build()"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.orderValuesBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.orderKeysBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(com.google.common.collect.Multimap)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.putAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.Object, java.lang.Object)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableListMultimap<K, V>>", "com.google.common.collect.ImmutableListMultimap.toImmutableListMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableListMultimap<K, V>>", "com.google.common.collect.ImmutableListMultimap.flatteningToImmutableListMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>>)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of()"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableListMultimap$Builder<K, V>", "com.google.common.collect.ImmutableListMultimap.builder()"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.ImmutableListMultimap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableListMultimap<V, K>", "com.google.common.collect.ImmutableListMultimap.inverse()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableListMultimap.inverse()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableListMultimap.get(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ImmutableListMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)"], ["java.util.List", "com.google.common.collect.ImmutableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.List", "com.google.common.collect.ImmutableListMultimap.removeAll(java.lang.Object)"], ["java.util.List", "com.google.common.collect.ImmutableListMultimap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMap$1.hasNext()"], ["K", "com.google.common.collect.ImmutableMap$1.next()"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableMap$Builder()"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.put(K, V)"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.putAll(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap$Builder.orderEntriesByValue(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap$Builder.build()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl.iterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap$1EntrySetImpl.iterator()"], ["java.util.Set", "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap.entrySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap.values()"], ["java.util.Set", "com.google.common.collect.ImmutableMap$IteratorBasedImmutableMap.keySet()"], ["K", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.getKey()"], ["java.lang.Object", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1$1.getValue()"], ["boolean", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.hasNext()"], ["java.util.Map$Entry<K, com.google.common.collect.ImmutableSet<V>>", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.next()"], ["java.lang.Object", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1.next()"], ["int", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.size()"], ["boolean", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.hashCode()"], ["java.lang.Object", "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.get(java.lang.Object)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.ImmutableMap.toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.ImmutableMap.toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of()"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap.builder()"], ["<K, V> com.google.common.collect.ImmutableMap$Builder<K, V>", "com.google.common.collect.ImmutableMap.builderWithExpectedSize(int)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.copyOf(java.util.Map<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.ImmutableMap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["V", "com.google.common.collect.ImmutableMap.put(K, V)"], ["V", "com.google.common.collect.ImmutableMap.putIfAbsent(K, V)"], ["boolean", "com.google.common.collect.ImmutableMap.replace(K, V, V)"], ["V", "com.google.common.collect.ImmutableMap.replace(K, V)"], ["V", "com.google.common.collect.ImmutableMap.computeIfAbsent(K, java.util.function.Function<? super K, ? extends V>)"], ["V", "com.google.common.collect.ImmutableMap.computeIfPresent(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.collect.ImmutableMap.compute(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.collect.ImmutableMap.merge(K, V, java.util.function.BiFunction<? super V, ? super V, ? extends V>)"], ["void", "com.google.common.collect.ImmutableMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.ImmutableMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.collect.ImmutableMap.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMap.remove(java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.ImmutableMap.clear()"], ["boolean", "com.google.common.collect.ImmutableMap.isEmpty()"], ["boolean", "com.google.common.collect.ImmutableMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMap.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.ImmutableMap.getOrDefault(java.lang.Object, V)"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMap.entrySet()"], ["com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableMap.asMultimap()"], ["boolean", "com.google.common.collect.ImmutableMap.equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMap.hashCode()"], ["java.lang.String", "com.google.common.collect.ImmutableMap.toString()"], ["java.util.Set", "com.google.common.collect.ImmutableMap.entrySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableMap.values()"], ["java.util.Set", "com.google.common.collect.ImmutableMap.keySet()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.iterator()"], ["java.util.Spliterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.spliterator()"], ["void", "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.forEach(java.util.function.Consumer<? super java.util.Map$Entry<K, V>>)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.iterator()"], ["int", "com.google.common.collect.ImmutableMapEntrySet.size()"], ["boolean", "com.google.common.collect.ImmutableMapEntrySet.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMapEntrySet.hashCode()"], ["int", "com.google.common.collect.ImmutableMapKeySet.size()"], ["boolean", "com.google.common.collect.ImmutableMapKeySet.contains(java.lang.Object)"], ["void", "com.google.common.collect.ImmutableMapKeySet.forEach(java.util.function.Consumer<? super K>)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMapKeySet.iterator()"], ["boolean", "com.google.common.collect.ImmutableMapValues$1.hasNext()"], ["V", "com.google.common.collect.ImmutableMapValues$1.next()"], ["V", "com.google.common.collect.ImmutableMapValues$2.get(int)"], ["int", "com.google.common.collect.ImmutableMapValues.size()"], ["boolean", "com.google.common.collect.ImmutableMapValues.contains(java.lang.Object)"], ["void", "com.google.common.collect.ImmutableMapValues.forEach(java.util.function.Consumer<? super V>)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMapValues.iterator()"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableMultimap$Builder()"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.put(K, V)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(K, V...)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap$Builder.build()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMultimap$EntryCollection.iterator()"], ["int", "com.google.common.collect.ImmutableMultimap$EntryCollection.size()"], ["boolean", "com.google.common.collect.ImmutableMultimap$EntryCollection.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultimap$EntryCollection.iterator()"], ["boolean", "com.google.common.collect.ImmutableMultimap$Itr.hasNext()"], ["T", "com.google.common.collect.ImmutableMultimap$Itr.next()"], ["boolean", "com.google.common.collect.ImmutableMultimap$Keys.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultimap$Keys.count(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultimap$Keys.size()"], ["java.util.Set", "com.google.common.collect.ImmutableMultimap$Keys.elementSet()"], ["boolean", "com.google.common.collect.ImmutableMultimap$Values.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultimap$Values.size()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultimap$Values.iterator()"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of()"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableMultimap$Builder<K, V>", "com.google.common.collect.ImmutableMultimap.builder()"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableMultimap<K, V>", "com.google.common.collect.ImmutableMultimap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["void", "com.google.common.collect.ImmutableMultimap.clear()"], ["boolean", "com.google.common.collect.ImmutableMultimap.put(K, V)"], ["boolean", "com.google.common.collect.ImmutableMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.ImmutableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.ImmutableMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultimap.containsValue(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultimap.size()"], ["com.google.common.collect.ImmutableMap<K, java.util.Collection<V>>", "com.google.common.collect.ImmutableMultimap.asMap()"], ["com.google.common.collect.ImmutableCollection<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableMultimap.entries()"], ["void", "com.google.common.collect.ImmutableMultimap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["java.lang.String", "com.google.common.collect.ImmutableMultimap.toString()"], ["int", "com.google.common.collect.ImmutableMultimap.hashCode()"], ["boolean", "com.google.common.collect.ImmutableMultimap.equals(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ImmutableMultimap.asMap()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.values()"], ["com.google.common.collect.Multiset", "com.google.common.collect.ImmutableMultimap.keys()"], ["java.util.Set", "com.google.common.collect.ImmutableMultimap.keySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.ImmutableMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultimap.isEmpty()"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableMultimap.removeAll(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableMultiset$1.hasNext()"], ["E", "com.google.common.collect.ImmutableMultiset$1.next()"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableMultiset$Builder()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableMultiset$Builder.build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableMultiset$Builder.add(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultiset$EntrySet.size()"], ["boolean", "com.google.common.collect.ImmutableMultiset$EntrySet.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultiset$EntrySet.hashCode()"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableMultiset<E>>", "com.google.common.collect.ImmutableMultiset.toImmutableMultiset()"], ["<T, E> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMultiset<E>>", "com.google.common.collect.ImmutableMultiset.toImmutableMultiset(java.util.function.Function<? super T, ? extends E>, java.util.function.ToIntFunction<? super T>)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of()"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.copyOf(E[])"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.ImmutableMultiset.copyOf(java.util.Iterator<? extends E>)"], ["boolean", "com.google.common.collect.ImmutableMultiset.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultiset.add(E, int)"], ["int", "com.google.common.collect.ImmutableMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.ImmutableMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.ImmutableMultiset.setCount(E, int, int)"], ["boolean", "com.google.common.collect.ImmutableMultiset.equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableMultiset.hashCode()"], ["java.lang.String", "com.google.common.collect.ImmutableMultiset.toString()"], ["<E> com.google.common.collect.ImmutableMultiset$Builder<E>", "com.google.common.collect.ImmutableMultiset.builder()"], ["java.util.Iterator", "com.google.common.collect.ImmutableMultiset.iterator()"], ["java.util.Set", "com.google.common.collect.ImmutableMultiset.entrySet()"], ["java.util.Set", "com.google.common.collect.ImmutableMultiset.elementSet()"], ["int", "com.google.common.collect.ImmutableRangeMap$1.size()"], ["java.lang.Object", "com.google.common.collect.ImmutableRangeMap$1.get(int)"], ["com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap$2.subRangeMap(com.google.common.collect.Range<K>)"], ["com.google.common.collect.RangeMap", "com.google.common.collect.ImmutableRangeMap$2.subRangeMap(com.google.common.collect.Range)"], ["java.util.Map", "com.google.common.collect.ImmutableRangeMap$2.asDescendingMapOfRanges()"], ["java.util.Map", "com.google.common.collect.ImmutableRangeMap$2.asMapOfRanges()"], ["com.google.common.collect.ImmutableRangeMap$Builder", "com.google.common.collect.ImmutableRangeMap$Builder()"], ["com.google.common.collect.ImmutableRangeMap$Builder<K, V>", "com.google.common.collect.ImmutableRangeMap$Builder.put(com.google.common.collect.Range<K>, V)"], ["com.google.common.collect.ImmutableRangeMap$Builder<K, V>", "com.google.common.collect.ImmutableRangeMap$Builder.putAll(com.google.common.collect.RangeMap<K, ? extends V>)"], ["com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap$Builder.build()"], ["<T, K extends java.lang.Comparable<? super K>, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableRangeMap<K, V>>", "com.google.common.collect.ImmutableRangeMap.toImmutableRangeMap(java.util.function.Function<? super T, com.google.common.collect.Range<K>>, java.util.function.Function<? super T, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.of()"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.of(com.google.common.collect.Range<K>, V)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.copyOf(com.google.common.collect.RangeMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableRangeMap$Builder<K, V>", "com.google.common.collect.ImmutableRangeMap.builder()"], ["V", "com.google.common.collect.ImmutableRangeMap.get(K)"], ["java.util.Map$Entry<com.google.common.collect.Range<K>, V>", "com.google.common.collect.ImmutableRangeMap.getEntry(K)"], ["void", "com.google.common.collect.ImmutableRangeMap.put(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.ImmutableRangeMap.putCoalescing(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.ImmutableRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)"], ["void", "com.google.common.collect.ImmutableRangeMap.clear()"], ["void", "com.google.common.collect.ImmutableRangeMap.remove(com.google.common.collect.Range<K>)"], ["com.google.common.collect.ImmutableMap<com.google.common.collect.Range<K>, V>", "com.google.common.collect.ImmutableRangeMap.asMapOfRanges()"], ["com.google.common.collect.ImmutableMap<com.google.common.collect.Range<K>, V>", "com.google.common.collect.ImmutableRangeMap.asDescendingMapOfRanges()"], ["com.google.common.collect.ImmutableRangeMap<K, V>", "com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range<K>)"], ["int", "com.google.common.collect.ImmutableRangeMap.hashCode()"], ["boolean", "com.google.common.collect.ImmutableRangeMap.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ImmutableRangeMap.toString()"], ["com.google.common.collect.RangeMap", "com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range)"], ["java.util.Map", "com.google.common.collect.ImmutableRangeMap.asDescendingMapOfRanges()"], ["java.util.Map", "com.google.common.collect.ImmutableRangeMap.asMapOfRanges()"], ["int", "com.google.common.collect.ImmutableRangeSet$1.size()"], ["java.lang.Object", "com.google.common.collect.ImmutableRangeSet$1.get(int)"], ["int", "com.google.common.collect.ImmutableRangeSet$AsSet.size()"], ["boolean", "com.google.common.collect.ImmutableRangeSet$AsSet.contains(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ImmutableRangeSet$AsSet.toString()"], ["java.util.Iterator", "com.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableRangeSet$AsSet.iterator()"], ["com.google.common.collect.ImmutableRangeSet$Builder", "com.google.common.collect.ImmutableRangeSet$Builder()"], ["int", "com.google.common.collect.ImmutableRangeSet$ComplementRanges.size()"], ["java.lang.Object", "com.google.common.collect.ImmutableRangeSet$ComplementRanges.get(int)"], ["<E extends java.lang.Comparable<? super E>> java.util.stream.Collector<com.google.common.collect.Range<E>, ?, com.google.common.collect.ImmutableRangeSet<E>>", "com.google.common.collect.ImmutableRangeSet.toImmutableRangeSet()"], ["<C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.of()"], ["<C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.of(com.google.common.collect.Range<C>)"], ["<C extends java.lang.Comparable> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.copyOf(com.google.common.collect.RangeSet<C>)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.unionOf(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.ImmutableRangeSet<C>", "com.google.common.collect.ImmutableRangeSet.copyOf(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["boolean", "com.google.common.collect.ImmutableRangeSet.intersects(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.ImmutableRangeSet.encloses(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.ImmutableRangeSet.isEmpty()"], ["void", "com.google.common.collect.ImmutableRangeSet.add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.addAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.addAll(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["void", "com.google.common.collect.ImmutableRangeSet.remove(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.removeAll(com.google.common.collect.RangeSet<C>)"], ["void", "com.google.common.collect.ImmutableRangeSet.removeAll(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.ImmutableRangeSet$Builder<C>", "com.google.common.collect.ImmutableRangeSet.builder()"], ["boolean", "com.google.common.collect.ImmutableRangeSet.equals(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableRangeSet.enclosesAll(com.google.common.collect.RangeSet)"], ["void", "com.google.common.collect.ImmutableRangeSet.clear()"], ["boolean", "com.google.common.collect.ImmutableRangeSet.contains(java.lang.Comparable)"], ["com.google.common.collect.RangeSet", "com.google.common.collect.ImmutableRangeSet.subRangeSet(com.google.common.collect.Range)"], ["com.google.common.collect.RangeSet", "com.google.common.collect.ImmutableRangeSet.complement()"], ["java.util.Set", "com.google.common.collect.ImmutableRangeSet.asDescendingSetOfRanges()"], ["java.util.Set", "com.google.common.collect.ImmutableRangeSet.asRanges()"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSet$Builder()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "com.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSet$Builder.build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSet$Builder.add(java.lang.Object)"], ["E", "com.google.common.collect.ImmutableSet$Indexed$1.get(int)"], ["void", "com.google.common.collect.ImmutableSet$Indexed.forEach(java.util.function.Consumer<? super E>)"], ["java.util.Iterator", "com.google.common.collect.ImmutableSet$Indexed.iterator()"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableSet<E>>", "com.google.common.collect.ImmutableSet.toImmutableSet()"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of()"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.ImmutableSet.copyOf(E[])"], ["boolean", "com.google.common.collect.ImmutableSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSet.hashCode()"], ["<E> com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet.builder()"], ["<E> com.google.common.collect.ImmutableSet$Builder<E>", "com.google.common.collect.ImmutableSet.builderWithExpectedSize(int)"], ["java.util.Iterator", "com.google.common.collect.ImmutableSet.iterator()"], ["com.google.common.collect.ImmutableSetMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder()"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.put(K, V)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, java.lang.Iterable<? extends V>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(K, V...)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap$Builder.build()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableSetMultimap$Builder.build()"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.orderValuesBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.orderKeysBy(java.util.Comparator)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(com.google.common.collect.Multimap)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Object[])"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.putAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMultimap$Builder", "com.google.common.collect.ImmutableSetMultimap$Builder.put(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableSetMultimap$EntrySet.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSetMultimap$EntrySet.size()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()"], ["java.util.Iterator", "com.google.common.collect.ImmutableSetMultimap$EntrySet.iterator()"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableSetMultimap<K, V>>", "com.google.common.collect.ImmutableSetMultimap.toImmutableSetMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableSetMultimap<K, V>>", "com.google.common.collect.ImmutableSetMultimap.flatteningToImmutableSetMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>>)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of()"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap$Builder<K, V>", "com.google.common.collect.ImmutableSetMultimap.builder()"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.copyOf(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableSetMultimap<K, V>", "com.google.common.collect.ImmutableSetMultimap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableSetMultimap<V, K>", "com.google.common.collect.ImmutableSetMultimap.inverse()"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSetMultimap.entries()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.entries()"], ["com.google.common.collect.ImmutableMultimap", "com.google.common.collect.ImmutableSetMultimap.inverse()"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.entries()"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableSetMultimap.get(java.lang.Object)"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedAsList.comparator()"], ["int", "com.google.common.collect.ImmutableSortedAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSortedAsList.lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableSortedAsList.contains(java.lang.Object)"], ["int", "com.google.common.collect.ImmutableSortedMap$1.compare(java.util.Map$Entry<K, V>, java.util.Map$Entry<K, V>)"], ["int", "com.google.common.collect.ImmutableSortedMap$1.compare(java.lang.Object, java.lang.Object)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap$1EntrySet$1.get(int)"], ["java.util.Spliterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSortedMap$1EntrySet$1.spliterator()"], ["java.lang.Object", "com.google.common.collect.ImmutableSortedMap$1EntrySet$1.get(int)"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSortedMap$1EntrySet.iterator()"], ["java.util.Spliterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSortedMap$1EntrySet.spliterator()"], ["void", "com.google.common.collect.ImmutableSortedMap$1EntrySet.forEach(java.util.function.Consumer<? super java.util.Map$Entry<K, V>>)"], ["java.util.Iterator", "com.google.common.collect.ImmutableSortedMap$1EntrySet.iterator()"], ["com.google.common.collect.ImmutableSortedMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder(java.util.Comparator<? super K>)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.put(K, V)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map<? extends K, ? extends V>)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.putAll(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.orderEntriesByValue(java.util.Comparator<? super V>)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap$Builder.build()"], ["com.google.common.collect.ImmutableMap", "com.google.common.collect.ImmutableSortedMap$Builder.build()"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.orderEntriesByValue(java.util.Comparator)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.putAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.putAll(java.util.Map)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.put(java.util.Map$Entry)"], ["com.google.common.collect.ImmutableMap$Builder", "com.google.common.collect.ImmutableSortedMap$Builder.put(java.lang.Object, java.lang.Object)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableSortedMap<K, V>>", "com.google.common.collect.ImmutableSortedMap.toImmutableSortedMap(java.util.Comparator<? super K>, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableSortedMap<K, V>>", "com.google.common.collect.ImmutableSortedMap.toImmutableSortedMap(java.util.Comparator<? super K>, java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of()"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V)"], ["<K extends java.lang.Comparable<? super K>, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.of(K, V, K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOf(java.util.Map<? extends K, ? extends V>, java.util.Comparator<? super K>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOf(java.lang.Iterable<? extends java.util.Map$Entry<? extends K, ? extends V>>, java.util.Comparator<? super K>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.copyOfSorted(java.util.SortedMap<K, ? extends V>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap.naturalOrder()"], ["<K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap.orderedBy(java.util.Comparator<K>)"], ["<K extends java.lang.Comparable<?>, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMap.reverseOrder()"], ["int", "com.google.common.collect.ImmutableSortedMap.size()"], ["void", "com.google.common.collect.ImmutableSortedMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["V", "com.google.common.collect.ImmutableSortedMap.get(java.lang.Object)"], ["com.google.common.collect.ImmutableSet<java.util.Map$Entry<K, V>>", "com.google.common.collect.ImmutableSortedMap.entrySet()"], ["java.util.Comparator<? super K>", "com.google.common.collect.ImmutableSortedMap.comparator()"], ["K", "com.google.common.collect.ImmutableSortedMap.firstKey()"], ["K", "com.google.common.collect.ImmutableSortedMap.lastKey()"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.headMap(K)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.headMap(K, boolean)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.subMap(K, K)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.subMap(K, boolean, K, boolean)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.tailMap(K)"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.tailMap(K, boolean)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.lowerEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.floorEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.ceilingEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.higherEntry(K)"], ["K", "com.google.common.collect.ImmutableSortedMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.ImmutableSortedMap.pollLastEntry()"], ["com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMap.descendingMap()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.ImmutableSortedMap.keySet()"], ["java.util.Set", "com.google.common.collect.ImmutableSortedMap.entrySet()"], ["java.util.Collection", "com.google.common.collect.ImmutableSortedMap.values()"], ["java.util.Set", "com.google.common.collect.ImmutableSortedMap.keySet()"], ["java.util.SortedMap", "com.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedMap.descendingKeySet()"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedMap.navigableKeySet()"], ["java.util.NavigableMap", "com.google.common.collect.ImmutableSortedMap.descendingMap()"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.toImmutableMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)"], ["<K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.builder()"], ["<K, V> com.google.common.collect.ImmutableSortedMap$Builder<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.builderWithExpectedSize(int)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V)"], ["<K, V> com.google.common.collect.ImmutableSortedMap<K, V>", "com.google.common.collect.ImmutableSortedMapFauxverideShim.of(K, V, K, V, K, V, K, V, K, V)"], ["com.google.common.collect.ImmutableSortedMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder(java.util.Comparator<? super E>)"], ["com.google.common.collect.ImmutableMultiset", "com.google.common.collect.ImmutableSortedMultiset$Builder.build()"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.setCount(java.lang.Object, int)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addCopies(java.lang.Object, int)"], ["com.google.common.collect.ImmutableMultiset$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSortedMultiset$Builder.build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedMultiset$Builder.add(java.lang.Object)"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableSortedMultiset<E>>", "com.google.common.collect.ImmutableSortedMultiset.toImmutableSortedMultiset(java.util.Comparator<? super E>)"], ["<T, E> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableSortedMultiset<E>>", "com.google.common.collect.ImmutableSortedMultiset.toImmutableSortedMultiset(java.util.Comparator<? super E>, java.util.function.Function<? super T, ? extends E>, java.util.function.ToIntFunction<? super T>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of()"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(E[])"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultiset.copyOfSorted(com.google.common.collect.SortedMultiset<E>)"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedMultiset.comparator()"], ["<E> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset.orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset.reverseOrder()"], ["<E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultiset.naturalOrder()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["java.util.Set", "com.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.ImmutableSortedMultiset.descendingMultiset()"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedMultiset.elementSet()"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableMultiset<E>>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.toImmutableMultiset()"], ["<T, E> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMultiset<E>>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.toImmutableMultiset(java.util.function.Function<? super T, ? extends E>, java.util.function.ToIntFunction<? super T>)"], ["<E> com.google.common.collect.ImmutableSortedMultiset$Builder<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.builder()"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableSortedMultiset<E>", "com.google.common.collect.ImmutableSortedMultisetFauxverideShim.copyOf(E[])"], ["boolean", "com.google.common.collect.ImmutableSortedSet$1.tryAdvance(java.util.function.Consumer<? super E>)"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedSet$1.getComparator()"], ["com.google.common.collect.ImmutableSortedSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder(java.util.Comparator<? super E>)"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.ImmutableSortedSet$Builder.build()"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableSet$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.lang.Iterable)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object[])"], ["com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)"], ["com.google.common.collect.ImmutableCollection", "com.google.common.collect.ImmutableSortedSet$Builder.build()"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.addAll(java.util.Iterator)"], ["com.google.common.collect.ImmutableCollection$Builder", "com.google.common.collect.ImmutableSortedSet$Builder.add(java.lang.Object)"], ["com.google.common.collect.ImmutableSortedSet$SerializedForm", "com.google.common.collect.ImmutableSortedSet$SerializedForm(java.util.Comparator<? super E>, java.lang.Object[])"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableSortedSet<E>>", "com.google.common.collect.ImmutableSortedSet.toImmutableSortedSet(java.util.Comparator<? super E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of()"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.of(E, E, E, E, E, E, E...)"], ["<E extends java.lang.Comparable<? super E>> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(E[])"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Iterator<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.lang.Iterable<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator<? super E>, java.util.Collection<? extends E>)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSet.copyOfSorted(java.util.SortedSet<E>)"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet.orderedBy(java.util.Comparator<E>)"], ["<E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet.reverseOrder()"], ["<E extends java.lang.Comparable<?>> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSet.naturalOrder()"], ["java.util.Comparator<? super E>", "com.google.common.collect.ImmutableSortedSet.comparator()"], ["E", "com.google.common.collect.ImmutableSortedSet.lower(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.floor(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.ceiling(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.higher(E)"], ["E", "com.google.common.collect.ImmutableSortedSet.first()"], ["E", "com.google.common.collect.ImmutableSortedSet.last()"], ["E", "com.google.common.collect.ImmutableSortedSet.pollFirst()"], ["E", "com.google.common.collect.ImmutableSortedSet.pollLast()"], ["java.util.Iterator", "com.google.common.collect.ImmutableSortedSet.iterator()"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, java.lang.Object)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.tailSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.headSet(java.lang.Object, boolean)"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.subSet(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.Iterator", "com.google.common.collect.ImmutableSortedSet.descendingIterator()"], ["java.util.NavigableSet", "com.google.common.collect.ImmutableSortedSet.descendingSet()"], ["<E> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableSet<E>>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.toImmutableSet()"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.builder()"], ["<E> com.google.common.collect.ImmutableSortedSet$Builder<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.builderWithExpectedSize(int)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.of(E, E, E, E, E, E, E...)"], ["<E> com.google.common.collect.ImmutableSortedSet<E>", "com.google.common.collect.ImmutableSortedSetFauxverideShim.copyOf(E[])"], ["com.google.common.collect.ImmutableTable$Builder", "com.google.common.collect.ImmutableTable$Builder()"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.orderRowsBy(java.util.Comparator<? super R>)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.orderColumnsBy(java.util.Comparator<? super C>)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.put(R, C, V)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.put(com.google.common.collect.Table$Cell<? extends R, ? extends C, ? extends V>)"], ["com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable$Builder.build()"], ["R", "com.google.common.collect.ImmutableTable$MutableCell.getRowKey()"], ["C", "com.google.common.collect.ImmutableTable$MutableCell.getColumnKey()"], ["V", "com.google.common.collect.ImmutableTable$MutableCell.getValue()"], ["<T, R, C, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableTable<R, C, V>>", "com.google.common.collect.ImmutableTable.toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>)"], ["<T, R, C, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableTable<R, C, V>>", "com.google.common.collect.ImmutableTable.toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)"], ["<R, C, V> com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable.of()"], ["<R, C, V> com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable.of(R, C, V)"], ["<R, C, V> com.google.common.collect.ImmutableTable<R, C, V>", "com.google.common.collect.ImmutableTable.copyOf(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> com.google.common.collect.ImmutableTable$Builder<R, C, V>", "com.google.common.collect.ImmutableTable.builder()"], ["com.google.common.collect.ImmutableSet<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.ImmutableTable.cellSet()"], ["com.google.common.collect.ImmutableMap<R, V>", "com.google.common.collect.ImmutableTable.column(C)"], ["com.google.common.collect.ImmutableMap<C, V>", "com.google.common.collect.ImmutableTable.row(R)"], ["boolean", "com.google.common.collect.ImmutableTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableTable.containsValue(java.lang.Object)"], ["void", "com.google.common.collect.ImmutableTable.clear()"], ["V", "com.google.common.collect.ImmutableTable.put(R, C, V)"], ["void", "com.google.common.collect.ImmutableTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.ImmutableTable.remove(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ImmutableTable.toString()"], ["int", "com.google.common.collect.ImmutableTable.hashCode()"], ["boolean", "com.google.common.collect.ImmutableTable.equals(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.ImmutableTable.values()"], ["java.util.Set", "com.google.common.collect.ImmutableTable.cellSet()"], ["boolean", "com.google.common.collect.ImmutableTable.isEmpty()"], ["java.lang.Object", "com.google.common.collect.ImmutableTable.get(java.lang.Object, java.lang.Object)"], ["java.util.Set", "com.google.common.collect.ImmutableTable.columnKeySet()"], ["java.util.Set", "com.google.common.collect.ImmutableTable.rowKeySet()"], ["boolean", "com.google.common.collect.ImmutableTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.ImmutableTable.containsRow(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ImmutableTable.columnMap()"], ["java.util.Map", "com.google.common.collect.ImmutableTable.rowMap()"], ["java.util.Map", "com.google.common.collect.ImmutableTable.column(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.ImmutableTable.row(java.lang.Object)"], ["com.google.common.collect.Interners$InternerBuilder", "com.google.common.collect.Interners$InternerBuilder.strong()"], ["com.google.common.collect.Interners$InternerBuilder", "com.google.common.collect.Interners$InternerBuilder.weak()"], ["com.google.common.collect.Interners$InternerBuilder", "com.google.common.collect.Interners$InternerBuilder.concurrencyLevel(int)"], ["<E> com.google.common.collect.Interner<E>", "com.google.common.collect.Interners$InternerBuilder.build()"], ["com.google.common.collect.Interners$InternerFunction", "com.google.common.collect.Interners$InternerFunction(com.google.common.collect.Interner<E>)"], ["E", "com.google.common.collect.Interners$InternerFunction.apply(E)"], ["int", "com.google.common.collect.Interners$InternerFunction.hashCode()"], ["boolean", "com.google.common.collect.Interners$InternerFunction.equals(java.lang.Object)"], ["E", "com.google.common.collect.Interners$InternerImpl.intern(E)"], ["com.google.common.collect.Interners$InternerBuilder", "com.google.common.collect.Interners.newBuilder()"], ["<E> com.google.common.collect.Interner<E>", "com.google.common.collect.Interners.newStrongInterner()"], ["<E> com.google.common.collect.Interner<E>", "com.google.common.collect.Interners.newWeakInterner()"], ["<E> com.google.common.base.Function<E, E>", "com.google.common.collect.Interners.asFunction(com.google.common.collect.Interner<E>)"], ["java.lang.String", "com.google.common.collect.Iterables$1.toString()"], ["java.util.Iterator<? extends T>", "com.google.common.collect.Iterables$10.apply(java.lang.Iterable<? extends T>)"], ["java.lang.Object", "com.google.common.collect.Iterables$10.apply(java.lang.Object)"], ["void", "com.google.common.collect.Iterables$4.forEach(java.util.function.Consumer<? super T>)"], ["void", "com.google.common.collect.Iterables$5.forEach(java.util.function.Consumer<? super T>)"], ["boolean", "com.google.common.collect.Iterables$6$1.hasNext()"], ["T", "com.google.common.collect.Iterables$6$1.next()"], ["void", "com.google.common.collect.Iterables$6$1.remove()"], ["java.lang.String", "com.google.common.collect.Iterables$8.toString()"], ["void", "com.google.common.collect.Iterables$UnmodifiableIterable.forEach(java.util.function.Consumer<? super T>)"], ["java.lang.String", "com.google.common.collect.Iterables$UnmodifiableIterable.toString()"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.unmodifiableIterable(java.lang.Iterable<? extends T>)"], ["<E> java.lang.Iterable<E>", "com.google.common.collect.Iterables.unmodifiableIterable(com.google.common.collect.ImmutableCollection<E>)"], ["int", "com.google.common.collect.Iterables.size(java.lang.Iterable<?>)"], ["boolean", "com.google.common.collect.Iterables.contains(java.lang.Iterable<?>, java.lang.Object)"], ["boolean", "com.google.common.collect.Iterables.removeAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Iterables.retainAll(java.lang.Iterable<?>, java.util.Collection<?>)"], ["<T> boolean", "com.google.common.collect.Iterables.removeIf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["boolean", "com.google.common.collect.Iterables.elementsEqual(java.lang.Iterable<?>, java.lang.Iterable<?>)"], ["java.lang.String", "com.google.common.collect.Iterables.toString(java.lang.Iterable<?>)"], ["<T> T", "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<T>)"], ["<T> T", "com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable<? extends T>, T)"], ["<T> T[]", "com.google.common.collect.Iterables.toArray(java.lang.Iterable<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterables.addAll(java.util.Collection<T>, java.lang.Iterable<? extends T>)"], ["int", "com.google.common.collect.Iterables.frequency(java.lang.Iterable<?>, java.lang.Object)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.cycle(java.lang.Iterable<T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.cycle(T...)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>, java.lang.Iterable<? extends T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends T>...)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)"], ["<T> java.lang.Iterable<java.util.List<T>>", "com.google.common.collect.Iterables.partition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<java.util.List<T>>", "com.google.common.collect.Iterables.paddedPartition(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.filter(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.filter(java.lang.Iterable<?>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterables.any(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> boolean", "com.google.common.collect.Iterables.all(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterables.find(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterables.find(java.lang.Iterable<? extends T>, com.google.common.base.Predicate<? super T>, T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.collect.Iterables.tryFind(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<T> int", "com.google.common.collect.Iterables.indexOf(java.lang.Iterable<T>, com.google.common.base.Predicate<? super T>)"], ["<F, T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.transform(java.lang.Iterable<F>, com.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "com.google.common.collect.Iterables.get(java.lang.Iterable<T>, int)"], ["<T> T", "com.google.common.collect.Iterables.get(java.lang.Iterable<? extends T>, int, T)"], ["<T> T", "com.google.common.collect.Iterables.getFirst(java.lang.Iterable<? extends T>, T)"], ["<T> T", "com.google.common.collect.Iterables.getLast(java.lang.Iterable<T>)"], ["<T> T", "com.google.common.collect.Iterables.getLast(java.lang.Iterable<? extends T>, T)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.skip(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.limit(java.lang.Iterable<T>, int)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.consumingIterable(java.lang.Iterable<T>)"], ["boolean", "com.google.common.collect.Iterables.isEmpty(java.lang.Iterable<?>)"], ["<T> java.lang.Iterable<T>", "com.google.common.collect.Iterables.mergeSorted(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "com.google.common.collect.Iterators$1.hasNext()"], ["T", "com.google.common.collect.Iterators$1.next()"], ["boolean", "com.google.common.collect.Iterators$10.hasNext()"], ["T", "com.google.common.collect.Iterators$10.next()"], ["boolean", "com.google.common.collect.Iterators$11.hasMoreElements()"], ["T", "com.google.common.collect.Iterators$11.nextElement()"], ["boolean", "com.google.common.collect.Iterators$2.hasNext()"], ["T", "com.google.common.collect.Iterators$2.next()"], ["void", "com.google.common.collect.Iterators$2.remove()"], ["boolean", "com.google.common.collect.Iterators$3.hasNext()"], ["T", "com.google.common.collect.Iterators$3.next()"], ["boolean", "com.google.common.collect.Iterators$4.hasNext()"], ["java.lang.Object", "com.google.common.collect.Iterators$4.next()"], ["boolean", "com.google.common.collect.Iterators$7.hasNext()"], ["T", "com.google.common.collect.Iterators$7.next()"], ["void", "com.google.common.collect.Iterators$7.remove()"], ["boolean", "com.google.common.collect.Iterators$8.hasNext()"], ["T", "com.google.common.collect.Iterators$8.next()"], ["java.lang.String", "com.google.common.collect.Iterators$8.toString()"], ["boolean", "com.google.common.collect.Iterators$9.hasNext()"], ["T", "com.google.common.collect.Iterators$9.next()"], ["boolean", "com.google.common.collect.Iterators$ConcatenatedIterator.hasNext()"], ["T", "com.google.common.collect.Iterators$ConcatenatedIterator.next()"], ["void", "com.google.common.collect.Iterators$ConcatenatedIterator.remove()"], ["com.google.common.collect.Iterators$EmptyModifiableIterator[]", "com.google.common.collect.Iterators$EmptyModifiableIterator.values()"], ["com.google.common.collect.Iterators$EmptyModifiableIterator", "com.google.common.collect.Iterators$EmptyModifiableIterator.valueOf(java.lang.String)"], ["boolean", "com.google.common.collect.Iterators$EmptyModifiableIterator.hasNext()"], ["java.lang.Object", "com.google.common.collect.Iterators$EmptyModifiableIterator.next()"], ["void", "com.google.common.collect.Iterators$EmptyModifiableIterator.remove()"], ["int", "com.google.common.collect.Iterators$MergingIterator$1.compare(com.google.common.collect.PeekingIterator<T>, com.google.common.collect.PeekingIterator<T>)"], ["int", "com.google.common.collect.Iterators$MergingIterator$1.compare(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.Iterators$MergingIterator", "com.google.common.collect.Iterators$MergingIterator(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["boolean", "com.google.common.collect.Iterators$MergingIterator.hasNext()"], ["T", "com.google.common.collect.Iterators$MergingIterator.next()"], ["com.google.common.collect.Iterators$PeekingImpl", "com.google.common.collect.Iterators$PeekingImpl(java.util.Iterator<? extends E>)"], ["boolean", "com.google.common.collect.Iterators$PeekingImpl.hasNext()"], ["E", "com.google.common.collect.Iterators$PeekingImpl.next()"], ["void", "com.google.common.collect.Iterators$PeekingImpl.remove()"], ["E", "com.google.common.collect.Iterators$PeekingImpl.peek()"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator<? extends T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T>)"], ["int", "com.google.common.collect.Iterators.size(java.util.Iterator<?>)"], ["boolean", "com.google.common.collect.Iterators.contains(java.util.Iterator<?>, java.lang.Object)"], ["boolean", "com.google.common.collect.Iterators.removeAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["<T> boolean", "com.google.common.collect.Iterators.removeIf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["boolean", "com.google.common.collect.Iterators.retainAll(java.util.Iterator<?>, java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Iterators.elementsEqual(java.util.Iterator<?>, java.util.Iterator<?>)"], ["java.lang.String", "com.google.common.collect.Iterators.toString(java.util.Iterator<?>)"], ["<T> T", "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<T>)"], ["<T> T", "com.google.common.collect.Iterators.getOnlyElement(java.util.Iterator<? extends T>, T)"], ["<T> T[]", "com.google.common.collect.Iterators.toArray(java.util.Iterator<? extends T>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterators.addAll(java.util.Collection<T>, java.util.Iterator<? extends T>)"], ["int", "com.google.common.collect.Iterators.frequency(java.util.Iterator<?>, java.lang.Object)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.cycle(java.lang.Iterable<T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.cycle(T...)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>, java.util.Iterator<? extends T>)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends T>...)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.concat(java.util.Iterator<? extends java.util.Iterator<? extends T>>)"], ["<T> com.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "com.google.common.collect.Iterators.partition(java.util.Iterator<T>, int)"], ["<T> com.google.common.collect.UnmodifiableIterator<java.util.List<T>>", "com.google.common.collect.Iterators.paddedPartition(java.util.Iterator<T>, int)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.filter(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.filter(java.util.Iterator<?>, java.lang.Class<T>)"], ["<T> boolean", "com.google.common.collect.Iterators.any(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> boolean", "com.google.common.collect.Iterators.all(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterators.find(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> T", "com.google.common.collect.Iterators.find(java.util.Iterator<? extends T>, com.google.common.base.Predicate<? super T>, T)"], ["<T> com.google.common.base.Optional<T>", "com.google.common.collect.Iterators.tryFind(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<T> int", "com.google.common.collect.Iterators.indexOf(java.util.Iterator<T>, com.google.common.base.Predicate<? super T>)"], ["<F, T> java.util.Iterator<T>", "com.google.common.collect.Iterators.transform(java.util.Iterator<F>, com.google.common.base.Function<? super F, ? extends T>)"], ["<T> T", "com.google.common.collect.Iterators.get(java.util.Iterator<T>, int)"], ["<T> T", "com.google.common.collect.Iterators.get(java.util.Iterator<? extends T>, int, T)"], ["<T> T", "com.google.common.collect.Iterators.getNext(java.util.Iterator<? extends T>, T)"], ["<T> T", "com.google.common.collect.Iterators.getLast(java.util.Iterator<T>)"], ["<T> T", "com.google.common.collect.Iterators.getLast(java.util.Iterator<? extends T>, T)"], ["int", "com.google.common.collect.Iterators.advance(java.util.Iterator<?>, int)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.limit(java.util.Iterator<T>, int)"], ["<T> java.util.Iterator<T>", "com.google.common.collect.Iterators.consumingIterator(java.util.Iterator<T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.forArray(T...)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.singletonIterator(T)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.forEnumeration(java.util.Enumeration<T>)"], ["<T> java.util.Enumeration<T>", "com.google.common.collect.Iterators.asEnumeration(java.util.Iterator<T>)"], ["<T> com.google.common.collect.PeekingIterator<T>", "com.google.common.collect.Iterators.peekingIterator(java.util.Iterator<? extends T>)"], ["<T> com.google.common.collect.PeekingIterator<T>", "com.google.common.collect.Iterators.peekingIterator(com.google.common.collect.PeekingIterator<T>)"], ["<T> com.google.common.collect.UnmodifiableIterator<T>", "com.google.common.collect.Iterators.mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>>, java.util.Comparator<? super T>)"], ["int", "com.google.common.collect.LexicographicalOrdering.compare(java.lang.Iterable<T>, java.lang.Iterable<T>)"], ["boolean", "com.google.common.collect.LexicographicalOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.LexicographicalOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.LexicographicalOrdering.toString()"], ["int", "com.google.common.collect.LexicographicalOrdering.compare(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$1.hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.LinkedHashMultimap$1.next()"], ["void", "com.google.common.collect.LinkedHashMultimap$1.remove()"], ["java.lang.Object", "com.google.common.collect.LinkedHashMultimap$1.next()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInValueSet()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()"], ["com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInMultimap()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setSuccessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueEntry.setPredecessorInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry<K, V>)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet$1.hasNext()"], ["V", "com.google.common.collect.LinkedHashMultimap$ValueSet$1.next()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet$1.remove()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueSet.getPredecessorInValueSet()"], ["com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>", "com.google.common.collect.LinkedHashMultimap$ValueSet.getSuccessorInValueSet()"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.setPredecessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.setSuccessorInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink<K, V>)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.forEach(java.util.function.Consumer<? super V>)"], ["int", "com.google.common.collect.LinkedHashMultimap$ValueSet.size()"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet.add(V)"], ["boolean", "com.google.common.collect.LinkedHashMultimap$ValueSet.remove(java.lang.Object)"], ["void", "com.google.common.collect.LinkedHashMultimap$ValueSet.clear()"], ["<K, V> com.google.common.collect.LinkedHashMultimap<K, V>", "com.google.common.collect.LinkedHashMultimap.create()"], ["<K, V> com.google.common.collect.LinkedHashMultimap<K, V>", "com.google.common.collect.LinkedHashMultimap.create(int, int)"], ["<K, V> com.google.common.collect.LinkedHashMultimap<K, V>", "com.google.common.collect.LinkedHashMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.LinkedHashMultimap.entries()"], ["void", "com.google.common.collect.LinkedHashMultimap.clear()"], ["boolean", "com.google.common.collect.LinkedHashMultimap.equals(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.Map", "com.google.common.collect.LinkedHashMultimap.asMap()"], ["java.util.Set", "com.google.common.collect.LinkedHashMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.LinkedHashMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.LinkedHashMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.LinkedHashMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["void", "com.google.common.collect.LinkedHashMultimap.forEach(java.util.function.BiConsumer)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.LinkedHashMultimap.size()"], ["java.lang.String", "com.google.common.collect.LinkedHashMultimap.toString()"], ["int", "com.google.common.collect.LinkedHashMultimap.hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.LinkedHashMultimap.keys()"], ["boolean", "com.google.common.collect.LinkedHashMultimap.putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultimap.isEmpty()"], ["<E> com.google.common.collect.LinkedHashMultiset<E>", "com.google.common.collect.LinkedHashMultiset.create()"], ["<E> com.google.common.collect.LinkedHashMultiset<E>", "com.google.common.collect.LinkedHashMultiset.create(int)"], ["<E> com.google.common.collect.LinkedHashMultiset<E>", "com.google.common.collect.LinkedHashMultiset.create(java.lang.Iterable<? extends E>)"], ["int", "com.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int)"], ["int", "com.google.common.collect.LinkedHashMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.LinkedHashMultiset.add(java.lang.Object, int)"], ["int", "com.google.common.collect.LinkedHashMultiset.count(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.LinkedHashMultiset.iterator()"], ["int", "com.google.common.collect.LinkedHashMultiset.size()"], ["void", "com.google.common.collect.LinkedHashMultiset.clear()"], ["void", "com.google.common.collect.LinkedHashMultiset.forEachEntry(java.util.function.ObjIntConsumer)"], ["java.util.Set", "com.google.common.collect.LinkedHashMultiset.entrySet()"], ["java.lang.String", "com.google.common.collect.LinkedHashMultiset.toString()"], ["int", "com.google.common.collect.LinkedHashMultiset.hashCode()"], ["boolean", "com.google.common.collect.LinkedHashMultiset.equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.LinkedHashMultiset.elementSet()"], ["boolean", "com.google.common.collect.LinkedHashMultiset.retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.setCount(java.lang.Object, int, int)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.add(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedHashMultiset.isEmpty()"], ["int", "com.google.common.collect.LinkedListMultimap$1.size()"], ["int", "com.google.common.collect.LinkedListMultimap$1EntriesImpl.size()"], ["java.util.ListIterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.LinkedListMultimap$1EntriesImpl.listIterator(int)"], ["void", "com.google.common.collect.LinkedListMultimap$1EntriesImpl.forEach(java.util.function.Consumer<? super java.util.Map$Entry<K, V>>)"], ["int", "com.google.common.collect.LinkedListMultimap$1KeySetImpl.size()"], ["boolean", "com.google.common.collect.LinkedListMultimap$1KeySetImpl.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap$1KeySetImpl.remove(java.lang.Object)"], ["void", "com.google.common.collect.LinkedListMultimap$1ValuesImpl$1.set(V)"], ["int", "com.google.common.collect.LinkedListMultimap$1ValuesImpl.size()"], ["boolean", "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator.hasNext()"], ["K", "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator.next()"], ["void", "com.google.common.collect.LinkedListMultimap$DistinctKeyIterator.remove()"], ["K", "com.google.common.collect.LinkedListMultimap$Node.getKey()"], ["V", "com.google.common.collect.LinkedListMultimap$Node.getValue()"], ["V", "com.google.common.collect.LinkedListMultimap$Node.setValue(V)"], ["boolean", "com.google.common.collect.LinkedListMultimap$NodeIterator.hasNext()"], ["com.google.common.collect.LinkedListMultimap$Node<K, V>", "com.google.common.collect.LinkedListMultimap$NodeIterator.next()"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.remove()"], ["boolean", "com.google.common.collect.LinkedListMultimap$NodeIterator.hasPrevious()"], ["com.google.common.collect.LinkedListMultimap$Node<K, V>", "com.google.common.collect.LinkedListMultimap$NodeIterator.previous()"], ["int", "com.google.common.collect.LinkedListMultimap$NodeIterator.nextIndex()"], ["int", "com.google.common.collect.LinkedListMultimap$NodeIterator.previousIndex()"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.set(java.util.Map$Entry<K, V>)"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.add(java.util.Map$Entry<K, V>)"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.add(java.lang.Object)"], ["void", "com.google.common.collect.LinkedListMultimap$NodeIterator.set(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.LinkedListMultimap$NodeIterator.previous()"], ["java.lang.Object", "com.google.common.collect.LinkedListMultimap$NodeIterator.next()"], ["com.google.common.collect.LinkedListMultimap$ValueForKeyIterator", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator(com.google.common.collect.LinkedListMultimap, java.lang.Object, int)"], ["boolean", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasNext()"], ["V", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.next()"], ["boolean", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.hasPrevious()"], ["V", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previous()"], ["int", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.nextIndex()"], ["int", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.previousIndex()"], ["void", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.remove()"], ["void", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.set(V)"], ["void", "com.google.common.collect.LinkedListMultimap$ValueForKeyIterator.add(V)"], ["<K, V> com.google.common.collect.LinkedListMultimap<K, V>", "com.google.common.collect.LinkedListMultimap.create()"], ["<K, V> com.google.common.collect.LinkedListMultimap<K, V>", "com.google.common.collect.LinkedListMultimap.create(int)"], ["<K, V> com.google.common.collect.LinkedListMultimap<K, V>", "com.google.common.collect.LinkedListMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["int", "com.google.common.collect.LinkedListMultimap.size()"], ["boolean", "com.google.common.collect.LinkedListMultimap.isEmpty()"], ["boolean", "com.google.common.collect.LinkedListMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap.put(K, V)"], ["void", "com.google.common.collect.LinkedListMultimap.clear()"], ["java.util.List<java.util.Map$Entry<K, V>>", "com.google.common.collect.LinkedListMultimap.entries()"], ["java.lang.String", "com.google.common.collect.LinkedListMultimap.toString()"], ["int", "com.google.common.collect.LinkedListMultimap.hashCode()"], ["boolean", "com.google.common.collect.LinkedListMultimap.equals(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.LinkedListMultimap.asMap()"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.values()"], ["com.google.common.collect.Multiset", "com.google.common.collect.LinkedListMultimap.keys()"], ["java.util.Set", "com.google.common.collect.LinkedListMultimap.keySet()"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedListMultimap.putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.LinkedListMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.LinkedListMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.LinkedListMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.LinkedListMultimap.removeAll(java.lang.Object)"], ["default", "com.google.common.collect.ListMultimap.java.util.Collection get(java.lang.Object)"], ["default", "com.google.common.collect.ListMultimap.java.util.Collection removeAll(java.lang.Object)"], ["default", "com.google.common.collect.ListMultimap.java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["void", "com.google.common.collect.Lists$AbstractListWrapper.add(int, E)"], ["boolean", "com.google.common.collect.Lists$AbstractListWrapper.addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.Lists$AbstractListWrapper.get(int)"], ["E", "com.google.common.collect.Lists$AbstractListWrapper.remove(int)"], ["E", "com.google.common.collect.Lists$AbstractListWrapper.set(int, E)"], ["boolean", "com.google.common.collect.Lists$AbstractListWrapper.contains(java.lang.Object)"], ["int", "com.google.common.collect.Lists$AbstractListWrapper.size()"], ["java.lang.Character", "com.google.common.collect.Lists$CharSequenceAsList.get(int)"], ["int", "com.google.common.collect.Lists$CharSequenceAsList.size()"], ["java.lang.Object", "com.google.common.collect.Lists$CharSequenceAsList.get(int)"], ["int", "com.google.common.collect.Lists$OnePlusArrayList.size()"], ["E", "com.google.common.collect.Lists$OnePlusArrayList.get(int)"], ["int", "com.google.common.collect.Lists$Partition.size()"], ["boolean", "com.google.common.collect.Lists$Partition.isEmpty()"], ["java.lang.Object", "com.google.common.collect.Lists$Partition.get(int)"], ["void", "com.google.common.collect.Lists$ReverseList$1.add(T)"], ["boolean", "com.google.common.collect.Lists$ReverseList$1.hasNext()"], ["boolean", "com.google.common.collect.Lists$ReverseList$1.hasPrevious()"], ["T", "com.google.common.collect.Lists$ReverseList$1.next()"], ["int", "com.google.common.collect.Lists$ReverseList$1.nextIndex()"], ["T", "com.google.common.collect.Lists$ReverseList$1.previous()"], ["int", "com.google.common.collect.Lists$ReverseList$1.previousIndex()"], ["void", "com.google.common.collect.Lists$ReverseList$1.remove()"], ["void", "com.google.common.collect.Lists$ReverseList$1.set(T)"], ["void", "com.google.common.collect.Lists$ReverseList.add(int, T)"], ["void", "com.google.common.collect.Lists$ReverseList.clear()"], ["T", "com.google.common.collect.Lists$ReverseList.remove(int)"], ["T", "com.google.common.collect.Lists$ReverseList.set(int, T)"], ["T", "com.google.common.collect.Lists$ReverseList.get(int)"], ["int", "com.google.common.collect.Lists$ReverseList.size()"], ["int", "com.google.common.collect.Lists$StringAsImmutableList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.Lists$StringAsImmutableList.lastIndexOf(java.lang.Object)"], ["java.lang.Character", "com.google.common.collect.Lists$StringAsImmutableList.get(int)"], ["int", "com.google.common.collect.Lists$StringAsImmutableList.size()"], ["java.util.List", "com.google.common.collect.Lists$StringAsImmutableList.subList(int, int)"], ["java.lang.Object", "com.google.common.collect.Lists$StringAsImmutableList.get(int)"], ["void", "com.google.common.collect.Lists$TransformingRandomAccessList.clear()"], ["T", "com.google.common.collect.Lists$TransformingRandomAccessList.get(int)"], ["boolean", "com.google.common.collect.Lists$TransformingRandomAccessList.isEmpty()"], ["boolean", "com.google.common.collect.Lists$TransformingRandomAccessList.removeIf(java.util.function.Predicate<? super T>)"], ["T", "com.google.common.collect.Lists$TransformingRandomAccessList.remove(int)"], ["int", "com.google.common.collect.Lists$TransformingRandomAccessList.size()"], ["void", "com.google.common.collect.Lists$TransformingSequentialList.clear()"], ["int", "com.google.common.collect.Lists$TransformingSequentialList.size()"], ["boolean", "com.google.common.collect.Lists$TransformingSequentialList.removeIf(java.util.function.Predicate<? super T>)"], ["int", "com.google.common.collect.Lists$TwoPlusArrayList.size()"], ["E", "com.google.common.collect.Lists$TwoPlusArrayList.get(int)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList()"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList(E...)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayList(java.util.Iterator<? extends E>)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayListWithCapacity(int)"], ["<E> java.util.ArrayList<E>", "com.google.common.collect.Lists.newArrayListWithExpectedSize(int)"], ["<E> java.util.LinkedList<E>", "com.google.common.collect.Lists.newLinkedList()"], ["<E> java.util.LinkedList<E>", "com.google.common.collect.Lists.newLinkedList(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "com.google.common.collect.Lists.newCopyOnWriteArrayList()"], ["<E> java.util.concurrent.CopyOnWriteArrayList<E>", "com.google.common.collect.Lists.newCopyOnWriteArrayList(java.lang.Iterable<? extends E>)"], ["<E> java.util.List<E>", "com.google.common.collect.Lists.asList(E, E[])"], ["<E> java.util.List<E>", "com.google.common.collect.Lists.asList(E, E, E[])"], ["<B> java.util.List<java.util.List<B>>", "com.google.common.collect.Lists.cartesianProduct(java.util.List<? extends java.util.List<? extends B>>)"], ["<B> java.util.List<java.util.List<B>>", "com.google.common.collect.Lists.cartesianProduct(java.util.List<? extends B>...)"], ["<F, T> java.util.List<T>", "com.google.common.collect.Lists.transform(java.util.List<F>, com.google.common.base.Function<? super F, ? extends T>)"], ["<T> java.util.List<java.util.List<T>>", "com.google.common.collect.Lists.partition(java.util.List<T>, int)"], ["<T> java.util.List<T>", "com.google.common.collect.Lists.reverse(java.util.List<T>)"], ["com.google.common.collect.MapMaker$Dummy[]", "com.google.common.collect.MapMaker$Dummy.values()"], ["com.google.common.collect.MapMaker$Dummy", "com.google.common.collect.MapMaker$Dummy.valueOf(java.lang.String)"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker()"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.initialCapacity(int)"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.concurrencyLevel(int)"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.weakKeys()"], ["com.google.common.collect.MapMaker", "com.google.common.collect.MapMaker.weakValues()"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.collect.MapMaker.makeMap()"], ["java.lang.String", "com.google.common.collect.MapMaker.toString()"], ["com.google.common.collect.MapMakerInternalMap$DummyInternalEntry", "com.google.common.collect.MapMakerInternalMap$1.getEntry()"], ["void", "com.google.common.collect.MapMakerInternalMap$1.clear()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$1.get()"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<java.lang.Object, java.lang.Object, com.google.common.collect.MapMakerInternalMap$DummyInternalEntry>", "com.google.common.collect.MapMakerInternalMap$1.copyFor(java.lang.ref.ReferenceQueue<java.lang.Object>, com.google.common.collect.MapMakerInternalMap$DummyInternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference", "com.google.common.collect.MapMakerInternalMap$1.copyFor(java.lang.ref.ReferenceQueue, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$1.getEntry()"], ["K", "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry.getKey()"], ["int", "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry.getHash()"], ["E", "com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry.getNext()"], ["K", "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getKey()"], ["int", "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getHash()"], ["E", "com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry.getNext()"], ["com.google.common.collect.MapMakerInternalMap$CleanupMapTask", "com.google.common.collect.MapMakerInternalMap$CleanupMapTask(com.google.common.collect.MapMakerInternalMap<?, ?, ?, ?>)"], ["void", "com.google.common.collect.MapMakerInternalMap$CleanupMapTask.run()"], ["com.google.common.collect.MapMakerInternalMap$DummyInternalEntry", "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry.getNext()"], ["int", "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry.getHash()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry.getKey()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry.getValue()"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$DummyInternalEntry.getNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.MapMakerInternalMap$EntryIterator.next()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$EntryIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapMakerInternalMap$EntrySet.iterator()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EntrySet.remove(java.lang.Object)"], ["int", "com.google.common.collect.MapMakerInternalMap$EntrySet.size()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$EntrySet.isEmpty()"], ["void", "com.google.common.collect.MapMakerInternalMap$EntrySet.clear()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$HashIterator.hasNext()"], ["void", "com.google.common.collect.MapMakerInternalMap$HashIterator.remove()"], ["K", "com.google.common.collect.MapMakerInternalMap$KeyIterator.next()"], ["int", "com.google.common.collect.MapMakerInternalMap$KeySet.size()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$KeySet.isEmpty()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$KeySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap$KeySet.remove(java.lang.Object)"], ["void", "com.google.common.collect.MapMakerInternalMap$KeySet.clear()"], ["java.lang.Object[]", "com.google.common.collect.MapMakerInternalMap$SafeToArraySet.toArray()"], ["<T> T[]", "com.google.common.collect.MapMakerInternalMap$SafeToArraySet.toArray(T[])"], ["com.google.common.collect.MapMakerInternalMap$Strength[]", "com.google.common.collect.MapMakerInternalMap$Strength.values()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$Strength.valueOf(java.lang.String)"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.keyStrength()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.valueStrength()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment<K>, com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry<K>, com.google.common.collect.MapMaker$Dummy)"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, java.lang.Object)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$Segment, java.lang.Object, int, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Segment", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap, int, int)"], ["com.google.common.collect.MapMaker$Dummy", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry.getValue()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueEntry.getValue()"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyDummyValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.keyStrength()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.valueStrength()"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap<K, V, com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment<K, V>>, int, int)"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>, V)"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment<K, V>, K, int, com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, java.lang.Object)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$Segment, java.lang.Object, int, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Segment", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap, int, int)"], ["V", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry.getValue()"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.keyStrength()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.valueStrength()"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap<K, V, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment<K, V>>, int, int)"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>, V)"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment<K, V>, K, int, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, java.lang.Object)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$Segment, java.lang.Object, int, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Segment", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap, int, int)"], ["V", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry.getValue()"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry.clearValue()"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry.getValueReference()"], ["com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>)"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment.getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>)"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment.newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>, V)"], ["void", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment.setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>, com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, ? extends com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>>)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["V", "com.google.common.collect.MapMakerInternalMap$ValueIterator.next()"], ["int", "com.google.common.collect.MapMakerInternalMap$Values.size()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$Values.isEmpty()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$Values.contains(java.lang.Object)"], ["void", "com.google.common.collect.MapMakerInternalMap$Values.clear()"], ["java.lang.Object[]", "com.google.common.collect.MapMakerInternalMap$Values.toArray()"], ["<T> T[]", "com.google.common.collect.MapMakerInternalMap$Values.toArray(T[])"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.keyStrength()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.valueStrength()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment<K>, com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry<K>, com.google.common.collect.MapMaker$Dummy)"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, java.lang.Object)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$Segment, java.lang.Object, int, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Segment", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap, int, int)"], ["com.google.common.collect.MapMaker$Dummy", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry.getValue()"], ["java.lang.Object", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueEntry.getValue()"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyDummyValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.keyStrength()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.valueStrength()"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap<K, V, com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment<K, V>>, int, int)"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>, V)"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment<K, V>, K, int, com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, java.lang.Object)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$Segment, java.lang.Object, int, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Segment", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap, int, int)"], ["V", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry.getValue()"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.keyStrength()"], ["com.google.common.collect.MapMakerInternalMap$Strength", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.valueStrength()"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap<K, V, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment<K, V>>, int, int)"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment<K, V>, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>, V)"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment<K, V>, K, int, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>)"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.setValue(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, java.lang.Object)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.copy(com.google.common.collect.MapMakerInternalMap$Segment, com.google.common.collect.MapMakerInternalMap$InternalEntry, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.newEntry(com.google.common.collect.MapMakerInternalMap$Segment, java.lang.Object, int, com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["com.google.common.collect.MapMakerInternalMap$Segment", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper.newSegment(com.google.common.collect.MapMakerInternalMap, int, int)"], ["V", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry.getValue()"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry.clearValue()"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry.getValueReference()"], ["com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>)"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment.getWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>)"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry<K, V>>", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment.newWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>, V)"], ["void", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment.setWeakValueReferenceForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>, com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, ? extends com.google.common.collect.MapMakerInternalMap$InternalEntry<K, V, ?>>)"], ["com.google.common.collect.MapMakerInternalMap$InternalEntry", "com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment.castForTesting(com.google.common.collect.MapMakerInternalMap$InternalEntry)"], ["E", "com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl.getEntry()"], ["com.google.common.collect.MapMakerInternalMap$WeakValueReference<K, V, E>", "com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl.copyFor(java.lang.ref.ReferenceQueue<V>, E)"], ["K", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getKey()"], ["V", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.getValue()"], ["boolean", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.equals(java.lang.Object)"], ["int", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.hashCode()"], ["V", "com.google.common.collect.MapMakerInternalMap$WriteThroughEntry.setValue(V)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.isEmpty()"], ["int", "com.google.common.collect.MapMakerInternalMap.size()"], ["V", "com.google.common.collect.MapMakerInternalMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.MapMakerInternalMap.put(K, V)"], ["V", "com.google.common.collect.MapMakerInternalMap.putIfAbsent(K, V)"], ["void", "com.google.common.collect.MapMakerInternalMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["V", "com.google.common.collect.MapMakerInternalMap.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.MapMakerInternalMap.replace(K, V, V)"], ["V", "com.google.common.collect.MapMakerInternalMap.replace(K, V)"], ["void", "com.google.common.collect.MapMakerInternalMap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.MapMakerInternalMap.entrySet()"], ["K", "com.google.common.collect.Maps$10.getKey()"], ["V2", "com.google.common.collect.Maps$10.getValue()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$11.apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "com.google.common.collect.Maps$11.apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$2.add(E)"], ["boolean", "com.google.common.collect.Maps$2.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Maps$3.add(E)"], ["boolean", "com.google.common.collect.Maps$3.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Maps$4.add(E)"], ["boolean", "com.google.common.collect.Maps$4.addAll(java.util.Collection<? extends E>)"], ["K", "com.google.common.collect.Maps$5.getKey()"], ["V", "com.google.common.collect.Maps$5.getValue()"], ["boolean", "com.google.common.collect.Maps$6.hasNext()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$6.next()"], ["java.lang.Object", "com.google.common.collect.Maps$6.next()"], ["V2", "com.google.common.collect.Maps$7.transformEntry(K, V1)"], ["V2", "com.google.common.collect.Maps$8.apply(V1)"], ["V2", "com.google.common.collect.Maps$9.apply(java.util.Map$Entry<K, V1>)"], ["java.lang.Object", "com.google.common.collect.Maps$9.apply(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AbstractFilteredMap.put(K, V)"], ["void", "com.google.common.collect.Maps$AbstractFilteredMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.Maps$AbstractFilteredMap.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AbstractFilteredMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$AbstractFilteredMap.isEmpty()"], ["V", "com.google.common.collect.Maps$AbstractFilteredMap.remove(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$AsMapView$1EntrySetImpl.iterator()"], ["int", "com.google.common.collect.Maps$AsMapView.size()"], ["boolean", "com.google.common.collect.Maps$AsMapView.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AsMapView.get(java.lang.Object)"], ["V", "com.google.common.collect.Maps$AsMapView.getOrDefault(java.lang.Object, V)"], ["V", "com.google.common.collect.Maps$AsMapView.remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$AsMapView.clear()"], ["void", "com.google.common.collect.Maps$AsMapView.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["boolean", "com.google.common.collect.Maps$BiMapConverter.equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$BiMapConverter.hashCode()"], ["java.lang.String", "com.google.common.collect.Maps$BiMapConverter.toString()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$DescendingMap$1EntrySetImpl.iterator()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$DescendingMap.comparator()"], ["K", "com.google.common.collect.Maps$DescendingMap.firstKey()"], ["K", "com.google.common.collect.Maps$DescendingMap.lastKey()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.lowerEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.floorEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.ceilingEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.higherEntry(K)"], ["K", "com.google.common.collect.Maps$DescendingMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$DescendingMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.descendingMap()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$DescendingMap.entrySet()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$DescendingMap.tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$DescendingMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$DescendingMap.headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$DescendingMap.tailMap(K)"], ["java.lang.String", "com.google.common.collect.Maps$DescendingMap.toString()"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$1.apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$1.apply(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$2.apply(java.util.Map$Entry<?, ?>)"], ["java.lang.Object", "com.google.common.collect.Maps$EntryFunction$2.apply(java.lang.Object)"], ["com.google.common.collect.Maps$EntryFunction[]", "com.google.common.collect.Maps$EntryFunction.values()"], ["com.google.common.collect.Maps$EntryFunction", "com.google.common.collect.Maps$EntryFunction.valueOf(java.lang.String)"], ["int", "com.google.common.collect.Maps$EntrySet.size()"], ["void", "com.google.common.collect.Maps$EntrySet.clear()"], ["boolean", "com.google.common.collect.Maps$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$EntrySet.isEmpty()"], ["boolean", "com.google.common.collect.Maps$EntrySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$EntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$EntrySet.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.util.Map$Entry<V, K>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryBiMap$1.apply(java.lang.Object)"], ["V", "com.google.common.collect.Maps$FilteredEntryBiMap.forcePut(K, V)"], ["void", "com.google.common.collect.Maps$FilteredEntryBiMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.Maps$FilteredEntryBiMap.inverse()"], ["java.util.Collection", "com.google.common.collect.Maps$FilteredEntryBiMap.values()"], ["V", "com.google.common.collect.Maps$FilteredEntryMap$EntrySet$1$1.setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$FilteredEntryMap$EntrySet.iterator()"], ["boolean", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray()"], ["<T> T[]", "com.google.common.collect.Maps$FilteredEntryMap$KeySet.toArray(T[])"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap$1.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap$1.retainAll(java.util.Collection<?>)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.comparator()"], ["int", "com.google.common.collect.Maps$FilteredEntryNavigableMap.size()"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap.isEmpty()"], ["V", "com.google.common.collect.Maps$FilteredEntryNavigableMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredEntryNavigableMap.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.Maps$FilteredEntryNavigableMap.put(K, V)"], ["V", "com.google.common.collect.Maps$FilteredEntryNavigableMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$FilteredEntryNavigableMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.Maps$FilteredEntryNavigableMap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.entrySet()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.descendingMap()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$FilteredEntryNavigableMap.tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.comparator()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.first()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap$SortedKeySet.last()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$FilteredEntrySortedMap.comparator()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap.firstKey()"], ["K", "com.google.common.collect.Maps$FilteredEntrySortedMap.lastKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$FilteredEntrySortedMap.headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$FilteredEntrySortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$FilteredEntrySortedMap.tailMap(K)"], ["java.util.Set", "com.google.common.collect.Maps$FilteredEntrySortedMap.keySet()"], ["boolean", "com.google.common.collect.Maps$FilteredKeyMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredMapValues.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$FilteredMapValues.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$FilteredMapValues.retainAll(java.util.Collection<?>)"], ["java.lang.Object[]", "com.google.common.collect.Maps$FilteredMapValues.toArray()"], ["<T> T[]", "com.google.common.collect.Maps$FilteredMapValues.toArray(T[])"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$IteratorBasedAbstractMap$1.iterator()"], ["java.util.Spliterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$IteratorBasedAbstractMap$1.spliterator()"], ["void", "com.google.common.collect.Maps$IteratorBasedAbstractMap$1.forEach(java.util.function.Consumer<? super java.util.Map$Entry<K, V>>)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$IteratorBasedAbstractMap.entrySet()"], ["void", "com.google.common.collect.Maps$IteratorBasedAbstractMap.clear()"], ["void", "com.google.common.collect.Maps$KeySet.forEach(java.util.function.Consumer<? super K>)"], ["int", "com.google.common.collect.Maps$KeySet.size()"], ["boolean", "com.google.common.collect.Maps$KeySet.isEmpty()"], ["boolean", "com.google.common.collect.Maps$KeySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$KeySet.remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$KeySet.clear()"], ["boolean", "com.google.common.collect.Maps$MapDifferenceImpl.areEqual()"], ["java.util.Map<K, V>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnLeft()"], ["java.util.Map<K, V>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesOnlyOnRight()"], ["java.util.Map<K, V>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesInCommon()"], ["java.util.Map<K, com.google.common.collect.MapDifference$ValueDifference<V>>", "com.google.common.collect.Maps$MapDifferenceImpl.entriesDiffering()"], ["boolean", "com.google.common.collect.Maps$MapDifferenceImpl.equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$MapDifferenceImpl.hashCode()"], ["java.lang.String", "com.google.common.collect.Maps$MapDifferenceImpl.toString()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.tailMap(K, boolean)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$NavigableAsMapView.comparator()"], ["V", "com.google.common.collect.Maps$NavigableAsMapView.get(java.lang.Object)"], ["V", "com.google.common.collect.Maps$NavigableAsMapView.getOrDefault(java.lang.Object, V)"], ["void", "com.google.common.collect.Maps$NavigableAsMapView.clear()"], ["void", "com.google.common.collect.Maps$NavigableAsMapView.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["int", "com.google.common.collect.Maps$NavigableAsMapView.size()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$NavigableAsMapView.descendingMap()"], ["K", "com.google.common.collect.Maps$NavigableKeySet.lower(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.floor(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.ceiling(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.higher(K)"], ["K", "com.google.common.collect.Maps$NavigableKeySet.pollFirst()"], ["K", "com.google.common.collect.Maps$NavigableKeySet.pollLast()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$SortedAsMapView.comparator()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedAsMapView.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedAsMapView.headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedAsMapView.tailMap(K)"], ["K", "com.google.common.collect.Maps$SortedAsMapView.firstKey()"], ["K", "com.google.common.collect.Maps$SortedAsMapView.lastKey()"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$SortedKeySet.comparator()"], ["K", "com.google.common.collect.Maps$SortedKeySet.first()"], ["K", "com.google.common.collect.Maps$SortedKeySet.last()"], ["java.util.SortedMap<K, com.google.common.collect.MapDifference$ValueDifference<V>>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesDiffering()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesInCommon()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnRight()"], ["java.util.Map", "com.google.common.collect.Maps$SortedMapDifferenceImpl.entriesOnlyOnLeft()"], ["int", "com.google.common.collect.Maps$TransformedEntriesMap.size()"], ["boolean", "com.google.common.collect.Maps$TransformedEntriesMap.containsKey(java.lang.Object)"], ["V2", "com.google.common.collect.Maps$TransformedEntriesMap.get(java.lang.Object)"], ["V2", "com.google.common.collect.Maps$TransformedEntriesMap.getOrDefault(java.lang.Object, V2)"], ["V2", "com.google.common.collect.Maps$TransformedEntriesMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.Maps$TransformedEntriesMap.clear()"], ["void", "com.google.common.collect.Maps$TransformedEntriesMap.forEach(java.util.function.BiConsumer<? super K, ? super V2>)"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.ceilingKey(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.descendingMap()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.floorEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.floorKey(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(K, boolean)"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.higherEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerEntry(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(K, K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K)"], ["java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(K, boolean)"], ["java.util.SortedMap", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.tailMap(java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.subMap(java.lang.Object, java.lang.Object)"], ["java.util.SortedMap", "com.google.common.collect.Maps$TransformedEntriesNavigableMap.headMap(java.lang.Object)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.comparator()"], ["K", "com.google.common.collect.Maps$TransformedEntriesSortedMap.firstKey()"], ["java.util.SortedMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.headMap(K)"], ["K", "com.google.common.collect.Maps$TransformedEntriesSortedMap.lastKey()"], ["java.util.SortedMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V2>", "com.google.common.collect.Maps$TransformedEntriesSortedMap.tailMap(K)"], ["V", "com.google.common.collect.Maps$UnmodifiableBiMap.forcePut(K, V)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.Maps$UnmodifiableBiMap.inverse()"], ["java.util.Collection", "com.google.common.collect.Maps$UnmodifiableBiMap.values()"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$UnmodifiableEntries.iterator()"], ["java.lang.Object[]", "com.google.common.collect.Maps$UnmodifiableEntries.toArray()"], ["<T> T[]", "com.google.common.collect.Maps$UnmodifiableEntries.toArray(T[])"], ["boolean", "com.google.common.collect.Maps$UnmodifiableEntrySet.equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$UnmodifiableEntrySet.hashCode()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.lowerEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.floorEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.floorKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.ceilingKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.higherEntry(K)"], ["K", "com.google.common.collect.Maps$UnmodifiableNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.descendingMap()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.headMap(K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Maps$UnmodifiableNavigableMap.tailMap(K, boolean)"], ["V", "com.google.common.collect.Maps$ValueDifferenceImpl.leftValue()"], ["V", "com.google.common.collect.Maps$ValueDifferenceImpl.rightValue()"], ["boolean", "com.google.common.collect.Maps$ValueDifferenceImpl.equals(java.lang.Object)"], ["int", "com.google.common.collect.Maps$ValueDifferenceImpl.hashCode()"], ["java.lang.String", "com.google.common.collect.Maps$ValueDifferenceImpl.toString()"], ["void", "com.google.common.collect.Maps$Values.forEach(java.util.function.Consumer<? super V>)"], ["boolean", "com.google.common.collect.Maps$Values.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Maps$Values.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Maps$Values.retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.Maps$Values.size()"], ["boolean", "com.google.common.collect.Maps$Values.isEmpty()"], ["boolean", "com.google.common.collect.Maps$Values.contains(java.lang.Object)"], ["void", "com.google.common.collect.Maps$Values.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Maps$ViewCachingAbstractMap.entrySet()"], ["<K extends java.lang.Enum<K>, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.immutableEnumMap(java.util.Map<K, ? extends V>)"], ["<T, K extends java.lang.Enum<K>, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.Maps.toImmutableEnumMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>)"], ["<T, K extends java.lang.Enum<K>, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableMap<K, V>>", "com.google.common.collect.Maps.toImmutableEnumMap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>)"], ["<K, V> java.util.HashMap<K, V>", "com.google.common.collect.Maps.newHashMap()"], ["<K, V> java.util.HashMap<K, V>", "com.google.common.collect.Maps.newHashMapWithExpectedSize(int)"], ["<K, V> java.util.HashMap<K, V>", "com.google.common.collect.Maps.newHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.LinkedHashMap<K, V>", "com.google.common.collect.Maps.newLinkedHashMap()"], ["<K, V> java.util.LinkedHashMap<K, V>", "com.google.common.collect.Maps.newLinkedHashMapWithExpectedSize(int)"], ["<K, V> java.util.LinkedHashMap<K, V>", "com.google.common.collect.Maps.newLinkedHashMap(java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.concurrent.ConcurrentMap<K, V>", "com.google.common.collect.Maps.newConcurrentMap()"], ["<K extends java.lang.Comparable, V> java.util.TreeMap<K, V>", "com.google.common.collect.Maps.newTreeMap()"], ["<K, V> java.util.TreeMap<K, V>", "com.google.common.collect.Maps.newTreeMap(java.util.SortedMap<K, ? extends V>)"], ["<C, K extends C, V> java.util.TreeMap<K, V>", "com.google.common.collect.Maps.newTreeMap(java.util.Comparator<C>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "com.google.common.collect.Maps.newEnumMap(java.lang.Class<K>)"], ["<K extends java.lang.Enum<K>, V> java.util.EnumMap<K, V>", "com.google.common.collect.Maps.newEnumMap(java.util.Map<K, ? extends V>)"], ["<K, V> java.util.IdentityHashMap<K, V>", "com.google.common.collect.Maps.newIdentityHashMap()"], ["<K, V> com.google.common.collect.MapDifference<K, V>", "com.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> com.google.common.collect.MapDifference<K, V>", "com.google.common.collect.Maps.difference(java.util.Map<? extends K, ? extends V>, java.util.Map<? extends K, ? extends V>, com.google.common.base.Equivalence<? super V>)"], ["<K, V> com.google.common.collect.SortedMapDifference<K, V>", "com.google.common.collect.Maps.difference(java.util.SortedMap<K, ? extends V>, java.util.Map<? extends K, ? extends V>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.asMap(java.util.Set<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.asMap(java.util.SortedSet<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.asMap(java.util.NavigableSet<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.toMap(java.lang.Iterable<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.toMap(java.util.Iterator<K>, com.google.common.base.Function<? super K, V>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.uniqueIndex(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)"], ["<K, V> com.google.common.collect.ImmutableMap<K, V>", "com.google.common.collect.Maps.uniqueIndex(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)"], ["com.google.common.collect.ImmutableMap<java.lang.String, java.lang.String>", "com.google.common.collect.Maps.fromProperties(java.util.Properties)"], ["<K, V> java.util.Map$Entry<K, V>", "com.google.common.collect.Maps.immutableEntry(K, V)"], ["<A, B> com.google.common.base.Converter<A, B>", "com.google.common.collect.Maps.asConverter(com.google.common.collect.BiMap<A, B>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.synchronizedBiMap(com.google.common.collect.BiMap<K, V>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.unmodifiableBiMap(com.google.common.collect.BiMap<? extends K, ? extends V>)"], ["<K, V1, V2> java.util.Map<K, V2>", "com.google.common.collect.Maps.transformValues(java.util.Map<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "com.google.common.collect.Maps.transformValues(java.util.SortedMap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps.transformValues(java.util.NavigableMap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> java.util.Map<K, V2>", "com.google.common.collect.Maps.transformEntries(java.util.Map<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.SortedMap<K, V2>", "com.google.common.collect.Maps.transformEntries(java.util.SortedMap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> java.util.NavigableMap<K, V2>", "com.google.common.collect.Maps.transformEntries(java.util.NavigableMap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.filterKeys(java.util.Map<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.filterKeys(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.filterKeys(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.filterValues(java.util.Map<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.filterValues(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.filterValues(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.filterValues(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> java.util.Map<K, V>", "com.google.common.collect.Maps.filterEntries(java.util.Map<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.SortedMap<K, V>", "com.google.common.collect.Maps.filterEntries(java.util.SortedMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.filterEntries(java.util.NavigableMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> com.google.common.collect.BiMap<K, V>", "com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.unmodifiableNavigableMap(java.util.NavigableMap<K, ? extends V>)"], ["<K, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.synchronizedNavigableMap(java.util.NavigableMap<K, V>)"], ["<K extends java.lang.Comparable<? super K>, V> java.util.NavigableMap<K, V>", "com.google.common.collect.Maps.subMap(java.util.NavigableMap<K, V>, com.google.common.collect.Range<K>)"], ["<T extends B> com.google.common.collect.MinMaxPriorityQueue<T>", "com.google.common.collect.MinMaxPriorityQueue$Builder.create()"], ["<T extends B> com.google.common.collect.MinMaxPriorityQueue<T>", "com.google.common.collect.MinMaxPriorityQueue$Builder.create(java.lang.Iterable<? extends T>)"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue$QueueIterator.hasNext()"], ["E", "com.google.common.collect.MinMaxPriorityQueue$QueueIterator.next()"], ["void", "com.google.common.collect.MinMaxPriorityQueue$QueueIterator.remove()"], ["<E extends java.lang.Comparable<E>> com.google.common.collect.MinMaxPriorityQueue<E>", "com.google.common.collect.MinMaxPriorityQueue.create()"], ["<E extends java.lang.Comparable<E>> com.google.common.collect.MinMaxPriorityQueue<E>", "com.google.common.collect.MinMaxPriorityQueue.create(java.lang.Iterable<? extends E>)"], ["<B> com.google.common.collect.MinMaxPriorityQueue$Builder<B>", "com.google.common.collect.MinMaxPriorityQueue.orderedBy(java.util.Comparator<B>)"], ["int", "com.google.common.collect.MinMaxPriorityQueue.size()"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue.add(E)"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.MinMaxPriorityQueue.offer(E)"], ["E", "com.google.common.collect.MinMaxPriorityQueue.poll()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.peek()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.pollFirst()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.removeFirst()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.peekFirst()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.pollLast()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.removeLast()"], ["E", "com.google.common.collect.MinMaxPriorityQueue.peekLast()"], ["void", "com.google.common.collect.MinMaxPriorityQueue.clear()"], ["java.lang.Object[]", "com.google.common.collect.MinMaxPriorityQueue.toArray()"], ["java.util.Comparator<? super E>", "com.google.common.collect.MinMaxPriorityQueue.comparator()"], ["<T> java.util.stream.Collector<T, ?, java.util.Optional<T>>", "com.google.common.collect.MoreCollectors.toOptional()"], ["<T> java.util.stream.Collector<T, ?, T>", "com.google.common.collect.MoreCollectors.onlyElement()"], ["default", "com.google.common.collect.Multimap.void forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$ArrayListSupplier.get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$EnumSetSupplier.get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$HashSetSupplier.get()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$LinkedHashSetSupplier.get()"], ["com.google.common.collect.MultimapBuilder$LinkedListSupplier[]", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.values()"], ["com.google.common.collect.MultimapBuilder$LinkedListSupplier", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.valueOf(java.lang.String)"], ["<V> com.google.common.base.Supplier<java.util.List<V>>", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.instance()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$LinkedListSupplier.get()"], ["<K extends K0, V extends V0> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$ListMultimapBuilder.build(com.google.common.collect.Multimap)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$ListMultimapBuilder.build()"], ["<K extends K0, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$1.build()"], ["<K extends K0, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$2.build()"], ["<K extends K0, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$3.build()"], ["<K extends K0, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$4.build()"], ["<K extends K0, V extends V0> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$5.build()"], ["<K extends K0, V extends V0> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys$6.build()"], ["com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues()"], ["com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.arrayListValues(int)"], ["com.google.common.collect.MultimapBuilder$ListMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedListValues()"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues()"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.hashSetValues(int)"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues()"], ["com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, java.lang.Object>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.linkedHashSetValues(int)"], ["com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, java.lang.Comparable>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues()"], ["<V0> com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder<K0, V0>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.treeSetValues(java.util.Comparator<V0>)"], ["<V0 extends java.lang.Enum<V0>> com.google.common.collect.MultimapBuilder$SetMultimapBuilder<K0, V0>", "com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys.enumSetValues(java.lang.Class<V0>)"], ["<K extends K0, V extends V0> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SetMultimapBuilder.build(com.google.common.collect.Multimap)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SetMultimapBuilder.build()"], ["<K extends K0, V extends V0> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(com.google.common.collect.Multimap)"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build(com.google.common.collect.Multimap)"], ["com.google.common.collect.Multimap", "com.google.common.collect.MultimapBuilder$SortedSetMultimapBuilder.build()"], ["java.lang.Object", "com.google.common.collect.MultimapBuilder$TreeSetSupplier.get()"], ["<K0> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "com.google.common.collect.MultimapBuilder.treeKeys(java.util.Comparator<K0>)"], ["<K0 extends java.lang.Enum<K0>> com.google.common.collect.MultimapBuilder$MultimapBuilderWithKeys<K0>", "com.google.common.collect.MultimapBuilder.enumKeys(java.lang.Class<K0>)"], ["<K extends K0, V extends V0> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.MultimapBuilder.build(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.lang.Object", "com.google.common.collect.Multimaps$AsMap$EntrySet$1.apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.Multimaps$AsMap$EntrySet.iterator()"], ["boolean", "com.google.common.collect.Multimaps$AsMap$EntrySet.remove(java.lang.Object)"], ["int", "com.google.common.collect.Multimaps$AsMap.size()"], ["boolean", "com.google.common.collect.Multimaps$AsMap.isEmpty()"], ["boolean", "com.google.common.collect.Multimaps$AsMap.containsKey(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$AsMap.clear()"], ["java.lang.Object", "com.google.common.collect.Multimaps$AsMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)"], ["java.util.Comparator<? super V>", "com.google.common.collect.Multimaps$CustomSortedSetMultimap.valueComparator()"], ["int", "com.google.common.collect.Multimaps$Entries.size()"], ["boolean", "com.google.common.collect.Multimaps$Entries.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$Entries.remove(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$Entries.clear()"], ["K", "com.google.common.collect.Multimaps$Keys$1$1.getElement()"], ["int", "com.google.common.collect.Multimaps$Keys$1$1.getCount()"], ["int", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.size()"], ["boolean", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.isEmpty()"], ["boolean", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$Keys$KeysEntrySet.remove(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$Keys.forEach(java.util.function.Consumer<? super K>)"], ["boolean", "com.google.common.collect.Multimaps$Keys.contains(java.lang.Object)"], ["int", "com.google.common.collect.Multimaps$Keys.count(java.lang.Object)"], ["int", "com.google.common.collect.Multimaps$Keys.remove(java.lang.Object, int)"], ["void", "com.google.common.collect.Multimaps$Keys.clear()"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap$1$1.hasNext()"], ["V", "com.google.common.collect.Multimaps$MapMultimap$1$1.next()"], ["void", "com.google.common.collect.Multimaps$MapMultimap$1$1.remove()"], ["int", "com.google.common.collect.Multimaps$MapMultimap$1.size()"], ["int", "com.google.common.collect.Multimaps$MapMultimap.size()"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.put(K, V)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$MapMultimap.remove(java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$MapMultimap.clear()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Multimaps$MapMultimap.entries()"], ["int", "com.google.common.collect.Multimaps$MapMultimap.hashCode()"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$MapMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$TransformedEntriesListMultimap.get(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Multimaps$TransformedEntriesMultimap$1.transformEntry(java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.clear()"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.isEmpty()"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.put(K, V2)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(K, java.lang.Iterable<? extends V2>)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V2>)"], ["boolean", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.remove(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.Multimaps$TransformedEntriesMultimap.size()"], ["com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.get(java.lang.Object)"], ["com.google.common.collect.Multimap", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableListMultimap.delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableMultimap$1.apply(java.lang.Object)"], ["void", "com.google.common.collect.Multimaps$UnmodifiableMultimap.clear()"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.asMap()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.Multimaps$UnmodifiableMultimap.entries()"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.put(K, V)"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.Multimaps$UnmodifiableMultimap.remove(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.entries()"], ["com.google.common.collect.Multimap", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableSetMultimap.delegate()"], ["com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["java.util.Comparator<? super V>", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.valueComparator()"], ["java.util.Set", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)"], ["com.google.common.collect.SetMultimap", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.Multimap", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["java.lang.Object", "com.google.common.collect.Multimaps$UnmodifiableSortedSetMultimap.delegate()"], ["<T, K, V, M extends com.google.common.collect.Multimap<K, V>> java.util.stream.Collector<T, ?, M>", "com.google.common.collect.Multimaps.toMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<M>)"], ["<T, K, V, M extends com.google.common.collect.Multimap<K, V>> java.util.stream.Collector<T, ?, M>", "com.google.common.collect.Multimaps.flatteningToMultimap(java.util.function.Function<? super T, ? extends K>, java.util.function.Function<? super T, ? extends java.util.stream.Stream<? extends V>>, java.util.function.Supplier<M>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.newMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Collection<V>>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.newListMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.List<V>>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.newSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.Set<V>>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps.newSortedSetMultimap(java.util.Map<K, java.util.Collection<V>>, com.google.common.base.Supplier<? extends java.util.SortedSet<V>>)"], ["<K, V, M extends com.google.common.collect.Multimap<K, V>> M", "com.google.common.collect.Multimaps.invertFrom(com.google.common.collect.Multimap<? extends V, ? extends K>, M)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.synchronizedMultimap(com.google.common.collect.Multimap<K, V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableMultimap(com.google.common.collect.Multimap<K, V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableMultimap(com.google.common.collect.ImmutableMultimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.synchronizedSetMultimap(com.google.common.collect.SetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableSetMultimap(com.google.common.collect.SetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableSetMultimap(com.google.common.collect.ImmutableSetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps.synchronizedSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> com.google.common.collect.SortedSetMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableSortedSetMultimap(com.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.synchronizedListMultimap(com.google.common.collect.ListMultimap<K, V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableListMultimap(com.google.common.collect.ListMultimap<K, V>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.unmodifiableListMultimap(com.google.common.collect.ImmutableListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.List<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.ListMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Set<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.SetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.SortedSet<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.SortedSetMultimap<K, V>)"], ["<K, V> java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.Multimaps.asMap(com.google.common.collect.Multimap<K, V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.forMap(java.util.Map<K, V>)"], ["<K, V1, V2> com.google.common.collect.Multimap<K, V2>", "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.Multimap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> com.google.common.collect.Multimap<K, V2>", "com.google.common.collect.Multimaps.transformEntries(com.google.common.collect.Multimap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V1, V2> com.google.common.collect.ListMultimap<K, V2>", "com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap<K, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<K, V1, V2> com.google.common.collect.ListMultimap<K, V2>", "com.google.common.collect.Multimaps.transformEntries(com.google.common.collect.ListMultimap<K, V1>, com.google.common.collect.Maps$EntryTransformer<? super K, ? super V1, V2>)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.Multimaps.index(java.lang.Iterable<V>, com.google.common.base.Function<? super V, K>)"], ["<K, V> com.google.common.collect.ImmutableListMultimap<K, V>", "com.google.common.collect.Multimaps.index(java.util.Iterator<V>, com.google.common.base.Function<? super V, K>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.filterKeys(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.filterKeys(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.ListMultimap<K, V>", "com.google.common.collect.Multimaps.filterKeys(com.google.common.collect.ListMultimap<K, V>, com.google.common.base.Predicate<? super K>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.filterValues(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.filterValues(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super V>)"], ["<K, V> com.google.common.collect.Multimap<K, V>", "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.Multimap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["<K, V> com.google.common.collect.SetMultimap<K, V>", "com.google.common.collect.Multimaps.filterEntries(com.google.common.collect.SetMultimap<K, V>, com.google.common.base.Predicate<? super java.util.Map$Entry<K, V>>)"], ["default", "com.google.common.collect.Multiset.void forEachEntry(java.util.function.ObjIntConsumer<? super E>)"], ["default", "com.google.common.collect.Multiset.void forEach(java.util.function.Consumer<? super E>)"], ["boolean", "com.google.common.collect.Multisets$1.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$1.isEmpty()"], ["int", "com.google.common.collect.Multisets$1.count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$2.count(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$3.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$3.isEmpty()"], ["int", "com.google.common.collect.Multisets$3.size()"], ["int", "com.google.common.collect.Multisets$3.count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$4.count(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$AbstractEntry.equals(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$AbstractEntry.hashCode()"], ["java.lang.String", "com.google.common.collect.Multisets$AbstractEntry.toString()"], ["int", "com.google.common.collect.Multisets$DecreasingCount.compare(com.google.common.collect.Multiset$Entry<?>, com.google.common.collect.Multiset$Entry<?>)"], ["int", "com.google.common.collect.Multisets$DecreasingCount.compare(java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.Multisets$ElementSet.clear()"], ["boolean", "com.google.common.collect.Multisets$ElementSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$ElementSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Multisets$ElementSet.isEmpty()"], ["boolean", "com.google.common.collect.Multisets$ElementSet.remove(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$ElementSet.size()"], ["boolean", "com.google.common.collect.Multisets$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Multisets$EntrySet.remove(java.lang.Object)"], ["void", "com.google.common.collect.Multisets$EntrySet.clear()"], ["boolean", "com.google.common.collect.Multisets$FilteredMultiset$1.apply(com.google.common.collect.Multiset$Entry<E>)"], ["boolean", "com.google.common.collect.Multisets$FilteredMultiset$1.apply(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$FilteredMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$FilteredMultiset.add(E, int)"], ["int", "com.google.common.collect.Multisets$FilteredMultiset.remove(java.lang.Object, int)"], ["void", "com.google.common.collect.Multisets$FilteredMultiset.clear()"], ["java.util.Iterator", "com.google.common.collect.Multisets$FilteredMultiset.iterator()"], ["E", "com.google.common.collect.Multisets$ImmutableEntry.getElement()"], ["int", "com.google.common.collect.Multisets$ImmutableEntry.getCount()"], ["boolean", "com.google.common.collect.Multisets$MultisetIteratorImpl.hasNext()"], ["E", "com.google.common.collect.Multisets$MultisetIteratorImpl.next()"], ["void", "com.google.common.collect.Multisets$MultisetIteratorImpl.remove()"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.add(E)"], ["int", "com.google.common.collect.Multisets$UnmodifiableMultiset.add(E, int)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object)"], ["int", "com.google.common.collect.Multisets$UnmodifiableMultiset.remove(java.lang.Object, int)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.Multisets$UnmodifiableMultiset.clear()"], ["int", "com.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.Multisets$UnmodifiableMultiset.setCount(E, int, int)"], ["<T, E, M extends com.google.common.collect.Multiset<E>> java.util.stream.Collector<T, ?, M>", "com.google.common.collect.Multisets.toMultiset(java.util.function.Function<? super T, E>, java.util.function.ToIntFunction<? super T>, java.util.function.Supplier<M>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.unmodifiableMultiset(com.google.common.collect.Multiset<? extends E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.unmodifiableMultiset(com.google.common.collect.ImmutableMultiset<E>)"], ["<E> com.google.common.collect.SortedMultiset<E>", "com.google.common.collect.Multisets.unmodifiableSortedMultiset(com.google.common.collect.SortedMultiset<E>)"], ["<E> com.google.common.collect.Multiset$Entry<E>", "com.google.common.collect.Multisets.immutableEntry(E, int)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.filter(com.google.common.collect.Multiset<E>, com.google.common.base.Predicate<? super E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.union(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.intersection(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.sum(com.google.common.collect.Multiset<? extends E>, com.google.common.collect.Multiset<? extends E>)"], ["<E> com.google.common.collect.Multiset<E>", "com.google.common.collect.Multisets.difference(com.google.common.collect.Multiset<E>, com.google.common.collect.Multiset<?>)"], ["boolean", "com.google.common.collect.Multisets.containsOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)"], ["boolean", "com.google.common.collect.Multisets.retainOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)"], ["boolean", "com.google.common.collect.Multisets.removeOccurrences(com.google.common.collect.Multiset<?>, java.lang.Iterable<?>)"], ["boolean", "com.google.common.collect.Multisets.removeOccurrences(com.google.common.collect.Multiset<?>, com.google.common.collect.Multiset<?>)"], ["<E> com.google.common.collect.ImmutableMultiset<E>", "com.google.common.collect.Multisets.copyHighestCountFirst(com.google.common.collect.Multiset<E>)"], ["B", "com.google.common.collect.MutableClassToInstanceMap$1.setValue(B)"], ["java.util.Spliterator<java.util.Map$Entry<java.lang.Class<? extends B>, B>>", "com.google.common.collect.MutableClassToInstanceMap$2.spliterator()"], ["java.util.Iterator<java.util.Map$Entry<java.lang.Class<? extends B>, B>>", "com.google.common.collect.MutableClassToInstanceMap$2.iterator()"], ["java.lang.Object[]", "com.google.common.collect.MutableClassToInstanceMap$2.toArray()"], ["<T> T[]", "com.google.common.collect.MutableClassToInstanceMap$2.toArray(T[])"], ["<B> com.google.common.collect.MutableClassToInstanceMap<B>", "com.google.common.collect.MutableClassToInstanceMap.create()"], ["<B> com.google.common.collect.MutableClassToInstanceMap<B>", "com.google.common.collect.MutableClassToInstanceMap.create(java.util.Map<java.lang.Class<? extends B>, B>)"], ["java.util.Set<java.util.Map$Entry<java.lang.Class<? extends B>, B>>", "com.google.common.collect.MutableClassToInstanceMap.entrySet()"], ["B", "com.google.common.collect.MutableClassToInstanceMap.put(java.lang.Class<? extends B>, B)"], ["void", "com.google.common.collect.MutableClassToInstanceMap.putAll(java.util.Map<? extends java.lang.Class<? extends B>, ? extends B>)"], ["<T extends B> T", "com.google.common.collect.MutableClassToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "com.google.common.collect.MutableClassToInstanceMap.getInstance(java.lang.Class<T>)"], ["java.lang.Object", "com.google.common.collect.MutableClassToInstanceMap.put(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.NaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> com.google.common.collect.Ordering<S>", "com.google.common.collect.NaturalOrdering.nullsFirst()"], ["<S extends java.lang.Comparable> com.google.common.collect.Ordering<S>", "com.google.common.collect.NaturalOrdering.nullsLast()"], ["<S extends java.lang.Comparable> com.google.common.collect.Ordering<S>", "com.google.common.collect.NaturalOrdering.reverse()"], ["java.lang.String", "com.google.common.collect.NaturalOrdering.toString()"], ["int", "com.google.common.collect.NaturalOrdering.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.NullsFirstOrdering.compare(T, T)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsFirstOrdering.reverse()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsFirstOrdering.nullsFirst()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsFirstOrdering.nullsLast()"], ["boolean", "com.google.common.collect.NullsFirstOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.NullsFirstOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.NullsFirstOrdering.toString()"], ["int", "com.google.common.collect.NullsLastOrdering.compare(T, T)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsLastOrdering.reverse()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsLastOrdering.nullsFirst()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.NullsLastOrdering.nullsLast()"], ["boolean", "com.google.common.collect.NullsLastOrdering.equals(java.lang.Object)"], ["int", "com.google.common.collect.NullsLastOrdering.hashCode()"], ["java.lang.String", "com.google.common.collect.NullsLastOrdering.toString()"], ["<T> T[]", "com.google.common.collect.ObjectArrays.newArray(java.lang.Class<T>, int)"], ["<T> T[]", "com.google.common.collect.ObjectArrays.newArray(T[], int)"], ["<T> T[]", "com.google.common.collect.ObjectArrays.concat(T[], T[], java.lang.Class<T>)"], ["<T> T[]", "com.google.common.collect.ObjectArrays.concat(T, T[])"], ["<T> T[]", "com.google.common.collect.ObjectArrays.concat(T[], T)"], ["int", "com.google.common.collect.Ordering$ArbitraryOrdering.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.Ordering$ArbitraryOrdering.toString()"], ["<C extends java.lang.Comparable> com.google.common.collect.Ordering<C>", "com.google.common.collect.Ordering.natural()"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.from(java.util.Comparator<T>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.from(com.google.common.collect.Ordering<T>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.explicit(java.util.List<T>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.explicit(T, T...)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.Ordering.reverse()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.Ordering.nullsFirst()"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.Ordering.nullsLast()"], ["<F> com.google.common.collect.Ordering<F>", "com.google.common.collect.Ordering.onResultOf(com.google.common.base.Function<F, ? extends T>)"], ["<U extends T> com.google.common.collect.Ordering<U>", "com.google.common.collect.Ordering.compound(java.util.Comparator<? super U>)"], ["<T> com.google.common.collect.Ordering<T>", "com.google.common.collect.Ordering.compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)"], ["<S extends T> com.google.common.collect.Ordering<java.lang.Iterable<S>>", "com.google.common.collect.Ordering.lexicographical()"], ["<E extends T> E", "com.google.common.collect.Ordering.min(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.min(java.lang.Iterable<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.min(E, E)"], ["<E extends T> E", "com.google.common.collect.Ordering.min(E, E, E, E...)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(java.lang.Iterable<E>)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(E, E)"], ["<E extends T> E", "com.google.common.collect.Ordering.max(E, E, E, E...)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.leastOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.leastOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.greatestOf(java.lang.Iterable<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.greatestOf(java.util.Iterator<E>, int)"], ["<E extends T> java.util.List<E>", "com.google.common.collect.Ordering.sortedCopy(java.lang.Iterable<E>)"], ["<E extends T> com.google.common.collect.ImmutableList<E>", "com.google.common.collect.Ordering.immutableSortedCopy(java.lang.Iterable<E>)"], ["boolean", "com.google.common.collect.Ordering.isOrdered(java.lang.Iterable<? extends T>)"], ["boolean", "com.google.common.collect.Ordering.isStrictlyOrdered(java.lang.Iterable<? extends T>)"], ["int", "com.google.common.collect.Ordering.binarySearch(java.util.List<? extends T>, T)"], ["<E> java.util.concurrent.ArrayBlockingQueue<E>", "com.google.common.collect.Queues.newArrayBlockingQueue(int)"], ["<E> java.util.ArrayDeque<E>", "com.google.common.collect.Queues.newArrayDeque()"], ["<E> java.util.ArrayDeque<E>", "com.google.common.collect.Queues.newArrayDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "com.google.common.collect.Queues.newConcurrentLinkedQueue()"], ["<E> java.util.concurrent.ConcurrentLinkedQueue<E>", "com.google.common.collect.Queues.newConcurrentLinkedQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "com.google.common.collect.Queues.newLinkedBlockingDeque()"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "com.google.common.collect.Queues.newLinkedBlockingDeque(int)"], ["<E> java.util.concurrent.LinkedBlockingDeque<E>", "com.google.common.collect.Queues.newLinkedBlockingDeque(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "com.google.common.collect.Queues.newLinkedBlockingQueue()"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "com.google.common.collect.Queues.newLinkedBlockingQueue(int)"], ["<E> java.util.concurrent.LinkedBlockingQueue<E>", "com.google.common.collect.Queues.newLinkedBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "com.google.common.collect.Queues.newPriorityBlockingQueue()"], ["<E extends java.lang.Comparable> java.util.concurrent.PriorityBlockingQueue<E>", "com.google.common.collect.Queues.newPriorityBlockingQueue(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "com.google.common.collect.Queues.newPriorityQueue()"], ["<E extends java.lang.Comparable> java.util.PriorityQueue<E>", "com.google.common.collect.Queues.newPriorityQueue(java.lang.Iterable<? extends E>)"], ["<E> java.util.concurrent.SynchronousQueue<E>", "com.google.common.collect.Queues.newSynchronousQueue()"], ["<E> int", "com.google.common.collect.Queues.drain(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)"], ["<E> int", "com.google.common.collect.Queues.drainUninterruptibly(java.util.concurrent.BlockingQueue<E>, java.util.Collection<? super E>, int, long, java.util.concurrent.TimeUnit)"], ["<E> java.util.Queue<E>", "com.google.common.collect.Queues.synchronizedQueue(java.util.Queue<E>)"], ["<E> java.util.Deque<E>", "com.google.common.collect.Queues.synchronizedDeque(java.util.Deque<E>)"], ["com.google.common.collect.Cut", "com.google.common.collect.Range$LowerBoundFn.apply(com.google.common.collect.Range)"], ["java.lang.Object", "com.google.common.collect.Range$LowerBoundFn.apply(java.lang.Object)"], ["int", "com.google.common.collect.Range$RangeLexOrdering.compare(com.google.common.collect.Range<?>, com.google.common.collect.Range<?>)"], ["int", "com.google.common.collect.Range$RangeLexOrdering.compare(java.lang.Object, java.lang.Object)"], ["com.google.common.collect.Cut", "com.google.common.collect.Range$UpperBoundFn.apply(com.google.common.collect.Range)"], ["java.lang.Object", "com.google.common.collect.Range$UpperBoundFn.apply(java.lang.Object)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.open(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.closed(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.closedOpen(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.openClosed(C, C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.range(C, com.google.common.collect.BoundType, C, com.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.lessThan(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.atMost(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.upTo(C, com.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.greaterThan(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.atLeast(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.downTo(C, com.google.common.collect.BoundType)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.all()"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.singleton(C)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.Range<C>", "com.google.common.collect.Range.encloseAll(java.lang.Iterable<C>)"], ["boolean", "com.google.common.collect.Range.hasLowerBound()"], ["C", "com.google.common.collect.Range.lowerEndpoint()"], ["com.google.common.collect.BoundType", "com.google.common.collect.Range.lowerBoundType()"], ["boolean", "com.google.common.collect.Range.hasUpperBound()"], ["C", "com.google.common.collect.Range.upperEndpoint()"], ["com.google.common.collect.BoundType", "com.google.common.collect.Range.upperBoundType()"], ["boolean", "com.google.common.collect.Range.isEmpty()"], ["boolean", "com.google.common.collect.Range.contains(C)"], ["boolean", "com.google.common.collect.Range.apply(C)"], ["boolean", "com.google.common.collect.Range.containsAll(java.lang.Iterable<? extends C>)"], ["boolean", "com.google.common.collect.Range.encloses(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.Range.isConnected(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.Range.equals(java.lang.Object)"], ["int", "com.google.common.collect.Range.hashCode()"], ["java.lang.String", "com.google.common.collect.Range.toString()"], ["boolean", "com.google.common.collect.Range.apply(java.lang.Object)"], ["default", "com.google.common.collect.RangeSet.boolean enclosesAll(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["default", "com.google.common.collect.RangeSet.void addAll(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["default", "com.google.common.collect.RangeSet.void removeAll(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["C", "com.google.common.collect.RegularContiguousSet$3.get(int)"], ["java.lang.Object", "com.google.common.collect.RegularContiguousSet$3.get(int)"], ["C", "com.google.common.collect.RegularContiguousSet.first()"], ["C", "com.google.common.collect.RegularContiguousSet.last()"], ["int", "com.google.common.collect.RegularContiguousSet.size()"], ["boolean", "com.google.common.collect.RegularContiguousSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.RegularContiguousSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.RegularContiguousSet.isEmpty()"], ["boolean", "com.google.common.collect.RegularContiguousSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.RegularContiguousSet.hashCode()"], ["java.lang.Object", "com.google.common.collect.RegularContiguousSet.last()"], ["java.lang.Object", "com.google.common.collect.RegularContiguousSet.first()"], ["java.util.Iterator", "com.google.common.collect.RegularContiguousSet.descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.RegularContiguousSet.iterator()"], ["void", "com.google.common.collect.RegularImmutableAsList.forEach(java.util.function.Consumer<? super E>)"], ["E", "com.google.common.collect.RegularImmutableAsList.get(int)"], ["java.util.ListIterator", "com.google.common.collect.RegularImmutableAsList.listIterator(int)"], ["java.util.Map$Entry<V, K>", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)"], ["java.lang.Object", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet$1.get(int)"], ["int", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.hashCode()"], ["com.google.common.collect.UnmodifiableIterator<java.util.Map$Entry<V, K>>", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()"], ["void", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.forEach(java.util.function.Consumer<? super java.util.Map$Entry<V, K>>)"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.iterator()"], ["int", "com.google.common.collect.RegularImmutableBiMap$Inverse.size()"], ["com.google.common.collect.ImmutableBiMap<K, V>", "com.google.common.collect.RegularImmutableBiMap$Inverse.inverse()"], ["void", "com.google.common.collect.RegularImmutableBiMap$Inverse.forEach(java.util.function.BiConsumer<? super V, ? super K>)"], ["K", "com.google.common.collect.RegularImmutableBiMap$Inverse.get(java.lang.Object)"], ["com.google.common.collect.BiMap", "com.google.common.collect.RegularImmutableBiMap$Inverse.inverse()"], ["V", "com.google.common.collect.RegularImmutableBiMap.get(java.lang.Object)"], ["void", "com.google.common.collect.RegularImmutableBiMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["int", "com.google.common.collect.RegularImmutableBiMap.hashCode()"], ["int", "com.google.common.collect.RegularImmutableBiMap.size()"], ["com.google.common.collect.ImmutableBiMap<V, K>", "com.google.common.collect.RegularImmutableBiMap.inverse()"], ["com.google.common.collect.BiMap", "com.google.common.collect.RegularImmutableBiMap.inverse()"], ["int", "com.google.common.collect.RegularImmutableList.size()"], ["E", "com.google.common.collect.RegularImmutableList.get(int)"], ["java.util.ListIterator", "com.google.common.collect.RegularImmutableList.listIterator(int)"], ["boolean", "com.google.common.collect.RegularImmutableMap$KeySet.contains(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableMap$KeySet.size()"], ["V", "com.google.common.collect.RegularImmutableMap$Values.get(int)"], ["int", "com.google.common.collect.RegularImmutableMap$Values.size()"], ["V", "com.google.common.collect.RegularImmutableMap.get(java.lang.Object)"], ["void", "com.google.common.collect.RegularImmutableMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["int", "com.google.common.collect.RegularImmutableMap.size()"], ["boolean", "com.google.common.collect.RegularImmutableMultiset$ElementSet.contains(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableMultiset$ElementSet.size()"], ["int", "com.google.common.collect.RegularImmutableMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableMultiset.size()"], ["int", "com.google.common.collect.RegularImmutableMultiset.hashCode()"], ["java.util.Set", "com.google.common.collect.RegularImmutableMultiset.elementSet()"], ["boolean", "com.google.common.collect.RegularImmutableSet.contains(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableSet.size()"], ["int", "com.google.common.collect.RegularImmutableSet.hashCode()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSet.iterator()"], ["void", "com.google.common.collect.RegularImmutableSortedMultiset.forEachEntry(java.util.function.ObjIntConsumer<? super E>)"], ["int", "com.google.common.collect.RegularImmutableSortedMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableSortedMultiset.size()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.RegularImmutableSortedMultiset.tailMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.RegularImmutableSortedMultiset.headMultiset(java.lang.Object, com.google.common.collect.BoundType)"], ["java.util.NavigableSet", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["java.util.Set", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["com.google.common.collect.ImmutableSet", "com.google.common.collect.RegularImmutableSortedMultiset.elementSet()"], ["void", "com.google.common.collect.RegularImmutableSortedSet.forEach(java.util.function.Consumer<? super E>)"], ["int", "com.google.common.collect.RegularImmutableSortedSet.size()"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.RegularImmutableSortedSet.equals(java.lang.Object)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.first()"], ["E", "com.google.common.collect.RegularImmutableSortedSet.last()"], ["E", "com.google.common.collect.RegularImmutableSortedSet.lower(E)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.floor(E)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.ceiling(E)"], ["E", "com.google.common.collect.RegularImmutableSortedSet.higher(E)"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSortedSet.descendingIterator()"], ["java.util.Iterator", "com.google.common.collect.RegularImmutableSortedSet.iterator()"], ["int", "com.google.common.collect.RegularImmutableTable$1.compare(com.google.common.collect.Table$Cell<R, C, V>, com.google.common.collect.Table$Cell<R, C, V>)"], ["int", "com.google.common.collect.RegularImmutableTable$1.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableTable$CellSet.size()"], ["boolean", "com.google.common.collect.RegularImmutableTable$CellSet.contains(java.lang.Object)"], ["int", "com.google.common.collect.RegularImmutableTable$Values.size()"], ["V", "com.google.common.collect.RegularImmutableTable$Values.get(int)"], ["int", "com.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Comparable, java.lang.Comparable)"], ["<S extends java.lang.Comparable> com.google.common.collect.Ordering<S>", "com.google.common.collect.ReverseNaturalOrdering.reverse()"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(E, E)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable<E>)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(E, E)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(E, E, E, E...)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator<E>)"], ["<E extends java.lang.Comparable> E", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable<E>)"], ["java.lang.String", "com.google.common.collect.ReverseNaturalOrdering.toString()"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.lang.Iterable)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.max(java.util.Iterator)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.lang.Iterable)"], ["java.lang.Object", "com.google.common.collect.ReverseNaturalOrdering.min(java.util.Iterator)"], ["int", "com.google.common.collect.ReverseNaturalOrdering.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.ReverseOrdering.compare(T, T)"], ["<S extends T> com.google.common.collect.Ordering<S>", "com.google.common.collect.ReverseOrdering.reverse()"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(E, E)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(E, E, E, E...)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.min(java.lang.Iterable<E>)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(E, E)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(E, E, E, E...)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(java.util.Iterator<E>)"], ["<E extends T> E", "com.google.common.collect.ReverseOrdering.max(java.lang.Iterable<E>)"], ["int", "com.google.common.collect.ReverseOrdering.hashCode()"], ["boolean", "com.google.common.collect.ReverseOrdering.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.collect.ReverseOrdering.toString()"], ["default", "com.google.common.collect.RowSortedTable.java.util.Map rowMap()"], ["default", "com.google.common.collect.RowSortedTable.java.util.Set rowKeySet()"], ["default", "com.google.common.collect.SetMultimap.java.util.Collection entries()"], ["default", "com.google.common.collect.SetMultimap.java.util.Collection get(java.lang.Object)"], ["default", "com.google.common.collect.SetMultimap.java.util.Collection removeAll(java.lang.Object)"], ["default", "com.google.common.collect.SetMultimap.java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["int", "com.google.common.collect.Sets$1.size()"], ["boolean", "com.google.common.collect.Sets$1.isEmpty()"], ["boolean", "com.google.common.collect.Sets$1.contains(java.lang.Object)"], ["<S extends java.util.Set<E>> S", "com.google.common.collect.Sets$1.copyInto(S)"], ["java.util.Iterator", "com.google.common.collect.Sets$1.iterator()"], ["int", "com.google.common.collect.Sets$2.size()"], ["boolean", "com.google.common.collect.Sets$2.isEmpty()"], ["boolean", "com.google.common.collect.Sets$2.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Sets$2.containsAll(java.util.Collection<?>)"], ["java.util.Iterator", "com.google.common.collect.Sets$2.iterator()"], ["int", "com.google.common.collect.Sets$3.size()"], ["boolean", "com.google.common.collect.Sets$3.isEmpty()"], ["boolean", "com.google.common.collect.Sets$3.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.Sets$3.iterator()"], ["E", "com.google.common.collect.Sets$4$1.computeNext()"], ["int", "com.google.common.collect.Sets$4.size()"], ["boolean", "com.google.common.collect.Sets$4.isEmpty()"], ["boolean", "com.google.common.collect.Sets$4.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.Sets$4.iterator()"], ["boolean", "com.google.common.collect.Sets$5$1$1.contains(java.lang.Object)"], ["int", "com.google.common.collect.Sets$5$1$1.size()"], ["boolean", "com.google.common.collect.Sets$5.contains(java.lang.Object)"], ["int", "com.google.common.collect.Sets$5.size()"], ["java.lang.String", "com.google.common.collect.Sets$5.toString()"], ["int", "com.google.common.collect.Sets$CartesianSet$1.size()"], ["java.lang.Object", "com.google.common.collect.Sets$CartesianSet$1.get(int)"], ["boolean", "com.google.common.collect.Sets$CartesianSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.Sets$CartesianSet.hashCode()"], ["E", "com.google.common.collect.Sets$DescendingSet.lower(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.floor(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.ceiling(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.higher(E)"], ["E", "com.google.common.collect.Sets$DescendingSet.pollFirst()"], ["E", "com.google.common.collect.Sets$DescendingSet.pollLast()"], ["java.util.Comparator<? super E>", "com.google.common.collect.Sets$DescendingSet.comparator()"], ["E", "com.google.common.collect.Sets$DescendingSet.first()"], ["E", "com.google.common.collect.Sets$DescendingSet.last()"], ["java.lang.Object[]", "com.google.common.collect.Sets$DescendingSet.toArray()"], ["<T> T[]", "com.google.common.collect.Sets$DescendingSet.toArray(T[])"], ["java.lang.String", "com.google.common.collect.Sets$DescendingSet.toString()"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.lower(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.floor(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.ceiling(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.higher(E)"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.pollFirst()"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.pollLast()"], ["E", "com.google.common.collect.Sets$FilteredNavigableSet.last()"], ["boolean", "com.google.common.collect.Sets$FilteredSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.Sets$FilteredSet.hashCode()"], ["java.util.Comparator<? super E>", "com.google.common.collect.Sets$FilteredSortedSet.comparator()"], ["E", "com.google.common.collect.Sets$FilteredSortedSet.first()"], ["E", "com.google.common.collect.Sets$FilteredSortedSet.last()"], ["boolean", "com.google.common.collect.Sets$ImprovedAbstractSet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Sets$ImprovedAbstractSet.retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.Sets$PowerSet.size()"], ["boolean", "com.google.common.collect.Sets$PowerSet.isEmpty()"], ["boolean", "com.google.common.collect.Sets$PowerSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Sets$PowerSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.Sets$PowerSet.hashCode()"], ["java.lang.String", "com.google.common.collect.Sets$PowerSet.toString()"], ["<S extends java.util.Set<E>> S", "com.google.common.collect.Sets$SetView.copyInto(S)"], ["boolean", "com.google.common.collect.Sets$SetView.add(E)"], ["boolean", "com.google.common.collect.Sets$SetView.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Sets$SetView.addAll(java.util.Collection<? extends E>)"], ["boolean", "com.google.common.collect.Sets$SetView.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Sets$SetView.removeIf(java.util.function.Predicate<? super E>)"], ["boolean", "com.google.common.collect.Sets$SetView.retainAll(java.util.Collection<?>)"], ["void", "com.google.common.collect.Sets$SetView.clear()"], ["java.util.Iterator", "com.google.common.collect.Sets$SetView.iterator()"], ["boolean", "com.google.common.collect.Sets$SubSet$1.hasNext()"], ["E", "com.google.common.collect.Sets$SubSet$1.next()"], ["int", "com.google.common.collect.Sets$SubSet.size()"], ["boolean", "com.google.common.collect.Sets$SubSet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Sets$UnmodifiableNavigableSet.removeIf(java.util.function.Predicate<? super E>)"], ["void", "com.google.common.collect.Sets$UnmodifiableNavigableSet.forEach(java.util.function.Consumer<? super E>)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.lower(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.floor(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.ceiling(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.higher(E)"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.pollFirst()"], ["E", "com.google.common.collect.Sets$UnmodifiableNavigableSet.pollLast()"], ["<E extends java.lang.Enum<E>> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.Sets.immutableEnumSet(E, E...)"], ["<E extends java.lang.Enum<E>> com.google.common.collect.ImmutableSet<E>", "com.google.common.collect.Sets.immutableEnumSet(java.lang.Iterable<E>)"], ["<E extends java.lang.Enum<E>> java.util.stream.Collector<E, ?, com.google.common.collect.ImmutableSet<E>>", "com.google.common.collect.Sets.toImmutableEnumSet()"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "com.google.common.collect.Sets.newEnumSet(java.lang.Iterable<E>, java.lang.Class<E>)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet()"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet(E...)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSetWithExpectedSize(int)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.HashSet<E>", "com.google.common.collect.Sets.newHashSet(java.util.Iterator<? extends E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newConcurrentHashSet()"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newConcurrentHashSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.LinkedHashSet<E>", "com.google.common.collect.Sets.newLinkedHashSet()"], ["<E> java.util.LinkedHashSet<E>", "com.google.common.collect.Sets.newLinkedHashSetWithExpectedSize(int)"], ["<E> java.util.LinkedHashSet<E>", "com.google.common.collect.Sets.newLinkedHashSet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "com.google.common.collect.Sets.newTreeSet()"], ["<E extends java.lang.Comparable> java.util.TreeSet<E>", "com.google.common.collect.Sets.newTreeSet(java.lang.Iterable<? extends E>)"], ["<E> java.util.TreeSet<E>", "com.google.common.collect.Sets.newTreeSet(java.util.Comparator<? super E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newIdentityHashSet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "com.google.common.collect.Sets.newCopyOnWriteArraySet()"], ["<E> java.util.concurrent.CopyOnWriteArraySet<E>", "com.google.common.collect.Sets.newCopyOnWriteArraySet(java.lang.Iterable<? extends E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "com.google.common.collect.Sets.complementOf(java.util.Collection<E>)"], ["<E extends java.lang.Enum<E>> java.util.EnumSet<E>", "com.google.common.collect.Sets.complementOf(java.util.Collection<E>, java.lang.Class<E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.newSetFromMap(java.util.Map<E, java.lang.Boolean>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.union(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.intersection(java.util.Set<E>, java.util.Set<?>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.difference(java.util.Set<E>, java.util.Set<?>)"], ["<E> com.google.common.collect.Sets$SetView<E>", "com.google.common.collect.Sets.symmetricDifference(java.util.Set<? extends E>, java.util.Set<? extends E>)"], ["<E> java.util.Set<E>", "com.google.common.collect.Sets.filter(java.util.Set<E>, com.google.common.base.Predicate<? super E>)"], ["<E> java.util.SortedSet<E>", "com.google.common.collect.Sets.filter(java.util.SortedSet<E>, com.google.common.base.Predicate<? super E>)"], ["<E> java.util.NavigableSet<E>", "com.google.common.collect.Sets.filter(java.util.NavigableSet<E>, com.google.common.base.Predicate<? super E>)"], ["<B> java.util.Set<java.util.List<B>>", "com.google.common.collect.Sets.cartesianProduct(java.util.List<? extends java.util.Set<? extends B>>)"], ["<B> java.util.Set<java.util.List<B>>", "com.google.common.collect.Sets.cartesianProduct(java.util.Set<? extends B>...)"], ["<E> java.util.Set<java.util.Set<E>>", "com.google.common.collect.Sets.powerSet(java.util.Set<E>)"], ["<E> java.util.Set<java.util.Set<E>>", "com.google.common.collect.Sets.combinations(java.util.Set<E>, int)"], ["<E> java.util.NavigableSet<E>", "com.google.common.collect.Sets.unmodifiableNavigableSet(java.util.NavigableSet<E>)"], ["<E> java.util.NavigableSet<E>", "com.google.common.collect.Sets.synchronizedNavigableSet(java.util.NavigableSet<E>)"], ["<K extends java.lang.Comparable<? super K>> java.util.NavigableSet<K>", "com.google.common.collect.Sets.subSet(java.util.NavigableSet<K>, com.google.common.collect.Range<K>)"], ["V", "com.google.common.collect.SingletonImmutableBiMap.get(java.lang.Object)"], ["int", "com.google.common.collect.SingletonImmutableBiMap.size()"], ["void", "com.google.common.collect.SingletonImmutableBiMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["boolean", "com.google.common.collect.SingletonImmutableBiMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.SingletonImmutableBiMap.containsValue(java.lang.Object)"], ["com.google.common.collect.ImmutableBiMap<V, K>", "com.google.common.collect.SingletonImmutableBiMap.inverse()"], ["com.google.common.collect.BiMap", "com.google.common.collect.SingletonImmutableBiMap.inverse()"], ["E", "com.google.common.collect.SingletonImmutableList.get(int)"], ["int", "com.google.common.collect.SingletonImmutableList.size()"], ["java.lang.String", "com.google.common.collect.SingletonImmutableList.toString()"], ["java.util.List", "com.google.common.collect.SingletonImmutableList.subList(int, int)"], ["java.util.Iterator", "com.google.common.collect.SingletonImmutableList.iterator()"], ["int", "com.google.common.collect.SingletonImmutableSet.size()"], ["boolean", "com.google.common.collect.SingletonImmutableSet.contains(java.lang.Object)"], ["int", "com.google.common.collect.SingletonImmutableSet.hashCode()"], ["java.lang.String", "com.google.common.collect.SingletonImmutableSet.toString()"], ["java.util.Iterator", "com.google.common.collect.SingletonImmutableSet.iterator()"], ["com.google.common.collect.ImmutableMap<R, V>", "com.google.common.collect.SingletonImmutableTable.column(C)"], ["com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "com.google.common.collect.SingletonImmutableTable.columnMap()"], ["com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "com.google.common.collect.SingletonImmutableTable.rowMap()"], ["int", "com.google.common.collect.SingletonImmutableTable.size()"], ["java.util.Map", "com.google.common.collect.SingletonImmutableTable.columnMap()"], ["java.util.Map", "com.google.common.collect.SingletonImmutableTable.rowMap()"], ["java.util.Map", "com.google.common.collect.SingletonImmutableTable.column(java.lang.Object)"], ["boolean", "com.google.common.collect.SortedIterables.hasSameComparator(java.util.Comparator<?>, java.lang.Iterable<?>)"], ["<E> java.util.Comparator<? super E>", "com.google.common.collect.SortedIterables.comparator(java.util.SortedSet<E>)"], ["int", "com.google.common.collect.SortedLists$KeyAbsentBehavior$2.resultIndex(int)"], ["int", "com.google.common.collect.SortedLists$KeyAbsentBehavior$3.resultIndex(int)"], ["com.google.common.collect.SortedLists$KeyAbsentBehavior[]", "com.google.common.collect.SortedLists$KeyAbsentBehavior.values()"], ["com.google.common.collect.SortedLists$KeyAbsentBehavior", "com.google.common.collect.SortedLists$KeyAbsentBehavior.valueOf(java.lang.String)"], ["<E> int", "com.google.common.collect.SortedLists$KeyPresentBehavior$4.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["<E> int", "com.google.common.collect.SortedLists$KeyPresentBehavior$5.resultIndex(java.util.Comparator<? super E>, E, java.util.List<? extends E>, int)"], ["com.google.common.collect.SortedLists$KeyPresentBehavior[]", "com.google.common.collect.SortedLists$KeyPresentBehavior.values()"], ["com.google.common.collect.SortedLists$KeyPresentBehavior", "com.google.common.collect.SortedLists$KeyPresentBehavior.valueOf(java.lang.String)"], ["<E extends java.lang.Comparable> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K extends java.lang.Comparable> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E, K> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<E>, com.google.common.base.Function<? super E, K>, K, java.util.Comparator<? super K>, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["<E> int", "com.google.common.collect.SortedLists.binarySearch(java.util.List<? extends E>, E, java.util.Comparator<? super E>, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)"], ["default", "com.google.common.collect.SortedMapDifference.java.util.Map entriesDiffering()"], ["default", "com.google.common.collect.SortedMapDifference.java.util.Map entriesInCommon()"], ["default", "com.google.common.collect.SortedMapDifference.java.util.Map entriesOnlyOnRight()"], ["default", "com.google.common.collect.SortedMapDifference.java.util.Map entriesOnlyOnLeft()"], ["default", "com.google.common.collect.SortedMultiset.java.util.SortedSet elementSet()"], ["default", "com.google.common.collect.SortedMultiset.java.util.Set elementSet()"], ["default", "com.google.common.collect.SortedMultisetBridge.java.util.Set elementSet()"], ["java.util.Comparator<? super E>", "com.google.common.collect.SortedMultisets$ElementSet.comparator()"], ["E", "com.google.common.collect.SortedMultisets$ElementSet.first()"], ["E", "com.google.common.collect.SortedMultisets$ElementSet.last()"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.lower(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.floor(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.ceiling(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.higher(E)"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.pollFirst()"], ["E", "com.google.common.collect.SortedMultisets$NavigableElementSet.pollLast()"], ["default", "com.google.common.collect.SortedSetMultimap.java.util.Set replaceValues(java.lang.Object, java.lang.Iterable)"], ["default", "com.google.common.collect.SortedSetMultimap.java.util.Set removeAll(java.lang.Object)"], ["default", "com.google.common.collect.SortedSetMultimap.java.util.Set get(java.lang.Object)"], ["default", "com.google.common.collect.SortedSetMultimap.java.util.Collection get(java.lang.Object)"], ["default", "com.google.common.collect.SortedSetMultimap.java.util.Collection removeAll(java.lang.Object)"], ["default", "com.google.common.collect.SortedSetMultimap.java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)"], ["com.google.common.collect.ImmutableMap<C, java.util.Map<R, V>>", "com.google.common.collect.SparseImmutableTable.columnMap()"], ["com.google.common.collect.ImmutableMap<R, java.util.Map<C, V>>", "com.google.common.collect.SparseImmutableTable.rowMap()"], ["int", "com.google.common.collect.SparseImmutableTable.size()"], ["java.util.Map", "com.google.common.collect.SparseImmutableTable.columnMap()"], ["java.util.Map", "com.google.common.collect.SparseImmutableTable.rowMap()"], ["java.util.Comparator<? super R>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.comparator()"], ["R", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.firstKey()"], ["R", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.lastKey()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.headMap(R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.subMap(R, R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.tailMap(R)"], ["java.util.Set", "com.google.common.collect.StandardRowSortedTable$RowSortedMap.keySet()"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.StandardRowSortedTable.rowMap()"], ["java.util.Map", "com.google.common.collect.StandardRowSortedTable.rowMap()"], ["java.util.Set", "com.google.common.collect.StandardRowSortedTable.rowKeySet()"], ["boolean", "com.google.common.collect.StandardTable$CellIterator.hasNext()"], ["com.google.common.collect.Table$Cell<R, C, V>", "com.google.common.collect.StandardTable$CellIterator.next()"], ["void", "com.google.common.collect.StandardTable$CellIterator.remove()"], ["java.lang.Object", "com.google.common.collect.StandardTable$CellIterator.next()"], ["java.util.Iterator<java.util.Map$Entry<R, V>>", "com.google.common.collect.StandardTable$Column$EntrySet.iterator()"], ["int", "com.google.common.collect.StandardTable$Column$EntrySet.size()"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.isEmpty()"], ["void", "com.google.common.collect.StandardTable$Column$EntrySet.clear()"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$EntrySet.retainAll(java.util.Collection<?>)"], ["R", "com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl.getKey()"], ["V", "com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl.getValue()"], ["V", "com.google.common.collect.StandardTable$Column$EntrySetIterator$1EntryImpl.setValue(V)"], ["boolean", "com.google.common.collect.StandardTable$Column$KeySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$KeySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$KeySet.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$Column$Values.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column$Values.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$Column$Values.retainAll(java.util.Collection<?>)"], ["V", "com.google.common.collect.StandardTable$Column.put(R, V)"], ["V", "com.google.common.collect.StandardTable$Column.get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Column.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Column.remove(java.lang.Object)"], ["int", "com.google.common.collect.StandardTable$ColumnKeySet.size()"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnKeySet.contains(java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(C)"], ["java.lang.Object", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet$1.apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<C, java.util.Map<R, V>>>", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.iterator()"], ["int", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.size()"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapEntrySet.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap$ColumnMapValues.retainAll(java.util.Collection<?>)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$ColumnMap.containsKey(java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<C, java.util.Map<R, V>>>", "com.google.common.collect.StandardTable$ColumnMap.createEntrySet()"], ["java.lang.Object", "com.google.common.collect.StandardTable$ColumnMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.StandardTable$ColumnMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Row$1.hasNext()"], ["java.util.Map$Entry<C, V>", "com.google.common.collect.StandardTable$Row$1.next()"], ["void", "com.google.common.collect.StandardTable$Row$1.remove()"], ["java.lang.Object", "com.google.common.collect.StandardTable$Row$1.next()"], ["V", "com.google.common.collect.StandardTable$Row$2.setValue(V)"], ["boolean", "com.google.common.collect.StandardTable$Row$2.equals(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$Row.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Row.get(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable$Row.put(C, V)"], ["V", "com.google.common.collect.StandardTable$Row.remove(java.lang.Object)"], ["void", "com.google.common.collect.StandardTable$Row.clear()"], ["int", "com.google.common.collect.StandardTable$Row.size()"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(R)"], ["java.lang.Object", "com.google.common.collect.StandardTable$RowMap$EntrySet$1.apply(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<R, java.util.Map<C, V>>>", "com.google.common.collect.StandardTable$RowMap$EntrySet.iterator()"], ["int", "com.google.common.collect.StandardTable$RowMap$EntrySet.size()"], ["boolean", "com.google.common.collect.StandardTable$RowMap$EntrySet.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$RowMap$EntrySet.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$RowMap.containsKey(java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable$RowMap.get(java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.StandardTable$RowMap.remove(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.StandardTable$RowMap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable$TableSet.isEmpty()"], ["void", "com.google.common.collect.StandardTable$TableSet.clear()"], ["boolean", "com.google.common.collect.StandardTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.StandardTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.StandardTable.isEmpty()"], ["int", "com.google.common.collect.StandardTable.size()"], ["void", "com.google.common.collect.StandardTable.clear()"], ["V", "com.google.common.collect.StandardTable.put(R, C, V)"], ["V", "com.google.common.collect.StandardTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.StandardTable.cellSet()"], ["java.util.Map<C, V>", "com.google.common.collect.StandardTable.row(R)"], ["java.util.Map<R, V>", "com.google.common.collect.StandardTable.column(C)"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.StandardTable.rowMap()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.StandardTable.columnMap()"], ["boolean", "com.google.common.collect.Streams$1.tryAdvance(java.util.function.Consumer<? super R>)"], ["void", "com.google.common.collect.Streams$1Splitr.accept(T)"], ["boolean", "com.google.common.collect.Streams$1Splitr.tryAdvance(java.util.function.Consumer<? super R>)"], ["boolean", "com.google.common.collect.Streams$2.tryAdvance(java.util.function.Consumer<? super R>)"], ["void", "com.google.common.collect.Streams$2Splitr.accept(int)"], ["boolean", "com.google.common.collect.Streams$2Splitr.tryAdvance(java.util.function.Consumer<? super R>)"], ["boolean", "com.google.common.collect.Streams$3.tryAdvance(java.util.function.Consumer<? super R>)"], ["void", "com.google.common.collect.Streams$3Splitr.accept(long)"], ["boolean", "com.google.common.collect.Streams$3Splitr.tryAdvance(java.util.function.Consumer<? super R>)"], ["boolean", "com.google.common.collect.Streams$4.tryAdvance(java.util.function.Consumer<? super R>)"], ["void", "com.google.common.collect.Streams$4Splitr.accept(double)"], ["boolean", "com.google.common.collect.Streams$4Splitr.tryAdvance(java.util.function.Consumer<? super R>)"], ["boolean", "com.google.common.collect.Streams$5.tryAdvance(java.util.function.Consumer<? super R>)"], ["S", "com.google.common.collect.Streams$MapWithIndexSpliterator.trySplit()"], ["long", "com.google.common.collect.Streams$MapWithIndexSpliterator.estimateSize()"], ["int", "com.google.common.collect.Streams$MapWithIndexSpliterator.characteristics()"], ["java.util.Spliterator", "com.google.common.collect.Streams$MapWithIndexSpliterator.trySplit()"], ["<T> java.util.stream.Stream<T>", "com.google.common.collect.Streams.stream(java.lang.Iterable<T>)"], ["<T> java.util.stream.Stream<T>", "com.google.common.collect.Streams.stream(java.util.Collection<T>)"], ["<T> java.util.stream.Stream<T>", "com.google.common.collect.Streams.stream(java.util.Iterator<T>)"], ["<T> java.util.stream.Stream<T>", "com.google.common.collect.Streams.stream(com.google.common.base.Optional<T>)"], ["<T> java.util.stream.Stream<T>", "com.google.common.collect.Streams.stream(java.util.Optional<T>)"], ["java.util.stream.IntStream", "com.google.common.collect.Streams.stream(java.util.OptionalInt)"], ["java.util.stream.LongStream", "com.google.common.collect.Streams.stream(java.util.OptionalLong)"], ["java.util.stream.DoubleStream", "com.google.common.collect.Streams.stream(java.util.OptionalDouble)"], ["<T> java.util.stream.Stream<T>", "com.google.common.collect.Streams.concat(java.util.stream.Stream<? extends T>...)"], ["java.util.stream.IntStream", "com.google.common.collect.Streams.concat(java.util.stream.IntStream...)"], ["java.util.stream.LongStream", "com.google.common.collect.Streams.concat(java.util.stream.LongStream...)"], ["java.util.stream.DoubleStream", "com.google.common.collect.Streams.concat(java.util.stream.DoubleStream...)"], ["<A, B, R> java.util.stream.Stream<R>", "com.google.common.collect.Streams.zip(java.util.stream.Stream<A>, java.util.stream.Stream<B>, java.util.function.BiFunction<? super A, ? super B, R>)"], ["<A, B> void", "com.google.common.collect.Streams.forEachPair(java.util.stream.Stream<A>, java.util.stream.Stream<B>, java.util.function.BiConsumer<? super A, ? super B>)"], ["<T, R> java.util.stream.Stream<R>", "com.google.common.collect.Streams.mapWithIndex(java.util.stream.Stream<T>, com.google.common.collect.Streams$FunctionWithIndex<? super T, ? extends R>)"], ["<R> java.util.stream.Stream<R>", "com.google.common.collect.Streams.mapWithIndex(java.util.stream.IntStream, com.google.common.collect.Streams$IntFunctionWithIndex<R>)"], ["<R> java.util.stream.Stream<R>", "com.google.common.collect.Streams.mapWithIndex(java.util.stream.LongStream, com.google.common.collect.Streams$LongFunctionWithIndex<R>)"], ["<R> java.util.stream.Stream<R>", "com.google.common.collect.Streams.mapWithIndex(java.util.stream.DoubleStream, com.google.common.collect.Streams$DoubleFunctionWithIndex<R>)"], ["<T> java.util.Optional<T>", "com.google.common.collect.Streams.findLast(java.util.stream.Stream<T>)"], ["java.util.OptionalInt", "com.google.common.collect.Streams.findLast(java.util.stream.IntStream)"], ["java.util.OptionalLong", "com.google.common.collect.Streams.findLast(java.util.stream.LongStream)"], ["java.util.OptionalDouble", "com.google.common.collect.Streams.findLast(java.util.stream.DoubleStream)"], ["java.util.Set<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.Synchronized$SynchronizedAsMap.entrySet()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMap.containsValue(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedAsMap.get(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries$1$1.getValue()"], ["java.util.Iterator<java.util.Map$Entry<K, java.util.Collection<V>>>", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.iterator()"], ["java.lang.Object[]", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray()"], ["<T> T[]", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.toArray(T[])"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.equals(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedAsMapEntries.retainAll(java.util.Collection<?>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedBiMap.forcePut(K, V)"], ["com.google.common.collect.BiMap<V, K>", "com.google.common.collect.Synchronized$SynchronizedBiMap.inverse()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedBiMap.values()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.add(E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.addAll(java.util.Collection<? extends E>)"], ["void", "com.google.common.collect.Synchronized$SynchronizedCollection.clear()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.containsAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.isEmpty()"], ["void", "com.google.common.collect.Synchronized$SynchronizedCollection.forEach(java.util.function.Consumer<? super E>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedCollection.removeIf(java.util.function.Predicate<? super E>)"], ["int", "com.google.common.collect.Synchronized$SynchronizedCollection.size()"], ["java.lang.Object[]", "com.google.common.collect.Synchronized$SynchronizedCollection.toArray()"], ["<T> T[]", "com.google.common.collect.Synchronized$SynchronizedCollection.toArray(T[])"], ["void", "com.google.common.collect.Synchronized$SynchronizedDeque.addFirst(E)"], ["void", "com.google.common.collect.Synchronized$SynchronizedDeque.addLast(E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.offerFirst(E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.offerLast(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.removeFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.removeLast()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.pollFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.pollLast()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.getFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.getLast()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.peekFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.peekLast()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.removeFirstOccurrence(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedDeque.removeLastOccurrence(java.lang.Object)"], ["void", "com.google.common.collect.Synchronized$SynchronizedDeque.push(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedDeque.pop()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedEntry.equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedEntry.hashCode()"], ["K", "com.google.common.collect.Synchronized$SynchronizedEntry.getKey()"], ["V", "com.google.common.collect.Synchronized$SynchronizedEntry.getValue()"], ["V", "com.google.common.collect.Synchronized$SynchronizedEntry.setValue(V)"], ["void", "com.google.common.collect.Synchronized$SynchronizedList.add(int, E)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedList.addAll(int, java.util.Collection<? extends E>)"], ["E", "com.google.common.collect.Synchronized$SynchronizedList.get(int)"], ["int", "com.google.common.collect.Synchronized$SynchronizedList.indexOf(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedList.lastIndexOf(java.lang.Object)"], ["E", "com.google.common.collect.Synchronized$SynchronizedList.remove(int)"], ["E", "com.google.common.collect.Synchronized$SynchronizedList.set(int, E)"], ["void", "com.google.common.collect.Synchronized$SynchronizedList.replaceAll(java.util.function.UnaryOperator<E>)"], ["void", "com.google.common.collect.Synchronized$SynchronizedList.sort(java.util.Comparator<? super E>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedList.equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedList.hashCode()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedListMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedListMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedListMultimap.get(java.lang.Object)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMap.clear()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.containsValue(java.lang.Object)"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Synchronized$SynchronizedMap.entrySet()"], ["void", "com.google.common.collect.Synchronized$SynchronizedMap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.get(java.lang.Object)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.getOrDefault(java.lang.Object, V)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.isEmpty()"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.put(K, V)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.putIfAbsent(K, V)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.replace(K, V, V)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.replace(K, V)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.computeIfAbsent(K, java.util.function.Function<? super K, ? extends V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.computeIfPresent(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.compute(K, java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.merge(K, V, java.util.function.BiFunction<? super V, ? super V, ? extends V>)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMap.putAll(java.util.Map<? extends K, ? extends V>)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMap.replaceAll(java.util.function.BiFunction<? super K, ? super V, ? extends V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedMap.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.remove(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMap.size()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMap.equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMap.hashCode()"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultimap.size()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.isEmpty()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.containsKey(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.put(K, V)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.putAll(K, java.lang.Iterable<? extends V>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.putAll(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.remove(java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.Synchronized$SynchronizedMultimap.clear()"], ["java.util.Collection<java.util.Map$Entry<K, V>>", "com.google.common.collect.Synchronized$SynchronizedMultimap.entries()"], ["void", "com.google.common.collect.Synchronized$SynchronizedMultimap.forEach(java.util.function.BiConsumer<? super K, ? super V>)"], ["java.util.Map<K, java.util.Collection<V>>", "com.google.common.collect.Synchronized$SynchronizedMultimap.asMap()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultimap.equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultimap.hashCode()"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.add(E, int)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultiset.setCount(E, int, int)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedMultiset.equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedMultiset.hashCode()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.ceilingKey(K)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.descendingMap()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.firstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.floorEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.floorKey(K)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K, boolean)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.higherEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.higherKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.lastEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerEntry(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.lowerKey(K)"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.pollFirstEntry()"], ["java.util.Map$Entry<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.pollLastEntry()"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, boolean, K, boolean)"], ["java.util.NavigableMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K, boolean)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.headMap(K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedNavigableMap.tailMap(K)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.ceiling(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.floor(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.higher(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.lower(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.pollFirst()"], ["E", "com.google.common.collect.Synchronized$SynchronizedNavigableSet.pollLast()"], ["java.lang.String", "com.google.common.collect.Synchronized$SynchronizedObject.toString()"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.element()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedQueue.offer(E)"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.peek()"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.poll()"], ["E", "com.google.common.collect.Synchronized$SynchronizedQueue.remove()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedSet.equals(java.lang.Object)"], ["int", "com.google.common.collect.Synchronized$SynchronizedSet.hashCode()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.entries()"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSetMultimap.get(java.lang.Object)"], ["java.util.Comparator<? super K>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.comparator()"], ["K", "com.google.common.collect.Synchronized$SynchronizedSortedMap.firstKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.headMap(K)"], ["K", "com.google.common.collect.Synchronized$SynchronizedSortedMap.lastKey()"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.subMap(K, K)"], ["java.util.SortedMap<K, V>", "com.google.common.collect.Synchronized$SynchronizedSortedMap.tailMap(K)"], ["java.util.Comparator<? super E>", "com.google.common.collect.Synchronized$SynchronizedSortedSet.comparator()"], ["E", "com.google.common.collect.Synchronized$SynchronizedSortedSet.first()"], ["E", "com.google.common.collect.Synchronized$SynchronizedSortedSet.last()"], ["java.util.Comparator<? super V>", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.valueComparator()"], ["java.util.Set", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Set", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.get(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.removeAll(java.lang.Object)"], ["java.util.Collection", "com.google.common.collect.Synchronized$SynchronizedSortedSetMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.Map<C, V>", "com.google.common.collect.Synchronized$SynchronizedTable$1.apply(java.util.Map<C, V>)"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedTable$1.apply(java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.Synchronized$SynchronizedTable$2.apply(java.util.Map<R, V>)"], ["java.lang.Object", "com.google.common.collect.Synchronized$SynchronizedTable$2.apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedTable.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.Synchronized$SynchronizedTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedTable.isEmpty()"], ["int", "com.google.common.collect.Synchronized$SynchronizedTable.size()"], ["void", "com.google.common.collect.Synchronized$SynchronizedTable.clear()"], ["V", "com.google.common.collect.Synchronized$SynchronizedTable.put(R, C, V)"], ["void", "com.google.common.collect.Synchronized$SynchronizedTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.Synchronized$SynchronizedTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.Synchronized$SynchronizedTable.row(R)"], ["java.util.Map<R, V>", "com.google.common.collect.Synchronized$SynchronizedTable.column(C)"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.Synchronized$SynchronizedTable.cellSet()"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.Synchronized$SynchronizedTable.rowMap()"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.Synchronized$SynchronizedTable.columnMap()"], ["int", "com.google.common.collect.Synchronized$SynchronizedTable.hashCode()"], ["boolean", "com.google.common.collect.Synchronized$SynchronizedTable.equals(java.lang.Object)"], ["java.util.Map<java.lang.Object, java.lang.Object>", "com.google.common.collect.Tables$1.apply(java.util.Map<java.lang.Object, java.lang.Object>)"], ["java.lang.Object", "com.google.common.collect.Tables$1.apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$AbstractCell.equals(java.lang.Object)"], ["int", "com.google.common.collect.Tables$AbstractCell.hashCode()"], ["java.lang.String", "com.google.common.collect.Tables$AbstractCell.toString()"], ["R", "com.google.common.collect.Tables$ImmutableCell.getRowKey()"], ["C", "com.google.common.collect.Tables$ImmutableCell.getColumnKey()"], ["V", "com.google.common.collect.Tables$ImmutableCell.getValue()"], ["com.google.common.collect.Table$Cell<R, C, V2>", "com.google.common.collect.Tables$TransformedTable$1.apply(com.google.common.collect.Table$Cell<R, C, V1>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransformedTable$1.apply(java.lang.Object)"], ["java.util.Map<C, V2>", "com.google.common.collect.Tables$TransformedTable$2.apply(java.util.Map<C, V1>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransformedTable$2.apply(java.lang.Object)"], ["java.util.Map<R, V2>", "com.google.common.collect.Tables$TransformedTable$3.apply(java.util.Map<R, V1>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransformedTable$3.apply(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransformedTable.contains(java.lang.Object, java.lang.Object)"], ["V2", "com.google.common.collect.Tables$TransformedTable.get(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.collect.Tables$TransformedTable.size()"], ["void", "com.google.common.collect.Tables$TransformedTable.clear()"], ["V2", "com.google.common.collect.Tables$TransformedTable.put(R, C, V2)"], ["void", "com.google.common.collect.Tables$TransformedTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V2>)"], ["V2", "com.google.common.collect.Tables$TransformedTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V2>", "com.google.common.collect.Tables$TransformedTable.row(R)"], ["java.util.Map<R, V2>", "com.google.common.collect.Tables$TransformedTable.column(C)"], ["java.util.Map<R, java.util.Map<C, V2>>", "com.google.common.collect.Tables$TransformedTable.rowMap()"], ["java.util.Map<C, java.util.Map<R, V2>>", "com.google.common.collect.Tables$TransformedTable.columnMap()"], ["com.google.common.collect.Table$Cell<?, ?, ?>", "com.google.common.collect.Tables$TransposeTable$1.apply(com.google.common.collect.Table$Cell<?, ?, ?>)"], ["java.lang.Object", "com.google.common.collect.Tables$TransposeTable$1.apply(java.lang.Object)"], ["void", "com.google.common.collect.Tables$TransposeTable.clear()"], ["java.util.Map<C, V>", "com.google.common.collect.Tables$TransposeTable.column(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.Tables$TransposeTable.columnMap()"], ["boolean", "com.google.common.collect.Tables$TransposeTable.contains(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransposeTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransposeTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.Tables$TransposeTable.containsValue(java.lang.Object)"], ["V", "com.google.common.collect.Tables$TransposeTable.get(java.lang.Object, java.lang.Object)"], ["V", "com.google.common.collect.Tables$TransposeTable.put(C, R, V)"], ["void", "com.google.common.collect.Tables$TransposeTable.putAll(com.google.common.collect.Table<? extends C, ? extends R, ? extends V>)"], ["V", "com.google.common.collect.Tables$TransposeTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<R, V>", "com.google.common.collect.Tables$TransposeTable.row(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.Tables$TransposeTable.rowMap()"], ["int", "com.google.common.collect.Tables$TransposeTable.size()"], ["com.google.common.collect.Tables$UnmodifiableRowSortedMap", "com.google.common.collect.Tables$UnmodifiableRowSortedMap(com.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()"], ["java.util.Map", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowMap()"], ["java.util.Set", "com.google.common.collect.Tables$UnmodifiableRowSortedMap.rowKeySet()"], ["java.util.Set<com.google.common.collect.Table$Cell<R, C, V>>", "com.google.common.collect.Tables$UnmodifiableTable.cellSet()"], ["void", "com.google.common.collect.Tables$UnmodifiableTable.clear()"], ["java.util.Map<R, V>", "com.google.common.collect.Tables$UnmodifiableTable.column(C)"], ["java.util.Map<C, java.util.Map<R, V>>", "com.google.common.collect.Tables$UnmodifiableTable.columnMap()"], ["V", "com.google.common.collect.Tables$UnmodifiableTable.put(R, C, V)"], ["void", "com.google.common.collect.Tables$UnmodifiableTable.putAll(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["V", "com.google.common.collect.Tables$UnmodifiableTable.remove(java.lang.Object, java.lang.Object)"], ["java.util.Map<C, V>", "com.google.common.collect.Tables$UnmodifiableTable.row(R)"], ["java.util.Map<R, java.util.Map<C, V>>", "com.google.common.collect.Tables$UnmodifiableTable.rowMap()"], ["<T, R, C, V, I extends com.google.common.collect.Table<R, C, V>> java.util.stream.Collector<T, ?, I>", "com.google.common.collect.Tables.toTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<I>)"], ["<T, R, C, V, I extends com.google.common.collect.Table<R, C, V>> java.util.stream.Collector<T, ?, I>", "com.google.common.collect.Tables.toTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>, java.util.function.Supplier<I>)"], ["<R, C, V> com.google.common.collect.Table$Cell<R, C, V>", "com.google.common.collect.Tables.immutableCell(R, C, V)"], ["<R, C, V> com.google.common.collect.Table<C, R, V>", "com.google.common.collect.Tables.transpose(com.google.common.collect.Table<R, C, V>)"], ["<R, C, V> com.google.common.collect.Table<R, C, V>", "com.google.common.collect.Tables.newCustomTable(java.util.Map<R, java.util.Map<C, V>>, com.google.common.base.Supplier<? extends java.util.Map<C, V>>)"], ["<R, C, V1, V2> com.google.common.collect.Table<R, C, V2>", "com.google.common.collect.Tables.transformValues(com.google.common.collect.Table<R, C, V1>, com.google.common.base.Function<? super V1, V2>)"], ["<R, C, V> com.google.common.collect.Table<R, C, V>", "com.google.common.collect.Tables.unmodifiableTable(com.google.common.collect.Table<? extends R, ? extends C, ? extends V>)"], ["<R, C, V> com.google.common.collect.RowSortedTable<R, C, V>", "com.google.common.collect.Tables.unmodifiableRowSortedTable(com.google.common.collect.RowSortedTable<R, ? extends C, ? extends V>)"], ["<R, C, V> com.google.common.collect.Table<R, C, V>", "com.google.common.collect.Tables.synchronizedTable(com.google.common.collect.Table<R, C, V>)"], ["<T extends java.lang.Comparable<? super T>> com.google.common.collect.TopKSelector<T>", "com.google.common.collect.TopKSelector.least(int)"], ["<T extends java.lang.Comparable<? super T>> com.google.common.collect.TopKSelector<T>", "com.google.common.collect.TopKSelector.greatest(int)"], ["<T> com.google.common.collect.TopKSelector<T>", "com.google.common.collect.TopKSelector.least(int, java.util.Comparator<? super T>)"], ["<T> com.google.common.collect.TopKSelector<T>", "com.google.common.collect.TopKSelector.greatest(int, java.util.Comparator<? super T>)"], ["void", "com.google.common.collect.TopKSelector.offer(T)"], ["void", "com.google.common.collect.TopKSelector.offerAll(java.lang.Iterable<? extends T>)"], ["void", "com.google.common.collect.TopKSelector.offerAll(java.util.Iterator<? extends T>)"], ["boolean", "com.google.common.collect.TransformedIterator.hasNext()"], ["T", "com.google.common.collect.TransformedIterator.next()"], ["void", "com.google.common.collect.TransformedIterator.remove()"], ["boolean", "com.google.common.collect.TransformedListIterator.hasPrevious()"], ["T", "com.google.common.collect.TransformedListIterator.previous()"], ["int", "com.google.common.collect.TransformedListIterator.nextIndex()"], ["int", "com.google.common.collect.TransformedListIterator.previousIndex()"], ["void", "com.google.common.collect.TransformedListIterator.set(T)"], ["void", "com.google.common.collect.TransformedListIterator.add(T)"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable$1.apply(java.lang.Object)"], ["java.util.TreeMap<C, V>", "com.google.common.collect.TreeBasedTable$Factory.get()"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable$Factory.get()"], ["java.util.Comparator<? super C>", "com.google.common.collect.TreeBasedTable$TreeRow.comparator()"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable$TreeRow.subMap(C, C)"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable$TreeRow.headMap(C)"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable$TreeRow.tailMap(C)"], ["C", "com.google.common.collect.TreeBasedTable$TreeRow.firstKey()"], ["C", "com.google.common.collect.TreeBasedTable$TreeRow.lastKey()"], ["boolean", "com.google.common.collect.TreeBasedTable$TreeRow.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.TreeBasedTable$TreeRow.put(C, V)"], ["java.util.Set", "com.google.common.collect.TreeBasedTable$TreeRow.keySet()"], ["<R extends java.lang.Comparable, C extends java.lang.Comparable, V> com.google.common.collect.TreeBasedTable<R, C, V>", "com.google.common.collect.TreeBasedTable.create()"], ["<R, C, V> com.google.common.collect.TreeBasedTable<R, C, V>", "com.google.common.collect.TreeBasedTable.create(java.util.Comparator<? super R>, java.util.Comparator<? super C>)"], ["<R, C, V> com.google.common.collect.TreeBasedTable<R, C, V>", "com.google.common.collect.TreeBasedTable.create(com.google.common.collect.TreeBasedTable<R, C, ? extends V>)"], ["java.util.Comparator<? super R>", "com.google.common.collect.TreeBasedTable.rowComparator()"], ["java.util.Comparator<? super C>", "com.google.common.collect.TreeBasedTable.columnComparator()"], ["java.util.SortedMap<C, V>", "com.google.common.collect.TreeBasedTable.row(R)"], ["java.util.SortedMap<R, java.util.Map<C, V>>", "com.google.common.collect.TreeBasedTable.rowMap()"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.rowMap()"], ["java.util.Set", "com.google.common.collect.TreeBasedTable.rowKeySet()"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.row(java.lang.Object)"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.columnMap()"], ["java.util.Collection", "com.google.common.collect.TreeBasedTable.values()"], ["java.util.Set", "com.google.common.collect.TreeBasedTable.columnKeySet()"], ["java.util.Map", "com.google.common.collect.TreeBasedTable.column(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeBasedTable.cellSet()"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable.remove(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable.put(java.lang.Object, java.lang.Object, java.lang.Object)"], ["void", "com.google.common.collect.TreeBasedTable.clear()"], ["int", "com.google.common.collect.TreeBasedTable.size()"], ["boolean", "com.google.common.collect.TreeBasedTable.isEmpty()"], ["java.lang.Object", "com.google.common.collect.TreeBasedTable.get(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.containsRow(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.containsColumn(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeBasedTable.contains(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.TreeBasedTable.toString()"], ["int", "com.google.common.collect.TreeBasedTable.hashCode()"], ["boolean", "com.google.common.collect.TreeBasedTable.equals(java.lang.Object)"], ["void", "com.google.common.collect.TreeBasedTable.putAll(com.google.common.collect.Table)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> com.google.common.collect.TreeMultimap<K, V>", "com.google.common.collect.TreeMultimap.create()"], ["<K, V> com.google.common.collect.TreeMultimap<K, V>", "com.google.common.collect.TreeMultimap.create(java.util.Comparator<? super K>, java.util.Comparator<? super V>)"], ["<K extends java.lang.Comparable, V extends java.lang.Comparable> com.google.common.collect.TreeMultimap<K, V>", "com.google.common.collect.TreeMultimap.create(com.google.common.collect.Multimap<? extends K, ? extends V>)"], ["java.util.Comparator<? super K>", "com.google.common.collect.TreeMultimap.keyComparator()"], ["java.util.Comparator<? super V>", "com.google.common.collect.TreeMultimap.valueComparator()"], ["java.util.NavigableMap<K, java.util.Collection<V>>", "com.google.common.collect.TreeMultimap.asMap()"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.keySet()"], ["java.util.SortedMap", "com.google.common.collect.TreeMultimap.asMap()"], ["java.util.Collection", "com.google.common.collect.TreeMultimap.values()"], ["java.util.Map", "com.google.common.collect.TreeMultimap.asMap()"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.replaceValues(java.lang.Object, java.lang.Iterable)"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.removeAll(java.lang.Object)"], ["java.util.SortedSet", "com.google.common.collect.TreeMultimap.get(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultimap.get(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultimap.keySet()"], ["java.util.Collection", "com.google.common.collect.TreeMultimap.get(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.equals(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.put(java.lang.Object, java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultimap.entries()"], ["void", "com.google.common.collect.TreeMultimap.forEach(java.util.function.BiConsumer)"], ["void", "com.google.common.collect.TreeMultimap.clear()"], ["boolean", "com.google.common.collect.TreeMultimap.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.TreeMultimap.size()"], ["java.lang.String", "com.google.common.collect.TreeMultimap.toString()"], ["int", "com.google.common.collect.TreeMultimap.hashCode()"], ["com.google.common.collect.Multiset", "com.google.common.collect.TreeMultimap.keys()"], ["boolean", "com.google.common.collect.TreeMultimap.putAll(com.google.common.collect.Multimap)"], ["boolean", "com.google.common.collect.TreeMultimap.putAll(java.lang.Object, java.lang.Iterable)"], ["boolean", "com.google.common.collect.TreeMultimap.remove(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.containsEntry(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.containsValue(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultimap.isEmpty()"], ["E", "com.google.common.collect.TreeMultiset$1.getElement()"], ["int", "com.google.common.collect.TreeMultiset$1.getCount()"], ["boolean", "com.google.common.collect.TreeMultiset$2.hasNext()"], ["void", "com.google.common.collect.TreeMultiset$2.remove()"], ["java.lang.Object", "com.google.common.collect.TreeMultiset$2.next()"], ["boolean", "com.google.common.collect.TreeMultiset$3.hasNext()"], ["void", "com.google.common.collect.TreeMultiset$3.remove()"], ["java.lang.Object", "com.google.common.collect.TreeMultiset$3.next()"], ["com.google.common.collect.TreeMultiset$Aggregate[]", "com.google.common.collect.TreeMultiset$Aggregate.values()"], ["com.google.common.collect.TreeMultiset$Aggregate", "com.google.common.collect.TreeMultiset$Aggregate.valueOf(java.lang.String)"], ["int", "com.google.common.collect.TreeMultiset$AvlNode.count(java.util.Comparator<? super E>, E)"], ["E", "com.google.common.collect.TreeMultiset$AvlNode.getElement()"], ["int", "com.google.common.collect.TreeMultiset$AvlNode.getCount()"], ["java.lang.String", "com.google.common.collect.TreeMultiset$AvlNode.toString()"], ["T", "com.google.common.collect.TreeMultiset$Reference.get()"], ["void", "com.google.common.collect.TreeMultiset$Reference.checkAndSet(T, T)"], ["<E extends java.lang.Comparable> com.google.common.collect.TreeMultiset<E>", "com.google.common.collect.TreeMultiset.create()"], ["<E> com.google.common.collect.TreeMultiset<E>", "com.google.common.collect.TreeMultiset.create(java.util.Comparator<? super E>)"], ["<E extends java.lang.Comparable> com.google.common.collect.TreeMultiset<E>", "com.google.common.collect.TreeMultiset.create(java.lang.Iterable<? extends E>)"], ["int", "com.google.common.collect.TreeMultiset.size()"], ["int", "com.google.common.collect.TreeMultiset.count(java.lang.Object)"], ["int", "com.google.common.collect.TreeMultiset.add(E, int)"], ["int", "com.google.common.collect.TreeMultiset.remove(java.lang.Object, int)"], ["int", "com.google.common.collect.TreeMultiset.setCount(E, int)"], ["boolean", "com.google.common.collect.TreeMultiset.setCount(E, int, int)"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.TreeMultiset.descendingMultiset()"], ["com.google.common.collect.SortedMultiset", "com.google.common.collect.TreeMultiset.subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.pollLastEntry()"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.pollFirstEntry()"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.lastEntry()"], ["com.google.common.collect.Multiset$Entry", "com.google.common.collect.TreeMultiset.firstEntry()"], ["java.util.Comparator", "com.google.common.collect.TreeMultiset.comparator()"], ["java.util.NavigableSet", "com.google.common.collect.TreeMultiset.elementSet()"], ["java.lang.String", "com.google.common.collect.TreeMultiset.toString()"], ["int", "com.google.common.collect.TreeMultiset.hashCode()"], ["boolean", "com.google.common.collect.TreeMultiset.equals(java.lang.Object)"], ["java.util.Set", "com.google.common.collect.TreeMultiset.entrySet()"], ["void", "com.google.common.collect.TreeMultiset.clear()"], ["boolean", "com.google.common.collect.TreeMultiset.retainAll(java.util.Collection)"], ["boolean", "com.google.common.collect.TreeMultiset.removeAll(java.util.Collection)"], ["boolean", "com.google.common.collect.TreeMultiset.addAll(java.util.Collection)"], ["boolean", "com.google.common.collect.TreeMultiset.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultiset.add(java.lang.Object)"], ["java.util.Iterator", "com.google.common.collect.TreeMultiset.iterator()"], ["boolean", "com.google.common.collect.TreeMultiset.contains(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeMultiset.isEmpty()"], ["java.lang.Object", "com.google.common.collect.TreeRangeMap$1.get(java.lang.Comparable)"], ["java.util.Map$Entry<com.google.common.collect.Range, java.lang.Object>", "com.google.common.collect.TreeRangeMap$1.getEntry(java.lang.Comparable)"], ["com.google.common.collect.Range", "com.google.common.collect.TreeRangeMap$1.span()"], ["void", "com.google.common.collect.TreeRangeMap$1.put(com.google.common.collect.Range, java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeMap$1.putCoalescing(com.google.common.collect.Range, java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeMap$1.putAll(com.google.common.collect.RangeMap)"], ["void", "com.google.common.collect.TreeRangeMap$1.clear()"], ["void", "com.google.common.collect.TreeRangeMap$1.remove(com.google.common.collect.Range)"], ["java.util.Map<com.google.common.collect.Range, java.lang.Object>", "com.google.common.collect.TreeRangeMap$1.asMapOfRanges()"], ["java.util.Map<com.google.common.collect.Range, java.lang.Object>", "com.google.common.collect.TreeRangeMap$1.asDescendingMapOfRanges()"], ["com.google.common.collect.RangeMap", "com.google.common.collect.TreeRangeMap$1.subRangeMap(com.google.common.collect.Range)"], ["boolean", "com.google.common.collect.TreeRangeMap$AsMapOfRanges.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.TreeRangeMap$AsMapOfRanges.get(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeMap$AsMapOfRanges.size()"], ["V", "com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()"], ["boolean", "com.google.common.collect.TreeRangeMap$RangeMapEntry.contains(K)"], ["java.lang.Object", "com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.remove(java.lang.Object)"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$1.retainAll(java.util.Collection<?>)"], ["java.util.Iterator<java.util.Map$Entry<com.google.common.collect.Range<K>, V>>", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.iterator()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.retainAll(java.util.Collection<?>)"], ["int", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.size()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$2.isEmpty()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4.removeAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap$4.retainAll(java.util.Collection<?>)"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.containsKey(java.lang.Object)"], ["V", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.get(java.lang.Object)"], ["V", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.remove(java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.clear()"], ["java.util.Set<java.util.Map$Entry<com.google.common.collect.Range<K>, V>>", "com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet()"], ["V", "com.google.common.collect.TreeRangeMap$SubRangeMap.get(K)"], ["java.util.Map$Entry<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.getEntry(K)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.put(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.putCoalescing(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.clear()"], ["void", "com.google.common.collect.TreeRangeMap$SubRangeMap.remove(com.google.common.collect.Range<K>)"], ["com.google.common.collect.RangeMap<K, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.subRangeMap(com.google.common.collect.Range<K>)"], ["java.util.Map<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.asMapOfRanges()"], ["java.util.Map<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap$SubRangeMap.asDescendingMapOfRanges()"], ["boolean", "com.google.common.collect.TreeRangeMap$SubRangeMap.equals(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeMap$SubRangeMap.hashCode()"], ["java.lang.String", "com.google.common.collect.TreeRangeMap$SubRangeMap.toString()"], ["<K extends java.lang.Comparable, V> com.google.common.collect.TreeRangeMap<K, V>", "com.google.common.collect.TreeRangeMap.create()"], ["V", "com.google.common.collect.TreeRangeMap.get(K)"], ["java.util.Map$Entry<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap.getEntry(K)"], ["void", "com.google.common.collect.TreeRangeMap.put(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.TreeRangeMap.putCoalescing(com.google.common.collect.Range<K>, V)"], ["void", "com.google.common.collect.TreeRangeMap.putAll(com.google.common.collect.RangeMap<K, V>)"], ["void", "com.google.common.collect.TreeRangeMap.clear()"], ["void", "com.google.common.collect.TreeRangeMap.remove(com.google.common.collect.Range<K>)"], ["java.util.Map<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap.asMapOfRanges()"], ["java.util.Map<com.google.common.collect.Range<K>, V>", "com.google.common.collect.TreeRangeMap.asDescendingMapOfRanges()"], ["com.google.common.collect.RangeMap<K, V>", "com.google.common.collect.TreeRangeMap.subRangeMap(com.google.common.collect.Range<K>)"], ["boolean", "com.google.common.collect.TreeRangeMap.equals(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeMap.hashCode()"], ["java.lang.String", "com.google.common.collect.TreeRangeMap.toString()"], ["int", "com.google.common.collect.TreeRangeSet$AsRanges.hashCode()"], ["boolean", "com.google.common.collect.TreeRangeSet$AsRanges.equals(java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeSet$Complement.add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet$Complement.remove(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet$Complement.contains(C)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super com.google.common.collect.Cut<C>>", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.comparator()"], ["int", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.size()"], ["boolean", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.containsKey(java.lang.Object)"], ["java.lang.Object", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super com.google.common.collect.Cut<C>>", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.comparator()"], ["boolean", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.size()"], ["boolean", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.isEmpty()"], ["java.lang.Object", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.get(java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$RangesByUpperBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["boolean", "com.google.common.collect.TreeRangeSet$SubRangeSet.encloses(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet$SubRangeSet.add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet$SubRangeSet.remove(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet$SubRangeSet.contains(C)"], ["void", "com.google.common.collect.TreeRangeSet$SubRangeSet.clear()"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(com.google.common.collect.Cut<C>, boolean, com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.NavigableMap<com.google.common.collect.Cut<C>, com.google.common.collect.Range<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(com.google.common.collect.Cut<C>, boolean)"], ["java.util.Comparator<? super com.google.common.collect.Cut<C>>", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.comparator()"], ["boolean", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.containsKey(java.lang.Object)"], ["int", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.size()"], ["java.lang.Object", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.tailMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.headMap(java.lang.Object, boolean)"], ["java.util.NavigableMap", "com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.subMap(java.lang.Object, boolean, java.lang.Object, boolean)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C>", "com.google.common.collect.TreeRangeSet.create()"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C>", "com.google.common.collect.TreeRangeSet.create(com.google.common.collect.RangeSet<C>)"], ["<C extends java.lang.Comparable<?>> com.google.common.collect.TreeRangeSet<C>", "com.google.common.collect.TreeRangeSet.create(java.lang.Iterable<com.google.common.collect.Range<C>>)"], ["boolean", "com.google.common.collect.TreeRangeSet.intersects(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet.encloses(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet.add(com.google.common.collect.Range<C>)"], ["void", "com.google.common.collect.TreeRangeSet.remove(com.google.common.collect.Range<C>)"], ["boolean", "com.google.common.collect.TreeRangeSet.equals(java.lang.Object)"], ["void", "com.google.common.collect.TreeRangeSet.removeAll(com.google.common.collect.RangeSet)"], ["void", "com.google.common.collect.TreeRangeSet.addAll(com.google.common.collect.RangeSet)"], ["boolean", "com.google.common.collect.TreeRangeSet.enclosesAll(com.google.common.collect.RangeSet)"], ["void", "com.google.common.collect.TreeRangeSet.clear()"], ["boolean", "com.google.common.collect.TreeRangeSet.isEmpty()"], ["boolean", "com.google.common.collect.TreeRangeSet.contains(java.lang.Comparable)"], ["void", "com.google.common.collect.TreeTraverser$2$1.accept(T)"], ["void", "com.google.common.collect.TreeTraverser$2.forEach(java.util.function.Consumer<? super T>)"], ["java.util.Iterator", "com.google.common.collect.TreeTraverser$2.iterator()"], ["void", "com.google.common.collect.TreeTraverser$3$1.accept(T)"], ["void", "com.google.common.collect.TreeTraverser$3.forEach(java.util.function.Consumer<? super T>)"], ["java.util.Iterator", "com.google.common.collect.TreeTraverser$3.iterator()"], ["java.util.Iterator", "com.google.common.collect.TreeTraverser$4.iterator()"], ["boolean", "com.google.common.collect.TreeTraverser$BreadthFirstIterator.hasNext()"], ["T", "com.google.common.collect.TreeTraverser$BreadthFirstIterator.peek()"], ["T", "com.google.common.collect.TreeTraverser$BreadthFirstIterator.next()"], ["boolean", "com.google.common.collect.TreeTraverser$PreOrderIterator.hasNext()"], ["T", "com.google.common.collect.TreeTraverser$PreOrderIterator.next()"], ["com.google.common.collect.TreeTraverser", "com.google.common.collect.TreeTraverser()"], ["<T> com.google.common.collect.TreeTraverser<T>", "com.google.common.collect.TreeTraverser.using(com.google.common.base.Function<T, ? extends java.lang.Iterable<T>>)"], ["void", "com.google.common.collect.UnmodifiableIterator.remove()"], ["void", "com.google.common.collect.UnmodifiableListIterator.add(E)"], ["void", "com.google.common.collect.UnmodifiableListIterator.set(E)"], ["java.util.Comparator<? super E>", "com.google.common.collect.UnmodifiableSortedMultiset.comparator()"], ["java.util.Set", "com.google.common.collect.UnmodifiableSortedMultiset.elementSet()"], ["java.util.SortedSet", "com.google.common.collect.UnmodifiableSortedMultiset.elementSet()"], ["int", "com.google.common.collect.UsingToStringOrdering.compare(java.lang.Object, java.lang.Object)"], ["java.lang.String", "com.google.common.collect.UsingToStringOrdering.toString()"], ["K", "com.google.common.collect.WellBehavedMap$EntrySet$1$1.getKey()"], ["V", "com.google.common.collect.WellBehavedMap$EntrySet$1$1.getValue()"], ["V", "com.google.common.collect.WellBehavedMap$EntrySet$1$1.setValue(V)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.collect.WellBehavedMap$EntrySet.iterator()"], ["java.util.Set<java.util.Map$Entry<K, V>>", "com.google.common.collect.WellBehavedMap.entrySet()"], ["java.lang.String", "com.google.common.escape.ArrayBasedCharEscaper.escape(java.lang.String)"], ["com.google.common.escape.ArrayBasedEscaperMap", "com.google.common.escape.ArrayBasedEscaperMap.create(java.util.Map<java.lang.Character, java.lang.String>)"], ["java.lang.String", "com.google.common.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)"], ["java.lang.String", "com.google.common.escape.CharEscaper.escape(java.lang.String)"], ["java.lang.String", "com.google.common.escape.CharEscaperBuilder$CharArrayDecorator.escape(java.lang.String)"], ["com.google.common.escape.CharEscaperBuilder", "com.google.common.escape.CharEscaperBuilder()"], ["com.google.common.escape.CharEscaperBuilder", "com.google.common.escape.CharEscaperBuilder.addEscape(char, java.lang.String)"], ["com.google.common.escape.CharEscaperBuilder", "com.google.common.escape.CharEscaperBuilder.addEscapes(char[], java.lang.String)"], ["char[][]", "com.google.common.escape.CharEscaperBuilder.toArray()"], ["com.google.common.escape.Escaper", "com.google.common.escape.CharEscaperBuilder.toEscaper()"], ["java.lang.String", "com.google.common.escape.Escaper$1.apply(java.lang.String)"], ["java.lang.Object", "com.google.common.escape.Escaper$1.apply(java.lang.Object)"], ["com.google.common.base.Function<java.lang.String, java.lang.String>", "com.google.common.escape.Escaper.asFunction()"], ["java.lang.String", "com.google.common.escape.Escapers$1.escape(java.lang.String)"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers$Builder.setSafeRange(char, char)"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers$Builder.setUnsafeReplacement(java.lang.String)"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers$Builder.addEscape(char, java.lang.String)"], ["com.google.common.escape.Escaper", "com.google.common.escape.Escapers$Builder.build()"], ["com.google.common.escape.Escaper", "com.google.common.escape.Escapers.nullEscaper()"], ["com.google.common.escape.Escapers$Builder", "com.google.common.escape.Escapers.builder()"], ["java.lang.String", "com.google.common.escape.Escapers.computeReplacement(com.google.common.escape.CharEscaper, char)"], ["java.lang.String", "com.google.common.escape.Escapers.computeReplacement(com.google.common.escape.UnicodeEscaper, int)"], ["java.lang.String", "com.google.common.escape.UnicodeEscaper.escape(java.lang.String)"], ["com.google.common.eventbus.AsyncEventBus", "com.google.common.eventbus.AsyncEventBus(java.lang.String, java.util.concurrent.Executor)"], ["com.google.common.eventbus.AsyncEventBus", "com.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor, com.google.common.eventbus.SubscriberExceptionHandler)"], ["com.google.common.eventbus.AsyncEventBus", "com.google.common.eventbus.AsyncEventBus(java.util.concurrent.Executor)"], ["com.google.common.eventbus.DeadEvent", "com.google.common.eventbus.DeadEvent(java.lang.Object, java.lang.Object)"], ["java.lang.Object", "com.google.common.eventbus.DeadEvent.getSource()"], ["java.lang.Object", "com.google.common.eventbus.DeadEvent.getEvent()"], ["java.lang.String", "com.google.common.eventbus.DeadEvent.toString()"], ["void", "com.google.common.eventbus.EventBus$LoggingHandler.handleException(java.lang.Throwable, com.google.common.eventbus.SubscriberExceptionContext)"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.EventBus()"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.EventBus(java.lang.String)"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.EventBus(com.google.common.eventbus.SubscriberExceptionHandler)"], ["java.lang.String", "com.google.common.eventbus.EventBus.identifier()"], ["void", "com.google.common.eventbus.EventBus.register(java.lang.Object)"], ["void", "com.google.common.eventbus.EventBus.unregister(java.lang.Object)"], ["void", "com.google.common.eventbus.EventBus.post(java.lang.Object)"], ["java.lang.String", "com.google.common.eventbus.EventBus.toString()"], ["void", "com.google.common.eventbus.Subscriber$1.run()"], ["int", "com.google.common.eventbus.Subscriber.hashCode()"], ["boolean", "com.google.common.eventbus.Subscriber.equals(java.lang.Object)"], ["com.google.common.eventbus.EventBus", "com.google.common.eventbus.SubscriberExceptionContext.getEventBus()"], ["java.lang.Object", "com.google.common.eventbus.SubscriberExceptionContext.getEvent()"], ["java.lang.Object", "com.google.common.eventbus.SubscriberExceptionContext.getSubscriber()"], ["java.lang.reflect.Method", "com.google.common.eventbus.SubscriberExceptionContext.getSubscriberMethod()"], ["java.lang.Object", "com.google.common.eventbus.SubscriberRegistry$1.load(java.lang.Object)"], ["java.lang.Object", "com.google.common.eventbus.SubscriberRegistry$2.load(java.lang.Object)"], ["int", "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier.hashCode()"], ["boolean", "com.google.common.eventbus.SubscriberRegistry$MethodIdentifier.equals(java.lang.Object)"], ["int", "com.google.common.graph.AbstractBaseGraph$1.size()"], ["boolean", "com.google.common.graph.AbstractBaseGraph$1.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.AbstractBaseGraph$1.iterator()"], ["int", "com.google.common.graph.AbstractBaseGraph.degree(N)"], ["int", "com.google.common.graph.AbstractBaseGraph.inDegree(N)"], ["int", "com.google.common.graph.AbstractBaseGraph.outDegree(N)"], ["boolean", "com.google.common.graph.AbstractBaseGraph.hasEdgeConnecting(N, N)"], ["int", "com.google.common.graph.AbstractDirectedNetworkConnections$1.size()"], ["boolean", "com.google.common.graph.AbstractDirectedNetworkConnections$1.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.AbstractDirectedNetworkConnections$1.iterator()"], ["N", "com.google.common.graph.AbstractDirectedNetworkConnections.adjacentNode(E)"], ["N", "com.google.common.graph.AbstractDirectedNetworkConnections.removeInEdge(E, boolean)"], ["N", "com.google.common.graph.AbstractDirectedNetworkConnections.removeOutEdge(E)"], ["void", "com.google.common.graph.AbstractDirectedNetworkConnections.addInEdge(E, N, boolean)"], ["void", "com.google.common.graph.AbstractDirectedNetworkConnections.addOutEdge(E, N)"], ["com.google.common.graph.AbstractGraph", "com.google.common.graph.AbstractGraph()"], ["boolean", "com.google.common.graph.AbstractGraph.equals(java.lang.Object)"], ["int", "com.google.common.graph.AbstractGraph.hashCode()"], ["java.lang.String", "com.google.common.graph.AbstractGraph.toString()"], ["boolean", "com.google.common.graph.AbstractGraph.hasEdgeConnecting(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.graph.AbstractGraph.outDegree(java.lang.Object)"], ["int", "com.google.common.graph.AbstractGraph.inDegree(java.lang.Object)"], ["int", "com.google.common.graph.AbstractGraph.degree(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.AbstractGraph.edges()"], ["java.lang.Object", "com.google.common.graph.AbstractNetwork$1$1$1.apply(java.lang.Object)"], ["int", "com.google.common.graph.AbstractNetwork$1$1.size()"], ["boolean", "com.google.common.graph.AbstractNetwork$1$1.contains(java.lang.Object)"], ["boolean", "com.google.common.graph.AbstractNetwork$1.isDirected()"], ["boolean", "com.google.common.graph.AbstractNetwork$1.allowsSelfLoops()"], ["java.lang.Iterable", "com.google.common.graph.AbstractNetwork$1.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.AbstractNetwork$1.predecessors(java.lang.Object)"], ["boolean", "com.google.common.graph.AbstractNetwork$2.apply(E)"], ["java.lang.Object", "com.google.common.graph.AbstractNetwork$3.apply(java.lang.Object)"], ["com.google.common.graph.AbstractNetwork", "com.google.common.graph.AbstractNetwork()"], ["int", "com.google.common.graph.AbstractNetwork.degree(N)"], ["int", "com.google.common.graph.AbstractNetwork.inDegree(N)"], ["int", "com.google.common.graph.AbstractNetwork.outDegree(N)"], ["E", "com.google.common.graph.AbstractNetwork.edgeConnectingOrNull(N, N)"], ["boolean", "com.google.common.graph.AbstractNetwork.hasEdgeConnecting(N, N)"], ["boolean", "com.google.common.graph.AbstractNetwork.equals(java.lang.Object)"], ["int", "com.google.common.graph.AbstractNetwork.hashCode()"], ["java.lang.String", "com.google.common.graph.AbstractNetwork.toString()"], ["N", "com.google.common.graph.AbstractUndirectedNetworkConnections.adjacentNode(E)"], ["N", "com.google.common.graph.AbstractUndirectedNetworkConnections.removeInEdge(E, boolean)"], ["N", "com.google.common.graph.AbstractUndirectedNetworkConnections.removeOutEdge(E)"], ["void", "com.google.common.graph.AbstractUndirectedNetworkConnections.addInEdge(E, N, boolean)"], ["void", "com.google.common.graph.AbstractUndirectedNetworkConnections.addOutEdge(E, N)"], ["boolean", "com.google.common.graph.AbstractValueGraph$1.isDirected()"], ["boolean", "com.google.common.graph.AbstractValueGraph$1.allowsSelfLoops()"], ["int", "com.google.common.graph.AbstractValueGraph$1.degree(N)"], ["int", "com.google.common.graph.AbstractValueGraph$1.inDegree(N)"], ["int", "com.google.common.graph.AbstractValueGraph$1.outDegree(N)"], ["java.lang.Iterable", "com.google.common.graph.AbstractValueGraph$1.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.AbstractValueGraph$1.predecessors(java.lang.Object)"], ["V", "com.google.common.graph.AbstractValueGraph$2.apply(com.google.common.graph.EndpointPair<N>)"], ["java.lang.Object", "com.google.common.graph.AbstractValueGraph$2.apply(java.lang.Object)"], ["com.google.common.graph.AbstractValueGraph", "com.google.common.graph.AbstractValueGraph()"], ["boolean", "com.google.common.graph.AbstractValueGraph.equals(java.lang.Object)"], ["int", "com.google.common.graph.AbstractValueGraph.hashCode()"], ["java.lang.String", "com.google.common.graph.AbstractValueGraph.toString()"], ["boolean", "com.google.common.graph.AbstractValueGraph.hasEdgeConnecting(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.graph.AbstractValueGraph.outDegree(java.lang.Object)"], ["int", "com.google.common.graph.AbstractValueGraph.inDegree(java.lang.Object)"], ["int", "com.google.common.graph.AbstractValueGraph.degree(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.AbstractValueGraph.edges()"], ["default", "com.google.common.graph.BaseGraph.java.lang.Iterable successors(java.lang.Object)"], ["default", "com.google.common.graph.BaseGraph.java.lang.Iterable predecessors(java.lang.Object)"], ["boolean", "com.google.common.graph.ConfigurableMutableGraph.addNode(N)"], ["boolean", "com.google.common.graph.ConfigurableMutableGraph.putEdge(N, N)"], ["boolean", "com.google.common.graph.ConfigurableMutableGraph.removeNode(N)"], ["boolean", "com.google.common.graph.ConfigurableMutableGraph.removeEdge(N, N)"], ["boolean", "com.google.common.graph.ConfigurableMutableNetwork.addNode(N)"], ["boolean", "com.google.common.graph.ConfigurableMutableNetwork.addEdge(N, N, E)"], ["boolean", "com.google.common.graph.ConfigurableMutableNetwork.removeNode(N)"], ["boolean", "com.google.common.graph.ConfigurableMutableNetwork.removeEdge(E)"], ["boolean", "com.google.common.graph.ConfigurableMutableValueGraph.addNode(N)"], ["V", "com.google.common.graph.ConfigurableMutableValueGraph.putEdgeValue(N, N, V)"], ["boolean", "com.google.common.graph.ConfigurableMutableValueGraph.removeNode(N)"], ["V", "com.google.common.graph.ConfigurableMutableValueGraph.removeEdge(N, N)"], ["boolean", "com.google.common.graph.ConfigurableNetwork.isDirected()"], ["boolean", "com.google.common.graph.ConfigurableNetwork.allowsParallelEdges()"], ["boolean", "com.google.common.graph.ConfigurableNetwork.allowsSelfLoops()"], ["java.lang.Iterable", "com.google.common.graph.ConfigurableNetwork.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.ConfigurableNetwork.predecessors(java.lang.Object)"], ["boolean", "com.google.common.graph.ConfigurableValueGraph.isDirected()"], ["boolean", "com.google.common.graph.ConfigurableValueGraph.allowsSelfLoops()"], ["boolean", "com.google.common.graph.ConfigurableValueGraph.hasEdgeConnecting(N, N)"], ["V", "com.google.common.graph.ConfigurableValueGraph.edgeValueOrDefault(N, N, V)"], ["java.lang.Iterable", "com.google.common.graph.ConfigurableValueGraph.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.ConfigurableValueGraph.predecessors(java.lang.Object)"], ["int", "com.google.common.graph.DirectedGraphConnections$1.size()"], ["boolean", "com.google.common.graph.DirectedGraphConnections$1.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.DirectedGraphConnections$1.iterator()"], ["int", "com.google.common.graph.DirectedGraphConnections$2.size()"], ["boolean", "com.google.common.graph.DirectedGraphConnections$2.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.DirectedGraphConnections$2.iterator()"], ["V", "com.google.common.graph.DirectedGraphConnections.value(N)"], ["void", "com.google.common.graph.DirectedGraphConnections.removePredecessor(N)"], ["V", "com.google.common.graph.DirectedGraphConnections.removeSuccessor(java.lang.Object)"], ["void", "com.google.common.graph.DirectedGraphConnections.addPredecessor(N, V)"], ["V", "com.google.common.graph.DirectedGraphConnections.addSuccessor(N, V)"], ["int", "com.google.common.graph.DirectedMultiNetworkConnections$1.size()"], ["N", "com.google.common.graph.DirectedMultiNetworkConnections.removeInEdge(E, boolean)"], ["N", "com.google.common.graph.DirectedMultiNetworkConnections.removeOutEdge(E)"], ["void", "com.google.common.graph.DirectedMultiNetworkConnections.addInEdge(E, N, boolean)"], ["void", "com.google.common.graph.DirectedMultiNetworkConnections.addOutEdge(E, N)"], ["int", "com.google.common.graph.EdgesConnecting.size()"], ["boolean", "com.google.common.graph.EdgesConnecting.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.EdgesConnecting.iterator()"], ["com.google.common.graph.ElementOrder$Type[]", "com.google.common.graph.ElementOrder$Type.values()"], ["com.google.common.graph.ElementOrder$Type", "com.google.common.graph.ElementOrder$Type.valueOf(java.lang.String)"], ["<S> com.google.common.graph.ElementOrder<S>", "com.google.common.graph.ElementOrder.unordered()"], ["<S> com.google.common.graph.ElementOrder<S>", "com.google.common.graph.ElementOrder.insertion()"], ["<S extends java.lang.Comparable<? super S>> com.google.common.graph.ElementOrder<S>", "com.google.common.graph.ElementOrder.natural()"], ["<S> com.google.common.graph.ElementOrder<S>", "com.google.common.graph.ElementOrder.sorted(java.util.Comparator<S>)"], ["com.google.common.graph.ElementOrder$Type", "com.google.common.graph.ElementOrder.type()"], ["boolean", "com.google.common.graph.ElementOrder.equals(java.lang.Object)"], ["int", "com.google.common.graph.ElementOrder.hashCode()"], ["java.lang.String", "com.google.common.graph.ElementOrder.toString()"], ["N", "com.google.common.graph.EndpointPair$Ordered.source()"], ["N", "com.google.common.graph.EndpointPair$Ordered.target()"], ["boolean", "com.google.common.graph.EndpointPair$Ordered.isOrdered()"], ["boolean", "com.google.common.graph.EndpointPair$Ordered.equals(java.lang.Object)"], ["int", "com.google.common.graph.EndpointPair$Ordered.hashCode()"], ["java.lang.String", "com.google.common.graph.EndpointPair$Ordered.toString()"], ["java.util.Iterator", "com.google.common.graph.EndpointPair$Ordered.iterator()"], ["N", "com.google.common.graph.EndpointPair$Unordered.source()"], ["N", "com.google.common.graph.EndpointPair$Unordered.target()"], ["boolean", "com.google.common.graph.EndpointPair$Unordered.isOrdered()"], ["boolean", "com.google.common.graph.EndpointPair$Unordered.equals(java.lang.Object)"], ["int", "com.google.common.graph.EndpointPair$Unordered.hashCode()"], ["java.lang.String", "com.google.common.graph.EndpointPair$Unordered.toString()"], ["java.util.Iterator", "com.google.common.graph.EndpointPair$Unordered.iterator()"], ["<N> com.google.common.graph.EndpointPair<N>", "com.google.common.graph.EndpointPair.ordered(N, N)"], ["<N> com.google.common.graph.EndpointPair<N>", "com.google.common.graph.EndpointPair.unordered(N, N)"], ["N", "com.google.common.graph.EndpointPair.nodeU()"], ["N", "com.google.common.graph.EndpointPair.nodeV()"], ["N", "com.google.common.graph.EndpointPair.adjacentNode(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.EndpointPair.iterator()"], ["boolean", "com.google.common.graph.ForwardingGraph.isDirected()"], ["boolean", "com.google.common.graph.ForwardingGraph.allowsSelfLoops()"], ["int", "com.google.common.graph.ForwardingGraph.degree(N)"], ["int", "com.google.common.graph.ForwardingGraph.inDegree(N)"], ["int", "com.google.common.graph.ForwardingGraph.outDegree(N)"], ["boolean", "com.google.common.graph.ForwardingGraph.hasEdgeConnecting(N, N)"], ["java.lang.Iterable", "com.google.common.graph.ForwardingGraph.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.ForwardingGraph.predecessors(java.lang.Object)"], ["boolean", "com.google.common.graph.ForwardingNetwork.isDirected()"], ["boolean", "com.google.common.graph.ForwardingNetwork.allowsParallelEdges()"], ["boolean", "com.google.common.graph.ForwardingNetwork.allowsSelfLoops()"], ["int", "com.google.common.graph.ForwardingNetwork.degree(N)"], ["int", "com.google.common.graph.ForwardingNetwork.inDegree(N)"], ["int", "com.google.common.graph.ForwardingNetwork.outDegree(N)"], ["E", "com.google.common.graph.ForwardingNetwork.edgeConnectingOrNull(N, N)"], ["boolean", "com.google.common.graph.ForwardingNetwork.hasEdgeConnecting(N, N)"], ["java.lang.Iterable", "com.google.common.graph.ForwardingNetwork.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.ForwardingNetwork.predecessors(java.lang.Object)"], ["boolean", "com.google.common.graph.ForwardingValueGraph.isDirected()"], ["boolean", "com.google.common.graph.ForwardingValueGraph.allowsSelfLoops()"], ["int", "com.google.common.graph.ForwardingValueGraph.degree(N)"], ["int", "com.google.common.graph.ForwardingValueGraph.inDegree(N)"], ["int", "com.google.common.graph.ForwardingValueGraph.outDegree(N)"], ["boolean", "com.google.common.graph.ForwardingValueGraph.hasEdgeConnecting(N, N)"], ["V", "com.google.common.graph.ForwardingValueGraph.edgeValueOrDefault(N, N, V)"], ["java.lang.Iterable", "com.google.common.graph.ForwardingValueGraph.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.ForwardingValueGraph.predecessors(java.lang.Object)"], ["default", "com.google.common.graph.Graph.java.lang.Iterable successors(java.lang.Object)"], ["default", "com.google.common.graph.Graph.java.lang.Iterable predecessors(java.lang.Object)"], ["<N> com.google.common.graph.GraphBuilder<N>", "com.google.common.graph.GraphBuilder.from(com.google.common.graph.Graph<N>)"], ["<N1 extends N> com.google.common.graph.GraphBuilder<N1>", "com.google.common.graph.GraphBuilder.nodeOrder(com.google.common.graph.ElementOrder<N1>)"], ["<N1 extends N> com.google.common.graph.MutableGraph<N1>", "com.google.common.graph.GraphBuilder.build()"], ["com.google.common.graph.GraphConstants$Presence[]", "com.google.common.graph.GraphConstants$Presence.values()"], ["com.google.common.graph.GraphConstants$Presence", "com.google.common.graph.GraphConstants$Presence.valueOf(java.lang.String)"], ["com.google.common.graph.Graphs$NodeVisitState[]", "com.google.common.graph.Graphs$NodeVisitState.values()"], ["com.google.common.graph.Graphs$NodeVisitState", "com.google.common.graph.Graphs$NodeVisitState.valueOf(java.lang.String)"], ["int", "com.google.common.graph.Graphs$TransposedGraph.inDegree(N)"], ["int", "com.google.common.graph.Graphs$TransposedGraph.outDegree(N)"], ["boolean", "com.google.common.graph.Graphs$TransposedGraph.hasEdgeConnecting(N, N)"], ["java.lang.Iterable", "com.google.common.graph.Graphs$TransposedGraph.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.Graphs$TransposedGraph.predecessors(java.lang.Object)"], ["int", "com.google.common.graph.Graphs$TransposedNetwork.inDegree(N)"], ["int", "com.google.common.graph.Graphs$TransposedNetwork.outDegree(N)"], ["E", "com.google.common.graph.Graphs$TransposedNetwork.edgeConnectingOrNull(N, N)"], ["boolean", "com.google.common.graph.Graphs$TransposedNetwork.hasEdgeConnecting(N, N)"], ["java.lang.Iterable", "com.google.common.graph.Graphs$TransposedNetwork.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.Graphs$TransposedNetwork.predecessors(java.lang.Object)"], ["int", "com.google.common.graph.Graphs$TransposedValueGraph.inDegree(N)"], ["int", "com.google.common.graph.Graphs$TransposedValueGraph.outDegree(N)"], ["boolean", "com.google.common.graph.Graphs$TransposedValueGraph.hasEdgeConnecting(N, N)"], ["V", "com.google.common.graph.Graphs$TransposedValueGraph.edgeValueOrDefault(N, N, V)"], ["java.lang.Iterable", "com.google.common.graph.Graphs$TransposedValueGraph.successors(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.graph.Graphs$TransposedValueGraph.predecessors(java.lang.Object)"], ["<N> boolean", "com.google.common.graph.Graphs.hasCycle(com.google.common.graph.Graph<N>)"], ["boolean", "com.google.common.graph.Graphs.hasCycle(com.google.common.graph.Network<?, ?>)"], ["<N> com.google.common.graph.Graph<N>", "com.google.common.graph.Graphs.transitiveClosure(com.google.common.graph.Graph<N>)"], ["<N> java.util.Set<N>", "com.google.common.graph.Graphs.reachableNodes(com.google.common.graph.Graph<N>, N)"], ["boolean", "com.google.common.graph.Graphs.equivalent(com.google.common.graph.Graph<?>, com.google.common.graph.Graph<?>)"], ["boolean", "com.google.common.graph.Graphs.equivalent(com.google.common.graph.ValueGraph<?, ?>, com.google.common.graph.ValueGraph<?, ?>)"], ["boolean", "com.google.common.graph.Graphs.equivalent(com.google.common.graph.Network<?, ?>, com.google.common.graph.Network<?, ?>)"], ["<N> com.google.common.graph.Graph<N>", "com.google.common.graph.Graphs.transpose(com.google.common.graph.Graph<N>)"], ["<N, V> com.google.common.graph.ValueGraph<N, V>", "com.google.common.graph.Graphs.transpose(com.google.common.graph.ValueGraph<N, V>)"], ["<N, E> com.google.common.graph.Network<N, E>", "com.google.common.graph.Graphs.transpose(com.google.common.graph.Network<N, E>)"], ["<N> com.google.common.graph.MutableGraph<N>", "com.google.common.graph.Graphs.inducedSubgraph(com.google.common.graph.Graph<N>, java.lang.Iterable<? extends N>)"], ["<N, V> com.google.common.graph.MutableValueGraph<N, V>", "com.google.common.graph.Graphs.inducedSubgraph(com.google.common.graph.ValueGraph<N, V>, java.lang.Iterable<? extends N>)"], ["<N, E> com.google.common.graph.MutableNetwork<N, E>", "com.google.common.graph.Graphs.inducedSubgraph(com.google.common.graph.Network<N, E>, java.lang.Iterable<? extends N>)"], ["<N> com.google.common.graph.MutableGraph<N>", "com.google.common.graph.Graphs.copyOf(com.google.common.graph.Graph<N>)"], ["<N, V> com.google.common.graph.MutableValueGraph<N, V>", "com.google.common.graph.Graphs.copyOf(com.google.common.graph.ValueGraph<N, V>)"], ["<N, E> com.google.common.graph.MutableNetwork<N, E>", "com.google.common.graph.Graphs.copyOf(com.google.common.graph.Network<N, E>)"], ["<N> com.google.common.graph.ImmutableGraph<N>", "com.google.common.graph.ImmutableGraph.copyOf(com.google.common.graph.Graph<N>)"], ["<N> com.google.common.graph.ImmutableGraph<N>", "com.google.common.graph.ImmutableGraph.copyOf(com.google.common.graph.ImmutableGraph<N>)"], ["boolean", "com.google.common.graph.ImmutableGraph.hasEdgeConnecting(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.graph.ImmutableGraph.outDegree(java.lang.Object)"], ["int", "com.google.common.graph.ImmutableGraph.inDegree(java.lang.Object)"], ["int", "com.google.common.graph.ImmutableGraph.degree(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableGraph.successors(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableGraph.predecessors(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableGraph.adjacentNodes(java.lang.Object)"], ["com.google.common.graph.ElementOrder", "com.google.common.graph.ImmutableGraph.nodeOrder()"], ["boolean", "com.google.common.graph.ImmutableGraph.allowsSelfLoops()"], ["boolean", "com.google.common.graph.ImmutableGraph.isDirected()"], ["java.util.Set", "com.google.common.graph.ImmutableGraph.nodes()"], ["N", "com.google.common.graph.ImmutableNetwork$1.apply(E)"], ["N", "com.google.common.graph.ImmutableNetwork$2.apply(E)"], ["N", "com.google.common.graph.ImmutableNetwork$3.apply(E)"], ["<N, E> com.google.common.graph.ImmutableNetwork<N, E>", "com.google.common.graph.ImmutableNetwork.copyOf(com.google.common.graph.Network<N, E>)"], ["<N, E> com.google.common.graph.ImmutableNetwork<N, E>", "com.google.common.graph.ImmutableNetwork.copyOf(com.google.common.graph.ImmutableNetwork<N, E>)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.successors(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.predecessors(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.outEdges(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.inEdges(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.edgesConnecting(java.lang.Object, java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.adjacentNodes(java.lang.Object)"], ["com.google.common.graph.EndpointPair", "com.google.common.graph.ImmutableNetwork.incidentNodes(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.incidentEdges(java.lang.Object)"], ["com.google.common.graph.ElementOrder", "com.google.common.graph.ImmutableNetwork.edgeOrder()"], ["com.google.common.graph.ElementOrder", "com.google.common.graph.ImmutableNetwork.nodeOrder()"], ["boolean", "com.google.common.graph.ImmutableNetwork.allowsSelfLoops()"], ["boolean", "com.google.common.graph.ImmutableNetwork.allowsParallelEdges()"], ["boolean", "com.google.common.graph.ImmutableNetwork.isDirected()"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.edges()"], ["java.util.Set", "com.google.common.graph.ImmutableNetwork.nodes()"], ["com.google.common.graph.Graph", "com.google.common.graph.ImmutableNetwork.asGraph()"], ["V", "com.google.common.graph.ImmutableValueGraph$1.apply(N)"], ["<N, V> com.google.common.graph.ImmutableValueGraph<N, V>", "com.google.common.graph.ImmutableValueGraph.copyOf(com.google.common.graph.ValueGraph<N, V>)"], ["<N, V> com.google.common.graph.ImmutableValueGraph<N, V>", "com.google.common.graph.ImmutableValueGraph.copyOf(com.google.common.graph.ImmutableValueGraph<N, V>)"], ["java.lang.Object", "com.google.common.graph.ImmutableValueGraph.edgeValueOrDefault(java.lang.Object, java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.graph.ImmutableValueGraph.hasEdgeConnecting(java.lang.Object, java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableValueGraph.successors(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableValueGraph.predecessors(java.lang.Object)"], ["java.util.Set", "com.google.common.graph.ImmutableValueGraph.adjacentNodes(java.lang.Object)"], ["com.google.common.graph.ElementOrder", "com.google.common.graph.ImmutableValueGraph.nodeOrder()"], ["boolean", "com.google.common.graph.ImmutableValueGraph.allowsSelfLoops()"], ["boolean", "com.google.common.graph.ImmutableValueGraph.isDirected()"], ["java.util.Set", "com.google.common.graph.ImmutableValueGraph.nodes()"], ["com.google.common.graph.Graph", "com.google.common.graph.ImmutableValueGraph.asGraph()"], ["boolean", "com.google.common.graph.MapIteratorCache$1$1.hasNext()"], ["K", "com.google.common.graph.MapIteratorCache$1$1.next()"], ["int", "com.google.common.graph.MapIteratorCache$1.size()"], ["boolean", "com.google.common.graph.MapIteratorCache$1.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.MapIteratorCache$1.iterator()"], ["V", "com.google.common.graph.MapIteratorCache.put(K, V)"], ["V", "com.google.common.graph.MapIteratorCache.remove(java.lang.Object)"], ["void", "com.google.common.graph.MapIteratorCache.clear()"], ["V", "com.google.common.graph.MapIteratorCache.get(java.lang.Object)"], ["V", "com.google.common.graph.MapIteratorCache.getWithoutCaching(java.lang.Object)"], ["boolean", "com.google.common.graph.MapIteratorCache.containsKey(java.lang.Object)"], ["V", "com.google.common.graph.MapRetrievalCache.get(java.lang.Object)"], ["boolean", "com.google.common.graph.MultiEdgesConnecting.contains(java.lang.Object)"], ["java.util.Iterator", "com.google.common.graph.MultiEdgesConnecting.iterator()"], ["default", "com.google.common.graph.Network.java.lang.Iterable successors(java.lang.Object)"], ["default", "com.google.common.graph.Network.java.lang.Iterable predecessors(java.lang.Object)"], ["com.google.common.graph.NetworkBuilder<java.lang.Object, java.lang.Object>", "com.google.common.graph.NetworkBuilder.directed()"], ["com.google.common.graph.NetworkBuilder<java.lang.Object, java.lang.Object>", "com.google.common.graph.NetworkBuilder.undirected()"], ["<N, E> com.google.common.graph.NetworkBuilder<N, E>", "com.google.common.graph.NetworkBuilder.from(com.google.common.graph.Network<N, E>)"], ["com.google.common.graph.NetworkBuilder<N, E>", "com.google.common.graph.NetworkBuilder.allowsParallelEdges(boolean)"], ["com.google.common.graph.NetworkBuilder<N, E>", "com.google.common.graph.NetworkBuilder.allowsSelfLoops(boolean)"], ["com.google.common.graph.NetworkBuilder<N, E>", "com.google.common.graph.NetworkBuilder.expectedNodeCount(int)"], ["com.google.common.graph.NetworkBuilder<N, E>", "com.google.common.graph.NetworkBuilder.expectedEdgeCount(int)"], ["<N1 extends N> com.google.common.graph.NetworkBuilder<N1, E>", "com.google.common.graph.NetworkBuilder.nodeOrder(com.google.common.graph.ElementOrder<N1>)"], ["<E1 extends E> com.google.common.graph.NetworkBuilder<N, E1>", "com.google.common.graph.NetworkBuilder.edgeOrder(com.google.common.graph.ElementOrder<E1>)"], ["<N1 extends N, E1 extends E> com.google.common.graph.MutableNetwork<N1, E1>", "com.google.common.graph.NetworkBuilder.build()"], ["boolean", "com.google.common.graph.Traverser$GraphTraverser$BreadthFirstIterator.hasNext()"], ["N", "com.google.common.graph.Traverser$GraphTraverser$BreadthFirstIterator.next()"], ["com.google.common.graph.Traverser$Order[]", "com.google.common.graph.Traverser$Order.values()"], ["com.google.common.graph.Traverser$Order", "com.google.common.graph.Traverser$Order.valueOf(java.lang.String)"], ["boolean", "com.google.common.graph.Traverser$TreeTraverser$BreadthFirstIterator.hasNext()"], ["N", "com.google.common.graph.Traverser$TreeTraverser$BreadthFirstIterator.next()"], ["boolean", "com.google.common.graph.Traverser$TreeTraverser$DepthFirstPreOrderIterator.hasNext()"], ["N", "com.google.common.graph.Traverser$TreeTraverser$DepthFirstPreOrderIterator.next()"], ["<N> com.google.common.graph.Traverser<N>", "com.google.common.graph.Traverser.forGraph(com.google.common.graph.SuccessorsFunction<N>)"], ["<N> com.google.common.graph.Traverser<N>", "com.google.common.graph.Traverser.forTree(com.google.common.graph.SuccessorsFunction<N>)"], ["V", "com.google.common.graph.UndirectedGraphConnections.value(N)"], ["void", "com.google.common.graph.UndirectedGraphConnections.removePredecessor(N)"], ["V", "com.google.common.graph.UndirectedGraphConnections.removeSuccessor(N)"], ["void", "com.google.common.graph.UndirectedGraphConnections.addPredecessor(N, V)"], ["V", "com.google.common.graph.UndirectedGraphConnections.addSuccessor(N, V)"], ["int", "com.google.common.graph.UndirectedMultiNetworkConnections$1.size()"], ["N", "com.google.common.graph.UndirectedMultiNetworkConnections.removeInEdge(E, boolean)"], ["N", "com.google.common.graph.UndirectedMultiNetworkConnections.removeOutEdge(E)"], ["void", "com.google.common.graph.UndirectedMultiNetworkConnections.addInEdge(E, N, boolean)"], ["void", "com.google.common.graph.UndirectedMultiNetworkConnections.addOutEdge(E, N)"], ["default", "com.google.common.graph.ValueGraph.java.lang.Iterable successors(java.lang.Object)"], ["default", "com.google.common.graph.ValueGraph.java.lang.Iterable predecessors(java.lang.Object)"], ["com.google.common.graph.ValueGraphBuilder<java.lang.Object, java.lang.Object>", "com.google.common.graph.ValueGraphBuilder.directed()"], ["com.google.common.graph.ValueGraphBuilder<java.lang.Object, java.lang.Object>", "com.google.common.graph.ValueGraphBuilder.undirected()"], ["<N, V> com.google.common.graph.ValueGraphBuilder<N, V>", "com.google.common.graph.ValueGraphBuilder.from(com.google.common.graph.ValueGraph<N, V>)"], ["com.google.common.graph.ValueGraphBuilder<N, V>", "com.google.common.graph.ValueGraphBuilder.allowsSelfLoops(boolean)"], ["com.google.common.graph.ValueGraphBuilder<N, V>", "com.google.common.graph.ValueGraphBuilder.expectedNodeCount(int)"], ["<N1 extends N> com.google.common.graph.ValueGraphBuilder<N1, V>", "com.google.common.graph.ValueGraphBuilder.nodeOrder(com.google.common.graph.ElementOrder<N1>)"], ["<N1 extends N, V1 extends V> com.google.common.graph.MutableValueGraph<N1, V1>", "com.google.common.graph.ValueGraphBuilder.build()"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractByteHasher.putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putBytes(byte[])"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractByteHasher.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["<T> com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction$1.putObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractCompositeHashFunction$1.hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBoolean(boolean)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putDouble(double)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putFloat(float)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putBytes(byte[])"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractCompositeHashFunction$1.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction.newHasher()"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractCompositeHashFunction.newHasher(int)"], ["<T> com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashBytes(byte[])"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashBytes(byte[], int, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractHashFunction.hashBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHashFunction.newHasher(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putBoolean(boolean)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putDouble(double)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putFloat(float)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putChar(char)"], ["<T> com.google.common.hash.Hasher", "com.google.common.hash.AbstractHasher.putObject(T, com.google.common.hash.Funnel<? super T>)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putBoolean(boolean)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putDouble(double)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putFloat(float)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractHasher.putBytes(byte[])"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction.newHasher()"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractNonStreamingHashFunction.newHasher(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractNonStreamingHashFunction.hashBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putShort(short)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putChar(char)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.AbstractStreamingHasher.putLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.AbstractStreamingHasher.hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putShort(short)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.AbstractStreamingHasher.putByte(byte)"], ["boolean", "com.google.common.hash.BloomFilter.mightContain(T)"], ["boolean", "com.google.common.hash.BloomFilter.apply(T)"], ["boolean", "com.google.common.hash.BloomFilter.put(T)"], ["double", "com.google.common.hash.BloomFilter.expectedFpp()"], ["long", "com.google.common.hash.BloomFilter.approximateElementCount()"], ["boolean", "com.google.common.hash.BloomFilter.isCompatible(com.google.common.hash.BloomFilter<T>)"], ["void", "com.google.common.hash.BloomFilter.putAll(com.google.common.hash.BloomFilter<T>)"], ["boolean", "com.google.common.hash.BloomFilter.equals(java.lang.Object)"], ["int", "com.google.common.hash.BloomFilter.hashCode()"], ["<T> java.util.stream.Collector<T, ?, com.google.common.hash.BloomFilter<T>>", "com.google.common.hash.BloomFilter.toBloomFilter(com.google.common.hash.Funnel<? super T>, long)"], ["<T> java.util.stream.Collector<T, ?, com.google.common.hash.BloomFilter<T>>", "com.google.common.hash.BloomFilter.toBloomFilter(com.google.common.hash.Funnel<? super T>, long, double)"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel<? super T>, int, double)"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel<? super T>, long, double)"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel<? super T>, int)"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel<? super T>, long)"], ["void", "com.google.common.hash.BloomFilter.writeTo(java.io.OutputStream)"], ["<T> com.google.common.hash.BloomFilter<T>", "com.google.common.hash.BloomFilter.readFrom(java.io.InputStream, com.google.common.hash.Funnel<? super T>)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$1.put(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$1.mightContain(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$2.put(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)"], ["<T> boolean", "com.google.common.hash.BloomFilterStrategies$2.mightContain(T, com.google.common.hash.Funnel<? super T>, int, com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)"], ["long[]", "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray.toPlainArray(java.util.concurrent.atomic.AtomicLongArray)"], ["boolean", "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray.equals(java.lang.Object)"], ["int", "com.google.common.hash.BloomFilterStrategies$LockFreeBitArray.hashCode()"], ["com.google.common.hash.BloomFilterStrategies[]", "com.google.common.hash.BloomFilterStrategies.values()"], ["com.google.common.hash.BloomFilterStrategies", "com.google.common.hash.BloomFilterStrategies.valueOf(java.lang.String)"], ["com.google.common.hash.HashCode", "com.google.common.hash.ChecksumHashFunction$ChecksumHasher.hash()"], ["int", "com.google.common.hash.ChecksumHashFunction.bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.ChecksumHashFunction.newHasher()"], ["java.lang.String", "com.google.common.hash.ChecksumHashFunction.toString()"], ["void", "com.google.common.hash.Crc32cHashFunction$Crc32cHasher.update(byte)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Crc32cHashFunction$Crc32cHasher.hash()"], ["int", "com.google.common.hash.Crc32cHashFunction.bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Crc32cHashFunction.newHasher()"], ["java.lang.String", "com.google.common.hash.Crc32cHashFunction.toString()"], ["com.google.common.hash.HashCode", "com.google.common.hash.FarmHashFingerprint64.hashBytes(byte[], int, int)"], ["int", "com.google.common.hash.FarmHashFingerprint64.bits()"], ["java.lang.String", "com.google.common.hash.FarmHashFingerprint64.toString()"], ["com.google.common.hash.Funnels$ByteArrayFunnel[]", "com.google.common.hash.Funnels$ByteArrayFunnel.values()"], ["com.google.common.hash.Funnels$ByteArrayFunnel", "com.google.common.hash.Funnels$ByteArrayFunnel.valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$ByteArrayFunnel.funnel(byte[], com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$ByteArrayFunnel.toString()"], ["void", "com.google.common.hash.Funnels$ByteArrayFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnels$IntegerFunnel[]", "com.google.common.hash.Funnels$IntegerFunnel.values()"], ["com.google.common.hash.Funnels$IntegerFunnel", "com.google.common.hash.Funnels$IntegerFunnel.valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Integer, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$IntegerFunnel.toString()"], ["void", "com.google.common.hash.Funnels$IntegerFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnels$LongFunnel[]", "com.google.common.hash.Funnels$LongFunnel.values()"], ["com.google.common.hash.Funnels$LongFunnel", "com.google.common.hash.Funnels$LongFunnel.valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Long, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$LongFunnel.toString()"], ["void", "com.google.common.hash.Funnels$LongFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["void", "com.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Iterable<? extends E>, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$SequentialFunnel.toString()"], ["boolean", "com.google.common.hash.Funnels$SequentialFunnel.equals(java.lang.Object)"], ["int", "com.google.common.hash.Funnels$SequentialFunnel.hashCode()"], ["void", "com.google.common.hash.Funnels$SequentialFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["void", "com.google.common.hash.Funnels$SinkAsStream.write(int)"], ["void", "com.google.common.hash.Funnels$SinkAsStream.write(byte[])"], ["void", "com.google.common.hash.Funnels$SinkAsStream.write(byte[], int, int)"], ["java.lang.String", "com.google.common.hash.Funnels$SinkAsStream.toString()"], ["void", "com.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.CharSequence, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$StringCharsetFunnel.toString()"], ["boolean", "com.google.common.hash.Funnels$StringCharsetFunnel.equals(java.lang.Object)"], ["int", "com.google.common.hash.Funnels$StringCharsetFunnel.hashCode()"], ["void", "com.google.common.hash.Funnels$StringCharsetFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["com.google.common.hash.Funnels$UnencodedCharsFunnel[]", "com.google.common.hash.Funnels$UnencodedCharsFunnel.values()"], ["com.google.common.hash.Funnels$UnencodedCharsFunnel", "com.google.common.hash.Funnels$UnencodedCharsFunnel.valueOf(java.lang.String)"], ["void", "com.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.CharSequence, com.google.common.hash.PrimitiveSink)"], ["java.lang.String", "com.google.common.hash.Funnels$UnencodedCharsFunnel.toString()"], ["void", "com.google.common.hash.Funnels$UnencodedCharsFunnel.funnel(java.lang.Object, com.google.common.hash.PrimitiveSink)"], ["<E> com.google.common.hash.Funnel<java.lang.Iterable<? extends E>>", "com.google.common.hash.Funnels.sequentialFunnel(com.google.common.hash.Funnel<E>)"], ["java.io.OutputStream", "com.google.common.hash.Funnels.asOutputStream(com.google.common.hash.PrimitiveSink)"], ["int", "com.google.common.hash.HashCode$BytesHashCode.bits()"], ["byte[]", "com.google.common.hash.HashCode$BytesHashCode.asBytes()"], ["int", "com.google.common.hash.HashCode$BytesHashCode.asInt()"], ["long", "com.google.common.hash.HashCode$BytesHashCode.asLong()"], ["long", "com.google.common.hash.HashCode$BytesHashCode.padToLong()"], ["int", "com.google.common.hash.HashCode$IntHashCode.bits()"], ["byte[]", "com.google.common.hash.HashCode$IntHashCode.asBytes()"], ["int", "com.google.common.hash.HashCode$IntHashCode.asInt()"], ["long", "com.google.common.hash.HashCode$IntHashCode.asLong()"], ["long", "com.google.common.hash.HashCode$IntHashCode.padToLong()"], ["int", "com.google.common.hash.HashCode$LongHashCode.bits()"], ["byte[]", "com.google.common.hash.HashCode$LongHashCode.asBytes()"], ["int", "com.google.common.hash.HashCode$LongHashCode.asInt()"], ["long", "com.google.common.hash.HashCode$LongHashCode.asLong()"], ["long", "com.google.common.hash.HashCode$LongHashCode.padToLong()"], ["int", "com.google.common.hash.HashCode.writeBytesTo(byte[], int, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromBytes(byte[])"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashCode.fromString(java.lang.String)"], ["boolean", "com.google.common.hash.HashCode.equals(java.lang.Object)"], ["int", "com.google.common.hash.HashCode.hashCode()"], ["java.lang.String", "com.google.common.hash.HashCode.toString()"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putUnencodedChars(java.lang.CharSequence)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putChar(char)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putBoolean(boolean)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putDouble(double)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putFloat(float)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putLong(long)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putInt(int)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putShort(short)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putBytes(java.nio.ByteBuffer)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putBytes(byte[], int, int)"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putBytes(byte[])"], ["default", "com.google.common.hash.Hasher.com.google.common.hash.PrimitiveSink putByte(byte)"], ["java.util.zip.Checksum", "com.google.common.hash.Hashing$ChecksumType$1.get()"], ["java.lang.Object", "com.google.common.hash.Hashing$ChecksumType$1.get()"], ["java.util.zip.Checksum", "com.google.common.hash.Hashing$ChecksumType$2.get()"], ["java.lang.Object", "com.google.common.hash.Hashing$ChecksumType$2.get()"], ["com.google.common.hash.Hashing$ChecksumType[]", "com.google.common.hash.Hashing$ChecksumType.values()"], ["com.google.common.hash.Hashing$ChecksumType", "com.google.common.hash.Hashing$ChecksumType.valueOf(java.lang.String)"], ["int", "com.google.common.hash.Hashing$ConcatenatedHashFunction.bits()"], ["boolean", "com.google.common.hash.Hashing$ConcatenatedHashFunction.equals(java.lang.Object)"], ["int", "com.google.common.hash.Hashing$ConcatenatedHashFunction.hashCode()"], ["com.google.common.hash.Hashing$LinearCongruentialGenerator", "com.google.common.hash.Hashing$LinearCongruentialGenerator(long)"], ["double", "com.google.common.hash.Hashing$LinearCongruentialGenerator.nextDouble()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.goodFastHash(int)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_32(int)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_32()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_128(int)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.murmur3_128()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sipHash24()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sipHash24(long, long)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.md5()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha1()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha256()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha384()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.sha512()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacMd5(java.security.Key)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacMd5(byte[])"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacSha1(java.security.Key)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacSha1(byte[])"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacSha256(java.security.Key)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacSha256(byte[])"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacSha512(java.security.Key)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.hmacSha512(byte[])"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.crc32c()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.crc32()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.adler32()"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.farmHashFingerprint64()"], ["int", "com.google.common.hash.Hashing.consistentHash(com.google.common.hash.HashCode, int)"], ["int", "com.google.common.hash.Hashing.consistentHash(long, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Hashing.combineOrdered(java.lang.Iterable<com.google.common.hash.HashCode>)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Hashing.combineUnordered(java.lang.Iterable<com.google.common.hash.HashCode>)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.concatenating(com.google.common.hash.HashFunction, com.google.common.hash.HashFunction, com.google.common.hash.HashFunction...)"], ["com.google.common.hash.HashFunction", "com.google.common.hash.Hashing.concatenating(java.lang.Iterable<com.google.common.hash.HashFunction>)"], ["com.google.common.hash.HashingInputStream", "com.google.common.hash.HashingInputStream(com.google.common.hash.HashFunction, java.io.InputStream)"], ["int", "com.google.common.hash.HashingInputStream.read()"], ["int", "com.google.common.hash.HashingInputStream.read(byte[], int, int)"], ["boolean", "com.google.common.hash.HashingInputStream.markSupported()"], ["void", "com.google.common.hash.HashingInputStream.mark(int)"], ["void", "com.google.common.hash.HashingInputStream.reset()"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashingInputStream.hash()"], ["com.google.common.hash.HashingOutputStream", "com.google.common.hash.HashingOutputStream(com.google.common.hash.HashFunction, java.io.OutputStream)"], ["void", "com.google.common.hash.HashingOutputStream.write(int)"], ["void", "com.google.common.hash.HashingOutputStream.write(byte[], int, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.HashingOutputStream.hash()"], ["void", "com.google.common.hash.HashingOutputStream.close()"], ["long", "com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1.getLongLittleEndian(byte[], int)"], ["void", "com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1.putLongLittleEndian(byte[], int, long)"], ["com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[]", "com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes.values()"], ["com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes", "com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes.valueOf(java.lang.String)"], ["long", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1.getLongLittleEndian(byte[], int)"], ["void", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1.putLongLittleEndian(byte[], int, long)"], ["long", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2.getLongLittleEndian(byte[], int)"], ["void", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2.putLongLittleEndian(byte[], int, long)"], ["sun.misc.Unsafe", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3.run()"], ["java.lang.Object", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3.run()"], ["com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[]", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray.values()"], ["com.google.common.hash.LittleEndianByteArray$UnsafeByteArray", "com.google.common.hash.LittleEndianByteArray$UnsafeByteArray.valueOf(java.lang.String)"], ["com.google.common.hash.LongAddable", "com.google.common.hash.LongAddables$1.get()"], ["java.lang.Object", "com.google.common.hash.LongAddables$1.get()"], ["com.google.common.hash.LongAddable", "com.google.common.hash.LongAddables$2.get()"], ["java.lang.Object", "com.google.common.hash.LongAddables$2.get()"], ["void", "com.google.common.hash.LongAddables$PureJavaLongAddable.increment()"], ["void", "com.google.common.hash.LongAddables$PureJavaLongAddable.add(long)"], ["long", "com.google.common.hash.LongAddables$PureJavaLongAddable.sum()"], ["com.google.common.hash.LongAddable", "com.google.common.hash.LongAddables.create()"], ["com.google.common.hash.LongAdder", "com.google.common.hash.LongAdder()"], ["void", "com.google.common.hash.LongAdder.add(long)"], ["void", "com.google.common.hash.LongAdder.increment()"], ["void", "com.google.common.hash.LongAdder.decrement()"], ["long", "com.google.common.hash.LongAdder.sum()"], ["void", "com.google.common.hash.LongAdder.reset()"], ["long", "com.google.common.hash.LongAdder.sumThenReset()"], ["java.lang.String", "com.google.common.hash.LongAdder.toString()"], ["long", "com.google.common.hash.LongAdder.longValue()"], ["int", "com.google.common.hash.LongAdder.intValue()"], ["float", "com.google.common.hash.LongAdder.floatValue()"], ["double", "com.google.common.hash.LongAdder.doubleValue()"], ["com.google.common.hash.HashCode", "com.google.common.hash.MacHashFunction$MacHasher.hash()"], ["int", "com.google.common.hash.MacHashFunction.bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.MacHashFunction.newHasher()"], ["java.lang.String", "com.google.common.hash.MacHashFunction.toString()"], ["com.google.common.hash.HashCode", "com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher.hash()"], ["int", "com.google.common.hash.MessageDigestHashFunction.bits()"], ["java.lang.String", "com.google.common.hash.MessageDigestHashFunction.toString()"], ["com.google.common.hash.Hasher", "com.google.common.hash.MessageDigestHashFunction.newHasher()"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher.makeHash()"], ["int", "com.google.common.hash.Murmur3_128HashFunction.bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_128HashFunction.newHasher()"], ["java.lang.String", "com.google.common.hash.Murmur3_128HashFunction.toString()"], ["boolean", "com.google.common.hash.Murmur3_128HashFunction.equals(java.lang.Object)"], ["int", "com.google.common.hash.Murmur3_128HashFunction.hashCode()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putByte(byte)"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putBytes(byte[], int, int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putInt(int)"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putLong(long)"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putChar(char)"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.hash()"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putChar(char)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putLong(long)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putInt(int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putBytes(java.nio.ByteBuffer)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putBytes(byte[], int, int)"], ["com.google.common.hash.PrimitiveSink", "com.google.common.hash.Murmur3_32HashFunction$Murmur3_32Hasher.putByte(byte)"], ["int", "com.google.common.hash.Murmur3_32HashFunction.bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.Murmur3_32HashFunction.newHasher()"], ["java.lang.String", "com.google.common.hash.Murmur3_32HashFunction.toString()"], ["boolean", "com.google.common.hash.Murmur3_32HashFunction.equals(java.lang.Object)"], ["int", "com.google.common.hash.Murmur3_32HashFunction.hashCode()"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashInt(int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashLong(long)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashUnencodedChars(java.lang.CharSequence)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashString(java.lang.CharSequence, java.nio.charset.Charset)"], ["com.google.common.hash.HashCode", "com.google.common.hash.Murmur3_32HashFunction.hashBytes(byte[], int, int)"], ["com.google.common.hash.HashCode", "com.google.common.hash.SipHashFunction$SipHasher.makeHash()"], ["int", "com.google.common.hash.SipHashFunction.bits()"], ["com.google.common.hash.Hasher", "com.google.common.hash.SipHashFunction.newHasher()"], ["java.lang.String", "com.google.common.hash.SipHashFunction.toString()"], ["boolean", "com.google.common.hash.SipHashFunction.equals(java.lang.Object)"], ["int", "com.google.common.hash.SipHashFunction.hashCode()"], ["sun.misc.Unsafe", "com.google.common.hash.Striped64$1.run()"], ["java.lang.Object", "com.google.common.hash.Striped64$1.run()"], ["com.google.common.escape.Escaper", "com.google.common.html.HtmlEscapers.htmlEscaper()"], ["void", "com.google.common.io.AppendableWriter.write(char[], int, int)"], ["void", "com.google.common.io.AppendableWriter.flush()"], ["void", "com.google.common.io.AppendableWriter.close()"], ["void", "com.google.common.io.AppendableWriter.write(int)"], ["void", "com.google.common.io.AppendableWriter.write(java.lang.String)"], ["void", "com.google.common.io.AppendableWriter.write(java.lang.String, int, int)"], ["java.io.Writer", "com.google.common.io.AppendableWriter.append(char)"], ["java.io.Writer", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence)"], ["java.io.Writer", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "com.google.common.io.AppendableWriter.append(char)"], ["java.lang.Appendable", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "com.google.common.io.AppendableWriter.append(java.lang.CharSequence)"], ["java.io.OutputStream", "com.google.common.io.BaseEncoding$1.openStream()"], ["java.io.InputStream", "com.google.common.io.BaseEncoding$2.openStream()"], ["int", "com.google.common.io.BaseEncoding$3.read()"], ["int", "com.google.common.io.BaseEncoding$3.read(char[], int, int)"], ["void", "com.google.common.io.BaseEncoding$3.close()"], ["java.lang.Appendable", "com.google.common.io.BaseEncoding$4.append(char)"], ["java.lang.Appendable", "com.google.common.io.BaseEncoding$4.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "com.google.common.io.BaseEncoding$4.append(java.lang.CharSequence)"], ["void", "com.google.common.io.BaseEncoding$5.write(int)"], ["void", "com.google.common.io.BaseEncoding$5.write(char[], int, int)"], ["void", "com.google.common.io.BaseEncoding$5.flush()"], ["void", "com.google.common.io.BaseEncoding$5.close()"], ["boolean", "com.google.common.io.BaseEncoding$Alphabet.matches(char)"], ["java.lang.String", "com.google.common.io.BaseEncoding$Alphabet.toString()"], ["boolean", "com.google.common.io.BaseEncoding$Alphabet.equals(java.lang.Object)"], ["int", "com.google.common.io.BaseEncoding$Alphabet.hashCode()"], ["java.io.OutputStream", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.encodingStream(java.io.Writer)"], ["boolean", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.canDecode(java.lang.CharSequence)"], ["java.io.InputStream", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.decodingStream(java.io.Reader)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.omitPadding()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.withPadChar(char)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.withSeparator(java.lang.String, int)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.upperCase()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.lowerCase()"], ["java.lang.String", "com.google.common.io.BaseEncoding$SeparatedBaseEncoding.toString()"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$1.write(int)"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$1.flush()"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$1.close()"], ["int", "com.google.common.io.BaseEncoding$StandardBaseEncoding$2.read()"], ["void", "com.google.common.io.BaseEncoding$StandardBaseEncoding$2.close()"], ["java.io.OutputStream", "com.google.common.io.BaseEncoding$StandardBaseEncoding.encodingStream(java.io.Writer)"], ["boolean", "com.google.common.io.BaseEncoding$StandardBaseEncoding.canDecode(java.lang.CharSequence)"], ["java.io.InputStream", "com.google.common.io.BaseEncoding$StandardBaseEncoding.decodingStream(java.io.Reader)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.omitPadding()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.withPadChar(char)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.withSeparator(java.lang.String, int)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.upperCase()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding$StandardBaseEncoding.lowerCase()"], ["java.lang.String", "com.google.common.io.BaseEncoding$StandardBaseEncoding.toString()"], ["boolean", "com.google.common.io.BaseEncoding$StandardBaseEncoding.equals(java.lang.Object)"], ["int", "com.google.common.io.BaseEncoding$StandardBaseEncoding.hashCode()"], ["java.lang.String", "com.google.common.io.BaseEncoding.encode(byte[])"], ["java.lang.String", "com.google.common.io.BaseEncoding.encode(byte[], int, int)"], ["com.google.common.io.ByteSink", "com.google.common.io.BaseEncoding.encodingSink(com.google.common.io.CharSink)"], ["byte[]", "com.google.common.io.BaseEncoding.decode(java.lang.CharSequence)"], ["com.google.common.io.ByteSource", "com.google.common.io.BaseEncoding.decodingSource(com.google.common.io.CharSource)"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base64()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base64Url()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base32()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base32Hex()"], ["com.google.common.io.BaseEncoding", "com.google.common.io.BaseEncoding.base16()"], ["java.io.Writer", "com.google.common.io.ByteSink$AsCharSink.openStream()"], ["java.lang.String", "com.google.common.io.ByteSink$AsCharSink.toString()"], ["com.google.common.io.CharSink", "com.google.common.io.ByteSink.asCharSink(java.nio.charset.Charset)"], ["java.io.OutputStream", "com.google.common.io.ByteSink.openBufferedStream()"], ["void", "com.google.common.io.ByteSink.write(byte[])"], ["long", "com.google.common.io.ByteSink.writeFrom(java.io.InputStream)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource$AsCharSource.asByteSource(java.nio.charset.Charset)"], ["java.io.Reader", "com.google.common.io.ByteSource$AsCharSource.openStream()"], ["java.lang.String", "com.google.common.io.ByteSource$AsCharSource.read()"], ["java.lang.String", "com.google.common.io.ByteSource$AsCharSource.toString()"], ["java.io.InputStream", "com.google.common.io.ByteSource$ByteArrayByteSource.openStream()"], ["java.io.InputStream", "com.google.common.io.ByteSource$ByteArrayByteSource.openBufferedStream()"], ["boolean", "com.google.common.io.ByteSource$ByteArrayByteSource.isEmpty()"], ["long", "com.google.common.io.ByteSource$ByteArrayByteSource.size()"], ["byte[]", "com.google.common.io.ByteSource$ByteArrayByteSource.read()"], ["long", "com.google.common.io.ByteSource$ByteArrayByteSource.copyTo(java.io.OutputStream)"], ["<T> T", "com.google.common.io.ByteSource$ByteArrayByteSource.read(com.google.common.io.ByteProcessor<T>)"], ["com.google.common.hash.HashCode", "com.google.common.io.ByteSource$ByteArrayByteSource.hash(com.google.common.hash.HashFunction)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource$ByteArrayByteSource.slice(long, long)"], ["java.lang.String", "com.google.common.io.ByteSource$ByteArrayByteSource.toString()"], ["java.io.InputStream", "com.google.common.io.ByteSource$ConcatenatedByteSource.openStream()"], ["boolean", "com.google.common.io.ByteSource$ConcatenatedByteSource.isEmpty()"], ["long", "com.google.common.io.ByteSource$ConcatenatedByteSource.size()"], ["java.lang.String", "com.google.common.io.ByteSource$ConcatenatedByteSource.toString()"], ["com.google.common.io.CharSource", "com.google.common.io.ByteSource$EmptyByteSource.asCharSource(java.nio.charset.Charset)"], ["byte[]", "com.google.common.io.ByteSource$EmptyByteSource.read()"], ["java.lang.String", "com.google.common.io.ByteSource$EmptyByteSource.toString()"], ["java.io.InputStream", "com.google.common.io.ByteSource$SlicedByteSource.openStream()"], ["java.io.InputStream", "com.google.common.io.ByteSource$SlicedByteSource.openBufferedStream()"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource$SlicedByteSource.slice(long, long)"], ["boolean", "com.google.common.io.ByteSource$SlicedByteSource.isEmpty()"], ["java.lang.String", "com.google.common.io.ByteSource$SlicedByteSource.toString()"], ["com.google.common.io.CharSource", "com.google.common.io.ByteSource.asCharSource(java.nio.charset.Charset)"], ["java.io.InputStream", "com.google.common.io.ByteSource.openBufferedStream()"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.slice(long, long)"], ["boolean", "com.google.common.io.ByteSource.isEmpty()"], ["long", "com.google.common.io.ByteSource.size()"], ["long", "com.google.common.io.ByteSource.copyTo(java.io.OutputStream)"], ["long", "com.google.common.io.ByteSource.copyTo(com.google.common.io.ByteSink)"], ["byte[]", "com.google.common.io.ByteSource.read()"], ["<T> T", "com.google.common.io.ByteSource.read(com.google.common.io.ByteProcessor<T>)"], ["com.google.common.hash.HashCode", "com.google.common.io.ByteSource.hash(com.google.common.hash.HashFunction)"], ["boolean", "com.google.common.io.ByteSource.contentEquals(com.google.common.io.ByteSource)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.concat(java.lang.Iterable<? extends com.google.common.io.ByteSource>)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.concat(java.util.Iterator<? extends com.google.common.io.ByteSource>)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.concat(com.google.common.io.ByteSource...)"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.wrap(byte[])"], ["com.google.common.io.ByteSource", "com.google.common.io.ByteSource.empty()"], ["void", "com.google.common.io.ByteStreams$1.write(int)"], ["void", "com.google.common.io.ByteStreams$1.write(byte[])"], ["void", "com.google.common.io.ByteStreams$1.write(byte[], int, int)"], ["java.lang.String", "com.google.common.io.ByteStreams$1.toString()"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[])"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readFully(byte[], int, int)"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.skipBytes(int)"], ["boolean", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readBoolean()"], ["byte", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readByte()"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedByte()"], ["short", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readShort()"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readUnsignedShort()"], ["char", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readChar()"], ["int", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readInt()"], ["long", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readLong()"], ["float", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readFloat()"], ["double", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readDouble()"], ["java.lang.String", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readLine()"], ["java.lang.String", "com.google.common.io.ByteStreams$ByteArrayDataInputStream.readUTF()"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[])"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.write(byte[], int, int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBoolean(boolean)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeByte(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeBytes(java.lang.String)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChar(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeChars(java.lang.String)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeDouble(double)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeFloat(float)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeInt(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeLong(long)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeShort(int)"], ["void", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.writeUTF(java.lang.String)"], ["byte[]", "com.google.common.io.ByteStreams$ByteArrayDataOutputStream.toByteArray()"], ["int", "com.google.common.io.ByteStreams$LimitedInputStream.available()"], ["synchronized", "com.google.common.io.ByteStreams$LimitedInputStream.void mark(int)"], ["int", "com.google.common.io.ByteStreams$LimitedInputStream.read()"], ["int", "com.google.common.io.ByteStreams$LimitedInputStream.read(byte[], int, int)"], ["synchronized", "com.google.common.io.ByteStreams$LimitedInputStream.void reset()"], ["long", "com.google.common.io.ByteStreams$LimitedInputStream.skip(long)"], ["long", "com.google.common.io.ByteStreams.copy(java.io.InputStream, java.io.OutputStream)"], ["long", "com.google.common.io.ByteStreams.copy(java.nio.channels.ReadableByteChannel, java.nio.channels.WritableByteChannel)"], ["byte[]", "com.google.common.io.ByteStreams.toByteArray(java.io.InputStream)"], ["long", "com.google.common.io.ByteStreams.exhaust(java.io.InputStream)"], ["com.google.common.io.ByteArrayDataInput", "com.google.common.io.ByteStreams.newDataInput(byte[])"], ["com.google.common.io.ByteArrayDataInput", "com.google.common.io.ByteStreams.newDataInput(byte[], int)"], ["com.google.common.io.ByteArrayDataInput", "com.google.common.io.ByteStreams.newDataInput(java.io.ByteArrayInputStream)"], ["com.google.common.io.ByteArrayDataOutput", "com.google.common.io.ByteStreams.newDataOutput()"], ["com.google.common.io.ByteArrayDataOutput", "com.google.common.io.ByteStreams.newDataOutput(int)"], ["com.google.common.io.ByteArrayDataOutput", "com.google.common.io.ByteStreams.newDataOutput(java.io.ByteArrayOutputStream)"], ["java.io.OutputStream", "com.google.common.io.ByteStreams.nullOutputStream()"], ["java.io.InputStream", "com.google.common.io.ByteStreams.limit(java.io.InputStream, long)"], ["void", "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[])"], ["void", "com.google.common.io.ByteStreams.readFully(java.io.InputStream, byte[], int, int)"], ["void", "com.google.common.io.ByteStreams.skipFully(java.io.InputStream, long)"], ["<T> T", "com.google.common.io.ByteStreams.readBytes(java.io.InputStream, com.google.common.io.ByteProcessor<T>)"], ["int", "com.google.common.io.ByteStreams.read(java.io.InputStream, byte[], int, int)"], ["com.google.common.io.CharSequenceReader", "com.google.common.io.CharSequenceReader(java.lang.CharSequence)"], ["synchronized", "com.google.common.io.CharSequenceReader.int read(java.nio.CharBuffer)"], ["synchronized", "com.google.common.io.CharSequenceReader.int read()"], ["synchronized", "com.google.common.io.CharSequenceReader.int read(char[], int, int)"], ["synchronized", "com.google.common.io.CharSequenceReader.long skip(long)"], ["synchronized", "com.google.common.io.CharSequenceReader.boolean ready()"], ["boolean", "com.google.common.io.CharSequenceReader.markSupported()"], ["synchronized", "com.google.common.io.CharSequenceReader.void mark(int)"], ["synchronized", "com.google.common.io.CharSequenceReader.void reset()"], ["synchronized", "com.google.common.io.CharSequenceReader.void close()"], ["java.io.Writer", "com.google.common.io.CharSink.openBufferedStream()"], ["void", "com.google.common.io.CharSink.write(java.lang.CharSequence)"], ["void", "com.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>)"], ["void", "com.google.common.io.CharSink.writeLines(java.lang.Iterable<? extends java.lang.CharSequence>, java.lang.String)"], ["void", "com.google.common.io.CharSink.writeLines(java.util.stream.Stream<? extends java.lang.CharSequence>)"], ["void", "com.google.common.io.CharSink.writeLines(java.util.stream.Stream<? extends java.lang.CharSequence>, java.lang.String)"], ["long", "com.google.common.io.CharSink.writeFrom(java.lang.Readable)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource$AsByteSource.asCharSource(java.nio.charset.Charset)"], ["java.io.InputStream", "com.google.common.io.CharSource$AsByteSource.openStream()"], ["java.lang.String", "com.google.common.io.CharSource$AsByteSource.toString()"], ["java.io.Reader", "com.google.common.io.CharSource$CharSequenceCharSource.openStream()"], ["java.lang.String", "com.google.common.io.CharSource$CharSequenceCharSource.read()"], ["boolean", "com.google.common.io.CharSource$CharSequenceCharSource.isEmpty()"], ["long", "com.google.common.io.CharSource$CharSequenceCharSource.length()"], ["java.lang.String", "com.google.common.io.CharSource$CharSequenceCharSource.readFirstLine()"], ["<T> T", "com.google.common.io.CharSource$CharSequenceCharSource.readLines(com.google.common.io.LineProcessor<T>)"], ["java.lang.String", "com.google.common.io.CharSource$CharSequenceCharSource.toString()"], ["java.io.Reader", "com.google.common.io.CharSource$ConcatenatedCharSource.openStream()"], ["boolean", "com.google.common.io.CharSource$ConcatenatedCharSource.isEmpty()"], ["long", "com.google.common.io.CharSource$ConcatenatedCharSource.length()"], ["java.lang.String", "com.google.common.io.CharSource$ConcatenatedCharSource.toString()"], ["java.lang.String", "com.google.common.io.CharSource$EmptyCharSource.toString()"], ["java.io.Reader", "com.google.common.io.CharSource$StringCharSource.openStream()"], ["long", "com.google.common.io.CharSource$StringCharSource.copyTo(java.lang.Appendable)"], ["long", "com.google.common.io.CharSource$StringCharSource.copyTo(com.google.common.io.CharSink)"], ["com.google.common.io.ByteSource", "com.google.common.io.CharSource.asByteSource(java.nio.charset.Charset)"], ["java.io.BufferedReader", "com.google.common.io.CharSource.openBufferedStream()"], ["long", "com.google.common.io.CharSource.length()"], ["long", "com.google.common.io.CharSource.copyTo(java.lang.Appendable)"], ["long", "com.google.common.io.CharSource.copyTo(com.google.common.io.CharSink)"], ["java.lang.String", "com.google.common.io.CharSource.read()"], ["java.lang.String", "com.google.common.io.CharSource.readFirstLine()"], ["<T> T", "com.google.common.io.CharSource.readLines(com.google.common.io.LineProcessor<T>)"], ["void", "com.google.common.io.CharSource.forEachLine(java.util.function.Consumer<? super java.lang.String>)"], ["boolean", "com.google.common.io.CharSource.isEmpty()"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.concat(java.lang.Iterable<? extends com.google.common.io.CharSource>)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.concat(java.util.Iterator<? extends com.google.common.io.CharSource>)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.concat(com.google.common.io.CharSource...)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.wrap(java.lang.CharSequence)"], ["com.google.common.io.CharSource", "com.google.common.io.CharSource.empty()"], ["void", "com.google.common.io.CharStreams$NullWriter.write(int)"], ["void", "com.google.common.io.CharStreams$NullWriter.write(char[])"], ["void", "com.google.common.io.CharStreams$NullWriter.write(char[], int, int)"], ["void", "com.google.common.io.CharStreams$NullWriter.write(java.lang.String)"], ["void", "com.google.common.io.CharStreams$NullWriter.write(java.lang.String, int, int)"], ["java.io.Writer", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)"], ["java.io.Writer", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)"], ["java.io.Writer", "com.google.common.io.CharStreams$NullWriter.append(char)"], ["void", "com.google.common.io.CharStreams$NullWriter.flush()"], ["void", "com.google.common.io.CharStreams$NullWriter.close()"], ["java.lang.String", "com.google.common.io.CharStreams$NullWriter.toString()"], ["java.lang.Appendable", "com.google.common.io.CharStreams$NullWriter.append(char)"], ["java.lang.Appendable", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence, int, int)"], ["java.lang.Appendable", "com.google.common.io.CharStreams$NullWriter.append(java.lang.CharSequence)"], ["long", "com.google.common.io.CharStreams.copy(java.lang.Readable, java.lang.Appendable)"], ["java.lang.String", "com.google.common.io.CharStreams.toString(java.lang.Readable)"], ["<T> T", "com.google.common.io.CharStreams.readLines(java.lang.Readable, com.google.common.io.LineProcessor<T>)"], ["long", "com.google.common.io.CharStreams.exhaust(java.lang.Readable)"], ["void", "com.google.common.io.CharStreams.skipFully(java.io.Reader, long)"], ["java.io.Writer", "com.google.common.io.CharStreams.nullWriter()"], ["java.io.Writer", "com.google.common.io.CharStreams.asWriter(java.lang.Appendable)"], ["void", "com.google.common.io.Closeables.close(java.io.Closeable, boolean)"], ["void", "com.google.common.io.Closeables.closeQuietly(java.io.InputStream)"], ["void", "com.google.common.io.Closeables.closeQuietly(java.io.Reader)"], ["void", "com.google.common.io.Closer$LoggingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["void", "com.google.common.io.Closer$SuppressingSuppressor.suppress(java.io.Closeable, java.lang.Throwable, java.lang.Throwable)"], ["com.google.common.io.Closer", "com.google.common.io.Closer.create()"], ["<C extends java.io.Closeable> C", "com.google.common.io.Closer.register(C)"], ["java.lang.RuntimeException", "com.google.common.io.Closer.rethrow(java.lang.Throwable)"], ["<X extends java.lang.Exception> java.lang.RuntimeException", "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X>)"], ["<X1 extends java.lang.Exception, X2 extends java.lang.Exception> java.lang.RuntimeException", "com.google.common.io.Closer.rethrow(java.lang.Throwable, java.lang.Class<X1>, java.lang.Class<X2>)"], ["void", "com.google.common.io.Closer.close()"], ["com.google.common.io.CountingInputStream", "com.google.common.io.CountingInputStream(java.io.InputStream)"], ["long", "com.google.common.io.CountingInputStream.getCount()"], ["int", "com.google.common.io.CountingInputStream.read()"], ["int", "com.google.common.io.CountingInputStream.read(byte[], int, int)"], ["long", "com.google.common.io.CountingInputStream.skip(long)"], ["synchronized", "com.google.common.io.CountingInputStream.void mark(int)"], ["synchronized", "com.google.common.io.CountingInputStream.void reset()"], ["com.google.common.io.CountingOutputStream", "com.google.common.io.CountingOutputStream(java.io.OutputStream)"], ["long", "com.google.common.io.CountingOutputStream.getCount()"], ["void", "com.google.common.io.CountingOutputStream.write(byte[], int, int)"], ["void", "com.google.common.io.CountingOutputStream.write(int)"], ["void", "com.google.common.io.CountingOutputStream.close()"], ["java.io.InputStream", "com.google.common.io.FileBackedOutputStream$1.openStream()"], ["java.io.InputStream", "com.google.common.io.FileBackedOutputStream$2.openStream()"], ["com.google.common.io.FileBackedOutputStream", "com.google.common.io.FileBackedOutputStream(int)"], ["com.google.common.io.FileBackedOutputStream", "com.google.common.io.FileBackedOutputStream(int, boolean)"], ["com.google.common.io.ByteSource", "com.google.common.io.FileBackedOutputStream.asByteSource()"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void reset()"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void write(int)"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void write(byte[])"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void write(byte[], int, int)"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void close()"], ["synchronized", "com.google.common.io.FileBackedOutputStream.void flush()"], ["com.google.common.io.FileWriteMode[]", "com.google.common.io.FileWriteMode.values()"], ["com.google.common.io.FileWriteMode", "com.google.common.io.FileWriteMode.valueOf(java.lang.String)"], ["boolean", "com.google.common.io.Files$1.processLine(java.lang.String)"], ["java.lang.Object", "com.google.common.io.Files$1.getResult()"], ["java.lang.String", "com.google.common.io.Files$2.toString()"], ["java.lang.Iterable", "com.google.common.io.Files$2.children(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.io.Files$3.successors(java.lang.Object)"], ["java.io.FileOutputStream", "com.google.common.io.Files$FileByteSink.openStream()"], ["java.lang.String", "com.google.common.io.Files$FileByteSink.toString()"], ["java.io.OutputStream", "com.google.common.io.Files$FileByteSink.openStream()"], ["java.io.FileInputStream", "com.google.common.io.Files$FileByteSource.openStream()"], ["long", "com.google.common.io.Files$FileByteSource.size()"], ["byte[]", "com.google.common.io.Files$FileByteSource.read()"], ["java.lang.String", "com.google.common.io.Files$FileByteSource.toString()"], ["java.io.InputStream", "com.google.common.io.Files$FileByteSource.openStream()"], ["boolean", "com.google.common.io.Files$FilePredicate$1.apply(java.io.File)"], ["java.lang.String", "com.google.common.io.Files$FilePredicate$1.toString()"], ["boolean", "com.google.common.io.Files$FilePredicate$1.apply(java.lang.Object)"], ["boolean", "com.google.common.io.Files$FilePredicate$2.apply(java.io.File)"], ["java.lang.String", "com.google.common.io.Files$FilePredicate$2.toString()"], ["boolean", "com.google.common.io.Files$FilePredicate$2.apply(java.lang.Object)"], ["com.google.common.io.Files$FilePredicate[]", "com.google.common.io.Files$FilePredicate.values()"], ["com.google.common.io.Files$FilePredicate", "com.google.common.io.Files$FilePredicate.valueOf(java.lang.String)"], ["java.io.BufferedReader", "com.google.common.io.Files.newReader(java.io.File, java.nio.charset.Charset)"], ["java.io.BufferedWriter", "com.google.common.io.Files.newWriter(java.io.File, java.nio.charset.Charset)"], ["com.google.common.io.ByteSource", "com.google.common.io.Files.asByteSource(java.io.File)"], ["com.google.common.io.ByteSink", "com.google.common.io.Files.asByteSink(java.io.File, com.google.common.io.FileWriteMode...)"], ["com.google.common.io.CharSource", "com.google.common.io.Files.asCharSource(java.io.File, java.nio.charset.Charset)"], ["com.google.common.io.CharSink", "com.google.common.io.Files.asCharSink(java.io.File, java.nio.charset.Charset, com.google.common.io.FileWriteMode...)"], ["byte[]", "com.google.common.io.Files.toByteArray(java.io.File)"], ["java.lang.String", "com.google.common.io.Files.toString(java.io.File, java.nio.charset.Charset)"], ["void", "com.google.common.io.Files.write(byte[], java.io.File)"], ["void", "com.google.common.io.Files.copy(java.io.File, java.io.OutputStream)"], ["void", "com.google.common.io.Files.copy(java.io.File, java.io.File)"], ["void", "com.google.common.io.Files.write(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)"], ["void", "com.google.common.io.Files.append(java.lang.CharSequence, java.io.File, java.nio.charset.Charset)"], ["void", "com.google.common.io.Files.copy(java.io.File, java.nio.charset.Charset, java.lang.Appendable)"], ["boolean", "com.google.common.io.Files.equal(java.io.File, java.io.File)"], ["java.io.File", "com.google.common.io.Files.createTempDir()"], ["void", "com.google.common.io.Files.touch(java.io.File)"], ["void", "com.google.common.io.Files.createParentDirs(java.io.File)"], ["void", "com.google.common.io.Files.move(java.io.File, java.io.File)"], ["java.lang.String", "com.google.common.io.Files.readFirstLine(java.io.File, java.nio.charset.Charset)"], ["<T> T", "com.google.common.io.Files.readLines(java.io.File, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>)"], ["<T> T", "com.google.common.io.Files.readBytes(java.io.File, com.google.common.io.ByteProcessor<T>)"], ["com.google.common.hash.HashCode", "com.google.common.io.Files.hash(java.io.File, com.google.common.hash.HashFunction)"], ["java.nio.MappedByteBuffer", "com.google.common.io.Files.map(java.io.File)"], ["java.nio.MappedByteBuffer", "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode)"], ["java.nio.MappedByteBuffer", "com.google.common.io.Files.map(java.io.File, java.nio.channels.FileChannel$MapMode, long)"], ["java.lang.String", "com.google.common.io.Files.simplifyPath(java.lang.String)"], ["java.lang.String", "com.google.common.io.Files.getFileExtension(java.lang.String)"], ["java.lang.String", "com.google.common.io.Files.getNameWithoutExtension(java.lang.String)"], ["void", "com.google.common.io.Flushables.flush(java.io.Flushable, boolean)"], ["void", "com.google.common.io.Flushables.flushQuietly(java.io.Flushable)"], ["com.google.common.io.InsecureRecursiveDeleteException", "com.google.common.io.InsecureRecursiveDeleteException(java.lang.String)"], ["com.google.common.io.LineReader", "com.google.common.io.LineReader(java.lang.Readable)"], ["java.lang.String", "com.google.common.io.LineReader.readLine()"], ["com.google.common.io.LittleEndianDataInputStream", "com.google.common.io.LittleEndianDataInputStream(java.io.InputStream)"], ["java.lang.String", "com.google.common.io.LittleEndianDataInputStream.readLine()"], ["void", "com.google.common.io.LittleEndianDataInputStream.readFully(byte[])"], ["void", "com.google.common.io.LittleEndianDataInputStream.readFully(byte[], int, int)"], ["int", "com.google.common.io.LittleEndianDataInputStream.skipBytes(int)"], ["int", "com.google.common.io.LittleEndianDataInputStream.readUnsignedByte()"], ["int", "com.google.common.io.LittleEndianDataInputStream.readUnsignedShort()"], ["int", "com.google.common.io.LittleEndianDataInputStream.readInt()"], ["long", "com.google.common.io.LittleEndianDataInputStream.readLong()"], ["float", "com.google.common.io.LittleEndianDataInputStream.readFloat()"], ["double", "com.google.common.io.LittleEndianDataInputStream.readDouble()"], ["java.lang.String", "com.google.common.io.LittleEndianDataInputStream.readUTF()"], ["short", "com.google.common.io.LittleEndianDataInputStream.readShort()"], ["char", "com.google.common.io.LittleEndianDataInputStream.readChar()"], ["byte", "com.google.common.io.LittleEndianDataInputStream.readByte()"], ["boolean", "com.google.common.io.LittleEndianDataInputStream.readBoolean()"], ["com.google.common.io.LittleEndianDataOutputStream", "com.google.common.io.LittleEndianDataOutputStream(java.io.OutputStream)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.write(byte[], int, int)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeBoolean(boolean)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeByte(int)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeBytes(java.lang.String)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeChar(int)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeChars(java.lang.String)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeDouble(double)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeFloat(float)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeInt(int)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeLong(long)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeShort(int)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.writeUTF(java.lang.String)"], ["void", "com.google.common.io.LittleEndianDataOutputStream.close()"], ["java.lang.Iterable", "com.google.common.io.MoreFiles$1.successors(java.lang.Object)"], ["boolean", "com.google.common.io.MoreFiles$2.apply(java.nio.file.Path)"], ["java.lang.String", "com.google.common.io.MoreFiles$2.toString()"], ["boolean", "com.google.common.io.MoreFiles$2.apply(java.lang.Object)"], ["boolean", "com.google.common.io.MoreFiles$3.apply(java.nio.file.Path)"], ["java.lang.String", "com.google.common.io.MoreFiles$3.toString()"], ["boolean", "com.google.common.io.MoreFiles$3.apply(java.lang.Object)"], ["java.lang.Iterable", "com.google.common.io.MoreFiles$DirectoryTreeTraverser.children(java.lang.Object)"], ["java.io.OutputStream", "com.google.common.io.MoreFiles$PathByteSink.openStream()"], ["java.lang.String", "com.google.common.io.MoreFiles$PathByteSink.toString()"], ["java.io.InputStream", "com.google.common.io.MoreFiles$PathByteSource.openStream()"], ["long", "com.google.common.io.MoreFiles$PathByteSource.size()"], ["byte[]", "com.google.common.io.MoreFiles$PathByteSource.read()"], ["com.google.common.io.CharSource", "com.google.common.io.MoreFiles$PathByteSource.asCharSource(java.nio.charset.Charset)"], ["java.lang.String", "com.google.common.io.MoreFiles$PathByteSource.toString()"], ["com.google.common.io.ByteSource", "com.google.common.io.MoreFiles.asByteSource(java.nio.file.Path, java.nio.file.OpenOption...)"], ["com.google.common.io.ByteSink", "com.google.common.io.MoreFiles.asByteSink(java.nio.file.Path, java.nio.file.OpenOption...)"], ["com.google.common.io.CharSource", "com.google.common.io.MoreFiles.asCharSource(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption...)"], ["com.google.common.io.CharSink", "com.google.common.io.MoreFiles.asCharSink(java.nio.file.Path, java.nio.charset.Charset, java.nio.file.OpenOption...)"], ["boolean", "com.google.common.io.MoreFiles.equal(java.nio.file.Path, java.nio.file.Path)"], ["void", "com.google.common.io.MoreFiles.touch(java.nio.file.Path)"], ["void", "com.google.common.io.MoreFiles.createParentDirectories(java.nio.file.Path, java.nio.file.attribute.FileAttribute<?>...)"], ["java.lang.String", "com.google.common.io.MoreFiles.getFileExtension(java.nio.file.Path)"], ["java.lang.String", "com.google.common.io.MoreFiles.getNameWithoutExtension(java.nio.file.Path)"], ["void", "com.google.common.io.MoreFiles.deleteRecursively(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption...)"], ["void", "com.google.common.io.MoreFiles.deleteDirectoryContents(java.nio.file.Path, com.google.common.io.RecursiveDeleteOption...)"], ["com.google.common.io.MultiInputStream", "com.google.common.io.MultiInputStream(java.util.Iterator<? extends com.google.common.io.ByteSource>)"], ["void", "com.google.common.io.MultiInputStream.close()"], ["int", "com.google.common.io.MultiInputStream.available()"], ["boolean", "com.google.common.io.MultiInputStream.markSupported()"], ["int", "com.google.common.io.MultiInputStream.read()"], ["int", "com.google.common.io.MultiInputStream.read(byte[], int, int)"], ["long", "com.google.common.io.MultiInputStream.skip(long)"], ["int", "com.google.common.io.MultiReader.read(char[], int, int)"], ["long", "com.google.common.io.MultiReader.skip(long)"], ["boolean", "com.google.common.io.MultiReader.ready()"], ["void", "com.google.common.io.MultiReader.close()"], ["com.google.common.io.PatternFilenameFilter", "com.google.common.io.PatternFilenameFilter(java.lang.String)"], ["com.google.common.io.PatternFilenameFilter", "com.google.common.io.PatternFilenameFilter(java.util.regex.Pattern)"], ["boolean", "com.google.common.io.PatternFilenameFilter.accept(java.io.File, java.lang.String)"], ["void", "com.google.common.io.ReaderInputStream.close()"], ["int", "com.google.common.io.ReaderInputStream.read()"], ["int", "com.google.common.io.ReaderInputStream.read(byte[], int, int)"], ["com.google.common.io.RecursiveDeleteOption[]", "com.google.common.io.RecursiveDeleteOption.values()"], ["com.google.common.io.RecursiveDeleteOption", "com.google.common.io.RecursiveDeleteOption.valueOf(java.lang.String)"], ["boolean", "com.google.common.io.Resources$1.processLine(java.lang.String)"], ["java.lang.Object", "com.google.common.io.Resources$1.getResult()"], ["java.io.InputStream", "com.google.common.io.Resources$UrlByteSource.openStream()"], ["java.lang.String", "com.google.common.io.Resources$UrlByteSource.toString()"], ["com.google.common.io.ByteSource", "com.google.common.io.Resources.asByteSource(java.net.URL)"], ["com.google.common.io.CharSource", "com.google.common.io.Resources.asCharSource(java.net.URL, java.nio.charset.Charset)"], ["byte[]", "com.google.common.io.Resources.toByteArray(java.net.URL)"], ["java.lang.String", "com.google.common.io.Resources.toString(java.net.URL, java.nio.charset.Charset)"], ["<T> T", "com.google.common.io.Resources.readLines(java.net.URL, java.nio.charset.Charset, com.google.common.io.LineProcessor<T>)"], ["void", "com.google.common.io.Resources.copy(java.net.URL, java.io.OutputStream)"], ["java.net.URL", "com.google.common.io.Resources.getResource(java.lang.String)"], ["java.net.URL", "com.google.common.io.Resources.getResource(java.lang.Class<?>, java.lang.String)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.ceilingPowerOfTwo(java.math.BigInteger)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.floorPowerOfTwo(java.math.BigInteger)"], ["boolean", "com.google.common.math.BigIntegerMath.isPowerOfTwo(java.math.BigInteger)"], ["int", "com.google.common.math.BigIntegerMath.log2(java.math.BigInteger, java.math.RoundingMode)"], ["int", "com.google.common.math.BigIntegerMath.log10(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.sqrt(java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.divide(java.math.BigInteger, java.math.BigInteger, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.factorial(int)"], ["java.math.BigInteger", "com.google.common.math.BigIntegerMath.binomial(int, int)"], ["int", "com.google.common.math.DoubleMath.roundToInt(double, java.math.RoundingMode)"], ["long", "com.google.common.math.DoubleMath.roundToLong(double, java.math.RoundingMode)"], ["java.math.BigInteger", "com.google.common.math.DoubleMath.roundToBigInteger(double, java.math.RoundingMode)"], ["boolean", "com.google.common.math.DoubleMath.isPowerOfTwo(double)"], ["double", "com.google.common.math.DoubleMath.log2(double)"], ["int", "com.google.common.math.DoubleMath.log2(double, java.math.RoundingMode)"], ["boolean", "com.google.common.math.DoubleMath.isMathematicalInteger(double)"], ["double", "com.google.common.math.DoubleMath.factorial(int)"], ["boolean", "com.google.common.math.DoubleMath.fuzzyEquals(double, double, double)"], ["int", "com.google.common.math.DoubleMath.fuzzyCompare(double, double, double)"], ["double", "com.google.common.math.DoubleMath.mean(double...)"], ["double", "com.google.common.math.DoubleMath.mean(int...)"], ["double", "com.google.common.math.DoubleMath.mean(long...)"], ["double", "com.google.common.math.DoubleMath.mean(java.lang.Iterable<? extends java.lang.Number>)"], ["double", "com.google.common.math.DoubleMath.mean(java.util.Iterator<? extends java.lang.Number>)"], ["int", "com.google.common.math.IntMath.ceilingPowerOfTwo(int)"], ["int", "com.google.common.math.IntMath.floorPowerOfTwo(int)"], ["boolean", "com.google.common.math.IntMath.isPowerOfTwo(int)"], ["int", "com.google.common.math.IntMath.log2(int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.log10(int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.pow(int, int)"], ["int", "com.google.common.math.IntMath.sqrt(int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.divide(int, int, java.math.RoundingMode)"], ["int", "com.google.common.math.IntMath.mod(int, int)"], ["int", "com.google.common.math.IntMath.gcd(int, int)"], ["int", "com.google.common.math.IntMath.checkedAdd(int, int)"], ["int", "com.google.common.math.IntMath.checkedSubtract(int, int)"], ["int", "com.google.common.math.IntMath.checkedMultiply(int, int)"], ["int", "com.google.common.math.IntMath.checkedPow(int, int)"], ["int", "com.google.common.math.IntMath.saturatedAdd(int, int)"], ["int", "com.google.common.math.IntMath.saturatedSubtract(int, int)"], ["int", "com.google.common.math.IntMath.saturatedMultiply(int, int)"], ["int", "com.google.common.math.IntMath.saturatedPow(int, int)"], ["int", "com.google.common.math.IntMath.factorial(int)"], ["int", "com.google.common.math.IntMath.binomial(int, int)"], ["int", "com.google.common.math.IntMath.mean(int, int)"], ["boolean", "com.google.common.math.IntMath.isPrime(int)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation$LinearTransformationBuilder.and(double, double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation$LinearTransformationBuilder.withSlope(double)"], ["boolean", "com.google.common.math.LinearTransformation$NaNLinearTransformation.isVertical()"], ["boolean", "com.google.common.math.LinearTransformation$NaNLinearTransformation.isHorizontal()"], ["double", "com.google.common.math.LinearTransformation$NaNLinearTransformation.slope()"], ["double", "com.google.common.math.LinearTransformation$NaNLinearTransformation.transform(double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation$NaNLinearTransformation.inverse()"], ["java.lang.String", "com.google.common.math.LinearTransformation$NaNLinearTransformation.toString()"], ["boolean", "com.google.common.math.LinearTransformation$RegularLinearTransformation.isVertical()"], ["boolean", "com.google.common.math.LinearTransformation$RegularLinearTransformation.isHorizontal()"], ["double", "com.google.common.math.LinearTransformation$RegularLinearTransformation.slope()"], ["double", "com.google.common.math.LinearTransformation$RegularLinearTransformation.transform(double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation$RegularLinearTransformation.inverse()"], ["java.lang.String", "com.google.common.math.LinearTransformation$RegularLinearTransformation.toString()"], ["boolean", "com.google.common.math.LinearTransformation$VerticalLinearTransformation.isVertical()"], ["boolean", "com.google.common.math.LinearTransformation$VerticalLinearTransformation.isHorizontal()"], ["double", "com.google.common.math.LinearTransformation$VerticalLinearTransformation.slope()"], ["double", "com.google.common.math.LinearTransformation$VerticalLinearTransformation.transform(double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation$VerticalLinearTransformation.inverse()"], ["java.lang.String", "com.google.common.math.LinearTransformation$VerticalLinearTransformation.toString()"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation()"], ["com.google.common.math.LinearTransformation$LinearTransformationBuilder", "com.google.common.math.LinearTransformation.mapping(double, double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation.vertical(double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation.horizontal(double)"], ["com.google.common.math.LinearTransformation", "com.google.common.math.LinearTransformation.forNaN()"], ["com.google.common.math.LongMath$MillerRabinTester[]", "com.google.common.math.LongMath$MillerRabinTester.values()"], ["com.google.common.math.LongMath$MillerRabinTester", "com.google.common.math.LongMath$MillerRabinTester.valueOf(java.lang.String)"], ["long", "com.google.common.math.LongMath.ceilingPowerOfTwo(long)"], ["long", "com.google.common.math.LongMath.floorPowerOfTwo(long)"], ["boolean", "com.google.common.math.LongMath.isPowerOfTwo(long)"], ["int", "com.google.common.math.LongMath.log2(long, java.math.RoundingMode)"], ["int", "com.google.common.math.LongMath.log10(long, java.math.RoundingMode)"], ["long", "com.google.common.math.LongMath.pow(long, int)"], ["long", "com.google.common.math.LongMath.sqrt(long, java.math.RoundingMode)"], ["long", "com.google.common.math.LongMath.divide(long, long, java.math.RoundingMode)"], ["int", "com.google.common.math.LongMath.mod(long, int)"], ["long", "com.google.common.math.LongMath.mod(long, long)"], ["long", "com.google.common.math.LongMath.gcd(long, long)"], ["long", "com.google.common.math.LongMath.checkedAdd(long, long)"], ["long", "com.google.common.math.LongMath.checkedSubtract(long, long)"], ["long", "com.google.common.math.LongMath.checkedMultiply(long, long)"], ["long", "com.google.common.math.LongMath.checkedPow(long, int)"], ["long", "com.google.common.math.LongMath.saturatedAdd(long, long)"], ["long", "com.google.common.math.LongMath.saturatedSubtract(long, long)"], ["long", "com.google.common.math.LongMath.saturatedMultiply(long, long)"], ["long", "com.google.common.math.LongMath.saturatedPow(long, int)"], ["long", "com.google.common.math.LongMath.factorial(int)"], ["long", "com.google.common.math.LongMath.binomial(int, int)"], ["long", "com.google.common.math.LongMath.mean(long, long)"], ["boolean", "com.google.common.math.LongMath.isPrime(long)"], ["long", "com.google.common.math.PairedStats.count()"], ["com.google.common.math.Stats", "com.google.common.math.PairedStats.xStats()"], ["com.google.common.math.Stats", "com.google.common.math.PairedStats.yStats()"], ["double", "com.google.common.math.PairedStats.populationCovariance()"], ["double", "com.google.common.math.PairedStats.sampleCovariance()"], ["double", "com.google.common.math.PairedStats.pearsonsCorrelationCoefficient()"], ["com.google.common.math.LinearTransformation", "com.google.common.math.PairedStats.leastSquaresFit()"], ["boolean", "com.google.common.math.PairedStats.equals(java.lang.Object)"], ["int", "com.google.common.math.PairedStats.hashCode()"], ["java.lang.String", "com.google.common.math.PairedStats.toString()"], ["byte[]", "com.google.common.math.PairedStats.toByteArray()"], ["com.google.common.math.PairedStats", "com.google.common.math.PairedStats.fromByteArray(byte[])"], ["com.google.common.math.PairedStatsAccumulator", "com.google.common.math.PairedStatsAccumulator()"], ["void", "com.google.common.math.PairedStatsAccumulator.add(double, double)"], ["void", "com.google.common.math.PairedStatsAccumulator.addAll(com.google.common.math.PairedStats)"], ["com.google.common.math.PairedStats", "com.google.common.math.PairedStatsAccumulator.snapshot()"], ["long", "com.google.common.math.PairedStatsAccumulator.count()"], ["com.google.common.math.Stats", "com.google.common.math.PairedStatsAccumulator.xStats()"], ["com.google.common.math.Stats", "com.google.common.math.PairedStatsAccumulator.yStats()"], ["double", "com.google.common.math.PairedStatsAccumulator.populationCovariance()"], ["double", "com.google.common.math.PairedStatsAccumulator.sampleCovariance()"], ["double", "com.google.common.math.PairedStatsAccumulator.pearsonsCorrelationCoefficient()"], ["com.google.common.math.LinearTransformation", "com.google.common.math.PairedStatsAccumulator.leastSquaresFit()"], ["com.google.common.math.Quantiles$ScaleAndIndex", "com.google.common.math.Quantiles$Scale.index(int)"], ["com.google.common.math.Quantiles$ScaleAndIndexes", "com.google.common.math.Quantiles$Scale.indexes(int...)"], ["com.google.common.math.Quantiles$ScaleAndIndexes", "com.google.common.math.Quantiles$Scale.indexes(java.util.Collection<java.lang.Integer>)"], ["double", "com.google.common.math.Quantiles$ScaleAndIndex.compute(java.util.Collection<? extends java.lang.Number>)"], ["double", "com.google.common.math.Quantiles$ScaleAndIndex.compute(double...)"], ["double", "com.google.common.math.Quantiles$ScaleAndIndex.compute(long...)"], ["double", "com.google.common.math.Quantiles$ScaleAndIndex.compute(int...)"], ["double", "com.google.common.math.Quantiles$ScaleAndIndex.computeInPlace(double...)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "com.google.common.math.Quantiles$ScaleAndIndexes.compute(java.util.Collection<? extends java.lang.Number>)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "com.google.common.math.Quantiles$ScaleAndIndexes.compute(double...)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "com.google.common.math.Quantiles$ScaleAndIndexes.compute(long...)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "com.google.common.math.Quantiles$ScaleAndIndexes.compute(int...)"], ["java.util.Map<java.lang.Integer, java.lang.Double>", "com.google.common.math.Quantiles$ScaleAndIndexes.computeInPlace(double...)"], ["com.google.common.math.Quantiles", "com.google.common.math.Quantiles()"], ["com.google.common.math.Quantiles$ScaleAndIndex", "com.google.common.math.Quantiles.median()"], ["com.google.common.math.Quantiles$Scale", "com.google.common.math.Quantiles.quartiles()"], ["com.google.common.math.Quantiles$Scale", "com.google.common.math.Quantiles.percentiles()"], ["com.google.common.math.Quantiles$Scale", "com.google.common.math.Quantiles.scale(int)"], ["com.google.common.math.Stats", "com.google.common.math.Stats.of(java.lang.Iterable<? extends java.lang.Number>)"], ["com.google.common.math.Stats", "com.google.common.math.Stats.of(java.util.Iterator<? extends java.lang.Number>)"], ["com.google.common.math.Stats", "com.google.common.math.Stats.of(double...)"], ["com.google.common.math.Stats", "com.google.common.math.Stats.of(int...)"], ["com.google.common.math.Stats", "com.google.common.math.Stats.of(long...)"], ["long", "com.google.common.math.Stats.count()"], ["double", "com.google.common.math.Stats.mean()"], ["double", "com.google.common.math.Stats.sum()"], ["double", "com.google.common.math.Stats.populationVariance()"], ["double", "com.google.common.math.Stats.populationStandardDeviation()"], ["double", "com.google.common.math.Stats.sampleVariance()"], ["double", "com.google.common.math.Stats.sampleStandardDeviation()"], ["double", "com.google.common.math.Stats.min()"], ["double", "com.google.common.math.Stats.max()"], ["boolean", "com.google.common.math.Stats.equals(java.lang.Object)"], ["int", "com.google.common.math.Stats.hashCode()"], ["java.lang.String", "com.google.common.math.Stats.toString()"], ["double", "com.google.common.math.Stats.meanOf(java.lang.Iterable<? extends java.lang.Number>)"], ["double", "com.google.common.math.Stats.meanOf(java.util.Iterator<? extends java.lang.Number>)"], ["double", "com.google.common.math.Stats.meanOf(double...)"], ["double", "com.google.common.math.Stats.meanOf(int...)"], ["double", "com.google.common.math.Stats.meanOf(long...)"], ["byte[]", "com.google.common.math.Stats.toByteArray()"], ["com.google.common.math.Stats", "com.google.common.math.Stats.fromByteArray(byte[])"], ["com.google.common.math.StatsAccumulator", "com.google.common.math.StatsAccumulator()"], ["void", "com.google.common.math.StatsAccumulator.add(double)"], ["void", "com.google.common.math.StatsAccumulator.addAll(java.lang.Iterable<? extends java.lang.Number>)"], ["void", "com.google.common.math.StatsAccumulator.addAll(java.util.Iterator<? extends java.lang.Number>)"], ["void", "com.google.common.math.StatsAccumulator.addAll(double...)"], ["void", "com.google.common.math.StatsAccumulator.addAll(int...)"], ["void", "com.google.common.math.StatsAccumulator.addAll(long...)"], ["void", "com.google.common.math.StatsAccumulator.addAll(com.google.common.math.Stats)"], ["com.google.common.math.Stats", "com.google.common.math.StatsAccumulator.snapshot()"], ["long", "com.google.common.math.StatsAccumulator.count()"], ["double", "com.google.common.math.StatsAccumulator.mean()"], ["double", "com.google.common.math.StatsAccumulator.sum()"], ["double", "com.google.common.math.StatsAccumulator.populationVariance()"], ["double", "com.google.common.math.StatsAccumulator.populationStandardDeviation()"], ["double", "com.google.common.math.StatsAccumulator.sampleVariance()"], ["double", "com.google.common.math.StatsAccumulator.sampleStandardDeviation()"], ["double", "com.google.common.math.StatsAccumulator.min()"], ["double", "com.google.common.math.StatsAccumulator.max()"], ["java.lang.String", "com.google.common.net.HostAndPort.getHost()"], ["boolean", "com.google.common.net.HostAndPort.hasPort()"], ["int", "com.google.common.net.HostAndPort.getPort()"], ["int", "com.google.common.net.HostAndPort.getPortOrDefault(int)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.fromParts(java.lang.String, int)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.fromHost(java.lang.String)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.fromString(java.lang.String)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.withDefaultPort(int)"], ["com.google.common.net.HostAndPort", "com.google.common.net.HostAndPort.requireBracketsForIPv6()"], ["boolean", "com.google.common.net.HostAndPort.equals(java.lang.Object)"], ["int", "com.google.common.net.HostAndPort.hashCode()"], ["java.lang.String", "com.google.common.net.HostAndPort.toString()"], ["com.google.common.net.HostSpecifier", "com.google.common.net.HostSpecifier.fromValid(java.lang.String)"], ["com.google.common.net.HostSpecifier", "com.google.common.net.HostSpecifier.from(java.lang.String)"], ["boolean", "com.google.common.net.HostSpecifier.isValid(java.lang.String)"], ["boolean", "com.google.common.net.HostSpecifier.equals(java.lang.Object)"], ["int", "com.google.common.net.HostSpecifier.hashCode()"], ["java.lang.String", "com.google.common.net.HostSpecifier.toString()"], ["com.google.common.net.InetAddresses$TeredoInfo", "com.google.common.net.InetAddresses$TeredoInfo(java.net.Inet4Address, java.net.Inet4Address, int, int)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses$TeredoInfo.getServer()"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses$TeredoInfo.getClient()"], ["int", "com.google.common.net.InetAddresses$TeredoInfo.getPort()"], ["int", "com.google.common.net.InetAddresses$TeredoInfo.getFlags()"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.forString(java.lang.String)"], ["boolean", "com.google.common.net.InetAddresses.isInetAddress(java.lang.String)"], ["java.lang.String", "com.google.common.net.InetAddresses.toAddrString(java.net.InetAddress)"], ["java.lang.String", "com.google.common.net.InetAddresses.toUriString(java.net.InetAddress)"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.forUriString(java.lang.String)"], ["boolean", "com.google.common.net.InetAddresses.isUriInetAddress(java.lang.String)"], ["boolean", "com.google.common.net.InetAddresses.isCompatIPv4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getCompatIPv4Address(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.is6to4Address(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.get6to4IPv4Address(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.isTeredoAddress(java.net.Inet6Address)"], ["com.google.common.net.InetAddresses$TeredoInfo", "com.google.common.net.InetAddresses.getTeredoInfo(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.isIsatapAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getIsatapIPv4Address(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getEmbeddedIPv4ClientAddress(java.net.Inet6Address)"], ["boolean", "com.google.common.net.InetAddresses.isMappedIPv4Address(java.lang.String)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.getCoercedIPv4Address(java.net.InetAddress)"], ["int", "com.google.common.net.InetAddresses.coerceToInteger(java.net.InetAddress)"], ["java.net.Inet4Address", "com.google.common.net.InetAddresses.fromInteger(int)"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.fromLittleEndianByteArray(byte[])"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.decrement(java.net.InetAddress)"], ["java.net.InetAddress", "com.google.common.net.InetAddresses.increment(java.net.InetAddress)"], ["boolean", "com.google.common.net.InetAddresses.isMaximum(java.net.InetAddress)"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.from(java.lang.String)"], ["boolean", "com.google.common.net.InternetDomainName.isPublicSuffix()"], ["boolean", "com.google.common.net.InternetDomainName.hasPublicSuffix()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.publicSuffix()"], ["boolean", "com.google.common.net.InternetDomainName.isUnderPublicSuffix()"], ["boolean", "com.google.common.net.InternetDomainName.isTopPrivateDomain()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.topPrivateDomain()"], ["boolean", "com.google.common.net.InternetDomainName.isRegistrySuffix()"], ["boolean", "com.google.common.net.InternetDomainName.hasRegistrySuffix()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.registrySuffix()"], ["boolean", "com.google.common.net.InternetDomainName.isUnderRegistrySuffix()"], ["boolean", "com.google.common.net.InternetDomainName.isTopDomainUnderRegistrySuffix()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.topDomainUnderRegistrySuffix()"], ["boolean", "com.google.common.net.InternetDomainName.hasParent()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.parent()"], ["com.google.common.net.InternetDomainName", "com.google.common.net.InternetDomainName.child(java.lang.String)"], ["boolean", "com.google.common.net.InternetDomainName.isValid(java.lang.String)"], ["java.lang.String", "com.google.common.net.InternetDomainName.toString()"], ["boolean", "com.google.common.net.InternetDomainName.equals(java.lang.Object)"], ["int", "com.google.common.net.InternetDomainName.hashCode()"], ["java.lang.Object", "com.google.common.net.MediaType$1.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.net.MediaType$2.apply(java.lang.String)"], ["java.lang.Object", "com.google.common.net.MediaType$2.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.net.MediaType.type()"], ["java.lang.String", "com.google.common.net.MediaType.subtype()"], ["com.google.common.collect.ImmutableListMultimap<java.lang.String, java.lang.String>", "com.google.common.net.MediaType.parameters()"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withoutParameters()"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withParameters(com.google.common.collect.Multimap<java.lang.String, java.lang.String>)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withParameter(java.lang.String, java.lang.String)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.withCharset(java.nio.charset.Charset)"], ["boolean", "com.google.common.net.MediaType.hasWildcard()"], ["boolean", "com.google.common.net.MediaType.is(com.google.common.net.MediaType)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.create(java.lang.String, java.lang.String)"], ["com.google.common.net.MediaType", "com.google.common.net.MediaType.parse(java.lang.String)"], ["boolean", "com.google.common.net.MediaType.equals(java.lang.Object)"], ["int", "com.google.common.net.MediaType.hashCode()"], ["java.lang.String", "com.google.common.net.MediaType.toString()"], ["com.google.common.net.PercentEscaper", "com.google.common.net.PercentEscaper(java.lang.String, boolean)"], ["java.lang.String", "com.google.common.net.PercentEscaper.escape(java.lang.String)"], ["com.google.common.escape.Escaper", "com.google.common.net.UrlEscapers.urlFormParameterEscaper()"], ["com.google.common.escape.Escaper", "com.google.common.net.UrlEscapers.urlPathSegmentEscaper()"], ["com.google.common.escape.Escaper", "com.google.common.net.UrlEscapers.urlFragmentEscaper()"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.size()"], ["boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.isEmpty()"], ["java.lang.Boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.get(int)"], ["boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Boolean)"], ["boolean", "com.google.common.primitives.Booleans$BooleanArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Booleans$BooleanArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Booleans$BooleanArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Booleans$BooleanArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Booleans$BooleanArrayAsList.get(int)"], ["com.google.common.primitives.Booleans$BooleanComparator[]", "com.google.common.primitives.Booleans$BooleanComparator.values()"], ["com.google.common.primitives.Booleans$BooleanComparator", "com.google.common.primitives.Booleans$BooleanComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Booleans$BooleanComparator.compare(java.lang.Boolean, java.lang.Boolean)"], ["java.lang.String", "com.google.common.primitives.Booleans$BooleanComparator.toString()"], ["int", "com.google.common.primitives.Booleans$BooleanComparator.compare(java.lang.Object, java.lang.Object)"], ["com.google.common.primitives.Booleans$LexicographicalComparator[]", "com.google.common.primitives.Booleans$LexicographicalComparator.values()"], ["com.google.common.primitives.Booleans$LexicographicalComparator", "com.google.common.primitives.Booleans$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Booleans$LexicographicalComparator.compare(boolean[], boolean[])"], ["java.lang.String", "com.google.common.primitives.Booleans$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Booleans$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Booleans.hashCode(boolean)"], ["int", "com.google.common.primitives.Booleans.compare(boolean, boolean)"], ["boolean", "com.google.common.primitives.Booleans.contains(boolean[], boolean)"], ["int", "com.google.common.primitives.Booleans.indexOf(boolean[], boolean)"], ["int", "com.google.common.primitives.Booleans.indexOf(boolean[], boolean[])"], ["int", "com.google.common.primitives.Booleans.lastIndexOf(boolean[], boolean)"], ["boolean[]", "com.google.common.primitives.Booleans.concat(boolean[]...)"], ["boolean[]", "com.google.common.primitives.Booleans.ensureCapacity(boolean[], int, int)"], ["java.lang.String", "com.google.common.primitives.Booleans.join(java.lang.String, boolean...)"], ["boolean[]", "com.google.common.primitives.Booleans.toArray(java.util.Collection<java.lang.Boolean>)"], ["int", "com.google.common.primitives.Booleans.countTrue(boolean...)"], ["void", "com.google.common.primitives.Booleans.reverse(boolean[])"], ["void", "com.google.common.primitives.Booleans.reverse(boolean[], int, int)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.size()"], ["boolean", "com.google.common.primitives.Bytes$ByteArrayAsList.isEmpty()"], ["java.lang.Byte", "com.google.common.primitives.Bytes$ByteArrayAsList.get(int)"], ["boolean", "com.google.common.primitives.Bytes$ByteArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Byte", "com.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Byte)"], ["boolean", "com.google.common.primitives.Bytes$ByteArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Bytes$ByteArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Bytes$ByteArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Bytes$ByteArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Bytes$ByteArrayAsList.get(int)"], ["int", "com.google.common.primitives.Bytes.hashCode(byte)"], ["boolean", "com.google.common.primitives.Bytes.contains(byte[], byte)"], ["int", "com.google.common.primitives.Bytes.indexOf(byte[], byte)"], ["int", "com.google.common.primitives.Bytes.indexOf(byte[], byte[])"], ["int", "com.google.common.primitives.Bytes.lastIndexOf(byte[], byte)"], ["byte[]", "com.google.common.primitives.Bytes.concat(byte[]...)"], ["byte[]", "com.google.common.primitives.Bytes.ensureCapacity(byte[], int, int)"], ["byte[]", "com.google.common.primitives.Bytes.toArray(java.util.Collection<? extends java.lang.Number>)"], ["void", "com.google.common.primitives.Bytes.reverse(byte[])"], ["void", "com.google.common.primitives.Bytes.reverse(byte[], int, int)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.size()"], ["boolean", "com.google.common.primitives.Chars$CharArrayAsList.isEmpty()"], ["java.lang.Character", "com.google.common.primitives.Chars$CharArrayAsList.get(int)"], ["boolean", "com.google.common.primitives.Chars$CharArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Character", "com.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Character)"], ["boolean", "com.google.common.primitives.Chars$CharArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Chars$CharArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Chars$CharArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Chars$CharArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Chars$CharArrayAsList.get(int)"], ["com.google.common.primitives.Chars$LexicographicalComparator[]", "com.google.common.primitives.Chars$LexicographicalComparator.values()"], ["com.google.common.primitives.Chars$LexicographicalComparator", "com.google.common.primitives.Chars$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Chars$LexicographicalComparator.compare(char[], char[])"], ["java.lang.String", "com.google.common.primitives.Chars$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Chars$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Chars.hashCode(char)"], ["char", "com.google.common.primitives.Chars.checkedCast(long)"], ["char", "com.google.common.primitives.Chars.saturatedCast(long)"], ["int", "com.google.common.primitives.Chars.compare(char, char)"], ["boolean", "com.google.common.primitives.Chars.contains(char[], char)"], ["int", "com.google.common.primitives.Chars.indexOf(char[], char)"], ["int", "com.google.common.primitives.Chars.indexOf(char[], char[])"], ["int", "com.google.common.primitives.Chars.lastIndexOf(char[], char)"], ["char", "com.google.common.primitives.Chars.min(char...)"], ["char", "com.google.common.primitives.Chars.max(char...)"], ["char", "com.google.common.primitives.Chars.constrainToRange(char, char, char)"], ["char[]", "com.google.common.primitives.Chars.concat(char[]...)"], ["byte[]", "com.google.common.primitives.Chars.toByteArray(char)"], ["char", "com.google.common.primitives.Chars.fromByteArray(byte[])"], ["char", "com.google.common.primitives.Chars.fromBytes(byte, byte)"], ["char[]", "com.google.common.primitives.Chars.ensureCapacity(char[], int, int)"], ["java.lang.String", "com.google.common.primitives.Chars.join(java.lang.String, char...)"], ["char[]", "com.google.common.primitives.Chars.toArray(java.util.Collection<java.lang.Character>)"], ["void", "com.google.common.primitives.Chars.sortDescending(char[])"], ["void", "com.google.common.primitives.Chars.sortDescending(char[], int, int)"], ["void", "com.google.common.primitives.Chars.reverse(char[])"], ["void", "com.google.common.primitives.Chars.reverse(char[], int, int)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.size()"], ["boolean", "com.google.common.primitives.Doubles$DoubleArrayAsList.isEmpty()"], ["java.lang.Double", "com.google.common.primitives.Doubles$DoubleArrayAsList.get(int)"], ["java.util.Spliterator$OfDouble", "com.google.common.primitives.Doubles$DoubleArrayAsList.spliterator()"], ["boolean", "com.google.common.primitives.Doubles$DoubleArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Double", "com.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Double)"], ["boolean", "com.google.common.primitives.Doubles$DoubleArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Doubles$DoubleArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Doubles$DoubleArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Doubles$DoubleArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Doubles$DoubleArrayAsList.get(int)"], ["java.util.Spliterator", "com.google.common.primitives.Doubles$DoubleArrayAsList.spliterator()"], ["java.lang.String", "com.google.common.primitives.Doubles$DoubleConverter.toString()"], ["com.google.common.primitives.Doubles$LexicographicalComparator[]", "com.google.common.primitives.Doubles$LexicographicalComparator.values()"], ["com.google.common.primitives.Doubles$LexicographicalComparator", "com.google.common.primitives.Doubles$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Doubles$LexicographicalComparator.compare(double[], double[])"], ["java.lang.String", "com.google.common.primitives.Doubles$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Doubles$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Doubles.hashCode(double)"], ["int", "com.google.common.primitives.Doubles.compare(double, double)"], ["boolean", "com.google.common.primitives.Doubles.isFinite(double)"], ["boolean", "com.google.common.primitives.Doubles.contains(double[], double)"], ["int", "com.google.common.primitives.Doubles.indexOf(double[], double)"], ["int", "com.google.common.primitives.Doubles.indexOf(double[], double[])"], ["int", "com.google.common.primitives.Doubles.lastIndexOf(double[], double)"], ["double", "com.google.common.primitives.Doubles.min(double...)"], ["double", "com.google.common.primitives.Doubles.max(double...)"], ["double", "com.google.common.primitives.Doubles.constrainToRange(double, double, double)"], ["double[]", "com.google.common.primitives.Doubles.concat(double[]...)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Double>", "com.google.common.primitives.Doubles.stringConverter()"], ["double[]", "com.google.common.primitives.Doubles.ensureCapacity(double[], int, int)"], ["java.lang.String", "com.google.common.primitives.Doubles.join(java.lang.String, double...)"], ["void", "com.google.common.primitives.Doubles.sortDescending(double[])"], ["void", "com.google.common.primitives.Doubles.sortDescending(double[], int, int)"], ["void", "com.google.common.primitives.Doubles.reverse(double[])"], ["void", "com.google.common.primitives.Doubles.reverse(double[], int, int)"], ["double[]", "com.google.common.primitives.Doubles.toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.lang.Double", "com.google.common.primitives.Doubles.tryParse(java.lang.String)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.size()"], ["boolean", "com.google.common.primitives.Floats$FloatArrayAsList.isEmpty()"], ["java.lang.Float", "com.google.common.primitives.Floats$FloatArrayAsList.get(int)"], ["boolean", "com.google.common.primitives.Floats$FloatArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Float", "com.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Float)"], ["boolean", "com.google.common.primitives.Floats$FloatArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Floats$FloatArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Floats$FloatArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Floats$FloatArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Floats$FloatArrayAsList.get(int)"], ["java.lang.String", "com.google.common.primitives.Floats$FloatConverter.toString()"], ["com.google.common.primitives.Floats$LexicographicalComparator[]", "com.google.common.primitives.Floats$LexicographicalComparator.values()"], ["com.google.common.primitives.Floats$LexicographicalComparator", "com.google.common.primitives.Floats$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Floats$LexicographicalComparator.compare(float[], float[])"], ["java.lang.String", "com.google.common.primitives.Floats$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Floats$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Floats.hashCode(float)"], ["int", "com.google.common.primitives.Floats.compare(float, float)"], ["boolean", "com.google.common.primitives.Floats.isFinite(float)"], ["boolean", "com.google.common.primitives.Floats.contains(float[], float)"], ["int", "com.google.common.primitives.Floats.indexOf(float[], float)"], ["int", "com.google.common.primitives.Floats.indexOf(float[], float[])"], ["int", "com.google.common.primitives.Floats.lastIndexOf(float[], float)"], ["float", "com.google.common.primitives.Floats.min(float...)"], ["float", "com.google.common.primitives.Floats.max(float...)"], ["float", "com.google.common.primitives.Floats.constrainToRange(float, float, float)"], ["float[]", "com.google.common.primitives.Floats.concat(float[]...)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Float>", "com.google.common.primitives.Floats.stringConverter()"], ["float[]", "com.google.common.primitives.Floats.ensureCapacity(float[], int, int)"], ["java.lang.String", "com.google.common.primitives.Floats.join(java.lang.String, float...)"], ["void", "com.google.common.primitives.Floats.sortDescending(float[])"], ["void", "com.google.common.primitives.Floats.sortDescending(float[], int, int)"], ["void", "com.google.common.primitives.Floats.reverse(float[])"], ["void", "com.google.common.primitives.Floats.reverse(float[], int, int)"], ["float[]", "com.google.common.primitives.Floats.toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.lang.Float", "com.google.common.primitives.Floats.tryParse(java.lang.String)"], ["int", "com.google.common.primitives.ImmutableDoubleArray$AsList.size()"], ["java.lang.Double", "com.google.common.primitives.ImmutableDoubleArray$AsList.get(int)"], ["boolean", "com.google.common.primitives.ImmutableDoubleArray$AsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableDoubleArray$AsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableDoubleArray$AsList.lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.primitives.ImmutableDoubleArray$AsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableDoubleArray$AsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.ImmutableDoubleArray$AsList.toString()"], ["java.lang.Object", "com.google.common.primitives.ImmutableDoubleArray$AsList.get(int)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray$Builder.add(double)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray$Builder.addAll(double[])"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray$Builder.addAll(java.lang.Iterable<java.lang.Double>)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray$Builder.addAll(java.util.Collection<java.lang.Double>)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray$Builder.addAll(java.util.stream.DoubleStream)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray$Builder.addAll(com.google.common.primitives.ImmutableDoubleArray)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray$Builder.build()"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of()"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double, double)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double, double, double)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double, double, double, double)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double, double, double, double, double)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double, double, double, double, double, double)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.of(double, double...)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.copyOf(double[])"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.copyOf(java.util.Collection<java.lang.Double>)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.copyOf(java.lang.Iterable<java.lang.Double>)"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.copyOf(java.util.stream.DoubleStream)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray.builder(int)"], ["com.google.common.primitives.ImmutableDoubleArray$Builder", "com.google.common.primitives.ImmutableDoubleArray.builder()"], ["int", "com.google.common.primitives.ImmutableDoubleArray.length()"], ["boolean", "com.google.common.primitives.ImmutableDoubleArray.isEmpty()"], ["double", "com.google.common.primitives.ImmutableDoubleArray.get(int)"], ["int", "com.google.common.primitives.ImmutableDoubleArray.indexOf(double)"], ["int", "com.google.common.primitives.ImmutableDoubleArray.lastIndexOf(double)"], ["boolean", "com.google.common.primitives.ImmutableDoubleArray.contains(double)"], ["void", "com.google.common.primitives.ImmutableDoubleArray.forEach(java.util.function.DoubleConsumer)"], ["java.util.stream.DoubleStream", "com.google.common.primitives.ImmutableDoubleArray.stream()"], ["double[]", "com.google.common.primitives.ImmutableDoubleArray.toArray()"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.subArray(int, int)"], ["boolean", "com.google.common.primitives.ImmutableDoubleArray.equals(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableDoubleArray.hashCode()"], ["java.lang.String", "com.google.common.primitives.ImmutableDoubleArray.toString()"], ["com.google.common.primitives.ImmutableDoubleArray", "com.google.common.primitives.ImmutableDoubleArray.trimmed()"], ["int", "com.google.common.primitives.ImmutableIntArray$AsList.size()"], ["java.lang.Integer", "com.google.common.primitives.ImmutableIntArray$AsList.get(int)"], ["boolean", "com.google.common.primitives.ImmutableIntArray$AsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableIntArray$AsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableIntArray$AsList.lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.primitives.ImmutableIntArray$AsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableIntArray$AsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.ImmutableIntArray$AsList.toString()"], ["java.lang.Object", "com.google.common.primitives.ImmutableIntArray$AsList.get(int)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray$Builder.add(int)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray$Builder.addAll(int[])"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray$Builder.addAll(java.lang.Iterable<java.lang.Integer>)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray$Builder.addAll(java.util.Collection<java.lang.Integer>)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray$Builder.addAll(java.util.stream.IntStream)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray$Builder.addAll(com.google.common.primitives.ImmutableIntArray)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray$Builder.build()"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of()"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int, int)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int, int, int)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int, int, int, int)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int, int, int, int, int)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int, int, int, int, int, int)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.of(int, int...)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.copyOf(int[])"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.copyOf(java.util.Collection<java.lang.Integer>)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.copyOf(java.lang.Iterable<java.lang.Integer>)"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.copyOf(java.util.stream.IntStream)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray.builder(int)"], ["com.google.common.primitives.ImmutableIntArray$Builder", "com.google.common.primitives.ImmutableIntArray.builder()"], ["int", "com.google.common.primitives.ImmutableIntArray.length()"], ["boolean", "com.google.common.primitives.ImmutableIntArray.isEmpty()"], ["int", "com.google.common.primitives.ImmutableIntArray.get(int)"], ["int", "com.google.common.primitives.ImmutableIntArray.indexOf(int)"], ["int", "com.google.common.primitives.ImmutableIntArray.lastIndexOf(int)"], ["boolean", "com.google.common.primitives.ImmutableIntArray.contains(int)"], ["void", "com.google.common.primitives.ImmutableIntArray.forEach(java.util.function.IntConsumer)"], ["java.util.stream.IntStream", "com.google.common.primitives.ImmutableIntArray.stream()"], ["int[]", "com.google.common.primitives.ImmutableIntArray.toArray()"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.subArray(int, int)"], ["boolean", "com.google.common.primitives.ImmutableIntArray.equals(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableIntArray.hashCode()"], ["java.lang.String", "com.google.common.primitives.ImmutableIntArray.toString()"], ["com.google.common.primitives.ImmutableIntArray", "com.google.common.primitives.ImmutableIntArray.trimmed()"], ["int", "com.google.common.primitives.ImmutableLongArray$AsList.size()"], ["java.lang.Long", "com.google.common.primitives.ImmutableLongArray$AsList.get(int)"], ["boolean", "com.google.common.primitives.ImmutableLongArray$AsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableLongArray$AsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableLongArray$AsList.lastIndexOf(java.lang.Object)"], ["boolean", "com.google.common.primitives.ImmutableLongArray$AsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableLongArray$AsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.ImmutableLongArray$AsList.toString()"], ["java.lang.Object", "com.google.common.primitives.ImmutableLongArray$AsList.get(int)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray$Builder.add(long)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray$Builder.addAll(long[])"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray$Builder.addAll(java.lang.Iterable<java.lang.Long>)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray$Builder.addAll(java.util.Collection<java.lang.Long>)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray$Builder.addAll(java.util.stream.LongStream)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray$Builder.addAll(com.google.common.primitives.ImmutableLongArray)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray$Builder.build()"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of()"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long, long)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long, long, long)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long, long, long, long)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long, long, long, long, long)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long, long, long, long, long, long)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.of(long, long...)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.copyOf(long[])"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.copyOf(java.util.Collection<java.lang.Long>)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.copyOf(java.lang.Iterable<java.lang.Long>)"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.copyOf(java.util.stream.LongStream)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray.builder(int)"], ["com.google.common.primitives.ImmutableLongArray$Builder", "com.google.common.primitives.ImmutableLongArray.builder()"], ["int", "com.google.common.primitives.ImmutableLongArray.length()"], ["boolean", "com.google.common.primitives.ImmutableLongArray.isEmpty()"], ["long", "com.google.common.primitives.ImmutableLongArray.get(int)"], ["int", "com.google.common.primitives.ImmutableLongArray.indexOf(long)"], ["int", "com.google.common.primitives.ImmutableLongArray.lastIndexOf(long)"], ["boolean", "com.google.common.primitives.ImmutableLongArray.contains(long)"], ["void", "com.google.common.primitives.ImmutableLongArray.forEach(java.util.function.LongConsumer)"], ["java.util.stream.LongStream", "com.google.common.primitives.ImmutableLongArray.stream()"], ["long[]", "com.google.common.primitives.ImmutableLongArray.toArray()"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.subArray(int, int)"], ["boolean", "com.google.common.primitives.ImmutableLongArray.equals(java.lang.Object)"], ["int", "com.google.common.primitives.ImmutableLongArray.hashCode()"], ["java.lang.String", "com.google.common.primitives.ImmutableLongArray.toString()"], ["com.google.common.primitives.ImmutableLongArray", "com.google.common.primitives.ImmutableLongArray.trimmed()"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.size()"], ["boolean", "com.google.common.primitives.Ints$IntArrayAsList.isEmpty()"], ["java.lang.Integer", "com.google.common.primitives.Ints$IntArrayAsList.get(int)"], ["java.util.Spliterator$OfInt", "com.google.common.primitives.Ints$IntArrayAsList.spliterator()"], ["boolean", "com.google.common.primitives.Ints$IntArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Integer", "com.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Integer)"], ["boolean", "com.google.common.primitives.Ints$IntArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Ints$IntArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Ints$IntArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Ints$IntArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Ints$IntArrayAsList.get(int)"], ["java.util.Spliterator", "com.google.common.primitives.Ints$IntArrayAsList.spliterator()"], ["java.lang.String", "com.google.common.primitives.Ints$IntConverter.toString()"], ["com.google.common.primitives.Ints$LexicographicalComparator[]", "com.google.common.primitives.Ints$LexicographicalComparator.values()"], ["com.google.common.primitives.Ints$LexicographicalComparator", "com.google.common.primitives.Ints$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Ints$LexicographicalComparator.compare(int[], int[])"], ["java.lang.String", "com.google.common.primitives.Ints$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Ints$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Ints.hashCode(int)"], ["int", "com.google.common.primitives.Ints.checkedCast(long)"], ["int", "com.google.common.primitives.Ints.saturatedCast(long)"], ["int", "com.google.common.primitives.Ints.compare(int, int)"], ["boolean", "com.google.common.primitives.Ints.contains(int[], int)"], ["int", "com.google.common.primitives.Ints.indexOf(int[], int)"], ["int", "com.google.common.primitives.Ints.indexOf(int[], int[])"], ["int", "com.google.common.primitives.Ints.lastIndexOf(int[], int)"], ["int", "com.google.common.primitives.Ints.min(int...)"], ["int", "com.google.common.primitives.Ints.max(int...)"], ["int", "com.google.common.primitives.Ints.constrainToRange(int, int, int)"], ["int[]", "com.google.common.primitives.Ints.concat(int[]...)"], ["byte[]", "com.google.common.primitives.Ints.toByteArray(int)"], ["int", "com.google.common.primitives.Ints.fromByteArray(byte[])"], ["int", "com.google.common.primitives.Ints.fromBytes(byte, byte, byte, byte)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Integer>", "com.google.common.primitives.Ints.stringConverter()"], ["int[]", "com.google.common.primitives.Ints.ensureCapacity(int[], int, int)"], ["java.lang.String", "com.google.common.primitives.Ints.join(java.lang.String, int...)"], ["void", "com.google.common.primitives.Ints.sortDescending(int[])"], ["void", "com.google.common.primitives.Ints.sortDescending(int[], int, int)"], ["void", "com.google.common.primitives.Ints.reverse(int[])"], ["void", "com.google.common.primitives.Ints.reverse(int[], int, int)"], ["int[]", "com.google.common.primitives.Ints.toArray(java.util.Collection<? extends java.lang.Number>)"], ["java.lang.Integer", "com.google.common.primitives.Ints.tryParse(java.lang.String)"], ["java.lang.Integer", "com.google.common.primitives.Ints.tryParse(java.lang.String, int)"], ["com.google.common.primitives.Longs$LexicographicalComparator[]", "com.google.common.primitives.Longs$LexicographicalComparator.values()"], ["com.google.common.primitives.Longs$LexicographicalComparator", "com.google.common.primitives.Longs$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Longs$LexicographicalComparator.compare(long[], long[])"], ["java.lang.String", "com.google.common.primitives.Longs$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Longs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.size()"], ["boolean", "com.google.common.primitives.Longs$LongArrayAsList.isEmpty()"], ["java.lang.Long", "com.google.common.primitives.Longs$LongArrayAsList.get(int)"], ["java.util.Spliterator$OfLong", "com.google.common.primitives.Longs$LongArrayAsList.spliterator()"], ["boolean", "com.google.common.primitives.Longs$LongArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Long", "com.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Long)"], ["boolean", "com.google.common.primitives.Longs$LongArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Longs$LongArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Longs$LongArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Longs$LongArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Longs$LongArrayAsList.get(int)"], ["java.util.Spliterator", "com.google.common.primitives.Longs$LongArrayAsList.spliterator()"], ["java.lang.String", "com.google.common.primitives.Longs$LongConverter.toString()"], ["int", "com.google.common.primitives.Longs.hashCode(long)"], ["int", "com.google.common.primitives.Longs.compare(long, long)"], ["boolean", "com.google.common.primitives.Longs.contains(long[], long)"], ["int", "com.google.common.primitives.Longs.indexOf(long[], long)"], ["int", "com.google.common.primitives.Longs.indexOf(long[], long[])"], ["int", "com.google.common.primitives.Longs.lastIndexOf(long[], long)"], ["long", "com.google.common.primitives.Longs.min(long...)"], ["long", "com.google.common.primitives.Longs.max(long...)"], ["long", "com.google.common.primitives.Longs.constrainToRange(long, long, long)"], ["long[]", "com.google.common.primitives.Longs.concat(long[]...)"], ["byte[]", "com.google.common.primitives.Longs.toByteArray(long)"], ["long", "com.google.common.primitives.Longs.fromByteArray(byte[])"], ["long", "com.google.common.primitives.Longs.fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)"], ["java.lang.Long", "com.google.common.primitives.Longs.tryParse(java.lang.String)"], ["java.lang.Long", "com.google.common.primitives.Longs.tryParse(java.lang.String, int)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Long>", "com.google.common.primitives.Longs.stringConverter()"], ["long[]", "com.google.common.primitives.Longs.ensureCapacity(long[], int, int)"], ["java.lang.String", "com.google.common.primitives.Longs.join(java.lang.String, long...)"], ["void", "com.google.common.primitives.Longs.sortDescending(long[])"], ["void", "com.google.common.primitives.Longs.sortDescending(long[], int, int)"], ["void", "com.google.common.primitives.Longs.reverse(long[])"], ["void", "com.google.common.primitives.Longs.reverse(long[], int, int)"], ["long[]", "com.google.common.primitives.Longs.toArray(java.util.Collection<? extends java.lang.Number>)"], ["boolean", "com.google.common.primitives.Primitives.isWrapperType(java.lang.Class<?>)"], ["<T> java.lang.Class<T>", "com.google.common.primitives.Primitives.wrap(java.lang.Class<T>)"], ["<T> java.lang.Class<T>", "com.google.common.primitives.Primitives.unwrap(java.lang.Class<T>)"], ["com.google.common.primitives.Shorts$LexicographicalComparator[]", "com.google.common.primitives.Shorts$LexicographicalComparator.values()"], ["com.google.common.primitives.Shorts$LexicographicalComparator", "com.google.common.primitives.Shorts$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.Shorts$LexicographicalComparator.compare(short[], short[])"], ["java.lang.String", "com.google.common.primitives.Shorts$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.Shorts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.size()"], ["boolean", "com.google.common.primitives.Shorts$ShortArrayAsList.isEmpty()"], ["java.lang.Short", "com.google.common.primitives.Shorts$ShortArrayAsList.get(int)"], ["boolean", "com.google.common.primitives.Shorts$ShortArrayAsList.contains(java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.indexOf(java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.lastIndexOf(java.lang.Object)"], ["java.lang.Short", "com.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Short)"], ["boolean", "com.google.common.primitives.Shorts$ShortArrayAsList.equals(java.lang.Object)"], ["int", "com.google.common.primitives.Shorts$ShortArrayAsList.hashCode()"], ["java.lang.String", "com.google.common.primitives.Shorts$ShortArrayAsList.toString()"], ["java.lang.Object", "com.google.common.primitives.Shorts$ShortArrayAsList.set(int, java.lang.Object)"], ["java.lang.Object", "com.google.common.primitives.Shorts$ShortArrayAsList.get(int)"], ["java.lang.String", "com.google.common.primitives.Shorts$ShortConverter.toString()"], ["int", "com.google.common.primitives.Shorts.hashCode(short)"], ["short", "com.google.common.primitives.Shorts.checkedCast(long)"], ["short", "com.google.common.primitives.Shorts.saturatedCast(long)"], ["int", "com.google.common.primitives.Shorts.compare(short, short)"], ["boolean", "com.google.common.primitives.Shorts.contains(short[], short)"], ["int", "com.google.common.primitives.Shorts.indexOf(short[], short)"], ["int", "com.google.common.primitives.Shorts.indexOf(short[], short[])"], ["int", "com.google.common.primitives.Shorts.lastIndexOf(short[], short)"], ["short", "com.google.common.primitives.Shorts.min(short...)"], ["short", "com.google.common.primitives.Shorts.max(short...)"], ["short", "com.google.common.primitives.Shorts.constrainToRange(short, short, short)"], ["short[]", "com.google.common.primitives.Shorts.concat(short[]...)"], ["byte[]", "com.google.common.primitives.Shorts.toByteArray(short)"], ["short", "com.google.common.primitives.Shorts.fromByteArray(byte[])"], ["short", "com.google.common.primitives.Shorts.fromBytes(byte, byte)"], ["com.google.common.base.Converter<java.lang.String, java.lang.Short>", "com.google.common.primitives.Shorts.stringConverter()"], ["short[]", "com.google.common.primitives.Shorts.ensureCapacity(short[], int, int)"], ["java.lang.String", "com.google.common.primitives.Shorts.join(java.lang.String, short...)"], ["void", "com.google.common.primitives.Shorts.sortDescending(short[])"], ["void", "com.google.common.primitives.Shorts.sortDescending(short[], int, int)"], ["void", "com.google.common.primitives.Shorts.reverse(short[])"], ["void", "com.google.common.primitives.Shorts.reverse(short[], int, int)"], ["short[]", "com.google.common.primitives.Shorts.toArray(java.util.Collection<? extends java.lang.Number>)"], ["com.google.common.primitives.SignedBytes$LexicographicalComparator[]", "com.google.common.primitives.SignedBytes$LexicographicalComparator.values()"], ["com.google.common.primitives.SignedBytes$LexicographicalComparator", "com.google.common.primitives.SignedBytes$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.SignedBytes$LexicographicalComparator.compare(byte[], byte[])"], ["java.lang.String", "com.google.common.primitives.SignedBytes$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.SignedBytes$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["byte", "com.google.common.primitives.SignedBytes.checkedCast(long)"], ["byte", "com.google.common.primitives.SignedBytes.saturatedCast(long)"], ["int", "com.google.common.primitives.SignedBytes.compare(byte, byte)"], ["byte", "com.google.common.primitives.SignedBytes.min(byte...)"], ["byte", "com.google.common.primitives.SignedBytes.max(byte...)"], ["java.lang.String", "com.google.common.primitives.SignedBytes.join(java.lang.String, byte...)"], ["void", "com.google.common.primitives.SignedBytes.sortDescending(byte[])"], ["void", "com.google.common.primitives.SignedBytes.sortDescending(byte[], int, int)"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator[]", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.values()"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(byte[], byte[])"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.toString()"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$PureJavaComparator.compare(java.lang.Object, java.lang.Object)"], ["sun.misc.Unsafe", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()"], ["java.lang.Object", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator$1.run()"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator[]", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.values()"], ["com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(byte[], byte[])"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.toString()"], ["int", "com.google.common.primitives.UnsignedBytes$LexicographicalComparatorHolder$UnsafeComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.UnsignedBytes.toInt(byte)"], ["byte", "com.google.common.primitives.UnsignedBytes.checkedCast(long)"], ["byte", "com.google.common.primitives.UnsignedBytes.saturatedCast(long)"], ["int", "com.google.common.primitives.UnsignedBytes.compare(byte, byte)"], ["byte", "com.google.common.primitives.UnsignedBytes.min(byte...)"], ["byte", "com.google.common.primitives.UnsignedBytes.max(byte...)"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes.toString(byte)"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes.toString(byte, int)"], ["byte", "com.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String)"], ["byte", "com.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String, int)"], ["java.lang.String", "com.google.common.primitives.UnsignedBytes.join(java.lang.String, byte...)"], ["void", "com.google.common.primitives.UnsignedBytes.sort(byte[])"], ["void", "com.google.common.primitives.UnsignedBytes.sort(byte[], int, int)"], ["void", "com.google.common.primitives.UnsignedBytes.sortDescending(byte[])"], ["void", "com.google.common.primitives.UnsignedBytes.sortDescending(byte[], int, int)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.fromIntBits(int)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(long)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(java.math.BigInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(java.lang.String)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.valueOf(java.lang.String, int)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.plus(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.minus(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.times(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.dividedBy(com.google.common.primitives.UnsignedInteger)"], ["com.google.common.primitives.UnsignedInteger", "com.google.common.primitives.UnsignedInteger.mod(com.google.common.primitives.UnsignedInteger)"], ["int", "com.google.common.primitives.UnsignedInteger.intValue()"], ["long", "com.google.common.primitives.UnsignedInteger.longValue()"], ["float", "com.google.common.primitives.UnsignedInteger.floatValue()"], ["double", "com.google.common.primitives.UnsignedInteger.doubleValue()"], ["java.math.BigInteger", "com.google.common.primitives.UnsignedInteger.bigIntegerValue()"], ["int", "com.google.common.primitives.UnsignedInteger.compareTo(com.google.common.primitives.UnsignedInteger)"], ["int", "com.google.common.primitives.UnsignedInteger.hashCode()"], ["boolean", "com.google.common.primitives.UnsignedInteger.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.primitives.UnsignedInteger.toString()"], ["java.lang.String", "com.google.common.primitives.UnsignedInteger.toString(int)"], ["int", "com.google.common.primitives.UnsignedInteger.compareTo(java.lang.Object)"], ["com.google.common.primitives.UnsignedInts$LexicographicalComparator[]", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.values()"], ["com.google.common.primitives.UnsignedInts$LexicographicalComparator", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(int[], int[])"], ["java.lang.String", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.UnsignedInts$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.UnsignedInts.compare(int, int)"], ["long", "com.google.common.primitives.UnsignedInts.toLong(int)"], ["int", "com.google.common.primitives.UnsignedInts.checkedCast(long)"], ["int", "com.google.common.primitives.UnsignedInts.saturatedCast(long)"], ["int", "com.google.common.primitives.UnsignedInts.min(int...)"], ["int", "com.google.common.primitives.UnsignedInts.max(int...)"], ["java.lang.String", "com.google.common.primitives.UnsignedInts.join(java.lang.String, int...)"], ["void", "com.google.common.primitives.UnsignedInts.sort(int[])"], ["void", "com.google.common.primitives.UnsignedInts.sort(int[], int, int)"], ["void", "com.google.common.primitives.UnsignedInts.sortDescending(int[])"], ["void", "com.google.common.primitives.UnsignedInts.sortDescending(int[], int, int)"], ["int", "com.google.common.primitives.UnsignedInts.divide(int, int)"], ["int", "com.google.common.primitives.UnsignedInts.remainder(int, int)"], ["int", "com.google.common.primitives.UnsignedInts.decode(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedInts.parseUnsignedInt(java.lang.String, int)"], ["java.lang.String", "com.google.common.primitives.UnsignedInts.toString(int)"], ["java.lang.String", "com.google.common.primitives.UnsignedInts.toString(int, int)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.fromLongBits(long)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(long)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(java.math.BigInteger)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(java.lang.String)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.valueOf(java.lang.String, int)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.plus(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.minus(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.times(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.dividedBy(com.google.common.primitives.UnsignedLong)"], ["com.google.common.primitives.UnsignedLong", "com.google.common.primitives.UnsignedLong.mod(com.google.common.primitives.UnsignedLong)"], ["int", "com.google.common.primitives.UnsignedLong.intValue()"], ["long", "com.google.common.primitives.UnsignedLong.longValue()"], ["float", "com.google.common.primitives.UnsignedLong.floatValue()"], ["double", "com.google.common.primitives.UnsignedLong.doubleValue()"], ["java.math.BigInteger", "com.google.common.primitives.UnsignedLong.bigIntegerValue()"], ["int", "com.google.common.primitives.UnsignedLong.compareTo(com.google.common.primitives.UnsignedLong)"], ["int", "com.google.common.primitives.UnsignedLong.hashCode()"], ["boolean", "com.google.common.primitives.UnsignedLong.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.primitives.UnsignedLong.toString()"], ["java.lang.String", "com.google.common.primitives.UnsignedLong.toString(int)"], ["int", "com.google.common.primitives.UnsignedLong.compareTo(java.lang.Object)"], ["com.google.common.primitives.UnsignedLongs$LexicographicalComparator[]", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.values()"], ["com.google.common.primitives.UnsignedLongs$LexicographicalComparator", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.valueOf(java.lang.String)"], ["int", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(long[], long[])"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.toString()"], ["int", "com.google.common.primitives.UnsignedLongs$LexicographicalComparator.compare(java.lang.Object, java.lang.Object)"], ["int", "com.google.common.primitives.UnsignedLongs.compare(long, long)"], ["long", "com.google.common.primitives.UnsignedLongs.min(long...)"], ["long", "com.google.common.primitives.UnsignedLongs.max(long...)"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs.join(java.lang.String, long...)"], ["void", "com.google.common.primitives.UnsignedLongs.sort(long[])"], ["void", "com.google.common.primitives.UnsignedLongs.sort(long[], int, int)"], ["void", "com.google.common.primitives.UnsignedLongs.sortDescending(long[])"], ["void", "com.google.common.primitives.UnsignedLongs.sortDescending(long[], int, int)"], ["long", "com.google.common.primitives.UnsignedLongs.divide(long, long)"], ["long", "com.google.common.primitives.UnsignedLongs.remainder(long, long)"], ["long", "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String)"], ["long", "com.google.common.primitives.UnsignedLongs.decode(java.lang.String)"], ["long", "com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, int)"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs.toString(long)"], ["java.lang.String", "com.google.common.primitives.UnsignedLongs.toString(long, int)"], ["com.google.common.reflect.AbstractInvocationHandler", "com.google.common.reflect.AbstractInvocationHandler()"], ["java.lang.Object", "com.google.common.reflect.AbstractInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"], ["boolean", "com.google.common.reflect.AbstractInvocationHandler.equals(java.lang.Object)"], ["int", "com.google.common.reflect.AbstractInvocationHandler.hashCode()"], ["java.lang.String", "com.google.common.reflect.AbstractInvocationHandler.toString()"], ["boolean", "com.google.common.reflect.ClassPath$1.apply(com.google.common.reflect.ClassPath$ClassInfo)"], ["boolean", "com.google.common.reflect.ClassPath$1.apply(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.getPackageName()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.getSimpleName()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.getName()"], ["java.lang.String", "com.google.common.reflect.ClassPath$ClassInfo.toString()"], ["java.net.URL", "com.google.common.reflect.ClassPath$ResourceInfo.url()"], ["com.google.common.io.ByteSource", "com.google.common.reflect.ClassPath$ResourceInfo.asByteSource()"], ["com.google.common.io.CharSource", "com.google.common.reflect.ClassPath$ResourceInfo.asCharSource(java.nio.charset.Charset)"], ["java.lang.String", "com.google.common.reflect.ClassPath$ResourceInfo.getResourceName()"], ["int", "com.google.common.reflect.ClassPath$ResourceInfo.hashCode()"], ["boolean", "com.google.common.reflect.ClassPath$ResourceInfo.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.ClassPath$ResourceInfo.toString()"], ["void", "com.google.common.reflect.ClassPath$Scanner.scan(java.lang.ClassLoader)"], ["com.google.common.reflect.ClassPath", "com.google.common.reflect.ClassPath.from(java.lang.ClassLoader)"], ["boolean", "com.google.common.reflect.Element.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "com.google.common.reflect.Element.getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Element.getAnnotations()"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Element.getDeclaredAnnotations()"], ["void", "com.google.common.reflect.Element.setAccessible(boolean)"], ["boolean", "com.google.common.reflect.Element.isAccessible()"], ["java.lang.String", "com.google.common.reflect.Element.getName()"], ["int", "com.google.common.reflect.Element.getModifiers()"], ["boolean", "com.google.common.reflect.Element.isSynthetic()"], ["boolean", "com.google.common.reflect.Element.isPublic()"], ["boolean", "com.google.common.reflect.Element.isProtected()"], ["boolean", "com.google.common.reflect.Element.isPackagePrivate()"], ["boolean", "com.google.common.reflect.Element.isPrivate()"], ["boolean", "com.google.common.reflect.Element.isStatic()"], ["boolean", "com.google.common.reflect.Element.isFinal()"], ["boolean", "com.google.common.reflect.Element.isAbstract()"], ["boolean", "com.google.common.reflect.Element.isNative()"], ["boolean", "com.google.common.reflect.Element.isSynchronized()"], ["boolean", "com.google.common.reflect.Element.equals(java.lang.Object)"], ["int", "com.google.common.reflect.Element.hashCode()"], ["java.lang.String", "com.google.common.reflect.Element.toString()"], ["<T extends B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(java.lang.Class<T>, T)"], ["<T extends B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap$Builder.put(com.google.common.reflect.TypeToken<T>, T)"], ["<B> com.google.common.reflect.ImmutableTypeToInstanceMap<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap.of()"], ["<B> com.google.common.reflect.ImmutableTypeToInstanceMap$Builder<B>", "com.google.common.reflect.ImmutableTypeToInstanceMap.builder()"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(com.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(com.google.common.reflect.TypeToken<T>, T)"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.getInstance(java.lang.Class<T>)"], ["<T extends B> T", "com.google.common.reflect.ImmutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["B", "com.google.common.reflect.ImmutableTypeToInstanceMap.put(com.google.common.reflect.TypeToken<? extends B>, B)"], ["void", "com.google.common.reflect.ImmutableTypeToInstanceMap.putAll(java.util.Map<? extends com.google.common.reflect.TypeToken<? extends B>, ? extends B>)"], ["java.lang.Object", "com.google.common.reflect.ImmutableTypeToInstanceMap.put(java.lang.Object, java.lang.Object)"], ["boolean", "com.google.common.reflect.Invokable$ConstructorInvokable.isOverridable()"], ["boolean", "com.google.common.reflect.Invokable$ConstructorInvokable.isVarArgs()"], ["boolean", "com.google.common.reflect.Invokable$MethodInvokable.isOverridable()"], ["boolean", "com.google.common.reflect.Invokable$MethodInvokable.isVarArgs()"], ["com.google.common.reflect.Invokable<?, java.lang.Object>", "com.google.common.reflect.Invokable.from(java.lang.reflect.Method)"], ["<T> com.google.common.reflect.Invokable<T, T>", "com.google.common.reflect.Invokable.from(java.lang.reflect.Constructor<T>)"], ["R", "com.google.common.reflect.Invokable.invoke(T, java.lang.Object...)"], ["com.google.common.reflect.TypeToken<? extends R>", "com.google.common.reflect.Invokable.getReturnType()"], ["com.google.common.collect.ImmutableList<com.google.common.reflect.TypeToken<? extends java.lang.Throwable>>", "com.google.common.reflect.Invokable.getExceptionTypes()"], ["<R1 extends R> com.google.common.reflect.Invokable<T, R1>", "com.google.common.reflect.Invokable.returning(java.lang.Class<R1>)"], ["<R1 extends R> com.google.common.reflect.Invokable<T, R1>", "com.google.common.reflect.Invokable.returning(com.google.common.reflect.TypeToken<R1>)"], ["java.lang.Class<? super T>", "com.google.common.reflect.Invokable.getDeclaringClass()"], ["java.lang.String", "com.google.common.reflect.Invokable.toString()"], ["int", "com.google.common.reflect.Invokable.hashCode()"], ["boolean", "com.google.common.reflect.Invokable.equals(java.lang.Object)"], ["java.util.Iterator<java.util.Map$Entry<K, V>>", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.iterator()"], ["java.lang.Object[]", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray()"], ["<T> T[]", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$1.toArray(T[])"], ["java.util.Map$Entry<K, V>", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.util.Map$Entry<K, V>)"], ["java.lang.Object", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry$2.apply(java.lang.Object)"], ["V", "com.google.common.reflect.MutableTypeToInstanceMap$UnmodifiableEntry.setValue(V)"], ["com.google.common.reflect.MutableTypeToInstanceMap", "com.google.common.reflect.MutableTypeToInstanceMap()"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.getInstance(java.lang.Class<T>)"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.putInstance(java.lang.Class<T>, T)"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.getInstance(com.google.common.reflect.TypeToken<T>)"], ["<T extends B> T", "com.google.common.reflect.MutableTypeToInstanceMap.putInstance(com.google.common.reflect.TypeToken<T>, T)"], ["B", "com.google.common.reflect.MutableTypeToInstanceMap.put(com.google.common.reflect.TypeToken<? extends B>, B)"], ["void", "com.google.common.reflect.MutableTypeToInstanceMap.putAll(java.util.Map<? extends com.google.common.reflect.TypeToken<? extends B>, ? extends B>)"], ["java.util.Set<java.util.Map$Entry<com.google.common.reflect.TypeToken<? extends B>, B>>", "com.google.common.reflect.MutableTypeToInstanceMap.entrySet()"], ["java.lang.Object", "com.google.common.reflect.MutableTypeToInstanceMap.put(java.lang.Object, java.lang.Object)"], ["com.google.common.reflect.Invokable<?, ?>", "com.google.common.reflect.Parameter.getDeclaringInvokable()"], ["boolean", "com.google.common.reflect.Parameter.isAnnotationPresent(java.lang.Class<? extends java.lang.annotation.Annotation>)"], ["<A extends java.lang.annotation.Annotation> A", "com.google.common.reflect.Parameter.getAnnotation(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Parameter.getAnnotations()"], ["<A extends java.lang.annotation.Annotation> A[]", "com.google.common.reflect.Parameter.getAnnotationsByType(java.lang.Class<A>)"], ["java.lang.annotation.Annotation[]", "com.google.common.reflect.Parameter.getDeclaredAnnotations()"], ["<A extends java.lang.annotation.Annotation> A", "com.google.common.reflect.Parameter.getDeclaredAnnotation(java.lang.Class<A>)"], ["<A extends java.lang.annotation.Annotation> A[]", "com.google.common.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class<A>)"], ["boolean", "com.google.common.reflect.Parameter.equals(java.lang.Object)"], ["int", "com.google.common.reflect.Parameter.hashCode()"], ["java.lang.String", "com.google.common.reflect.Parameter.toString()"], ["java.lang.String", "com.google.common.reflect.Reflection.getPackageName(java.lang.Class<?>)"], ["java.lang.String", "com.google.common.reflect.Reflection.getPackageName(java.lang.String)"], ["void", "com.google.common.reflect.Reflection.initialize(java.lang.Class<?>...)"], ["<T> T", "com.google.common.reflect.Reflection.newProxy(java.lang.Class<T>, java.lang.reflect.InvocationHandler)"], ["int", "com.google.common.reflect.TypeParameter.hashCode()"], ["boolean", "com.google.common.reflect.TypeParameter.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.TypeParameter.toString()"], ["java.lang.reflect.Type", "com.google.common.reflect.TypeResolver$TypeTable$1.resolveInternal(java.lang.reflect.TypeVariable<?>, com.google.common.reflect.TypeResolver$TypeTable)"], ["int", "com.google.common.reflect.TypeResolver$TypeVariableKey.hashCode()"], ["boolean", "com.google.common.reflect.TypeResolver$TypeVariableKey.equals(java.lang.Object)"], ["java.lang.String", "com.google.common.reflect.TypeResolver$TypeVariableKey.toString()"], ["com.google.common.reflect.TypeResolver", "com.google.common.reflect.TypeResolver()"], ["com.google.common.reflect.TypeResolver", "com.google.common.reflect.TypeResolver.where(java.lang.reflect.Type, java.lang.reflect.Type)"], ["java.lang.reflect.Type", "com.google.common.reflect.TypeResolver.resolveType(java.lang.reflect.Type)"], ["java.lang.String", "com.google.common.reflect.TypeToken$1.toString()"], ["java.lang.String", "com.google.common.reflect.TypeToken$2.toString()"], ["java.util.Set<java.lang.Class<? super T>>", "com.google.common.reflect.TypeToken$ClassSet.rawTypes()"], ["boolean", "com.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Class<?>)"], ["boolean", "com.google.common.reflect.TypeToken$InterfaceSet$1.apply(java.lang.Object)"], ["java.util.Set<java.lang.Class<? super T>>", "com.google.common.reflect.TypeToken$InterfaceSet.rawTypes()"], ["int", "com.google.common.reflect.TypeToken$TypeCollector$4.compare(K, K)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$1.apply(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$1.apply(java.lang.Object)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$2.apply(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken$TypeFilter$2.apply(java.lang.Object)"], ["com.google.common.reflect.TypeToken$TypeFilter[]", "com.google.common.reflect.TypeToken$TypeFilter.values()"], ["com.google.common.reflect.TypeToken$TypeFilter", "com.google.common.reflect.TypeToken$TypeFilter.valueOf(java.lang.String)"], ["java.util.Set<java.lang.Class<? super T>>", "com.google.common.reflect.TypeToken$TypeSet.rawTypes()"], ["<T> com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.of(java.lang.Class<T>)"], ["java.lang.Class<? super T>", "com.google.common.reflect.TypeToken.getRawType()"], ["java.lang.reflect.Type", "com.google.common.reflect.TypeToken.getType()"], ["<X> com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.where(com.google.common.reflect.TypeParameter<X>, com.google.common.reflect.TypeToken<X>)"], ["<X> com.google.common.reflect.TypeToken<T>", "com.google.common.reflect.TypeToken.where(com.google.common.reflect.TypeParameter<X>, java.lang.Class<X>)"], ["com.google.common.reflect.TypeToken<? super T>", "com.google.common.reflect.TypeToken.getSupertype(java.lang.Class<? super T>)"], ["com.google.common.reflect.TypeToken<? extends T>", "com.google.common.reflect.TypeToken.getSubtype(java.lang.Class<?>)"], ["boolean", "com.google.common.reflect.TypeToken.isSupertypeOf(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken.isSupertypeOf(java.lang.reflect.Type)"], ["boolean", "com.google.common.reflect.TypeToken.isSubtypeOf(com.google.common.reflect.TypeToken<?>)"], ["boolean", "com.google.common.reflect.TypeToken.isSubtypeOf(java.lang.reflect.Type)"], ["boolean", "com.google.common.reflect.TypeToken.isArray()"], ["boolean", "com.google.common.reflect.TypeToken.isPrimitive()"], ["com.google.common.reflect.Invokable<T, java.lang.Object>", "com.google.common.reflect.TypeToken.method(java.lang.reflect.Method)"], ["com.google.common.reflect.Invokable<T, T>", "com.google.common.reflect.TypeToken.constructor(java.lang.reflect.Constructor<?>)"], ["boolean", "com.google.common.reflect.TypeToken.equals(java.lang.Object)"], ["int", "com.google.common.reflect.TypeToken.hashCode()"], ["java.lang.String", "com.google.common.reflect.TypeToken.toString()"], ["void", "com.google.common.reflect.TypeVisitor.visit(java.lang.reflect.Type...)"], ["java.lang.String", "com.google.common.reflect.Types$1.apply(java.lang.reflect.Type)"], ["java.lang.Object", "com.google.common.reflect.Types$1.apply(java.lang.Object)"], ["com.google.common.reflect.Types$ClassOwnership[]", "com.google.common.reflect.Types$ClassOwnership.values()"], ["com.google.common.reflect.Types$ClassOwnership", "com.google.common.reflect.Types$ClassOwnership.valueOf(java.lang.String)"], ["java.lang.reflect.Type", "com.google.common.reflect.Types$GenericArrayTypeImpl.getGenericComponentType()"], ["java.lang.String", "com.google.common.reflect.Types$GenericArrayTypeImpl.toString()"], ["int", "com.google.common.reflect.Types$GenericArrayTypeImpl.hashCode()"], ["boolean", "com.google.common.reflect.Types$GenericArrayTypeImpl.equals(java.lang.Object)"], ["com.google.common.reflect.Types$JavaVersion[]", "com.google.common.reflect.Types$JavaVersion.values()"], ["com.google.common.reflect.Types$JavaVersion", "com.google.common.reflect.Types$JavaVersion.valueOf(java.lang.String)"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$ParameterizedTypeImpl.getActualTypeArguments()"], ["java.lang.reflect.Type", "com.google.common.reflect.Types$ParameterizedTypeImpl.getRawType()"], ["java.lang.reflect.Type", "com.google.common.reflect.Types$ParameterizedTypeImpl.getOwnerType()"], ["java.lang.String", "com.google.common.reflect.Types$ParameterizedTypeImpl.toString()"], ["int", "com.google.common.reflect.Types$ParameterizedTypeImpl.hashCode()"], ["boolean", "com.google.common.reflect.Types$ParameterizedTypeImpl.equals(java.lang.Object)"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$TypeVariableImpl.getBounds()"], ["D", "com.google.common.reflect.Types$TypeVariableImpl.getGenericDeclaration()"], ["java.lang.String", "com.google.common.reflect.Types$TypeVariableImpl.getName()"], ["java.lang.String", "com.google.common.reflect.Types$TypeVariableImpl.getTypeName()"], ["java.lang.String", "com.google.common.reflect.Types$TypeVariableImpl.toString()"], ["int", "com.google.common.reflect.Types$TypeVariableImpl.hashCode()"], ["boolean", "com.google.common.reflect.Types$TypeVariableImpl.equals(java.lang.Object)"], ["java.lang.Object", "com.google.common.reflect.Types$TypeVariableInvocationHandler.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$WildcardTypeImpl.getLowerBounds()"], ["java.lang.reflect.Type[]", "com.google.common.reflect.Types$WildcardTypeImpl.getUpperBounds()"], ["boolean", "com.google.common.reflect.Types$WildcardTypeImpl.equals(java.lang.Object)"], ["int", "com.google.common.reflect.Types$WildcardTypeImpl.hashCode()"], ["java.lang.String", "com.google.common.reflect.Types$WildcardTypeImpl.toString()"], ["void", "com.google.common.util.concurrent.AbstractCatchingFuture.run()"], ["V", "com.google.common.util.concurrent.AbstractCheckedFuture.checkedGet()"], ["V", "com.google.common.util.concurrent.AbstractCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractExecutionThreadService$1$1.get()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService$1$2.run()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractExecutionThreadService$1.toString()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService$2.execute(java.lang.Runnable)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractExecutionThreadService.toString()"], ["boolean", "com.google.common.util.concurrent.AbstractExecutionThreadService.isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractExecutionThreadService.state()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractExecutionThreadService.failureCause()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractExecutionThreadService.startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractExecutionThreadService.stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractExecutionThreadService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["synchronized", "com.google.common.util.concurrent.AbstractFuture$Failure$1.java.lang.Throwable fillInStackTrace()"], ["void", "com.google.common.util.concurrent.AbstractFuture$SetFuture.run()"], ["V", "com.google.common.util.concurrent.AbstractFuture$TrustedFuture.get()"], ["V", "com.google.common.util.concurrent.AbstractFuture$TrustedFuture.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.AbstractFuture$TrustedFuture.isDone()"], ["boolean", "com.google.common.util.concurrent.AbstractFuture$TrustedFuture.isCancelled()"], ["void", "com.google.common.util.concurrent.AbstractFuture$TrustedFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["boolean", "com.google.common.util.concurrent.AbstractFuture$TrustedFuture.cancel(boolean)"], ["sun.misc.Unsafe", "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1.run()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1.run()"], ["V", "com.google.common.util.concurrent.AbstractFuture.get(long, java.util.concurrent.TimeUnit)"], ["V", "com.google.common.util.concurrent.AbstractFuture.get()"], ["boolean", "com.google.common.util.concurrent.AbstractFuture.isDone()"], ["boolean", "com.google.common.util.concurrent.AbstractFuture.isCancelled()"], ["boolean", "com.google.common.util.concurrent.AbstractFuture.cancel(boolean)"], ["void", "com.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractFuture.toString()"], ["void", "com.google.common.util.concurrent.AbstractIdleService$1.execute(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.AbstractIdleService$DelegateService$1.run()"], ["void", "com.google.common.util.concurrent.AbstractIdleService$DelegateService$2.run()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractIdleService$DelegateService.toString()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier.get()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractIdleService$ThreadNameSupplier.get()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractIdleService.toString()"], ["boolean", "com.google.common.util.concurrent.AbstractIdleService.isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractIdleService.state()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractIdleService.failureCause()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractIdleService.startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractIdleService.stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractIdleService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.AbstractListeningExecutorService", "com.google.common.util.concurrent.AbstractListeningExecutorService()"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, T)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable<T>)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.util.concurrent.Callable)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.AbstractListeningExecutorService.submit(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$1.terminated(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$1.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.lang.Thread", "com.google.common.util.concurrent.AbstractScheduledService$1ThreadFactoryImpl.newThread(java.lang.Runnable)"], ["java.lang.Void", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.reschedule()"], ["boolean", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.isCancelled()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$ReschedulableCallable.call()"], ["com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler$Schedule(long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler", "com.google.common.util.concurrent.AbstractScheduledService$CustomScheduler()"], ["com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "com.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedDelaySchedule(long, long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.AbstractScheduledService$Scheduler", "com.google.common.util.concurrent.AbstractScheduledService$Scheduler.newFixedRateSchedule(long, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1.get()"], ["java.lang.Object", "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$1.get()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$2.run()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$3.run()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate$Task.run()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractScheduledService$ServiceDelegate.toString()"], ["java.lang.String", "com.google.common.util.concurrent.AbstractScheduledService.toString()"], ["boolean", "com.google.common.util.concurrent.AbstractScheduledService.isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractScheduledService.state()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractScheduledService.failureCause()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractScheduledService.startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractScheduledService.stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractScheduledService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.AbstractService$1.call(com.google.common.util.concurrent.Service$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService$1.toString()"], ["void", "com.google.common.util.concurrent.AbstractService$1.call(java.lang.Object)"], ["void", "com.google.common.util.concurrent.AbstractService$2.call(com.google.common.util.concurrent.Service$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService$2.toString()"], ["void", "com.google.common.util.concurrent.AbstractService$2.call(java.lang.Object)"], ["void", "com.google.common.util.concurrent.AbstractService$3.call(com.google.common.util.concurrent.Service$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService$3.toString()"], ["void", "com.google.common.util.concurrent.AbstractService$3.call(java.lang.Object)"], ["void", "com.google.common.util.concurrent.AbstractService$4.call(com.google.common.util.concurrent.Service$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService$4.toString()"], ["void", "com.google.common.util.concurrent.AbstractService$4.call(java.lang.Object)"], ["void", "com.google.common.util.concurrent.AbstractService$5.call(com.google.common.util.concurrent.Service$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService$5.toString()"], ["void", "com.google.common.util.concurrent.AbstractService$5.call(java.lang.Object)"], ["boolean", "com.google.common.util.concurrent.AbstractService$HasReachedRunningGuard.isSatisfied()"], ["boolean", "com.google.common.util.concurrent.AbstractService$IsStartableGuard.isSatisfied()"], ["boolean", "com.google.common.util.concurrent.AbstractService$IsStoppableGuard.isSatisfied()"], ["boolean", "com.google.common.util.concurrent.AbstractService$IsStoppedGuard.isSatisfied()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractService.startAsync()"], ["com.google.common.util.concurrent.Service", "com.google.common.util.concurrent.AbstractService.stopAsync()"], ["void", "com.google.common.util.concurrent.AbstractService.awaitRunning()"], ["void", "com.google.common.util.concurrent.AbstractService.awaitRunning(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.AbstractService.awaitTerminated()"], ["void", "com.google.common.util.concurrent.AbstractService.awaitTerminated(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.AbstractService.isRunning()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.AbstractService.state()"], ["java.lang.Throwable", "com.google.common.util.concurrent.AbstractService.failureCause()"], ["void", "com.google.common.util.concurrent.AbstractService.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)"], ["java.lang.String", "com.google.common.util.concurrent.AbstractService.toString()"], ["void", "com.google.common.util.concurrent.AbstractTransformFuture.run()"], ["void", "com.google.common.util.concurrent.AggregateFuture$RunningState$1.run()"], ["void", "com.google.common.util.concurrent.AggregateFuture$RunningState.run()"], ["com.google.common.util.concurrent.AtomicDouble", "com.google.common.util.concurrent.AtomicDouble(double)"], ["com.google.common.util.concurrent.AtomicDouble", "com.google.common.util.concurrent.AtomicDouble()"], ["double", "com.google.common.util.concurrent.AtomicDouble.get()"], ["void", "com.google.common.util.concurrent.AtomicDouble.set(double)"], ["void", "com.google.common.util.concurrent.AtomicDouble.lazySet(double)"], ["double", "com.google.common.util.concurrent.AtomicDouble.getAndSet(double)"], ["boolean", "com.google.common.util.concurrent.AtomicDouble.compareAndSet(double, double)"], ["boolean", "com.google.common.util.concurrent.AtomicDouble.weakCompareAndSet(double, double)"], ["double", "com.google.common.util.concurrent.AtomicDouble.getAndAdd(double)"], ["double", "com.google.common.util.concurrent.AtomicDouble.addAndGet(double)"], ["java.lang.String", "com.google.common.util.concurrent.AtomicDouble.toString()"], ["int", "com.google.common.util.concurrent.AtomicDouble.intValue()"], ["long", "com.google.common.util.concurrent.AtomicDouble.longValue()"], ["float", "com.google.common.util.concurrent.AtomicDouble.floatValue()"], ["double", "com.google.common.util.concurrent.AtomicDouble.doubleValue()"], ["com.google.common.util.concurrent.AtomicDoubleArray", "com.google.common.util.concurrent.AtomicDoubleArray(int)"], ["com.google.common.util.concurrent.AtomicDoubleArray", "com.google.common.util.concurrent.AtomicDoubleArray(double[])"], ["int", "com.google.common.util.concurrent.AtomicDoubleArray.length()"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.get(int)"], ["void", "com.google.common.util.concurrent.AtomicDoubleArray.set(int, double)"], ["void", "com.google.common.util.concurrent.AtomicDoubleArray.lazySet(int, double)"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.getAndSet(int, double)"], ["boolean", "com.google.common.util.concurrent.AtomicDoubleArray.compareAndSet(int, double, double)"], ["boolean", "com.google.common.util.concurrent.AtomicDoubleArray.weakCompareAndSet(int, double, double)"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.getAndAdd(int, double)"], ["double", "com.google.common.util.concurrent.AtomicDoubleArray.addAndGet(int, double)"], ["java.lang.String", "com.google.common.util.concurrent.AtomicDoubleArray.toString()"], ["<K> com.google.common.util.concurrent.AtomicLongMap<K>", "com.google.common.util.concurrent.AtomicLongMap.create()"], ["<K> com.google.common.util.concurrent.AtomicLongMap<K>", "com.google.common.util.concurrent.AtomicLongMap.create(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.get(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.incrementAndGet(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.decrementAndGet(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.addAndGet(K, long)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndIncrement(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndDecrement(K)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndAdd(K, long)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.updateAndGet(K, java.util.function.LongUnaryOperator)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndUpdate(K, java.util.function.LongUnaryOperator)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.accumulateAndGet(K, long, java.util.function.LongBinaryOperator)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.getAndAccumulate(K, long, java.util.function.LongBinaryOperator)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.put(K, long)"], ["void", "com.google.common.util.concurrent.AtomicLongMap.putAll(java.util.Map<? extends K, ? extends java.lang.Long>)"], ["long", "com.google.common.util.concurrent.AtomicLongMap.remove(K)"], ["boolean", "com.google.common.util.concurrent.AtomicLongMap.removeIfZero(K)"], ["void", "com.google.common.util.concurrent.AtomicLongMap.removeAllZeros()"], ["long", "com.google.common.util.concurrent.AtomicLongMap.sum()"], ["java.util.Map<K, java.lang.Long>", "com.google.common.util.concurrent.AtomicLongMap.asMap()"], ["boolean", "com.google.common.util.concurrent.AtomicLongMap.containsKey(java.lang.Object)"], ["int", "com.google.common.util.concurrent.AtomicLongMap.size()"], ["boolean", "com.google.common.util.concurrent.AtomicLongMap.isEmpty()"], ["void", "com.google.common.util.concurrent.AtomicLongMap.clear()"], ["java.lang.String", "com.google.common.util.concurrent.AtomicLongMap.toString()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "com.google.common.util.concurrent.Atomics.newReference()"], ["<V> java.util.concurrent.atomic.AtomicReference<V>", "com.google.common.util.concurrent.Atomics.newReference(V)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "com.google.common.util.concurrent.Atomics.newReferenceArray(int)"], ["<E> java.util.concurrent.atomic.AtomicReferenceArray<E>", "com.google.common.util.concurrent.Atomics.newReferenceArray(E[])"], ["T", "com.google.common.util.concurrent.Callables$1.call()"], ["T", "com.google.common.util.concurrent.Callables$3.call()"], ["void", "com.google.common.util.concurrent.Callables$4.run()"], ["<T> java.util.concurrent.Callable<T>", "com.google.common.util.concurrent.Callables.returning(T)"], ["<T> com.google.common.util.concurrent.AsyncCallable<T>", "com.google.common.util.concurrent.Callables.asAsyncCallable(java.util.concurrent.Callable<T>, com.google.common.util.concurrent.ListeningExecutorService)"], ["java.lang.Object", "com.google.common.util.concurrent.CollectionFuture$ListFuture$ListFutureRunningState.combine(java.util.List)"], ["com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask", "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask(com.google.common.util.concurrent.AsyncCallable<V>, java.util.concurrent.Executor)"], ["java.lang.String", "com.google.common.util.concurrent.CombinedFuture$AsyncCallableInterruptibleTask.toString()"], ["com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask", "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask(java.util.concurrent.Callable<V>, java.util.concurrent.Executor)"], ["java.lang.String", "com.google.common.util.concurrent.CombinedFuture$CallableInterruptibleTask.toString()"], ["com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask", "com.google.common.util.concurrent.CombinedFuture$CombinedFutureInterruptibleTask(com.google.common.util.concurrent.CombinedFuture, java.util.concurrent.Executor)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.getLockGraphNode()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.isAcquiredByCurrentThread()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.lockInterruptibly()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantLock.unlock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.lockInterruptibly()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadLock.unlock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()"], ["java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.getLockGraphNode()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.isAcquiredByCurrentThread()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.writeLock()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock.readLock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.lockInterruptibly()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock()"], ["boolean", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingReentrantWriteLock.unlock()"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["void", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[]", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies.values()"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$Policies", "com.google.common.util.concurrent.CycleDetectingLockFactory$Policies.valueOf(java.lang.String)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace", "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getConflictingStackTrace()"], ["java.lang.String", "com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getMessage()"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E)"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantLock(E, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering.newReentrantReadWriteLock(E, boolean)"], ["com.google.common.util.concurrent.CycleDetectingLockFactory", "com.google.common.util.concurrent.CycleDetectingLockFactory.newInstance(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantLock(java.lang.String, boolean)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String)"], ["java.util.concurrent.locks.ReentrantReadWriteLock", "com.google.common.util.concurrent.CycleDetectingLockFactory.newReentrantReadWriteLock(java.lang.String, boolean)"], ["<E extends java.lang.Enum<E>> com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E>", "com.google.common.util.concurrent.CycleDetectingLockFactory.newInstanceWithExplicitOrdering(java.lang.Class<E>, com.google.common.util.concurrent.CycleDetectingLockFactory$Policy)"], ["com.google.common.util.concurrent.ExecutionError", "com.google.common.util.concurrent.ExecutionError(java.lang.String, java.lang.Error)"], ["com.google.common.util.concurrent.ExecutionError", "com.google.common.util.concurrent.ExecutionError(java.lang.Error)"], ["com.google.common.util.concurrent.ExecutionList", "com.google.common.util.concurrent.ExecutionList()"], ["void", "com.google.common.util.concurrent.ExecutionList.add(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ExecutionList.execute()"], ["com.google.common.util.concurrent.FakeTimeLimiter", "com.google.common.util.concurrent.FakeTimeLimiter()"], ["<T> T", "com.google.common.util.concurrent.FakeTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.FakeTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.FakeTimeLimiter.callUninterruptiblyWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.FakeTimeLimiter.runWithTimeout(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.FakeTimeLimiter.runUninterruptiblyWithTimeout(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["<V> com.google.common.util.concurrent.FluentFuture<V>", "com.google.common.util.concurrent.FluentFuture.from(com.google.common.util.concurrent.ListenableFuture<V>)"], ["<X extends java.lang.Throwable> com.google.common.util.concurrent.FluentFuture<V>", "com.google.common.util.concurrent.FluentFuture.catching(java.lang.Class<X>, com.google.common.base.Function<? super X, ? extends V>, java.util.concurrent.Executor)"], ["<X extends java.lang.Throwable> com.google.common.util.concurrent.FluentFuture<V>", "com.google.common.util.concurrent.FluentFuture.catchingAsync(java.lang.Class<X>, com.google.common.util.concurrent.AsyncFunction<? super X, ? extends V>, java.util.concurrent.Executor)"], ["<T> com.google.common.util.concurrent.FluentFuture<T>", "com.google.common.util.concurrent.FluentFuture.transformAsync(com.google.common.util.concurrent.AsyncFunction<? super V, T>, java.util.concurrent.Executor)"], ["<T> com.google.common.util.concurrent.FluentFuture<T>", "com.google.common.util.concurrent.FluentFuture.transform(com.google.common.base.Function<? super V, T>, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.FluentFuture.addCallback(com.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingDeque.remainingCapacity()"], ["void", "com.google.common.util.concurrent.ForwardingBlockingDeque.putFirst(E)"], ["void", "com.google.common.util.concurrent.ForwardingBlockingDeque.putLast(E)"], ["boolean", "com.google.common.util.concurrent.ForwardingBlockingDeque.offerFirst(E, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.ForwardingBlockingDeque.offerLast(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.util.concurrent.ForwardingBlockingDeque.takeFirst()"], ["E", "com.google.common.util.concurrent.ForwardingBlockingDeque.takeLast()"], ["E", "com.google.common.util.concurrent.ForwardingBlockingDeque.pollFirst(long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.util.concurrent.ForwardingBlockingDeque.pollLast(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.ForwardingBlockingDeque.put(E)"], ["boolean", "com.google.common.util.concurrent.ForwardingBlockingDeque.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.util.concurrent.ForwardingBlockingDeque.take()"], ["E", "com.google.common.util.concurrent.ForwardingBlockingDeque.poll(long, java.util.concurrent.TimeUnit)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingDeque.drainTo(java.util.Collection<? super E>, int)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>, int)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingQueue.drainTo(java.util.Collection<? super E>)"], ["boolean", "com.google.common.util.concurrent.ForwardingBlockingQueue.offer(E, long, java.util.concurrent.TimeUnit)"], ["E", "com.google.common.util.concurrent.ForwardingBlockingQueue.poll(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.ForwardingBlockingQueue.put(E)"], ["int", "com.google.common.util.concurrent.ForwardingBlockingQueue.remainingCapacity()"], ["E", "com.google.common.util.concurrent.ForwardingBlockingQueue.take()"], ["com.google.common.util.concurrent.ForwardingCheckedFuture", "com.google.common.util.concurrent.ForwardingCheckedFuture()"], ["V", "com.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet()"], ["V", "com.google.common.util.concurrent.ForwardingCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.ForwardingCondition.await()"], ["void", "com.google.common.util.concurrent.ForwardingCondition.awaitUninterruptibly()"], ["long", "com.google.common.util.concurrent.ForwardingCondition.awaitNanos(long)"], ["boolean", "com.google.common.util.concurrent.ForwardingCondition.await(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.ForwardingCondition.awaitUntil(java.util.Date)"], ["void", "com.google.common.util.concurrent.ForwardingCondition.signal()"], ["void", "com.google.common.util.concurrent.ForwardingCondition.signalAll()"], ["boolean", "com.google.common.util.concurrent.ForwardingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "com.google.common.util.concurrent.ForwardingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.ForwardingExecutorService.isShutdown()"], ["boolean", "com.google.common.util.concurrent.ForwardingExecutorService.isTerminated()"], ["void", "com.google.common.util.concurrent.ForwardingExecutorService.shutdown()"], ["void", "com.google.common.util.concurrent.ForwardingExecutorService.execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.ForwardingExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.ForwardingExecutorService.submit(java.lang.Runnable, T)"], ["void", "com.google.common.util.concurrent.ForwardingFluentFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["boolean", "com.google.common.util.concurrent.ForwardingFluentFuture.cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.ForwardingFluentFuture.isCancelled()"], ["boolean", "com.google.common.util.concurrent.ForwardingFluentFuture.isDone()"], ["V", "com.google.common.util.concurrent.ForwardingFluentFuture.get()"], ["V", "com.google.common.util.concurrent.ForwardingFluentFuture.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.ForwardingFuture.cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.ForwardingFuture.isCancelled()"], ["boolean", "com.google.common.util.concurrent.ForwardingFuture.isDone()"], ["V", "com.google.common.util.concurrent.ForwardingFuture.get()"], ["V", "com.google.common.util.concurrent.ForwardingFuture.get(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.ForwardingListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> com.google.common.util.concurrent.ListenableFuture<T>", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, T)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable, java.lang.Object)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.lang.Runnable)"], ["java.util.concurrent.Future", "com.google.common.util.concurrent.ForwardingListeningExecutorService.submit(java.util.concurrent.Callable)"], ["void", "com.google.common.util.concurrent.ForwardingLock.lock()"], ["void", "com.google.common.util.concurrent.ForwardingLock.lockInterruptibly()"], ["boolean", "com.google.common.util.concurrent.ForwardingLock.tryLock()"], ["boolean", "com.google.common.util.concurrent.ForwardingLock.tryLock(long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.ForwardingLock.unlock()"], ["java.util.concurrent.locks.Condition", "com.google.common.util.concurrent.ForwardingLock.newCondition()"], ["void", "com.google.common.util.concurrent.Futures$1.run()"], ["boolean", "com.google.common.util.concurrent.Futures$2.cancel(boolean)"], ["boolean", "com.google.common.util.concurrent.Futures$2.isCancelled()"], ["boolean", "com.google.common.util.concurrent.Futures$2.isDone()"], ["O", "com.google.common.util.concurrent.Futures$2.get()"], ["O", "com.google.common.util.concurrent.Futures$2.get(long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.ListenableFuture", "com.google.common.util.concurrent.Futures$3.apply(java.lang.Object)"], ["void", "com.google.common.util.concurrent.Futures$4.run()"], ["void", "com.google.common.util.concurrent.Futures$CallbackListener.run()"], ["java.lang.String", "com.google.common.util.concurrent.Futures$CallbackListener.toString()"], ["<C> com.google.common.util.concurrent.ListenableFuture<C>", "com.google.common.util.concurrent.Futures$FutureCombiner.callAsync(com.google.common.util.concurrent.AsyncCallable<C>, java.util.concurrent.Executor)"], ["<C> com.google.common.util.concurrent.ListenableFuture<C>", "com.google.common.util.concurrent.Futures$FutureCombiner.callAsync(com.google.common.util.concurrent.AsyncCallable<C>)"], ["<C> com.google.common.util.concurrent.ListenableFuture<C>", "com.google.common.util.concurrent.Futures$FutureCombiner.call(java.util.concurrent.Callable<C>, java.util.concurrent.Executor)"], ["<C> com.google.common.util.concurrent.ListenableFuture<C>", "com.google.common.util.concurrent.Futures$FutureCombiner.call(java.util.concurrent.Callable<C>)"], ["boolean", "com.google.common.util.concurrent.Futures$InCompletionOrderFuture.cancel(boolean)"], ["void", "com.google.common.util.concurrent.Futures$NonCancellationPropagatingFuture.run()"], ["<V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X>", "com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.base.Function<? super java.lang.Exception, X>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.immediateFuture(V)"], ["<V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X>", "com.google.common.util.concurrent.Futures.immediateCheckedFuture(V)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.immediateFailedFuture(java.lang.Throwable)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.immediateCancelledFuture()"], ["<V, X extends java.lang.Exception> com.google.common.util.concurrent.CheckedFuture<V, X>", "com.google.common.util.concurrent.Futures.immediateFailedCheckedFuture(X)"], ["<O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.submitAsync(com.google.common.util.concurrent.AsyncCallable<O>, java.util.concurrent.Executor)"], ["<O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.scheduleAsync(com.google.common.util.concurrent.AsyncCallable<O>, long, java.util.concurrent.TimeUnit, java.util.concurrent.ScheduledExecutorService)"], ["<V, X extends java.lang.Throwable> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.catching(com.google.common.util.concurrent.ListenableFuture<? extends V>, java.lang.Class<X>, com.google.common.base.Function<? super X, ? extends V>)"], ["<V, X extends java.lang.Throwable> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.catching(com.google.common.util.concurrent.ListenableFuture<? extends V>, java.lang.Class<X>, com.google.common.base.Function<? super X, ? extends V>, java.util.concurrent.Executor)"], ["<V, X extends java.lang.Throwable> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.catchingAsync(com.google.common.util.concurrent.ListenableFuture<? extends V>, java.lang.Class<X>, com.google.common.util.concurrent.AsyncFunction<? super X, ? extends V>)"], ["<V, X extends java.lang.Throwable> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.catchingAsync(com.google.common.util.concurrent.ListenableFuture<? extends V>, java.lang.Class<X>, com.google.common.util.concurrent.AsyncFunction<? super X, ? extends V>, java.util.concurrent.Executor)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.withTimeout(com.google.common.util.concurrent.ListenableFuture<V>, long, java.util.concurrent.TimeUnit, java.util.concurrent.ScheduledExecutorService)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transformAsync(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transformAsync(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.util.concurrent.AsyncFunction<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>)"], ["<I, O> com.google.common.util.concurrent.ListenableFuture<O>", "com.google.common.util.concurrent.Futures.transform(com.google.common.util.concurrent.ListenableFuture<I>, com.google.common.base.Function<? super I, ? extends O>, java.util.concurrent.Executor)"], ["<I, O> java.util.concurrent.Future<O>", "com.google.common.util.concurrent.Futures.lazyTransform(java.util.concurrent.Future<I>, com.google.common.base.Function<? super I, ? extends O>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.dereference(com.google.common.util.concurrent.ListenableFuture<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.allAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.allAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> com.google.common.util.concurrent.Futures$FutureCombiner<V>", "com.google.common.util.concurrent.Futures.whenAllComplete(com.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> com.google.common.util.concurrent.Futures$FutureCombiner<V>", "com.google.common.util.concurrent.Futures.whenAllComplete(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> com.google.common.util.concurrent.Futures$FutureCombiner<V>", "com.google.common.util.concurrent.Futures.whenAllSucceed(com.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> com.google.common.util.concurrent.Futures$FutureCombiner<V>", "com.google.common.util.concurrent.Futures.whenAllSucceed(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.Futures.nonCancellationPropagating(com.google.common.util.concurrent.ListenableFuture<V>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.successfulAsList(com.google.common.util.concurrent.ListenableFuture<? extends V>...)"], ["<V> com.google.common.util.concurrent.ListenableFuture<java.util.List<V>>", "com.google.common.util.concurrent.Futures.successfulAsList(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends V>>)"], ["<T> com.google.common.collect.ImmutableList<com.google.common.util.concurrent.ListenableFuture<T>>", "com.google.common.util.concurrent.Futures.inCompletionOrder(java.lang.Iterable<? extends com.google.common.util.concurrent.ListenableFuture<? extends T>>)"], ["<V> void", "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>)"], ["<V> void", "com.google.common.util.concurrent.Futures.addCallback(com.google.common.util.concurrent.ListenableFuture<V>, com.google.common.util.concurrent.FutureCallback<? super V>, java.util.concurrent.Executor)"], ["<V> V", "com.google.common.util.concurrent.Futures.getDone(java.util.concurrent.Future<V>)"], ["<V, X extends java.lang.Exception> V", "com.google.common.util.concurrent.Futures.getChecked(java.util.concurrent.Future<V>, java.lang.Class<X>)"], ["<V, X extends java.lang.Exception> V", "com.google.common.util.concurrent.Futures.getChecked(java.util.concurrent.Future<V>, java.lang.Class<X>, long, java.util.concurrent.TimeUnit)"], ["<V> V", "com.google.common.util.concurrent.Futures.getUnchecked(java.util.concurrent.Future<V>)"], ["java.lang.Boolean", "com.google.common.util.concurrent.FuturesGetChecked$1.apply(java.lang.reflect.Constructor<?>)"], ["java.lang.Object", "com.google.common.util.concurrent.FuturesGetChecked$1.apply(java.lang.Object)"], ["com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator[]", "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator.values()"], ["com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator", "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator.valueOf(java.lang.String)"], ["void", "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$ClassValueValidator.validateClass(java.lang.Class<? extends java.lang.Exception>)"], ["com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator[]", "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator.values()"], ["com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator", "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator.valueOf(java.lang.String)"], ["void", "com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidatorHolder$WeakSetValidator.validateClass(java.lang.Class<? extends java.lang.Exception>)"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture.get()"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture.checkedGet()"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.ImmediateFuture$ImmediateFailedCheckedFuture.toString()"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture.get()"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture.checkedGet()"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture.checkedGet(long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulCheckedFuture.toString()"], ["V", "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture.get()"], ["java.lang.String", "com.google.common.util.concurrent.ImmediateFuture$ImmediateSuccessfulFuture.toString()"], ["void", "com.google.common.util.concurrent.ImmediateFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["boolean", "com.google.common.util.concurrent.ImmediateFuture.cancel(boolean)"], ["V", "com.google.common.util.concurrent.ImmediateFuture.get(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.ImmediateFuture.isCancelled()"], ["boolean", "com.google.common.util.concurrent.ImmediateFuture.isDone()"], ["void", "com.google.common.util.concurrent.InterruptibleTask$DoNothingRunnable.run()"], ["void", "com.google.common.util.concurrent.InterruptibleTask.run()"], ["void", "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter$1.run()"], ["void", "com.google.common.util.concurrent.JdkFutureAdapters$ListenableFutureAdapter.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>)"], ["<V> com.google.common.util.concurrent.ListenableFuture<V>", "com.google.common.util.concurrent.JdkFutureAdapters.listenInPoolThread(java.util.concurrent.Future<V>, java.util.concurrent.Executor)"], ["<V> com.google.common.util.concurrent.ListenableFutureTask<V>", "com.google.common.util.concurrent.ListenableFutureTask.create(java.util.concurrent.Callable<V>)"], ["<V> com.google.common.util.concurrent.ListenableFutureTask<V>", "com.google.common.util.concurrent.ListenableFutureTask.create(java.lang.Runnable, V)"], ["void", "com.google.common.util.concurrent.ListenableFutureTask.addListener(java.lang.Runnable, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ListenerCallQueue$PerListenerQueue.run()"], ["void", "com.google.common.util.concurrent.ListenerCallQueue.addListener(L, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ListenerCallQueue.enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event<L>)"], ["void", "com.google.common.util.concurrent.ListenerCallQueue.enqueue(com.google.common.util.concurrent.ListenerCallQueue$Event<L>, java.lang.String)"], ["void", "com.google.common.util.concurrent.ListenerCallQueue.dispatch()"], ["default", "com.google.common.util.concurrent.ListeningExecutorService.java.util.concurrent.Future submit(java.lang.Runnable)"], ["default", "com.google.common.util.concurrent.ListeningExecutorService.java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)"], ["default", "com.google.common.util.concurrent.ListeningExecutorService.java.util.concurrent.Future submit(java.util.concurrent.Callable)"], ["default", "com.google.common.util.concurrent.ListeningScheduledExecutorService.java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["default", "com.google.common.util.concurrent.ListeningScheduledExecutorService.java.util.concurrent.ScheduledFuture scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["default", "com.google.common.util.concurrent.ListeningScheduledExecutorService.java.util.concurrent.ScheduledFuture schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)"], ["default", "com.google.common.util.concurrent.ListeningScheduledExecutorService.java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor$1.isSatisfied()"], ["com.google.common.util.concurrent.Monitor", "com.google.common.util.concurrent.Monitor()"], ["com.google.common.util.concurrent.Monitor", "com.google.common.util.concurrent.Monitor(boolean)"], ["com.google.common.util.concurrent.Monitor$Guard", "com.google.common.util.concurrent.Monitor.newGuard(java.util.function.BooleanSupplier)"], ["void", "com.google.common.util.concurrent.Monitor.enter()"], ["void", "com.google.common.util.concurrent.Monitor.enterInterruptibly()"], ["boolean", "com.google.common.util.concurrent.Monitor.enter(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterInterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.tryEnter()"], ["void", "com.google.common.util.concurrent.Monitor.enterWhen(com.google.common.util.concurrent.Monitor$Guard)"], ["void", "com.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterWhen(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIf(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIf(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.tryEnterIf(com.google.common.util.concurrent.Monitor$Guard)"], ["void", "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard)"], ["void", "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)"], ["boolean", "com.google.common.util.concurrent.Monitor.waitFor(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Monitor.waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.Monitor.leave()"], ["boolean", "com.google.common.util.concurrent.Monitor.isFair()"], ["boolean", "com.google.common.util.concurrent.Monitor.isOccupied()"], ["boolean", "com.google.common.util.concurrent.Monitor.isOccupiedByCurrentThread()"], ["int", "com.google.common.util.concurrent.Monitor.getOccupiedDepth()"], ["int", "com.google.common.util.concurrent.Monitor.getQueueLength()"], ["boolean", "com.google.common.util.concurrent.Monitor.hasQueuedThreads()"], ["boolean", "com.google.common.util.concurrent.Monitor.hasQueuedThread(java.lang.Thread)"], ["boolean", "com.google.common.util.concurrent.Monitor.hasWaiters(com.google.common.util.concurrent.Monitor$Guard)"], ["int", "com.google.common.util.concurrent.Monitor.getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard)"], ["void", "com.google.common.util.concurrent.MoreExecutors$1.run()"], ["void", "com.google.common.util.concurrent.MoreExecutors$2.execute(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.MoreExecutors$5$1.run()"], ["void", "com.google.common.util.concurrent.MoreExecutors$5.execute(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.MoreExecutors$Application$1.run()"], ["com.google.common.util.concurrent.MoreExecutors$DirectExecutor[]", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.values()"], ["com.google.common.util.concurrent.MoreExecutors$DirectExecutor", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.valueOf(java.lang.String)"], ["void", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(java.lang.Runnable)"], ["java.lang.String", "com.google.common.util.concurrent.MoreExecutors$DirectExecutor.toString()"], ["void", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.execute(java.lang.Runnable)"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown()"], ["void", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdown()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isShutdown()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.isTerminated()"], ["void", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.shutdown()"], ["void", "com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.execute(java.lang.Runnable)"], ["com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask(com.google.common.util.concurrent.ListenableFuture<V>, java.util.concurrent.ScheduledFuture<?>)"], ["boolean", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.cancel(boolean)"], ["long", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.getDelay(java.util.concurrent.TimeUnit)"], ["int", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.util.concurrent.Delayed)"], ["int", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$ListenableScheduledTask.compareTo(java.lang.Object)"], ["com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask(java.lang.Runnable)"], ["void", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator$NeverSuccessfulListenableFutureTask.run()"], ["<V> com.google.common.util.concurrent.ListenableScheduledFuture<V>", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleWithFixedDelay(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.scheduleAtFixedRate(java.lang.Runnable, long, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.util.concurrent.Callable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledFuture", "com.google.common.util.concurrent.MoreExecutors$ScheduledListeningDecorator.schedule(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ScheduledExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.MoreExecutors.addDelayedShutdownHook(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.ExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingExecutorService(java.util.concurrent.ThreadPoolExecutor)"], ["java.util.concurrent.ScheduledExecutorService", "com.google.common.util.concurrent.MoreExecutors.getExitingScheduledExecutorService(java.util.concurrent.ScheduledThreadPoolExecutor)"], ["com.google.common.util.concurrent.ListeningExecutorService", "com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()"], ["java.util.concurrent.Executor", "com.google.common.util.concurrent.MoreExecutors.directExecutor()"], ["java.util.concurrent.Executor", "com.google.common.util.concurrent.MoreExecutors.sequentialExecutor(java.util.concurrent.Executor)"], ["java.util.concurrent.Executor", "com.google.common.util.concurrent.MoreExecutors.newSequentialExecutor(java.util.concurrent.Executor)"], ["com.google.common.util.concurrent.ListeningExecutorService", "com.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ExecutorService)"], ["com.google.common.util.concurrent.ListeningScheduledExecutorService", "com.google.common.util.concurrent.MoreExecutors.listeningDecorator(java.util.concurrent.ScheduledExecutorService)"], ["java.util.concurrent.ThreadFactory", "com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()"], ["boolean", "com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.RateLimiter$SleepingStopwatch", "com.google.common.util.concurrent.RateLimiter$SleepingStopwatch.createFromSystemTimer()"], ["com.google.common.util.concurrent.RateLimiter", "com.google.common.util.concurrent.RateLimiter.create(double)"], ["com.google.common.util.concurrent.RateLimiter", "com.google.common.util.concurrent.RateLimiter.create(double, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.RateLimiter.setRate(double)"], ["double", "com.google.common.util.concurrent.RateLimiter.getRate()"], ["double", "com.google.common.util.concurrent.RateLimiter.acquire()"], ["double", "com.google.common.util.concurrent.RateLimiter.acquire(int)"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire(int)"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire()"], ["boolean", "com.google.common.util.concurrent.RateLimiter.tryAcquire(int, long, java.util.concurrent.TimeUnit)"], ["java.lang.String", "com.google.common.util.concurrent.RateLimiter.toString()"], ["void", "com.google.common.util.concurrent.Runnables$1.run()"], ["java.lang.Runnable", "com.google.common.util.concurrent.Runnables.doNothing()"], ["void", "com.google.common.util.concurrent.SequentialExecutor$QueueWorker.run()"], ["void", "com.google.common.util.concurrent.SequentialExecutor.execute(java.lang.Runnable)"], ["com.google.common.util.concurrent.Service$Listener", "com.google.common.util.concurrent.Service$Listener()"], ["void", "com.google.common.util.concurrent.Service$Listener.starting()"], ["void", "com.google.common.util.concurrent.Service$Listener.running()"], ["void", "com.google.common.util.concurrent.Service$Listener.stopping(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.Service$Listener.terminated(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.Service$Listener.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["com.google.common.util.concurrent.Service$State[]", "com.google.common.util.concurrent.Service$State.values()"], ["com.google.common.util.concurrent.Service$State", "com.google.common.util.concurrent.Service$State.valueOf(java.lang.String)"], ["void", "com.google.common.util.concurrent.ServiceManager$1.call(com.google.common.util.concurrent.ServiceManager$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.ServiceManager$1.toString()"], ["void", "com.google.common.util.concurrent.ServiceManager$1.call(java.lang.Object)"], ["void", "com.google.common.util.concurrent.ServiceManager$2.call(com.google.common.util.concurrent.ServiceManager$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.ServiceManager$2.toString()"], ["void", "com.google.common.util.concurrent.ServiceManager$2.call(java.lang.Object)"], ["com.google.common.util.concurrent.ServiceManager$Listener", "com.google.common.util.concurrent.ServiceManager$Listener()"], ["void", "com.google.common.util.concurrent.ServiceManager$Listener.healthy()"], ["void", "com.google.common.util.concurrent.ServiceManager$Listener.stopped()"], ["void", "com.google.common.util.concurrent.ServiceManager$Listener.failure(com.google.common.util.concurrent.Service)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.starting()"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.running()"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.stopping(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.terminated(com.google.common.util.concurrent.Service$State)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceListener.failed(com.google.common.util.concurrent.Service$State, java.lang.Throwable)"], ["java.lang.Long", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.apply(java.util.Map$Entry<com.google.common.util.concurrent.Service, java.lang.Long>)"], ["java.lang.Object", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$1.apply(java.lang.Object)"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2.call(com.google.common.util.concurrent.ServiceManager$Listener)"], ["java.lang.String", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2.toString()"], ["void", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$2.call(java.lang.Object)"], ["boolean", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$AwaitHealthGuard.isSatisfied()"], ["boolean", "com.google.common.util.concurrent.ServiceManager$ServiceManagerState$StoppedGuard.isSatisfied()"], ["com.google.common.util.concurrent.ServiceManager", "com.google.common.util.concurrent.ServiceManager(java.lang.Iterable<? extends com.google.common.util.concurrent.Service>)"], ["void", "com.google.common.util.concurrent.ServiceManager.addListener(com.google.common.util.concurrent.ServiceManager$Listener, java.util.concurrent.Executor)"], ["void", "com.google.common.util.concurrent.ServiceManager.addListener(com.google.common.util.concurrent.ServiceManager$Listener)"], ["com.google.common.util.concurrent.ServiceManager", "com.google.common.util.concurrent.ServiceManager.startAsync()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitHealthy()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitHealthy(long, java.util.concurrent.TimeUnit)"], ["com.google.common.util.concurrent.ServiceManager", "com.google.common.util.concurrent.ServiceManager.stopAsync()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitStopped()"], ["void", "com.google.common.util.concurrent.ServiceManager.awaitStopped(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.ServiceManager.isHealthy()"], ["com.google.common.collect.ImmutableMultimap<com.google.common.util.concurrent.Service$State, com.google.common.util.concurrent.Service>", "com.google.common.util.concurrent.ServiceManager.servicesByState()"], ["com.google.common.collect.ImmutableMap<com.google.common.util.concurrent.Service, java.lang.Long>", "com.google.common.util.concurrent.ServiceManager.startupTimes()"], ["java.lang.String", "com.google.common.util.concurrent.ServiceManager.toString()"], ["<V> com.google.common.util.concurrent.SettableFuture<V>", "com.google.common.util.concurrent.SettableFuture.create()"], ["boolean", "com.google.common.util.concurrent.SettableFuture.set(V)"], ["boolean", "com.google.common.util.concurrent.SettableFuture.setException(java.lang.Throwable)"], ["boolean", "com.google.common.util.concurrent.SettableFuture.setFuture(com.google.common.util.concurrent.ListenableFuture<? extends V>)"], ["java.lang.Object", "com.google.common.util.concurrent.SimpleTimeLimiter$1$1.call()"], ["java.lang.Object", "com.google.common.util.concurrent.SimpleTimeLimiter$1.invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])"], ["com.google.common.util.concurrent.SimpleTimeLimiter", "com.google.common.util.concurrent.SimpleTimeLimiter.create(java.util.concurrent.ExecutorService)"], ["<T> T", "com.google.common.util.concurrent.SimpleTimeLimiter.newProxy(T, java.lang.Class<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.SimpleTimeLimiter.callWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.SimpleTimeLimiter.callUninterruptiblyWithTimeout(java.util.concurrent.Callable<T>, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.SimpleTimeLimiter.runWithTimeout(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.SimpleTimeLimiter.runUninterruptiblyWithTimeout(java.lang.Runnable, long, java.util.concurrent.TimeUnit)"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.Striped$1.get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$1.get()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.Striped$2.get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$2.get()"], ["java.util.concurrent.Semaphore", "com.google.common.util.concurrent.Striped$3.get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$3.get()"], ["java.util.concurrent.Semaphore", "com.google.common.util.concurrent.Striped$4.get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$4.get()"], ["java.util.concurrent.locks.ReadWriteLock", "com.google.common.util.concurrent.Striped$5.get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$5.get()"], ["java.util.concurrent.locks.ReadWriteLock", "com.google.common.util.concurrent.Striped$6.get()"], ["java.lang.Object", "com.google.common.util.concurrent.Striped$6.get()"], ["L", "com.google.common.util.concurrent.Striped$CompactStriped.getAt(int)"], ["int", "com.google.common.util.concurrent.Striped$CompactStriped.size()"], ["L", "com.google.common.util.concurrent.Striped$LargeLazyStriped.getAt(int)"], ["int", "com.google.common.util.concurrent.Striped$LargeLazyStriped.size()"], ["L", "com.google.common.util.concurrent.Striped$PowerOfTwoStriped.get(java.lang.Object)"], ["L", "com.google.common.util.concurrent.Striped$SmallLazyStriped.getAt(int)"], ["int", "com.google.common.util.concurrent.Striped$SmallLazyStriped.size()"], ["java.util.concurrent.locks.Condition", "com.google.common.util.concurrent.Striped$WeakSafeLock.newCondition()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock.readLock()"], ["java.util.concurrent.locks.Lock", "com.google.common.util.concurrent.Striped$WeakSafeReadWriteLock.writeLock()"], ["java.lang.Thread", "com.google.common.util.concurrent.ThreadFactoryBuilder$1.newThread(java.lang.Runnable)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder()"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setNameFormat(java.lang.String)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setDaemon(boolean)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setPriority(int)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)"], ["com.google.common.util.concurrent.ThreadFactoryBuilder", "com.google.common.util.concurrent.ThreadFactoryBuilder.setThreadFactory(java.util.concurrent.ThreadFactory)"], ["java.util.concurrent.ThreadFactory", "com.google.common.util.concurrent.ThreadFactoryBuilder.build()"], ["void", "com.google.common.util.concurrent.TimeoutFuture$Fire.run()"], ["java.lang.String", "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleAsyncTask.toString()"], ["java.lang.String", "com.google.common.util.concurrent.TrustedListenableFutureTask$TrustedFutureInterruptibleTask.toString()"], ["void", "com.google.common.util.concurrent.TrustedListenableFutureTask.run()"], ["void", "com.google.common.util.concurrent.UncaughtExceptionHandlers$Exiter.uncaughtException(java.lang.Thread, java.lang.Throwable)"], ["java.lang.Thread$UncaughtExceptionHandler", "com.google.common.util.concurrent.UncaughtExceptionHandlers.systemExit()"], ["com.google.common.util.concurrent.UncheckedExecutionException", "com.google.common.util.concurrent.UncheckedExecutionException(java.lang.String, java.lang.Throwable)"], ["com.google.common.util.concurrent.UncheckedExecutionException", "com.google.common.util.concurrent.UncheckedExecutionException(java.lang.Throwable)"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException()"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String)"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.Throwable)"], ["com.google.common.util.concurrent.UncheckedTimeoutException", "com.google.common.util.concurrent.UncheckedTimeoutException(java.lang.String, java.lang.Throwable)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch)"], ["boolean", "com.google.common.util.concurrent.Uninterruptibles.awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread)"], ["<V> V", "com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>)"], ["<V> V", "com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future<V>, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)"], ["<E> E", "com.google.common.util.concurrent.Uninterruptibles.takeUninterruptibly(java.util.concurrent.BlockingQueue<E>)"], ["<E> void", "com.google.common.util.concurrent.Uninterruptibles.putUninterruptibly(java.util.concurrent.BlockingQueue<E>, E)"], ["void", "com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, long, java.util.concurrent.TimeUnit)"], ["boolean", "com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, int, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.WrappingExecutorService$1.run()"], ["void", "com.google.common.util.concurrent.WrappingExecutorService.execute(java.lang.Runnable)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.WrappingExecutorService.submit(java.util.concurrent.Callable<T>)"], ["<T> java.util.concurrent.Future<T>", "com.google.common.util.concurrent.WrappingExecutorService.submit(java.lang.Runnable, T)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> java.util.List<java.util.concurrent.Future<T>>", "com.google.common.util.concurrent.WrappingExecutorService.invokeAll(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["<T> T", "com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>)"], ["<T> T", "com.google.common.util.concurrent.WrappingExecutorService.invokeAny(java.util.Collection<? extends java.util.concurrent.Callable<T>>, long, java.util.concurrent.TimeUnit)"], ["void", "com.google.common.util.concurrent.WrappingExecutorService.shutdown()"], ["boolean", "com.google.common.util.concurrent.WrappingExecutorService.isShutdown()"], ["boolean", "com.google.common.util.concurrent.WrappingExecutorService.isTerminated()"], ["boolean", "com.google.common.util.concurrent.WrappingExecutorService.awaitTermination(long, java.util.concurrent.TimeUnit)"], ["<V> java.util.concurrent.ScheduledFuture<V>", "com.google.common.util.concurrent.WrappingScheduledExecutorService.schedule(java.util.concurrent.Callable<V>, long, java.util.concurrent.TimeUnit)"], ["com.google.common.escape.Escaper", "com.google.common.xml.XmlEscapers.xmlContentEscaper()"], ["com.google.common.escape.Escaper", "com.google.common.xml.XmlEscapers.xmlAttributeEscaper()"], ["com.google.thirdparty.publicsuffix.PublicSuffixType[]", "com.google.thirdparty.publicsuffix.PublicSuffixType.values()"], ["com.google.thirdparty.publicsuffix.PublicSuffixType", "com.google.thirdparty.publicsuffix.PublicSuffixType.valueOf(java.lang.String)"]]}